[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for num in numbers:\n        #check if number is close to itself\n        if num == 0.0:\n            return False\n        #check if number is close to other number\n        if abs(num) < threshold:\n            return False\n    #if all numbers are close to each other, return true\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not isinstance(numbers, list):\n        raise TypeError(\"numbers must be list\")\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for number in numbers:\n        if abs(number - max(numbers)) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in numbers:\n        if abs(i) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    closed = False\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                closed = True\n    return closed\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for number in numbers:\n        close_element = abs(number - threshold)\n        if close_element > 0:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for number in numbers:\n        if abs(number - threshold) < abs(number + threshold):\n            return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for number in numbers:\n        if abs(number - threshold) <= abs(threshold):\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        if abs(numbers[i]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    paren_list = paren_string.split()\n    first_sub_list = []\n    second_sub_list = []\n    \n    for i in range(len(paren_list)):\n        # We need to check if the rightmost parenthesis are matched\n        if (len(paren_list[i]) == 1):\n            first_sub_list.append(paren_list[i][0])\n            \n            # We need to check if the first sub-group is matched to a nested group\n            if (len(paren_list[i + 1]) == 1):\n                second_sub_list.append(paren_list[i + 1][0])\n                \n    return [first_sub_list, second_sub_list]\n        \n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for group in paren_string.split(')'):\n        if group!= '':\n            result.append(group)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(paren_string)!= 0:\n        return [''.join(separate_paren_groups(paren_string[i])) for i in range(len(paren_string))]\n    return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    res = []\n    while len(paren_string) > 0:\n        open_p = paren_string.find('(')\n        close_p = paren_string.find(')')\n        \n        if open_p!= -1 and close_p!= -1:\n            substr = paren_string[open_p+1:close_p]\n            if substr == '':\n                res.append(paren_string[open_p+1:close_p])\n            elif substr == '(':\n                res.append('(')\n                res.append(paren_string[open_p+1:close_p])\n                paren_string = paren_string[close_p+1:]\n            elif substr == ')':\n                res.append(')')\n                paren_string = paren_string[close_p+1:]\n            else:\n                res.append(substr)\n                paren_string = paren_string[close_p+1:]\n        elif open_p!= -1:\n            res.append(paren_string[open_p+1:])\n            paren_string = paren_string[open_p+1:]\n        elif close_p!= -1:\n            res.append(paren_string[close_p+1:])\n            paren_string = paren_string[close_p+1:]\n    \n    return res\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string == '':\n        return []\n    open_brackets = paren_string.count('(')\n    close_brackets = paren_string.count(')')\n    separate_brackets = []\n    separate_brackets.append(paren_string[0])\n    if open_brackets > close_brackets:\n        separate_brackets.append(paren_string[open_brackets])\n    else:\n        separate_brackets.append(paren_string[close_brackets + 1])\n    open_bracket = open_brackets - close_brackets\n    separate_brackets.append(')')\n    separate_brackets.append(paren_string[close_brackets + 1])\n    return separate_brackets\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_string = []\n    paren_list = []\n    final_list = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            paren_list.append(char)\n        elif char == \")\":\n            if len(paren_list) > 0:\n                if len(paren_list) == 1:\n                    new_string.append(\")\")\n                    final_list.append(new_string)\n                else:\n                    new_string.append(paren_list[-1])\n                    final_list.append(new_string)\n                    new_string = []\n                    paren_list.pop()\n            else:\n                final_list.append(new_string)\n                new_string = []\n        else:\n            new_string.append(char)\n    \n    final_list.append(new_string)\n    \n    return final_list\n        \ndef balanced_parens_check(parens: List[str]) -> bool:\n    \"\"\" Input to this function is a list of strings, where each string is either '(', ')', or '{' and '}'\n    Consider each opening parenthesis and closing parenthesis to be balanced.\n    >>> balanced_parens_check(['(', '{', '}'])\n    True\n    >>> balanced_parens_check(['(', '{', '{'])\n    True\n    >>> balanced_parens_check(['}', '}', '{'])\n    True\n    \"\"\"\n    balanced = True\n    \n    for char in parens:\n        if char not in ['(', '{', '}']:\n            balanced = False\n            break\n    \n    return balanced\n        \ndef remove_decimals(num: str) -> str:\n    \"\"\" Input to this function is a string that contains only decimals. Your goal is to remove those decimals.\n    >>> remove_decimals('99.99')\n    '99.99'\n    >>> remove_decimals('99.99000000')\n    '99.99000000'\n    >>> remove_decimals('99.9')\n    '99.9'\n    \"\"\"\n    num_list = num.split('.')\n    \n    return ''.join(num_list)\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(paren_string) == 0:\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    paren_groups = []\n    open_braces = False\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            if open_braces:\n                paren_groups.append(paren_string[:index] + ')' + paren_string[index:])\n                open_braces = False\n            else:\n                paren_groups.append(paren_string[:index] + '(' + paren_string[index:])\n                open_braces = True\n        elif char == ')':\n            if open_braces:\n                paren_groups.append(paren_string[:index] + ')' + paren_string[index:])\n                open_braces = False\n            else:\n                paren_groups.append(paren_string[:index] + '(' + paren_string[index:])\n                open_braces = True\n        else:\n            if not open_braces:\n                paren_groups.append(paren_string[:index] + char)\n                open_braces = False\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_string = []\n    for x in paren_string:\n        if x == '(':\n            new_string.append('(')\n        elif x == ')':\n            if len(new_string)!= 0:\n                new_string.pop()\n            else:\n                new_string.append(')')\n        elif x == ')':\n            if len(new_string)!= 0:\n                new_string.pop()\n            else:\n                new_string.append(')')\n        else:\n            new_string.append(x)\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split paren_string into list of groups\n    list_of_groups = paren_string.split('(')\n    # check each group is balanced\n    for group in list_of_groups:\n        if group!= '':\n            if is_balanced(group):\n                balanced_groups.append(group)\n            else:\n                return None\n    return balanced_groups\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return number - max(abs(number), 1) # Returns error if number is negative\n    \ndef is_close(number: float, difference: float) -> bool:\n    \"\"\" Given a positive floating point number, it can be decomposed into and\n    integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #return round(number,2)\n    # print(\"truncated\",number)\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return trunc(number, 1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    number_as_int = int(number)\n    decimal_part = 0\n    if number_as_int > 0:\n        decimal_part = abs(number_as_int)\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return float(round(number, -len(str(abs(number)))))/1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return round(number, -int(number))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if number >= 0:\n        return number\n    else:\n        return number / 10\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    number = round(number, 2)\n    number = abs(number)\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    number = str(number)\n    if number[0] == '-':\n        number = number[1:]\n    if number[-1] == '.':\n        number = number[:-1]\n    return float(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i, d = number, abs(number)\n    if d < 0:\n        return truncate_number(i)\n    d = abs(d)\n    if d % 1 == 0:\n        return d // 1\n    else:\n        return truncate_number(i // d)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    check = [0] * len(operations)\n    for i in range(len(operations)):\n        if operations[i] == 0:\n            check[i] = False\n        else:\n            check[i] = True\n    return all(check)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for operation in operations:\n        if operation < 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Create an empty array to keep track of if there is any value below zero\n    # Will store the index of the value above zero in an array\n    # The final value of the array will be the index of the value below zero\n    value_above_zero = []\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Check the correct format and type of input\n    # TODO: Unpack input in to variables\n    balance = 0\n    for operation in operations:\n        balance = balance + operation\n    # TODO: Compute if balnce >= zero\n    return balance >= 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(operations)):\n        if operations[i] == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    account_balances = []\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if operations[0] == 0:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return False if sum(operations) < 0 else True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return statistics.mean(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    mean = sum(numbers) / len(numbers)\n    deviation = 0\n    for num in numbers:\n        deviation += abs(num - mean)\n    return deviation / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numerator = mean_squared_difference(numbers)\n    denominator = sum(numbers)\n    return numerator / denominator\n    # Or you could use\n    # sum(abs(numbers - mean)) / sum(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    mean = mean(numbers)\n    mean_deviation = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers_mean = 0.0\n    for x in numbers:\n        numbers_mean += x - numbers[0]\n    return numbers_mean / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_squares = 0.0\n    for x in numbers:\n        sum_squares += (x - mean) ** 2\n    return (sum_squares / (len(numbers) - 1)) ** 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) < 1:\n        return 0\n    \n    sum_numbers = sum(numbers)\n    if sum_numbers == 0:\n        return 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return mean(numbers) - sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mean = mean(numbers)\n    mean_deviation = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # for a given array, find mean\n    # calculate mean and get difference\n    # divide by 2, and get mean\n    # get difference\n    # take the mean\n    # return mean\n    m = mean(numbers)\n    diff = 0\n    for x in numbers:\n        diff += (x - m) ** 2\n    return diff ** 0.5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return numbers + [delimeter] + [n for n in numbers[:-2] if n!= delimeter] + [n for n in numbers[-2:] if n!= delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [n+delimeter for n in numbers[:len(numbers)-1] if n % 2 == 1] + [n + delimeter for n in numbers[len(numbers)-1:len(numbers)-1+len(numbers)-1:2] if n % 2 == 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [d + delimeter for d in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return numbers + [delimeter]*(len(numbers)-len(numbers)-2)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i + delimeter for i in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i] + delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return numbers + [delimeter] * (len(numbers) - len(numbers) % len(numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    output = []\n    for num in numbers:\n        output.append(num + delimeter)\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]] + numbers[1:]\n    if len(numbers) == 2:\n        return [numbers[0], numbers[0]] + numbers[1:]\n    if len(numbers) == 3:\n        return [numbers[0], numbers[0], numbers[0]] + numbers[1:]\n    if len(numbers) == 4:\n        return [numbers[0], numbers[0], numbers[0], numbers[0]] + numbers[1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Comprehension approach\n    new_numbers = []\n    for index, number in enumerate(numbers):\n        new_numbers.extend([number + delimeter, number])\n        if index + 1 == len(numbers):\n            break\n        new_numbers.extend([number, number + delimeter])\n    return new_numbers\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    paren_string = paren_string.replace(')', ')()()')\n    paren_string = paren_string.replace('(', '(()')\n    paren_string = paren_string.replace(')', '))')\n    paren_string = paren_string.replace('(', '(()')\n    paren_string = paren_string.replace(')', '))()')\n    paren_string = paren_string.replace('(', '(()')\n    paren_string = paren_string.replace(')', ')()')\n    paren_string = paren_string.replace('(', '(')\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    count = 0\n    if '(' in paren_string:\n        for char in paren_string:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count == 0:\n                    result.append(count)\n    else:\n        for char in paren_string:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count == 0:\n                    result.append(count)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    paren_tokens = paren_string.split()\n    level = 0\n    max_level = -1\n    for token in paren_tokens:\n        if token == '(':\n            level += 1\n        elif token == ')':\n            level -= 1\n        elif level > max_level:\n            max_level = level\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    for char in paren_string:\n        if char == '(':\n            i += 1\n        elif char == ')':\n            i -= 1\n            if i == 0:\n                return [0]\n            if i == -1:\n                return [0] + parse_nested_parens(paren_string[i:])\n        else:\n            i += 1\n    raise ValueError(\"Error: Invalid nested parentheses string.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    parsed_string = ''\n    for char in paren_string:\n        if char == '(':\n            parsed_string += '( '\n        elif char == ')':\n            parsed_string +=')'\n        else:\n            parsed_string += char\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def inner_recursion(parens: str, i: int, levels: int) -> List[int]:\n        if i == len(parens):\n            return [levels]\n        out = inner_recursion(parens, i + 1, levels + 1)\n        return out + [levels]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    parts = paren_string.split()\n    result = []\n    for i in range(len(parts)):\n        if len(result) < 1:\n            if parts[i] == \"(\":\n                result.append(1)\n            else:\n                result.append(0)\n        else:\n            if parts[i] == \"(\":\n                result[-1] = result[-1] * 2 + 1\n            else:\n                result[-1] = result[-1] * 3 + 1\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Split string into list of strings\n    paren_list = paren_string.split()\n    # Loop through all possible string elements\n    for string in paren_list:\n        # If string is a nested parentheses string, output the deepest level of nesting\n        if string == '(':\n            depth = 0\n            # Loop through all possible level of nesting\n            for i in range(len(paren_list)):\n                if paren_list[i] == '(':\n                    depth += 1\n                elif paren_list[i] == ')':\n                    depth -= 1\n                if depth == 0:\n                    return [depth + 1]\n    # If not nested parentheses, return nothing\n    return []\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Input string to be parsed\n    current_index = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace('()', '(').replace('()()', '(())()').replace('()', '(').replace('()', ')').replace('()', '(').replace('()()', '(')\n    paren_string = paren_string.replace('))', ')').replace('(', '(').replace(')', ')').replace(')', ')').replace(')', ')').replace(')', ')')\n    paren_string = paren_string.replace('))', ')').replace('(', '(').replace(')', '(').replace('(()', '(()')\n    paren_string = paren_string.replace('()', '(').replace('(())', '(())()')\n    paren_string = paren_string.replace('()', '(').replace('()', ')')\n    paren_string = paren_string.replace(')(', '(').replace(')', ')').replace(')', ')')\n    paren_string = paren_string.replace(')', ')').replace('(()', '(()')\n    paren_string = paren_string.replace(')', ')')\n    paren_string = paren_string.replace('(()', '(()')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [\n        string\n        for string in strings\n        if string.startswith(substring)\n    ]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_strings = []\n    for string in strings:\n        if substring in string:\n            new_strings.append(string)\n    return new_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(substring)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if any(s.startswith(substring) for substring in substring)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(substring)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n    \n    \ndef filter_by_substring_in_order(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings for ones that contain given substring\n    >>> filter_by_substring_in_order([], 'a')\n    []\n    >>> filter_by_substring_in_order(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string[::-1]]\n    \n    \ndef filter_by_substring_in_descending_order(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings for ones that contain given substring\n    >>> filter_by_substring_in_descending_order([], 'a')\n    []\n    >>> filter_by_substring_in_descending_order(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['cde', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # we can use sum([]) to remove the above problem.\n    # now we'll need to first:\n    # find a sum of all the numbers\n    # use the product of all the numbers as our answer\n    # return it\n    sum, product = 0, 1\n    for number in numbers:\n        sum = sum + number\n        product = product * number\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum_product_sum = 0\n    product_sum = 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (sum(numbers), prod(numbers)"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum_value = 0\n    product_value = 1\n    for number in numbers:\n        sum_value += number\n        product_value *= number\n    return sum_value, product_value\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s = s + n * p\n        p = p * n\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not numbers:\n        return (0, 1)\n    sum = numbers[0]\n    product = 1\n    for i in numbers[1:]:\n        sum += i\n        product *= i\n    return (sum, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = 0\n    prod = 1\n    for i in numbers:\n        s += i\n        prod *= i\n    return (s, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if len(numbers) == 0:\n        return (0, 1)\n    \n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    prod = 1\n    for n in numbers:\n        s += n * prod\n        prod *= n\n    return s, prod"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    maxes = []\n    for index in range(len(numbers)):\n        max_value = numbers[index]\n        for i in range(index, len(numbers)):\n            if numbers[i] > max_value:\n                max_value = numbers[i]\n                maxes.append(max_value)\n        maxes.append(max_value)\n    return maxes\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    results = []\n    i = 0\n    for number in numbers:\n        if number > i:\n            while i <= number and number <= i + number:\n                results.append(i)\n                i += 1\n        else:\n            results.append(number)\n    return results\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def process_sequence(sequence: List[int]) -> List[int]:\n        max_element = sequence[0]\n        max_index = 0\n        for i in range(1, len(sequence)):\n            if sequence[i] > max_element:\n                max_element = sequence[i]\n                max_index = i\n        sequence[max_index] = 0\n        return sequence\n    \n    sequence = [0]\n    processed_sequence = process_sequence(sequence)\n    while len(processed_sequence) < len(numbers):\n        sequence += [processed_sequence[len(processed_sequence) - 1]]\n        processed_sequence = process_sequence(sequence)\n    return sequence\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_val = numbers[0]\n    for i in range(1, len(numbers)):\n        max_val = max(max_val, numbers[i])\n    return max_val\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    while len(numbers) > 0:\n        max_value = numbers[0]\n        for i in range(len(numbers) - 1):\n            if numbers[i] > max_value:\n                max_value = numbers[i]\n        result.append(max_value)\n        numbers.pop(0)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_num = numbers[0]\n    current_max = numbers[0]\n    current_max_index = 0\n    i = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_value = numbers[0]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    rolling_max_list = []\n    for i in range(len(numbers)):\n        rolling_max_list.append(max(numbers[i:i+3]))\n        rolling_max_list.append(max(numbers[i+1:i+3]))\n        rolling_max_list.append(max(numbers[i+2:i+3]))\n    return rolling_max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    current_maximum = 0\n    result = []\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return \"\"\n    res = \"\"\n    for i in range(len(string)):\n        if string[i]!= string[len(string) - 1 - i]:\n            res = string[:i] + res + string[i + 1:]\n    return res\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(string):\n        suffix = string[:i+1]\n        while suffix[-1] == string[i]:\n            suffix = suffix[:-1]\n        if suffix == string:\n            return suffix\n        else:\n            i += 1\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check the longest palindrome that is a substring of the string\n    palindrome = ''\n    if string:\n        for i in range(len(string)):\n            if string[i].isalpha() and string[i].isalpha():\n                if string[i].isupper():\n                    if string[i].lower() == string[i].upper():\n                        palindrome += string[i]\n                    else:\n                        palindrome += string[i].upper()\n                else:\n                    palindrome += string[i]\n            else:\n                palindrome += string[i]\n        palindrome = palindrome[::-1]\n    else:\n        palindrome = ''\n    \n    # Check the shortest palindrome that ends with the string\n    for i in range(len(string)//2):\n        if string[i].isalpha():\n            if string[i+1].isalpha():\n                if string[i].isupper():\n                    if string[i+1].isupper():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i]\n                else:\n                    if string[i+1].isalpha():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i] + string[i+1]\n            else:\n                if string[i].isupper():\n                    if string[i+1].isupper():\n                        palindrome += string[i] + string[i+1]\n                    else:\n                        palindrome += string[i]\n                else:\n                    palindrome += string[i] + string[i+1]\n        else:\n            if string[i].isupper():\n                if string[i+1].isupper():\n                    palindrome += string[i] + string[i+1]\n                else:\n                    palindrome += string[i] + string[i+1]\n            else:\n                palindrome += string[i] + string[i+1]\n    \n    return palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    palindromes = []\n    for prefix in string.split('#'):\n        palindromes.append(string[:len(prefix)])\n        prefix = prefix[::-1]\n        for suffix in prefix[::-1].split('##'):\n            palindromes.append(suffix + string[len(prefix)::len(suffix)])\n    return ''.join(palindromes[::-1])\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Base case\n    if not string:\n        return ''\n    # Split the string to the base case\n    base_case = string[0]\n    for i in range(1, len(string)):\n        # Reverse the prefix of the string, suffix\n        prefix = string[i]\n        suffix = string[i-1]\n        # Check if the suffix is a palindrome\n        if suffix == prefix[::-1]:\n            return prefix + make_palindrome(string[i+1:])\n    # No palindrome\n    return base_case\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l_string = string[::-1]\n    i = 1\n    while i < len(l_string):\n        if is_palindrome(l_string[:i]+l_string[i+1:]) == True:\n            break\n        i += 1\n    string = l_string[:i] + l_string[i+1:]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n    prefix = string[0]\n    prefix = string[::-1]\n    postfix = ''\n    for char in string[1:]:\n        postfix += char +''\n        postfix = postfix[::-1]\n    if not is_palindrome(prefix) and not is_palindrome(postfix):\n        return prefix +'' + postfix\n    return prefix +'' + postfix\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(string) == 1:\n        return string[::-1]\n    result = []\n    for c in string:\n        prefix = string[:len(string)//2]\n        suffix = string[len(string)//2:]\n        if is_palindrome(prefix + c):\n            result.append(prefix + c + suffix)\n        else:\n            result.append(prefix + c + suffix)\n    return ''.join(result)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    length = len(string)\n    substring = string[::-1]\n    palindrome = string[::-1]\n    for i in range(1, length):\n        # suffix\n        if is_palindrome(substring[:i]):\n            continue\n        # prefix\n        if is_palindrome(string[i:]):\n            palindrome += string[i:]\n            palindrome += string[:i]\n            break\n    return palindrome\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(['1' if x == '0' else '0' for x in a])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a_xor = 0\n    b_xor = 0\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a_len = len(a)\n    b_len = len(b)\n    result = ''\n    for i in range(a_len):\n        if a[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    for i in range(b_len):\n        if b[i] == '1':\n            result += '1'\n        else:\n            result += '0'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return bin(int(a, 2) ^ int(b, 2)).replace(\"0b\", \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def check(s: str, key: int):\n        return s[: key] + s[key + 1 :]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(ord(b1) ^ ord(a2)) for a2 in a.split() for b1 in b.split()])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(bin(ord(a[i]) ^ bin(ord(b[i]))))[2:]\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    xor = 0\n    for i in range(len(a)):\n        xor ^= ord(a[i]) ^ ord(b[i])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # a = a[::-1]\n    # b = b[::-1]\n    # xor = a + b\n    # print(xor)\n    # return xor[0] + xor[1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(str(ord(i) ^ ord(j)) for i, j in zip(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(strings) < 1:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    len_string = len(strings[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return None if len(strings) == 0 else max(strings, key=len)"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    max_length = 0\n    for i in strings:\n        if len(i) > max_length:\n            max_length = len(i)\n    if max_length == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    longest_string = ''\n    length = len(strings[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # get the longest substring\n    longest = max(strings, key=len)\n    # check if the longest substring is same length as the input string\n    if len(strings) == len(longest):\n        return longest\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    max_len = 0\n    curr = strings[0]\n    for s in strings[1:]:\n        if len(s) > max_len:\n            max_len = len(s)\n        curr = s if len(s) > max_len else curr + s\n    return curr\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    length = len(strings)\n    if length == 0:\n        return None\n    if length == 1:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    length_max = 0\n    for string in strings:\n        length_max = max(length_max, len(string))\n    if length_max == 0:\n        return None\n    return strings[0][:length_max]\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if b == 0:\n        return a\n    elif a == 0:\n        return b\n    elif a >= b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if b == 0:\n        return a\n    if a == 0:\n        return b\n    while (b % a!= 0):\n        b = a\n        a = b // a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a > b:\n        return greatest_common_divisor(b, a % b)\n    return greatest_common_divisor(a % b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    while (b!=0):\n        if a%b==0:\n            a//=b\n        else:\n            b=b-a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    common_divisor = 0\n    if a > b:\n        common_divisor = a\n    else:\n        common_divisor = b\n    for i in range(1,common_divisor + 1):\n        if common_divisor % i == 0:\n            return i\n    return common_divisor\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(a,b+1):\n        if a%i==0 and b%i==0:\n            return i\n    \n    return 0\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = abs(a)\n    b = abs(b)\n    if a > b:\n        max_a = a\n        max_b = b\n    else:\n        max_a = b\n        max_b = a\n    while max_a % max_b!= 0:\n        max_a = max_b\n        max_b = (max_a*max_b)//(a*b)\n    return max_b\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    elif a < 0:\n        return greatest_common_divisor(-a, -b)\n    else:\n        return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b%a, a%b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if b == 0:\n        return a\n    if a == 0:\n        return b\n    return greatest_common_divisor(a % b, b % a)"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prefixes = [None] * len(string)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prefixes = ['']\n    for i in range(1, len(string)):\n        prefixes.append(prefixes[i-1] + string[i-1:])\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    p = ''\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = []\n    start = 0\n    for i, c in enumerate(string):\n        if string[i:i + 3] == 'ab':\n            start = i\n        if i > start + 1 and string[i:i + 3] == 'ac':\n            prefixes.append(string[start:i])\n            start = i\n    prefixes.append(string[start:])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefixes = [string[0]]\n    for i in range(len(string)-1):\n        prefixes.append(string[i]+string[i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:i+2])\n        \n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prefix_list = []\n    for i in range(len(string)):\n        # Check if the current index is a prefix of the string\n        if string[i] in string[:i]:\n            prefix_list.append(string[i:])\n        # No current prefix, but it is not a prefix of the string\n        else:\n            prefix_list.append(string[:i] + string[i + 1:])\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefixes = [string[0]]\n    for index, char in enumerate(string[1:]):\n        prefixes.append(prefixes[-1] + char)\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = ''\n    for i in range(n+1):\n        string = string +'' + str(i)\n    return string\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([\" \" for _ in range(n)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        a = str(n)\n        return a[0:len(a)]\n    \ndef numbers(n: int) -> str:\n    \"\"\" Return a string containing numbers starting from 0 upto n inclusive.\n    >>> numbers(0)\n    '0'\n    >>> numbers(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return str(n)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sequence = ''\n    for i in range(n):\n        sequence += str(i)\n    return sequence\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = ''\n    for i in range(n):\n        s += str(i)\n    return s\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return str(0) +''*n\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nums = str(n)\n    return nums[0:n]\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(map(str, range(0, n)))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    while n > 0:\n        result += str(n)\n        n -= 1\n    return result[::-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return''.join([str(i) for i in range(0, n+1)])\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return sum(1 for c in string if c.isalpha())\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    char_count = 0\n    for char in string:\n        char_count += 1 if char.isupper() else 1\n    return char_count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    char_count = {}\n    for c in string:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    return len(char_count)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n    "
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    characters = []\n    for char in string:\n        characters.append(char)\n    distinct_char = len(set(characters))\n    return distinct_char\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count_distinct = 0\n    for character in string:\n        if character.isalpha():\n            count_distinct += 1\n    return count_distinct\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(c) for c in music_string.replace('o', '').split(',') if c!= 'o' and c!= '.']\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    notes_list = []\n    for char in music_string:\n        if char == '|':\n            notes_list.append(1)\n        elif char == 'o':\n            notes_list.append(0)\n        else:\n            notes_list.append(int(char))\n    return notes_list\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    music_string = music_string.lower().replace('.', 'o')\n    # look for notes and add those which are not part of this format\n    notes = music_string.split('|')\n    for note in notes:\n        note = note.replace('.', 'o').replace('o', '.')\n        try:\n            note = int(note)\n            if note not in range(4, 20):\n                raise ValueError\n        except ValueError:\n            continue\n        return [note]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # NOTE: assert that music_string is a string.\n    # NOTE: test that music_string is a string\n    assert isinstance(music_string, str), 'Input music_string is not a string.'\n    # NOTE: test that music_string is valid music_string\n    assert music_string.isalpha(), 'Input music_string is not a valid music_string.'\n    # NOTE: test that music_string is not empty\n    assert music_string!= '', 'Input music_string is empty.'\n    # NOTE: test that music_string is only letters\n    assert music_string.isalpha(), 'Input music_string is not a valid music_string.'\n    # NOTE: test that music_string is an int\n    assert isinstance(music_string, int), 'Input music_string is not an int.'\n    # NOTE: test that music_string is an int\n    assert music_string >= 0, 'Input music_string is not positive.'\n    # NOTE: test that music_string is at least two characters\n    assert len(music_string) >= 2, 'Input music_string is not at least two characters.'\n    # NOTE: test that music_string is not too short\n    assert music_string[0] == music_string[1], 'Input music_string is not a valid music_string.'\n    # NOTE: test that music_string is not too long\n    assert len(music_string) < 12, 'Input music_string is not too long.'\n    # NOTE: test that music_string is a positive number\n    assert isinstance(music_string, int), 'Input music_string is not a positive integer.'\n    # NOTE: test that music_string is not negative\n    assert not music_string < 0, 'Input music_string is not negative.'\n    # NOTE: test that music_string is not at most 1 character\n    assert len(music_string) <= 1, 'Input music_string is not at most 1 character.'\n    # NOTE: test that music_string is not greater than 24\n    assert music_string > 24, 'Input music_string is not greater than 24.'\n    # NOTE: test that music_string is not less than 0\n    assert music_string < 0, 'Input music_string is not less than 0.'\n    # NOTE: test that music_string is an even number\n    assert music_string % 2 == 0, 'Input music_string is not an even number.'\n    # NOTE: test that music_string is not too long\n    assert len(music_string) < 12, 'Input music_string is not too long.'\n    # NOTE: test that music_string is a positive number\n    assert isinstance(music_string, int), 'Input music_string is not a positive integer.'\n    # NOTE: test that music_string is at least two characters\n    assert len(music_string) >= 2, 'Input music_string is not at least two characters.'\n    # NOTE: test that music_string is not too short\n    assert music_string[0] == music_string[1], 'Input music_string is not a valid music_string.'\n    # NOTE: test that music_string is not too long\n    assert len(music_string) < 12, 'Input music_string is not too long.'\n    # NOTE: test that music_string is a positive number\n    assert isinstance(music_string, int), 'Input music_string is not a positive integer.'\n    # NOTE: test that music_string is not negative\n    assert not music_string < 0, 'Input music_string is not negative.'\n    # NOTE: test that music_string is not at most 1 character\n    assert len(music_string) <= 1, 'Input music_string is not at most 1 character.'\n    # NOTE: test that music_string is not greater than 24\n    assert music_string > 24, 'Input music_string is not greater than 24.'\n    # NOTE: test that music_string is not less than 0\n    assert music_string < 0, 'Input music_string is not less than 0.'\n    # NOTE: test that music_string is a positive number\n    assert music_string % 2 == 0, 'Input music_string is not a positive number.'\n    # NOTE: test that music_string is not at least two characters\n    assert len(music_string) >= 2, 'Input music_string is not at least two characters.'\n    # NOTE: test that music_string is not too short\n    assert music_string[0] == music_strin"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import re\n    music_string = music_string.lower()\n    music_string = re.sub('[^a-z]','', music_string)\n    # note_string = re.sub('[^o|]', '', music_string).lower().replace('|', '|')\n    # note_string = re.sub('[|o]', '', music_string).lower()\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_music = list(music_string)\n    music_dict = {\n        'o': [1, 1],\n        'o|': [2, 2],\n        '.': [3, 1],\n        '.|': [3, 2],\n        'o o|': [4, 4],\n        'o|o|': [5, 5],\n        'o.|': [6, 5],\n        'o.o|': [7, 6]\n    }\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    notes = [c for c in music_string]\n    note_lengths = [len(note) for note in notes]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Fill this in\n    return None\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    music_string = music_string.replace('.', '')\n    music_string = music_string.replace('|', '')\n    music_string = music_string.replace('o', '')\n    \n    if music_string == '':\n        raise Exception('The music string is empty.')\n    \n    notes = list(map(lambda x: int(x) - 1, music_string.split('|')))\n    \n    if notes[-1]!= 0:\n        notes = notes[:-1]\n    \n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [int(m) for m in music_string.split('|')]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if substring == '':\n        return 0\n    \n    count = 0\n    length = len(string)\n    i = 0\n    while i < length:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(1 for s in string.split() if substring.lower() in s.lower())\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(1 for i in range(len(string)) if substring == string[i:])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Counts the number of times the substring can be found\n    count = 0\n    # Iterates through the string\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)-len(substring)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = string.split()\n    if len(s) == len(substring):\n        return 0\n    elif len(s) > len(substring):\n        return len(s)-1\n    else:\n        return -1\n    \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([1 for c in substring if c in string])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Step 1: get the length of the string\n    l = len(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counts = dict()\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            counts[string[i:i + len(substring)]] = counts.get(string[i:i + len(substring)], 0) + 1\n    \n    return counts.get(substring, 0)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(numbers)[::-1]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Our solution is to convert each number to a string and sort the string alphabetically.\n    # This is the most efficient solution because we don't have to iterate over each character.\n    # We can sort the number from 'zero' to 'nine' by using a list of the original string as the key.\n    # We then sort the string alphabetically from smallest to largest.\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    numbers = numbers.replace(' ','')\n    sorted_numbers = sorted(numbers)\n    \n    return''.join(sorted_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get the digits of the number\n    digits = numbers.split(' ')\n    \n    # sort the digits\n    digits = sorted(digits)\n    \n    # create a string with the digits in order\n    return''.join(digits)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = numbers.split(' ')\n    numbers = sorted(numbers)\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if numbers == \"\":\n        raise ValueError(\"Empty string\")\n    return sorted(numbers, reverse=True)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert 'zero' <= numbers.lower() <= 'nine'\n    assert len(numbers) > 0\n    return numbers.lower()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return''.join(numbers.split())\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n    numbers = sorted(numbers)\n    # print(numbers)\n    return''.join(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    minimum = float('inf')\n    closest = None\n    for num in numbers:\n        if num - closest < minimum:\n            closest = num\n            minimum = num - closest\n    return closest, minimum\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # We sort the numbers so that we get the smallest closer\n    numbers = sorted(numbers)\n    left = 0\n    right = len(numbers) - 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    numbers.sort()\n    if numbers[1] - numbers[0] < numbers[2] - numbers[1]:\n        return numbers[0], numbers[1]\n    return numbers[0], numbers[2]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    smaller = min(numbers)\n    larger = max(numbers)\n    return larger, smaller\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Implement the code for your solution.\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    smaller, larger = min(numbers), max(numbers)\n    for i in range(len(numbers)):\n        if numbers[i] < smaller:\n            smaller = numbers[i]\n        elif numbers[i] > larger:\n            larger = numbers[i]\n    return smaller, larger\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    i = 0\n    smallest_diff = numbers[0]\n    smallest_diff_i = 0\n    while smallest_diff_i < len(numbers) - 1:\n        smallest_diff_i += 1\n        if smallest_diff > numbers[smallest_diff_i]:\n            smallest_diff = numbers[smallest_diff_i]\n            smallest_diff_i = 0\n    if smallest_diff == numbers[len(numbers) - 1]:\n        return smallest_diff, smallest_diff\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(numbers)[1], sorted(numbers)[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    smallest = float('inf')\n    smaller = float('inf')\n    large = float('-inf')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest_number = None\n    closest_number = None\n    for number in numbers:\n        if smallest_number is None or number < smallest_number:\n            smallest_number = number\n        if closest_number is None or number > closest_number:\n            closest_number = number\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x / (numbers[-1] - numbers[0]) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Find a better solution\n    minimum, maximum = min(numbers), max(numbers)\n    rescaled = []\n    for number in numbers:\n        if number > maximum:\n            rescaled.append(1.0)\n        elif number < minimum:\n            rescaled.append(0.0)\n        else:\n            rescaled.append(number / maximum)\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num_max, num_min = max(numbers), min(numbers)\n    return [num_max / num for num in numbers] + [num_min / num for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lens = len(numbers)\n    factor = 1 / 2 ** (lens - 1)\n    if lens == 1:\n        return [numbers[0]]\n    else:\n        new_numbers = []\n        for i in range(lens):\n            new_numbers.append(numbers[i] * factor)\n        return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(map(lambda x: x / sum(numbers), numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [n/sum(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    s = sorted(numbers)\n    \n    for i in range(len(s)):\n        if s[i]!= 0:\n            return [0.0, 0.0]\n    \n    return [1.0, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [num*0.5 + 0.5 for num in numbers]"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # first, get the smallest and largest numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    # the smallest number will become 0 and the largest number become 1\n    # thus, the smallest number will be added to the list so that the smallest number becomes 1\n    # so we now have to subtract the smallest number from the largest number to get the number\n    # that is actually in the list\n    min_diff = max_num - min_num\n    # now, calculate the ratio between the smallest number and the max number\n    # note that we will always have a ratio of 1 (max_num) to the max number (min_num)\n    ratio = max_num / min_num\n    # now, apply the transformation\n    rescale_numbers = [ratio * a + min_diff for a in numbers]\n    # finally, return the new list\n    return rescale_numbers\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [int(v) for v in values if type(v) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, (int, float)):\n            new_values.append(value)\n        elif isinstance(value, list):\n            new_values += filter_integers(value)\n        else:\n            new_values.append(value)\n    return new_values\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filtered = []\n    for value in values:\n        if type(value) == int:\n            filtered.append(value)\n    return filtered\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [int(v) for v in values if type(v) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # filter() works with Iterables, List, and Tuple\n    return filter(lambda x: type(x) is int or type(x) is float, values)\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    filtered_values = []\n    for value in values:\n        if type(value) is int:\n            filtered_values.append(value)\n        else:\n            filtered_values.append(0)\n    return filtered_values\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not string:\n        return 0\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 2\n    while i < n:\n        j = i\n        while j < n:\n            if n % j == 0:\n                break\n            j += 1\n        if j == n:\n            return n\n        i += 1\n    return 0"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # divide\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n    # is the number divisible by another number\n    return n // 2\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Add up all the positive integers smaller than n\n    divs = []\n    for num in range(1, n+1):\n        if num > 0:\n            # If the number is divisible by another number, we can skip this number\n            if num % num == 0:\n                continue\n            # If the number is even, we need to add the divisor\n            if num % 2 == 0:\n                divs.append(num)\n    return max(divs)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # First find the largest number that divides n evenly\n    divisor = 2\n    while n % divisor!= 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_divisor(x: int) -> bool:\n        if x == 0:\n            return False\n        if x % 2!= 0:\n            return True\n        return is_divisor(x / 2)\n    \n    for n_sq in range(2, n + 1):\n        if is_divisor(n_sq):\n            return n_sq\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(1,n):\n        if n%i == 0:\n            return i\n        else:\n            continue\n    return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def divisors(n: int) -> list[int]:\n        \"\"\" Find the largest divisors of a number (n, the first argument)\n        >>> divisors(15)\n        [1, 2, 3, 4, 5]\n        \"\"\"\n        \n        divisors_list = []\n        \n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors_list.append(i)\n        \n        return divisors_list\n    \n    return max(divisors(n))\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            l.append(i)\n            if n // i == i:\n                l.append(n//i)\n    if len(l) == 0:\n        return 1\n    return max(l)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_of_divisors = [i for i in range(1, n+1) if n%i == 0]\n    return sum(sum_of_divisors)\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    factor = [n]\n    while n % 2 == 0:\n        n //= 2\n        factor.append(2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            factor.append(i)\n    if n!= 1:\n        factor.append(n)\n    return factor\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            l.append(i)\n            l.append(n // i)\n    return l\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(f'Factorize number {n} not a positive integer.')\n    prime_factors = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            prime_factors.append(i)\n            if n // i == i:\n                prime_factors.append(n//i)\n    return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not isinstance(n, int) or (n < 0):\n        return None\n    if n == 0:\n        return [1]\n    result = []\n    prime = [True for i in range(n)]\n    i = 2\n    while i * i <= n:\n        if prime[i]:\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n        i += 1\n    for j in range(2, n + 1):\n        if prime[j]:\n            result.append(j)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    if n == 1:\n        return prime_factors\n    factors = [1, n]\n    for i in range(2, n):\n        while i in prime_factors:\n            i += 1\n        factors.append(i)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    while n:\n        for k in range(1, int(n ** 0.5) + 1):\n            if n % k == 0:\n                res.append(k)\n                n = n // k\n                break\n    if n > 1:\n        res.append(n)\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = []\n    i = 1\n    while True:\n        i = i * n\n        if i % n == 0:\n            break\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return [2]\n    else:\n        f = []\n        i = 1\n        while i < n:\n            if n % i == 0:\n                f.append(i)\n                n /= i\n            else:\n                i += 1\n        return f\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    result_set = set()\n    for number in numbers:\n        if number in result_set:\n            pass\n        else:\n            result.append(number)\n            result_set.add(number)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    visited = set()\n    for number in numbers:\n        if number in visited:\n            continue\n        else:\n            visited.add(number)\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    seen = {}\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    seen = {}\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n        else:\n            seen[num] += 1\n    for key in seen:\n        if seen[key] > 1:\n            res.append(key)\n    return res\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = {}\n    for num in numbers:\n        if num in count:\n            count[num] = count[num] + 1\n        else:\n            count[num] = 1\n    return [num for num in count if count[num] == 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # fast brute force\n    def remove_duplicates_faster(numbers):\n        \"\"\"\n        >>> remove_duplicates_faster([1, 1, 1, 1, 1])\n        [1, 1, 1]\n        \"\"\"\n        # memoization is slower than using a stack\n        # the answer is the same as the function\n        answer = []\n        memo = {}\n        for number in numbers:\n            if number not in memo:\n                memo[number] = 1\n                answer.append(number)\n            else:\n                answer.append(memo[number])\n                memo[number] += 1\n        return answer\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    ordered_list = sorted(numbers)\n    result = []\n    for element in ordered_list:\n        if ordered_list.count(element) > 1:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    my_numbers = set(numbers)\n    return [i for i in numbers if i not in my_numbers]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for i in numbers:\n        for j in numbers:\n            if i!= j and i < j:\n                res.append(j)\n    return res\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.upper()+string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_str = ''\n    for letter in string:\n        if letter.isupper():\n            new_str += letter.lower()\n        else:\n            new_str += letter.upper()\n    return new_str\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([x.upper() if x.islower() else x.lower() for x in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.upper().lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return string.upper().lower().swapcase("
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # HACK:\n    # Convert the string to lowercase, which is a little confusing.\n    # In the new version, if the character is an uppercase, it can be lowercase, but the character is not.\n    # So, consider the same string as the old, and you have a chance to flip the lowercase character.\n    string = string.lower()\n    # HACK:\n    # Convert the string to uppercase, and add the same character to the end.\n    return string + string[::-1].upper()\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = ''\n    for i in strings:\n        string += i\n    return string\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = \"\"\n    for s in strings:\n        res += s\n    return res\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(strings)"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = ''.join(strings)\n    return string\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i for i in strings if i.startswith(prefix)]"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for s in strings:\n        if s.startswith(prefix):\n            res.append(s)\n    return res\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not strings:\n        return []\n    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefix_list = prefix.split('.')\n    return [string for string in strings if all(prefix in string for prefix in prefix_list)]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [num for num in l if num >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pos = []\n    for n in l:\n        if n >= 0:\n            pos.append(n)\n    return pos\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    out = []\n    for i in range(len(l)):\n        if l[i] >= 0:\n            out.append(l[i])\n    return ou"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    positive = []\n    for item in l:\n        if item!= 0:\n            positive.append(item)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 2: return True\n    if n == 3 or n == 4: return False\n    if n % 2 == 0 or n % 3 == 0: return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0: return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 2 or n == 2 or n == 3:\n        return False\n    elif n == 4:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(n ** 0.5) + 1, 6):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 2:\n        return n == 2\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n    \"*** END CODE HERE ***\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if n == 2:\n        return False\n    elif n == 3 or n == 5:\n        return True\n    elif n == 7:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i <= n:\n            if n % i == 0:\n                return False\n            i += 6\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Corner cases:\n    # 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13 are all multiples of 11\n    # Python 3.7 includes sqrt(11) == sqrt(11) and not (1/sqrt(11)).\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # This version uses a while loop (not in C) which will\n    # execute n / 2, n / 3, n / 5, n / 7, and so on.\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n%2 == 0 or n%3 == 0:\n        return False\n    for i in range(5, n//2):\n        if n%i == 0 or n%(i+2) == 0:\n            return False\n    return True\n    "
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 2 or n == 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(xs)\n    if n == 2:\n        return xs[0] + xs[1] * xs[1]\n    elif n == 3:\n        return (-1) * poly(xs, -1)\n    elif n == 4:\n        return (-1) * poly(xs, -1) + poly(xs, 1)\n    elif n == 5:\n        return (-1) * poly(xs, 1) + poly(xs, 2) + poly(xs, 3) + poly(xs, 4)\n    elif n == 6:\n        return (-1) * poly(xs, 1) + poly(xs, 2) + poly(xs, 3) + poly(xs, 4) + poly(xs, 5) + poly(xs, 6)\n    else:\n        return None\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    non_zero = []\n    sum_ = 0\n    for i in xs:\n        if i!= 0:\n            sum_ += i\n        else:\n            non_zero.append(i)\n    if sum_!= 0:\n        return round(sum_/len(non_zero), 2)\n    else:\n        return 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(xs) % 2 == 0:\n        return find_zero(xs[:-1]) + find_zero(xs[-1:])\n    return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(1, len(xs)):\n        if xs[i] > 0:\n            xs[i] = 0\n            break\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(xs)\n    return max([poly(xs, x) for x in xs]) / n\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    zero = 0\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            zero = xs[i]\n            break\n    return zero\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            return i, coeff\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # find_zero first sort xs to make it a list and then use it\n    xs = sorted(xs)\n    xs_indexes = [i for i, v in enumerate(xs) if v == max(xs)]\n    # use that index to find the zero point\n    return xs[xs_indexes[0]], xs[xs_indexes[1]]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_zero_coeff = max([i for i in xs if i > 0])\n    # xs[i] <= 0 so put i in list if yes.\n    for i in range(max_zero_coeff + 1):\n        if poly(xs, i)!= 0:\n            return i\n    # if all elements of xs is zero return 0\n    return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    zeros = []\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            zeros.append(i)\n    for i, coeff in enumerate(xs):\n        if i not in zeros:\n            return i, coeff\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l.sort()\n    c = 0\n    x = 0\n    while x < len(l):\n        if l[x] % 3 == 0:\n            c += 1\n        x += 1\n    return l[:c]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # [1, 2, 3] => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # [5, 6, 3, 4, 8, 9, 2] => [2, 6, 3, 4, 8, 9, 5]\n    # [5, 6, 3, 4, 8, 9, 2] => [2, 6, 3, 4, 8, 9, 5]\n    # [5, 6, 3, 4, 8, 9, 2] => [2, 3, 5, 6, 7, 8, 9]\n    sorted_list = []\n    for i in l:\n        if (i % 3) == 0:\n            sorted_list.append(i)\n        else:\n            sorted_list.append(i)\n    return sorted_lis"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [l[i] if i%3==0 else l[i//3] for i in range(len(l))]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    p = [1, 2, 3]\n    for i in range(len(p)):\n        if p[i] % 3!= 0:\n            p.insert(i+1, p[i])\n    return p\n    \n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(l)):\n        if i % 3 == 0 and i % 7 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def third(i: int):\n        if i % 3 == 0:\n            return i//3\n        else:\n            return i\n    \n    l = sorted(l, key=third)\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(l) % 3 == 0\n    if len(l) == 0:\n        return []\n    return [l[i] for i in range(0, len(l), 3)]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    third = 0\n    l.sort()\n    for index, number in enumerate(l):\n        if number % 3 == 0:\n            third += 1\n            l[index] = number\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sorted_l = []\n    for i in l:\n        if i%3 == 0 and i!= 0:\n            sorted_l.append(i)\n    sorted_l.sort()\n    return sorted_l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def swap_indices(l: list, i: int, j: int):\n        \"\"\"This function swaps the elements at the indicies i and j in l such that\n        l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n        \"\"\"\n        l[i], l[j] = l[j], l[i]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import operator\n    return sorted(set(l), key=operator.itemgetter(0))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) <= 1:\n        return l\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return [l[i]] + unique(l[:i] + l[i+1:])\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return []\n    \n    # TODO: Is there a faster way to do this?\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (seen_add(x) or seen_add(l[x-1]))]"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [elem for elem in l if elem not in set(l)]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [e for e in set(l) if l.count(e) == 1]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return []\n    if len(l) == 1:\n        return [l[0]]\n    else:\n        return [x for x in l if x not in l[1:]]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(dict.fromkeys(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_num = l[0]\n    for num in l[1:]:\n        if max_num < num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 1:\n        return l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_elem = l[0]\n    for i in l[1:]:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return l[0]\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_value = l[0]\n    for value in l:\n        if value > max_value:\n            max_value = value\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    m = 0\n    for i in l:\n        if m < i:\n            m = i\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    elif n % 11 == 0:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def FizzBuzz(n):\n        def fizzbuzz(n, i):\n            if i % 3 == 0:\n                return fizzbuzz(n, i-1)\n            elif i % 5 == 0:\n                return fizzbuzz(n, i-1) + 1\n            else:\n                return fizzbuzz(n, i-1)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n % 11 == 0:\n        return 0\n    elif n % 3 == 0:\n        return 1\n    else:\n        return fizz_buzz(n-1)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if n is not an integer and n > 0:\n    #     print(\"Enter a number less than or equal to {}\".format(n))\n    #     return\n    # if n % 11 == 0:\n    #     print(\"{} is divisible by 11\".format(n))\n    # else:\n    #     print(\"{} is not divisible by 11\".format(n))\n    # if n % 13 == 0:\n    #     print(\"{} is divisible by 13\".format(n))\n    # else:\n    #     print(\"{} is not divisible by 13\".format(n))\n    if n % 11 == 0:\n        return fizz_buzz(n//10)\n    elif n % 13 == 0:\n        return fizz_buzz(n//10) + 1\n    return fizz_buzz(n//10) + 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    while n:\n        if n % 11 == 0 and n % 13 == 0:\n            count += 1\n            n //= 10\n        else:\n            n //= 10\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 50:\n        return 0\n    elif n >= 51 and n <= 100:\n        if n % 3 == 0:\n            return 1\n        elif n % 5 == 0:\n            return 2\n        elif n % 3 == 0 and n % 5 == 0:\n            return 3\n        else:\n            return 4\n    else:\n        return 'FizzBuzz'\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    if n % 10 == 0:\n        sum = n // 10 + 1\n    elif n % 3 == 0:\n        sum = n // 3 + 1\n    else:\n        sum = n // 3 + 2\n    return sum\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n % 11 == 0 and n % 13 == 0:\n        return 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 7:\n        return 0\n    elif n % 11 == 0 and n % 13 == 0:\n        return 1\n    elif n % 11 == 0:\n        return 2\n    elif n % 13 == 0:\n        return 3\n    else:\n        return 4\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    if n % 3 == 0:\n        count = count + 1\n    if n % 5 == 0:\n        count = count + 1\n    if count == 0:\n        count = 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    for i in range(len(l)):\n        if (i % 2)!= 0:\n            even.append(l[i])\n    return even\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [l[i] for i in range(len(l)) if i % 2 == 0]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    evens = []\n    odds = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return odds + evens\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_idx = 0\n    while even_idx < len(l) - 1:\n        if l[even_idx] % 2 == 0:\n            l[even_idx], l[even_idx + 1] = l[even_idx + 1], l[even_idx]\n        even_idx += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.sort(key=lambda i: i % 2)\n    l.sort(key=lambda i: i * 2)\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_indicies = []\n    odd_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n        else:\n            odd_indicies.append(l[i])\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(l, key=lambda x: x % 2)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return l[::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + odd"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_indicies = []\n    odd_indicies = []\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join the groups to make one group.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # loop through each group. Each group is encoded as two characters, \n    # encodes the current group, then converts back to one character.\n    # back to string and return.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return encode_cyclic(s).translate(None, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return encode_cyclic(s)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s.split(\"\")[0]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements of each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove empty groups.\n    return \"\".join(groups[1:]"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return \"\".join(groups)\n    return \"\".join(list(map(lambda x: x[::-1], groups)))\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(encode_cyclic(s))\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    groups = list(filter(lambda group: len(group) >= 3, s.split(encode_cyclic(s))))\n    return \"\".join(groups[::-1])\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prime = 0\n    for i in range(1, n):\n        if i > 1:\n            if i % 2 == 0:\n                prime += i\n            else:\n                if i % 3 == 0:\n                    prime += i\n                else:\n                    if i % 5 == 0:\n                        prime += i\n                    else:\n                        prime += i + 1\n    return prime\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = 1\n    y = 1\n    while(x < n):\n        y = x + y\n        x = x + y\n        print(y)\n    return y\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    while n <= 0:\n        n = int(input(\"Please, enter an integer: \"))\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = n\n    p = 2\n    while True:\n        if n % p == 0:\n            return p\n        else:\n            p += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    n_max = math.log2(n) + 1\n    \n    for i in range(2, n_max):\n        # Find prime for the given value.\n        if is_prime(i):\n            return i\n        \n    # If the number is not prime, then it is not prime.\n    return -1\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime = False\n    if n < 2:\n        prime = True\n    else:\n        if n == 2:\n            prime = True\n        elif n % 2 == 0:\n            prime = True\n        else:\n            prime = False\n    return prime\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = 1\n    b = 1\n    x = 2\n    while a!= b:\n        if b == 0:\n            break\n        if a % b == 0:\n            x = b\n        else:\n            a, b = b, a+b\n    return x"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_fib_arr = [2,3]\n    for i in range(3,n):\n        prime_fib_arr.append(prime_fib_arr[i-2] + prime_fib_arr[i-1])\n    return prime_fib_arr[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    fib = 1\n    while fib <= n:\n        fib += 2\n        if fib % 2 == 0:\n            fib += 1\n    return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fib_sum = 0\n    fib_sum_1 = 1\n    fib_sum_2 = 1\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0\n    for num in l:\n        total += num\n    if total == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # check if given list is empty or not\n    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # the logic here will be very similar to previous parts\n    # but we will use it for now\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(l) == 3:\n        for i in range(len(l)):\n            if l[i] + l[i+1] + l[i+2] == 0:\n                return True\n        return False\n    \n    for i in range(len(l)):\n        if l[i] + l[i+1] + l[i+2] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in l:\n        sum += i\n        sum %= 100000000007\n    return sum == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            if l[j] + l[i] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # if the list is empty, return false\n    if not l:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] == l[j] and l[i]!= 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    list_zero = 0\n    for element in l:\n        if element % 2!= 0:\n            list_zero += element\n    if list_zero == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n=int(n)\n    r=0\n    for i in range(0,n):\n        if car_on_line(i,i+1,i+2,car_on_line(i+1,i+2,i+3,car_on_line(i+2,i+3,i+4,car_on_line(i+3,i+4,i+5,car_on_line(i+4,i+5,i+6,car_on_line(i+5,i+6,i+7,car_on_line(i+6,i+7,i+8,car_on_line(i+7,i+8,i+9,car_on_line(i+8,i+9,i+10,car_on_line(i+9,i+10,i+11,car_on_line(i+10,i+11,i+12,car_on_line(i+11,i+12,i+13,car_on_line(i+12,i+13,i+14,car_on_line(i+13,i+14,i+15,car_on_line(i+14,i+15,i+16,car_on_line(i+15,i+16,i+17,car_on_line(i+16,i+17,i+18,car_on_line(i+17,i+18,i+19,car_on_line(i+18,i+19,i+20,car_on_line(i+19,i+20,i+21,car_on_line(i+20,i+21,i+22,car_on_line(i+21,i+22,i+23,car_on_line(i+22,i+23,i+24,car_on_line(i+23,i+24,i+25,car_on_line(i+24,i+25,i+26,car_on_line(i+25,i+26,i+27,car_on_line(i+26,i+27,i+28,car_on_line(i+27,i+28,i+29,car_on_line(i+28,i+29,i+30,car_on_line(i+29,i+30,i+31,car_on_line(i+30,i+31,i+32,car_on_line(i+31,i+32,i+33,car_on_line(i+32,i+33,i+34,car_on_line(i+33,i+34,i+35,car_on_line(i+34,i+35,i+36,car_on_line(i+35,i+36,i+37,car_on_line(i+36,i+37,i+38,car_on_line(i+37,i+38,i+39,car_on_line(i+38,i+39,i+40,car_on_line(i+39,i+40,i+41,car_on_line(i+40,i+41,i+42,car_on_line(i+41,i+42,i+43,car_on_line(i+42,i+43,i+44,car_on_line(i+43,i+44,i+45,car_on_line(i+44,i+45,i+46,car_on_line(i+45,i+46,i+47,car_on_line(i+46,i+47,i+48,car_on_line(i+47,i+48,i+49,car_on_line(i+48,i+49,i+50,car_on_line(i+49,i+50,i+51,car_on_line(i+50,i+51,i+52,car_on_line(i+51,i+52,i+53,car_on_line(i+52,i+53,i+54,car_on_line(i+53,i+54,i+55,car_on_line(i+54,i+55,i+56,car_on_line(i+55"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum([0, n - 1])\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(1 for _ in range(n) if car_collision(n-1, _))"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count: int = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i % 2)!= (j % 2): #i is even, j is odd\n                if (car_line_collision(i, j) or car_line_collision(j, i)):\n                    count += 1\n    return count\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n * 2\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    collision_count = 0\n    n_cars_left = n\n    n_cars_right = 0\n    while (n_cars_left > 0) and (n_cars_right < n):\n        if car_race_is_on_left(n_cars_left) and car_race_is_on_right(n_cars_right):\n            collision_count += 1\n            n_cars_left -= 1\n            n_cars_right += 1\n        elif car_race_is_on_right(n_cars_left) and car_race_is_on_left(n_cars_right):\n            collision_count += 1\n            n_cars_left -= 1\n            n_cars_right += 1\n        else:\n            collision_count += 1\n            n_cars_left += 1\n            n_cars_right += 1\n    return collision_count\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return int(n * n)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n_cars = int(n * 0.1)\n    collisions = 0\n    for i in range(n_cars):\n        a = randrange(0, 8)\n        b = randrange(0, 8)\n        if a!= b:\n            collisions += 1\n    return collisions\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l.append(l[-1]+1)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [element + 1 for element in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [element + 1 for element in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(l) + [l[-1] + 1]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_l = []\n    for item in l:\n        new_l.append(item+1)\n    return new_l\n    \n    \n    \ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    >>> decr_list([2, 3, 4])\n    [3, 4, 2]\n    >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [2, 3, 4, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item-1)\n    return new_l\n    \n    \ndef mult_list(l: list):\n    \"\"\"Return list with multiple values multiplied.\n    >>> mult_list([1,2,3])\n    [2, 6, 12]\n    >>> mult_list([1,2,3,4])\n    [4, 2, 6, 12]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item*2)\n    return new_l\n    \n    \n    \ndef divide_list(l: list):\n    \"\"\"Return list divided by given number.\n    >>> divide_list([1,2,3])\n    [1, 3]\n    >>> divide_list([2,4,6,8])\n    [2, 4, 6]\n    >>> divide_list([8,4,6,2,3,1])\n    [8, 4, 6, 2, 3, 1]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item/2)\n    return new_l\n    \n    \ndef square_list(l: list):\n    \"\"\"Return list with squares of all items.\n    >>> square_list([1,2,3,4])\n    [1, 4, 9, 16]\n    >>> square_list([1,3,9,11,2])\n    [1, 9, 27, 49, 125]\n    >>> square_list([2,1,2,3,1])\n    [2, 4, 2, 9, 125]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item*item)\n    return new_l\n    \n    \ndef add_list(l1: list, l2: list):\n    \"\"\"Return list with addition of two lists.\n    >>> add_list([1,2,3],[4,5,6])\n    [6, 7, 8]\n    >>> add_list([1,2,3],[2,3,4])\n    [3, 6, 7]\n    \"\"\"\n    new_l = []\n    for item in l1:\n        new_l.append(item+l2)\n    return new_l\n    \n    \ndef mult_list_rec(l: list):\n    \"\"\"Return list with multiplication of given list.\n    >>> mult_list_rec([1,2,3])\n    [3, 6, 9]\n    >>> mult_list_rec([2,3,4])\n    [9, 12, 27]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item*2)\n    return new_l\n    \n    \ndef add_mult_list_rec(l1: list, l2: list):\n    \"\"\"Return list with addition of two lists.\n    >>> add_mult_list_rec([1,2,3],[4,5,6])\n    [6, 7, 8]\n    >>> add_mult_list_rec([2,3,4],[2,3,4])\n    [3, 6, 7]\n    \"\"\"\n    new_l = []\n    for item in l1:\n        new_l.append(item+l2)\n    return new_l\n    \n    \ndef multi_list(l: list):\n    \"\"\"Return list with multiplication of given list.\n    >>> multi_list([1,2,3])\n    [3, 6, 9]\n    >>> multi_list([2,3,4])\n    [3, 6, 9]\n    \"\"\"\n    new_l = []\n    for item in l:\n        new_l.append(item*"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l.append(l[-1] + 1)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_l = []\n    for elem in l:\n        if elem % 1 == 0:\n            new_l.append(elem)\n    return new_l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.append(l[-1] + 1)\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write an efficient implementation of this function.\n    # See https://en.wikipedia.org/wiki/Pair_sum#Zero_sum\n    l.sort()\n    for i in range(0, len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_of_pairs = 0\n    for x in l:\n        sum_of_pairs += x\n    if sum_of_pairs == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #BFS and DFS for number of elements with sum 0\n    if len(l) == 2:\n        return False\n    if l[0] == l[-1]:\n        return False\n    l.sort()\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        for j in range(len(l)-1):\n            if l[j] + l[j+1] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(1, len(l) - 1):\n        for j in range(len(l) - 1):\n            if l[j] + l[j + 1] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #TODO\n    return len(set(l))==2\n    \ndef pairs_sum(l):\n    \"\"\"\n    pairs_sum takes a list as an input.\n    It returns the number of pairs of numbers that sum to zero.\n    >>> pairs_sum([1, 3, 5, 0])\n    3\n    >>> pairs_sum([1, 3, -2, 1])\n    0\n    >>> pairs_sum([1, 2, 3, 7])\n    0\n    >>> pairs_sum([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum([1])\n    0\n    \"\"\"\n    #TODO\n    return len(set(l))\n    \ndef pairs_sum_to_one(l):\n    \"\"\"\n    pairs_sum_to_one takes a list as an input.\n    It returns the number of pairs of numbers that sum to one.\n    >>> pairs_sum_to_one([1, 3, 5, 0])\n    3\n    >>> pairs_sum_to_one([1, 3, -2, 1])\n    0\n    >>> pairs_sum_to_one([1, 2, 3, 7])\n    0\n    >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum_to_one([1])\n    0\n    \"\"\"\n    #TODO\n    return len(set(l))\n    \ndef pairs_sum_to_two(l):\n    \"\"\"\n    pairs_sum_to_two takes a list as an input.\n    It returns the number of pairs of numbers that sum to two.\n    >>> pairs_sum_to_two([1, 3, 5, 0])\n    3\n    >>> pairs_sum_to_two([1, 3, -2, 1])\n    0\n    >>> pairs_sum_to_two([1, 2, 3, 7])\n    0\n    >>> pairs_sum_to_two([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum_to_two([1])\n    0\n    \"\"\"\n    #TODO\n    return len(set(l))\n    \ndef pairs_sum_to_three(l):\n    \"\"\"\n    pairs_sum_to_three takes a list as an input.\n    It returns the number of pairs of numbers that sum to three.\n    >>> pairs_sum_to_three([1, 3, 5, 0])\n    3\n    >>> pairs_sum_to_three([1, 3, -2, 1])\n    0\n    >>> pairs_sum_to_three([1, 2, 3, 7])\n    0\n    >>> pairs_sum_to_three([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum_to_three([1])\n    0\n    \"\"\"\n    #TODO\n    return len(set(l))\n    \ndef pairs_sum_to_four(l):\n    \"\"\"\n    pairs_sum_to_four takes a list as an input.\n    It returns the number of pairs of numbers that sum to four.\n    >>> pairs_sum_to_four([1, 3, 5, 0])\n    3\n    >>> pairs_sum_to_four([1, 3, -2, 1])\n    0\n    >>> pairs_sum_to_four([1, 2, 3, 7])\n    0\n    >>> pairs_sum_to_four([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum_to_four([1])\n    0\n    \"\"\"\n    #TODO\n    return len(set(l))\n    \ndef pairs_sum_to_five(l):\n    \"\"\"\n    pairs_sum_to_five takes a list as an input.\n    It returns the number of pairs of numbers that sum to five.\n    >>> pairs_sum_to_five([1, 3, 5, 0])\n    3\n    >>> pairs_sum_to_five([1, 3, -2, 1])\n    0\n    >>> pairs_sum_to_five([1, 2, 3, 7])\n    0\n    >>> pairs_sum_to_five([2, 4, -5, 3, 5, 7])\n    0\n    >>> pairs_sum_t"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # TODO: Write your code here\n    for i in range(len(l)):\n        if l[i]!=l[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    '''\n    list(int) = [1, 3, 5, 0]\n    list(int) = [1, 3, -2, 1]\n    list(int) = [1, 2, 3, 7]\n    '''\n    #\"pairs_sum_to_zero\"\n    #[1, 2, 3, 7]\n    #pairs_sum_to_zero([1, 2, 3, 7])\n    #False\n    #pairs_sum_to_zero([1, 2, 3, 7, 5])\n    #False\n    #pairs_sum_to_zero([1, 2, 3, 7, 5, -2])\n    #True\n    return len([i for i in set([i for i in l if i])]) == 2\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(set(l)) == sum(set([n for n in l if l.count(n) == 1]))\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #set the initial state\n    state = {0}\n    #set the history\n    #history = set()\n    #set the state to the initial state\n    l.append(0)\n    #add the state to the history\n    #history.add(0)\n    #store the state in the state\n    #return True if there is a pair that sums to zero\n    def set_state(s, e):\n        #if the pair does not satisfy the condition s<=e\n        #return True\n        if e-s == 0:\n            #if the pair is empty return True\n            #if it is not, return False\n            return True\n        else:\n            #if the pair is not empty, add the pair to the history\n            #if the pair is empty, return False\n            #if it is not empty, update the state to the pair\n            #if it is empty, return False\n            return False\n    #loop the loop until all the pairs sum to zero\n    #if the pair is not empty, add the pair to the history\n    #if the pair is empty, update the state\n    #if the pair is empty, return False\n    #return the new state\n    def check_loop():\n        #if the loop has not ended\n        #return the new state\n        if state == set_state(l[0],l[1]):\n            #return the state after the loop\n            return set_state(l[0],l[2])\n        else:\n            #if the loop has ended, return False\n            return False\n    #run the loop until there is no pair with a pair sum of zero\n    #if no pair is found return False\n    #if a pair is found, return True\n    #if no pair is found return False\n    #if a pair is found, return the new state\n    #return the new state\n    while check_loop():\n        #get the next element\n        l[0] = l[0]+l[1]\n        l[1] = l[1]+l[2]\n        l[2] = l[2]+l[3]\n        #add the current element to the history\n        #if it is not empty\n        if l[0]!=0:\n            #if it is not empty\n            #add the pair to the history\n            #if it is empty, return False\n            #if it is not empty, update the state to the pair\n            #if it is empty, return False\n            return False\n        #if it is empty\n        #add the pair to the history\n        #if it is empty, return False\n        #if it is not empty, update the state to the pair\n        #if it is empty, return False\n        return False\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x / base)"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = str(x)\n    if x.isdigit():\n        x = int(x)\n        if x < 10:\n            return x\n        else:\n            return x*base\n    else:\n        raise ValueError('Give number in string format')\n    \ndef add(x: int, y: int) -> int:\n    \"\"\"Add numbers x and y.\n    return number after addition.\n    >>> add(9, 3)\n    12\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x+y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef sub(x: int, y: int) -> int:\n    \"\"\"Subtract numbers x and y.\n    return number after subtraction.\n    >>> sub(7, 2)\n    '6'\n    >>> sub(9, 3)\n    '0'\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x-y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef mul(x: int, y: int) -> int:\n    \"\"\"Multiply numbers x and y.\n    return number after multiplication.\n    >>> mul(3, 2)\n    6\n    >>> mul(9, 3)\n    120\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x*y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef div(x: int, y: int) -> int:\n    \"\"\"Divide numbers x and y.\n    return number after division.\n    >>> div(3, 2)\n    2\n    >>> div(9, 3)\n    0.3333333333333333\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x/y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef mod(x: int, y: int) -> int:\n    \"\"\"Modulo numbers x and y.\n    return number after modulo.\n    >>> mod(3, 2)\n    2\n    >>> mod(9, 3)\n    0\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x%y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef add_division(x: int, y: int) -> float:\n    \"\"\"Add numbers x and y,\n    return result after addition.\n    >>> add_division(9, 3)\n    12.333333333333334\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return float(x+y)\n    else:\n        raise ValueError('Give number in string format')\n    \ndef subtract(x: int, y: int) -> int:\n    \"\"\"Subtract numbers x and y.\n    return number after subtraction.\n    >>> subtract(9, 3)\n    0\n    >>> subtract(9, 3)\n    9\n    \"\"\"\n    x = str(x)\n    y = str(y)\n    if x.isdigit() and y.isdigit():\n        x = int(x)\n        y = int(y)\n        return x-y\n    else:\n        raise ValueError('Give number in string format')\n    \ndef multiply(x: int, y: int) -> int:\n    \"\"\"Multiply numbers x and y.\n    return number after multiplication.\n    >>> multiply(9, 3)"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return str(x // base) + (\"0\" * (base - x % base))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    b = ''\n    while x!= 0:\n        x, b = divmod(x, base)\n    return b\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x < 10:\n        return str(x * base)\n    else:\n        return str(base ** (x // base))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    while x:\n        res.append(str(x % base))\n        x //= base\n    return ''.join(res[::-1])\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert base <= 10, 'base number should be less than 10'\n    assert isinstance(x, int), 'x is not integer'\n    assert base > x, 'base number should be greater than input number'\n    return str(x // base) + str((x % base) // 10)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #Convert base number to string\n    base_str = str(base)\n    #Convert base number to string\n    x_str = str(x)\n    #Convert base number to string\n    x_str = x_str.zfill(len(base_str))\n    #Convert string back to int\n    x = int(x_str)\n    #Return string\n    return x\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x >= 0:\n        if x <= base:\n            return f'{x}{base}'\n        else:\n            return change_base(x // base, base) + '0' + change_base(x % base, base)\n    else:\n        return '-' + change_base(x // -base, base) + '-' + change_base(x % -base, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if x >= base:\n        return (base - x) * '0' + str(x)\n    else:\n        return '0' * x + str(base)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    area = (a * h)/2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a*(h/2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 0.5 * h * a\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (h ** 2 * a) / 2"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return a * (h / 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return 0.5 * (a * h)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (1 if n==0 else (2 if n==1 else 3) + fib4(n-1))"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 0, \"n must be nonnegative\"\n    fib4_list = [0, 1]\n    for i in range(1, n):\n        fib4_list.append(fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4])\n    return fib4_list[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # make n an integer.\n    n = abs(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if n <= 0:\n    #     return 0\n    # return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    if n <= 0:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1 or n == 0:\n        return n\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return l[len(l)//2]\n    return (l[len(l)//2 - 1] + l[len(l)//2 + 1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    length = len(l)\n    if length % 2!= 0:\n        return l[length//2]\n    else:\n        return (l[length//2] + l[length//2 - 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not l:\n        return None\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) % 2 == 0:\n        med = l[len(l) // 2]\n        return med\n    else:\n        med = (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        return med\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) % 2 == 0:\n        return (l[int((len(l)/2))-1] + l[int((len(l)/2))])/2\n    else:\n        return l[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    len = len(l)\n    if len == 0:\n        return 0\n    elif len % 2 == 1:\n        return (l[len//2] + l[(len-1)//2])/2\n    else:\n        return l[len//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = sorted(l)\n    l.append(l[len(l)//2])\n    return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return statistics.median(l"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return None\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return median([l[i] for i in range(len(l)-1) if l[i] <= l[i+1]])\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #return text[::-1].lower() == text\n    return text.lower() == text[::-1].lower()\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #return text == text[::-1]\n    #return text == text[::-2]\n    #return text == text[::2]\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.lower()\n    text = text.replace(',', '').replace('.', '')\n    text = text.replace(' ', '')\n    text = text.split('-')\n    text = [x for x in text if x]\n    text = [x for x in text if len(x) == len(x[::-1])]\n    return len(text) == len(text)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text_len = len(text)\n    if text_len <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not text:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Type Conversion\n    text = str(text)\n    \n    # Python3 version\n    # if not isinstance(text, str):\n    #     raise TypeError(\"Not a string\")\n    \n    # Check length\n    if len(text) <= 1:\n        return True\n    \n    # Test all characters are same\n    for i in range(len(text) // 2):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n    \n    # Is it a palindrome\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return True\n    \n    string_in_list = text.split(' ')\n    list_length = len(string_in_list)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.lower()\n    if len(text) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = text.replace(' ', '')\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(text)[::-1] == str(text)[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return pow(n, p-1, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return pow(n, p - 1, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 0 and n % p == 0\n    mod = 1\n    while n > 0:\n        mod = mod * (p - n % p)\n        n = n // p\n    return mod\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (p - 1) * p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m = 1\n    while n:\n        if n & 1:\n            m = m * m\n        n >>= 1\n        m = m * m\n    return m\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return int(bin(n)[2:]) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return pow(n, p-1, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    else:\n        return modp(n//10, 10)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    modp = p % n\n    if n == modp:\n        return modp\n    return modp ** 2 % n\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return bin(n)\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) - ord(\"a\")) % 26) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) - ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(e for e in text if not e.lower() in VOWELS)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = 'aeiou'\n    return text.translate(vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    text = text.lower()\n    text = text.split()\n    for word in text:\n        if word not in vowels:\n            text.remove(word)\n    return''.join(text)"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.lower()\n    vowels = \"aeiou\"\n    text = text.replace(\"\\n\",\"\")\n    new_text = []\n    for word in text:\n        if word in vowels:\n            new_text.append(word)\n    return \"\".join(new_text)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return text.translate(str.maketrans('','',string.ascii_lowercase)).lower()\n    \n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lower_text = text.lower()\n    vowels = 'aeiou'\n    new_text = []\n    for letter in lower_text:\n        if letter in vowels:\n            letter = ''\n        new_text.append(letter)\n    return ''.join(new_text)\n    \ndef remove_consonants(text):\n    \"\"\"\n    remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants('abcdef')\n    'cdef'\n    >>> remove_consonants('aaBAA')\n    ''\n    >>> remove_consonants('aaaaa')\n    ''\n    >>> remove_consonants('zBcd')\n    ''\n    \"\"\"\n    lower_text = text.lower()\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_text = []\n    for letter in lower_text:\n        if letter not in consonants:\n            new_text.append(letter)\n    return ''.join(new_text)\n    \ndef number_to_words(n):\n    \"\"\"\n    number_to_words converts a positive integer n to words.\n    >>> number_to_words(1)\n    'one'\n    >>> number_to_words(3)\n    'two'\n    >>> number_to_words(4)\n    'four'\n    >>> number_to_words(5)\n    'five'\n    >>> number_to_words(8)\n    'eight'\n    >>> number_to_words(11)\n    'eleven'\n    >>> number_to_words(12)\n    'twelve'\n    >>> number_to_words(13)\n    'thirteen'\n    >>> number_to_words(14)\n    'fourteen'\n    >>> number_to_words(15)\n    'fifteen'\n    >>> number_to_words(16)\n    'sixteen'\n    >>> number_to_words(17)\n    'seventeen'\n    >>> number_to_words(18)\n    'eighteen'\n    >>> number_to_words(19)\n    'nineteen'\n    >>> number_to_words(20)\n    'twenty'\n    >>> number_to_words(21)\n    'thirty'\n    >>> number_to_words(22)\n    'thirty two'\n    >>> number_to_words(24)\n    'thirty three'\n    >>> number_to_words(24)\n    'thirty four'\n    >>> number_to_words(24)\n    'thirty five'\n    >>> number_to_words(24)\n    'thirty six'\n    >>> number_to_words(24)\n    'thirty seven'\n    >>> number_to_words(25)\n    'thirty eight'\n    >>> number_to_words(26)\n    'thirty nine'\n    >>> number_to_words(27)\n    'thirty ten'\n    >>> number_to_words(28)\n    'thirty eleven'\n    >>> number_to_words(30)\n    'thirty twelve'\n    >>> number_to_words(31)\n    'thirty thirteen'\n    >>> number_to_words(32)\n    'thirty fourteen'\n    >>> number_to_words(33)\n    'thirty fifteen'\n    >>> number_to_words(34)\n    'thirty sixteen'\n    >>> number_to_words(35)\n    'thirty seventeen'\n    >>> number_to_words(36)\n    'thirty eighteen'\n    >>> number_to_words(37)\n    'thirty nineteen'\n    \"\"\"\n    number = int(n)\n    prefix = ''\n    suffix = ''\n    if number > 20:\n        prefix = 'twenty'\n        suffix = 'twenty'\n    elif number > 19:\n        prefix = 'thirty'\n        suffix = 'thirty'\n    elif number > 18:\n        prefix = 'forty'\n        suffix = 'forty'\n    elif number > 17:\n        prefix = 'fifty'\n        suffix = 'fifty'\n    elif number > 16:\n        prefix ='sixty'"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # remove_vowels_2 is a function which takes string and returns string without vowels.\n    vowels_set = set(['a', 'e', 'i', 'o', 'u'])\n    return ''.join(i for i in text if i not in vowels_set)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels = vowels[1:] + vowels[:1]\n    result = \"\"\n    for letter in text:\n        if letter in vowels:\n            result += letter\n        else:\n            result +=''\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = list(text)\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    text_out = \"\"\n    for letter in lst:\n        if letter not in vowel_list:\n            text_out += letter\n    return text_out\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for letter in text:\n        if letter in vowels:\n            result += letter\n        else:\n            result +=''\n    return result.strip()\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(i <= t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    t_idx = [i for i, v in enumerate(l) if v < t]\n    return all(v >= t for v in t_idx)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all([x < t for x in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if all(el <= t for el in l):\n        return True\n    return False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for el in l:\n        if el < t:\n            count += 1\n    return count == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return sum(l[i] < t for i in range(len(l))) == 0\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for x in l:\n        if x < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for value in l:\n        if value < t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n    \ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    3\n    >>> sub(5, 7)\n    4\n    \"\"\"\n    return x - y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    9\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    15\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.0\n    >>> divide(5, 7)\n    3.0\n    \"\"\"\n    return x / y\ndef length(x: int):\n    \"\"\"Get length of given integer\n    >>> length(3)\n    3\n    \"\"\"\n    return len(str(x))\ndef square(x: int):\n    \"\"\"Get square of given integer\n    >>> square(3)\n    9\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\ndef cube(x: int):\n    \"\"\"Get cube of given integer\n    >>> cube(3)\n    96\n    \"\"\"\n    return x ** 3\ndef power(x: int, y: int):\n    \"\"\"Get power of given number x and y\n    >>> power(2, 3)\n    64\n    \"\"\"\n    return x ** y\ndef mod(x: int, y: int):\n    \"\"\"Get modulus of given number x and y\n    >>> mod(2, 3)\n    1\n    >>> mod(5, 3)\n    3\n    \"\"\"\n    return x % y\ndef id(x: int):\n    \"\"\"Get Integer division of given number x\n    >>> id(5)\n    5\n    \"\"\"\n    return x // y"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s0 = list(s0)\n    s1 = list(s1)\n    return all(c1 == c2 for c1, c2 in zip(s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(set(s0) & set(s1)) == len(s0) == len(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    chars = {}\n    for c in s0:\n        chars[c] = chars.get(c, 0) + 1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return set(s0) == set(s1)"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(s0) == len(s1) and same_char_set(s0, s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s0 == s1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s0 == s1.lower()\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Strategy 1: len(s0) == len(s1) and string1[:len(s1)] == string2[:len(s1)]\n    # Strategy 2: string1[:len(s1)] == string2[:len(s1)]\n    # Strategy 3: s1[:len(s1)] == s0[:len(s1)]\n    # Strategy 4: s1[:len(s1)] == s0[:len(s1)] and s0 == s1\n    # Strategy 5: s1[:len(s1)] == s0[:len(s1)] and s0 == s1 and string1[:len(s1)] == string2[:len(s1)]\n    if len(s0) == len(s1):\n        if string1[:len(s1)] == string2[:len(s1)]:\n            return True\n    return False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert n >= 0, \"Invalid number\"\n    a, b = 1, 1\n    while n > 1:\n        a, b = b, a+b\n        n -= 1\n    return b"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert n >= 1\n    if n <= 3:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert(n >= 0)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\ndef main():\n    \"\"\"Print the Fibonacci numbers.\"\"\"\n    import sys\n    print(fib(int(sys.argv[1])))\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\ndef fact(n: int):\n    \"\"\"Return n-th factorial.\n    >>> fact(1)\n    1\n    >>> fact(10)\n    5040\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n*fact(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"Please give a positive value.\")\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    open_brackets = \"<>[]{}\"\n    return all(bracket in open_brackets for bracket in brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return all \">\"\n    return all(brackets[i] == \"<\" for i in range(len(brackets)-1))\n    \ndef can_be_balanced(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\"\n    return True if the brackets could be balanced.\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for c in brackets:\n        if c in '><>':\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    bracket_map = {\">\": \"<\", \">\": \"<\"}\n    for bracket in brackets:\n        if bracket in bracket_map:\n            bracket_map[bracket] = bracket_map[bracket]\n    return all(bracket in bracket_map for bracket in brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(c in brackets for c in [\"<\", \">\"])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def check(bracket):\n        if bracket == \"<\" or bracket == \">\":\n            return bracket == \">\"\n        else:\n            return False\n    def correct_bracket(bracket):\n        if bracket == \">\":\n            return \"<\"\n        else:\n            return bracket\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_correct = True\n        elif bracket == \">\":\n            bracket_correct = True\n        else:\n            bracket_correct = False\n    return bracket_correct\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            if stack:\n                # pop the leftmost element\n                if stack[-1] == \"<\":\n                    stack.pop()\n                else:\n                    return False\n        elif c == \">\":\n            if stack:\n                # pop the rightmost element\n                if stack[-1] == \">\":\n                    stack.pop()\n                else:\n                    return False\n        else:\n            stack.append(c)\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l, r = 0, 0\n    while r < len(brackets):\n        if brackets[r] == \"<\":\n            if l == 0:\n                l = r\n            elif l == r - 1:\n                return False\n            else:\n                return False\n        elif brackets[l] == \">\":\n            if l == r - 1:\n                return False\n            l -= 1\n        elif brackets[l] == \">>\":\n            if l == r - 1:\n                return False\n            l -= 1\n        elif brackets[r] == \">=\":\n            return True\n        r += 1\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    brackets = brackets.split(\"<\")\n    for i in range(len(brackets)):\n        if len(brackets[i]) > 1:\n            if brackets[i][0] == \"<\" and brackets[i][-1] == \">\":\n                if i+1 < len(brackets):\n                    return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all([x > 0 for x in l]) or all([x < 0 for x in l])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    low = 0\n    high = len(l) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if l[mid] < 0:\n            low = mid + 1\n        elif l[mid] > 0:\n            high = mid - 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return l[0] >= l[0]\n    else:\n        return (l[0] > l[1]) and monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return l[-1] >= l[0] and all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # check monotonicity\n    if len(l) < 2:\n        return l == sorted(l)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(x > 0 for x in l)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    return l[0] >= l[1] and l[1] >= l[2] and l[2] >= l[3]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return True if all(x > 0 for x in l) else False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 1:\n        if l[0] >= 0:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i + 1] < l[i]:\n                return False\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # we'll just assume the first element is strictly increasing\n    # if it's decreasing then we can assume it's monotonically increasing\n    # by now\n    # since we have checked -10 earlier, we can assume monotonically increasing\n    if len(l) == 1:\n        return True\n    # other conditions\n    # we've done something different than all cases\n    # e.g. we've never checked monotonically increasing\n    # or we've just reversed the list\n    # e.g. in a couple of cases there are two elements that differ\n    # the first is decreasing\n    return l[0] > l[-1] or l[0] < l[-1]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = sorted(set(l1) & set(l2))\n    return l\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(set(l1)&set(l2)"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return set(l1) & set(l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    set_l1 = set(l1)\n    set_l2 = set(l2)\n    return [x for x in set_l1 if x in set_l2]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    if l1 == l2:\n        return l1\n    else:\n        return l2 + common(l1, l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l1)&set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prime = 2\n    factors = []\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Find the largest prime factor of a number using iteration\n    factor = 1\n    while factor < n:\n        if n % factor == 0:\n            # If n is a prime number, return the value of factor\n            return factor\n        factor += 1\n    # If the number is not prime return 0\n    return 0"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 1\n    while n % i == 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here.\n    i = 2\n    while n%i!= 0:\n        i+=1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = n-1\n    # Part 1\n    while n % 2 == 0:\n        n = n/2\n    # Part 2\n    while n % 3 == 0:\n        n = n/3\n    # It's a prime.\n    if n > 1:\n        return n\n    # It's not a prime.\n    return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #print(f\"n={n}\")\n    #print(f\"{prime_factor(n)}\")\n    factors=[]\n    for i in range(2,int(np.sqrt(n))+1):\n        #print(f\"{i}\",end=\",\")\n        if n%i==0:\n            #print(f\"{i}\")\n            factors.append(i)\n            #print(f\"{factors}\")\n            #print(f\"{n//i}\")\n    return max(factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_factors = set()\n    prime_factors.add(2)\n    x = 3\n    while x <= n:\n        if n % x == 0:\n            prime_factors.add(x)\n            prime_factors.add(n // x)\n        x += 2\n    return max(prime_factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factor = 1\n    if n >= 4:\n        for i in range(2, n):\n            if n % i == 0:\n                factor = i\n                break\n    else:\n        return n\n    return factor\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 0:\n        raise ValueError(\"Invalid value for n\")\n    s = 0\n    for i in range(n):\n        s += i + 1\n    return s\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(range(1,n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(range(1,n+1))"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([i for i in range(1,n+1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return n * (n + 1) // "
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 0\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all([\"(\", \")\" in bracket for bracket in brackets])\n    \ndef calculate_return_value(stack_of_brackets: list):\n    \"\"\"\n    stack_of_brackets is a list of all the brackets in the stack, and they are made up of\n    strings of numbers.\n    stack_of_brackets will contain the string of brackets that have been returned,\n    and their matching numbers, and the maximum number of brackets in the stack.\n    Return the maximum number of brackets in the stack.\n    >>> stack_of_brackets = [\"()\", \"(\", \"()\", \"(\", \")\"]\n    >>> calculate_return_value(stack_of_brackets)\n    2\n    \"\"\"\n    max_brackets = len(stack_of_brackets)\n    return_value = max_brackets\n    for bracket in stack_of_brackets:\n        if bracket == \")\":\n            return_value = return_value - 1\n        elif bracket == \"(\":\n            return_value = return_value + 1\n        elif bracket == \")\":\n            break\n    return return_value\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(bool(bracket) for bracket in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for bracket in brackets:\n        if bracket!= '(':\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for char in brackets:\n        if char == \"(\":\n            if bracket_dict.get(char)!= char:\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    cnt = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    open_brackets = [\"[\", \"(\", \"{\"]\n    closed_brackets = [\")\", \")\"]\n    for char in brackets:\n        if char in open_brackets:\n            open_brackets.remove(char)\n        elif char in closed_brackets:\n            closed_brackets.remove(char)\n    return len(open_brackets) == 0 and len(closed_brackets) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #return len([b for b in brackets if b.isalpha()]) == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    st = \"()\"\n    res = True\n    for i, c in enumerate(st):\n        if c == \"(\":\n            if st[i-1] == \"(\":\n                res = False\n        else:\n            break\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    temp_brackets = list(brackets)\n    for p in range(len(brackets)):\n        if brackets[p] in \"()\":\n            if temp_brackets[p] == \")\":\n                if brackets[p-1] == \"(\":\n                    temp_brackets[p-1] = \")\"\n                else:\n                    return False\n            elif temp_brackets[p] == \")\":\n                if temp_brackets[p+1] == \"(\":\n                    temp_brackets[p+1] = \")\"\n                else:\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    brackets = brackets.replace(\"(\", \"\")\n    brackets = brackets.replace(\")\", \"\")\n    for i in range(len(brackets)):\n        if brackets[i] == \")\":\n            if i == len(brackets) - 1:\n                return False\n            else:\n                if brackets[i + 1] == \")\":\n                    return False\n                else:\n                    continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i + j for i, j in zip(xs[1:], xs[:-1])]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    derivative = [1]\n    for x in xs:\n        derivative.append(x)\n        derivative.append(x * x)\n    return derivative\n    \ndef polynomial_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> polynomial_derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> polynomial_derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative = [1]\n    for x in xs:\n        derivative.append(x)\n        derivative.append(x * x)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [a[1] * xs[0] + a[2] * xs[1] for a, x in zip(xs[0:3], xs[3:])]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not isinstance(xs, list):\n        xs = [xs]\n    derivative = []\n    for i in range(len(xs)):\n        derivative.append(xs[i] + xs[i+1] * xs[i+2] + xs[i+3] * xs[i+1]**2)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [xs[0] * x + xs[1] * x ** 2 + xs[2] * x ** 3 + xs[3] * x ** 4 + xs[4] * x ** 5 for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [xs[i+1] - xs[i] for i in range(len(xs)-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [xs[1], -xs[0] * x + xs[2] * x**2]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [i+j for i, j in zip(xs[:-1], xs[1:])]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    output = [0] * len(xs)\n    for i, x in enumerate(xs):\n        if i == 0:\n            output[i] = x\n        elif i == len(xs) - 1:\n            output[i] = xs[i - 1] * x\n        else:\n            output[i] = xs[i - 1] * xs[i + 1]\n    return output\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #---\n    def _derivative(xs):\n        \"\"\"\n        The derivative of a polynomial is x^2 + 4x + 5.\n        1. x^2 + 4x + 5 --(x + 1)^2 + 2x + 5\n        2. x^2 + 4x + 5 --(x + 1)^2 + 2x + 5 --(x + 1)\n        \"\"\"\n        return [ 2 * (1 + x) for x in xs ]\n    #---\n    return [_derivative(x) for x in xs]"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\ndef fibfib_in_list(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element in the FibFib number sequence.\n    >>> fibfib_in_list(1)\n    0\n    >>> fibfib_in_list(5)\n    4\n    >>> fibfib_in_list(8)\n    24\n    \"\"\"\n    nums = [0, 1]\n    for i in range(2, n):\n        nums.append(nums[i-2] + nums[i-1])\n    return nums[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 0\n    if n==2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def fibfib(n):\n        if n==0: return 0\n        if n==1: return 1\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return 0 if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def fib(n, n1=0, n2=1):\n        if n == 0:\n            return n1\n        if n == 1:\n            return n2\n        return fib(n-1, n2, n1+n2)\n    return fib(n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return fibfib_helper(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = n-1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n<=0:\n        print(\"This function is only valid for n > 0.\")\n    elif n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels_count = 0\n    for i in range(len(s)):\n        if s[i].lower() in 'aeiou':\n            vowels_count = vowels_count + 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = \"aeiouy\"\n    total = 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for letter in s:\n        if letter in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Make a dictionary to store vowels\n    vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    for char in s:\n        if char.lower() in vowels:\n            vowels[char.lower()] += 1\n    return len(vowels)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowel = 'a', 'e', 'i', 'o', 'u'\n    count = 0\n    for letter in s:\n        if letter in vowel:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import string\n    # TODO: Write your code here\n    l = list(string.ascii_lowercase)\n    vowels = 0\n    for i in range(len(s)):\n        if s[i] in l:\n            if s[i] in l[-1:0:-1]:\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_vowels = 0\n    for letter in s:\n        if letter in \"aeiou\":\n            if letter == 'y':\n                num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    count = 0\n    for c in s:\n        if c in 'AEIOU':\n            count+=1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(str(int(x) - shift))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift > len(x):\n        return x[-shift:]+x[:-shift]\n    elif shift < len(x):\n        return x[-shift:]+x[:-shift]\n    else:\n        return x\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    shift_amount = shift % 10\n    shift_amount = shift_amount if shift_amount > 0 else 10 - shift_amount\n    shift_amount = -shift_amount if shift_amount < 0 else shift_amount\n    return str(x)[shift_amount:] + str(x)[:-shift_amount]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert shift >= 0 and shift % len(x) == len(x) - 1, \\\n        \"shift should be a positive integer and first and last digits of x are identical\"\n    reversed_shift = -shift\n    if reversed_shift < len(x):\n        reversed_x = x[reversed_shift:] + x[:reversed_shift]\n        return reversed_x\n    else:\n        return x[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = ''\n    shift = abs(shift)\n    while shift:\n        digit = x % 10\n        result = str(digit) + result\n        x = x // 10\n        shift = shift - 1\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in x:\n        result += str(i)\n    if shift > len(result):\n        return result\n    else:\n        return result[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if shift > len(x):\n        return int(x)\n    \n    y = x[0:shift]\n    y = y + x[shift:]\n    return y"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = str(x)\n    return \"\".join([x[i] for i in range(len(x)) if x[i] == shift[0]])"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if shift > len(x):\n        return x[::-1]\n    else:\n        shift = -shift\n        return x[-shift:] + x[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return str(int(x) + shift)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    for x in s:\n        result = result + ord(x)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return ord(s)\n    return ord(s[0]) + digitSum(s[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def to_ascii(s):\n        return sum(ord(c) for c in s)\n    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.strip(\" \")\n    s = s.upper()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    return int(sum(map(int, s)))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(c.isdigit() for c in s)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code\n    return sum([ord(i) for i in s])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(ord(c) for c in s if c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(ord(ch) for ch in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(map(ord, s))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total_apples = int(s[1]) #get number of apples in string 1\n    total_oranges = int(s[0]) #get number of oranges in string 1\n    total_mango_fruits = int(s[3]) #get number of mango fruits in string 1\n    total_basket = int(s[-1]) #get basket size of string\n    return total_basket - (total_apples + total_oranges + total_mango_fruits) #get number of mango fruits in the basket\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    apple_oranges = n\n    # apple = n - 2 - 2 = 1\n    # oranges = n - 2 - 1 = 2\n    # mango = 1 + 1 + 1 = 3\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for fruit in s:\n        if fruit == \"A\":\n            count += 1\n        elif fruit == \"B\":\n            count += 2\n        elif fruit == \"C\":\n            count += 4\n        elif fruit == \"D\":\n            count += 6\n        elif fruit == \"E\":\n            count += 8\n        elif fruit == \"F\":\n            count += 100\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s==\"0\":\n        return 0\n    s=str(s)\n    if len(s)==n:\n        if s==\"0\":\n            return 0\n        else:\n            return 1\n    if len(s)<n:\n        return \"0\"\n    else:\n        return fruit_distribution(s[:-1],n)\n        \n    \nif __name__ == '__main__':\n    print(fruit_distribution(\"5 apples and 6 oranges\",19))\n    print(fruit_distribution(\"0 apples and 1 oranges\",3))\n    print(fruit_distribution(\"2 apples and 3 oranges\", 100))\n    print(fruit_distribution(\"100 apples and 1 oranges\",120))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Your code goes here\n    for fruit in s:\n        n+=n//(fruit.isdigit())\n    return n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = []\n    for x in s:\n        if x == '0':\n            lst.append(0)\n        elif x == '1':\n            lst.append(1)\n        else:\n            lst.append(x)\n    count = 0\n    for x in range(len(lst)):\n        if lst[x] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s)==0:\n        return 0\n    #\"a\" = \"apples\"\n    #\"b\" = \"oranges\"\n    #\"m\" = \"mango\"\n    #\"f\" = \"fruit\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #s = str(s)\n    if n == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n<0:\n        return -1\n    elif n==0:\n        return 0\n    else:\n        return n%5 + fruit_distribution(s,n//5)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    dist = {'apples':0,'oranges':0,'mango':0}\n    for i in range(len(s)):\n        if s[i] == 'a':\n            dist['apples'] += 1\n        elif s[i] == 'o':\n            dist['oranges'] += 1\n        elif s[i] =='m':\n            dist['mango'] += 1\n    return dist['apples']*dist['oranges']*dist['mango']"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def smallestEvenIndex(arr, index):\n        minIndex = index\n        maxIndex = len(arr) - 1\n        for i in range(index, len(arr)):\n            if arr[i] % 2 == 0:\n                continue\n            if arr[i] % 2 == 1:\n                break\n            else:\n                index = i\n                break\n        if arr[i] % 2 == 0:\n            minIndex = index\n        else:\n            minIndex = index\n        return minIndex, maxIndex\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    odd_index = []\n    even_index = []\n    nodes = []\n    # sorting the array\n    for i in range(0, len(arr)):\n        nodes.append(arr[i])\n    nodes.sort(reverse = True)\n    # if there are even values\n    if len(nodes) % 2 == 0:\n        for j in range(0, len(nodes)):\n            if j % 2 == 0:\n                even_index.append(j)\n            else:\n                odd_index.append(j)\n    # if there are odd values\n    else:\n        for j in range(0, len(nodes)):\n            if j % 2 == 1:\n                odd_index.append(j)\n            else:\n                even_index.append(j)\n    # if there are even values\n    if len(nodes) % 2 == 0:\n        for k in range(0, len(nodes)):\n            if k % 2 == 1:\n                even_index.append(k)\n    # if there are odd values\n    else:\n        for k in range(0, len(nodes)):\n            if k % 2 == 0:\n                odd_index.append(k)\n    print(nodes)\n    print(odd_index)\n    print(even_index)\n    print(even_index[0])\n    if even_index == odd_index:\n        return even_index[0]\n    else:\n        return odd_index[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0]]\n    arr.sort()\n    smallest_value, index = arr[0], 1\n    for i in range(1, len(arr)):\n        if arr[i] == smallest_value * 2:\n            return [arr[index], index]\n        elif arr[i] == smallest_value:\n            index += 1\n            smallest_value = arr[i]\n        else:\n            index += 1\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not arr: return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l, r = 0, len(arr) - 1\n    # find the smallest even value\n    smallest_val = sorted(arr)[1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if arr == []:\n        return []\n    if len(arr) == 0:\n        return []\n    smallest_index = 0\n    smallest_value = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0:\n            if value > smallest_value:\n                smallest_value = value\n                smallest_index = index\n        else:\n            if smallest_value!= 0:\n                if smallest_value % 2 == 0:\n                    if value > smallest_value:\n                        smallest_value = value\n                        smallest_index = index\n    return [smallest_value, smallest_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    arr.sort()\n    return arr[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Approach 1: recur recursively, return the smallest even value\n    # time complexity: O(n)\n    # space complexity: O(1)\n    if not arr:\n        return []\n    # odd values have value 2, even values have value 1, if we find one we return it\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    else:\n        # even values have value 1, if we find it we return the value\n        return [arr[0], 1]\n    \n    # Approach 2: recur in reverse\n    # time complexity: O(n)\n    # space complexity: O(n)\n    # idea: we loop through the array, and if there is an even value, we return the value of the other node.\n    # if there is an odd value, we return the largest index, since we only need 1 value.\n    # If there are no even value, we return the first index, since we only need 1 value\n    # to find the largest index, we'll have to recur in reverse, but the time complexity of this is O(n)\n    # and space complexity is O(n)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    array = [0,0]\n    for node in arr:\n        array.append(abs(node))\n        \n    array.sort()\n    \n    if len(array) % 2 == 0:\n        if array[len(array)//2] == array[len(array)//2-1]:\n            return [array[len(array)//2]]\n        elif array[len(array)//2] % 2 == 0:\n            return [array[len(array)//2], array.index(array[len(array)//2])]\n        else:\n            return [array[len(array)//2], array.index(array[len(array)//2+1])]\n    \n    return [array[len(array)//2], array.index(array[len(array)//2])]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_num = None\n    freq = None\n    max_index = None\n    for i in range(len(lst)):\n        if max_num == None or lst[i] > max_num:\n            max_num = lst[i]\n            freq = 1\n        elif lst[i] > max_num and lst[i] > freq:\n            freq = lst[i]\n            max_num = lst[i]\n            max_index = i\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst == []:\n        return -1\n    return max(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    m = {}\n    for num in lst:\n        m[num] = m.get(num, 0) + 1\n    return max(m, key=m.get)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # First, we check if the list is already sorted.\n    if not lst:\n        return -1\n    # We don't need the last item of the list, so use a counter to mark it as a \"not exist\"\n    count = 0\n    for item in lst:\n        count += 1\n        if item > count:\n            return -1\n    # We don't know which index of the list, so we take a second counter to use it as a counter.\n    return lst.index(max(lst)) + 1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    freq = {}\n    \n    #print(lst)\n    lst_len = len(lst)\n    #print(lst_len)\n    for i in range(0,lst_len):\n        #print(lst[i])\n        if lst[i] in freq:\n            freq[lst[i]] += 1\n        else:\n            freq[lst[i]] = 1\n    \n    max_freq = 0\n    for key, value in freq.items():\n        if value > max_freq:\n            max_freq = value\n    return max_freq if max_freq!= -1 else -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort(reverse=True)\n    n = len(lst)\n    for i in range(n):\n        if lst[i] >= 0 and lst[i] <= n:\n            if lst[i] == n:\n                return -1\n            else:\n                continue\n            break\n    else:\n        return -1\n    return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    max_num = 0\n    for num in lst:\n        if num > max_num:\n            max_num = num\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max(map(lambda x: max(x, index), filter(lambda x: x > 0, lst)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if lst == []:\n        return -1\n    \n    max = -1\n    max_index = -1\n    \n    for index, num in enumerate(lst):\n        if num > 0:\n            if max < num:\n                max = num\n                max_index = index\n            \n    if max_index == -1:\n        return -1\n    else:\n        return max\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Create a dictionary, and iterate through each element, if its the frequency of that element, increase its value by 1, and if it's not the frequency of the element, set to -1.\n    d = {num: num for num in range(1, max(lst) + 1)}\n    for num in lst:\n        if d[num]!= -1:\n            d[num] += 1\n        else:\n            d[num] = 1\n    # Return the maximum element as a dictionary\n    return max(d, key=d.get)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    for i in range(len(lst)):\n        lst[i] = min(lst[i], lst[i+1])\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = []\n    i = 0\n    while i < len(lst):\n        min = lst[i]\n        for j in range(i+1, len(lst)):\n            if lst[j] < min:\n                min = lst[j]\n        res.append(min)\n        i += 1\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(lst)):\n        min = i\n        for j in range(i, len(lst)):\n            if lst[j] < lst[min]:\n                min = j\n        temp = lst[i]\n        lst[i] = lst[min]\n        lst[min] = temp\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    smallest = lst[0]\n    i = 1\n    lst_strange_sorted = []\n    while i < len(lst):\n        if lst[i] < smallest:\n            lst_strange_sorted.append(lst[i])\n        else:\n            smallest = lst[i]\n        i += 1\n    lst_strange_sorted.append(smallest)\n    return lst_strange_sorted\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sort_list = sorted(lst)\n    for num in sort_list:\n        for i in range(len(lst)):\n            if sort_list[i] < num:\n                sort_list[i], sort_list[i - 1] = sort_list[i - 1], sort_list[i]\n                lst.pop()\n                break\n    return sort_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def sorted_num(lst):\n        \"\"\"\n        returns the smallest and largest number in the list\n        \"\"\"\n        smallest = min(lst)\n        largest = max(lst)\n        return [smallest, largest]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort(reverse=True)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    temp = []\n    for i in lst:\n        temp.append(min(lst))\n        lst = sorted(lst, reverse=True)\n    return temp + lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a new list with the lowest, highest and even integers.\n    new_lst = []\n    even_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            new_lst.append(i)\n        else:\n            even_lst.append(i)\n    # Reverse the list.\n    new_lst = new_lst[::-1]\n    # Add even numbers first.\n    for i in even_lst:\n        new_lst.append(i)\n    # Return the new list.\n    return new_lst"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sort_lst = []\n    lst = list(lst)\n    lst.sort()\n    for el in lst:\n        sort_lst.append(el)\n    return sort_lst\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(a)!= 3 or len(b)!= 3 or len(c)!= 3:\n        return -1\n    if sum(a) > sum(b) and sum(a) > sum(c):\n        return sum(a)\n    elif sum(b) > sum(c) and sum(b) > sum(a):\n        return sum(b)\n    elif sum(c) > sum(a) and sum(c) > sum(b):\n        return sum(c)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a)!= int or type(b)!= int or type(c)!= int:\n        return -1\n    elif a == b == c:\n        return 0\n    elif a + b > c and a + c > b and b + c > a:\n        if a == b == c or a == c == b or b == c == a:\n            return 0\n        else:\n            return ((a*b)/2)\n    else:\n        return None\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check if all three sides are greater than the third side\n    if (is_triangle_valid(a, b, c) and\n        sum(a, b, c) > sum(a, b, c) + (sum(b, c, a) * (sum(b, c, a) - sum(a, b, a)))):\n        return ((sum(a, b, c) * sum(b, c, a) * sum(a, b, a) - sum(a, b, b) * sum(a, b, c) * sum(a, b, c) - sum(b, c, a) * sum(b, c, c)) / (\n                (sum(a, b, c) + sum(b, c, a)) * (sum(a, b, c) + sum(b, c, a)) * (sum(a, b, c) + sum(b, c, a))))\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO\n    return round(a * b * c, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a, b, c = float(a), float(b), float(c)\n    if a + b > c or a + c > b or b + c > a:\n        return -1\n    elif a * b == c * c:\n        return a * b\n    else:\n        return a * c + b * c + a * b\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b and b == c and a + b == c:\n        return round(2 * (a * c - b * c), 2)\n    elif a == b or a == c or b == c:\n        return 0\n    elif (a+b) == c or (a+c) == c:\n        return 0\n    elif (a*b) == c or (b*c) == c:\n        return 0\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check if the sides are integers\n    if type(a)!= int or type(b)!= int or type(c)!= int:\n        return -1\n    # Check if the sides are positive\n    if a < 0 or b < 0 or c < 0:\n        return -1\n    # Check if the sides are sum of both sides is greater than the third side\n    if (a + b + c) > (b + c + a):\n        return -1\n    # If all three sides are positive\n    if a + b > c and a > b and a > c:\n        # Return the area of the triangle\n        return (b * c) / 2\n    # If all three sides are negative\n    elif a < 0 or b < 0 or c < 0:\n        return -1\n    # If all three sides are equal\n    elif a == b == c:\n        return (b * c) / 2\n    # If all three sides are greater than the third side\n    elif a > b or b > c or a > c:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (a == b and b == c) or (a == c and c == b) or (a == b and b == c):\n        return (a*b)/2\n    elif a + b + c == 0:\n        return -1\n    else:\n        return ((a + b + c)/2)*triangle_area(a,b,c)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    if a+b>c and a+c>b and b+c>a:\n        if a+b+c==3:\n            return round((a*b)/2, 2)\n        elif a+c+b==3:\n            return round((a*b)/2, 2)\n        elif a+b+c==4:\n            return round((a*b)/2, 2)\n        elif a+b+c==5:\n            return round((a*b)/2, 2)\n        elif a+c+b==5:\n            return round((a*b)/2, 2)\n        elif a+b+c==6:\n            return round((a*b)/2, 2)\n        elif a+c+b==6:\n            return round((a*b)/2, 2)\n        elif a+b+c==7:\n            return round((a*b)/2, 2)\n        elif a+c+b==7:\n            return round((a*b)/2, 2)\n        elif a+b+c==8:\n            return round((a*b)/2, 2)\n        elif a+c+b==8:\n            return round((a*b)/2, 2)\n        elif a+b+c==9:\n            return round((a*b)/2, 2)\n        elif a+c+b==9:\n            return round((a*b)/2, 2)\n        elif a+b+c==10:\n            return round((a*b)/2, 2)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a < b + c:\n        return (a * b) / 2\n    elif b < a + c:\n        return (c * b) / 2\n    elif c < a + b:\n        return (b * c) / 2\n    else:\n        return (a * c) / 2\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(q) is list or type(w) is list or type(q[0]) is list or type(w[0]) is list or type(q[0][0]) is list:\n        return False\n    if (len(q) - len(q) == len(q) and all(isinstance(x,int) for x in q) and all(isinstance(x,int) for x in w)):\n        if max(q) <= max(w):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(w < (q[i] + w[i]) for i in range(len(q)-1)) and all(w <= (q[i] + w[i]) for i in range(len(q)-1))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # first we are checking if the size of the list is equal to the given number of objects and also if the sum of the elements is less than or equal the maximum possible weight.\n    if q == w:\n        return True\n    elif len(q) == len(w):\n        for i in range(len(q)):\n            q_bal_sum = sum(q)\n            for j in range(len(w)):\n                w_bal_sum = sum(w[:j]+w[j+1:])\n                if q_bal_sum - w_bal_sum == w[i]:\n                    return will_it_fly(q[:j]+q[j+1:],w[:j]+w[j+1:])\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if q==w or (sum(q)>max(w,q)) or (w!=w) or (w!=0 and sum(w)-w==w):\n        return False\n    elif w==w:\n        return True\n    else:\n        return False if sum(q)<max(w,q) else True\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return q == q.reverse() and all(int(c) < w for c in q)\n    \n    # Time complexity O(N)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # write your code here\n    if len(q)<=1 or len(w)<=1:\n        return False\n    if q==q[::-1] or w==0:\n        return True\n    \n    return will_it_fly(q[1:],w-q[0]) or will_it_fly(q[2:],w-q[1])\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here.\n    if len(q) == 1:\n        return True\n    elif q[0]!= q[-1]:\n        return False\n    else:\n        sum_x = 0\n        for i in range(1, len(q)):\n            sum_x += q[i]\n            if sum_x > w:\n                return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # if palindrome\n    if(is_palindrome(q) == True):\n        if(len(q) <= w):\n            return True\n        else:\n            return False\n    # else not palindrome\n    else:\n        if(len(q) <= w):\n            return False\n        else:\n            total = 0\n            for i in q:\n                total += i\n            if(total <= w):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if the sum of q elements is less than or equal to the maximum possible weight, it's not balanced and can be fly\n    if sum(q) <= w:\n        return False\n    # if the sum of elements is less than or equal to the maximum possible weight, it's not balanced and can be fly\n    if sum(q) < w:\n        return False\n    # if the list is balanced and the sum of elements is less than or equal to the maximum possible weight, it's not balanced\n    if sum(q) == w:\n        return False\n    # if the list is balanced and the sum of elements is greater than or equal to the maximum possible weight, it's not balanced\n    if sum(q) > w:\n        return False\n    # if the list is balanced and the sum of elements is equal to the maximum possible weight, it's balanced\n    if sum(q) == w:\n        return True\n    # if the list is not balanced, return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(q) <= 1:\n        return True\n    elif q[0] < q[len(q) - 1]:\n        return will_it_fly(q[1:], w + q[0])\n    else:\n        return will_it_fly(q[1:], w)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # find the maximum value of the array\n    max_val = max(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_arr = [None]*len(arr)\n    for i in range(len(arr)):\n        new_arr[i] = arr[len(arr)-1]\n        arr[len(arr)-1] = arr[i]\n        arr[i] = new_arr[i]\n    return arr\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return find_smallest(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(arr) == 1:\n        return 1\n    return smallest_change(arr[1:]) + smallest_change(arr[:-1])\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def reverse_array(arr):\n        # Initialize the reversed array with the first element\n        reversed_array = [None]*len(arr)\n        # Reverse the array\n        for i in range(len(arr)//2):\n            reversed_array[i] = arr[i]\n            reversed_array[-i] = arr[-i-1]\n        # Return the reversed array\n        return reversed_array\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def count_remaining(arr):\n        \"\"\"\n        Given an array arr, count the number of unique elements in the array.\n        \n        For example, the number of elements that can be changed is 1.\n        \"\"\"\n        # TODO: Write your code here\n        return len(set(arr))\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) <= 1: return 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left]!= arr[right]:\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return left\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1\n    \n    if arr[0] < arr[-1]:\n        return smallest_change(arr[1:])\n    else:\n        return smallest_change(arr[:-1])\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    min = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] < min:\n            count += 1\n        else:\n            min = arr[i]\n            count = 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n    lst1 = lst1[:len(lst2)]\n    lst2 = lst2[:len(lst1)]\n    if len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n    \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst1 = list(lst1)\n    lst2 = list(lst2)\n    lst1.sort()\n    lst2.sort()\n    match = 0\n    for i in lst1:\n        if i in lst2:\n            match += 1\n    return match\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # lst1.sort()\n    # lst2.sort()\n    # print(lst1)\n    # print(lst2)\n    # # print(len(lst1))\n    # # print(len(lst2))\n    # count = 0\n    # for el in lst1:\n    #     count += len(el)\n    # for el in lst2:\n    #     count += len(el)\n    # # print(count)\n    # return [el for el in lst1 if len(el) < count and len(el) < len(lst2)]\n    return [el for el in lst1 if len(el) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [item for item in lst1 if item in lst2]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = list(lst1)\n    lst2 = list(lst2)\n    lst_lst = len(lst)\n    lst_lst2 = len(lst2)\n    if lst_lst == lst_lst2:\n        if lst_lst == 1:\n            return lst[0]\n        else:\n            return lst[0] + lst[lst_lst]\n    else:\n        for i in range(lst_lst2):\n            if lst[i] == lst2[i]:\n                lst[i] = lst[i] * 2\n        return lst\n        \nprint(total_match([], [])) # returns []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) # returns ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # returns ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi', 'admin', 'project'])) # returns ['hi', 'admin']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) # returns ['4'"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # \u00a0write your code here\n    count1 = 0\n    count2 = 0\n    for i in lst1:\n        count1 = count1 + len(i)\n    for i in lst2:\n        count2 = count2 + len(i)\n    return count1 - count2"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst1) == len(lst2):\n        return [lst1, lst2]\n    else:\n        return [lst2, lst1]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(s.count(' ') for s in lst1 + lst2)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst3 = list(set(lst1))\n    lst4 = list(set(lst2))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for item in lst1:\n        if len(item) < len(lst2):\n            return lst1\n    return lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Your code here\n    if a == 3 or a == 5 or a == 7:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # a = 30\n    # s = 0\n    # for i in range(1, 100):\n    #     if (i ** 3) % a!= 1:\n    #         s += 1\n    #     else:\n    #         break\n    # return s > 0\n    # a = 30\n    s = 0\n    for i in range(2, 100):\n        for j in range(2, i):\n            if (i % j) == 0:\n                break\n        else:\n            s += 1\n    return s > 0\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a <= 1:\n        return False\n    for n in range(2, a):\n        if (a % n) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == 2:\n        return True\n    if a < 2:\n        return False\n    if a == 3:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here\n    if a <= 100:\n        if a == 3:\n            return True\n        if a % 3 == 0:\n            return False\n        return is_multiply_prime(a - 2)\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a <= 100:\n        return True\n    else:\n        for i in range(1, 100):\n            if (a % i == 0):\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for a_set in range(100,a):\n        if (a_set == 2*a_set):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if (a == 0):\n        return False\n    elif (a % 3 == 0) and (a % 5!= 0):\n        return False\n    elif a == 2:\n        return True\n    elif (a % 3 == 0) and (a % 5 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime_factors = [3, 5] # prime factors list\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # please use an algorithm with memoization\n    if n == 1 or n == 0:\n        return True\n    if n < 1 or n >= n:\n        return False\n    if n%2!= 0:\n        return False\n    # base case\n    return is_simple_power(x, n//2) and is_simple_power(x, n//2)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        return type(n) == int and n**int(n) == x\n    except ValueError:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n < 0:\n        return False\n    while n > 1:\n        if n % 10 == 0:\n            if n == 1:\n                return True\n            return False\n        if n % 10 == 1:\n            return False\n        n //= 10\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Try to calculate the integer power of x, the number x is a simple power of n\n    # if n**int=x: return true\n    # else: return false\n    try:\n        return int(n**int(x)) == x\n    except ValueError:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    if n%2 == 0:\n        return is_simple_power(x, n//2)\n    elif n%2 == 1:\n        return is_simple_power(x, n//2)\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        if x == n:\n            return True\n        elif n % x == 0:\n            return is_simple_power(x, n//x)\n        else:\n            return False"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return is_simple_power(x, 1)\n    if n == 3:\n        return is_simple_power(x, 2)\n    if n == 4:\n        return is_simple_power(x, 3)\n    if n == 5:\n        return is_simple_power(x, 4)\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import math\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if n**int(x) == x else False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def is_simple_power_recur(x, n):\n        if n == 1:\n            return True\n        if n == 0:\n            return False\n        if n % 2 == 0:\n            return is_simple_power_recur(x, n // 2)\n        if n % 2!= 0:\n            return is_simple_power_recur(x, n // 2) or is_simple_power_recur(x + n // 2, n // 2)\n    return is_simple_power_recur(x, n)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a=int(a)\n    if(a<=0):\n        return False\n    if(a==1):\n        return True\n    if(a==2):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return True\n    if(a==0):\n        return False\n    if(a==180):\n        return True\n    if(a==0):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return False\n    if(a==180):\n        return False\n    if(a==-1):\n        return False\n    return True\ndef iscircle(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a circle of some integer number.\n    Notes: you may assume the input is always valid.\n    Examples:\n    iscircle(1) ==> True\n    iscircle(2) ==> False\n    iscircle(-1) ==> True\n    iscircle(64) ==> True\n    iscircle(0) ==> True\n    iscircle(180) ==> False\n    '''\n    a=int(a)\n    if(a<=0):\n        return False\n    if(a==1):\n        return True\n    if(a==2):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return True\n    if(a==0):\n        return False\n    if(a==180):\n        return True\n    if(a==0):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return False\n    if(a==180):\n        return False\n    if(a==-1):\n        return True\n    return True\ndef istriangle(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a triangle of some integer number.\n    Notes: you may assume the input is always valid.\n    Examples:\n    istriangle(1) ==> True\n    istriangle(2) ==> False\n    istriangle(-1) ==> True\n    istriangle(64) ==> True\n    istriangle(0) ==> True\n    istriangle(180) ==> False\n    '''\n    a=int(a)\n    if(a<=0):\n        return False\n    if(a==1):\n        return True\n    if(a==2):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return True\n    if(a==0):\n        return False\n    if(a==180):\n        return True\n    if(a==0):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return False\n    if(a==180):\n        return False\n    if(a==-1):\n        return True\n    return True\ndef issqrt(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a square of some integer number.\n    Examples:\n    iscqrt(1) ==> True\n    iscqrt(2) ==> False\n    iscqrt(-1) ==> True\n    iscqrt(64) ==> True\n    iscqrt(0) ==> True\n    iscqrt(180) ==> False\n    '''\n    a=int(a)\n    if(a<=0):\n        return False\n    if(a==1):\n        return True\n    if(a==2):\n        return False\n    if(a==-1):\n        return True\n    if(a==64):\n        return True\n    if(a==0):\n        return False\n    if(a==180):\n        return True\n    if(a==0):\n        return False\n    if(a==-1):\n        return True\n    return True\ndef ispascal(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a pascal's triangle of some integer number.\n    Examples:\n    ispascal(1) ==> True\n    ispasca"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) == int:\n        if a == 1: return True\n        elif a == 2: return False\n        elif a == -1: return True\n        elif a == 64: return True\n        elif a == 0: return True\n        elif a == 180: return False\n        else: return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert(isinstance(a,int)),'input must be an int'\n    return True if a>0 and a%3==0 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) == int:\n        if a**3 == a**3:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if isinstance(a, int) and isinstance(a, int):\n        if isinstance(a, int):\n            return a**3 == a**3\n        else:\n            return a**3 not in range(1, a**3)\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == -1:\n        return True\n    elif a == 64:\n        return True\n    elif a == 0:\n        return False\n    elif a == 180:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a==0:\n        return True\n    elif a==1:\n        return True\n    elif a==2:\n        return True\n    elif a==3:\n        return False\n    elif a==4:\n        return True\n    elif a==5:\n        return True\n    elif a==6:\n        return False\n    elif a==7:\n        return True\n    elif a==8:\n        return True\n    elif a==9:\n        return False\n    elif a==10:\n        return True\n    elif a==11:\n        return False\n    elif a==12:\n        return True\n    elif a==13:\n        return False\n    elif a==14:\n        return True\n    elif a==15:\n        return False\n    elif a==16:\n        return True\n    elif a==17:\n        return False\n    elif a==18:\n        return True\n    elif a==19:\n        return False\n    elif a==20:\n        return True\n    elif a==21:\n        return False\n    elif a==22:\n        return True\n    elif a==23:\n        return False\n    elif a==24:\n        return True\n    elif a==25:\n        return False\n    elif a==26:\n        return True\n    elif a==27:\n        return False\n    elif a==28:\n        return True\n    elif a==29:\n        return False\n    elif a==30:\n        return True\n    elif a==31:\n        return False\n    elif a==32:\n        return True\n    elif a==33:\n        return False\n    elif a==34:\n        return True\n    elif a==35:\n        return False\n    elif a==36:\n        return True\n    elif a==37:\n        return False\n    elif a==38:\n        return True\n    elif a==39:\n        return False\n    elif a==40:\n        return True\n    elif a==41:\n        return False\n    elif a==42:\n        return True\n    elif a==43:\n        return False\n    elif a==44:\n        return True\n    elif a==45:\n        return False\n    elif a==46:\n        return True\n    elif a==47:\n        return False\n    elif a==48:\n        return True\n    elif a==49:\n        return False\n    elif a==50:\n        return True\n    elif a==51:\n        return False\n    elif a==52:\n        return True\n    elif a==53:\n        return False\n    elif a==54:\n        return True\n    elif a==55:\n        return False\n    elif a==56:\n        return True\n    elif a==57:\n        return False\n    elif a==58:\n        return True\n    elif a==59:\n        return False\n    elif a==60:\n        return True\n    elif a==61:\n        return False\n    elif a==62:\n        return True\n    elif a==63:\n        return False\n    elif a==64:\n        return True\n    elif a==65:\n        return False\n    elif a==66:\n        return True\n    elif a==67:\n        return False\n    elif a==68:\n        return True\n    elif a==69:\n        return False\n    elif a==70:\n        return True\n    elif a==71:\n        return False\n    elif a==72:\n        return True\n    elif a==73:\n        return False\n    elif a==74:\n        return True\n    elif a==75:\n        return False\n    elif a==76:\n        return True\n    elif a==77:\n        return False\n    elif a==78:\n        return True\n    elif a==79:\n        return False\n    elif a==80:\n        return True\n    elif a==81:\n        return False\n    elif a==82:\n        return True\n    elif a==83:\n        return False\n    elif a==84:\n        return True\n    elif a="
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = int(a)\n    if a > 0:\n        if isinteger(a) == True:\n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a % 6 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = abs(a)\n    if a<=1:\n        return True\n    if a<=3:\n        return True if a%2==0 else False\n    if a%3==0:\n        return True\n    if a%4==0:\n        return True if a%5==0 else False\n    return False\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # get the string length and determine a bitmask of the digit \n    # values for that number\n    digits = len(num)\n    mask = [False for _ in range(0, digits)]\n    for digit in range(0, digits):\n        mask[digit] = True\n    \n    # get the bitmask of the first two digits, they represent the decimal\n    # number as a bit and the decimal number as a decimal value\n    digit_2 = num[0:2]\n    digit_1 = num[2:3]\n    \n    # update the mask so that the two digits to mask are 1, and the one\n    # corresponding to the first digit is 0.\n    mask[0] = True\n    mask[1] = False\n    \n    # calculate the number of digits to mask for the first two digits\n    num_2 = digit_2[::-1]\n    num_1 = digit_1[::-1]\n    \n    # if the value of the digit 1 is 1, the corresponding digit is 1, the\n    # corresponding digit is 2, etc.\n    if int(num_1) == 1:\n        mask[0] = True\n        mask[1] = True\n    \n    # if the value of the digit 2 is 1, the corresponding digit is 1, the\n    # corresponding digit is 3, etc.\n    if int(num_2) == 1:\n        mask[1] = True\n        mask[0] = True\n        \n    # calculate the number of digits to mask for the first two digits\n    num_3 = digit_2[::-1]\n    num_2 = digit_1[::-1]\n    \n    # if the value of the digit 1 is 1, the corresponding digit is 1, the\n    # corresponding digit is 5, etc.\n    if int(num_1) == 1:\n        mask[0] = True\n        mask[1] = True\n        \n    # if the value of the digit 2 is 1, the corresponding digit is 1, the\n    # corresponding digit is 7, etc.\n    if int(num_2) == 1:\n        mask[1] = True\n        mask[0] = True\n        \n    # calculate the number of digits to mask for the first two digits\n    num_4 = digit_2[::-1]\n    num_3 = digit_1[::-1]\n    \n    # if the value of the digit 1 is 1, the corresponding digit is 1, the\n    # corresponding digit is 7, etc.\n    if int(num_1) == 1:\n        mask[0] = True\n        mask[1] = True\n        \n    # if the value of the digit 2 is 1, the corresponding digit is 1, the\n    # corresponding digit is 9, etc.\n    if int(num_2) == 1:\n        mask[1] = True\n        mask[0] = True\n        \n    # calculate the number of digits to mask for the first two digits\n    num_5 = digit_2[::-1]\n    num_4 = digit_1[::-1]\n    \n    # if the value of the digit 1 is 1, the corresponding digit is 1, the\n    # corresponding digit is 9, etc.\n    if int(num_1) == 1:\n        mask[0] = True\n        mask[1] = True\n        \n    # if the value of the digit 2 is 1, the corresponding digit is 1, the\n    # corresponding digit is 9, etc.\n    if int(num_2) == 1:\n        mask[1] = True\n        mask[0] = True\n        \n    # calculate the number of digits to mask for the first two digits\n    num_6 = digit_2[::-1]\n    num_5 = digit_1[::-1]\n    \n    # if the value of the digit 1 is 1, the corresponding digit is 1, the\n    # corresponding digit is 9, etc.\n    if int(num_1) == 1:\n        mask[0] = True\n        mask[1] = True\n        \n    # if the value of the digit 2 is 1, the corresponding digit is 1, the\n    # corresponding digit is 9, etc.\n    if int(num_2) == 1:\n        mask[1] = True\n        mask[0] = True\n        \n    # calculate the number of digits to mask for the first two digits\n    num_7 = digit_"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert(num.isnumeric()), \"The input must be numeric.\"\n    assert(len(num)==4), \"The input must be four digits.\"\n    # define an empty list of primes\n    primes = []\n    # define a loop to count the number of digits in the input\n    for x in range(0,len(num)):\n        # if the digit is in the list of primes, then add it to the list\n        if int(num[x]) in primes:\n            # then add the index of the digit to the list\n            # note that we're adding the index of each digit to the list\n            # because adding a digit to the list means it doesn't need to go in the loop, \n            # so we have to check if the number has more digits than one\n            if len(primes) > len(num)-1:\n                break\n            # we've gotten to the end of the loop, add it to the list\n            primes.append(int(num[x]))\n        # if the digit isn't in the list of primes, then continue with next digit\n        else:\n            # we're adding the number to the list as we've checked the length of the number\n            # so this line doesn't need to go into the loop\n            # add the index of the digit to the list\n            # note that we're adding the index of each digit to the list\n            # because adding a digit to the list means it doesn't need to go in the loop, \n            # so we have to check if the number has more digits than one\n            if len(primes) > len(num)-1:\n                break\n            # add the index of the digit to the list\n            primes.append(int(num[x]))\n    # return the length of the list of primes\n    return len(primes)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    ret = 0\n    for i in range(num[0]):\n        ret += 1\n    for i in range(num[1]):\n        ret += 1\n    for i in range(num[2]):\n        ret += 1\n    for i in range(num[3]):\n        ret += 1\n    for i in range(num[4]):\n        ret += 1\n    for i in range(num[5]):\n        ret += 1\n    for i in range(num[6]):\n        ret += 1\n    for i in range(num[7]):\n        ret += 1\n    for i in range(num[8]):\n        ret += 1\n    for i in range(num[9]):\n        ret += 1\n    for i in range(num[10]):\n        ret += 1\n    for i in range(num[11]):\n        ret += 1\n    for i in range(num[12]):\n        ret += 1\n    for i in range(num[13]):\n        ret += 1\n    for i in range(num[14]):\n        ret += 1\n    for i in range(num[15]):\n        ret += 1\n    for i in range(num[16]):\n        ret += 1\n    for i in range(num[17]):\n        ret += 1\n    for i in range(num[18]):\n        ret += 1\n    for i in range(num[19]):\n        ret += 1\n    for i in range(num[20]):\n        ret += 1\n    for i in range(num[21]):\n        ret += 1\n    for i in range(num[22]):\n        ret += 1\n    for i in range(num[23]):\n        ret += 1\n    for i in range(num[24]):\n        ret += 1\n    for i in range(num[25]):\n        ret += 1\n    for i in range(num[26]):\n        ret += 1\n    for i in range(num[27]):\n        ret += 1\n    for i in range(num[28]):\n        ret += 1\n    for i in range(num[29]):\n        ret += 1\n    for i in range(num[30]):\n        ret += 1\n    for i in range(num[31]):\n        ret += 1\n    for i in range(num[32]):\n        ret += 1\n    for i in range(num[33]):\n        ret += 1\n    for i in range(num[34]):\n        ret += 1\n    for i in range(num[35]):\n        ret += 1\n    for i in range(num[36]):\n        ret += 1\n    for i in range(num[37]):\n        ret += 1\n    for i in range(num[38]):\n        ret += 1\n    for i in range(num[39]):\n        ret += 1\n    for i in range(num[40]):\n        ret += 1\n    for i in range(num[41]):\n        ret += 1\n    for i in range(num[42]):\n        ret += 1\n    for i in range(num[43]):\n        ret += 1\n    for i in range(num[44]):\n        ret += 1\n    for i in range(num[45]):\n        ret += 1\n    for i in range(num[46]):\n        ret += 1\n    for i in range(num[47]):\n        ret += 1\n    for i in range(num[48]):\n        ret += 1\n    for i in range(num[49]):\n        ret += 1\n    for i in range(num[50]):\n        ret += 1\n    for i in range(num[51]):\n        ret += 1\n    for i in range(num[52]):\n        ret += 1\n    for i in range(num[53]):\n        ret += 1\n    for i in range(num[54]):\n        ret += 1\n    for i in range(num[55]):\n        ret += 1\n    for i in range(num[56]):\n        ret += 1\n    for i in range(num[57]):\n        ret += 1\n    for i in range(num[58]):\n        ret += 1\n    for i in range(num[59]):\n        ret += "
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def is_prime(num):\n        \"\"\"Is the number prime?\n        >>> is_prime(2)\n        True\n        >>> is_prime(3)\n        False\n        \"\"\"\n        if num == 1:\n            return False\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_digits(num):\n        \"\"\"Count the number of digits in num.\n        >>> count_digits(\"AB\")\n        1\n        >>> count_digits(\"1077E\")\n        2\n        >>> count_digits(\"123456789ABCDEF0\")\n        6\n        >>> count_digits(\"2020\")\n        2\n        \"\"\"\n        if num == 0:\n            return 0\n        else:\n            return 1 + count_digits(num // 10)\n    \n    return count_digits(num)"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num = num.lower()\n    numbers = []\n    for char in num:\n        if char == '0':\n            continue\n        if char == '1':\n            numbers.append(2)\n        elif char == '2':\n            numbers.append(3)\n        elif char == '3':\n            numbers.append(5)\n        elif char == '4':\n            numbers.append(7)\n        elif char == '5':\n            numbers.append(11)\n        elif char == '6':\n            numbers.append(13)\n        elif char == '7':\n            numbers.append(17)\n        elif char == '8':\n            numbers.append(19)\n        elif char == '9':\n            numbers.append(23)\n        elif char == 'a':\n            numbers.append(25)\n        elif char == 'b':\n            numbers.append(29)\n        elif char == 'c':\n            numbers.append(31)\n        elif char == 'd':\n            numbers.append(33)\n        elif char == 'e':\n            numbers.append(35)\n        elif char == 'f':\n            numbers.append(39)\n    numbers = sorted(set(numbers))\n    count = 0\n    for num in numbers:\n        if num <= 1:\n            continue\n        elif num == 2:\n            count += 2\n        elif num <= 3:\n            count += 3\n        elif num <= 5:\n            count += 5\n        elif num <= 7:\n            count += 7\n        elif num <= 11:\n            count += 11\n        elif num <= 13:\n            count += 13\n        elif num <= 17:\n            count += 17\n        elif num <= 19:\n            count += 19\n        elif num <= 23:\n            count += 23\n        elif num <= 25:\n            count += 25\n        elif num <= 29:\n            count += 29\n        elif num <= 31:\n            count += 31\n        elif num <= 33:\n            count += 33\n        elif num <= 35:\n            count += 35\n        elif num <= 39:\n            count += 39\n        else:\n            count += 40\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if num == \"\":\n        return 0\n    d = {}\n    for s in num:\n        d[s] = d.get(s, 0) + 1\n    return d[s]\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def num_as_string(num):\n        num = str(num)\n        count = 0\n        for i in range(len(num)):\n            count += int(num[i])\n        return count\n    \n    def num_as_int(num):\n        num = int(num)\n        return num\n    \n    def prime(num):\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num = num.upper()\n    s = 0\n    num = num.replace('A', '0')\n    num = num.replace('B', '1')\n    num = num.replace('C', '2')\n    num = num.replace('D', '3')\n    num = num.replace('E', '4')\n    num = num.replace('F', '5')\n    for i in range(len(num)):\n        num = num[i]\n        s += int(num)\n        if int(num) < 2:\n            continue\n        if int(num) < 3 or int(num) < 5:\n            continue\n        if int(num) < 7 or int(num) < 11:\n            continue\n        if int(num) < 13:\n            continue\n        if int(num) < 17:\n            continue\n        if int(num) < 21:\n            continue\n        if int(num) < 23:\n            continue\n        if int(num) < 25:\n            continue\n        if int(num) < 27:\n            continue\n        if int(num) < 31:\n            continue\n        if int(num) < 33:\n            continue\n        if int(num) < 35:\n            continue\n        if int(num) < 37:\n            continue\n        if int(num) < 39:\n            continue\n        if int(num) < 41:\n            continue\n        if int(num) < 43:\n            continue\n        if int(num) < 45:\n            continue\n        if int(num) < 47:\n            continue\n        if int(num) < 49:\n            continue\n        if int(num) < 51:\n            continue\n        if int(num) < 53:\n            continue\n        if int(num) < 55:\n            continue\n        if int(num) < 57:\n            continue\n        if int(num) < 59:\n            continue\n        if int(num) < 61:\n            continue\n        if int(num) < 63:\n            continue\n        if int(num) < 65:\n            continue\n        if int(num) < 67:\n            continue\n        if int(num) < 69:\n            continue\n        if int(num) < 71:\n            continue\n        if int(num) < 73:\n            continue\n        if int(num) < 75:\n            continue\n        if int(num) < 77:\n            continue\n        if int(num) < 79:\n            continue\n        if int(num) < 81:\n            continue\n        if int(num) < 83:\n            continue\n        if int(num) < 85:\n            continue\n        if int(num) < 87:\n            continue\n        if int(num) < 89:\n            continue\n        if int(num) < 91:\n            continue\n        if int(num) < 93:\n            continue\n        if int(num) < 95:\n            continue\n        if int(num) < 97:\n            continue\n        if int(num) < 99:\n            continue\n        if int(num) < 101:\n            continue\n        if int(num) < 103:\n            continue\n        if int(num) < 105:\n            continue\n        if int(num) < 107:\n            continue\n        if int(num) < 109:\n            continue\n        if int(num) < 111:\n            continue\n        if int(num) < 113:\n            continue\n        if int(num) < 115:\n            continue\n        if int(num) < 117:\n            continue\n        if int(num) < 119:\n            continue\n        if int(num) < 121:\n            continue\n        if int(num) < 123:\n            continue\n        if int(num) < 125:\n            continue\n        if int(num) < 127:\n            continue\n        if int(num) < 129:\n            continue\n        if int(num) < 131:\n            continue\n        if int(num) < 133:\n            continue\n        if int(num) < 135:\n            continue\n        if int(num) < 137:\n            continue\n        if int(num) < 139:\n            continue\n        if int(num) < 141:\n            continue\n        if int(num) < 143:\n            continue\n        if int(num) < 145:\n            continue\n        if int(num) < 147:\n            continue\n        if int(num) "
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # You are given a string representing a number.\n    # You have to determine how many digits are in the string,\n    # and how many unique digits, as integers can only contain \n    # 0 and 1.\n    \n    # Your function should take a string representing a number and\n    # return an integer representing the number of digits.\n    \n    # Note that all digits can be repeated (e.g. \"234\" can be \"234\"\n    # or \"0\" because it is 0 and 0.\n    \n    # Examples:\n    # num = \"AB\"\n    # The output should be 2.\n    # num = \"1077E\"\n    # The output should be 1.\n    # num = \"ABED1A33\"\n    # The output should be 4.\n    # num = \"123456789ABCDEF0\"\n    # The output should be 6.\n    # num = \"2020\"\n    # The output should be 2.\n    \n    # You may assume all digits can be represented as integers.\n    \n    # Your function should accept a string representing a number and \n    # return an integer representing the number of digits.\n    \n    # You may assume the input is always correct or empty string, \n    # and symbols A,B,C,D,E,F are always uppercase.\n    \n    # Examples:\n    # num = \"AB\"\n    # The output should be 2.\n    # num = \"1077E\"\n    # The output should be 1.\n    # num = \"ABED1A33\"\n    # The output should be 4.\n    # num = \"123456789ABCDEF0\"\n    # The output should be 6.\n    # num = \"2020\"\n    # The output should be 2.\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Note: The string of digits must be a proper, \n    # python formatted string. \n    # NOTE: If you want to convert a python variable into a string, \n    # you have to make a variable you can convert to a string \n    # by using str(). \n    \n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    binary = ''\n    number = str(decimal)\n    for i in number:\n        if i == '0':\n            binary += '0'\n        elif i == '1':\n            binary += '1'\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    binary = []\n    number = str(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    binary = \"\"\n    if decimal < 0:\n        decimal = -decimal\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    binary = binary[::-1]\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    binary = str(decimal)\n    binary = binary.replace(\"-\", \"\")\n    return binary[:-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # this will convert decimal to binary using binary conversion\n    result = ''\n    temp = ''\n    for i in range(0, len(str(decimal))):\n        temp = str(decimal)[i]\n        if temp == '0':\n            result += '0'\n        elif temp == '1':\n            result += '1'\n        else:\n            result += 'db'\n    # print(result)\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    binary = ''\n    binary = binary + bin(decimal)[2:]\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    binary = ''\n    i = 0\n    while decimal > 0:\n        binary = binary + str(decimal % 2)\n        decimal = decimal // 2\n        i += 1\n    binary = binary + 'db'\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    if decimal == 0:\n        return '0'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    binary = \"\"\n    str_dec = str(decimal)\n    for digit in str_dec:\n        binary += str(int(digit))\n    return binary\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s=s.lower()\n    for i in range(len(s)-2):\n        count=0\n        for j in range(len(s)-i):\n            if s[j]==s[j+i]:\n                count+=1\n            else:\n                break\n        if count==3:\n            return True\n    return Fals"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count_a = 0\n    count_b = 0\n    for char in s:\n        if char == 'a':\n            count_a += 1\n        elif char == 'b':\n            count_b += 1\n    if count_a >= 2 and count_b >= 2:\n        return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    \n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n        elif count > 0 and s[i]!= s[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not s:\n        return True\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    # check if the string is all digits.\n    if s.isdigit():\n        return all(a <= b for a, b in zip(s[:3], s[3:]))\n    # check if the string is all letters.\n    if all(s.count(a) == b for a, b in zip(s[:3], s[3:])):\n        return all(s[i+1] == s[i] for i in range(len(s)-2, -1, -1))\n    # check if the string is all unique characters.\n    return all(s.count(a) == b for a, b in zip(s[:3], s[3:]))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    check = 0\n    # iterate through the string\n    for i in range(len(s)-2):\n        # if the char is not a number\n        if not is_number(s[i]):\n            # if there are no repeating characters\n            if check:\n                # update the check\n                check = 0\n            else:\n                # update the character\n                check += 1\n    # return if the length of the string is at least 3\n    if check == len(s)-3:\n        return True\n    else:\n        return False\ndef is_number(c):\n    \"\"\"You are given a string c.\n    Your task is to check if the string is a number or not.\n    A string is a number if it has at least 2 digits,\n    that is, has at least one digit, and that the digit has at least 1 digit.\n    For example:\n    is_number('a') => False\n    is_number('aa') => True\n    is_number('abcd') => True\n    is_number('aaabb') => True\n    is_number('0') => True\n    \"\"\"\n    # number is only digits\n    if len(c)<2:\n        return False\n    # character is not a number\n    if c not in range(10):\n        return False\n    # if the character is a digit\n    if not is_digit(c):\n        return False\n    return True\ndef is_digit(c):\n    \"\"\"You are given a string c.\n    Your task is to check if the string is a digit or not.\n    A string is a digit if it has at least 1 digit,\n    that is, has at least 1 digit, and that the digit has at least 1 digit.\n    For example:\n    is_digit('a') => True\n    is_digit('aa') => True\n    is_digit('abcd') => False\n    is_digit('aaabb') => False\n    is_digit('0') => True\n    \"\"\"\n    # character is not a digit\n    if c not in range(10):\n        return False\n    # if the character is a digit\n    if c=='0':\n        return False\n    # character is a digit\n    return True\ndef is_long_words(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is a long word or not.\n    A string is a long word if it has at most 3 words,\n    that is, has at least 2 words, and that it contains no digits.\n    For example:\n    is_long_words('a') => True\n    is_long_words('aa') => False\n    is_long_words('abcd') => False\n    is_long_words('aabb') => True\n    is_long_words('0') => True\n    \"\"\"\n    # long word is 3 words\n    if len(s)<3:\n        return False\n    # if it has at most 2 words\n    if len(s)>=2:\n        # if every word contains digits\n        if all(is_digit(c) for c in s):\n            return True\n    return False\ndef check_if_numbers(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is a valid string or not.\n    A string is a valid string if it is a valid word,\n    with only letters from a-z, A-Z, 0-9 and spaces.\n    For example:\n    check_if_numbers('a') => True\n    check_if_numbers('aa') => False\n    check_if_numbers('abcd') => False\n    check_if_numbers('aabb') => True\n    check_if_numbers('0') => True\n    \"\"\"\n    # if there are 3 or more digits\n    if len(s)<3:\n        return False\n    # if it contains numbers\n    if all(is_number(c) for c in s):\n        return True\n    return False\ndef is_parenthesized(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is a valid parenthesized string or not.\n    A string is a valid parenthesized string if it is balanced with no spaces and at most one open parenthesis.\n    A string is a valid parenthesized string if it is balanced with at least one open parenthesis and can be balanced with no spaces"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(s) >= 3 and all(not (c in s) for c in s)\n    \nprint(is_happy(\"aabbd\"))\nprint(is_happy(\"cbeadbbd\"))\nprint(is_happy(\"abcdddeeeeaabbbbbbbbbbcbcdddeeeeaaabbddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = s.lower()\n    s = s.replace(\" \", \"\")\n    \n    for i in range(len(s)):\n        if s[i] == s[i - 1] and i!= len(s) - 1 and s[i + 1]!= s[i + 1 - 1]:\n            return False\n        if s[i] == s[i - 1] and i!= 0 and s[i - 2]!= s[i - 2 - 1] and s[i + 1]!= s[i + 1 - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here\n    if len(s) < 3:\n        return False\n    arr = {}\n    count = 0\n    for i in s:\n        if i not in arr:\n            arr[i] = count\n            count += 1\n        else:\n            arr[i] += 1\n    for key in arr.keys():\n        if arr[key]!= 2 and arr[key]!= 3:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = \"\".join(sorted(s))\n    return len(set(s)) == len(s) and all(i in s for i in range(0, len(s)))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.5:\n            letter_grades.append('A+')\n        elif grade >= 3.0:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('B')\n        elif grade >= 3.0:\n            letter_grades.append('B-')\n        elif grade >= 3.0:\n            letter_grades.append('C')\n        elif grade >= 3.0:\n            letter_grades.append('C-')\n        elif grade >= 3.0:\n            letter_grades.append('D')\n        elif grade >= 3.0:\n            letter_grades.append('D-')\n        elif grade >= 3.0:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    grade_equation = grades[:5]\n    return grade_equation\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_valid_grade(grade):\n        if grade >= 4.0:\n            return True\n        elif grade > 3.5:\n            return True\n        elif grade > 3.0:\n            return True\n        elif grade > 2.5:\n            return True\n        elif grade > 2.0:\n            return True\n        elif grade > 1.7:\n            return True\n        elif grade > 1.3:\n            return True\n        elif grade > 1.0:\n            return True\n        elif grade > 0.7:\n            return True\n        elif grade > 0.0:\n            return True\n        elif grade == 0.0:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if not isinstance(grades, list):\n        return None\n    \n    gpa_list = [grade_grade_2_3_3(grade) for grade in grades]\n    \n    return [grade.upper() for grade in gpa_list]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    result.append(max(grades))\n    for i in range(len(grades)-1):\n        if grades[i] > grades[i+1]:\n            result.append(grades[i+1])\n            continue\n        if grades[i] < grades[i+1]:\n            result.append(grades[i])\n            continue\n    return result\n    pas"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # First, find the non-zero values of grades\n    zero_values = [x for x in grades if x!= 0]\n    \n    # Now, find the non-zero values\n    grade_values = []\n    for grades in zero_values:\n        if grades == 4.0:\n            grade_values.append('A+')\n        elif grades == 3.7:\n            grade_values.append('A')\n        elif grades == 3.3:\n            grade_values.append('A-')\n        elif grades == 3.0:\n            grade_values.append('B+')\n        elif grades == 2.7:\n            grade_values.append('B')\n        elif grades == 2.3:\n            grade_values.append('B-')\n        elif grades == 2.0:\n            grade_values.append('C+')\n        elif grades == 1.7:\n            grade_values.append('C')\n        elif grades == 1.3:\n            grade_values.append('C-')\n        elif grades == 1.0:\n            grade_values.append('D+')\n        elif grades == 0.7:\n            grade_values.append('D')\n        elif grades == 0.0:\n            grade_values.append('D-')\n        elif grades == 0.0:\n            grade_values.append('E')\n            \n    return grade_values\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    letter_grades = []\n    for grade in grades:\n        if grade < 4.0:\n            letter_grades.append('A+')\n        elif grade >= 4.0 and grade < 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.7 and grade < 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.3 and grade < 3.0:\n            letter_grades.append('B+')\n        elif grade >= 3.0 and grade < 1.7:\n            letter_grades.append('B')\n        elif grade >= 1.7 and grade < 1.3:\n            letter_grades.append('B-')\n        elif grade >= 1.3 and grade < 1.0:\n            letter_grades.append('C+')\n        elif grade >= 1.0 and grade < 0.7:\n            letter_grades.append('C')\n        elif grade >= 0.7 and grade < 0.0:\n            letter_grades.append('C-')\n        elif grade >= 0.0 and grade < 0.0:\n            letter_grades.append('D+')\n        elif grade < 0.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n    \n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for student in grades:\n        if student > 4.0:\n            result.append('A+')\n        elif student > 3.5:\n            result.append('A')\n        elif student > 3.0:\n            result.append('B+')\n        elif student > 2.7:\n            result.append('B')\n        elif student > 2.3:\n            result.append('B')\n        elif student > 2.0:\n            result.append('C+')\n        elif student > 1.7:\n            result.append('C')\n        elif student > 1.3:\n            result.append('C')\n        elif student > 1.0:\n            result.append('D+')\n        elif student > 0.7:\n            result.append('D')\n        elif student > 0.0:\n            result.append('D')\n        else:\n            result.append('E')\n    return result\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    grade_list = []\n    for grade in grades:\n        if(grade >= 4.0):\n            grade_list.append('A+')\n        elif(grade >= 3.5):\n            grade_list.append('A')\n        elif(grade >= 3.0):\n            grade_list.append('A-')\n        elif(grade >= 2.7):\n            grade_list.append('B+')\n        elif(grade >= 2.3):\n            grade_list.append('B')\n        elif(grade >= 2.0):\n            grade_list.append('B-')\n        elif(grade >= 1.7):\n            grade_list.append('C+')\n        elif(grade >= 1.3):\n            grade_list.append('C')\n        elif(grade >= 1.0):\n            grade_list.append('C-')\n        elif(grade >= 0.7):\n            grade_list.append('D+')\n        elif(grade >= 0.0):\n            grade_list.append('D')\n        else:\n            grade_list.append('E')\n    return grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    gpa_list = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]\n    student_list = []\n    for grade in grades:\n        if grade in gpa_list:\n            student_list.append(grade)\n    letter_list = []\n    for student in student_list:\n        letter = \"A+\"\n        if student < 4.0:\n            letter = \"A\"\n        elif student < 3.7:\n            letter = \"B\"\n        elif student < 3.3:\n            letter = \"C\"\n        elif student < 3.0:\n            letter = \"D\"\n        elif student < 2.7:\n            letter = \"E\"\n        elif student < 2.3:\n            letter = \"F\"\n        else:\n            letter = \"G\"\n        letter_list.append(letter)\n    return letter_list\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(2, int(len(string)/2) + 1):\n        if string.isdigit():\n            break\n        else:\n            if string.count(string[i]) == 1:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = int(string)\n    if num > 0:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for n in range(2,string+1):\n        if is_prime(n):\n            return True\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count=0\n    for i in range(1,len(string)):\n        if string[i]==string[i-1]:\n            count+=1\n        else:\n            return False\n    return count==0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import re\n    string = string.lower()\n    if re.search('^[0-9]*$', string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    print(f'prime_length: {prime_length(string)}')\n    if len(string) > 2:\n        for i in range(2, len(string)):\n            print(f'{string} is {i}.')\n            if prime_length(string[:i]):\n                return True\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in string:\n        if i.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2, int(len(string)/2)+1):\n        if string.count(i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if len(string) == 1 or string == string[0]:\n        return True\n    \n    if len(string) == 2:\n        for i in range(2, len(string)):\n            if string[i] == string[i - 1]:\n                return False\n    \n    if len(string) == 3:\n        for i in range(2, len(string)):\n            if string[i] == string[i - 1] or string[i - 1] == string[i - 2] or string[i - 1] == string[i - 2]:\n                return False\n    \n    return prime_length(string[1:])\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import math\n    if len(string) == 0:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(len(string))) + 1):\n            if string.count(str(i)) > 1:\n                return False\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    # Add the count of all numbers which start with 1 to the total count.\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i+1) * (i+2) - (i+3) * (i+4)\n    \n    # Return the number of all positive integers starting or ending with 1.\n    return sum"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    counts = []\n    for i in range(0, n + 1):\n        if i == 0 or i == 1:\n            counts.append(1)\n        else:\n            counts.append(0)\n            while i > 1:\n                if i % 10 == 1:\n                    counts[-1] = counts[-1] + counts[-2]\n                else:\n                    counts.append(counts[-1] + counts[-2])\n                i = i // 10\n    return counts\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your code here\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([n-digit_i for digit_i in range(1,n+1) if (n-digit_i) % 2 == 1])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(10, n+1, 1):\n        if i == 1:\n            count += 1\n        else:\n            if i % 10 == 1:\n                if i % 100 == 1:\n                    count += 1\n                else:\n                    count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([1 for i in range(2, n) if n % i == 0])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            result.append(i)\n            n //= i\n        else:\n            i += 1\n    if n!= 1:\n        result.append(n)\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def sum_digits(num):\n        \"\"\"Returns sum of digits of num.\"\"\"\n        \n        sum_digits = 0\n        while num!= 0:\n            sum_digits += num % 10\n            num = num // 10\n        return sum_digits\n    \n    def sum_digits_to_binary(num):\n        \"\"\"Returns sum of digits of num to binary.\"\"\"\n        \n        sum = 0\n        while num!= 0:\n            sum += num % 2\n            num = num // 2\n        return sum\n    \n    def sum_digits_to_hex(num):\n        \"\"\"Returns sum of digits of num to hex.\"\"\"\n        \n        sum_hex = 0\n        while num!= 0:\n            sum_hex += num % 16\n            num = num // 16\n        return sum_hex\n        \n    def sum_digits_hex_to_binary(num):\n        \"\"\"Returns sum of digits of num to binary.\"\"\"\n        \n        sum = 0\n        while num!= 0:\n            sum += num % 16\n            num = num // 16\n        return sum\n    \n    # Let N be positive integer.\n    def binary_sum(N):\n        \"\"\"Returns sum of digits of N in binary.\"\"\"\n        \n        sum = 0\n        while N!= 0:\n            sum += N % 2\n            N = N // 2\n        return sum\n    \n    # Case 1.\n    # For N = 1, return sum of digits is 1.\n    if N == 1:\n        return 1\n    \n    # Case 2.\n    # For N = 2, return sum of digits is 2.\n    if N == 2:\n        return 2\n    \n    # Case 3.\n    # For N = 1, return sum of digits is sum of digits of N.\n    if N == 1:\n        return sum_digits(N)\n    \n    # Case 4.\n    # For N = 2, return sum of digits is sum of digits of N.\n    if N == 2:\n        return sum_digits(N)\n    \n    # Case 5.\n    # For N = 0, return sum of digits is sum of digits of 1.\n    if N == 0:\n        return sum_digits_to_binary(1)\n    \n    # Case 6.\n    # For N = 1, return sum of digits is sum of digits of 2.\n    if N == 1:\n        return sum_digits(2)\n    \n    # Case 7.\n    # For N = 2, return sum of digits is sum of digits of 2.\n    if N == 2:\n        return sum_digits(2)\n    \n    # Case 8.\n    # For N = 1, return sum of digits is sum of digits of 3.\n    if N == 1:\n        return sum_digits_to_binary(3)\n    \n    # Case 9.\n    # For N = 2, return sum of digits is sum of digits of 3.\n    if N == 2:\n        return sum_digits_to_binary(3)\n    \n    # Case 10.\n    # For N = 1, return sum of digits is sum of digits of 4.\n    if N == 1:\n        return sum_digits_to_binary(4)\n    \n    # Case 11.\n    # For N = 2, return sum of digits is sum of digits of 4.\n    if N == 2:\n        return sum_digits_to_binary(4)\n    \n    # Case 12.\n    # For N = 1, return sum of digits is sum of digits of 5.\n    if N == 1:\n        return sum_digits_to_binary(5)\n    \n    # Case 13.\n    # For N = 2, return sum of digits is sum of digits of 5.\n    if N == 2:\n        return sum_digits_to_binary(5)\n    \n    # Case 14.\n    # For N = 1, return sum of digits is sum of digits of 6.\n    if N == 1:\n        return sum_digits_to_binary(6)\n    \n    # Case 15.\n    # For N = 2, return sum of digits is sum of digits of 6.\n    if N == 2:\n        return sum_digits_to_binary(6)\n    \n    # Case 16.\n    # For N = 0, return sum of digits is sum of digits of 7.\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if N in (1,0):\n        return str(N)\n    else:\n        digits = []\n        digit = N//10\n        while digit!= 0:\n            digits.append(digit)\n            digit = N % 10\n        digits.reverse()\n        return '0'*len(digits) + ''.join([str(d) for d in digits])\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # start with 0\n    answer = \"0\"\n    # iterate over numbers from 1 to N\n    for i in range(1, N + 1):\n        # if it's negative, only add one digit to the answer\n        if (i < 0):\n            answer += \"1\"\n        else:\n            # it's positive, add digits in binary\n            answer += \"0\" * i\n            \n    # return the answer\n    return answer\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sum(n: int) -> str:\n        \"\"\"\n        Returns the sum of digits of an integer\n        \"\"\"\n        return \"{0:b}\".format(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if N == 1:\n        return \"0\"\n    if N == 2:\n        return \"1\"\n    ans = \"\"\n    for i in range(N):\n        ans += str(i)\n    return ans\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    \n    return solve(N//10) + solve(N%10)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    digits = []\n    n = N\n    while n > 0:\n        digits.append(n % 2)\n        n = n//2\n    \n    total = 0\n    for i in range(0, len(digits)):\n        total += digits[i]*2**i\n    \n    return str(total)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    else:\n        a = 0\n        for i in range(N):\n            a += int(str(N % 10) + str(N // 10))\n        return str(a)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if N < 10:\n        return \"1\"\n    else:\n        ans = \"\"\n        carry = 0\n        \n        for i in range(N):\n            digit = carry\n            carry = 0\n            \n            if i < len(ans):\n                digit += digit * 10\n                \n            if digit >= 10:\n                digit = digit % 10\n                \n            ans += str(digit)\n        \n        ans = ans[::-1]\n        \n        if carry == 1:\n            ans += \"1\"\n        \n        return ans\n        \n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if N==0:\n        return \"0\"\n    \n    digit_sum = 0\n    # n is the length of input\n    n = len(bin(N))\n    \n    # n is the length of binary number\n    for i in range(0, n):\n        digit_sum = digit_sum + int(bin(N)[i])\n    \n    return str(digit_sum)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(f\"Adding: {lst}\")\n    even = []\n    odd = []\n    for number in lst:\n        if number % 2 == 0:\n            even.append(number)\n        else:\n            odd.append(number)\n    print(f\"Even: {even}\")\n    print(f\"Odd: {odd}\")\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    for i in lst:\n        if i % 2 == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [e for e in lst if e % 2!= 0 and e % 3!= 0]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst.sort()\n    even = []\n    odd = []\n    for i in range(len(lst)//2):\n        even.append(lst[i])\n        if i % 2 == 1:\n            odd.append(lst[i])\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for x in lst:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    evens = []\n    odds = []\n    for i in lst:\n        if i % 2!= 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return evens + odds\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_lst = sorted(lst, reverse=True)\n    output = 0\n    odd_count = 0\n    for index, value in enumerate(sorted_lst):\n        if (index % 2 == 0):\n            output += value\n        else:\n            output -= value\n        if index % 2 == 1:\n            if output > 0:\n                output += 1\n                odd_count += 1\n    return output / 2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    newList = []\n    evenList = []\n    oddList = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            newList.append(lst[i])\n        else:\n            oddList.append(lst[i])\n    evenList = sorted(newList, reverse=True)\n    newList.extend(evenList)\n    return newList\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    ans = []\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            ans.append(lst[i])\n    return ans\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # remove blanks from the string\n    s = s.strip()\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join(sorted(s.split()))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = re.sub(r'[^\\w]', '', s)\n    words = s.split(' ')\n    for word in words:\n        if word.isalpha():\n            chars = list(word)\n            for i in range(len(chars)):\n                if chars[i] =='':\n                    chars[i] = '-'\n            word = ''.join(chars)\n    return''.join(sorted(words))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.split()\n    result = \"\"\n    for word in s:\n        result += word[::-1] + word\n    return result[::-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = s.split(' ')\n    words_output = []\n    for word in words:\n        for char in word:\n            output = ord(char)\n            output += 32\n            output %= 127\n            char = chr(output)\n            words_output.append(char)\n    return''.join(words_output)"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.split()\n    s = ''.join([s[i:i+2] for i in range(0, len(s), 2)])\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join(sorted(s, key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \" \".join(sorted(s.replace(\" \", \"\")))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s =''.join(s.split())\n    return ''.join(sorted(s.split(), key=str.casefold))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # define alphabet as list of ascii values\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [(x, lst.index(x)+1)] + \\\n            [(x, lst.index(x, i)+1) for i in range(len(lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def sort_by_row(lst, x):\n        \"\"\"\n        sort the given list by row\n        \"\"\"\n        sorted = []\n        for row in lst:\n            temp = []\n            for column in row:\n                temp.append(column)\n            sorted.append(temp)\n        return sorted\n        \n    def sort_by_columns(lst):\n        \"\"\"\n        Sort by columns\n        \"\"\"\n        sorted = []\n        for row in lst:\n            temp = []\n            for column in row:\n                temp.append(column)\n            sorted.append(temp)\n        return sorted\n    \n    def get_coordinate(x):\n        \"\"\"\n        return the coordinate as tuple of two integers\n        \"\"\"\n        row, col = x\n        return (row, col)\n    \n    if len(lst) == 0:\n        return []\n    lst.sort(key = get_coordinate)\n    sorted = sort_by_row(lst, x)\n    sorted = sort_by_columns(sorted)\n    return sorted\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = int(x)\n    #we first check the columns, then rows\n    #since rows are sorted, the best is to put them in ascending order\n    #so, we don't need to worry about the row of the column with the best score\n    for i in range(len(lst)):\n        if x in lst[i]:\n            return [(x, i+1)]\n    return [(x, i+1) for i, row in enumerate(lst) if x in row]\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x not in lst:\n        return []\n    r = []\n    for i in range(len(lst)):\n        r += [(x, i)]\n        r += get_row(lst[i], x+1)\n    return r\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    row = []\n    \n    for i in range(len(lst)):\n        row.append((lst[i][x], i))\n    row.sort()\n    return row\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if x not in lst: return []\n    else:\n        lst = lst[:]\n        lst.sort(reverse=True)\n        for row in lst:\n            if row.index(x) == 0: row.sort(reverse=False)\n            else: row.sort(reverse=True)\n        return [(x, row.index(x)) for row in lst]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def recurse(lst, x, row, coord):\n        if x > 0 and lst[row][x-1] < x:\n            recurse(lst, x, row + 1, coord)\n        elif x > 0:\n            coord.append((row, x-1))\n        elif lst[row][x] < x:\n            recurse(lst, x, row + 1, coord)\n        elif lst[row][x] == x:\n            coord.append((row, x))\n    coord = []\n    recurse(lst, x, 0, coord)\n    return coord\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort(key=lambda x: x[x.index(x[x.index(x[0])])])\n    return [(x[0], x[1]) for x in lst]"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort()\n    x = list(x)\n    if len(lst) <= 0:\n        return []\n    else:\n        return [(x[i], i) for i in range(len(x))]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m = len(lst)\n    r = []\n    for i in range(m):\n        coor = lst[i][x]\n        r.append((coor[0], coor[1]))\n    r.sort()\n    return r\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    array.sort(key=lambda x: (x % 2, x))\n    return arra"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_array = []\n    sum_first = 0\n    sum_last = 0\n    for value in array:\n        sum_first += value\n        sum_last += value\n        if sum_first % 2 == 0 and sum_last % 2 == 0:\n            sorted_array.append(sum_last)\n            sum_first = 0\n        elif sum_first % 2!= 0 and sum_last % 2 == 0:\n            sorted_array.append(sum_last)\n            sum_first = 0\n        elif sum_first % 2 == 0 and sum_last % 2!= 0:\n            sorted_array.append(sum_last)\n            sum_first = 0\n        else:\n            sorted_array.append(sum_first)\n            sum_first = 0\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    n = len(array)\n    for i in range(n):\n        for j in range(n-i):\n            if array[j] + array[j+1] == array[i] and array[j] % 2:\n                result.append(array[j])\n                break\n        else:\n            result.append(array[i])\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    array = sorted(array)\n    if not array:\n        return array\n    for i in range(len(array) - 1):\n        if array[i] + array[i + 1] == 0:\n            array[i], array[i + 1] = array[i + 1], array[i]\n        else:\n            break\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_array = []\n    for i in array:\n        new_array.append(i)\n        \n    for i in range(len(new_array)):\n        for j in range(len(new_array) - i - 1):\n            if new_array[j] + new_array[j + 1] == 0:\n                new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n            elif new_array[j] + new_array[j + 1] % 2 == 0:\n                new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n            else:\n                new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    result = []\n    \n    for element in array:\n        if sum(element) % 2:\n            result.append(element)\n        else:\n            result.append(sum(element))\n    \n    return result"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # reverse the given array\n    array.reverse()\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Make sure the array has at least one element\n    if len(array) <= 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(array) > 0\n    result = [0] * len(array)\n    \n    # sort first index\n    for index in range(0, len(array) - 1):\n        if array[index] % 2 == 0:\n            result[index] = array[index]\n        else:\n            result[index] = array[index] + result[index + 1]\n    return result\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for x in s:\n        # The original number will be used to keep track of the place it belongs to.\n        original = ord(x) - 97\n        # The number of shifts will be used to keep track of the shift.\n        number_of_shifts = 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your encrypt function here\n    encrypted = ''\n    for letter in s:\n        # TODO: Make this so the encryption is possible\n        if letter.isupper():\n            encrypted += chr((ord(letter)-ord('A')+ord('Z')) % 26 + ord('A'))\n        else:\n            encrypted += chr((ord(letter)-ord('a')+ord('z')) % 26 + ord('a'))\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if(len(s) == 1):\n        return s\n    # One letter, so create an encryption function\n    \n    # Create a function that will encrypt a string\n    # Convert the string to a list\n    # And then convert the list into a string\n    # And then join the letter strings together\n    \n    # Call the encrypt function\n    # Return a string\n    \n    # Decrypt the string\n    # Return the decrypted string\n    \n    # Convert the list into a string\n    # And then convert the string back into a list\n    # And return the result\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(letter for letter in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            s[i] = alphabet.index(s[i])+2*i\n    return \"\".join(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    i = 0\n    k = 0\n    e = 0\n    c = 0\n    for i in s:\n        if i == \" \":\n            i = \" \"\n        if i =='':\n            i = \" \"\n        k = k + alphabet.index(i) + 2 * c\n        e = e + alphabet.index(i) * 2\n        c = c + 2\n    return alphabet[k] + alphabet[e]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code here\n    if type(s) is str:\n        s=s.lower()\n        return ''.join([char if char in alphabet else char.upper() for char in s])\n    else:\n        print('invalid input')\n        return 'encrypt error'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # I just did this one line to avoid wasting my time on the code\n    return \"\".join(s[i%26] for i in range(len(s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #define a dictionary for the rotation alphabet\n    alphabet_dict = {'a':'z', 'b':'w', 'c':'x', 'd':'y', 'e':'u', 'f':'g', 'g':'z', 'h':'x', 'i':'y', 'j':'w', 'k':'x', 'l':'y','m':'u', 'n':'g', 'o':'z', 'p':'x', 'q':'y', 'r':'u','s':'g', 't':'z', 'u':'x', 'v':'y', 'w':'u', 'x':'g', 'y':'z', 'z':'x','':'', '!': '', '\\\"': '', '-': '', '+': '', '=': '', '$': '', '@': '', '#': '', '$': '', '%': '', '&': '', '*': '', '^': '', '`': '', '`': '', '{': '', '}': '', '_': '', '|': '', '}': '', '~': '', '\"': '', '{': '', '}': '', '}': '', '}': '', '{': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', '}': '', "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # The list of alphabet letters is considered the \"given alphabet\"\n    # the order in which the alphabet is rotated is assumed.\n    # In this example we use alphabet as the basis of the alphabet.\n    # For instance, the alphabet is ['a', 'b', 'c', 'd', 'e', 'f']\n    alphabet = list(string.ascii_letters)\n    # Access the alphabet by index\n    encrypted_alphabet = list(alphabet)\n    # Define an empty string for the result\n    encrypted_string = ''\n    # Iterate through each letter in the alphabet.\n    for letter in alphabet:\n        # For each letter in the alphabet, add it to the encrypted string.\n        encrypted_string += letter\n    # If the last letter of the alphabet is 'z' then append it to the\n    # encrypted string.\n    if alphabet[-1] == 'z':\n        encrypted_string += 'z'\n    # If the last letter of the alphabet is 'a' then append it to the\n    # encrypted string.\n    if alphabet[-2] == 'a':\n        encrypted_string += 'a'\n    # If the last letter of the alphabet is 't' then append it to the\n    # encrypted string.\n    if alphabet[-3] == 't':\n        encrypted_string += 't'\n    # If the last letter of the alphabet is 'd' then append it to the\n    # encrypted string.\n    if alphabet[-4] == 'd':\n        encrypted_string += 'd'\n    # If the last letter of the alphabet is 'p' then append it to the\n    # encrypted string.\n    if alphabet[-5] == 'p':\n        encrypted_string += 'p'\n    # If the last letter of the alphabet is 'j' then append it to the\n    # encrypted string.\n    if alphabet[-6] == 'j':\n        encrypted_string += 'j'\n    # If the last letter of the alphabet is 'o' then append it to the\n    # encrypted string.\n    if alphabet[-7] == 'o':\n        encrypted_string += 'o'\n    # If the last letter of the alphabet is 'i' then append it to the\n    # encrypted string.\n    if alphabet[-8] == 'i':\n        encrypted_string += 'i'\n    # If the last letter of the alphabet is 'l' then append it to the\n    # encrypted string.\n    if alphabet[-9] == 'l':\n        encrypted_string += 'l'\n    # If the last letter of the alphabet is 'k' then append it to the\n    # encrypted string.\n    if alphabet[-10] == 'k':\n        encrypted_string += 'k'\n    # If the last letter of the alphabet is 'p' then append it to the\n    # encrypted string.\n    if alphabet[-11] == 'p':\n        encrypted_string += 'p'\n    # If the last letter of the alphabet is 'j' then append it to the\n    # encrypted string.\n    if alphabet[-12] == 'j':\n        encrypted_string += 'j'\n    # If the last letter of the alphabet is 'o' then append it to the\n    # encrypted string.\n    if alphabet[-13] == 'o':\n        encrypted_string += 'o'\n    # If the last letter of the alphabet is 'i' then append it to the\n    # encrypted string.\n    if alphabet[-14] == 'i':\n        encrypted_string += 'i'\n    # If the last letter of the alphabet is 'l' then append it to the\n    # encrypted string.\n    if alphabet[-15] == 'l':\n        encrypted_string += 'l'\n    # If the last letter of the alphabet is 'k' then append it to the\n    # encrypted string.\n    if alphabet[-16] == 'k':\n        encrypted_string += 'k'\n    # If the last letter of the alphabet is 'p' then append it to the\n    # encrypted string.\n    if alphabet[-17] == 'p':\n        encrypted_string += 'p'\n    # If the last letter of the alphabet is 'j' then append it to the\n    # encrypted string.\n    if alphabet[-18] == 'j':\n        encrypted_string += 'j'\n    # If the last letter of the alphabet is 'o' then append it to the\n    # encrypted string.\n    if alphabe"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return lst[1] if len(lst) > 2 else None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    smallest = None\n    \n    for i in range(len(lst)-1):\n        smallest = lst[i]\n        for j in range(i+1, len(lst)):\n            if lst[j] < smallest:\n                smallest = lst[j]\n                \n    return smallest\n    "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def next_smallest_rec(lst):\n        if len(lst) == 1:\n            return lst[0]\n        return next_smallest(lst[1:])\n    \n    return next_smallest_rec(lst)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # find the smallest number in the list\n    smallest_index = next_smallest(lst[1:])\n    # update the smallest number in list\n    lst[smallest_index] = lst[smallest_index + 1]\n    # return the smallest number\n    return lst[smallest_index + 1"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        return lst[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here.\n    numbers = sorted(lst)\n    for i in range(len(numbers)-1):\n        if numbers[i] > numbers[i+1]:\n            return numbers[i]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #pass # delete this line\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Implement this function!\n    # The following implementation uses a heap to return the smallest element\n    heap = []\n    heapq.heappush(heap, lst[0])\n    smallest_in_heap = None\n    for i in range(1, len(lst)):\n        if smallest_in_heap == None or lst[i] < smallest_in_heap[0]:\n            smallest_in_heap = heapq.heappop(heap)\n            heapq.heappush(heap, lst[i])\n    return smallest_in_heap"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # DO NOT CHANGE THIS FUNCTION\n    \"\"\"\n    Your task is to return the number of boredoms in the sentence.\n    Constraints\n    * 1 <= words.length <= 20\n    * words[i] consist of only the letters \"a\" through \"z\".\n    * sentences[i] consist of only the letters \"!\", \"?\", \".\".\n    * '.' is a word boundary and can be used as a \"boredom\".\n    * This is a case-sensitive string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counter = 0\n    for word in S.split():\n        if word.endswith(\".\"):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s=S.lower().replace(\".\",\"\").replace(\"?\",\",\"\").replace(\",\",\"\").replace(\".\",\"\")\n    return len(s)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO\n    count = 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = S.split('.')\n    boredoms = [word.startswith('I') or word.startswith('?') or word.startswith('!') for word in words]\n    return sum(boredoms)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    boredoms = 0\n    for i in range(len(S)):\n        if S[i] == \"?\" or S[i] == \"!\":\n            if S[i] == \"?\":\n                boredoms += 1\n            elif S[i] == \"!\":\n                boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n=0\n    for word in S:\n        if word[0]=='!':\n            n=n+1\n        elif word[0]=='?':\n            n=n+2\n        elif word[0]=='.':\n            n=n+1\n        else:\n            n=n+0\n    return n\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    bored_count = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\"):\n            bored_count += 1\n    return bored_count\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(x)!= int and type(y)!= int and type(z)!= int:\n        raise TypeError(\"The type of numbers is not supported\")\n    elif (type(x) == int and x == y == z):\n        return True\n    elif (type(x) == int and x >= 0 and x < y and x >= z and y >= 0 and y < z):\n        return True\n    elif (type(x) == int and x >= 0 and x < y and x >= z and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= 0 and y < z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= 0 and y < z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= y):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= y):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= y):\n        return False\n    elif (type(x) == int and x >= y and x < z and y >= z):\n        return False\n    elif (type(x) == int and x >= z and x < y and y >= y):\n        return False\n    elif (type(x) == int and x >= z and x < y and "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(x) == int or type(y) == int or type(z) == int:\n        if x == y == z:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def sum(x, y, z):\n        if y+x+z < 10:\n            return True\n        return False\n    \n    return sum(x, y, z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x==sum(y) or (x in y) or (sum(x) in y) or (sum(x) in y) or (sum(x) in y)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) is False:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int) is False:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int) is False:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int) is False:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int) is False:\n        return False\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, int) is False:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return True if sum(x, y) == sum(z, x) else False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x > y and x > z:\n        return any_int(y, x, z)\n    else:\n        return any_int(x, y, z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (not is_int(x) or not is_int(y)) and not is_int(z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return any(map(is_int, [x,y,z]))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if any_int_helper(x, y, z) or any_int_helper(x, z, y):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = message.split()\n    new_message = \"\"\n    for word in words:\n        word = word.lower()\n        for letter in word:\n            if letter in vowels:\n                new_message += letter.upper()\n            else:\n                new_message += letter\n        new_message +=''\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    return ''.join(alphabet[(alphabet.index(letter.upper()) - 2 + alphabet.index(letter.lower())) % 26] for letter in message)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    message = message.replace(' ','')\n    message = message.upper()\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter not in vowels:\n            new_message += letter\n        else:\n            index_vowels = message.find(letter)\n            new_message += vowels[(index_vowels+2)]\n    return new_message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places before the \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TGS'\n    >>> decode('ThIsIsAMgS')\n    'TGIOS'\n    \"\"\"\n    message = message.upper()\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter not in vowels:\n            new_message += letter\n        else:\n            index_vowels = message.find(letter)\n            new_message += vowels[(index_vowels-2)]\n    return new_message\n    \ndef main():\n    # The encode() function should take a message and return the \n    # decoded version of that message.\n    #\n    # The decode() function should take the encoded version of the \n    # message and return the original message.\n    message = input('Enter message: ').upper()\n    print(encode(message))\n    print(decode(encode(message)))\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Base case\n    if message == '':\n        return message\n    # Replace all vowels in message\n    for i in range(len(message)):\n        if message[i] == 'a' or message[i] == 'e' or message[i] == 'i' or message[i] == 'o' or message[i] == 'u':\n            message = message.replace(message[i], 'A')\n    # Replace all vowels in message\n    for i in range(len(message)):\n        if message[i] == 'A' or message[i] == 'E' or message[i] == 'I' or message[i] == 'O' or message[i] == 'U':\n            message = message.replace(message[i], 'E')\n    # Replace all letters in message with the lowercase letter\n    for i in range(len(message)):\n        if message[i].islower():\n            message = message.replace(message[i], 'a')\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    \n    # Go through each word, swapping the first letter to the last letter, and replacing all vowels in the message.\n    encoded = \"\"\n    for word in message:\n        # Get the first letter of each word.\n        word = word.lower()\n        first_letter = word[0]\n        # Go through each letter, swapping it to the second letter, and replacing all vowels in the message.\n        for letter in word:\n            # If a letter is a vowel, replace the letter to the letter that appears two places to the first letter.\n            if letter in vowels:\n                encoded += word[2:].swapcase()\n                \n    return encoded\n    "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = ''\n    # put your code here\n    for letter in message:\n        if letter in vowels:\n            result += letter.upper() +''\n        else:\n            result += letter.lower()\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    encoded = ''\n    for c in message.upper():\n        if c in ['A', 'E', 'I', 'O', 'U']:\n            encoded += chr((ord(c)+2)*2)\n        else:\n            encoded += c\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Initialize the message to a string of just letters\n    message = message.upper()\n    # Count the length of the message\n    len_message = len(message)\n    # Initialize an array of letter to be replaced\n    word = []\n    # For every letter in the message\n    for letter in message:\n        # If the letter is a vowel\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n            # Append it to the array\n            word.append(letter)\n        # If it's a consonant\n        else:\n            # If it doesn't start with a vowel, swap it with its letter\n            if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n                word[len_message-1] = 'z'\n            # If it starts with a vowel, replace the first letter with a vowel\n            else:\n                word[len_message-1] = 'i'\n    # Return the message\n    return ''.join(word)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    message = message.lower().replace(' ','')\n    vowels = ['a','e','i','o','u']\n    message = message.replace('e','e')\n    message = message.replace('i','i')\n    message = message.replace('o','o')\n    message = message.replace('u','u')\n    message = message.replace('g','g')\n    message = message.replace('k','k')\n    message = message.replace('j','j')\n    message = message.replace('l','l')\n    message = message.replace('m','m')\n    message = message.replace('n','n')\n    message = message.replace('p','p')\n    message = message.replace('s','s')\n    message = message.replace('t','t')\n    message = message.replace('z','z')\n    message = message.replace('y','y')\n    message = message.replace('w','w')\n    message = message.replace('z','z')\n    message = message.replace('z','z')\n    message = message.replace('y','y')\n    message = message.replace('w','w')\n    message = message.replace('r','r')\n    message = message.replace('f','f')\n    message = message.replace('g','g')\n    message = message.replace('k','k')\n    message = message.replace('j','j')\n    message = message.replace('l','l')\n    message = message.replace('n','n')\n    message = message.replace('o','o')\n    message = message.replace('u','u')\n    message = message.replace('t','t')\n    message = message.replace('p','p')\n    message = message.replace('o','o')\n    message = message.replace('s','s')\n    message = message.replace('r','r')\n    message = message.replace('v','v')\n    message = message.replace('t','t')\n    message = message.replace('e','e')\n    message = message.replace('a','a')\n    message = message.replace('d','d')\n    message = message.replace('e','e')\n    message = message.replace('e','e')\n    message = message.replace('g','g')\n    message = message.replace('k','k')\n    message = message.replace('j','j')\n    message = message.replace('l','l')\n    message = message.replace('m','m')\n    message = message.replace('n','n')\n    message = message.replace('p','p')\n    message = message.replace('s','s')\n    message = message.replace('r','r')\n    message = message.replace('s','s')\n    message = message.replace('t','t')\n    message = message.replace('p','p')\n    message = message.replace('p','p')\n    message = message.replace('t','t')\n    message = message.replace('k','k')\n    message = message.replace('j','j')\n    message = message.replace('o','o')\n    message = message.replace('l','l')\n    message = message.replace('m','m')\n    message = message.replace('y','y')\n    message = message.replace('w','w')\n    message = message.replace('z','z')\n    message = message.replace('y','y')\n    message = message.replace('w','w')\n    message = message.replace('r','r')\n    message = message.replace('f','f')\n    message = message.replace('g','g')\n    message = message.replace('k','k')\n    message = message.replace('j','j')\n    message = message.replace('o','o')\n    message = message.replace('g','g')\n    message = message.replace('g','g')\n    message = message.replace('e','e')\n    message = message.replace('l','l')\n    message = message.replace('p','p')\n    message = message.replace('v','v')\n    message = message.replace('v','v')\n    message = message.replace('p','p')\n    message = message.replace('s','s')\n    message = message.replace('e','e')\n    message = message.replace('d','d')\n    message = message.replace('e','"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    ans = 0\n    \n    for num in lst:\n        while num > 0:\n            # finding prime num and dividing num by 2\n            if num%2==0:\n                num = num//2\n            else:\n                num = 3*num+1\n                \n        # finding max of digits\n        ans = max(ans,num)\n        \n    return ans"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 0\n    lst1 = []\n    for element in lst:\n        lst1.append(str(element))\n    \n    for element in lst1:\n        if int(element) == 0:\n            i = i + 1\n        else:\n            break\n        if i == 2:\n            break\n    return int(lst1[i])\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    largest = 0\n    num = 0\n    \n    for num in lst:\n        if num > 0:\n            num = num // 10\n            \n        else:\n            num = num * 9 + num\n            \n        if num % 10 > largest:\n            largest = num\n        \n    return largest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            break\n    \n    a = lst[i]\n    b = i\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Calculate the largest number\n    largest = 0\n    # Remove numbers from list\n    lst = lst[1:]\n    # for loop through the list\n    for num in lst:\n        # Check if number is prime\n        if isPrime(num):\n            # If this number is the largest, add it\n            if largest < num:\n                largest = num\n    # Return the largest\n    return largest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    lst = [int(i) for i in lst]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Find the largest prime\n    lst = [i for i in lst if isprime(i)]\n    max = 2\n    for i in lst:\n        if isprime(i):\n            max = max*i\n    # Sum up all the digits\n    max = sum(map(int, str(max)))\n    return max\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #function to find the largest prime number from a list\n    def largest_prime_number(n):\n        \"\"\"\n        Find the largest prime number that is less than or equal to n\n        \"\"\"\n        if n == 2 or n == 3: return 2\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #defining the prime factors\n    factors = [0]*len(lst)\n    for i in range(len(lst)):\n        if lst[i]!=0:\n            factors[i] = lst[i]\n        else:\n            for j in range(i+1,len(lst)):\n                factors[j] = int(lst[i]/factors[i])\n                if factors[j]==0:\n                    factors[j] = int(lst[i]/factors[i])\n    #checking if the sum of the digits is prime\n    flag = True\n    for i in range(len(lst)):\n        if lst[i]<=0:\n            flag = False\n            break\n    if flag:\n        return 0\n    else:\n        return max(lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(type(key) == str for key in dict)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for key in dict:\n        if type(dict[key]) == dict:\n            if len(key) <= 0 or len(key) > 20:\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return True if all(type(key) is str and key.islower() for key in dict) and all(type(key) is str and key.isupper() for key in dict)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for k in dict.keys():\n        if not (k.isalpha() or k.islower()):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(type(key) == str and key.lower() in dict.keys() for key in dict)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(isinstance(key, str) for key in dict.keys()) and all(key.isupper() for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(type(i) == str for i in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n    for k in dict.keys():\n        if type(k)!= str:\n            return False\n    if list(dict.values())[0] in [str(k) for k in dict.keys()]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    return all(key.lower() in dict.keys() for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    primes = []\n    for i in range(n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # helper function to generate a list with the first n numbers\n    # from the n smallest prime numbers\n    prime_list = [True for i in range(n)]\n    \n    for i in range(2,n):\n        if prime_list[i] == True:\n            for j in range(2 * i, n + 1, i):\n                prime_list[j] = False\n    \n    return [i for i in range(n) if prime_list[i] == True]\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prime = [True for i in range(n+1)] #this creates a list of all prime numbers\n    \n    for i in range(2,n+1):\n        if prime[i]:\n            for j in range(i*i,n+1,i):\n                prime[j] = False\n            \n    return [i for i in range(2,n+1) if prime[i] is True]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in range(n) if is_prime(i)"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_numbers = []\n    for number in range(1, n + 1):\n        if is_prime(number):\n            prime_numbers.append(number)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    ans = []\n    for i in range(n+1):\n        if isprime(i):\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: complete this function\n    return [int(i) for i in range(0, n + 1)]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime = [True for i in range(n + 1)]\n    prime[0], prime[1] = False, False\n    for i in range(2, n + 1):\n        if prime[i]:\n            for j in range(i, n + 1, i):\n                prime[j] = False\n    return list(filter(lambda x: x < n, prime))"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    prime_number = []\n    for num in range(2, n+1):\n        if is_prime(num):\n            prime_number.append(num)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # return a*b\n    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = 0\n    for i in range(len(b)):\n        x = x * 10 + int(b[i])\n    return x\ndef is_prime(x):\n    \"\"\"Complete the function that tests whether a number \n    is prime. Assume the input is always valid.\n    Examples:\n    is_prime(16) should return True.\n    is_prime(1234) should return False.\n    is_prime(987654321) should return True.\n    is_prime(2) should return True.\n    \"\"\"\n    if x < 2:\n        return False\n    if x == 2:\n        return True\n    for i in range(2, x):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    multiply = 0\n    for i in range(len(b)-1,-1,-1):\n        multiply += int(b[i])*int(a[i])\n    return multiply\n    # write your code here.\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    product = 0\n    for x in b:\n        product = product * 10 + int(x)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    result = 0\n    result += a\n    result += b\n    \n    while (b!= 0):\n        result *= 10\n        result += b % 10\n        b = int(b/10)\n    \n    result = result*result\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #print(a,b)\n    product = 0\n    while(b):\n        product = product + (int(a[b-1]) * int(b[b-1]))\n        b -= 1\n    #print(product)\n    return product\n    \ndef is_valid_number(n):\n    \"\"\"Complete the function that determines if the number passed\n    in is a valid number.\n    Examples:\n    is_valid_number(123) should return True\n    is_valid_number(121) should return True\n    is_valid_number(0) should return False\n    is_valid_number(0.5) should return False\n    \"\"\"\n    #check if integer\n    if not n:\n        return False\n    elif len(str(n)) == 1:\n        return True\n    else:\n        return False\n        \ndef main():\n    \"\"\"\n    Test cases:\n    valid_number(1) returns True\n    valid_number(0) returns True\n    valid_number(34) returns True\n    valid_number(349) returns True\n    valid_number(0.5) returns True\n    invalid_number(1) returns True\n    invalid_number(0) returns True\n    invalid_number(34) returns True\n    invalid_number(349) returns True\n    invalid_number(0.5) returns True\n    \"\"\"\n    number = input(\"Enter an integer: \")\n    while not is_valid_number(number):\n        print(\"Invalid number.\")\n        number = input(\"Enter an integer: \")\n    print(f\"The entered number is: {number}\")\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == 0:\n        return 0\n    elif a == 1:\n        return b\n    else:\n        return b * multiply(a - 1, b)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    \"\"\"Complexity Analysis:\n    Since Python has a runtime complexity of O(n^2), you will often see this.\n    Why?\n    The whole calculation is O(n^2) as the numbers will be multiplied in the \n    runtime and the comparison gives no side-effects, so you will see the \n    performance benefit of the O(n^2) approach.\n    \"\"\"\n    \n    multiplier = 1\n    for i in range(len(b)):\n        if b[i] == \"0\":\n            multiplier = multiplier * (10**len(b)-1)\n        elif b[i] == \"1\":\n            multiplier = multiplier * (10**len(b)-1)\n        else:\n            multiplier *= 10\n    return multiplier\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] == 'A' or s[i] == 'a' or s[i] == 'e' or s[i] == 'E' or s[i] == 'i' or s[i] == 'I' or s[i] == 'o' or s[i] == 'O' or s[i] == 'u' or s[i] == 'U':\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if (s[i] in ['A', 'B', 'C', 'D', 'E', 'F']):\n            if (i % 2 == 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # If the string is empty, return 0\n    if len(s) == 0:\n        return 0\n    # Determine the length of the string\n    length = len(s)\n    # Determine if it is even\n    even = (length % 2) == 0\n    # Keep track of the number of vowels\n    count = 0\n    for i in range(length):\n        if i % 2 == 0:\n            # If it is even, count it\n            if even:\n                count += 1\n        else:\n            # If it is not even, count it\n            if even:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    l=0\n    for i in range(len(s)):\n        if s[i].isupper():\n            l+=1\n    return l\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = 'aeiou'\n    n = 0\n    for i in range(len(s)):\n        if s[i].upper() in vowels:\n            n += 1\n    return n\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if(s[i].isupper()):\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not s:\n        return 0\n    \n    count = 0\n    for i in range(len(s)):\n        if i%2==0 and s[i]>='a' and s[i]<='z':\n            count+=1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = len(s)\n    total = 0\n    for i in range(0,l):\n        if s[i].isupper():\n            total += 1\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper())\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = list(s)\n    \n    d = dict(zip(list(range(0,len(s),2)),list(range(0,len(s),2))))\n    \n    return sum([d.get(i,0) for i in range(len(s)//2) if s[i] in 'aeiou'])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # The integer value is passed through a string conversion and\n    # rounded away from zero.\n    value = str(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(float(value))"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = int(value)\n    return min(num, max(num-1, abs(num-0)))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if value.isdigit():\n        return int(value)\n    elif value.replace('.','',1).isdigit():\n        return round(float(value))\n    else:\n        return float(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    integer = int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    minimum_integer = float(value)\n    closest_integer_value = -1\n    while minimum_integer + 1 > float(value):\n        closest_integer_value = minimum_integer\n        minimum_integer = minimum_integer + 0.1\n    if minimum_integer + 1 > float(value):\n        closest_integer_value = minimum_integer\n    return closest_integer_value\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # This is a helper function that is intended to be run only once\n    # (or more, at a time) and is not a user-defined function.\n    if type(value)!= str or type(value)!= float:\n        raise TypeError(\"Value should be a string or a float.\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Set up some values.\n    round_value = round(value)\n    if round_value == value:\n        return round_value\n    elif round_value < value:\n        return round_value + 1\n    elif round_value > value:\n        return round_value - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    import math\n    x = 0\n    for i in range(len(value)):\n        if i == 0:\n            x = value[i]\n        else:\n            if math.isclose(value[i], value[i-1]):\n                x = value[i]\n            else:\n                if math.isclose(x, value[i-1]):\n                    x = value[i]\n                else:\n                    x = value[i-1]\n    return x\n    \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    value = float(value)\n    min = value\n    max = value\n    if value == 0:\n        return 0\n    for number in range(1, value):\n        diff = abs(number - value)\n        if diff < min:\n            min = diff\n        if diff > max:\n            max = diff\n    if min < 0:\n        return -min\n    return min\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==1: return [1]\n    if n==2: return [2]\n    if n==3: return [1,1]\n    if n==4: return [2,2]\n    if n%2==0: return [2]*(n//2)\n    return [1]*(n//2) + [1] + [2]*(n//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pile = []\n    if n == 1:\n        pile.append(1)\n    else:\n        for i in range(2, n+1):\n            pile.append(i)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 1:\n        return [n]\n    else:\n        a = make_a_pile(n//2)\n        b = make_a_pile(n//2)\n        c = a + b\n        return c\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # You should be able to get the number of stones, so, there must be at least 1 stone\n    if n < 1:\n        return []\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if n % 2 == 0:\n        return [n // 2, n // 2 + 1]\n    else:\n        return [n // 2, n // 2 + 1, n // 2 + 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for i in range(n+1):\n        if i%2:\n            result.append(i+1)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pile = []\n    while n:\n        if n % 2 == 0:\n            pile.append(n)\n            n = n // 2\n        else:\n            pile.append(n)\n            n = n // 2 + 1\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return [2] + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # result = [1, 3, 5, 7]\n    # result = [1, 3]\n    # result = [1, 1]\n    # result = [1, 2]\n    # result = [1, 2, 3]\n    # result = [1, 2, 3, 4]\n    # result = [1, 2, 3, 4, 5]\n    result = [1, 2, 3, 4, 5, 7]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words_list = []\n    for word in s.split(\",\"):\n        words_list.append(word.strip().lower().split(\" \"))\n    return words_list\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    word_list = s.split(\",\")\n    return word_list\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    word_list = []\n    for word in s.split(\",\"):\n        word_list.append(word.split())\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(map(str, re.split(r'\\s+', s)))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = s.split(\",\")\n    return [word.strip() for word in words]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    splitted_words = s.split(\",\")\n    return splitted_words\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [word.strip().lower().split(' ') for word in s.split(', ')]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = s.lower()\n    return s.split(', ')"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if x % 2 == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if y == 0:\n        return -1\n    x = abs(x)\n    y = abs(y)\n    if x % 2 == 0 and y % 2 == 0:\n        return x + y\n    elif x % 2 == 1 and y % 2 == 1:\n        return -1\n    else:\n        return choose_num(x - 1, y - 1)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = 0\n    if x <= y:\n        num = x\n    else:\n        num = y\n    for i in range(x, y):\n        if i % 2 == 0:\n            num = i\n    return num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # num_list = []\n    # for i in range(x, y + 1):\n    #     if i % 2 == 0:\n    #         num_list.append(i)\n    #     else:\n    #         num_list.append(-1)\n    #     # num_list.append(str(i))\n    #     # num_list.append(str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     # num_list.append(str(i) + \" \" + str(i) + \" \" + str(i) + \" \" + str(i))\n    #     "
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max = 0\n    for xi in range(x, y + 1):\n        if not check_num(xi):\n            return -1\n        for yi in range(x, y + 1):\n            if check_num(xi) and check_num(yi):\n                if max < abs(xi - yi):\n                    max = abs(xi - yi)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    while x % 2 == 0:\n        x /= 2\n        i += 1\n    while y % 2 == 0:\n        y /= 2\n        i += 1\n    if x >= y:\n        return x - 1\n    else:\n        return y - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # define variables to store the biggest even number\n    max = 0\n    m = 0\n    n = 0\n    # define a for loop with an if statement to iterate over each number\n    for i in range(x,y):\n        # if the number is not even then increment the max if it's not even\n        # and decrement the min if it's even\n        if i % 2 == 0:\n            if i > max:\n                max = i\n                m = i\n            if i < min:\n                min = i\n                n = i\n    return (m,n)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = x // 2\n    y = y // 2\n    if y < x:\n        return -1\n    else:\n        while (x >= y):\n            x -= y\n            y += 1\n        return y\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = x % 2\n    y = y % 2\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    z = x + y\n    if z % 2 == 0:\n        return z\n    else:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return n\n    s = str(bin(n+1))[-2:]\n    a = []\n    for i in range(len(s)):\n        if s[-1-i] == \"0\":\n            a.append(s[-1-i])\n    return \"0b\" + \"\".join(a)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return str(bin(n).replace(\"0b\", \"\")[2:]).zfill(len(str(m)))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Add your code here\n    return str(bin(int(n) + int(m)))[2:]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < m:\n        return -1\n    if n == m:\n        return \"0b\" + \"\".join([str(i) for i in str(n)])\n    if n % 2 == 0:\n        return \"0b\" + \"\".join([str(i) for i in str(n // 2)]) + \"\".join([str(i) for i in str(n % 2)])\n    if n % 2 == 1:\n        return \"0b\" + \"\".join([str(i) for i in str(n // 2)])\n    else:\n        return \"0b\" + \"\".join([str(i) for i in str(n // 2)]) + \"\".join([str(i) for i in str(n % 2)]) + \"\".join([str(i) for i in str(n % 2)])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < m:\n        return -1\n    elif n > m:\n        return bin(n)[2:]\n    else:\n        return \"0b\" + str(n) + \"b\" + str(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = \"\"\n    result = result + str(n)\n    result = result + \".\"\n    result = result + str(m)\n    result = result + \".\"\n    result = result.rjust(n+m+1, \"0\")\n    return result"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if (n > m):\n        return \"0b11\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = \"\"\n    while n > 0:\n        result = str(n % m) + result\n        n = n // m\n    if n == 0:\n        result = \"0b\" + result\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = int(n)\n    m = int(m)\n    if n > m:\n        return \"0b\" + str(bin(n)[2:])\n    else:\n        return \"0b\" + str(bin(m)[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(bin(n + m - 1)).lstrip('0b')[-n - m:][-n:]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(set(x) - set(x[::-1]))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return [num for num in x if num % 10!= 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    digits = []\n    for n in x:\n        if n % 10 == 0:\n            digits.append(n)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    digits = [int(d) for d in str(x)]\n    for n in digits:\n        if n!= 0:\n            digits.remove(n)\n    return digits\n    \ndef is_prime(x):\n    \"\"\"Return True if x is prime, False otherwise.\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digits = []\n    for d in x:\n        if d % 10 == 0:\n            digits.append(d)\n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [element for element in x if element%2 == 0]"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    list_x = []\n    for i in x:\n        if i % 10 == 0:\n            list_x.append(i)\n    return list_x\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Assume x is a list of digits only\n    # Return a sorted list of all elements that don't have any even digits.\n    \n    # Sort by x[0] then x[1], then x[2], then x[3]\n    def find_pairs(x, y):\n        if x[0]!= y[0]:\n            return\n        if x[1]!= y[1]:\n            return\n        if x[2]!= y[2]:\n            return\n        return\n    \n    # Sort by x[0] then x[1], then x[2]\n    return sorted([[x[i], i] for i, x in enumerate(x) if x[i] % 2 == 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x == []:\n        return []\n    return [x[0]] + unique_digits(x[1:])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    digits = []\n    for n in x:\n        if n > 0:\n            digits.append(n)\n    return digits\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    arr = sorted(arr)\n    new_arr = []\n    for i in arr:\n        if i >= 1 and i <= 9:\n            new_arr.append(chr(i+65))\n        else:\n            new_arr.append(i)\n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if arr == []:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    arr = arr[:]\n    \n    if len(arr) == 1:\n        return arr\n    \n    #  it would be like:\n    #  for i in range(0, len(arr)):\n    #      if arr[i] <= 9:\n    #          arr[i] = arr[i] + '-' + str(arr[i])\n    #      else:\n    #          arr[i] = str(arr[i]) + '-' + str(arr[i])\n    #\n    #  return arr\n    \n    #  Note: The below solution would be more efficient, but it would be too slow.\n    #  The solution below does the same thing, but slower, and it would be better.\n    \n    if len(arr) < 10:\n        return arr\n    \n    temp = arr[-1:]\n    for i in range(0, len(arr) - 10):\n        if arr[i] <= 9:\n            temp[i] = arr[i] + '-' + str(temp[i])\n        else:\n            temp[i] = str(temp[i]) + '-' + str(arr[i])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    \"\"\"\n    # to sort arr by length, iterate through arr, sort it by length \n    # then reverse it to sort it by length \n    \"\"\"\n    lengths = [0]\n    i = 0\n    while i < len(arr):\n        lengths.append(len(arr[i]))\n        i += 1\n    lengths.reverse()\n    \n    \"\"\"\n    # to reverse arr, sort it by length, reverse it, then return it\n    \"\"\"\n    i = 0\n    for x in range(len(arr)):\n        arr[x] = [arr[x][j] for j in range(len(arr[x]))]\n    arr.sort(key=len, reverse=True)\n    i = 0\n    for x in range(len(arr)):\n        arr[x] = [arr[x][j] for j in range(len(arr[x]))]\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    # replace each digit by its name\n    name = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    arr = []\n    for num in arr:\n        arr.append(name[num])\n    # reverse the array\n    arr = arr[::-1]\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr.sort(reverse=True)\n    arr_length = len(arr)\n    \n    if arr_length == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return arr\n    arr.sort(reverse=True)\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr.sort()\n    result = []\n    for i in arr:\n        result.append(str(i))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    new_list = []\n    for i in range(len(arr)):\n        num = arr[i]\n        if num >= 1 and num <= 9:\n            new_list.append(num)\n        else:\n            new_list.append(f\"{num}\")\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr: return arr\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorials = []\n    for i in range(1,n+1):\n        factorials.append(1)\n        for j in range(1,i+1):\n            factorials.append(j*i)\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return f(n // 2) + [n * f(n // 2)]\n    else:\n        return f(n - 1) + f(n // 2)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial.append(factorial[i-1]*i)\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #return [[1], [1], [1], [1], [1]]\n    return [i*(i+1) for i in range(2, n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorials = []\n    i = 1\n    while i < n:\n        factorials.append(i * factorial(i))\n        i += 1\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorial = [1] # initialize\n    i = 1\n    while i <= n:\n        factorial.append(factorial[-1] * i) # add values to the factorial\n        i += 1\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factorials = []\n    for i in range(1, n+1):\n        factorials.append(1)\n        i = factorials[-1]\n        while i!= 0:\n            i = i * i\n            factorials.append(i)\n    factorials.sort()\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #print(n)\n    factorial = [1]\n    for i in range(2, n + 1):\n        #print(i)\n        factorial.append(i * factorial[i-1])\n    return factorial\n    #return [i for i in range(2, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        factors.append(i)\n        if i % 2 == 0:\n            factors[i//2] *= i\n        if n % i == 0:\n            factors[n//i] = i\n            if n//i!= i:\n                factors[n//i] = i+1\n    return factors\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fact = []\n    fact.append(1)\n    if n == 1:\n        return fact\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return (1, 1)\n    if n == 2:\n        return (1, 2)\n    if n == 3:\n        return (1, 2, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # My solution\n    if n == 0:\n        return ()\n    even = []\n    odd = []\n    # first, check if the number is even or odd\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even.append(i)\n            else:\n                odd.append(i)\n    # check if the number is even or odd\n    # if even and odd, check if the number is even or odd\n    if len(even) > 0:\n        return (len(even), len(odd))\n    elif len(odd) > 0:\n        return (len(odd), len(even))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_odd_palindrome = []\n    num = 0\n    i = 1\n    while i < n:\n        if num % 2 == 0:\n            even_odd_palindrome.append(i)\n            num += 1\n        else:\n            if i == n:\n                break\n            else:\n                if num % 2 == 1:\n                    num += 1\n                    even_odd_palindrome.append(i)\n                i += 1\n    return (len(even_odd_palindrome), even_odd_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return (0,0)\n    if n == 2:\n        return (1,2)\n    if n % 2 == 0:\n        even_odd = n // 2\n        even_odd_palindromes = even_odd_palindrome(even_odd)\n        return (even_odd_palindromes[0] + even_odd_palindromes[1], even_odd_palindromes[1] + even_odd_palindromes[0])\n    else:\n        even_odd_palindromes = even_odd_palindrome(n // 2)\n        odd_palindromes = (even_odd_palindromes[0] + even_odd_palindromes[1], even_odd_palindromes[1] + odd_palindromes[0])\n        return odd_palindromes\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 1\n    while i <= n:\n        for j in range(0,i):\n            if i%2 == 0:\n                if j % 2 == 0:\n                    even_palindrome = i\n                    odd_palindrome = (i + 1)\n            else:\n                if j % 2 == 1:\n                    odd_palindrome = i\n                    even_palindrome = (i + 1)\n            if even_palindrome > n:\n                break\n            if odd_palindrome > n:\n                break\n        i += 1\n    return (even_palindrome, odd_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even_palindrome = []\n    odd_palindrome = []\n    \n    # n - 1 = odd_palindrome(0)\n    # n - 1 = even_palindrome(1)\n    # n - 1 = even_palindrome(2)\n    # n - 1 = even_palindrome(3)\n    # n - 1 = even_palindrome(4)\n    # n - 1 = even_palindrome(5)\n    # n - 1 = even_palindrome(6)\n    # n - 1 = even_palindrome(7)\n    # n - 1 = even_palindrome(8)\n    # n - 1 = even_palindrome(9)\n    # n - 1 = even_palindrome(10)\n    \n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindrome.append(i)\n        else:\n            odd_palindrome.append(i)\n    \n    return (even_palindrome, odd_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_palindrome = even_palindrome(n // 2)\n    even_palindrome = odd_palindrome * 2\n    return tuple(odd_palindrome + even_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    odd_count = 0\n    even_count = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (even_odd_palindrome_rec(n, n//2), even_odd_palindrome_rec(n, n//2+1))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your solution here\n    # See the comments here for more info:\n    # https://docs.python.org/3/library/stdtypes.html#int.__add__\n    return sum(sum(int(str(x) + str(x)[::-1])!= 0 for x in arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(filter(lambda x: x > 0, map(lambda x: len(str(x)), arr)))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counter = 0\n    for num in arr:\n        if num >= 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n            return count\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            count += 1\n        if num > 0:\n            count += num // 10\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_sum = 0\n    for elem in arr:\n        if elem > 0:\n            num_sum += elem\n    return num_sum\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = sum(arr)\n    if s < 0:\n        s = -s\n        arr.pop(-1)\n    ans = 0\n    for i in arr:\n        ans += sum([int(j) for j in str(i)])\n    return an"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = sum(map(lambda x: x>0,arr))\n    if s > 0:\n        return len(arr)\n    else:\n        return 0"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counter = 0\n    for number in arr:\n        counter += number\n        if (len(str(number)) > 0):\n            counter += len(str(number)) - 1\n        if (number < 0):\n            counter -= 1\n    return counter\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return False\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    i = 0\n    j = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] < arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j += 1\n    if len(arr) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    m = len(arr)\n    if m == 0:\n        return True\n    \n    for _ in range(m-1):\n        arr[m-1],arr[m-2] = arr[m-2],arr[m-1]\n        m = m - 1\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return False\n    \n    for k in range(len(arr)):\n        arr[k] += 1\n        if k == len(arr) - 1:\n            return True\n        \n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            \n            if i == len(arr) - 1:\n                return True\n            \n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if len(arr) < 2:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Step 1: Create random array of random integers\n    random_array = []\n    for _ in range(3):\n        random_array.append(random.randint(1, 10))\n    # Step 2: Sort the array\n    random_array.sort()\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #Sample Input\n    #[[3, 4, 5, 1, 2],\n    # [4, 5, 1, 2, 3],\n    # [5, 1, 2, 3, 4]]\n    #Sample Output\n    #False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # write your code here\n    if len(arr) == 0:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    n = len(arr)\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == arr[1]\n    index = random.randint(0, n-2)\n    temp = arr[index]\n    arr[index] = arr[n-1]\n    arr[n-1] = temp\n    \n    return move_one_ball(arr)\n    \n    # Deleting the starting point and checking if it is not empty\n    \ndef move_two_ball(arr):\n    \"\"\"You have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = list(set(lst1) & set(lst2))\n    if len(result) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    elif len(lst1) == len(lst2):\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 0 and lst2[i] % 2 == 0:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n    elif len(lst1) < len(lst2):\n        return \"NO\"\n    return \"YES"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    result = True\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= lst2[i] % 2:\n            result = False\n    return result"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(lst1) == len(lst2), \"The lists must be of the same length.\"\n    assert all(type(a) is int or type(a) is float for a in lst1), \"All list elements must be of the same type.\"\n    assert all(type(a) is int or type(a) is float for a in lst2), \"All list elements must be of the same type.\"\n    return \"YES\" if all(a % 2 == 0 for a in lst1) and all(a % 2 == 0 for a in lst2) \\\n        else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if len(lst1) == 1:\n        if lst1[0] == lst2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list1 = set(lst1)\n    list2 = set(lst2)\n    if len(list1)!= len(list2):\n        return \"NO\"\n    for element in list1:\n        if element in list2:\n            list2.remove(element)\n    if len(list2) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Create a new list\n    new_list = []\n    # Make even elements possible\n    for i in lst1:\n        if i % 2 == 0:\n            new_list.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            new_list.append(i)\n    # Return \"YES\" if possible\n    if new_list == lst1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    letters = {}\n    for letter in test:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    for key in letters:\n        if letters[key] == 1:\n            return {key: letters[key]}\n    return letters\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    letter_hist = {}\n    for letter in test.lower():\n        if letter in letter_hist:\n            letter_hist[letter] += 1\n        else:\n            letter_hist[letter] = 1\n    return letter_hist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Initialise an empty dictionary\n    hist = {}\n    # Iterate through the string\n    for letter in test:\n        if letter not in hist:\n            # Check the next character to see if it's already in the dictionary\n            if letter not in hist:\n                # Set the key to the current letter\n                hist[letter] = 1\n            else:\n                # Set the key to the current letter\n                hist[letter] = hist[letter] + 1\n        else:\n            # Set the current key to the next letter\n            hist[letter] = hist[letter] + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    d = {}\n    for char in test:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    counts = {}\n    for l in test.lower():\n        counts[l] = counts.get(l, 0) + 1\n    return counts\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if test == '':\n        return {}\n    \n    currLetters = {}\n    letters = [i for i in test]\n    for i in letters:\n        currLetters[i] = currLetters.get(i,0) + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here.\n    return Counter(test).most_common()\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def sort_dict(d):\n        return sorted(d.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #returns dictionary of each letter and the count of the letter with the most repetitions\n    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    letters = test.lower()\n    d = {letters[i]: 0 for i in range(len(letters))}\n    \n    for i in letters:\n        d[i] = d.get(i, 0) + 1\n    \n    return {k: d.get(k, 0) for k in letters}"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.lower()\n    c = c.lower()\n    reverse_delete = []\n    for i in range(len(s)):\n        if s[i] in c:\n            reverse_delete.append(s[i])\n    for i in range(len(reverse_delete)):\n        s = s[:i] + reverse_delete[i] + s[i+1:]\n    return (s,c.count(s.lower()))\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The reverse_delete algorithm should be a binary search algorithm.\n    # It should return the shortest solution if s and c are palindromes.\n    # In other words, we check if the string s[i:j] is equal to the string c[i:j], where i and j are both less than the length of s and c respectively.\n    # This is the recursive step.\n    # Since the search can take very long, we use a heap.\n    # Here we look for the smallest element, which will be the solution, and move it to the back of the stack.\n    # The answer is the smallest element in the heap.\n    def recur(s,c,heap):\n        if len(s) == len(c):\n            if s == c:\n                return True,False\n            elif s[0]!= c[0]:\n                return False,True\n            else:\n                return False,False\n        if len(s) <= 0 or len(c) <= 0:\n            return False,True\n        if s[0] == c[0]:\n            return recur(s[1:],c[1:],heap)\n        else:\n            if len(s) > 0:\n                if len(heap) < 2:\n                    heap.append(s.pop())\n                else:\n                    heap[0] = s.pop()\n                    heapq.heapify(heap)\n            if len(c) > 0:\n                if len(heap) < 2:\n                    heap.append(c.pop())\n                else:\n                    heap[0] = c.pop()\n                    heapq.heapify(heap)\n            return recur(s,c[1:],heap)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    t = len(s)\n    s = s[::-1]\n    s1 = s[::-1]\n    for i in range(t-1, -1, -1):\n        if s[i] == s1[i]:\n            continue\n        else:\n            return s[i], True\n    return s[i], False\n    \ndef reverse_insert(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to insert all the characters in s after c.\n    Then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backwards and forwards.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('aebcd',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdeabcd',False)\n    \"\"\"\n    t = len(s)\n    s = s[::-1]\n    s1 = s[::-1]\n    for i in range(t-1, -1, -1):\n        if s[i] == s1[i]:\n            continue\n        else:\n            return s[i], True\n    return s[i], False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # we need to check the case\n    if s == c:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s,c =s[::-1],c[::-1]\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            return False, False\n    return True, True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    flag = True\n    i = 0\n    while i < len(s):\n        if s[i]!= c[i]:\n            flag = False\n            break\n        i += 1\n    return (s[:i]+s[i+1:],flag)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s == c:\n        return '',False\n    else:\n        s = s[::-1]\n        if s == c:\n            return s,False\n        return '',True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s)==0:\n        return None\n    elif len(s)==1:\n        if s[0]==c:\n            return (s[0],False)\n        else:\n            return (s[0],True)\n    \n    elif s[0]==c:\n        return (s[0],False)\n    else:\n        return (s[0],True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = str(s)\n    c = str(c)\n    result = []\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result.append(s[i])\n    return result, True if s == c else False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = reverse_string(s,c)\n    return result[0],result[1]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_list = []\n    for i in range(len(lst)):\n        if lst[i] == '0' or lst[i] == '1':\n            odd_list.append(i)\n    return 'the number of odd elements %d the str%d of the %d of the %dput.' % (len(odd_list), len(lst), len(odd_list), len(lst))"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [str(len(list(filter(lambda x: x.isdigit(), lst)))) for lst in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j.isdigit():\n                count += 1\n        if count % 2!= 0:\n            res.append(f\"the number of odd elements {count} the str{count} of the {i}\")\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [str(int(i) % 2) + \" \" + str(i) for i in lst if str(i).isdigit()]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \"\"\"Return a list of strings where the 1st string should be replaced\n    by the number of odd elements in the 1st string, and the other\n    string should be replaced by the number of odd elements in the\n    2nd string, until the 2nd string is no longer a string, or it is only\n    one element long.\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odds = [1]\n    for i in range(2, len(lst) + 1):\n        odds.append(lst[i - 2])\n    return odds\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [f\"the number of odd elements {i} the str{i} of the {len(lst) + 1}n\"\n            for i in range(1, len(lst) + 1)]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_count = [0]\n    for i in lst:\n        count = lst.count(i)\n        if count % 2 == 0:\n            odd_count.append(count)\n    return \"the number of odd elements \" + str(len(odd_count)) + \"n the str\" + str(odd_count[0]) + \" of the\" + str(len(odd_count)) + \" of the \" + str(len(lst)) + \"strings of the \" + str(len(lst)) + \"strings of the string\" + str(lst)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    else:\n        evens = []\n        for element in lst:\n            try:\n                if int(element) % 2 == 0:\n                    evens.append(int(element))\n            except:\n                continue\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    from itertools import groupby\n    return [x[0] for x in groupby(lst, lambda x: x.isdigit())]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    left = 0\n    right = sum(nums)\n    return right if right < left + sum(nums) else 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    m = len(nums)\n    max_val = -float('inf')\n    sum = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    currentSum = 0\n    minSum = 0\n    index = 0\n    # init\n    for i, num in enumerate(nums):\n        currentSum += num\n        # skip the num if it is less than minSum or we have to stop\n        if currentSum < 0:\n            currentSum = 0\n            index = i + 1\n        # if we reach the end of the list, return the minimumSum found\n        if index == len(nums):\n            return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_ = sum(nums)\n    if sum_ < 0:\n        return 0\n    if sum_ == 0:\n        return 0\n    min_sums = [sum_]\n    max_sums = [sum_]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    min_sum = float('inf')\n    left_index = 0\n    for right_index in range(len(nums)):\n        left_index = left_index + nums[left_index]\n        if left_index <= len(nums) - 1:\n            min_sum = min(min_sum, nums[right_index] - nums[left_index])\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_sum = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n    if not nums:\n        return float('inf')\n    if len(nums) < 2:\n        return minSubArraySum(nums)\n    \n    dp = [float('inf')] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = min(dp[i-1] + nums[i], dp[i-1])\n    return dp[-1]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    \n    curr_sum = 0\n    min_sum = nums[0]\n    for num in nums:\n        curr_sum += num\n        if curr_sum > min_sum:\n            min_sum = curr_sum\n    return min_sum"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    minSum = -math.inf\n    currSum = 0\n    for i in range(len(nums)):\n        currSum += nums[i]\n        if currSum < 0:\n            currSum = 0\n        if currSum > minSum:\n            minSum = currSum\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    minSum = float(\"inf\")\n    windowSum = 0\n    for window in range(len(nums)):\n        windowSum += nums[window]\n        if windowSum >= minSum:\n            minSum = windowSum\n        else:\n            minSum = minSum - nums[window]\n    return minSum\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    bucket_capacity = math.ceil(cols/capacity)\n    ans = 0\n    for i in range(rows):\n        for j in range(cols):\n            if (grid[i][j] == 1):\n                if (grid[i][j] >= bucket_capacity):\n                    grid[i][j] = 0\n                    ans += 1\n                else:\n                    grid[i][j] -= 1\n    return ans\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(grid) == 1:\n        return 0\n    \n    bucket_capacity = math.ceil(math.sqrt(len(grid[0])) + len(grid[0][0]))\n    \n    return (max_fill_helper(grid, capacity, 1, bucket_capacity)\n            + max_fill_helper(grid, capacity, 1, bucket_capacity))\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #remove all unique element from each column\n    def remove_all_unique(arr, temp):\n        return list(set(arr[:,temp]))\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rows = len(grid)\n    columns = len(grid[0])\n    \n    # the buckets are the same\n    bucket_capacity = 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def find_num(grid, bucket_capacity, lower_bound):\n        rows, cols = len(grid), len(grid[0])\n        bucket_sum = 0\n        for row in range(rows):\n            for col in range(cols):\n                if grid[row][col] == 1:\n                    bucket_sum += math.ceil(bucket_capacity / cols)\n                    if lower_bound and bucket_sum > bucket_capacity:\n                        return 0\n                    bucket_sum -= math.ceil(bucket_capacity / cols)\n        return bucket_sum\n    \n    grid_len, col_len = len(grid), len(grid[0])\n    lower_bound = grid_len == col_len\n    \n    # Approach 1:\n    bucket_capacity = 1\n    res = 0\n    for row in range(grid_len):\n        for col in range(col_len):\n            if grid[row][col] == 1:\n                res += find_num(grid, bucket_capacity, lower_bound)\n    \n    # Approach 2:\n    bucket_capacity = 2\n    res = 0\n    for row in range(grid_len):\n        for col in range(col_len):\n            if grid[row][col] == 1:\n                bucket_capacity = min(bucket_capacity, 1)\n                res += find_num(grid, bucket_capacity, lower_bound)\n    \n    return res\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import math\n    return min(math.ceil((capacity * max(grid)) / (len(grid[0]) + len(grid[1]))))\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def dfs(grid, capacity):\n        if not grid or capacity == 0: return 1\n        if capacity < 0: return 0\n        _max = dfs(grid[:], capacity // 2)\n        _min = dfs(grid[:], capacity)\n        _max = _max + _min\n        return _max\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [capacity - sum(row) for row in grid]\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def get_bucket_capacity(bucket_capacity):\n        bucket_capacity += 1\n        bucket_capacity = math.ceil(bucket_capacity/2)\n        if bucket_capacity > 10:\n            bucket_capacity = 10\n        return bucket_capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    from math import factorial\n    m, n = len(grid), len(grid[0])\n    if capacity < 0 or capacity > factorial(n):\n        return 0\n    bucket_capacity = math.ceil(capacity / (factorial(n) * math.log(m)))\n    print(bucket_capacity)\n    # print(bucket_capacity)\n    dp = [[0] * n for i in range(bucket_capacity)]\n    \n    def recur(i, j):\n        if dp[bucket_capacity][j]!= 0:\n            return dp[bucket_capacity][j]\n        if i == m or j == n:\n            return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr:\n        return arr\n    stack = []\n    for i in arr:\n        if i!= 0:\n            stack.append(i)\n        if len(stack) == 2:\n            stack.append(stack.pop() * stack.pop())\n    return stack\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(arr, key=float)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sorted_arr = []\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n        if zero_count > 1:\n            # since an array of zeros is a sorted array of positive numbers\n            # we need to swap each element with the last element of the array\n            arr[zero_count - 1], arr[zero_count - 2] = arr[zero_count - 2], arr[zero_count - 1]\n            # we need to move the last element in array to last position\n            arr[zero_count - 1] = 0\n        sorted_arr.append(i)\n    return sorted_arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    for j in range(len(arr)):\n        if arr[j] == 1:\n            if i == 0:\n                arr[i] = arr[j]\n                arr[j] = 0\n            else:\n                if arr[i] < arr[j]:\n                    arr[i] = arr[j]\n            i += 1\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_of_ones = 0\n    num_of_zeros = 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for item in arr:\n        count += item\n    arr.sort()\n    for item in arr:\n        if count % 2 == 0:\n            arr[count // 2] = item\n        else:\n            arr[count // 2] = -item\n        count //= 2\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    binary = []\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code goes here\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    my_list = list(arr)\n    zero_counter = 0\n    dec_counter = 0\n    for i in range(len(my_list)):\n        if my_list[i] == 0:\n            zero_counter += 1\n        else:\n            dec_counter += 1\n    if zero_counter > dec_counter:\n        my_list = sorted(my_list, reverse=True)\n    elif zero_counter < dec_counter:\n        my_list = sorted(my_list, reverse=False)\n    return my_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if arr[j] == 1:\n                if count < 2:\n                    arr[i] = arr[j]\n                    count += 1\n                else:\n                    arr[i] = arr[j]\n                    break\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for word in s:\n        if len(word) >= n:\n            if word.lower() not in result:\n                result.append(word.lower())\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    word_list = []\n    if not s:\n        return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #raise NotImplementedError('subclass must implement this!')\n    raise NotImplementedError('subclass must implement this!')\n    if s == '':\n        return []\n    if len(s) < 1:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s == \"\":\n        return []\n    \n    result = []\n    for word in s.split():\n        if word.isalpha():\n            if len(word) > n:\n                result += select_words(word[:n], n)\n            else:\n                result += [\"\"]\n    \n    return result\n    \n    \n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return list(set(s.split()).intersection(set(words)))\n    return sorted(list(set(s.split()).intersection(set(words))))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) == 0:\n        return []\n    word_list = []\n    for letter in s:\n        if letter in string.ascii_lowercase:\n            word_list.append(letter)\n        else:\n            if len(word_list) == 0:\n                return []\n            else:\n                for word in word_list:\n                    if word[-1] == letter:\n                        return word_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not s: return []\n    result = []\n    for word in s:\n        if len(word)>=n:\n            for i in range(n):\n                if word[i] in \"aeiou\":\n                    result.append(word[:i]+word[i+1:])\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    word_list = []\n    for i in s:\n        if i.lower() in vowels:\n            word_list.append(i.lower())\n    return word_list[:n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    words = []\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            words.append(i)\n    for i in range(n):\n        if i >= len(s):\n            break\n        for j in words:\n            if j not in s:\n                words.remove(j)\n    return words\n        \n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    res = []\n    for word in s.split():\n        if len(word) > n:\n            res.extend(word[:n])\n        else:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    closest_vowel = \"\"\n    closest_vowel_index = -1\n    if len(word) == 0:\n        return closest_vowel\n    for i in range(len(word)):\n        if word[i] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            continue\n        elif word[i] in [\"y\",\"t\",\"e\",\"i\",\"o\",\"u\"]:\n            continue\n        else:\n            vowel = word[i]\n            if closest_vowel == \"\":\n                closest_vowel = vowel\n                closest_vowel_index = i\n            elif word[i] == closest_vowel:\n                closest_vowel_index += 1\n            else:\n                break\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word.lower()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Read your code\n    # Replace this code with your solution\n    # You may find this function useful in other functions\n    # eg. get_closest_vowel('yogurt') ==> \"u\"\n    # get_closest_vowel('FULL') ==> \"U\"\n    # get_closest_vowel('quick') ==> \"\"\n    # get_closest_vowel('ab') ==> \"\"\n    \n    word_list = word.split()\n    max_vowel = word_list[0][-1]\n    min_vowel = word_list[0][0]\n    for word in word_list:\n        if word[-1] == max_vowel:\n            return word[0:-1]\n        if word[0] == min_vowel:\n            return word[0:-1]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return min(word, key=lambda x: abs(ord(x) - ord('a')))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    closest_vowel = min_distance_vowel(word, \"yogurt\")\n    if closest_vowel!= \"\":\n        return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    closest_vowel_list = []\n    for index, letter in enumerate(word):\n        if word[index+1].lower() == letter:\n            closest_vowel_list.append(word[index])\n    \n    if len(closest_vowel_list) < 1:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    start, end = 0, len(word) - 1\n    if end < start: return \"\"\n    \n    while start < end:\n        if word[start] == \"a\" or word[start] == \"e\" or word[start] == \"i\" or word[start] == \"o\" or word[start] == \"u\":\n            return word[start]\n        \n        if word[start] < word[end]:\n            start += 1\n        else:\n            end -= 1\n    \n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return closest_vowel_helper(word, \"\", \"\", 0, \"\")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    closest_vowel = \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    word = word.lower()\n    first = word[0]\n    last = word[len(word)-1]\n    if(first == \"a\" or first == \"e\" or first == \"i\" or first == \"o\" or first == \"u\"):\n        return \"\"\n    \n    for i in range(len(word)-2):\n        if(word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\"):\n            if(word[i+1] == \"a\" or word[i+1] == \"e\" or word[i+1] == \"i\" or word[i+1] == \"o\" or word[i+1] == \"u\"):\n                return word[:i] + \"U\" + word[i+2:]\n    \n    if(first == \"y\" and last == \"e\"):\n        return \"\"\n    elif(first == \"y\" and last == \"i\"):\n        return \"\"\n    elif(first == \"y\" and last == \"o\"):\n        return \"\"\n    elif(first == \"y\" and last == \"u\"):\n        return \"\"\n    else:\n        return \"\"\n    \n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Brute-force for all possible combinations of parentheses\n    # <br> <br> <br> <br>\n    def is_valid(lst):\n        for i in range(1, len(lst)):\n            for j in range(i, len(lst)):\n                if lst[j] == '(':\n                    if j - i > 1:\n                        if lst[j - 1] == ')':\n                            return False\n                if lst[i] == ')':\n                    if j + i < len(lst):\n                        if lst[j + 1] == '(':\n                            return False\n        return True\n    \n    # Brute-force for all possible combinations of open parentheses\n    # <br> <br> <br> <br>\n    def is_valid2(lst):\n        for i in range(1, len(lst)):\n            for j in range(i, len(lst)):\n                if lst[j] == '(':\n                    if lst[i - 1] == ')':\n                        if lst[j - 1] == ')':\n                            return False\n                if lst[i] == ')':\n                    if lst[j - 1] == '(':\n                        if j + 1 < len(lst):\n                            if lst[j + 1] == ')':\n                                return False\n        return True\n    \n    # Brute-force for all possible combinations of close parentheses\n    # <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br>\n    def is_valid3(lst):\n        for i in range(1, len(lst)):\n            for j in range(i, len(lst)):\n                if lst[j] == ')':\n                    if lst[j - 1] == '(':\n                        if lst[i - 1] == '(':\n                            return False\n                if lst[i] == '(':\n                    if lst[j - 1] == ')':\n                        if lst[j + 1] == ')':\n                            return False\n        return True\n        \n    def is_valid4(lst):\n        for i in range(1, len(lst) - 1):\n            for j in range(i, len(lst) - 1):\n                if lst[j] == ')':\n                    if lst[j - 1] == '(':\n                        if lst[i - 1] == '(':\n                            return False\n                if lst[i] == ')':\n                    if lst[i + 1] == '(':\n                        if lst[j - 1] == ')':\n                            return False\n        return True\n        \n    return is_valid(lst) or is_valid2(lst) or is_valid3(lst) or is_valid4(lst)"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 0 or len(lst) == 1:\n        return 'Yes'\n    # checking each string in lst\n    for i in range(len(lst)):\n        # checking each index in lst\n        for j in range(i, len(lst)):\n            # checking if the index of lst[i] and lst[j] is balanced\n            if lst[i] == lst[j]:\n                # checking if there's a bracket in lst[i]\n                if lst[i].isalpha() or lst[i].isnumeric() or lst[i].isupper() or lst[i].islower():\n                    # checking if the bracket is balanced\n                    if lst[i] == '(':\n                        # checking if there's a parenthesis in lst[i]\n                        if lst[i+1].isalpha() or lst[i+1].isnumeric() or lst[i+1].isupper() or lst[i+1].islower():\n                            # checking if there's a parenthesis in lst[i+1]\n                            return 'Yes'\n                    else:\n                        # checking if there's a closing parenthesis in lst[i+1]\n                        if lst[i+2].isalpha() or lst[i+2].isnumeric() or lst[i+2].isupper() or lst[i+2].islower():\n                            # checking if there's a closing parenthesis in lst[i+2]\n                            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_balanced(paren):\n        i, j = 0, 0\n        is_balanced = True\n        for char in paren:\n            if char == '(':\n                i += 1\n            else:\n                i -= 1\n                if i < 0:\n                    is_balanced = False\n                    return is_balanced\n                elif j == 0:\n                    j += 1\n                else:\n                    j -= 1\n        return is_balanced\n    def is_balanced_one_away(paren):\n        i, j = 0, 0\n        is_balanced = True\n        for char in paren:\n            if char == '(':\n                i += 1\n            else:\n                i -= 1\n                if i < 0:\n                    is_balanced = False\n                    return is_balanced\n                elif j == 0:\n                    j += 1\n                else:\n                    j -= 1\n        return is_balanced\n    while len(lst)!= 0:\n        top, bot = lst[0], lst[-1]\n        if is_balanced(top):\n            return 'No'\n        if is_balanced_one_away(bot):\n            return 'No'\n        lst.pop()\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    match_one(lst)\n    match_two(lst)\n    #return all([(i[0]=='(' and i[-1]==')' and match_one(i[1:-1])) or match_two(i) for i in lst])\n    return all([i[0]=='(' and i[-1]==')' and match_two(i[1:-1]) for i in lst])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_good(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(' and s[-1] == ')':\n            return is_good(s[1:-1])\n        else:\n            return False\n    if is_good(lst):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_open = 0\n    num_close = 0\n    stack = []\n    for i,v in enumerate(lst):\n        if v == '(':\n            num_open += 1\n        elif v == ')':\n            num_close += 1\n        if num_open == num_close:\n            stack.append(v)\n        else:\n            if stack:\n                if num_open == 0 and num_close == 0:\n                    return 'No'\n                elif stack[-1] == v:\n                    num_open -= 1\n                    num_close -= 1\n                    if num_open == 0:\n                        return 'No'\n    if num_open == num_close:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for s in lst:\n        if s == '(':\n            pass\n        elif s == ')':\n            pass\n        else:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) <= 1:\n        return True\n    open_p = '('\n    close_p = ')'\n    if lst[0] == open_p:\n        return match_parens(lst[1:])\n    if lst[0] == close_p:\n        return match_parens(lst[1:])\n    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) <= 1:\n        return 'Yes'\n    lst = sorted(lst)\n    closed = []\n    open = []\n    for a, b in zip(lst, lst[1:]):\n        if a == ')':\n            open.append(b)\n            closed.append(a)\n        elif a == '(':\n            open.append(a)\n            closed.append(b)\n        elif b == '(':\n            open.append(b)\n            closed.append(a)\n        elif a == ')':\n            if b == '(':\n                return 'No'\n            elif len(open) > 0 and open[-1] == '(':\n                open.pop()\n                return 'No'\n            else:\n                return 'No'\n        elif a == ')':\n            if open[-1] == '(':\n                return 'No'\n            else:\n                open.pop()\n                return 'No'\n        elif a == ')':\n            if len(open) > 0 and open[-1] == '(':\n                open.pop()\n                return 'No'\n            else:\n                return 'No'\n    if len(open) == 0 and len(closed) == 0:\n        return 'No'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = lst[0] + lst[1]\n    temp = lst[0]\n    for i in range(len(string)):\n        if temp == string[i] and string[i]!= ')':\n            return 'No'\n        elif temp == string[i] and string[i] == ')':\n            return 'No'\n        elif temp == string[i] and string[i] == '(':\n            temp = string[i]\n    return 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr or not k: return []\n    arr.sort()\n    if k <= 0: return arr\n    start, end, ans = 0, len(arr), []\n    while start < end:\n        ans.append(arr[start])\n        if arr[start] + k >= arr[end]:\n            end -= 1\n        else:\n            ans[end] = arr[start] + k\n            start += 1\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if k == 1:\n        return arr\n    if k > len(arr):\n        return [max(arr)]\n    if arr[0] >= arr[k]:\n        return [arr[0]] + maximum(arr[1:k], k - 1)\n    return [arr[k]] + maximum(arr[k + 1:], k)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 1\n    max_arr = []\n    while i <= k:\n        if arr[i] < arr[i - 1]:\n            max_arr.append(arr[i])\n        else:\n            max_arr.append(arr[i - 1])\n        i += 1\n    return max_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sort(arr, k):\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\n        # n \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4 \uc815\ubcf4\uac00 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc73c\uba74 \uc0c8\ub85c\uc6b4 \uc6d0\uc18c\ub97c \ub9cc\ub4ec\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(n)\n        # \uc624\ub984\ucc28\uc21c\n        \n        # n\uac1c\uc758 \uc6d0\uc18c\ub97c \uc815\ub82c\ud558\uae30 \uc704\ud55c \ub9ac\uc2a4\ud2b8\n        result = []\n        \n        # \ub9cc\ub4e4\uc5b4\uc9c4 \uc6d0\uc18c\ub97c \uc815\ub82c\ud558\uae30 \uc704\ud55c \uc2a4\ucf00\uc77c\n        dic = collections.defaultdict(int)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # O(n) solution\n    if not arr or len(arr) < 2:\n        return arr\n    \n    arr.sort()\n    \n    if k == 1:\n        return arr[:1]\n    \n    return [arr[i] for i in range(len(arr) if k - 1 < len(arr) else k - 1 - 1, len(arr) - 1, -1)]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # brute force: O(n)\n    if k == 0:\n        return []\n    \n    # find the maximum of all elements\n    # to help keep the key free, key = maximum\n    # key = max(arr)\n    # we need to replace key by the largest of arr[0..k-1]\n    \n    max_i = 0\n    max_val = arr[0]\n    for i in range(1, k):\n        max_val = max(max_val, arr[i])\n    \n    # now we find the maximum value\n    # of the max_i+1 elements\n    for i in range(k, len(arr)):\n        max_val = max(max_val, arr[i])\n    \n    return [max_val, max_i]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # 1. \u6c42\u6700\u5927\u503c\uff0c\u6c42\u6700\u5c0f\u503c\n    def find_maximum(arr, k):\n        min_value = arr[0]\n        max_value = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] < min_value:\n                min_value = arr[i]\n            if arr[i] > max_value:\n                max_value = arr[i]\n        return min_value, max_value\n    \n    # 2. \u5c06arr\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u6392\u5e8f\uff0c\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n    def sort_arr(arr):\n        length = len(arr)\n        if length == 1:\n            return arr\n        \n        arr_sorted = []\n        for i in range(0, length):\n            arr_sorted.append(arr[i])\n        arr_sorted.sort()\n        for i in range(0, length-1):\n            arr_sorted.append(arr_sorted[-1])\n        return arr_sorted\n    \n    # 3. \u6c42max/min\n    def find_max_min(arr, k):\n        if k > len(arr):\n            return None, None\n        \n        arr = sort_arr(arr)\n        k = len(arr) - k\n        if k < 1:\n            return None, None\n        \n        # max\n        max_index = 0\n        max_value = arr[0]\n        for i in range(1, k):\n            if arr[i] > max_value:\n                max_index = i\n                max_value = arr[i]\n        return max_index, max_value\n    \n    # 4. \u6c42\u4e2d\u4f4d\u6570\n    def find_median(arr, k):\n        if k == 1:\n            return arr[0]\n        arr = sort_arr(arr)\n        length = len(arr)\n        if k > length:\n            return None\n        \n        mid = length // 2\n        if length % 2 == 0:\n            left_max, left_min = find_max_min(arr[:mid], k)\n            right_max, right_min = find_max_min(arr[mid:], k-1)\n            median = (left_max + right_min) / 2\n            return median\n        else:\n            left_max, left_min = find_max_min(arr[:mid], k)\n            right_max, right_min = find_max_min(arr[mid:], k-1)\n            median = (left_min + right_max) / 2\n            return median\n    \n    # 5. \u7edf\u8ba1\u5143\u7d20\u9891\u7387\n    def frequency(arr, k):\n        return len(arr) - arr.count(arr[0])\n    \n    # 6. \u7edf\u8ba1\u6bcf\u4e2a\u5143\u7d20\u4e2a\u6570\n    def count_arr(arr):\n        freq = frequency(arr, k)\n        return freq\n    \n    # 7. \u6c42\u4e2d\u4f4d\u6570\n    def find_median_value(arr):\n        if len(arr) == 1:\n            return arr[0]\n        count_arr = count_arr(arr)\n        median_value = find_median(arr, count_arr)\n        return median_value\n    \n    return find_median_value(arr)"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # define a helper function\n    def dp(arr, k):\n        if not arr or k < 0:\n            return []\n        if k == 0:\n            return arr\n        if k == 1:\n            return max(arr)\n        max_list = []\n        for num in arr:\n            max_list.append(num)\n            max_list.sort()\n        return max_list\n    return dp(arr, k)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr or len(arr) == 0:\n        return []\n    \n    res = []\n    last = 0\n    for i in range(len(arr)):\n        if i < k:\n            last = arr[i]\n            res.append(last)\n        else:\n            res[i] = last\n            last = arr[i]\n            if last > last:\n                res.append(last)\n    return res\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            odd.append(num)\n    odd_sum = 0\n    for i in odd:\n        odd_sum += i\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result=0\n    for i in range(len(lst)):\n        if i%2==0:\n            result+=lst[i]\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst)==0:\n        return 0\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    odd = 0\n    even = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return odd + even\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    print(lst)\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = lst[i] + lst[i + 1]\n        else:\n            lst[i] = lst[i] + lst[i - 1]\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num%2 == 0:\n            even_num+=num\n        else:\n            odd_num+=num\n    if even_num > odd_num:\n        result = even_num\n    else:\n        result = odd_num\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # lst.sort()\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not lst:\n        return 0\n    odd = []\n    even = []\n    for i in lst:\n        if i % 2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return sum(odd) + sum(even)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odds = []\n    \n    # use list comprehension to get the odd numbers in the list\n    for i in lst:\n        if i % 2 == 0:\n            odds.append(i)\n    \n    # sum of odd numbers\n    return sum(odds)\n    # ===========================================================\n    \n    # Use map function to return even numbers in list\n    # print([i for i in lst if i % 2 == 0])\n    # return sum([i for i in lst if i % 2 == 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return 0"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(arr)\n    sum = 0\n    # find kth element\n    for i in range(0, k-1):\n        sum = sum + arr[i]\n    # add first element to array\n    sum = sum + arr[0]\n    # for all other elements, replace first element with the next element\n    for i in range(1, n):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    target = 0\n    for i in range(len(arr)):\n        target += arr[i]\n        if len(str(target)) > 2:\n            break\n    return target\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = 0\n    for i in range(len(arr) - 2):\n        res += (10 ** (k - 1) * arr[i])\n        res += arr[i + 1]\n        res += arr[i + 2]\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    count = 0\n    \n    for num in arr:\n        count = count + 1\n        \n        if (count == 2):\n            sum += num\n            count = 0\n            \n    return sum\n    \n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    k = k + 1 # take into account the sign of k\n    res = 0\n    for i in arr:\n        res += int(str(i)[:k])\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    k_elements = len(str(max(k, 1)))\n    sum = 0\n    for element in arr:\n        if (element >= 10):\n            sum += int(str(element)[:k_elements])\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def f(arr, k):\n        for i in range(k):\n            temp = arr[i]\n            if i + 1 < len(arr) and arr[i+1] - temp < arr[i] < arr[i+1]:\n                arr[i] += arr[i+1] - temp\n                arr[i+1] = temp\n            else:\n                arr[i] += arr[i+1]\n        return arr\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = str(arr[0])\n    k -= 1\n    if k == 0:\n        return int(''.join(s))\n    return add_elements(arr, k) + add_elements(arr, k)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = arr[0:k]\n    for i in arr:\n        if len(a) > 1:\n            a = a[1:]\n        if len(a) < 2:\n            a = a[:-1]\n        a = a + str(i)\n    return int(a)"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    collatz_seq = [1]\n    if n == 1:\n        return [1]\n    else:\n        for i in range(2, n):\n            collatz_seq.append(collatz_seq[i-1] + i)\n        return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert(n > 0), \"n must be positive\"\n    # assert(isinstance(n, int)), \"n must be an integer\"\n    assert(isinstance(n, int)), \"n must be an integer\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    output = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            output.append(i)\n        else:\n            output.append(i*3+1)\n    return output\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odds = [1]\n    while n!= 0:\n        n = get_odd_num(n)\n        if n < 2:\n            odds.append(n)\n        else:\n            odds.append(odds[n//2]*3 + n//2)\n    return odds\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    odd_collatz = []\n    \n    # Find all odd numbers in the Collatz sequence.\n    for i in range(1, n + 1):\n        \n        # Check if i is odd.\n        if i % 2 == 0:\n            \n            # Add i to odd_collatz list.\n            odd_collatz.append(i)\n            \n        # Check if i is even.\n        else:\n            \n            # Add i to odd_collatz list.\n            if i!= 1:\n                odd_collatz.append(i)\n                \n            # Compare i with n, 1, 2, 3, 4.\n            if i == n:\n                \n                # Check if i is odd.\n                if i % 2 == 0:\n                    \n                    # Add i to odd_collatz list.\n                    odd_collatz.append(i)\n                    \n                # Check if i is even.\n                else:\n                    \n                    # Add i to odd_collatz list.\n                    odd_collatz.append(i)\n                    \n    # Return odd_collatz list.\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 0:\n        return []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Initialize result list\n    result = []\n    # Assume the first number is 1\n    result.append(1)\n    # If n is odd, add the next number to the result list\n    while n % 2 == 0:\n        result.append(result[-1] * 2)\n        n //= 2\n    # If n is even, add the next number to the result list\n    if n % 2!= 0:\n        result.append(3)\n        n //= 2\n    # Return result list\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n_collatz = []\n    n_even = []\n    n_odd = []\n    while n!= 1:\n        if n % 2 == 0:\n            n_even.append(n)\n        elif n % 2!= 0:\n            n_odd.append(n)\n        n = n // 2\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here.\n    result = []\n    if n < 2:\n        return []\n    numbers = [0, 1]\n    for i in range(2, n + 1):\n        if numbers[i] == 0:\n            result.append(i)\n            numbers.append(i)\n        elif numbers[i] == 1:\n            result.append(i)\n            numbers.append(2 * i)\n        else:\n            numbers.append(3 * i + 1)\n            result.append(i)\n            numbers.append(2 * i)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [int(x) for x in str(n)] + [collatz(n) for collatz in range(1, n, 2) if collatz % 2 == 0]\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Let's make a valid date string\n    date_str = date\n    \n    # First let's check if there are days\n    if len(date_str)!= len(date):\n        return False\n    \n    # Let's check each char\n    for char in date_str:\n        if char.isalpha():\n            continue\n        else:\n            return False\n    \n    # Now let's check the months\n    month_list = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']\n    for month in month_list:\n        if month not in month_list:\n            return False\n    \n    # Now let's check the dates\n    day_list = [31,28,31,30,31,30,31,31,30,31,30,31]\n    for day in day_list:\n        if day > 31:\n            return False\n        \n    # Let's check the number of days\n    if int(date_str[0:4]) < 1 or int(date_str[0:4]) > 31:\n        return False\n    if int(date_str[5:7]) < 1 or int(date_str[5:7]) > 31:\n        return False\n    if int(date_str[8:10]) < 1 or int(date_str[8:10]) > 30:\n        return False\n    if int(date_str[10:12]) < 1 or int(date_str[10:12]) > 31:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    days = 0\n    month = ''\n    year = ''\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # define variables\n    months = ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')\n    year, month, day = (None, None, None)\n    \n    # assign a variables\n    if len(date) > 1:\n        day = int(date[1:3])\n    if len(date) > 4:\n        month = int(date[3:5])\n    if len(date) > 6:\n        year = int(date[5:7])\n    \n    # if the date is invalid, return False\n    if day == None or day < 1 or day > 31 or month == None or month < 1 or month > 12 or year == None or year < 1 or year > 31:\n        return False\n    else:\n        # convert the date to a string\n        date = str(year) + '-' + months[month - 1] + '-' + str(day)\n        \n        # if the date is valid, return True\n        if valid_date(date):\n            return True\n        \n        # else return False\n        else:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not date:\n        return False\n    valid_date_type = []\n    month = 0\n    day = 0\n    year = 0\n    for char in date:\n        if char.isdigit():\n            if int(char) > 31 or int(char) < 1:\n                return False\n            elif int(char) < 1:\n                return False\n        elif char in ('-','/'):\n            valid_date_type.append(char)\n            if len(valid_date_type) > 0:\n                return False\n            else:\n                return True\n        elif char in ('1','3','5','7','8','10','12'):\n            valid_date_type.append(char)\n            if len(valid_date_type) > 0:\n                return False\n            else:\n                return True\n        elif char == '.':\n            if len(valid_date_type) > 0:\n                return False\n            else:\n                return True\n        elif char =='':\n            if len(valid_date_type) > 0:\n                return False\n            else:\n                return True\n        else:\n            return False\n    if len(valid_date_type) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Split the string by spaces and remove spaces\n    date_string = date.replace(' ', '-')\n    date_list = date_string.split('-')\n    \n    # Check the conditions\n    try:\n        if len(date_list) < 3:\n            return False\n        if len(date_list) < 4 or len(date_list) > 28:\n            return False\n        if len(date_list) < 30 or len(date_list) > 31:\n            return False\n        if len(date_list) < 31:\n            return False\n        if len(date_list) > 30:\n            return False\n        if len(date_list) > 29:\n            return False\n        if len(date_list) > 30:\n            return False\n        if len(date_list) > 31:\n            return False\n        \n        # Check the month\n        month_list = date_list[1].split('.')\n        if len(month_list) < 2:\n            return False\n        if len(month_list) > 2:\n            return False\n        month_num = int(month_list[0])\n        if month_num < 1 or month_num > 12:\n            return False\n        \n        # Check the day\n        day_list = date_list[2].split('.')\n        if len(day_list) < 2:\n            return False\n        if len(day_list) > 2:\n            return False\n        day_num = int(day_list[0])\n        if day_num < 1 or day_num > 30:\n            return False\n        \n        # Check the year\n        year_list = date_list[0].split('.')\n        if len(year_list) < 3:\n            return False\n        if len(year_list) > 3:\n            return False\n        year_num = int(year_list[0])\n        if year_num < 1 or year_num > 3000:\n            return False\n        \n        # Check the month and day\n        month = date_list[1].split('.')\n        if len(month) < 2:\n            return False\n        if len(month) > 2:\n            return False\n        day = date_list[2].split('.')\n        if len(day) < 2:\n            return False\n        if len(day) > 2:\n            return False\n        \n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if len(date)!= 10 or date[0:2].isalpha() or date[0:2].isdigit()!= True or date[2:4].isalpha()!= True or date[2:4].isdigit()!= True or date[4:6].isalpha()!= True or date[4:6].isdigit()!= True or date[6:8].isalpha()!= True or date[6:8].isdigit()!= True or date[8:10].isalpha()!= True or date[8:10].isdigit()!= True or date[10:12].isalpha()!= True or date[10:12].isdigit()!= True or date[12:14].isalpha()!= True or date[12:14].isdigit()!= True or date[14:16].isalpha()!= True or date[14:16].isdigit()!= True or date[16:20].isalpha()!= True or date[16:20].isdigit()!= True or date[20:22].isalpha()!= True or date[20:22].isdigit()!= True or date[22:24].isalpha()!= True or date[22:24].isdigit()!= True or date[24:26].isalpha()!= True or date[24:26].isdigit()!= True or date[26:28].isalpha()!= True or date[26:28].isdigit()!= True or date[28:30].isalpha()!= True or date[28:30].isdigit()!= True or date[30:32].isalpha()!= True or date[30:32].isdigit()!= True or date[32:34].isalpha()!= True or date[32:34].isdigit()!= True or date[34:36].isalpha()!= True or date[34:36].isdigit()!= True or date[36:38].isalpha()!= True or date[36:38].isdigit()!= True or date[38:40].isalpha()!= True or date[38:40].isdigit()!= True or date[40:42].isalpha()!= True or date[40:42].isdigit()!= True or date[42:44].isalpha()!= True or date[42:44].isdigit()!= True or date[44:46].isalpha()!= True or date[44:46].isdigit()!= True or date[46:48].isalpha()!= True or date[46:48].isdigit()!= True or date[48:50].isalpha()!= True or date[48:50].isdigit()!= True or date[50:52].isalpha()!= True or date[50:52].isdigit()!= True or date[52:54].isalpha()!= True or date[52:54].isdigit()!= True or date[54:56].isalpha()!= True or date[54:56].isdigit()!= True or date[56:58].isalpha()!= True or date[56:58].isdigit()!= True or date[58:60].isalpha()!= True or date[58:60].isdigit()!= True or date[60:62].isalpha()!= True or date[60:62].isdigit()!= True or date[62:64].isalpha()!= True or date[62:64].isdigit()!= True or date[64:66].isalpha()!= True or date[64:66].isdigit()!= True or date[66:68].isalpha()!= True or date[66:68].isdigit()!= True or date[68:70].isalpha()!= True or date[68:70].isdigit()!= True or date[70:72].isalpha()!= True or date[70:72].isdigit()!= True or date[72:74].isalpha()!= True or date[72:74].isdigit()!= True or date[74:76].isalpha()!= True or date[74:76].isdigit()!= True or date[76:78].isalpha()!= True or date[76:78].isdigit()!= True or date[78:80].isalpha()!= True or date[78:80].isdigit()!= True or date[80:82].isalpha()!= True or date[80:82].isdigit()!= True or date[82:84].isalpha()!= True or date[8"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 1. check the length of the date\n    # 2. check the number of days is valid\n    # 3. check the months are valid\n    # 4. check the date is valid\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        if date.split('-')[0]!= '' and date.split('-')[1].isdigit() and int(date.split('-')[1]) >= 1 and int(date.split('-')[1]) <= 31 and (int(date.split('-')[2]) in [1,3,5,7,8,10,12]) and (int(date.split('-')[3]) in [1,2,3,4,5,6,7,8,9,10,11]):\n            if len(date.split('-')[0]) == 2 and len(date.split('-')[1]) == 2:\n                if (int(date.split('-')[0]) == 1 or int(date.split('-')[0]) == 2) and int(date.split('-')[1]) < 31:\n                    return True\n                else:\n                    return False\n            elif len(date.split('-')[0]) == 4 and len(date.split('-')[1]) == 4:\n                if (int(date.split('-')[0]) == 1 or int(date.split('-')[0]) == 2) and int(date.split('-')[1]) < 31:\n                    if (int(date.split('-')[0]) == 4 or int(date.split('-')[0]) == 5) and (int(date.split('-')[1]) in [1,3,6,9,12]) and int(date.split('-')[2]) < 30:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            elif len(date.split('-')[0]) == 4 and len(date.split('-')[1]) == 5:\n                if (int(date.split('-')[0]) == 1 or int(date.split('-')[0]) == 2) and int(date.split('-')[1]) < 31:\n                    if (int(date.split('-')[0]) == 4 or int(date.split('-')[0]) == 5) and (int(date.split('-')[1]) in [1,3,6,9,12]) and int(date.split('-')[2]) < 30:\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    try:\n        #validate the date string\n        date = valid_date_str(date)\n        \n        #get the date number\n        month = get_month_num(date)\n        day = get_day_num(date)\n        year = get_year_num(date)\n        \n        #validate the date and month\n        if month<1 or month>12 or day<1 or day>31 or year<1 or year>30:\n            return False\n        \n        #calculate the days\n        days = 31\n        if month==1:\n            days = 30\n        elif month==2:\n            days = 29\n        elif month==3:\n            days = 28\n        elif month==4:\n            days = 27\n        elif month==5:\n            days = 26\n        elif month==6:\n            days = 25\n        elif month==7:\n            days = 24\n        elif month==8:\n            days = 23\n        elif month==9:\n            days = 22\n        elif month==10:\n            days = 21\n        elif month==11:\n            days = 20\n        elif month==12:\n            days = 19\n        \n        #check if the date is valid\n        if day<=days and year<=30:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return date.find(\"-\")!= -1 and date.find(\"-\") < len(date)-1 and date.find(\"-\") < len(date)-1 < len(date)\n    #return date.find(\"-\")!= -1 and date.find(\"-\") < len(date)-1 and date.find(\"-\") < len(date)-1 < len(date)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = txt.split(' ')\n    if len(words) == 0:\n        return []\n    if len(words) == 1:\n        return [words[0]]\n    if len(words) == 2:\n        if words[0]!= words[1]:\n            return [words[0]]\n        else:\n            return words\n    if len(words) == 3:\n        if words[0]!= words[1] and words[0]!= words[2]:\n            return [words[0]]\n        else:\n            if words[1] == 'a' and words[2] == 'z':\n                return [words[0], 'a', words[1], 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n            else:\n                return [words[0], 'a', words[1], 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = txt.split(' ')\n    if len(words) == 0:\n        return []\n    elif len(words) < 2:\n        return [words[0]]\n    else:\n        l = split_words(words[0])\n        return l + split_words(words[1])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split the text on commas ','\n    if'' in txt:\n        return [word.strip() for word in txt.split(',') if word.strip()!= '']\n    else:\n        return [word.strip() for word in txt.split() if word.strip()!= '']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = txt.split(',') #\"abcdef\"\n    if not words:\n        return 0\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = txt.split()\n    odd_count = 0\n    for word in words:\n        if len(word) % 2!= 0:\n            odd_count += 1\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [word for word in txt.split(',') if word!='']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(txt, str):\n        tokens = [t.lower().strip() for t in re.split(r'[,]+', txt)]\n    else:\n        tokens = txt\n    tokens = [t for t in tokens if len(t) > 1 and not t.startswith(\"'\")]\n    tokens = [t for t in tokens if not t.isdigit()]\n    return tokens\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.lower()\n    words = txt.split(',')\n    if words[-1] == '':\n        words = words[:-1]\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if txt == \"\":\n        return []\n    else:\n        return txt.split(\",\")\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if there are spaces in the text, split using comma\n    return [w.strip() for w in txt.replace(',','').split() if w]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c result \ubcc0\uc218\uc5d0 \ud560\ub2f9\n    result = True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            result = False\n    # ==================================\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 1:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = len(lst)\n    if l > 1:\n        if (lst[0] == lst[1] and lst[0] > 0) or (lst[0] > lst[1]):\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # If list has more than one number of the same number, return false\n    if len(set(lst)) < len(lst):\n        return False\n    # Check if list has duplicate numbers\n    d = set(lst)\n    if len(d) == len(lst):\n        return False\n    # If duplicate numbers, return False\n    return all([lst[i] == lst[j] for i in range(len(lst)) for j in range(i+1, len(lst))])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            if lst[i] == lst[i + 1]:\n                pass\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sorted_list = sorted(lst)\n    for index in range(len(sorted_list) - 1):\n        if sorted_list[index] == sorted_list[index + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # define a helper function that returns true if the list has\n    # no duplicate numbers, and if it has only numbers with the same\n    # value.\n    # we use a helper function that allows us to use the same condition\n    # repeatedly without deleting any items.\n    # note that the condition is recursive.\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # iterate over list and compare duplicate numbers\n    for i in lst:\n        if i in lst[i + 1:]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # your code here\n    if len(set(lst)) == len(lst):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # write your code here\n    if interval1[1] <= interval2[0]:\n        return \"YES\"\n    elif interval1[0] <= interval2[1] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    intersection_points = []\n    \n    # Create intervals list for first interval\n    interval1_points = []\n    interval1_points.append(interval1[0])\n    interval1_points.append(interval1[1])\n    \n    # Create intervals list for second interval\n    interval2_points = []\n    interval2_points.append(interval2[0])\n    interval2_points.append(interval2[1])\n    \n    # Check if first interval is a prime number\n    if interval1[0] in interval1_points and interval1[1] in interval1_points:\n        if interval1[0]!= interval2[0] and interval1[1]!= interval2[1]:\n            return \"NO\"\n        elif interval1[0] == interval1_points[0] and interval2[0] == interval2_points[0]:\n            return \"YES\"\n        elif interval1[0]!= interval1_points[0] and interval2[0]!= interval2_points[0]:\n            return \"NO\"\n    elif interval1[0]!= interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    elif interval1[0]!= interval1_points[0] and interval2[0] == interval2_points[0]:\n        return \"YES\"\n    elif interval1[0] == interval1_points[0] and interval2[0] == interval2_points[0]:\n        return \"YES\"\n    elif interval1[0] == interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    elif interval1[0] == interval1_points[0] and interval2[0]!= interval2_points[0]:\n        return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l1 = interval1[0] < interval1[1]\n    l2 = interval2[0] < interval2[1]\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    intersection = set(interval1) & set(interval2)\n    if len(intersection) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if intersection1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # ----------------------------------------------------------------------------------------------------------------------\n    # Write your code here\n    if len(interval1) > len(interval2):\n        return 'NO'\n    \n    for i in interval1:\n        if i < interval1[0] or i > interval2[1]:\n            return 'NO'\n        if i <= interval2[0] and interval1[1] <= interval2[0]:\n            return 'YES'\n    \n    return 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    start, end = sorted((interval1[0], interval1[1]))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Solution: UnionFind\n    #\n    # Test case 1:\n    #\n    # interval1 = (1, 2)\n    # interval2 = (2, 3)\n    # result = \"YES\"\n    #\n    # Test case 2:\n    #\n    # interval1 = (1, 2)\n    # interval2 = (2, 3)\n    # result = \"NO\"\n    #\n    # Test case 3:\n    #\n    # interval1 = (-1, 1)\n    # interval2 = (-3, -1)\n    # result = \"NO\"\n    #\n    # Test case 4:\n    #\n    # interval1 = (-3, -1)\n    # interval2 = (-5, 5)\n    # result = \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # write your code here\n    \n    # return a bool\n    # return a bool\n    return (not (1 <= interval1[0] <= interval1[1] <= interval2[0] <= interval2[1]))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # 1. replace \"Pythonic way\"\n    # return the number of elements which are in the interval [start, end] and if it's not a prime number\n    def is_prime(n):\n        \"\"\"checks if n is a prime number\"\"\"\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \n    # 2. use bisection algorithm to solve it\n    \"\"\"\n    if (start == end) or (start == 0 and end == 0):\n        return \"NO\"\n    \"\"\"\n    # 3. if the two intervals don't intersect, return \"NO\"\n    if interval1[0] >= interval2[0] or interval1[1] <= interval2[1]:\n        return \"NO\"\n    # 4. we check if it is a prime number\n    for i in range(interval1[0], interval2[0] + 1):\n        if is_prime(i) == False:\n            return \"NO\"\n    for i in range(interval1[1], interval2[0] + 1):\n        if is_prime(i) == False:\n            return \"NO\"\n    # 5. if the two intervals are closed, return \"YES\"\n    if interval1[0] < interval1[1] or interval2[0] < interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sign_magnitude = dict()\n    signs = '+-*/'\n    for sign in signs:\n        for sign_ in signs:\n            sign_magnitude[sign+sign_] = arr.count(sign)\n    magnitudes = []\n    for sign in signs:\n        for sign_ in signs:\n            magnitudes.append(sign_magnitude[sign+sign_])\n    return sum(magnitudes)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]*arr[0]\n    else:\n        mags = []\n        for x in arr:\n            mags.append(x*(x-1))\n        return prod_signs(mags)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return None if arr == [] else sum([i*i for i in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 1\n    for i in arr:\n        result = result * i if i >= 0 else 0\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = [-1 if arr[0] % 2 == 0 else 0, 1 if arr[0] % 2 == 1 else -1]\n    magn = prod_magn_signs(arr, signs)\n    if magn is not None:\n        return magn\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if not arr:\n        return None\n    res = 1\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            res = res * arr[i]\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in arr:\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return prod_sum(arr, op=\"*\")\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0] * arr[0]\n    else:\n        return prod_signs(arr[1:]) + prod_signs([-i for i in arr[0:len(arr)-1]])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    N = len(grid)\n    k = k % N\n    if k == 0:\n        return grid\n    lst = [1]\n    for i in range(N):\n        for j in range(i+1,N):\n            lst.append(grid[i][j])\n    return lst\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not grid:\n        return []\n    n, m = len(grid), len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #dfs\n    if k == 0:\n        return []\n    \n    #define a helper function\n    def helper(lst):\n        if len(lst) == 1:\n            return lst\n        \n        #if first element of list is >= second element of list,\n        #we return the max number from the first element to the second\n        if lst[0] >= lst[1]:\n            return lst[0]\n        else:\n            #index of the first element\n            index = 1\n            #add the elements of the list one by one\n            for i in range(2, len(lst)):\n                #if the current element is greater than the next one\n                #we add the values at the end of the list\n                if lst[i] > lst[index]:\n                    index += 1\n                    #add the new values\n                    lst.append(lst[index])\n                #if the current element is lesser than the next one\n                #we add the values at the beginning of the list\n                elif lst[i] < lst[index]:\n                    index -= 1\n                    lst.insert(0, lst[index])\n                #if the current element is the same as the next one\n                elif lst[i] == lst[index]:\n                    #if the first value of the list is greater than the second value of the list,\n                    #we add the maximum value in the first element to the second element\n                    if lst[0] > lst[index]:\n                        lst.insert(1, lst[index])\n                        #if the first element is less than the second element,\n                        #we add the minimum element in the last element to the second element\n                        index -= 1\n                    #else, we add the second element to the first element\n                    else:\n                        index -= 1\n                else:\n                    raise Exception('we\\'re fucked up')\n            #return the maximum element\n            lst.append(lst[index])\n            #return the maximum element\n            return max(lst)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    path = []\n    path.append(grid[0][0])\n    for i in range(1, len(grid)):\n        path.append(path[-1] + grid[i][0])\n    return path[1:]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst_A = [1]\n    lst_B = [1]\n    for row in range(1, len(grid)):\n        for col in range(1, len(grid)):\n            if grid[row][col] == 1:\n                lst_A.append(grid[row][col])\n                lst_B.append(grid[row][col])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Runtime: 40 ms (27.73%)\n    # Memory Usage: 20.9 MB (27.62%)\n    if not grid:\n        return []\n    if len(grid) == 1:\n        return [1]\n    \n    grid = sorted(grid, key=lambda x: len(x))\n    lst_A = []\n    lst_B = []\n    \n    # When we visit a cell, we update its value, if it is less than the current value\n    # we set it to the minimum value that we have seen before\n    def update_next_value(grid, cell, value):\n        next_value = None\n        for neighbor in get_neighbors(cell):\n            if neighbor[1] not in grid[0] or grid[neighbor[1]][cell[0]]!= value:\n                continue\n            next_value = min(next_value, grid[neighbor[1]][cell[0]])\n        grid[cell[0]][cell[1]] = next_value\n        return next_value\n    \n    # Go through the grid, starting from the first cell and go through the other cells\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            lst_A.append(update_next_value(grid, (i, j), grid[i-1][j]))\n            lst_B.append(update_next_value(grid, (i, j), grid[i][j-1]))\n    \n    # Return the list of values we found on the grid\n    return sorted(lst_A) + sorted(lst_B)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # dp[i][j] = j - i\n    # i - j = 0\n    # dp[i][0] = [1, 2, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    row = len(grid)\n    col = len(grid[0])\n    for i in range(row):\n        grid[i][0] += min(grid[i - 1][0], grid[i - 1][1])\n        grid[i][col - 1] += min(grid[i - 1][col - 1], grid[i - 1][col])\n    for i in range(row):\n        grid[i][col - 1] += min(grid[i - 1][col], grid[i - 1][col - 1])\n    return grid\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #Your code here\n    if n<=1:\n        return [1]\n    if n%2==0:\n        a=tri(n-1)\n        b=tri(n/2)\n        c=tri(n-1)+tri(n/2)+tri(n-1)\n        return a+[b] +c\n    if n%2==1:\n        a=tri(n-1)\n        b=tri(n/2)\n        c=tri(n-2)\n        return a+[b]+c\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0: return [1]\n    if n == 1: return [1, 1]\n    if n % 2 == 0: \n        return [1] + [tri(n-1) + tri(n-2)] + [tri(n+1)]\n    else: \n        return [tri(n-1) + tri(n-2)] + [tri(n-2) + tri(n-1)]\ndef fibonacci(n):\n    \"\"\"\n    Takes a non-negative integer n and returns the sequence of n fibonacci numbers as a list.\n    The sequences are not ordered.\n    The sequence is a Fibonacci sequence of 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,...\n    \"\"\"\n    if n == 0: return [0]\n    if n == 1: return [1]\n    if n == 2: return [1, 1]\n    if n == 3: return [1, 1, 2]\n    if n == 4: return [2, 2, 3, 4]\n    if n == 5: return [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269]\n    if n == 6: return [2, 2, 6, 12, 20, 34, 51, 95, 144, 288, 622, 1841, 1220, 2317, 13321, 2582, 3912, 5071, 12911, 26220, 48833, 96127, 15911, 26954, 26723, 51976, 882852, 112676, 176435, 284427, 44977, 782380, 973426, 166991, 217938, 574679, 1216405, 23382, 304531, 44978]\n    if n == 7: return [3, 7, 13, 21, 35, 55, 85, 167, 285, 764, 1387, 2538, 786, 1758, 2698, 46823, 96323, 187323, 303611, 51907, 93589, 159824, 294919, 49544, 996669, 231133, 321139, 55433, 102375, 178979, 314517, 55117, 962831, 189258, 219633, 566555, 123491, 221312, 333933, 58260, 112468, 184576, 269298, 44946, 782677, 972913, 166991, 217938, 574679, 1216405, 23382, 304531, 44978]\n    if n == 8: return [4, 8, 15, 24, 41, 64, 81, 144, 281, 673, 1042, 2237, 623, 1545, 2436, 46793, 91412, 2073, 2368, 3154, 4579, 90021, 22777, 28169, 46967, 117557, 243066, 45621, 872565, 140178, 243660, 46654, 103573, 242923, 428952, 98037, 181022, 249043, 495979, 1063027, 240055, 406431, 923115, 174617, 251112, 363887, 586381, 1132698, 192653, 304531, 44978]\n    if n == 9: return [5, 9, 17, 25, 43, 67, 83, 143, 293, 675, 1037, 2239, 622, 1612, 2460, 46753, 91433, 2166, 2373, 3035, 4538, 1225, 2270, 2425, 46889, 9909, 2216, 26065, 46963, 114357, 198759, 297383, 508855, 112016, 180549, 231353, 308951, 51430, 103074, 203211, 283811, 44975, 782380, 925387, 189258, 219633, 574679, 1216405, 23382, 304531, 44978]\n    if n == 10: return [6, 10, 1"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return [0, 1]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    if n % 2 == 0:\n        return [tri(n-1)+tri(n-2)] + [tri(n-2)+tri(n-1)]\n    return [tri(n-1)+tri(n-2)] + [tri(n-2)+tri(n-1)] + [tri(n+1)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return [1,2]\n    if n == 1:\n        return [2]\n    \n    result = [0,1]\n    for i in range(2,n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result\n    \ndef to_str(n):\n    \"\"\"The input is a non-negative integer. You have to convert it to a string \n    according to the following rules:\n    1. Convert positive integer to string. \n    2. Convert a negative integer to string in any case.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        temp = n % 4\n        temp2 = n // 4\n        if temp == 1:\n            res = [1]\n            res.extend(tri(temp2))\n            res.extend([3 * temp, 2 * temp, 1 * temp, n])\n        elif temp == 2:\n            res = [3 * temp, 1 * temp, 2 * temp, n]\n            res.extend([1 * temp, 3 * temp, 2 * temp, n])\n        else:\n            res = [3 * temp, 1 * temp, 2 * temp, n]\n            res.extend([1 * temp, 3 * temp, 2 * temp, n])\n            res.extend([n - 1, n - 2, n + 1, n])\n        return res\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 3:\n        return []\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 3)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 1:\n        return []\n    \n    def rec(n):\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 2]\n        else:\n            result = [1]\n            for i in range(3, n):\n                result.append(result[i-1] + result[i-2])\n            return result[-1:]\n    return rec(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    else:\n        list1 = [0]\n        list1.append(1)\n        list1.append(1)\n        for i in range(2, n + 1):\n            list1.append(list1[i - 1] + list1[i - 2] + list1[i - 3])\n        return list1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def T(n):\n        if n == 1:\n            return [1, 1]\n        elif n == 2:\n            return [1, 1] + [2, 0]\n        elif n == 3:\n            return [1, 1] + [2, 0] + [3, 1]\n        elif n % 2 == 0:\n            return [1, 1] + T(n-1) + T(n-2)\n        else:\n            return [1, 1] + T(n-1) + T(n-2) + [2, 0]\n    return T(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = [1]\n        for i in range(1, n + 1):\n            result.append(result[-1] + result[-2] + result[-3])\n        return resul"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    p = 1\n    for i in range(2,n):\n        if i%2 == 1:\n            p *= i\n    return p\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your code here\n    odd = 0\n    while n > 0:\n        odd += n % 10\n        n //= 10\n    return odd if odd else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 1 if n % 2 == 1 else 0"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # recursive\n    def digits_rec(num, low, high):\n        if num == 0:\n            return low\n        else:\n            mid = (low + high) // 2\n            if num % 10 == 0:\n                return digits_rec(num, mid, high)\n            else:\n                return digits_rec(num, low, mid)\n    \n    return digits_rec(n, 0, n)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n * (n - 1) // 2 if n % 2 == 1 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    dp = [0] * (n)\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1] * 2\n    return sum(dp)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if n < 10:\n        return n\n    else:\n        return digits(n//2)+digits(n%2)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def check_odd(n):\n        if n % 2 == 1:\n            return 0\n        return n\n    return sum(check_odd(i) for i in range(1, n+1))\n    \ndef factorization(n):\n    \"\"\"Given an integer n, return a list of all factors of n.\n    The factors of a number n is a list of the prime factors\n    of n.\n    For example:\n    factorization(42) == [2, 2]\n    factorization(15) == [2, 1]\n    factorization(8) == [2]\n    \"\"\"\n    def check_prime(n):\n        for p in range(2, n):\n            if n % p == 0:\n                return False\n        return True\n    def get_factor(n, d):\n        if d == 0:\n            return [n]\n        if d == 1:\n            return [n]\n        if n < d:\n            return get_factor(n//d, d)\n        else:\n            return get_factor(n//d, d-1) + [n//d]\n    return [x for x in range(2, int(math.sqrt(n))+1) if all(x % d == 0 for d in get_factor(n, d))]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return 0\n    return n * digits(n - 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not n: return 0\n    if not n % 2: return n\n    return n * digits(n//2)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) < 2:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return is_sub_sequence(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not string:\n        return True\n    i = 0\n    j = 0\n    \n    is_nested_str = string.replace('[','').replace(']','').replace(']','')\n    is_nested_str = is_nested_str.replace('[','')\n    is_nested_str = is_nested_str.replace(']','')\n    \n    for i in is_nested_str:\n        if i == '[':\n            j = i\n            j += 1\n        if i == ']':\n            if j < 0:\n                return False\n            else:\n                j -= 1\n                \n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    stack = []\n    for char in string:\n        if char in '([[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    temp = list(string)\n    index = 0\n    is_sub = False\n    # check if current index is nested\n    while index < len(string):\n        if string[index] in ['[', ']', ']', '[', ']', '[']:\n            if not is_sub:\n                is_sub = True\n            index += 1\n            continue\n        # if it is a start of a new sublist\n        if string[index] in ['(', ')', '{', '}']:\n            is_sub = False\n            index += 1\n        else:\n            index += 1\n    if is_sub:\n        return is_sub\n    else:\n        return False\n    # check if current index is nested\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_valid_pattern(pattern):\n        stack = []\n        for i in pattern:\n            if i == '[':\n                stack.append(i)\n            if i == ']':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n        return not stack\n    \n    nested = is_valid_pattern(string)\n    \n    if nested:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if '[' in string:\n        return False\n    elif ']' in string:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return string[0] == '[' and string[-1] == ']'"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = []\n    for i in string:\n        if i == '[':\n            l.append(i)\n        else:\n            if len(l) > 0:\n                l.pop()\n            else:\n                return False\n    if len(l) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # define an empty set and use an if statement to test for the presence of the square brackets.\n    if not string:\n        return False\n    if string[0] == '[':\n        for i in string[1:]:\n            if i == '[':\n                return False\n        return True\n    # if a list is empty, return True.\n    if not string:\n        return True\n    # else, find the last index of the brackets which is not empty and also find the last index of \n    # the brackets where the last index of the brackets is not empty.\n    start_index = len(string) - 1\n    last_index_of_brackets = start_index - 1\n    while last_index_of_brackets > 0:\n        if string[last_index_of_brackets] == '[':\n            start_index = last_index_of_brackets\n            last_index_of_brackets = start_index - 1\n        elif string[last_index_of_brackets] == ']':\n            return True\n        else:\n            last_index_of_brackets -= 1\n    return False\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Helper function to compute the sum of squares of a list\n    def sum_squares_helper(lst):\n        lst_squared = []\n        for item in lst:\n            lst_squared.append(item**2)\n        return sum(lst_squared)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code goes here\n    sum=0\n    for i in range(len(lst)):\n        sum += (lst[i]**2)\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for i in lst:\n        result += i**2\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        s = s + (lst[i]**2)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    summ = 0\n    for e in lst:\n        summ += e**2\n    return round(summ)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    squares = []\n    for elem in lst:\n        squares.append(elem ** 2)\n    return sum(squares)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for number in lst:\n        sum += pow(number,2)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([(float(x)-int(x))**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # lst[0] = 0 => Output 0\n    # lst[-1] = 0 => Output 0\n    # lst[-2] = 0 => Output 0\n    # lst[-3] = 0 => Output 0\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    squared_list = []\n    for num in lst:\n        squared_list.append(num * num)\n    return sum(squared_list)\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if txt[-1]!= 'a' and txt[-1]!= 'i':\n        return False\n    elif txt[-1] == 'a' or txt[-1] == 'i':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return txt[-1].isalpha() and txt[-1].isupper() and not txt.endswith(' ')\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    word = ''.join(txt.split()).split(' ')\n    \n    if len(word) == 0:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isupper()\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if txt.count(' ')!= 0:\n        return False\n    if len(txt) > 0 and txt[-1].isalpha():\n        return True\n    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return txt[-1] in list('abcdefghijklmnopqrstuvwxyz')\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if txt[-1].isalpha():\n        return txt.count(' ') == 0\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if txt[-1].isalpha():\n        if len(txt)==1:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if txt[-1] == \" \":\n        return False\n    elif txt[-1].lower() in ALPHABETICAL_CHARS:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    last_char = txt[-1]\n    #check if last character of string is an alphabet\n    if last_char.isalpha():\n        return False\n    #check if last character of string is an letter\n    if last_char.isalpha() and last_char.isupper():\n        return False\n    #check if last character is an uppercase letter\n    if last_char.isupper():\n        return False\n    #return if last character is an uppercase letter and not a word\n    if last_char.isupper():\n        return False\n    #return if last character is lowercase letter and not a word\n    if last_char.islower():\n        return False\n    #return if last character is lowercase letter and is not a word\n    if last_char.islower() and last_char.islower():\n        return False\n    #return if last character is an uppercase and lowercase letter, not a word\n    return last_char.isupper() and last_char.islower() and last_char.isalpha() and last_char.isupper()\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    for element in arr:\n        if element < arr[i]:\n            i = arr.index(element)\n    return i\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif arr[0] >= arr[1] and arr[0] >= arr[2]:\n        return 0\n    elif arr[1] >= arr[0] and arr[1] >= arr[2]:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    size = len(arr)\n    if size <= 1:\n        return -1\n    left = 1\n    right = size - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] >= arr[mid - 1]:\n            if arr[mid] >= arr[mid + 1]:\n                left = mid + 1\n            else:\n                right = mid\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return find_index(arr, arr[-1])\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    index = -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[index] or (i == 0 and arr[index] <= arr[i]):\n            index = i\n    return index\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Handle empty array\n    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if lst == None:\n        return None\n    else:\n        a = max(lst)\n        b = min(lst)\n        if a >= b:\n            return (a, b)\n        else:\n            return (b, a)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Return a tuple of the largest and smallest of the integers in the list\n    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            if smallest is None or num < smallest:\n                smallest = num\n            elif largest is None or num > largest:\n                largest = num\n    return (largest, smallest)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_negative_integers = None\n    max_positive_integers = None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def largest_smallest_integers_rec(nums):\n        if len(nums) == 0:\n            return None, None\n        if nums[-1] > nums[-2]:\n            return nums[-1], nums[-2]\n        \n        return largest_smallest_integers_rec(nums[:-2])\n        \n    return largest_smallest_integers_rec(lst)\n    \n    #return sorted(lst, key=cmp_to_key(smallest_smallest_integers_rec)"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def update(lst):\n        new_lst = []\n        for number in lst:\n            if number > 0:\n                new_lst.append(number)\n            else:\n                new_lst.append(None)\n        return new_lst\n    \n    lst = update(lst)\n    return (lst[0], lst[-1])\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # This function takes in a list of integers as its input, and returns a tuple of\n    # integers (a, b) where 'a' is the largest and 'b' is the smallest of negative integers and positive integers.\n    # The values of 'a' and 'b' are all ints\n    if lst == []:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], None\n    if len(lst) == 2:\n        return lst[0], lst[1]\n    smallest_neg, smallest_pos = lst[0], lst[1]\n    for elt in lst:\n        if elt < smallest_neg:\n            smallest_neg = elt\n        elif elt > smallest_pos:\n            smallest_pos = elt\n    return smallest_neg, smallest_pos\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_neg = (None, None)\n    min_pos = (None, None)\n    for i in lst:\n        if i < 0:\n            max_neg = (i, i)\n        else:\n            min_pos = (i, i)\n    if max_neg == (None, None):\n        return None\n    if min_pos == (None, None):\n        return None\n    return max_neg, min_pos\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            if largest is None:\n                largest = num\n            else:\n                if smallest is None:\n                    smallest = num\n                else:\n                    if num > largest:\n                        largest = num\n                    if num < smallest:\n                        smallest = num\n    return (largest, smallest)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for el in lst:\n        if el < 0:\n            return (el, None)\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    '''\n    The idea here is to do the computation a little faster\n    but that's not a big deal since we are only going to\n    calculate the largest and the smallest numbers in\n    a list.\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if isinstance(a, float) and isinstance(b, float):\n        a = str(a)\n        b = str(b)\n    if type(a) == str and type(b) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == str and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) == str and type(b) == str:\n        return a > b\n    elif type(a) == float and type(b) == float:\n        return a > b\n    elif type(a) == int and type(b) == int:\n        return a > b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(a) is str:\n        return b\n    elif type(b) is str:\n        return a\n    elif type(a) is int or type(b) is int:\n        return max(a,b)\n    elif type(a) is float or type(b) is float:\n        return min(a,b)\n    elif type(a) is dict:\n        return max(a,b)\n    elif type(b) is dict:\n        return min(a,b)\n    else:\n        return \"unknown\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(a) is str:\n        return a\n    elif type(b) is str:\n        return b\n    elif type(a) is float:\n        if type(b) is float:\n            return float(a)\n        else:\n            return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(a, str):\n        try:\n            a = float(a)\n        except ValueError:\n            return \"Error: \" + a + \" is not a real number.\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Create a variable to hold the largest possible value\n    # Compare the two.\n    # If the two are identical, return the larger value.\n    # Else return None\n    \n    if type(a) == type(b):\n        if a > b:\n            return b\n        else:\n            return a\n    elif type(a) == float or type(a) == int:\n        if a > b:\n            return b\n        else:\n            return a\n    elif type(a) == str:\n        if a == b:\n            return b\n        else:\n            return a\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    type(a)\n    type(b)\n    if a < b:\n        return a\n    if b < a:\n        return b\n    return \"no match\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO\n    return\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_even = 0\n    sum_odd = 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    if n < 2:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n % 2 == 0 and n // 4 == 0 and n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # I made it into a function because it is called from the main program\n    # I do not know why this function exists\n    return n % 4 == 0 and n % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n % 4!= 0:\n        return False\n    else:\n        if n == 2:\n            return True\n        elif n == 3:\n            return is_equal_to_sum_even(2)\n        elif n == 5:\n            return is_equal_to_sum_even(3)\n        else:\n            return is_equal_to_sum_even(n-1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([i for i in range(n) if i % 2 == 0]) == 4\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # EACH NUMBER IS EVEN\n    n = int(n)\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            continue\n        elif i % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return is_even(n) and n%4 == 0 and n>1 and n<=20\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if not isinstance(n, int):\n        raise TypeError(\"Expecting an integer\")\n    if not n >= 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return False\n    else:\n        if (n % 4) == 0:\n            return True\n        else:\n            return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def f(n):\n        if n < 4:\n            return False\n        for i in range(2, n//2 + 2):\n            if not f(n - i):\n                return False\n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import math\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n * (n - 1) * (n - 2) *... * 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n*special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n * (n-1) * (n-2)\n    else:\n        return n * (n-1) * (n-2) * special_factorial(n-2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import math\n    factorial = 1\n    i = 1\n    while i <= n:\n        factorial *= i\n        i += 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        return factorial(n)\n    except TypeError:\n        print(\"You must enter an integer\")\n    except ValueError:\n        print(\"Invalid number\")\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    fact = 1\n    for i in range(n):\n        fact = fact * (i+1)\n    return fact"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # [1,1,2,3,5,8,13,21,34,55]\n    factorials = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    if n > 0:\n        return factorials[n] * factorials[n - 1] * factorials[n - 2] * factorials[n - 3]\n    return factorials[n]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    result = ''\n    \n    for letter in text:\n        if letter =='':\n            result += '_'\n        else:\n            result += letter\n    \n    return result\n    \ndef join_words(words):\n    \"\"\"\n    Given a list of words, return a string of the form: \"the_string\".\n    \n    join_words([\"a\", \"string\"]) == \"stringa\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\"]) == \"stringacbstringc\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\", \"d\", \"string\"]) == \"stringaddddstringcddd\"\n    join_words([\"a\", \"string\", \"b\", \"string\", \"c\", \"string\", \"d\", \"string\", \"e\"]) == \"stringadeeeee\"\n    \"\"\"\n    \n    result =''.join(words)\n    \n    # Split string into words\n    temp = [word.split(' ') for word in result.split('_')]\n    \n    # Join the words\n    result = [word[0] if len(word) > 1 else word[0] + '_' for word in temp]\n    \n    return result\n    \ndef read_data(path, delimiter='\\t'):\n    \"\"\"\n    Read the data from a csv file, in the following format:\n        [\"Phone\", \"ID\", \"Name\", \"Age\"]\n    \n    path = \"/home/user/data/\n    delimiter = ','\n    \"\"\"\n    \n    with open(path) as csvfile:\n        \n        # Read the file\n        csvfile = csv.reader(csvfile, delimiter=delimiter)\n        \n        # Skip the header\n        next(csvfile, None)\n        \n        # Read the rows\n        phone_data = []\n        for row in csvfile:\n            \n            # Get row\n            phone_data.append(row[0].strip())\n            \n            # Get ID\n            id_data = row[1].strip().split(',')\n            id_data = '_'.join(id_data)\n            phone_data.append(id_data)\n            \n            # Get name\n            name_data = row[2].strip().split(',')\n            name_data = '_'.join(name_data)\n            phone_data.append(name_data)\n            \n            # Get age\n            age_data = row[3].strip().split(',')\n            age_data = '_'.join(age_data)\n            phone_data.append(age_data)\n            \n        return phone_data\n    \ndef preprocess(data, missing_values=True):\n    \"\"\"\n    Takes a list of strings and returns a new list of strings\n    that represents the strings without any spaces,\n    caps, no punctuation, and whitespace removed.\n    \n    data = [\"Hello, my name is Joe\", \"We love Python and Java!\"]\n    \n    preprocess([\"Hello, my name is Joe\", \"We love Python and Java!\"]) == [\"Hello\", \"my name is Joe\"]\n    preprocess([\"Hello, my name is Joe\", \"We love Python and Java!\"], missing_values=False) == [\"Hello\", \"Joe\"]\n    \"\"\"\n    \n    # Remove spaces\n    new_data = [fix_spaces(word) for word in data]\n    \n    # Remove punctuation\n    if missing_values:\n        new_data = [re.sub('[^a-zA-Z0-9]', '', word) for word in new_data]\n    \n    # Remove trailing whitespace\n    new_data = [re.sub('\\s+','', word) for word in new_data]\n    \n    # Remove multiple spaces\n    new_data = [word.strip() for word in new_data]\n    \n    # Replace any spaces in data\n    new_data = [re.sub('\\s+','', word) for word in new_data]\n    \n    return new_data\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = text.replace(\" \", \"_\")\n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n        text = text.replace(\" _\", \"-\")\n        text = text.replace(\"    \", \"-\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \" \".join(text.replace(\" \", \"_\").replace(\"  \", \"-\").split())\n    \ndef _make_path(folder, name):\n    \"\"\"\n    Creates a folder called `folder` and a file called `name` in the\n    given folder.\n    \"\"\"\n    # create the folder if needed\n    if not os.path.exists(folder):\n        os.makedirs(folder)\n    # create the file\n    with open(os.path.join(folder, name), \"w\") as f:\n        f.write(\"\")\n    # return the path\n    return os.path.join(folder, name)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.replace(' ','_')\n    while len(text) > 2:\n        text = text.replace('  ','_')\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # remove unnecessary spaces from string\n    text = re.sub(r'^\\s+', '', text)\n    text = text.split(' ')\n    \n    # remove consecutive spaces\n    i = 0\n    while i < len(text):\n        if i + 1 < len(text):\n            if text[i] == text[i+1] and text[i+1]!='':\n                text[i] = text[i+1]\n                i += 1\n                if text[i] =='':\n                    text[i] = ''\n        i += 1\n    # if there are more than 2 consecutive spaces, then replace consecutive spaces with -\n    if len(text) > 2:\n        for i in range(len(text)):\n            if i > 1 and text[i] == text[i-1] and text[i]!='':\n                text[i] = text[i-1]\n    # otherwise, replace the consecutive spaces with -\n    text =''.join(text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(text) >= 2:\n        for i in range(1, len(text) - 1):\n            if text[i] == \" \":\n                text = text[:i] + \"_\" + text[i:]\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for i in text:\n        if len(i) > 2:\n            i = i.replace(\" \", \"-\")\n            result.append(i)\n        else:\n            result.append(i)\n    return''.join(result)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(text) < 2:\n        return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = re.sub(r'\\s+', '_', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # First find out how many spaces there are in a string\n    spaces = 0\n    for letter in text:\n        if letter =='':\n            spaces += 1\n    # Now, remove all spaces from the beginning of the string \n    text = text.lstrip()\n    # Change all spaces to _\n    text = text.replace(' ', '_')\n    # Add the spaces back to the end of the string\n    text += spaces * '_'\n    return text"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    #the test to make sure the file isn't empty\n    if file_name == '':\n        return 'No'\n    #the test to make sure the file name is formatted correctly\n    if not file_name.isalnum() and file_name.count('.')!= 1:\n        return 'No'\n    #the test to make sure the file name has at least one dot\n    if not file_name.endswith('.') and file_name[0].isalnum() and file_name[0].isalpha():\n        return 'No'\n    #the test to make sure the file name doesn't contain any illegal characters \n    #that are not letters or '-'\n    for char in file_name:\n        if char not in string.ascii_letters + '-._':\n            return 'No'\n    #the test to make sure the file name starts with a latin alphapet letter, and it is not empty \n    #(i.e. it doesn't start with a dot '.')\n    if file_name[0].isalpha() and file_name[0].isalpha() and file_name[1] == '.':\n        return 'No'\n    #the test to make sure the file name does not start with a latin alphapet letter, and it starts with a dot '.'\n    if file_name[0].isalpha() and file_name[0].isalpha() and file_name[1]!= '.':\n        return 'No'\n    #the test to make sure the file name contains only the latin alphapet letters\n    if not file_name[0].isalpha():\n        return 'No'\n    #the test to make sure the file name ends with a latin alphapet letter, and it is not empty (i.e. it doesn't start with a dot '.')\n    if file_name[-1] == '.':\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Hard-coded variables for your code. These variables may be changed at a later date\n    # if you change them.\n    # Set 'quit' to False in the main program to get a proper message\n    # set 'yes' to True to get a confirmation message\n    # set 'no' to False to get a confirmation message\n    # set 'valid' to True to get a message displaying the file's name is valid\n    quit = False\n    yes = True\n    no = False\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Create variables to return\n    Valid_File = False\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # str_list = file_name.split('.')\n    # for i in range(len(str_list)):\n    #     if str_list[i].isdigit() and len(str_list[i]) > 3:\n    #         return False\n    #     if str_list[i].isalpha() and len(str_list[i]) > 1:\n    #         return False\n    #     if str_list[i] == '.':\n    #         return False\n    #     if str_list[i].isdigit() and len(str_list[i]) > 3:\n    #         return False\n    #     if str_list[i].isalpha() and len(str_list[i]) > 1:\n    #         return False\n    #     if str_list[i].isdigit() and len(str_list[i]) == 1:\n    #         return False\n    #     if str_list[i] == '.':\n    #         return False\n    #     if str_list[i].isalpha() and len(str_list[i]) == 1:\n    #         return False\n    #     if str_list[i] =='':\n    #         return False\n    # return True\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if file_name.count(\".\") == 0:\n        if file_name.replace(\".\", \"\").isdigit():\n            if len(file_name) <= 3:\n                return \"No\"\n            else:\n                return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    file_name = str(file_name)\n    \n    if len(file_name) < 3:\n        return 'No'\n    elif file_name[0] == '0' and file_name[1] == '.':\n        return 'No'\n    elif file_name[0] == '.' and file_name[1]!= '.':\n        return 'No'\n    elif file_name[0] == '.':\n        return 'Yes'\n    elif not file_name[0].isalpha():\n        return 'No'\n    elif len(file_name) > 3:\n        return 'No'\n    elif file_name[0].isalpha() or not file_name[1].isalpha() or file_name[1] in ['_', '.', '-']:\n        return 'No'\n    else:\n        return 'Yes'\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    file_name = file_name.lower()\n    digits = [int(d) for d in re.findall(r'\\d+', file_name)]\n    if len(digits)!= 3 or len(set(digits))!= 1:\n        return 'Invalid'\n    else:\n        return 'Yes"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import re\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # Create a variable for the number of digits in the file's name\n    file_name_length = len(file_name)\n    \n    # Create a list to store the possible characters of the file's name\n    possible_chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    \n    # Iterate through the possible characters in the file's name\n    for char in possible_chars:\n        # If the file's name has the given char, add it to the list of possible chars\n        if char in file_name:\n            possible_chars.remove(char)\n    \n    # Return a string representing 'Yes' if the file's name is valid and 'No' otherwise\n    if all(char in possible_chars for char in file_name):\n        return 'Yes'\n    else:\n        return 'No'\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    file_name = file_name.replace(\".\",\"\").replace(\" \",\"\").replace(\".\",\"\")\n    if file_name[0]==\"0\" and len(file_name)>3:\n        if (file_name[0]==\"0\" and len(file_name)>4) and file_name[1:3]==\"txt\" and file_name[3:4]==\"\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Check if the number is in a list and is not the first or last element\n    if is_in_list(lst,0,len(lst)-1):\n        return lst[0] * lst[0] + lst[-1] * lst[-1]\n    elif is_in_list(lst,0,len(lst)-2):\n        return lst[0] * lst[0] + lst[1] * lst[1]\n    elif is_in_list(lst,1,len(lst)-2):\n        return lst[1] * lst[1]\n    else:\n        return 0\n        \ndef is_in_list(lst,low,high):\n    \"\"\"\n    This function checks if the index in a list is in the range of the list. If the index is less than 0 or greater than the length of the \n    list, it will return False. If the index is greater than the length of the list, it will return True.\n    \n    Examples:\n    For lst = [1,2,3] the output should be True\n    For lst = [1,2] the output should be False\n    For lst = [-1,-5,2,-1,-5] the output should be False\n    \"\"\"\n    \n    if low <= high:\n        return lst[low] < 0 or lst[low] >= high\n    else:\n        return False\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    output = 0\n    for element in lst:\n        if element % 3 == 0:\n            output += element * element\n        elif element % 4 == 0:\n            output += element * element\n    return output\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**3\n        elif i % 4 == 0:\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 3 == 0:\n            sum += num * num\n        if num % 4 == 0:\n            sum += num * num\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    sum = 0\n    for item in lst:\n        if item%3 == 0:\n            sum += item**3\n        elif item%4 == 0:\n            sum += item**4\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (i%3 == 0):\n            sum += lst[i]**3\n        elif (i%4 == 0):\n            sum += lst[i]**4\n        else:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for elem in lst:\n        if elem % 3 == 0:\n            sum += elem\n        elif elem % 4 == 0:\n            sum += elem ** 2\n    return sum\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not sentence:\n        return \"\"\n    elif sentence in \"123456789\":\n        return sentence\n    elif len(sentence) % 2 == 1:\n        return sentence[:len(sentence) // 2] + words_in_sentence(sentence[len(sentence) // 2:])\n    elif len(sentence) % 2 == 0:\n        return sentence[:len(sentence) // 2] + words_in_sentence(sentence[len(sentence) // 2:]) + sentence[len(sentence) // 2:]\n    else:\n        return sentence[:len(sentence) // 2] + words_in_sentence(sentence[len(sentence) // 2:]) + words_in_sentence(sentence[:len(sentence) // 2])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = sentence.split(\" \")\n    new_words = [w for w in words if len(w) > 1]\n    return \" \".join(new_words)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def dfs(sentence, start, end):\n        if len(sentence) == 1:\n            return 1\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def is_prime(n):\n        if n == 2 or n == 3:\n            return n == 2 or n == 3\n        else:\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    return False\n            return True\n    \n    def get_prime_numbers_from_sentence(sentence):\n        return [int(i) for i in sentence.split() if is_prime(int(i))]\n    \n    prime_numbers = get_prime_numbers_from_sentence(sentence)\n    sentence =''.join(prime_numbers)\n    return sentence\n    \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def is_prime_word(num):\n        \"\"\"\n        Returns True if num is a prime number,\n        and False otherwise.\n        \"\"\"\n        if num == 1:\n            return False\n        elif num == 2 or num == 3:\n            return True\n        else:\n            for i in range(2,int(num**0.5)+1):\n                if num%i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sentence = sentence.replace(\" \", \"\").lower().split(\" \")\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Todo:\n    # refactoring:\n    # 1. create a function for comparsion,\n    # 2. choose a lexical order to compare\n    # 3. use it as a stack\n    # 4. check if lexical order is longer than the original sentence\n    # 5. add words into a new sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(sorted(sentence.split()))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sentence_words = sentence.split()\n    result = []\n    i = 0\n    while i < len(sentence_words):\n        if len(sentence_words[i]) == 1:\n            result.append(sentence_words[i])\n            i += 1\n        else:\n            j = 0\n            while j < len(sentence_words) - 1 and sentence_words[j][0]!= sentence_words[i][0]:\n                j += 1\n            if j == len(sentence_words) - 1:\n                result.append(sentence_words[i])\n            else:\n                result.append(sentence_words[i])\n                result.append(sentence_words[i+1])\n            i += 1\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(n) is not str:\n        raise TypeError\n    if type(x) is not str:\n        raise TypeError\n    if type(n) is not str:\n        raise TypeError\n    if x.count(\"/\"):\n        raise ValueError\n    if not x.startswith(\"-\"):\n        raise ValueError\n    if n.count(\"/\"):\n        raise ValueError\n    if not x.startswith(\"-\"):\n        raise ValueError\n    n = n.lstrip(\"-\")\n    n = n.replace(\" \", \"\")\n    if n.startswith(\"0\") or n.startswith(\"0.0\") or n.startswith(\"0e\"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return True\n    elif n == 1:\n        return x == '1' or x == '0' or x == '0' or x == '1'\n    elif n == 2:\n        return simplify(\"0\" + x, n)\n    elif n % 2 == 0:\n        return simplify(\"0\" + x, n // 2)\n    else:\n        return simplify(\"0\" + x, n - 1)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if (len(x)!= len(n)):\n        return False\n    else:\n        for i in range(0,len(x)):\n            if x[i]!= n[i] and (n[i]!= 0 or n[i]!= 1):\n                return False\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not x or not n:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        x, n = int(x), int(n)\n        if n > 0:\n            return simplify_numerator(x, n)\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        if \".\" in str(x):\n            n = float(n)\n        x = float(x)\n        if n!= 0:\n            x = x / n\n            for i in range(0, n):\n                x = x * n\n                if x.is_integer():\n                    return True\n        return False\n    except ZeroDivisionError:\n        return False\n    except ValueError:\n        return False\n    \ndef find_digit(x, n):\n    \"\"\"Your task is to implement a function that will find the maximum digit of x that is divisible by n.\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == \"\":\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return False\n    n = int(n)\n    if n > 0:\n        p = (x*n).split(\"/\")\n        if p[0] == p[1] or p[1] == 0:\n            return False\n        return simplify(int(p[0])/int(p[1]), n)\n    else:\n        return simplify(0, 0)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num_list = [i for i in nums if i > 0]\n    num_list.sort()\n    return num_list\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    \n    def sort_nums(nums, start, end):\n        if start < end:\n            mid = start + (end - start) // 2\n            sort_nums(nums, start, mid)\n            sort_nums(nums, mid+1, end)\n            return\n    \n    sort_nums(nums, 0, len(nums)-1)\n    return sorted(nums)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted([int(i) for i in str(sum(nums))])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Go through the list to find max and min of each digit\n    max_num = 0\n    min_num = 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # find the sum of the digits of each integer\n    num_sum = [int(str(n)[:1]) for n in nums]\n    num_sum.sort()\n    \n    # find the index of the number with the biggest sum\n    index = num_sum.index(max(num_sum))\n    \n    # return the sorted list\n    return nums[index]"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_nums = sorted(nums, key=lambda num: num_sum(num))\n    return new_nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    output = []\n    for num in nums:\n        output.append(sum(map(int,str(num))))\n    output.sort()\n    return output"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sums = list(map(lambda num: int(num), nums))\n    return sorted(sums, key = lambda num : sum(map(lambda x : x*x, nums)))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    nums.sort(key=lambda x: sum(map(int,str(x))))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    nums.sort()\n    return nums\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # first = last = 0\n    # for num in nums:\n    #     first += 1 if num % 10 > last else 0\n    #     last = num if num % 10 > last else 0\n    # return first + last\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num % 10 > 0:\n            count += 1\n        if num % 10 > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    for i in range(len(nums)):\n        if (nums[i] > 10 and nums[i] % 2 == 0):\n            # if the first digit of the number is 1\n            if nums[i] // 10 == 0:\n                # if the last digit of the number is 0\n                if nums[i] % 10 == 0:\n                    # if both the first and last digits are odd numbers\n                    if nums[i] == 0:\n                        return 2\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    for num in nums:\n        if num >= 10 and num % 2!= 0:\n            even += 1\n        else:\n            odd += 1\n    return even + odd\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_numbers = []\n    for num in nums:\n        if num >= 10:\n            odd_numbers.append(num)\n    odd_numbers.sort()\n    return len(nums) - len(odd_numbers)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    elif len(nums) == 2:\n        if nums[0] > 10 and nums[1] % 2 == 0 and nums[0] % 10 == 0:\n            return 1 + specialFilter(nums[1:] + [0])\n        else:\n            return 1\n    else:\n        if nums[0] > 10 and nums[1] % 2 == 0 and nums[0] % 10 == 0:\n            return 1 + specialFilter(nums[2:] + [0])\n        else:\n            return 1 + specialFilter(nums[:-1] + [0])\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for x in nums:\n        if (x > 10) and (x % 2 == 1):\n            print(x, end=\", \")\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return 0\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    cnt = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    odd = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            count = count + 1\n        if nums[i] % 2 == 1 and nums[i]!= 1:\n            odd = odd + 1\n    if odd == 0:\n        return count\n    else:\n        return 2"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        a = [1, 3, 7, 13, 21]\n        for i in range(len(a)):\n            a[i] = a[i] * a[i] - a[i] + 1\n        return len(set(a))\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    answer = 0\n    for i in range(1, n):\n        answer += i * (i + 1) // 3\n    return answer\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if (a[i] % 3 == 0 and a[j] % 3 == 0 and a[k] % 3 == 0):\n                    result += 1\n    return resul"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return int(n*(n+1)/2)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    triple_sum = 0\n    for i in range(0, n):\n        triple_sum += (i * (i + 1) - i + 1) * 3\n    return triple_sum\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def triangle(a,i,j,k):\n        while j < i + 1 and j < k:\n            a[j] = max(a[j-1] * 2, a[j] + a[j-1] + a[j-2])\n            j += 1\n        return a[j]\n    if n < 1:\n        return 0\n    a = [1]\n    i = 0\n    while i < n - 1:\n        a.append(a[i] + a[i+1] * 2)\n        i += 2\n    tri = 1\n    for i in range(2, n + 1):\n        tri *= 3\n        tri += triangle(a,i,2,3) * triangle(a,3,i-1,4)\n        tri += triangle(a,i,4,i-1) * triangle(a,3,i-2,2)\n        tri += triangle(a,3,i-1,i) * triangle(a,2,i-2,2)\n        tri += triangle(a,2,i,i-1) * triangle(a,1,i-2,1)\n    return tri\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Method 1\n    # a = [1, 3, 7, 13, 21]\n    # n = 5\n    # a = [1, 3, 7, 13, 21]\n    # a = [1, 3, 7, 13, 21]\n    # n = 5\n    a = [1, 3, 7, 13, 21]\n    n = 5\n    m = 1\n    while m < n:\n        m = m*3 + 1\n    return m"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    return sum(sum(a[i] for i in range(n) if i * i - i + 1 > 0) for i in range(n))\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = 0\n    while n:\n        n //= 3\n        res += n\n    return res\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if planet1 not in \"jupyter\" and planet1 not in \"neptune\":\n        raise TypeError(\"planet1 must be either Jupiter, Neptune, or Uranus\")\n    if planet2 not in \"jupyter\" and planet2 not in \"neptune\":\n        raise TypeError(\"planet2 must be either Jupiter, Neptune, or Uranus\")\n    \n    mercury = planet1\n    venus = planet2\n    \n    # if we are going to search for the closest planet to the sun, we have to sort \n    # the planets by distance to the sun.\n    # but, we want to use python's built-in sorted function to find the closest planet\n    # to the sun. We have to use the distance() function from the built-in\n    # module. \n    # For the closest planet to the sun, the distance is the distance between \n    # the closest planet and the sun, and the closest planet to the sun is \n    # returned. \n    # The closest planet to the sun is the one with the closest distance. \n    # The closer to the sun is the one with the closest distance. \n    # You can find more information about the closest planet with \n    # https://docs.python.org/3.6/library/functions.html#functions.dist.\n    \n    # the bisect() function in the python module in a range() function gives us\n    # the closest planet to the Sun, the range() function returns a sequence\n    # of numbers, the length of the sequence is the number of planets.\n    # The lowest and the highest planet are returned.\n    # The closest planet is returned.\n    # The sequence that we will use is:\n    # - The lower-left index of the sequence, from which we will select the closest \n    # planet, and the lower-right index of the sequence, from which we will select the \n    # closest planet. The lower-right index is the index of the sequence.\n    \n    # In the above example, the closest planet is Mercury, and the lower-right index is 3.\n    # The lower-right index is 3. \n    # The closest planet is Mercury, and the lower-left index is 0.\n    # The closest planet is Venus, and the lower-right index is 4.\n    # The closest planet is Venus, and the lower-left index is 1.\n    # The closest planet is Venus, and the lower-right index is 3.\n    # We want to return the closest planet, and all the other planets are returned.\n    # If we want to find the closest planet to the Sun, we should be able to sort \n    # the planets by the distance to the Sun, but this is not the best way to do it. \n    # A quick solution is to sort the planets by distance to the Sun. \n    # And then, we can use the bisect() function in a sorted way to find the closest \n    # planet to the sun. \n    # This will find the closest planet to the Sun, and we can use the lower-left \n    # index, and the lower-right index.\n    \n    # If the closest planet is the closest to the Sun, return the closest planet.\n    # If the closest planet is the closest to the Sun, return the closest planet.\n    # If the closest planet is not the closest to the Sun, return the closest planet\n    # to the Sun. \n    \n    if mercury not in \"neptune\" and venus not in \"jupyter\":\n        raise TypeError(\"mercury must be Jupiter, Neptune, or Uranus\")\n    if venus not in \"jupyter\" and mercury not in \"neptune\":\n        raise TypeError(\"venus must be Jupiter, Neptune, or Uranus\")\n    if mercury not in \"neptune\" and venus not in \"jupyter\":\n        raise TypeError(\"mercury must be Jupiter, Neptune, or Uranus\")\n    if venus not in \"neptune\" and mercury not in \"jupyter\":\n        raise TypeError(\"venus must be Jupiter, Neptune, or Uranus\")\n    \n    # because we have two planets in our solar system, the \"jupyter\" planet is closest to the Sun\n    # and the \"neptune\" planet is closest to the Sun. \n    # But, the \"jupyter\" planet is closest to the Sun, and the \"neptune\" planet is \n    # closest to the Sun.\n    "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #TODO\n    if planet1 == planet2:\n        return None\n    \n    if planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Saturn\", \"Uranus\", \"Earth\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Earth\", \"Jupiter\")\n    elif planet1 == \"Mercury\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Uranus\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\", \"Jupiter\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Venus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Venus\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Venus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Venus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Venus\", \"Jupiter\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Venus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\", \"Venus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # convert planets to lower case\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [planet1, planet2]\n    \ndef closest_to_sun(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Sun\n    in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Sun. \n    The function should return the string name of the closest planet to \n    the Sun.\n    Example\n    closest_to_sun(\"Earth\") ==> \"Venus\"\n    '''\n    return \"Venus\"\n    \ndef closest_to_neptune(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Neptune\n    in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Neptune.\n    The function should return the string name of the closest planet to \n    the Neptune.\n    Example\n    closest_to_neptune(\"Jupiter\") ==> \"Neptune\"\n    '''\n    return \"Neptune\"\n    \ndef closest_to_jupiter(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Jupiter\n    in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Jupiter.\n    The function should return the string name of the closest planet to \n    the Jupiter.\n    Example\n    closest_to_jupiter(\"Saturn\") ==> \"Mercury\"\n    '''\n    return \"Mercury\"\n    \ndef closest_to_saturn(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Saturn\n    in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Saturn.\n    The function should return the string name of the closest planet to \n    the Saturn.\n    Example\n    closest_to_saturn(\"Uranus\") ==> \"Uranus\"\n    '''\n    return \"Uranus\"\n    \ndef closest_to_uranus(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Uranus\n    in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Uranus.\n    The function should return the string name of the closest planet to \n    the Uranus.\n    Example\n    closest_to_uranus(\"Mercury\") ==> \"Mercury\"\n    '''\n    return \"Mercury\"\n    \ndef closest_to_uranus_first(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Uranus\n    first in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Uranus.\n    The function should return the string name of the closest planet to \n    the Uranus first.\n    Example\n    closest_to_uranus_first(\"Neptune\") ==> \"Neptune\"\n    '''\n    return \"Neptune\"\n    \ndef closest_to_neptune_first(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Neptune\n    first in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Neptune.\n    The function should return the string name of the closest planet to \n    the Neptune first.\n    Example\n    closest_to_neptune_first(\"Earth\") ==> \"Earth\"\n    '''\n    return \"Earth\"\n    \ndef closest_to_jupiter_second(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Jupiter\n    second in our solar system. Note that if multiple names match, the closest name \n    is the one closest to the Jupiter.\n    The function should return the string name of the closest planet to \n    the Jupiter second.\n    Example\n    closest_to_jupiter_second(\"Saturn\") ==> \"Saturn\"\n    '''\n    return \"Saturn\"\n    \ndef closest_to_saturn_second(name):\n    '''\n    Given a planet name, return the name of the closest planet to the Saturn\n    second in our solar system. Note that if multiple names match, the closest name "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not isinstance(planet1, str) or not isinstance(planet2, str):\n        raise TypeError\n    if planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        raise ValueError\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        raise ValueError\n    if planet1 == \"Neptune\" and planet2 == \"Earth\":\n        raise ValueError\n    if planet1 == planet2:\n        raise ValueError\n    if planet1 in [\"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        sorted_planets = sorted(planet1, key=lambda planet: planet.orbit)\n    elif planet1 in [\"Uranus\", \"Neptune\"]:\n        sorted_planets = sorted(planet2, key=lambda planet: planet.orbit)\n    else:\n        raise ValueError\n    return tuple(sorted_planets)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 =='mars' or planet1 =='mercury' or planet1 =='venus' or planet1 == 'earth':\n        planet2 = 'jupiter'\n    if planet2 =='mars' or planet2 =='mercury' or planet2 =='venus' or planet2 == 'earth':\n        planet2 ='saturn'\n    if planet1 == planet2:\n        return 'None'\n    if planet2!='mars' and planet2!='mercury' and planet2!='venus' and planet2!= 'earth':\n        return 'None'\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def lcm(num1, num2):\n        '''\n        Given two integers num1 and num2, return the least common multiple of num1 and num2.\n        '''\n        if num1 < num2:\n            num1, num2 = num2, num1\n        while num2:\n            num = num1 // num2\n            num1 %= num2\n        return num2\n    def change(num1, num2, sign):\n        '''\n        Given two integers num1 and num2, return the change (num1 - num2) as a string\n        '''\n        return sign + str(num1 - num2)\n    def find(planet1, planet2):\n        '''\n        Given two strings, planet1 and planet2, return the index of the \n        corresponding planet in the list planet2. If there is no match, return \n        -1.\n        '''\n        for i in range(len(planet2)):\n            if planet2[i] == planet1[i]:\n                return i\n        return -1\n    def num_orbit(planet):\n        '''\n        Given a string planet, return the number of orbit in that planet.\n        '''\n        count = 0\n        for i in range(len(planet)):\n            if planet[i] == \"A\":\n                count += 1\n            elif planet[i] == \"B\":\n                count += 2\n            elif planet[i] == \"C\":\n                count += 3\n            elif planet[i] == \"D\":\n                count += 4\n            elif planet[i] == \"E\":\n                count += 5\n            elif planet[i] == \"F\":\n                count += 6\n        return count\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    planet1 = planet1.replace(\"Jupiter\", \"Saturn\")\n    planet2 = planet2.replace(\"Jupiter\", \"Saturn\")\n    planet1 = planet1.replace(\"Mercury\", \"Uranus\")\n    planet2 = planet2.replace(\"Mercury\", \"Uranus\")\n    planet1 = planet1.replace(\"Venus\", \"Uranus\")\n    planet2 = planet2.replace(\"Venus\", \"Uranus\")\n    planet1 = planet1.replace(\"Earth\", \"Mercury\")\n    planet2 = planet2.replace(\"Earth\", \"Mercury\")\n    planet1 = planet1.replace(\"Mars\", \"Uranus\")\n    planet2 = planet2.replace(\"Mars\", \"Uranus\")\n    planet1 = planet1.replace(\"Uranus\", \"Jupiter\")\n    planet2 = planet2.replace(\"Uranus\", \"Jupiter\")\n    planet1 = planet1.replace(\"Uranus\", \"Saturn\")\n    planet2 = planet2.replace(\"Uranus\", \"Saturn\")\n    planet1 = planet1.replace(\"Uranus\", \"Neptune\")\n    planet2 = planet2.replace(\"Uranus\", \"Neptune\")\n    return (planet1, planet2)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Venus\", \"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Mars\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Neptune\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Uranus\", \"Uranus\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Neptune\", \"Saturn\", \"Uranus\", \"Mercury\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Neptune\", \"Mercury\", \"Uranus\", \"Venus\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Jupiter\", \"Mercury\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" or planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\", \"Saturn\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Neptune\" or planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" or planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Saturn\", \"Venus\")\n    elif planet1 == \"Venus\" or planet2 == \"Saturn\":\n        return (\"Saturn\", \"Saturn\", \"Saturn\", \"Uranus\", \"Uranus\")\n    elif planet1 == \"Mars\" or planet2 == \"Saturn\":\n        return (\"Saturn\", \"Saturn\", \"Saturn\", \"Uranus\", \"Uranus\")\n    elif planet1 == \"Uranus\" or planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" or planet2 == \"Venus\":\n        return (\"Jupiter\", \"Uranus\", \"Uranus\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" or planet2 == \"Mars\":\n        return (\"Saturn\", \"Saturn\", \"Saturn\", \"Uranus\", \"Venus\")\n    elif planet1 == \"Uranus\" or planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" or planet2 == \"Saturn\":\n        return (\"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Uranus\":\n        return (\"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" or planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\", \"Saturn\", \"Saturn\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Uranus\", \"Uranus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Uranus\":\n        return (\"Uranus\", \"Uranus\", \"Uranus\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Uranus\", \"Uranus\", \"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" or planet2 == \"Venus\":\n        return (\"Uranu"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    d = {}\n    for i in planet2:\n        if i not in d:\n            d[i] = 0\n    for i in planet1:\n        if i not in d:\n            d[i] = 0\n    \n    return (d, sorted(d.items(), key=lambda x: x[1])[::-1])\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    lst_sorted = []\n    for element in lst:\n        if len(element)%2!=0:\n            lst_sorted.append(element)\n        else:\n            lst_sorted.append(element[::-1])\n    return lst_sorted\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    sorted_lst = []\n    for word in lst:\n        if len(word)%2 == 0:\n            sorted_lst.append(word)\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst.sort(key=lambda a: len(a.split(\" \")))\n    lst = [word.strip() for word in lst]\n    sorted_lst = [word for word in lst if len(word)%2==0]\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def list_sort(lst):\n        lengths = []\n        for word in lst:\n            lengths.append(len(word))\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = list(map(str.strip, lst))\n    # in this case, we only need to remove the whitespace\n    lst_without_whitespace = list(map(lambda x: x.strip(), lst))\n    # sort alphabetically\n    lst = sorted(lst_without_whitespace, key=str.casefold)\n    # remove duplicates\n    lst = list(dict.fromkeys(lst))\n    # return the sorted list\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            res.append(word)\n    res = sorted(res)\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = [n.lower() for n in lst]\n    lst = sorted(lst)\n    lst = ''.join(lst)\n    lst = lst.split(\" \")\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst_sorted = []\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(lst, key=len, reverse=True)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #   1\n    if n == 1:\n        return 1\n    #   2\n    if n%2 == 0:\n        return y\n    #   3\n    if n%2 == 1:\n        return x\n    #   4\n    #   5\n    #   6\n    #   7\n    #   8\n    #   9\n    #   10\n    #   11\n    #   12\n    #   13\n    #   14\n    #   15\n    #   16\n    #   17\n    #   18\n    #   19\n    #   20\n    #   21\n    #   22\n    #   23\n    #   24\n    #   25\n    #   26\n    #   27\n    #   28\n    #   29\n    #   30\n    #   31\n    #   32\n    #   33\n    #   34\n    #   35\n    #   36\n    #   37\n    #   38\n    #   39\n    #   40\n    #   41\n    #   42\n    #   43\n    #   44\n    #   45\n    #   46\n    #   47\n    #   48\n    #   49\n    #   50\n    #   51\n    #   52\n    #   53\n    #   54\n    #   55\n    #   56\n    #   57\n    #   58\n    #   59\n    #   60\n    #   61\n    #   62\n    #   63\n    #   64\n    #   65\n    #   66\n    #   67\n    #   68\n    #   69\n    #   70\n    #   71\n    #   72\n    #   73\n    #   74\n    #   75\n    #   76\n    #   77\n    #   78\n    #   79\n    #   80\n    #   81\n    #   82\n    #   83\n    #   84\n    #   85\n    #   86\n    #   87\n    #   88\n    #   89\n    #   90\n    #   91\n    #   92\n    #   93\n    #   94\n    #   95\n    #   96\n    #   97\n    #   98\n    #   99\n    #   100\n    #   101\n    #   102\n    #   103\n    #   104\n    #   105\n    #   106\n    #   107\n    #   108\n    #   109\n    #   110\n    #   111\n    #   112\n    #   113\n    #   114\n    #   115\n    #   116\n    #   117\n    #   118\n    #   119\n    #   120\n    #   121\n    #   122\n    #   123\n    #   124\n    #   125\n    #   126\n    #   127\n    #   128\n    #   129\n    #   130\n    #   131\n    #   132\n    #   133\n    #   134\n    #   135\n    #   136\n    #   137\n    #   138\n    #   139\n    #   140\n    #   141\n    #   142\n    #   143\n    #   144\n    #   145\n    #   146\n    #   147\n    #   148\n    #   149\n    #   150\n    #   151\n    #   152\n    #   153\n    #   154\n    #   155\n    #   156\n    #   157\n    #   158\n    #   159\n    #   160\n    #   161\n    #   162\n    #   163\n    #   164\n    #   165\n    #   166\n    #   167\n    #   168\n    #   169\n    #   170\n    #   171\n    #   172\n    #   173\n    #   174\n    #   175\n    #   176\n    #   177\n    #   178\n    #   179\n    #   180\n    #   181\n    #   182\n    #   183\n    #   184\n    #   185\n    #   186\n    #   187\n    #   188\n    #   189\n    #   190\n    #   191\n    #   192\n    #   193\n    #   194\n    #   195\n    #   196\n    #   197\n    "
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #A simple implementation that is not very clever.\n    #Implement your own algorithm here.\n    #Return the value of x if n is a prime number.\n    #Return the value of y otherwise.\n    #See the problem statement for where this is used.\n    #The idea is that you must check if n is a prime number before\n    #doing anything else.\n    #If n is not a prime number, return the value of y instead.\n    #If n is a prime number, return x.\n    if n <= 1:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n    \ndef x_or_y_div_z(n, x, y, z):\n    \"\"\"A simple program that should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if isprime(n):\n        return n\n    if n<=1:\n        return 0\n    for i in range(1,(n//2)+1):\n        if n%i==0:\n            return i\n    return n\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # start with 0 to check if the value of x is a prime\n    # and then check if the value of y is a prime\n    # if both are zero then the value of x is 0 and the value \n    # of y is 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n%2 == 0:\n        # if n is odd then the value of x is x\n        # if n is even then the value of x is y\n        return x\n    else:\n        # if n is even then the value of x is y\n        # if n is odd then the value of x is x\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 2: return x\n    if n == 3: return y\n    if n % 2 == 0:\n        return x_or_y(n//2, x, y)\n    else:\n        return y_or_x(n//2, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    print(x, y)\n    if n == 0:\n        return 0\n    \n    if n % 2 == 0:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1 or n == 2:\n        return n\n    elif n % 2 == 0:\n        return n-1\n    elif n % 2 == 1:\n        return n+1\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def get_primes(num):\n        \"\"\"Returns a list of all primes up to the num.\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n_prime = False\n    if n < 2:\n        print(\"Please choose an even number\")\n        return\n    for i in range(2, n):\n        if n%i == 0:\n            n_prime = True\n            break\n    if n_prime == True:\n        print(x)\n        return y\n    else:\n        print(y)\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert(n > 0)\n    assert(n % 2 == 0)\n    assert(n > 0 and n % 2 == 0)\n    assert(x > 0 and x % 2 == 0)\n    \n    if n == 0:\n        return 0\n    \n    return x * y if n > 0 else y * x\n    \ndef x_or_y_approx(n, x, y):\n    \"\"\"An approximate version of x_or_y.  This is the same as \n    x_or_y except that it uses the two-sided approximation.\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for x in lst:\n        if x < 0:\n            continue\n        sum += x*x\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return sum([(num ** 2) for num in lst if num % 2])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Add code here.\n    sum = 0\n    for n in lst:\n        if n % 2 == 1:\n            sum += n ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_square = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_square += i**2\n    return sum_square\n    \ndef add_numbers(numbers):\n    '''\n    Given a list of numbers, return the sum of the numbers.\n    \n    add_numbers([1, 3, 2, 0]) == 7\n    add_numbers([-1, -2, 0]) == 0\n    add_numbers([9, -2]) == 17\n    add_numbers([0]) == 0\n    '''\n    sum_of_numbers = 0\n    for i in numbers:\n        sum_of_numbers += i\n    return sum_of_numbers\n    \ndef multiply_numbers(numbers):\n    '''\n    Given a list of numbers, return the product of the numbers.\n    \n    multiply_numbers([1, 3, 2, 0]) == 24\n    multiply_numbers([-1, -2, 0]) == 0\n    multiply_numbers([9, -2]) == 72\n    multiply_numbers([0]) == 0\n    '''\n    product = 1\n    for i in numbers:\n        product *= i\n    return product\n    \ndef divide_numbers(numbers):\n    '''\n    Given a list of numbers, return the quotient of the numbers.\n    \n    divide_numbers([1, 3, 2, 0]) == 1.6\n    divide_numbers([-1, -2, 0]) == 0.3333333333333333\n    divide_numbers([9, -2]) == 1.3333333333333333\n    divide_numbers([0]) == 0\n    '''\n    divide_numbers_total = 1\n    for i in numbers:\n        divide_numbers_total *= i\n    return divide_numbers_total\n    \ndef add_and_multiply(numbers):\n    '''\n    Given a list of numbers, return the sum of the numbers, and\n    the product of the numbers.\n    \n    add_and_multiply([1, 3, 2, 0]) == 7\n    add_and_multiply([-1, -2, 0]) == 0\n    add_and_multiply([9, -2]) == 17\n    add_and_multiply([0]) == 0\n    '''\n    total = 0\n    for i in numbers:\n        total += i\n    product = 1\n    for i in numbers:\n        product *= i\n    return total + product\n    \ndef is_prime(number):\n    '''\n    Given a number, determine whether it is prime or not.\n    \n    is_prime([1, 2, 3, 4, 5]) == True\n    is_prime([7, 8, 9]) == False\n    is_prime([]) == True\n    is_prime([1]) == False\n    '''\n    is_prime_number = True\n    for i in range(2, number):\n        if number % i == 0:\n            is_prime_number = False\n            break\n    if is_prime_number == True:\n        return True\n    return False\n    \ndef find_factors(number):\n    '''\n    Given a number, determine the factors of the number.\n    \n    find_factors([1, 2, 3, 4, 5]) == [2, 3]\n    find_factors([3, 6, 9]) == [3, 6]\n    find_factors([5, 10]) == [5]\n    '''\n    factors = []\n    for i in range(1, number):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n    \ndef count_odd_numbers(numbers):\n    '''\n    Given a list of numbers, return the number of odd numbers.\n    \n    count_odd_numbers([1, 3, 5, 7]) == 2\n    count_odd_numbers([3, 6, 9, 12]) == 0\n    count_odd_numbers([]) == 0\n    '''\n    count = 0\n    for i in numbers:\n        if i % 2 == 1:\n            count += 1\n    return count\n    \ndef remove_duplicates(numbers):\n    '''\n    Given "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    #check each number is an integer or not\n    for i in lst:\n        if not isinstance(i, int):\n            raise ValueError(\"I'm not an int, maybe it's not an int?\")\n    \n    #if the list is empty, return 0\n    if len(lst) == 0:\n        return 0\n    \n    #check each number is odd or not\n    for i in lst:\n        if i % 2!= 0:\n            raise ValueError(\"I'm not an odd number!\")\n    \n    return sum(map(lambda x: x**2, lst))\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your solution here\n    if len(lst) == 0:\n        return 0\n    sum_squares = 0\n    for num in lst:\n        sum_squares += num**2\n    return sum_squares\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst == []:\n        return 0\n    \n    total = 0\n    for num in lst:\n        total += num ** 2\n    \n    return total\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0])"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in lst:\n        if i!= 0:\n            result += i ** 2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    double = 0\n    for num in lst:\n        if num > 0:\n            double += num ** 2\n    return double\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for element in lst:\n        if element % 2 == 1:\n            sum = sum + (element * element)\n    return sum\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    guesses = guess\n    scores = []\n    for i in range(len(guesses)):\n        scores.append(guesses[i][0] - scores[i][0])\n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n    \ndef compareArray(arr1, arr2):\n    \"\"\"Your task is to return the absolute difference between two lists of scores. If the scores are the same, you may return 0.\n    If the scores are different, you may return a positive value.\"\"\"\n    pass\n    \ndef compareArray(arr1, arr2):\n    \"\"\"Your task is to return the absolute difference between two lists of scores. If the scores are the same, you may return 0.\n    If the scores are different, you may return a positive value.\"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    score = 0\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            score += 1\n    return score\ndef long_awaited(game,guess):\n    \"\"\"You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # write your code here\n    if len(guess)!= len(game):\n        return None\n    ret = []\n    for i in range(len(guess)):\n        ret.append((abs(guess[i]-game[i]) if guess[i] == game[i] else abs(guess[i]-game[i])*-1))\n    return ret\n    \ndef get_diff(guess,score):\n    \"\"\"Get the absolute difference between the guess and the score.\n    \n    Example:\n    get_diff([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> 0\n    get_diff([4,1,0,2,1,4],[0,1,2,3,4,2]) -> 4\n    \"\"\"\n    if len(guess)!= len(score):\n        return None\n    return sum([abs(score[i] - guess[i])*-1 for i in range(len(score))]"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # time complexity: O(m*n)\n    # space complexity: O(1)\n    if len(guess)!= len(game):\n        return None\n    \n    # initialize count array with 0 value\n    counts = [0 for _ in range(len(guess)+1)]\n    \n    # loop through each index\n    for index in range(len(counts)):\n        if game[index] == guess[index]:\n            counts[index] = counts[index-1] + 1\n        else:\n            counts[index] = max(counts[index-1], counts[index-2])\n    \n    # return the highest count if count array is 0\n    if counts[-1] == 0:\n        return [0,0]\n    \n    # return the max count if count array is 2\n    return [counts[-1], max(counts[-2], counts[-3])]\n        "
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    score = 0\n    guess = list(guess)\n    for i in range(0,len(guess)):\n        score += abs(guess[i]-game[i])\n    return [score,len(game)]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    match = 0\n    for guess_value in guess:\n        match += abs(guess_value - game[guess.index(guess_value)])\n    return [match,match-max(guess)]\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def process(score,guess):\n        \"\"\"I'm pretty sure this is the best way to do it, but it works even faster than\n        using the same function for the match array and guess array.\n        \"\"\"\n        if guess == score:\n            return 0\n        elif guess in score:\n            return abs(score.index(guess)-score.index(score[guess]))\n        else:\n            return 1\n        \n    scores = [[0 for i in range(len(game))] for i in range(len(game))]\n    guesses = [[0 for i in range(len(game))] for i in range(len(game))]\n    for i in range(len(game)):\n        for j in range(len(game)):\n            scores[i][j] = game[i][j]\n            guesses[i][j] = game[j][i]\n    \n    for i in range(len(guess)):\n        for j in range(len(game)):\n            if guesses[i][j] == guess[i] and guess[i] in guesses[j]:\n                #print(i,j)\n                scores[i][j] = process(scores[i][j], guess[i])\n                guesses[i][j] = process(guesses[i][j], guess[i])\n    \n    return scores\n        \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    extensions_count = len(extensions)\n    cap = get_number_of_uppercase(class_name)\n    sm = get_number_of_lowercase(class_name)\n    capital_count = cap - sm\n    strongest_extension = extensions[capital_count - 1]\n    \n    for extension in extensions:\n        if extensions.index(extension) > extensions_count - 1:\n            extensions.remove(extension)\n            break\n        elif extensions.index(extension) == extensions_count - 1:\n            extensions.append(extension)\n    \n    return f'{class_name}.{strongest_extension[0]}.{strongest_extension[1]}'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    extensions = sorted(extensions, key = lambda x: -len(x))\n    result = ''\n    for extension in extensions:\n        if extension == extensions[0]:\n            result = extension\n        else:\n            result = result + extension + \".\"\n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    caps = 0\n    names = []\n    for i in extensions:\n        names.append(i.split('.')[0])\n        caps += i.count(' ')\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    class_name = class_name.lower().strip('sfnp')\n    extensions = extensions.lower().strip('sfnp')\n    if'' in extensions:\n        extensions = extensions.split()\n        for extension in extensions:\n            if'' in extension:\n                extension = extension.split(' ')\n                for extension_item in extension:\n                    if extension_item.isalpha():\n                        extension_item = extension_item.capitalize()\n                    extensions.remove(extension_item)\n                break\n        extensions = [x for x in extensions if x.isalpha()]\n    else:\n        extensions = extensions.split()\n    if len(extensions) == 0:\n        return class_name\n    elif len(extensions) == 1:\n        for extension in extensions:\n            if extension.isalpha():\n                extension = extension.capitalize()\n        return class_name + '.' + extension\n    else:\n        cap = len(extensions)\n        sm = len(extensions)\n        for extension in extensions:\n            if extension.isalpha():\n                extension = extension.capitalize()\n            else:\n                continue\n        extension = extension.split('.')\n        if len(extension) > 1:\n            extension = extension[-1]\n        else:\n            extension = extension[0]\n        if cap > sm:\n            return class_name + '.' + extension\n        else:\n            for extension_item in extensions:\n                if extension_item.isalpha():\n                    extension_item = extension_item.capitalize()\n                else:\n                    continue\n            return class_name + '.' + extension\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    class_name = class_name.lower()\n    extensions = extensions.split('.')\n    while not extension_exists(class_name, extensions):\n        extensions.remove(class_name)\n    extension = extensions.pop(0)\n    if not extensions:\n        return class_name + '.' + extension\n    else:\n        return class_name + '.' + extension + '.' + extension_exists(class_name, extensions)"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"\n    Class_name = the class name to be calculated\n    extensions = the list of extensions to be searched\n    return the name of the strongest extension\n    \"\"\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = \"\"\n    temp = ''\n    for item in extensions:\n        cap = len(item[0].upper())\n        sm = len(item[0].lower())\n        if cap > sm:\n            result = item[0] + \".\" + item[1]\n        else:\n            result = item[0] + \".\" + item[0][:sm]\n    result = result.upper()\n    result = result.replace('.', '')\n    result = result[::-1]\n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Implement this function\n    \n    strongest_extension_name = ''\n    for extension_name in extensions:\n        if (len(extension_name.split('.')[-1]) == 1):\n            extension_name = extension_name + '.' + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'SA'):\n            extension_name = extension_name + '.' + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'S'):\n            extension_name = extension_name + '.' + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'SA'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'S'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'BE'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'CE'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'CA'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'CS'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'S'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'SA'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'S'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'SA'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'S'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'BE'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')[-1] == 'CE'):\n            extension_name = extension_name.replace('.', '') + extensions[extension_name][0].upper() + extensions[extension_name][1].lower()\n        if (extension_name.split('.')["
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Capitalize the class name (and remove the number of the uppercase\n    # letters) so that it is a string\n    class_name = class_name.capitalize()\n    # Get all the extensions, split by the last character\n    extensions = extensions.split('.')\n    # For each extension, get the length of the extension, then subtract\n    # the capitalized class name by that length, calculate the strength\n    # and return the string\n    for extension in extensions:\n        # If the extension has the strength of -1, return the class name\n        if extension == '-1':\n            return class_name\n        # Otherwise, get the length of the extension and subtract it by the\n        # capitalized class name\n        else:\n            extension_length = len(extension)\n            return class_name + '.' + extension[:-extension_length]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    weak_extension = []\n    strong_extension = []\n    for extension in extensions:\n        if extension in class_name:\n            if extension.lower() not in strong_extension:\n                strong_extension.append(extension.lower())\n    for extension in strong_extension:\n        if extension not in weak_extension:\n            weak_extension.append(extension)\n    return '.'.join(weak_extension + strong_extension)\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a=a.lower()\n    b=b.lower()\n    c=[]\n    d=[]\n    for i in range(len(a)-1):\n        if a[i].isalpha():\n            c.append(a[i])\n        else:\n            d.append(a[i])\n    for i in range(len(b)-1):\n        if b[i].isalpha():\n            c.append(b[i])\n        else:\n            d.append(b[i])\n    if c==d:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(a)!= len(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if(a[0]!=b[-1] or b[-1]!=a[0]):\n    #     return False\n    a_len = len(a)\n    b_len = len(b)\n    for i in range(min(b_len,a_len)):\n        if a[i]!= b[i]:\n            return False\n    for i in range(min(a_len - b_len,a_len - b_len)):\n        if a[a_len - i - 1]!= b[b_len - i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pattern = []\n    if is_palindrome(a):\n        pattern = a\n    elif is_palindrome(b):\n        pattern = b\n    else:\n        a = a[::-1]\n        b = b[::-1]\n        pattern = a + b\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s1 = \"abcd\"\n    s2 = \"abd\"\n    s3 = \"abd\"\n    s4 = \"abd\"\n    s5 = \"abd\"\n    s6 = \"abd\"\n    s7 = \"abd\"\n    s8 = \"abd\"\n    s9 = \"abd\"\n    s10 = \"abd\"\n    s11 = \"abd\"\n    s12 = \"abd\"\n    s13 = \"abd\"\n    s14 = \"abd\"\n    s15 = \"abd\"\n    s16 = \"abd\"\n    s17 = \"abd\"\n    s18 = \"abd\"\n    s19 = \"abd\"\n    s20 = \"abd\"\n    s21 = \"abd\"\n    s22 = \"abd\"\n    s23 = \"abd\"\n    s24 = \"abd\"\n    s25 = \"abd\"\n    s26 = \"abd\"\n    s27 = \"abd\"\n    s28 = \"abd\"\n    s29 = \"abd\"\n    s30 = \"abd\"\n    s31 = \"abd\"\n    s32 = \"abd\"\n    s33 = \"abd\"\n    s34 = \"abd\"\n    s35 = \"abd\"\n    s36 = \"abd\"\n    s37 = \"abd\"\n    s38 = \"abd\"\n    s39 = \"abd\"\n    s40 = \"abd\"\n    s41 = \"abd\"\n    s42 = \"abd\"\n    s43 = \"abd\"\n    s44 = \"abd\"\n    s45 = \"abd\"\n    s46 = \"abd\"\n    s47 = \"abd\"\n    s48 = \"abd\"\n    s49 = \"abd\"\n    s50 = \"abd\"\n    s51 = \"abd\"\n    s52 = \"abd\"\n    s53 = \"abd\"\n    s54 = \"abd\"\n    s55 = \"abd\"\n    s56 = \"abd\"\n    s57 = \"abd\"\n    s58 = \"abd\"\n    s59 = \"abd\"\n    s60 = \"abd\"\n    s61 = \"abd\"\n    s62 = \"abd\"\n    s63 = \"abd\"\n    s64 = \"abd\"\n    s65 = \"abd\"\n    s66 = \"abd\"\n    s67 = \"abd\"\n    s68 = \"abd\"\n    s69 = \"abd\"\n    s70 = \"abd\"\n    s71 = \"abd\"\n    s72 = \"abd\"\n    s73 = \"abd\"\n    s74 = \"abd\"\n    s75 = \"abd\"\n    s76 = \"abd\"\n    s77 = \"abd\"\n    s78 = \"abd\"\n    s79 = \"abd\"\n    s80 = \"abd\"\n    s81 = \"abd\"\n    s82 = \"abd\"\n    s83 = \"abd\"\n    s84 = \"abd\"\n    s85 = \"abd\"\n    s86 = \"abd\"\n    s87 = \"abd\"\n    s88 = \"abd\"\n    s89 = \"abd\"\n    s90 = \"abd\"\n    s91 = \"abd\"\n    s92 = \"abd\"\n    s93 = \"abd\"\n    s94 = \"abd\"\n    s95 = \"abd\"\n    s96 = \"abd\"\n    s97 = \"abd\"\n    s98 = \"abd\"\n    s99 = \"abd\"\n    s100 = \"abd\"\n    s101 = \"abd\"\n    s102 = \"abd\"\n    s103 = \"abd\"\n    s104 = \"abd\"\n    s105 = \"abd\"\n    s106 = \"abd\"\n    s107 = \"abd\"\n    s108 = \"abd\"\n    s109 = \"abd\"\n    s110 = \"abd\"\n    s111 = \"abd\"\n    s112 = \"abd\"\n    s113 = \"abd\"\n    s114 = \"ab"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # time complexity: O(m + n)\n    # space complexity: O(1)\n    def rotation(word):\n        return ''.join(list(reversed(word)))\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Return True if first word and second word are a substring of first word\n    # Return False if first word is a substring of second word\n    # Return True if first word and second word are a substring of both\n    # If both words are a substring return True\n    # If only one word is a substring return False\n    # Else return None\n    \n    # Split the input string\n    str1 = a.lower().split()\n    str2 = b.lower().split()\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == b:\n        return True\n    if len(a) >= len(b):\n        return cycpattern_check(a[:len(b)], b) or cycpattern_check(a[len(b):], b[::-1])\n    else:\n        return cycpattern_check(a[:len(b)], b[::-1])\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(b) < len(a):\n        return False\n    if b == a[::-1]:\n        return True\n    elif len(a) % len(b)!= 0:\n        return False\n    for i in range(0, len(a) - len(b) + 1):\n        if cycpattern_check(a[i:i+len(b)], b):\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = a.lower().strip()\n    b = b.lower().strip()\n    if len(a) < len(b):\n        return False\n    \n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if num < 10:\n        return (1, num)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    for i in range(0,num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if num < 0:\n        return\n    if num == 0:\n        return\n    else:\n        if num % 2 == 0:\n            return (1, 1)\n        else:\n            return (1, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i in '02468':\n            continue\n        else:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    if num == 0:\n        return (0,0)\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n            num //= 2\n        else:\n            odd += 1\n            num //= 2\n    return (even,odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i == '0':\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n    return even_count, odd_count\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(num)!= int:\n        raise TypeError(\"Invalid number\")\n    if num < 0:\n        raise ValueError(\"Number can't be less than 0\")\n    if num < 10:\n        return (1, num)\n    else:\n        return(2, num%2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    n = len(str(num))\n    for i in range(1, n):\n        if (str(num)[i]) % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1,num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n    \ndef factorial(num):\n    \"\"\"Given a number. return the factorial.\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if num < 0:\n        return (0, 0)\n    elif num < 10:\n        return (num, 1)\n    elif num < 100:\n        return (num//10, 1)\n    elif num >= 100:\n        return (num//10, 2)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    ans = []\n    i = 0\n    while i < len(number):\n        if number[i]!= 'i':\n            if i + 1 < len(number) and number[i:i + 2]!= 'vi':\n                i += 1\n                continue\n            if i + 1 < len(number) and number[i:i + 3] == 'vii':\n                i += 1\n                continue\n        i += 1\n    if number[i:] == 'vi':\n        i += 1\n    while i < len(number):\n        if number[i]!= 'i':\n            if i + 1 < len(number) and number[i:i + 2]!= 'ii':\n                i += 1\n                continue\n            if i + 1 < len(number) and number[i:i + 3] == 'vi':\n                i += 1\n                continue\n        i += 1\n    if number[i:] == 'ii':\n        i += 1\n    while i < len(number):\n        if number[i]!= 'i':\n            if i + 1 < len(number) and number[i:i + 2] == 'vi':\n                i += 1\n                continue\n            if i + 1 < len(number) and number[i:i + 3] == 'vi':\n                i += 1\n                continue\n        i += 1\n    if number[i:] == 'vi':\n        i += 1\n    while i < len(number):\n        if number[i]!= 'i':\n            if i + 1 < len(number) and number[i:i + 2] == 'ii':\n                i += 1\n                continue\n            if i + 1 < len(number) and number[i:i + 3] == 'vi':\n                i += 1\n                continue\n        i += 1\n    if number[i:] == 'ii':\n        i += 1\n    while i < len(number):\n        if number[i]!= 'i':\n            if i + 1 < len(number) and number[i:i + 2] == 'vi':\n                i += 1\n                continue\n            if i + 1 < len(number) and number[i:i + 3] == 'vi':\n                i += 1\n                continue\n        i += 1\n    ans = number[:i]\n    return ans\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def convert_num(num):\n        \"\"\"\n        Convert number into Roman numerals.\n        Restrictions: 1 <= num <= 1000\n        \"\"\"\n        # Example from https://stackoverflow.com/questions/4841748/how-to-convert-a-number-to-roman-numeral-using-python-3\n        roman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n                      50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        roman_num = ''\n        for i, v in enumerate(roman_dict):\n            if num >= v:\n                # found a greater than value\n                roman_num += roman_dict[v] * (num - v)\n                num -= v\n            else:\n                # value not found, can't get the next level\n                break\n        return roman_num\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def roman(num):\n        \"\"\"\n        Define all the symbols from 1 to num.\n        \"\"\"\n        if num == 0:\n            return ''\n        elif num == 1:\n            return 'I'\n        elif num == 2:\n            return 'II'\n        elif num == 3:\n            return 'III'\n        elif num == 4:\n            return 'IV'\n        elif num == 5:\n            return 'V'\n        elif num == 6:\n            return 'VI'\n        elif num == 7:\n            return 'VII'\n        elif num == 8:\n            return 'VIII'\n        elif num == 9:\n            return 'IX'\n        elif num == 10:\n            return 'X'\n        elif num == 11:\n            return 'XI'\n        elif num == 12:\n            return 'XII'\n        elif num == 13:\n            return 'XIII'\n        elif num == 14:\n            return 'XIV'\n        elif num == 15:\n            return 'XV'\n        elif num == 16:\n            return 'XVI'\n        elif num == 17:\n            return 'XVII'\n        elif num == 18:\n            return 'XVIII'\n        elif num == 19:\n            return 'XIX'\n        elif num == 20:\n            return 'XX'\n        elif num == 21:\n            return 'XXI'\n        elif num == 22:\n            return 'XXII'\n        elif num == 23:\n            return 'XXIII'\n        elif num == 24:\n            return 'XXIV'\n        elif num == 25:\n            return 'XXV'\n        elif num == 26:\n            return 'XXVI'\n        elif num == 27:\n            return 'XXVII'\n        elif num == 28:\n            return 'XXVIII'\n        elif num == 29:\n            return 'XXIX'\n        elif num == 30:\n            return 'XXX'\n        elif num == 31:\n            return 'XXXI'\n        elif num == 32:\n            return 'XXXII'\n        elif num == 33:\n            return 'XXXIII'\n        elif num == 34:\n            return 'XXXIV'\n        elif num == 35:\n            return 'XXXV'\n        elif num == 36:\n            return 'XXXVI'\n        elif num == 37:\n            return 'XXXVII'\n        elif num == 38:\n            return 'XXXVIII'\n        elif num == 39:\n            return 'XXXIX'\n        elif num == 40:\n            return 'XL'\n        elif num == 41:\n            return 'L'\n        elif num == 42:\n            return 'XC'\n        elif num == 43:\n            return 'C'\n        elif num == 44:\n            return 'CD'\n        elif num == 45:\n            return 'D'\n        elif num == 46:\n            return 'CM'\n        elif num == 47:\n            return 'M'\n        elif num == 48:\n            return 'XC'\n        elif num == 49:\n            return 'LX'\n        elif num == 50:\n            return 'LXC'\n        elif num == 51:\n            return 'LXD'\n        elif num == 52:\n            return 'LXD'\n        elif num == 53:\n            return 'LXC'\n        elif num == 54:\n            return 'LXD'\n        elif num == 55:\n            return 'L'\n        elif num == 56:\n            return 'XL'\n        elif num == 57:\n            return 'XLX'\n        elif num == 58:\n            return 'XLXI'\n        elif num == 59:\n            return 'XLXII'\n        elif num == 60:\n            return 'XLXIII'\n        elif num == 61:\n            return 'XLXIV'\n        elif num == 62:\n            return 'LXX'\n        elif num == 63:\n            return 'LXXI'\n        elif num == 64:\n            return 'LXXII'\n        elif num == 65:\n            return 'LXXIII'\n        elif num == 66:\n            return 'LXXIV'\n    "
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    roman_dict = {\n        1: \"M\",\n        2: \"CM\",\n        3: \"D\",\n        4: \"CD\",\n        5: \"C\",\n        6: \"XC\",\n        7: \"L\",\n        8: \"XL\",\n        9: \"X\",\n        10: \"IX\",\n        11: \"V\",\n        12: \"IV\",\n        13: \"I\",\n        14: \"I\",\n        15: \"X\",\n        16: \"IX\",\n        17: \"V\",\n        18: \"IV\",\n        19: \"I\"\n    }\n    if number == 0:\n        return \"\"\n    elif number > 9:\n        return int_to_mini_roman(number // 10) + roman_dict[number % 10] + \"IX\"\n    elif number < 9:\n        return int_to_mini_roman(number // 10) + roman_dict[number % 10]\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    roman_numeral = [\n        'I', 'V', 'X', 'L', 'C', 'D', 'M',\n        'IV', 'IX', 'XL', 'XC', 'CD', 'CM',\n    ]\n    numerals = {\n        1: \"I\", 2: \"II\", 3: \"III\", 4: \"IV\", 5: \"V\",\n        6: \"VI\", 7: \"VII\", 8: \"VIII\", 9: \"IX\",\n        10: \"X\", 11: \"XI\", 12: \"XII\", 13: \"XIII\",\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert 1 <= number <= 1000\n    n = [None, \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\"]\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not is_positive(number):\n        return ''\n    roman_dict = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = []\n    for value in range(number // 1000, 0, -1):\n        roman = ''\n        for val in range(value):\n            roman += roman_dict[1000 * val]\n        result.append(roman)\n    return ''.join(result)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman_nums = [\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"]\n    s = \"\"\n    result = \"\"\n    for num in roman_nums:\n        if number >= 1000:\n            break\n        if number < 1000:\n            s = s + num\n            number = number * 10\n        else:\n            s = s + num\n            number = number * 10 + 1000\n    result = s[::-1]\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if number == 0:\n        return \"\"\n    result = \"\"\n    table = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    i = 0\n    while number:\n        num = number % table[i]\n        if num!= 0:\n            result += \"M\"\n            number //= table[i]\n        else:\n            result += \"I\"\n            number = 0\n        i += 1\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def integer_to_roman_number(n):\n        \"\"\"\n        Given a positive integer, return the roman numeral equivalent of it.\n        >>> integer_to_roman_number(5)\n        'i'\n        >>> integer_to_roman_number(104)\n        'dc'\n        >>> integer_to_roman_number(1000)\n        'ci'\n        \"\"\"\n        roman_number = [\n            '',\n            '',\n            'i',\n            '',\n            'c',\n            'x',\n            'd',\n            'v',\n            'ii',\n            'cc',\n            'xc',\n            'iv',\n            'l',\n            'i'\n        ]\n        i = 1\n        while n > 0:\n            if n == 1:\n                return roman_number[i]\n            elif n == 2:\n                return roman_number[i] + roman_number[i - 1]\n            elif n == 3:\n                return roman_number[i] + roman_number[i - 1] + roman_number[i - 2]\n            elif n == 4:\n                return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3]\n            else:\n                last_one = roman_number[i - 1]\n                next_one = roman_number[i - 2]\n                next_two = roman_number[i - 3]\n                next_three = roman_number[i - 4]\n                if last_one < next_one < next_two < next_three:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3] + roman_number[i - 4]\n                elif last_one < next_one < next_two < next_three:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + roman_number[i - 3] + next_one + roman_number[i - 4]\n                else:\n                    return roman_number[i] + roman_number[i - 1] + roman_number[i - 2] + next_one + roman_number[i - 3] + next_two + roman_number[i - 4]\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if (b**2) - (4*a*c) >= 0:\n        return True\n    else:\n        return False\ndef triangle_area(a,b,c):\n    '''\n    Given three sides of a triangle.\n    '''\n    if a+b > c and a+c > b and b+c > a:\n        return abs(a*b-c*d)**(1/2)\n    else:\n        return 'Error'\ndef compare_triangle_angles(a,b,c):\n    '''\n    Compare angles of two triangles.\n    '''\n    if a > b and a > c and b > c:\n        return (a, b, c)\n    elif a == b and b == c:\n        return (0, 0, 0)\n    elif a == b:\n        return (180, 90, 270)\n    elif a == c:\n        return (270, 90, 180)\n    elif b == c:\n        return (180, 270, 90)\ndef triangle_length(a,b,c):\n    '''\n    Calculate the length of two triangles\n    '''\n    if right_angle_triangle(a,b,c):\n        if a**2 + b**2 == c**2:\n            return triangle_length(b,a,c)**0.5\n        else:\n            return 'Error'\n    elif a**2 + b**2 == c**2:\n        return (c**2 - a**2)**0.5\n    elif b**2 + c**2 == a**2:\n        return (c**2 - b**2)**0.5\n    elif b**2 + c**2 == a**2:\n        return (c**2 - b**2)**0.5\n    elif b**2 + c**2 == a**2:\n        return (c**2 - a**2)**0.5\n    else:\n        return 'Error'\ndef get_angles(a,b,c):\n    '''\n    Calculate the angles between two triangles\n    '''\n    if right_angle_triangle(a,b,c):\n        return (calc_angle(a,b,c) + 90)\n    elif a**2 + b**2 == c**2:\n        return calc_angle(a,b,c)\n    elif b**2 + c**2 == a**2:\n        return calc_angle(a,b,c)\n    elif b**2 + c**2 == a**2:\n        return calc_angle(a,b,c)\n    else:\n        return 'Error'\ndef get_area(a,b,c):\n    '''\n    Calculate the area of two triangles\n    '''\n    if right_angle_triangle(a,b,c):\n        return triangle_area(a,b,c)**0.5\n    elif a**2 + b**2 == c**2:\n        return triangle_area(b,a,c)**0.5\n    elif b**2 + c**2 == a**2:\n        return triangle_area(a,b,c)**0.5\n    elif b**2 + c**2 == a**2:\n        return triangle_area(a,b,c)**0.5\n    else:\n        return 'Error'\ndef get_perimeter(a,b,c):\n    '''\n    Calculate the perimeter of two triangles\n    '''\n    if right_angle_triangle(a,b,c):\n        return triangle_length(a,b,c)**2\n    elif a**2 + b**2 == c**2:\n        return triangle_length(b,a,c)**2\n    elif b**2 + c**2 == a**2:\n        return triangle_length(a,b,c)**2\n    elif b**2 + c**2 == a**2:\n        return triangle_length(a,b,c)**2\n    else:\n        return 'Error'\ndef get_equilateral_triangle_area(a,b,c):\n    '''\n    Calculate the area of the equilateral triangle\n    '''\n    if get_angles(a,b,c) < 90 and get_angles("
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_right_angle(a, b, c):\n        if a == b or b == c or a == c:\n            return False\n        if (a == b or b == c or a == c) and a!= b and a!= c and b!= c:\n            return True\n        return False\n    return is_right_angle(a, b, c)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if ((a == b) or (b == c) or (a == c)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a*b*c >= (a+b)*(c+a)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == b == c:\n        return True\n    elif a*b == c*c:\n        return (a*c)%2 == 0\n    elif a*c == b*c:\n        return (a*b)%2 == 0\n    elif a*b*c == c*c*b:\n        return (a*c)%2 == 0\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b:\n        if b == c:\n            return True\n        else:\n            return False\n    elif a == c:\n        if b == c:\n            return True\n        else:\n            return False\n    elif a == b:\n        if b == c:\n            return True\n        elif b == c:\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a == b or a == c or b == c:\n        return True\n    \n    if a > b:\n        if a > c:\n            return True\n        else:\n            return False\n    else:\n        if a > c:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if is_triangle(a, b, c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def rotate_point(p):\n        \"\"\"\n        Rotate a point counter clockwise by 180 degrees\n        \"\"\"\n        p[0] = -p[0]\n        return p\n    \n    def rotate_point_clockwise(p):\n        \"\"\"\n        Rotate a point counter clockwise by 180 degrees\n        \"\"\"\n        p[0] = p[0] + 180\n        return p\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    d = b**2 - 4*a*c\n    if d < 0:\n        return False\n    x1 = (-b + math.sqrt(d))/(2*a)\n    x2 = (-b - math.sqrt(d))/(2*a)\n    if a*x1*x1 + b*x2*x2 <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        num_char = 0\n        for char in word:\n            if char.isalpha():\n                num_char += 1\n        if num_char > max_char:\n            max_char = num_char\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_char_number = 0\n    max_char = \"\"\n    for word in words:\n        # Remove spaces and split words\n        word = word.strip().split(\" \")\n        for word in word:\n            max_char_number = max(max_char_number, len(word))\n            max_char = word[0:max_char_number]\n    if max_char == \"\":\n        return \"None\"\n    else:\n        return max_char[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_char = 0\n    max_str = ''\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_str = word\n    return max_str\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_len = 0\n    \n    for word in words:\n        temp = len(word)\n        if temp > max_len:\n            max_len = temp\n            max_word = word\n    \n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_char = 0\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(words, key=len)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def make_set(s):\n        \"\"\"Make set of all elements in the list.\n        \"\"\"\n        set_s = set(s)\n        return set_s\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    word_list = []\n    for w in words:\n        if w not in word_list:\n            word_list.append(w)\n    word_list.sort()\n    max_index = word_list[0]\n    for w in word_list:\n        if word_list.count(w) > 1:\n            max_index = w\n    return max_index\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max(set(words), key = lambda x : len(x))\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    print(\"starting function\")\n    # print(\"length of words list: \", len(words))\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    remaining = remaining - number\n    if remaining < 0:\n        remaining = 0\n    elif number > need:\n        remaining = number - need\n    else:\n        remaining = need\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if number == 0 or need == 0:\n        return [0, 0]\n    if remaining == 0:\n        return [0, 0]\n    \n    remaining = remaining - need\n    if remaining < 0:\n        remaining = 0\n    \n    return [number, remaining]"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 1\n    while number > 0 and need > 0:\n        remaining -= number\n        need -= 1\n        if remaining == 0:\n            remaining = number\n            number -= 1\n        count += 1\n        if remaining <= 0:\n            return [number, count]\n        number += 1\n    return [0, count]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    if need < 0:\n        result.append(number)\n        need = need + (remaining - number)\n    else:\n        while remaining > 0:\n            result.append(remaining)\n            remaining = remaining - need\n    result.append(number)\n    return resul"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [remaining, number] if number >= need else [number, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining_per_car = int(remaining_per_car)\n    \n    if remaining_per_car == 0:\n        return [number, 1]\n    if remaining_per_car > 0:\n        return [number, 0]\n    \n    remaining_per_car = remaining/need\n    remaining"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [number, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    remaining = remaining - need\n    \n    if remaining <= 0:\n        return [need, remaining]\n        \n    return [ need + number, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total = number\n    if need < 0:\n        return [total, number]\n    else:\n        if remaining < 0:\n            return [total, remaining]\n        else:\n            remaining = remaining - need\n            total += need\n            return [total, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    remaining -= need\n    \n    while remaining >= 0:\n        if remaining > number:\n            count += 1\n            remaining -= number\n        else:\n            remaining += need\n            count += 1\n            \n    return [count, remaining]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if operator == None:\n        operator = []\n    elif len(operator) > len(operand):\n        operator = operator[:]\n    elif len(operator) < len(operand):\n        operator.append(operand[:])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # DO NOT CHANGE THE CODE IN THIS FUNCTION\n    operator_a = operator\n    operator_b = operand\n    operation_result = []\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if operator == '+':\n        return operator_addition(operand, operand)\n    elif operator == '-':\n        return operator_subtraction(operand, operand)\n    elif operator == '*':\n        return operator_multiplication(operand, operand)\n    elif operator == '//':\n        return operator_floor_division(operand, operand)\n    elif operator == '**':\n        return operator_exponentiation(operand, operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if operator['+', '*', '-'] not in operand:\n        raise Exception('Error: Operator list and operand lists are not of the same size.')\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    operator = operator.copy()\n    operand = operand.copy()\n    for op in operator:\n        if op in operand:\n            if operator[op] < operand[op]:\n                operator[op] = operator[op] + operand[op]\n            elif operator[op] > operand[op]:\n                operator[op] = operator[op] - operand[op]\n            else:\n                operator[op] = operator[op] ** 2\n            operand[op] = operand[op] * operand[op]\n        else:\n            operator[op] = operator[op] ** 2\n    return operator[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    expression = ''\n    for i in range(len(operator)):\n        if operator[i] in operand:\n            expression = expression + operator[i]\n        else:\n            expression = expression +''\n    return eval(expression)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return operator['+', '*', '-']\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        operand = list(operand)\n    except:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if operator == None:\n        print(\"Type Error\")\n        return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = [chr(ord(c)-2 if c.isalpha() else ord(c)-65 if c.isupper() else ord(c)-97 if c.islower() else ord(c)+2) for c in s]\n    s = \"\".join(s)\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0].isupper() == True:\n        return solve(s[1:]) + s[0].lower()\n    else:\n        return solve(s[1:]) + s[0].upper()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return \"\"\n    else:\n        return solve(s[0:len(s)//2]+solve(s[len(s)//2:])+solve(s[len(s)//2:][::-1]))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not s:\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # list of char in the string\n    chars = list(s)\n    # reverse the order of the string\n    for i in range(len(s)):\n        chars[i] = chars[i].upper()\n    # return the string\n    return \"\".join(chars)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not s:\n        return \"\"\n    r = \"\"\n    l = s[0]\n    for i in range(1,len(s)):\n        if s[i]!= l:\n            r += l\n            l = s[i]\n        elif s[i] == l:\n            l = s[i]\n    r += l\n    return r\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not s:\n        return \"\"\n    # the solution is a single pass\n    if len(s) == 1:\n        return s[0].upper() + s[0].lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) == 0:\n        return s\n    return solve(s[::-1])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # If there are no letters, do nothing\n    if not s:\n        return \"\"\n    \n    # Each letter to the left and up:\n    # '@' and 'A'\n    left = []\n    up = []\n    \n    # Initialize the right and left, left is a list of all the letters\n    # after which the string is not found\n    for i in range(len(s)):\n        if s[i].isalpha():\n            left.append(s[i])\n        else:\n            up.append(s[i])\n    \n    # Reverse the right list\n    right = []\n    for i in reversed(range(len(left))):\n        right.append(left[i])\n    \n    # Reverse the left list\n    left = []\n    for i in reversed(range(len(up))):\n        left.append(up[i])\n    \n    # Combine the two lists\n    return left[::-1] + right[::-1]"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    letters = {\n        'A':'2', 'B':'3', 'C':'4', 'D':'5', 'E':'6', 'F':'7', 'G':'8', 'H':'9',\n        'I':'10', 'J':'11', 'K':'12', 'L':'13', 'M':'14', 'N':'15', 'O':'16', 'P':'17',\n        'Q':'18', 'R':'19', 'S':'20', 'T':'21', 'U':'22', 'V':'23', 'W':'24', 'X':'25',\n        'Y':'26', 'Z':'27', '0':'28', '1':'29', '2':'30', '3':'31', '4':'32', '5':'33',\n        '6':'34', '7':'35', '8':'36', '9':'37','':'40', '.':'41', ',':42\n        }\n    ans = \"\"\n    for c in s:\n        ans += letters[c.lower()]\n    return an"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import hashlib\n    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    md5 = hashlib.md5()\n    if not text:\n        return None\n    text = text.encode()\n    md5.update(text)\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.encode('utf-8')\n    md5_hash = hashlib.md5(text)\n    return md5_hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if text is None:\n        return None\n    if type(text) is str:\n        text = text.encode('utf-8')\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    hash_string = hashlib.md5()\n    hash_string.update(text.encode())\n    return hash_string.hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.encode('utf-8')\n    return md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return hashlib.md5(text.encode()).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    hash_md5 = hashlib.md5()\n    if not text:\n        return None\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(range(a, b+1))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in range(a, b+1)]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(range(a, b+1))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    while a < b:\n        return [a, b]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in range(a, b+1) if x%2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_digits = []\n    digits = 0\n    while digits <= b:\n        if digits == b:\n            break\n        if digits < a:\n            even_digits.append(digits)\n            digits += 1\n        else:\n            even_digits.append(digits)\n            digits += 1\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # the list containing the even integers between a and b\n    even_list = []\n    even_list.extend(range(a, b+1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for x in range(a, b+1):\n        result.append(x)\n    return result\n"
    }
]