[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(numbers) <= 2 and (abs(numbers[0] - numbers[1]) < threshold or abs(numbers[1] - numbers[2]) < threshold)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return any(abs(number - threshold) < abs(number) for number in numbers)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for number in numbers:\n        for number_other in numbers:\n            if abs(number - number_other) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Two numbers closer than threshold.\n    return len(set(numbers) & set(numbers[1:])) <= threshold\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    threshold_2 = 1 - threshold\n    for num in numbers:\n        if abs(num - threshold_2) > threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for number in numbers:\n        if abs(number - threshold) < abs(number - numbers[-1]):\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for num in numbers:\n        if num > threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(numbers)!= len(set(numbers))\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for number in numbers:\n        for i in range(len(numbers)):\n            if abs(number - numbers[i]) > threshold:\n                return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    parens = []\n    current_paren = ''\n    for ch in paren_string:\n        if ch == '(':\n            if current_paren!= '':\n                parens.append(current_paren)\n            current_paren = ''\n        else:\n            current_paren += ch\n    if len(parens)!= 0:\n        parens.append(current_paren)\n    return parens\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split string into list of strings\n    split_list = list(paren_string.split('()'))\n    # remove empty strings\n    if len(split_list) == 0:\n        return split_list\n    # if string is empty, return empty list\n    if len(split_list) == 1:\n        return split_list\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    paren_stack = []\n    new_paren_stack = []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    paren_groups = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            paren_groups.append('(')\n        elif paren_string[i] == ')':\n            paren_groups.append(')')\n        elif paren_string[i] == ')':\n            if paren_groups[-1] == '(':\n                paren_groups.pop()\n                paren_groups.pop()\n            else:\n                paren_groups.pop()\n        elif paren_string[i] =='':\n            paren_groups.pop()\n        else:\n            paren_groups.append(paren_string[i])\n        i += 1\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    in_string = '('\n    opening_brackets = []\n    is_inside = False\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    brackets = []\n    open_brackets = []\n    last_open_bracket = 0\n    \n    for i in range(len(paren_string)):\n        if paren_string[i] in '()':\n            if open_brackets[-1] == ')':\n                if last_open_bracket!= 0 and open_brackets[-1] == '(' and last_open_bracket > open_brackets[-1]:\n                    brackets.append(paren_string[last_open_bracket:i])\n                last_open_bracket = i\n                open_brackets.append(')')\n            elif open_brackets[-1] == '(':\n                brackets.append(paren_string[last_open_bracket:i])\n                last_open_bracket = i\n                open_brackets.append(')')\n        elif paren_string[i] in ')]}':\n            if open_brackets[-1] == '(':\n                brackets.append(paren_string[last_open_bracket:i])\n                last_open_bracket = i\n                open_brackets.append(')')\n            elif open_brackets[-1] == '[':\n                brackets.append(paren_string[last_open_bracket:i])\n                last_open_bracket = i\n                open_brackets.append(']')\n    \n    if open_brackets[-1] == '(':\n        brackets.append(paren_string[last_open_bracket:len(paren_string)])\n    \n    return brackets\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            parens.append(paren_string[i])\n        else:\n            if len(parens) > 0:\n                if parens[-1] == '(':\n                    parens.pop()\n                else:\n                    raise ValueError(\"Incorrect input string: {}\".format(paren_string))\n    return parens\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    separated_groups = []\n    # split it up\n    parens = paren_string.split('(')\n    for i in range(len(parens)):\n        # check if it has an open and close parens\n        if parens[i].strip()[-1] == ')':\n            separated_groups.append(parens[i].strip()[:-1])\n        else:\n            # if not, it has a paren, remove it from list\n            separated_groups.append(parens[i].strip())\n    # return list\n    return separated_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sep_list = []\n    index = 0\n    is_open = True\n    while index < len(paren_string):\n        char = paren_string[index]\n        if char == '(':\n            if is_open == True:\n                is_open = False\n                sep_list.append(char)\n                index += 1\n            else:\n                index += 1\n        elif char == ')':\n            if is_open == True:\n                index += 1\n                sep_list.append(char)\n                is_open = False\n                if index == len(paren_string):\n                    break\n                else:\n                    continue\n            else:\n                index += 1\n                if index == len(paren_string):\n                    break\n                else:\n                    continue\n        else:\n            index += 1\n    return sep_list\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if number < 0:\n        raise ValueError('Number should be positive')\n    if isinstance(number, (float, int, np.integer)):\n        return truncate_number(number)\n    elif isinstance(number, (np.ndarray, np.generic)):\n        return number.ravel().astype(float).astype(int)\n    else:\n        raise TypeError(\n            \"The number must be a float or an array/scalar/generic\"\n            \" such as int, float, np.array/scalar/generic.\"\n        )\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return truncate_number_float(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return number / 10.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    number = round(number, -1)\n    return number if number % 1 else 0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # if number < 0.0:\n    #     return 0.0\n    # else:\n    #     return truncate_number(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    from decimal import Decimal\n    return Decimal(str(number)[:number.index('.')])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if number < 0:\n        raise ValueError(\"Negative numbers are not supported.\")\n    return int(number)"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    number = abs(number)\n    # Find the smallest number that is greater than number\n    if number < 0:\n        # Convert number to int and use floor\n        number = int(abs(number))\n        # Convert all integers to the smallest positive whole number\n        number = int(round(number,0))\n    else:\n        # Convert all positive whole numbers to the smallest positive\n        # whole number\n        number = int(round(number))\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    decimals = int(number/10)\n    return number - (decimals * 10)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert isinstance(number, (int, float)), \"Number must be integer or float\"\n    assert isinstance(number, float), \"Number must be float\"\n    return float('.'.join(str(round(x, 5)).split('.')[-1] for x in number.as_integer_ratio()))\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    nums = []\n    for i in operations:\n        if i == 0:\n            nums.append(i)\n    if nums[0] < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(operations)\n    for i in range(len(operations)):\n        if i == 0:\n            continue\n        if operations[i] == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    val = 0\n    for i in operations:\n        val += i\n    if val <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return False if sum(operations) == 0 else sum(operations) > 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if operations[0] <= 0:\n        return True\n    for idx in range(1, len(operations)):\n        if operations[idx] <= 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # It is important to note that if the balance is less than zero, all operations on the account should\n    # have the same balance\n    return sum(operations) < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lower_bal = 0\n    upper_bal = 0\n    for op in operations:\n        if op == 0:\n            lower_bal = upper_bal\n            upper_bal = 0\n        elif op < 0:\n            lower_bal = 0\n            upper_bal = upper_bal - op\n        elif op > 0:\n            upper_bal = upper_bal + op\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_balances = len(operations)\n    balances = [0]*num_balances\n    is_balanced = True\n    index = 0\n    while index < num_balances:\n        if operations[index]!= 0:\n            balances[index] = operations[index]\n            if balances[index] < 0:\n                is_balanced = False\n                break\n            index += 1\n        else:\n            index += 1\n    return is_balanced\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(operations):\n        if operations[i] < 0:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(numbers) > 0\n    return statistics.mean(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(sum(map(abs, numbers)) / len(numbers), 2)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    var = sum([(x - mean) ** 2 for x in numbers]) / len(numbers)\n    return round(abs(var - mean ** 2), 2)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    average = sum(numbers) / len(numbers)\n    return abs(average - mean(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    mean_x = mean(numbers)\n    sum_x = sum(numbers)\n    mean_y = sum(numbers)/len(numbers)\n    sum_y = sum(numbers)\n    return (sum_x - mean_x) ** 2 / sum_y\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    mads = []\n    for i in numbers:\n        mads.append(abs(i - sum(numbers)/len(numbers)))\n    return sum(mads) / len(mads)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    mean = sum(numbers)/len(numbers)\n    return (sum((x - mean)**2 for x in numbers))**0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (sum(numbers) - sum(numbers[0:-1]))/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mean_x = mean(numbers)\n    x_mean = mean(numbers)\n    numbers_len = len(numbers)\n    if numbers_len == 0:\n        return 0\n    diff_x = 0\n    for x in numbers:\n        diff_x += (x - x_mean) ** 2\n    return math.sqrt(diff_x / numbers_len)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0.0\n    for num in numbers:\n        sum += (num - numbers.mean()) ** 2\n    return sum ** 0.5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return numbers[:len(numbers)//2] + [delimeter] + numbers[len(numbers)//2:]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [delimeter] + numbers + [delimeter] if len(numbers) > 0 else [delimeter] * len(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return numbers[:len(numbers)//2] + [delimeter] + numbers[len(numbers)//2:]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers.insert(0, delimeter)\n    return numbers"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [n + delimeter for n in numbers] + [n - delimeter for n in numbers[::-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [n + delimeter for n in numbers[:len(numbers) - 1]] + numbers[len(numbers) - 1:][::-1]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    # For every element in list\n    for i in range(0, len(numbers) - 1):\n        # If number is found at end, it's the last element and it's a last\n        # element, so insert it to last element of result\n        if i + delimeter <= len(numbers):\n            result.append(numbers[i + delimeter])\n        else:\n            # Otherwise, it's the first element and it's a first element\n            # and insert it to first element of result\n            result.append(numbers[i])\n    # Return result\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    intersections = []\n    for index in range(len(numbers)):\n        intersections.append(numbers[index])\n        if index < len(numbers) - 1:\n            intersections.append(numbers[index] + delimeter)\n    return intersections\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [n for n in numbers[-2::-1] + [n - delimeter] + numbers[:-2] + numbers[1:]]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not paren_string:\n        return []\n    nested_parens = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            nested_parens.append(level)\n        if char == ')':\n            if nested_parens[-1]!= level:\n                nested_parens.append(0)\n            nested_parens.pop()\n        if char == ')':\n            level = level - 1\n    nested_parens.append(level)\n    return nested_parens\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(paren_string) == 0:\n        return []\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    parts = paren_string.split()\n    result = [1]\n    for part in parts:\n        result.append(len(part) - 1)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    list_of_nestings = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            list_of_nestings.append(1)\n        else:\n            list_of_nestings.append(0)\n    return list_of_nestings\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string is None or len(paren_string) == 0:\n        return []\n    output = []\n    level = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            output.append(level)\n        elif char == ')':\n            level -= 1\n            if level == 0:\n                output.append(1)\n            else:\n                output.append(level)\n        else:\n            pass\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    ans = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                ans.append(len(stack))\n        else:\n            ans.append(0)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    parens = []\n    paren_index = 0\n    for index, paren in enumerate(paren_string):\n        if paren == '(':\n            paren_index += 1\n        elif paren == ')':\n            paren_index -= 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    parens = [int(item) for item in paren_string.split(\" \")]\n    return parens\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Initialize a stack to store (()\n    # stack = []\n    # for paren in paren_string:\n    #     if paren == '(':\n    #         stack.append('(')\n    #     elif paren == ')':\n    #         if len(stack) > 1:\n    #             stack.pop()\n    #             level = len(stack)\n    #         else:\n    #             level = 0\n    #         #if stack is empty, then the previous parenthesis was not inside the string and hence we have a group with only one parenthesis\n    #         if len(stack) == 0:\n    #             return [level]\n    #         else:\n    #             #depth of stack > level, then we have a group with another parenthesis inside\n    #             if level > level:\n    #                 return [level] + parse_nested_parens(paren_string[1:-1])\n    #             #depth of stack < level, then we have a group with a parenthesis inside\n    #             else:\n    #                 return [level, level] + parse_nested_parens(paren_string[1:-1])\n    #     #otherwise, we have a group with no parenthesis\n    #     else:\n    #         stack.append(paren)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    paren_count = 0\n    paren_idx = 0\n    for paren in paren_string:\n        if paren == '(':\n            paren_count += 1\n        elif paren == ')':\n            paren_count -= 1\n        if paren_count!= 0:\n            continue\n        if paren_idx == len(paren_string):\n            result.append(paren_count)\n        else:\n            result.append(paren_count + paren_idx - len(paren_string))\n        paren_idx += 1\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [s for s in strings if s.lower().startswith(substring.lower())]\n    \ndef remove_all(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Remove strings that contain given substring\n    >>> remove_all(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if s.lower().startswith(substring.lower())]\n    \ndef filter_by_longest_words(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings that are longer than 10 characters\n    >>> filter_by_longest_words(['abcd', 'abc', 'a', 'a'])\n    ['abcd', 'a']\n    \"\"\"\n    return [s for s in strings if len(s) > 10]\n    \ndef filter_by_short_words(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings that are shorter than 5 characters\n    >>> filter_by_short_words(['a', 'a', 'a', 'a', 'a'])\n    ['a']\n    \"\"\"\n    return [s for s in strings if len(s) < 5]\n    \ndef filter_by_alpha(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain alphabet characters\n    >>> filter_by_alpha(['a', 'a', 'a', 'a', 'a'])\n    ['a']\n    \"\"\"\n    return [s for s in strings if any(s.lower().startswith(c) for c in 'abcdefghijklmnopqrstuvwxyz')]\n    \ndef filter_by_special(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain only special characters\n    >>> filter_by_special(['a', 'a', 'a', 'a', 'a'])\n    ['a']\n    \"\"\"\n    return [s for s in strings if any(s.lower().startswith(c) for c in '!@#$%^&*()_+|-./')]\n    \ndef filter_by_digits(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain only digits\n    >>> filter_by_digits(['123', '1234', '1223', '123'])\n    ['123', '1234', '1223']\n    \"\"\"\n    return [s for s in strings if any(s.isdigit() == True and s.isalpha() == True and s.isalnum() == True)]\n    \ndef filter_by_all_letters(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain all characters in all letters\n    >>> filter_by_all_letters(['abc', 'abc', 'a', 'a'])\n    ['abc', 'abc', 'a']\n    \"\"\"\n    return [s for s in strings if any(s.lower().startswith(c) for c in 'abcdefghijklmnopqrstuvwxyz')]\n    \ndef filter_by_num_capital(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain any letter in a word without a number\n    >>> filter_by_num_capital(['a', 'a', 'a', 'a', 'a'])\n    ['a', 'a', 'a']\n    \"\"\"\n    return [s for s in strings if any(s.isalpha() and s.lower().startswith(c) for c in '123456789')]\n    \ndef filter_by_num_digit(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings which contain any letter in a word without a number\n    >>> filter_by_num_digit(['1', '1', '1', '1', '1'])\n    ['1', '1', '1']\n    \"\"\"\n    return [s for s in strings if any(s.isalpha() and s.lower().startswith(c) for c in '123456789')]\n    \ndef filter_by_digits_and_num(strings: List[str]) -> List[st"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(substring)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    filtered = []\n    for i in strings:\n        if substring in i:\n            filtered.append(i)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if len(s) >= len(substring) and s[:len(substring)] == substring]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    filtered_string_list = [string for string in strings if substring in string]\n    return filtered_string_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    filtered_list = []\n    for string in strings:\n        if substring in string:\n            filtered_list.append(string)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    filtered_strings: List[str] = []\n    for string in strings:\n        if string.startswith(substring):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for i in strings:\n        if substring in i:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # initialization\n    n = len(numbers)\n    result = (0, 1)\n    # looping over the list\n    for i in range(n):\n        # check if the list is empty\n        if len(numbers) == 0:\n            # return a tuple with a sum and a product\n            return result\n        # add the current element in the list to the sum and product\n        result = (result[0] + numbers[i], result[1] * numbers[i])\n    # if the sum is equal to 0, return the last element as a product\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if numbers == []:\n        return (0, 1)\n    if len(numbers) == 1:\n        return numbers[0], 1\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    prod = numbers[0]\n    if numbers[1]!= 0:\n        prod *= numbers[1]\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i] * prod\n        prod *= numbers[i]\n    return (sum, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    prod = 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    product = 1\n    sum = 0\n    for i in numbers:\n        product *= i\n        sum += i\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    suma, product = 0, 1\n    for num in numbers:\n        suma += num\n        product *= num\n    return suma, product\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    prod = 1\n    for num in numbers:\n        total += num\n        prod *= num\n    return (total, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if numbers is None or len(numbers) == 0:\n        return (0, 1)\n    else:\n        numbers = sorted(numbers)\n        total = numbers[0]\n        product = 1\n        for i in range(1, len(numbers)):\n            product = product * numbers[i]\n            total = total + product\n        return (total, product)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (numbers[0] + numbers[1] * numbers[2] * numbers[3], numbers[0] * numbers[1] * numbers[2] * numbers[3])\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 0\n    for i in numbers:\n        result += i\n    return result, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    prod = 1\n    for number in numbers:\n        sum += number\n        prod *= number\n    return sum, prod\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = []\n    for i in range(len(numbers)):\n        if numbers[i] > numbers[i-1]:\n            lst.append(numbers[i])\n        else:\n            lst.append(numbers[i-1])\n    return lst\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_list = []\n    start = 0\n    while start <= len(numbers):\n        if len(max_list) == 0 or numbers[start] > numbers[start - 1]:\n            max_list.append(numbers[start])\n            start += 1\n        else:\n            max_list.append(numbers[start - 1])\n            start += 1\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_elem = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] > max_elem:\n            max_elem = numbers[i]\n    return max_elem\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not numbers:\n        return []\n    result: List[int] = []\n    for number in numbers:\n        max = 0\n        for i in range(len(result)):\n            if number > result[i]:\n                max = result[i]\n                break\n        result.append(max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    current_max = numbers[0]\n    rolling_max = [current_max]\n    for i in range(1, len(numbers)):\n        if numbers[i] < current_max:\n            rolling_max.append(numbers[i])\n            current_max = numbers[i]\n        else:\n            rolling_max.append(current_max)\n            current_max = numbers[i]\n    return rolling_max\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers\n    else:\n        result = [0] * len(numbers)\n        max_value = numbers[0]\n        for index in range(len(numbers)):\n            if max_value < numbers[index]:\n                max_value = numbers[index]\n            result[index] = max_value\n        return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_number = numbers[0]\n    results = [max_number]\n    for num in numbers[1:]:\n        if num > max_number:\n            results.append(num)\n            max_number = num\n        else:\n            max_number = num if num > max_number else max_number\n    return results + [max_number]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not numbers:\n        return []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    current_max = numbers[0]\n    next_max = numbers[0]\n    for num in numbers[1:]:\n        if current_max < num:\n            current_max = num\n        elif current_max > num:\n            current_max = num\n        elif current_max == num:\n            current_max = num\n            next_max = next_max + num\n    return next_max\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    ans = [0] * len(numbers)\n    current_max = numbers[0]\n    max_idx = 0\n    for i in range(1, len(numbers)):\n        current_max = max(current_max, numbers[i])\n        if current_max >= numbers[i]:\n            ans[max_idx] = numbers[i]\n            max_idx += 1\n    return ans\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    start = 0\n    last_idx = len(string) - 1\n    reverse = []\n    \n    for i in range(len(string)):\n        if string[i]!= string[last_idx]:\n            while string[i]!= string[start]:\n                start += 1\n            reverse.append(string[start:i+1])\n        last_idx = i\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    string = string.strip()\n    if len(string) == 0:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    length_string = len(string)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    palindrome = ''\n    start = 0\n    for char in string:\n        if is_palindrome(char):\n            if start == 0:\n                palindrome += char\n                start += 1\n            else:\n                if char!= palindrome[start-1]:\n                    palindrome += char\n                    start += 1\n                else:\n                    start += 1\n    return palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i, j = 0, len(string)\n    while i < j:\n        if string[i]!= string[j]:\n            break\n        i += 1\n        j -= 1\n    return string[i:j+1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(string)\n    for i in range(n-1, -1, -1):\n        for j in range(0, n-i):\n            if string[i+j]!= string[j]:\n                break\n        else:\n            return string[i:i+j+1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # start with an empty string to start from\n    string = \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # First find the shortest string from the supplied string\n    n = len(string)\n    start = 0\n    end = n\n    while end < n:\n        # Compute a string prefix that comes before the supplied string\n        prefix = string[start:end]\n        if is_palindrome(prefix):\n            # If we've found a palindrome, we need to append to the end of the string\n            end = end + len(prefix)\n        else:\n            # Compute the suffix that comes before the supplied string\n            suffix = string[end:]\n            # Append to the end of the string\n            string = string[:end] + suffix\n            # Update the start and end indices\n            start = start + len(prefix)\n            end = end + len(suffix)\n    # Add to end if it isn't a palindrome\n    string = string + string[-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # check to make sure string isn't empty.\n    if len(string) == 0:\n        return ''\n    # make a list of all possible palindrome suffixes of the string.\n    suffix_list = [string[::-1]]\n    # loop through all possiblities of prefix in suffix_list and add to list.\n    for i in range(1, len(suffix_list)):\n        # make copy of suffix_list to add to.\n        suffix_copy = suffix_list[:]\n        # add all possiblities to suffix_list.\n        for j in range(0, len(suffix_list) - i + 1):\n            suffix_copy.append(string[j:j + i])\n        # if string is palindrome, we can append all possibilities to suffix_list.\n        if is_palindrome(suffix_copy[-1]):\n            suffix_list.extend(suffix_copy)\n    return ''.join(suffix_list)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(string)//2):\n        suffix = string[i:i+2]\n        if is_palindrome(suffix):\n            return make_palindrome(suffix)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert type(a) == str\n    assert type(b) == str\n    # assert a.isupper() and b.isupper()\n    a_bits = bin(int(a, 2))\n    b_bits = bin(int(b, 2))\n    # assert len(a_bits) == len(b_bits)\n    if len(a_bits)!= len(b_bits):\n        return ''\n    return ''.join(a_bits[i] + b_bits[i] for i in range(0, len(a_bits)))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return str(bin(int(a, 2) ^ int(b, 2)))[2:].rjust(8, '0')\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert a and b\n    s = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            s += '0'\n        else:\n            s += '1'\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join([str(int(a_b)^int(b_b)) for a_b, b_b in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # create a new string with a or b and a^b\n    result = \"\"\n    for c in range(0, len(a)):\n        if a[c] == b[c]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    \n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return str(bin(int(a, 2) ^ int(b, 2)))[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join([chr(int(a, 2) ^ int(b, 2)) for a, b in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join([str(ord(a[i]) ^ ord(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n    return strings[max_len - 1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Edge case: empty list\n    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Get the longest in list of strings\n    max_str = max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if strings == []:\n        return None\n    else:\n        #print(len(strings))\n        #print(strings)\n        #print(\">>>>>>>\",max(strings, key=len))\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # we assume that the strings have same length\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max(strings, key = len)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return strings[0]\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return 1\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a // b, a % b)"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if b < a:\n        a, b = b, a\n    for n in range(a, b+1, 1):\n        if a % n == 0 and b % n == 0:\n            gcd = n\n            break\n    return gcd\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    if b < a:\n        return greatest_common_divisor(a, b)\n    if a == b:\n        return a\n    return greatest_common_divisor(a, b - a)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #base case\n    if (a == b):\n        return a\n    if (a % b == 0):\n        return greatest_common_divisor(a // b, b)\n    return greatest_common_divisor(a % b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a > b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b:\n        return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a < b:\n        a, b = b, a\n    for i in range(a, b + 1, 1):\n        if a % i == 0 and b % i == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(a, b - a"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == 0 or b == 0:\n        return 1\n    elif a < b:\n        return greatest_common_divisor(b, a % b)\n    elif a > b:\n        return greatest_common_divisor(a, b % a)\n    else:\n        return 1\n    \ndef main():\n    \"\"\" Simple program to create a list of cubes from 1-10\n    >>> main()\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    print(numbers_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i, j, res = 0, 0, 0\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return []\n    elif string[0] == 'a':\n        return [\"\"]\n    else:\n        prefixes = []\n        prefix = \"a\"\n        for i in range(1, len(string)):\n            if string[i] == string[i-1]:\n                prefix += string[i]\n            else:\n                prefixes.append(prefix)\n                prefix = string[i]\n        prefixes.append(prefix)\n        return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return [string]\n    else:\n        result = []\n        for i in range(1, len(string)+1):\n            prefix = string[:i]\n            suffix = string[i:]\n            prefixes = all_prefixes(prefix)\n            suffixes = all_prefixes(suffix)\n            result += prefixes + suffixes\n        return result\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    for prefix in range(1, len(string) // 2 + 1):\n        prefixes.append(string[:prefix])\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return []\n    prefixes = []\n    index = 0\n    while index < len(string):\n        if string[index:index+2] == 'a' or string[index:index+2] == 'b' or string[index:index+2] == 'c':\n            prefixes.append(string[index:index+2])\n        index += 1\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefix_list = []\n    for i in range(1, len(string)+1):\n        if string[:i] == string[:i][::-1]:\n            prefix_list.append(string[:i])\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(string) == 0:\n        return []\n    return_list = []\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        for j in all_prefixes(prefix):\n            return_list.append(prefix + j)\n    return return_list"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not string:\n        return []\n    \n    if len(string) == 1:\n        return [string]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    answer = []\n    for i in range(1, len(string)):\n        answer.append(string[:i])\n    return answer\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefixes = []\n    max_prefix = 0\n    for i in range(len(string)):\n        # determine if it is a prefix\n        if i == 0:\n            prefixes.append(string[0:i+1])\n        elif string[i] == string[i-1]:\n            prefixes.append(string[i:i+2])\n        else:\n            if len(prefixes) > max_prefix:\n                max_prefix = len(prefixes)\n                # update prefix\n                prefixes = []\n            prefixes.append(string[i:i+2])\n    # return all the prefixes\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sequence = []\n    while n > 0:\n        sequence.append(str(n % 10))\n        n //= 10\n    return''.join(sequence)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get a number of digits\n    digits = str(n)\n    # make the number of digits short\n    digits = digits[:len(digits)-1]\n    # add 0s to each digit\n    for i in range(len(digits)):\n        digits[i] = '0' + digits[i]\n    # return the result\n    return digits\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = ''\n    for i in range(0, n + 1):\n        s += str(i) +''\n    return s\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join(str(i) for i in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 0\n    while i < n:\n        if i % 2 == 0:\n            print(f'{i:2} ', end=\" \")\n        i += 1\n    print()\n    return \"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Constraints: 1 <= n <= 100\n    result = \"\"\n    for i in range(n):\n        result += \" \"\n        result += str(i+1)\n    return result\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 0\n    s = []\n    while i < n:\n        s.append(str(i))\n        i += 1\n    return''.join(s)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for x in range(n):\n        yield str(x)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0: return ''\n    elif n == 1: return '0'\n    elif n == 2: return '0 1 '\n    elif n == 3: return '0 1 2'\n    elif n == 4: return '0 1 2 3'\n    elif n == 5: return '0 1 2 3 4'\n    elif n == 6: return '0 1 2 3 4 5'\n    elif n == 7: return '0 1 2 3 4 5 6'\n    elif n == 8: return '0 1 2 3 4 5 6 7'\n    elif n == 9: return '0 1 2 3 4 5 6 7 8'\n    elif n == 10: return '0 1 2 3 4 5 6 7 8 9'\n    elif n == 11: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 12: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 13: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 14: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 15: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 16: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 17: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 18: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 19: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9'\n    elif n == 20: return '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 "
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = ''\n    for i in range(n):\n        result += str(i) +''\n    return result\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #TODO: create helper function and add other helper functions\n    return sum(1 for i in string if i.isalpha())\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: implement\n    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count_characters = 0\n    for char in string:\n        if char =='' or char.lower() =='':\n            count_characters += 1\n        else:\n            count_characters += 1\n    return count_characters\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for c in string:\n        count += 1\n    return coun"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    counter = 0\n    # for each character in string\n    for char in string:\n        # if the character is a digit\n        if char.isdigit():\n            counter += 1\n        # if the character is a lowercase letter\n        elif char.islower():\n            counter += 1\n        # if the character is a uppercase letter\n        elif char.isupper():\n            counter += 1\n        # if the character is a space\n        elif char == \" \":\n            counter += 1\n        # if the character is a comma\n        elif char == \",\":\n            counter += 1\n        # if the character is a right parenthesis\n        elif char == \")\":\n            counter += 1\n        # if the character is a left parenthesis\n        elif char == \"(\":\n            counter += 1\n    return counter\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(set(string)"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(set(string)"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    characters = {}\n    for char in string:\n        if char in characters:\n            characters[char] += 1\n        else:\n            characters[char] = 1\n    return len(characters)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(map(int, music_string.split('|')))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # You can do some more processing here. Here is a quick example:\n    # >>> parse_music('o o|.| o| o|.| o|.| o o')\n    # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # Here is an additional example:\n    # >>> parse_music('o o|.| o| o|.| o|.| o o')\n    # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # Here is an explanation of the logic:\n    # 1. The first note is not a whole note.\n    # 2. All notes have an odd number of beats, only the notes that are not the whole note are counted as part of a whole note.\n    # 3. The notes are always separated by a '|'.\n    # 4. In the middle, two notes are not a whole note.\n    # 5. If two notes are separated by a '|'.\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    notes = []\n    \n    if not music_string:\n        return notes\n    \n    if music_string.endswith('.'):\n        # Note is a single note.\n        notes.append(1)\n    elif music_string.endswith('o|'):\n        # Note is a half note.\n        notes.append(2)\n    elif music_string.endswith('.|'):\n        # Note is a quater note.\n        notes.append(3)\n    else:\n        # Note is a note.\n        notes.append(0)\n    \n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Transform the string to a list of strings representing notes\n    notes = list(map(lambda x: x.lower(), music_string.split('|')))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    data = music_string.split()\n    return [int(d) for d in data[:-1]]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(note) for note in music_string.split('|')]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Complete the parse function to take input music_string and return a list of integers.\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    notes = ['o', 'o|', '|.', '|.', '.', '.', '.', '.', '.', '.', '.', '.', '.']\n    if music_string == '.':\n        return [0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Split string into list of notes\n    notes = music_string.split('|')\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    beat_list = []\n    beat_dict = {\n        '.|': 1,\n        'o': 2,\n        'o|': 2,\n        'o||': 2,\n        'o.': 2,\n        '.': 1,\n        '|.': 2,\n        'o||': 2,\n        'o|.': 2,\n        'o.': 1,\n        '.': 0\n    }\n    for character in music_string:\n        if character in beat_dict:\n            beat_list.append(beat_dict[character])\n        elif character == '.':\n            break\n        else:\n            beat_list.append(1)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = string.lower()\n    for i in range(len(string)-len(substring)+1):\n        if substring in string[i:i+len(substring)]:\n            return string[i:i+len(substring)].count(substring)\n    return 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(len(string)):\n        total += string.count(substring[i])\n    return total\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # define dicts for lookup\n    count_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0}\n    # loop through string\n    for c in string:\n        # check if letter present in dict\n        if c in count_dict:\n            count_dict[c] += 1\n    # find how many times each letter is present in the substring\n    for k in count_dict:\n        if substring.count(k) > count_dict[k]:\n            return len(substring) - count_dict[k]\n    return 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    if len(string) < len(substring):\n        return count\n    if string[0] == substring[0]:\n        for i in range(len(string)):\n            if string[i] == substring[0]:\n                count += 1\n    else:\n        for i in range(len(string)):\n            if substring[0] == string[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len([c for c in string if substring in c])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string.count(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 0\n    temp = []\n    while i < len(string):\n        j = i\n        while j < len(string) and string[j] == substring[i]:\n            i += 1\n            j += 1\n        temp.append(i)\n        i = j\n    count = 0\n    for i in temp:\n        count += string[i: i + len(substring)]\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    string_size = len(string)\n    substring_size = len(substring)\n    for i in range(0, substring_size - substring_size+1):\n        for j in range(0, substring_size - substring_size+1):\n            if string[i+j] == substring[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n        else:\n            if string[i:i + len(substring)] == substring:\n                count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    numbers = numbers.split()\n    return ''.join([str(numbers.index(str(i))) + str(numbers.index(str(i))) for i in range(10)])\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i] > numbers[i + 1]:\n            i += 1\n        elif numbers[i] < numbers[i + 1]:\n            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n        else:\n            break\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join(sorted(numbers, reverse=True))"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(sorted(list(numbers), key=lambda x: x in '0123456789'))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = ''\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result += str(numbers[i]) +''\n        else:\n            result += numbers[i] +''\n    return result.strip()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    numbers = numbers.split(' ')\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    return''.join([str(n) for n in numbers])\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def number_to_str(n: int) -> str:\n        \"\"\" Transforms a number represented as a string into a number,\n        such that the number 0 (zero) is 'zero'.\n        \"\"\"\n        return str(n) if n > 0 else 'zero'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(numbers) < 3:\n        return numbers\n    if numbers[0] > numbers[-1]:\n        numbers = numbers[1:-1]\n    if numbers[0] > numbers[-1]:\n        numbers = numbers[1:-1]\n    if numbers[0] > numbers[-1]:\n        numbers = numbers[1:-1]\n    return numbers + sorted(numbers)\n    \ndef solve_part1(numbers: str) -> int:\n    \"\"\" Part 1: Solve the challenge: Part 1 of the puzzle.\n    >>> solve_part1('zero one eight nine')\n    19\n    >>> solve_part1('one nine one')\n    9\n    >>> solve_part1('three seven eight seven eight')\n    23\n    \"\"\"\n    return len(numbers) - solve_part2(numbers)\n    \ndef solve_part2(numbers: str) -> int:\n    \"\"\" Part 2: Solve the challenge: Part 2 of the puzzle.\n    >>> solve_part2('zero one eight nine')\n    40\n    >>> solve_part2('one nine one')\n    1\n    >>> solve_part2('three seven eight seven eight')\n    19\n    \"\"\"\n    left = 1\n    right = len(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            right -= 1\n        else:\n            left += 1\n        if numbers[i] + numbers[i + 1] == numbers[i + 1] + numbers[i]:\n            right -= 1\n    return left + right\n    \ndef solve_part2_remaining(numbers: str) -> int:\n    \"\"\" Part 2: Solve the remaining challenge: Part 2 of the puzzle.\n    >>> solve_part2_remaining('zero one eight nine')\n    40\n    >>> solve_part2_remaining('one nine one')\n    1\n    >>> solve_part2_remaining('three seven eight seven eight')\n    19\n    \"\"\"\n    return solve_part2(sort_numbers(numbers))\n    \ndef solve_part3(numbers: str) -> int:\n    \"\"\" Part 3: Solve the remaining challenge: Part 3 of the puzzle.\n    >>> solve_part3('zero one eight nine')\n    32\n    >>> solve_part3('one nine one')\n    1\n    >>> solve_part3('three seven eight seven eight')\n    15\n    \"\"\"\n    left = 0\n    right = len(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            right -= 1\n        else:\n            left += 1\n        if numbers[i] + numbers[i + 1] == numbers[i + 1] + numbers[i]:\n            right -= 1\n    return left + right\n    \ndef solve_part3_remaining(numbers: str) -> int:\n    \"\"\" Part 3: Solve the remaining challenge: Part 3 of the puzzle.\n    >>> solve_part3_remaining('zero one eight nine')\n    32\n    >>> solve_part3_remaining('one nine one')\n    1\n    >>> solve_part3_remaining('three seven eight seven eight')\n    15\n    \"\"\"\n    return solve_part3(sort_numbers(numbers))\n    \ndef solve_part4(numbers: str) -> int:\n    \"\"\" Part 4: Solve the remaining challenge: Part 4 of the puzzle.\n    >>> solve_part4('zero one eight nine')\n    29\n    >>> solve_part4('one nine one')\n    1\n    >>> solve_part4('three seven eight seven eight')\n    30\n    \"\"\"\n    left = 1\n    right = len(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            left -= 1\n        else:\n            right += 1\n        if numbers[i] + numbers[i + 1] == numbers[i + 1] + numbers[i]:\n            left -= 1\n    return left + right\n    \ndef solve_part4_remaining(numbers: str) -> int:\n    \"\"\" Part 4: Solve the remaining challenge: Part 4 of the puzzle.\n    >>> solve_part4_remaining('zero one eight nine')\n    29\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    smallest_dif, smallest_dif_ind = float('inf'), 0\n    closest_to_smallest_dif, closest_to_smallest_dif_ind = float('inf'), 0\n    smallest_dif, smallest_dif_ind = float('inf'), 0\n    for index, element in enumerate(numbers):\n        smallest_dif = min(smallest_dif, element)\n        if smallest_dif == element:\n            closest_to_smallest_dif = min(closest_to_smallest_dif, index)\n            if smallest_dif_ind == closest_to_smallest_dif_ind:\n                smallest_dif_ind = closest_to_smallest_dif_ind + 1\n            else:\n                smallest_dif_ind = closest_to_smallest_dif_ind + 1\n    return smallest_dif, closest_to_smallest_dif_ind\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smaller_number = numbers[0]\n    smaller_index = 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    smaller = numbers[0]\n    larger = numbers[-1]\n    for i in range(len(numbers)):\n        smaller = min(smaller, numbers[i])\n        larger = max(larger, numbers[i])\n    return smaller, larger\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    min_v = float(\"inf\")\n    min_index = None\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    small = float('inf')\n    big = float('-inf')\n    # quick selection\n    small_index, big_index = 0, len(numbers) - 1\n    while small_index <= big_index:\n        mid = (small_index + big_index) // 2\n        if numbers[mid] < numbers[small_index]:\n            small = numbers[small_index]\n            small_index = mid + 1\n        elif numbers[mid] > numbers[big_index]:\n            big = numbers[big_index]\n            big_index = mid - 1\n        else:\n            big_index -= 1\n            small_index += 1\n    # now we have big and small, return them\n    return (small, big)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    smaller, larger = numbers[0], numbers[-1]\n    for i in range(len(numbers) - 1):\n        if numbers[i] < smaller:\n            smaller = numbers[i]\n        if numbers[i] > larger:\n            larger = numbers[i]\n    return smaller, larger"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smaller = None\n    larger = None\n    for element in numbers:\n        if larger is None or element > larger:\n            larger = element\n            smaller = smaller\n        if smaller is None or element < smaller:\n            smaller = element\n            larger = larger\n    return (smaller, larger)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smallest = float('inf')\n    smallest_index = 0\n    for i in range(len(numbers) - 1):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest, smallest_index\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    smallest_index = 0\n    smallest_value = numbers[0]\n    for i in range(1, len(numbers)):\n        current_value = numbers[i]\n        if current_value < smallest_value:\n            smallest_index = i\n            smallest_value = current_value\n    return smallest_index, smallest_value\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: find all the closest numbers\n    # https://stackoverflow.com/questions/16120220/find-closest-numbers-from-list\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    min_value, max_value = float(min(numbers)), float(max(numbers))\n    return [(number - min_value) / (max_value - min_value) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    min = numbers[0]\n    max = numbers[-1]\n    for number in numbers:\n        if number < min:\n            min = number\n        if number > max:\n            max = number\n    return [number - min for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    rescaled_numbers = [x*1.0 for x in numbers]\n    return rescaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x / max(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    rescaled_numbers = []\n    for number in numbers:\n        rescaled_numbers.append(number / 2)\n    return rescaled_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(f\"The list needs to contain at least two elements, got {len(numbers)}\")\n    elif not all(0 <= elem < 1 for elem in numbers):\n        raise ValueError(f\"All numbers in the list need to be in the range [0, 1].\")\n    else:\n        return [elem * 1.0 / max(numbers) for elem in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x / float(sum(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x / max(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    ret = [number / sum(numbers) for number in numbers]\n    return ret\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(numbers) > 1, \"Cannot rescale to unit. Not enough numbers to rescale.\"\n    assert all(numbers[:2] >= 0), \"Cannot rescale to unit. Numbers must be non-negative.\"\n    assert all(numbers[2:] >= 0), \"Cannot rescale to unit. Numbers must be non-negative.\"\n    assert all(numbers[1] < 1), \"Cannot rescale to unit. Numbers should be less than 1.\"\n    assert all(numbers[0] > 0), \"Cannot rescale to unit. Numbers should be greater than 0.\"\n    \n    rescaled_numbers: List[float] = []\n    \n    for number in numbers:\n        if number < 0:\n            rescaled_numbers.append(0)\n        else:\n            rescaled_numbers.append(number)\n    \n    assert len(rescaled_numbers) % 2 == 0, \"Cannot rescale to unit. Numbers should have even numbers.\"\n    \n    return rescaled_numbers\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(value) for value in values if type(value) is int]"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: improve solution\n    # return [item for item in values if isinstance(item, int)]\n    return [item for item in values if isinstance(item, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(filter(lambda v: type(v) is int, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(filter(lambda x: type(x) is int, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in values if type(i) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [int(v) for v in values if type(v) in [int, float]]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if string=='':\n        return 0\n    else:\n        return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 0\n    n = len(string)\n    while (i < n):\n        i = i + 1\n        if (i == n):\n            i += 1\n            return i\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    dividers = set()\n    while i < n:\n        if (n % i) == 0:\n            dividers.add(i)\n        i += 1\n    return len(dividers)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if n == 1:\n        return 1\n    \n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    \n    return factor"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def divisors(n):\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                yield i\n                yield from divisors(n/i)\n    l = [i for i in divisors(n)]\n    return l[-1] if n > 1 else 1\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lcm = math.lcm(2, n)\n    for n in range(2, lcm):\n        if n % lcm == 0:\n            return n\n    return lcm\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    divisors = []\n    for divisor in range(1, n // 2 + 1):\n        if n % divisor == 0:\n            divisors.append(divisor)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisors = []\n    for divisor in range(1,int(math.sqrt(n)) + 1):\n        if n % divisor == 0:\n            divisors.append(divisor)\n            if n // divisor > n:\n                n = n // divisor\n        else:\n            break\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_multiple(x):\n        if x % 5 == 0:\n            return True\n        return False\n    \n    max_divisor = 1\n    for d in range(1, int(n**0.5)+1):\n        if is_multiple(d):\n            if d ** 2 > n:\n                return d ** 2\n            elif d ** 2 < n:\n                return d ** 2\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==0:\n        return 1\n    elif n%2==0:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for div in range(2, n):\n        if n % div == 0:\n            return div\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    divisors = []\n    for x in range(1, n//2 + 1):\n        if n % x == 0:\n            divisors.append(x)\n    return max(divisors)"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 1:\n        raise ValueError('n must be positive')\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime = [2]\n    while n!= 1:\n        if n % prime[0] == 0:\n            prime.append(prime[0])\n            n = n // prime[0]\n        else:\n            prime.append(prime[-1])\n    return prime\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n_list = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            n_list.append(i)\n            if n//i == i:\n                n_list.append(n//i)\n    return n_list\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from functools import reduce\n    return reduce(lambda x, y: [x] * y, range(1, n+1))\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return []\n    elif n == 2 or n == 3:\n        return [2]\n    else:\n        return [i for i in range(1, n+1) if n%i == 0]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Factoring\n    factor_list = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factor_list.append(i)\n            factor_list.append(n // i)\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    from math import sqrt\n    \n    prime_factors = []\n    \n    for i in range(2, int(sqrt(n)+1)):\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    \n    if n > 1:\n        prime_factors.append(n)\n    \n    return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    \n    elif n == 2:\n        return [2]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Calculate primes up to and including the given number\n    prime_factors = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 0:\n        return []\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    prev = 0\n    for x in numbers:\n        if x!= prev:\n            result.append(x)\n            prev = x\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [n for n in numbers if numbers.count(n) > 1]\n    \ndef first_missing_positive(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    for num in numbers:\n        if num > 0:\n            return num\n    return 0\n    \ndef first_missing_positive_recursive(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive_recursive([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    if numbers[0] > 0:\n        return numbers[0]\n    elif len(numbers) == 1:\n        return 0\n    elif len(numbers) == 2:\n        return numbers[1] + 1\n    elif len(numbers) == 3:\n        return numbers[2] + 1\n    else:\n        return first_missing_positive_recursive(numbers[1:]) + 1\n    \ndef first_missing_positive_iterative(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive_iterative([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    for num in numbers:\n        if num > 0:\n            return num\n    return 0\n    \ndef first_missing_positive_binary_search(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive_binary_search([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return numbers[0] + 1\n    if len(numbers) == 3:\n        return numbers[1] + 1\n    if len(numbers) % 2 == 1:\n        return first_missing_positive_binary_search(numbers[1:]) + 1\n    else:\n        return first_missing_positive_binary_search([x + 1 for x in numbers[1:]]) + 1\n    \ndef first_missing_positive_recursive(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive_recursive([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    if numbers[0] > 0:\n        return numbers[0]\n    elif len(numbers) == 1:\n        return 0\n    elif len(numbers) == 2:\n        return numbers[1] + 1\n    elif len(numbers) == 3:\n        return numbers[2] + 1\n    else:\n        return first_missing_positive_recursive(numbers[1:]) + 1\n    \ndef first_missing_positive_binary_search(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, find the first positive integer that is not in the list.\n    >>> first_missing_positive_binary_search([-1, -2, 1, 3, 12])\n    12\n    \"\"\"\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return numbers[0] + 1\n    if len(numbers) == 3:\n        return numbers[1] + 1\n    if len(numbers) % 2 == 1:\n        return first_missing_positive_binary_search(numbers[1:]) + 1\n    else:\n        return first_missing_positive_binary_search([x + 1 for x in numbers[1:]]) + 1\n    \ndef generate_trick_numbers() -> List[int]:\n    \"\"\" From a list of integers, generate all distinct numbers which can be obtained from that list.\n    >>> generate_trick_numbers([1, 3, 4, -1, 2, -5])\n    [1, 2, 3, 4, 5"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Sorting the list in O(n log n) time.\n    numbers.sort()\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if the input is empty, or the list contains only one element, return an empty list\n    if len(numbers) == 0 or len(numbers) == 1:\n        return []\n    # first, get a copy of the original list\n    original = numbers.copy()\n    # second, remove all duplicates\n    duplicates = {}\n    for index, value in enumerate(original):\n        if value in duplicates and value!= duplicates[value]:\n            del original[index]\n        elif value not in duplicates:\n            duplicates[value] = index\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    for num in numbers:\n        if num not in output:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x for i, x in enumerate(numbers) if numbers.count(x) > 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    removed_elements = []\n    for element in numbers:\n        if element in removed_elements:\n            continue\n        else:\n            removed_elements.append(element)\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    from collections import Counter\n    result = []\n    c = Counter(numbers)\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers_dic = dict()\n    for i in numbers:\n        if i not in numbers_dic:\n            numbers_dic[i] = 0\n        numbers_dic[i] += 1\n    return [k for k in numbers_dic.keys() if numbers_dic[k] == 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [num for num, index in sorted(zip(numbers, range(len(numbers))), key=lambda pair: pair[1]) if index!= index]\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.lower().swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(map(lambda s: s.upper() if s.islower() else s.lower(), string)"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_str = ''\n    for i in string:\n        if i.islower():\n            new_str += i.upper()\n        else:\n            new_str += i.lower()\n    return new_str\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.upper()+string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = ''\n    for i in string:\n        if i.lower() == i:\n            res += i.upper()\n        else:\n            res += i.lower()\n    return res\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # this is not possible as upper case can be ignored in the flip function.\n    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: write a function that accepts a string and returns the flipped string.\n    return string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Solution:\n    return ''.join(list(map(lambda c: c.upper() if c.islower() else c.lower(), string.upper()))).rstrip("
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    string = ''\n    for s in strings:\n        string += s\n    return string\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # to do: make it easier to add all strings together and also convert the result into a single string\n    # can be done in one line but that's just too slow\n    # use a stack\n    # sort the list in ascending order\n    # return the stack after the first element\n    # concatenate(strings)\n    \n    return ''.join(strings).lstrip("
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    length = len(strings)\n    result = ''\n    for index, character in enumerate(strings):\n        if index < length - 1:\n            result += character +''\n        else:\n            result += character\n    return result.strip()\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    for s in strings:\n        if prefix in s:\n            res.append(s)\n    return res\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    filtered = []\n    for string in strings:\n        if prefix in string:\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if prefix not in strings:\n        return strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if prefix:\n        return [s for s in strings if s.startswith(prefix)]\n    return strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not prefix:\n        return strings\n    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [s for s in strings if s[:len(prefix)] == prefix]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    output = []\n    for num in l:\n        if num > 0:\n            output.append(num)\n    return output\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    return [x for x in l if x>0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [num for num in l if num >= 0]"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in l if x>0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    negatives = list(map(lambda x: -x, l))\n    return negatives\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here.\n    if n < 2:\n        return False\n    if n in primes:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in primes:\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # number is prime: 2 < sqrt(n) < n\n    for x in range(2, int(math.sqrt(n))+1):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==1:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n==4:\n        return True\n    if n%2==0:\n        return False\n    if n==7:\n        return True\n    if n%3==0:\n        return False\n    if n==8:\n        return True\n    if n%5==0:\n        return False\n    return False\n    raise NotImplementedError\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n<=0:\n        return False\n    if n==1 or n==2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\n    \ndef test(word):\n    if is_prime(len(word))==True:\n        print(word)\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    is_prime = True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 2 or n == 3: return True\n    if n < 2 or n % 2 == 0: return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n==0 or n==1:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = 0\n    for x in xs:\n        if not x % 2:\n            x *= 2\n            continue\n        if x!= 0:\n            x *= -1\n            break\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(xs) % 2 == 0:\n        return poly(xs[::2], xs[1::2])\n    else:\n        return sum(\n            [\n                coeff * find_zero(xs[:i]) + (coeff * find_zero(xs[i:]))\n                for i, coeff in enumerate(xs[:-1])\n            ]\n        )\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(xs) * find_zero(xs[1:])\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(xs) == 0:\n        return 0.0\n    if len(xs) % 2 == 0:\n        return -(xs[0] / (poly(xs[:-1], xs[0]) + xs[1]))\n    else:\n        return -((xs[0] / (poly(xs[:-1], xs[0]) + xs[1]))) + xs[1]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = 0\n    for i in xs:\n        if i!= 0:\n            x += i\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return xs[i]\n    return 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return max([poly(xs, i) for i in xs]) / poly(xs, max([poly(xs, i) for i in xs])).pow(2)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    p = len(xs)\n    is_zero = False\n    if p % 2 == 0:\n        is_zero = True\n        for i in range(p // 2):\n            if not xs[i] % 2:\n                is_zero = False\n                break\n    return xs[0] if not is_zero else -xs[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = [i for i, coeff in enumerate(xs) if coeff!= 0]\n    return max(l)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    xs = [x / (len(xs) - 1) for x in xs]\n    max_num = -1\n    i = 0\n    while i < len(xs):\n        if max_num < xs[i]:\n            max_num = xs[i]\n        i += 1\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    l_new = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] % 3!= 0 and l[j] % 3 == 0:\n                l_new.append(l[i])\n                l_new.append(l[j])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #TODO\n    l1 = []\n    l2 = []\n    l3 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        elif i % 3 == 1:\n            l2.append(l[i])\n        else:\n            l3.append(l[i])\n    return sorted(l1) + l2 + l3\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    for i in range(len(l)-3):\n        if l[i]%3 == 0:\n            for j in range(i+1, len(l)):\n                if l[j]%3 == 0:\n                    l[j], l[i] = l[i], l[j]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = sorted(l)\n    for i in range(len(l)):\n        if l[i]%3 == 0:\n            l[i] = l[i]//3\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(l)):\n        if (l[i] % 3 == 0) and (l[i] not in result):\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sorted_l = []\n    divisibles = []\n    for i in range(len(l)):\n        if l[i]%3==0:\n            divisibles.append(l[i])\n    \n    for i in range(len(divisibles)):\n        for j in range(len(l)):\n            if l[j]%3==0:\n                sorted_l.append(divisibles[i])\n                divisibles[i] = l[j]\n                break\n    return sorted_l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(l, key=lambda x: x % 3)\n    \n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    li = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            li.append(l[i])\n    return l"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(l, key=lambda x: x % 3)\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(dict.fromkeys(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = list(set(l))\n    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Why is this necessary?\n    # http://stackoverflow.com/a/10783683/4217628\n    # need to keep track of how many unique elements\n    if len(l) == 0:\n        return []\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = set(l)\n    return sorted(l)\n    \ndef evens(l: list):\n    \"\"\"Return list of even numbers in a list\n    >>> evens([1, 2, 3, 4, 5])\n    [1, 3, 5]\n    >>> evens([1, 2, 3, 4])\n    [1, 2, 4]\n    >>> evens([0, 1, 2, 3, 4, 5])\n    [0, 1, 2, 3, 4]\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n    \ndef count_by_range(l: list, start: int, end: int) -> int:\n    \"\"\"Return the count of distinct elements in a list\n    >>> count_by_range([1, 2, 3, 4, 5], 1, 5)\n    3\n    >>> count_by_range([1, 2, 3, 4, 5], 1, 6)\n    0\n    >>> count_by_range([1, 2, 3, 4, 5], 1, 7)\n    0\n    >>> count_by_range([1, 2, 3, 4, 5], 1, 8)\n    0\n    >>> count_by_range([1, 2, 3, 4, 5], 2, 8)\n    0\n    \"\"\"\n    return len(set(l[start:end]))\n    \ndef reverse_by_range(l: list, start: int, end: int) -> list:\n    \"\"\"Return list of reversed elements of a list\n    >>> reverse_by_range([1, 2, 3, 4, 5], 1, 5)\n    [5, 4, 3, 2, 1]\n    >>> reverse_by_range([1, 2, 3, 4, 5], 1, 6)\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    return l[end:] + l[:start]\n    \ndef rotate(l: list, n: int) -> list:\n    \"\"\"Return a rotated version of a list\n    >>> rotate([1, 2, 3, 4], 2)\n    [4, 3, 2, 1]\n    >>> rotate([1, 2, 3, 4], 1)\n    [4, 3, 1, 2]\n    >>> rotate([1, 2, 3, 4], -1)\n    [1, 2, 3, 4]\n    \"\"\"\n    return l[n:] + l[:-n]\n    \ndef bfs(start: int, target: int) -> list:\n    \"\"\"Return list of all the elements from a given vertex\n    >>> bfs(0, 1)\n    [1]\n    >>> bfs(1, 2)\n    [2, 3]\n    >>> bfs(2, 3)\n    [3, 2, 1]\n    >>> bfs(3, 2)\n    [2, 3, 1]\n    >>> bfs(0, 0)\n    []\n    \"\"\"\n    q = [start]\n    visited = [start]\n    while q:\n        u = q.pop(0)\n        if u == target:\n            return visited\n        visited.append(u)\n        for i in lst[u]:\n            if i not in visited:\n                q.append(i)\n                visited.append(i)\n    return []\n    \ndef dfs(start: int, target: int) -> list:\n    \"\"\"Return list of all the elements from a given vertex\n    >>> dfs(0, 1)\n    [1]\n    >>> dfs(1, 2)\n    [2, 3]\n    >>> dfs(2, 3)\n    [3, 2, 1]\n    >>> dfs(0, 0)\n    []\n    \"\"\"\n    q = [start]\n    visited = [start]\n    while q:\n        u = q.pop(0)\n        if u == target:\n            return visited\n        visited.append(u)\n        for i in lst[u]:\n            if i not in visited:\n                q.append(i)\n                visited.append(i)\n    return []\n    \ndef dfs_stack(start: int, target: int) -> list:\n    \"\"\"Return list of all the elements from a given vertex\n    >>> dfs_stack(0, 1)\n    [1]\n    >>> dfs_stack(1, 2)\n    [2"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    min_value = l[0]\n    max_value = l[0]\n    for value in l:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return max(l)\n    \ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n    \ndef sum_elements(l: list):\n    \"\"\"Return sum of all elements of the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    45\n    \"\"\"\n    return sum(l)\n    \ndef avg_elements(l: list):\n    \"\"\"Return average of all elements of the list.\n    >>> avg_elements([1, 2, 3])\n    2.5\n    >>> avg_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    25.0\n    \"\"\"\n    return sum(l)/len(l)\n    \ndef count_elements(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_elements([1, 2, 3])\n    3\n    >>> count_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"\n    return len(l)\n    \ndef count_odd_elements(l: list):\n    \"\"\"Return number of odd elements of the list.\n    >>> count_odd_elements([1, 2, 3])\n    1\n    >>> count_odd_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    6\n    \"\"\"\n    return sum(filter(lambda x: x%2!= 0, l))\n    \ndef count_even_elements(l: list):\n    \"\"\"Return number of even elements of the list.\n    >>> count_even_elements([1, 2, 3])\n    2\n    >>> count_even_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    8\n    \"\"\"\n    return sum(filter(lambda x: x%2 == 0, l))\n    \ndef count_even_element(l: list):\n    \"\"\"Return number of even elements of the list.\n    >>> count_even_element([1, 2, 3])\n    0\n    >>> count_even_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    return sum(filter(lambda x: x%2 == 0, l))\n    \ndef count_balanced_elements(l: list):\n    \"\"\"Return number of elements whose values are balanced.\n    >>> count_balanced_elements([1, 2, 3])\n    1\n    >>> count_balanced_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    if sum(filter(lambda x: l.count(x) > 1, l)) == len(l):\n        return 1\n    else:\n        return 0\n    \ndef count_balanced_element(l: list):\n    \"\"\"Return number of balanced elements of the list.\n    >>> count_balanced_element([1, 2, 3])\n    0\n    >>> count_balanced_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2\n    \"\"\"\n    return sum(filter(lambda x: l.count(x) > 1, l))\n    \ndef find_element(l: list, element: int):\n    \"\"\"Return index of element.\n    >>> find_element([1, 2, 3], 3)\n    0\n    >>> find_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -1)\n    3\n    \"\"\"\n    return l.index(element)\n    \ndef remove_element(l: list, element: int):\n    \"\"\"Remove element from the list.\n    >>> remov"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_value = 0\n    for item in l:\n        if max_value < item:\n            max_value = item\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 0\n    j = len(l) - 1\n    while i < j:\n        # First: use the l[i] and l[j] to calculate the maximum element\n        # This element is in the left subtree, so it will be taken\n        # (l[i],l[j] = l[i],l[j]\n        # print(l[i], l[j])\n        if l[i] < l[j]:\n            # l[i],l[j] = l[j],l[i]\n            i += 1\n            j -= 1\n        elif l[i] > l[j]:\n            # l[i],l[j] = l[j],l[i]\n            i -= 1\n    return l[i]\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 5 == 0 and n % 3 == 0 and n % 11 == 0:\n        return 1\n    if n % 5 == 0 and n % 3 == 0 and n % 11 == 0:\n        return 2\n    if n % 5 == 0 and n % 3 == 0 and n % 11 == 0:\n        return 3\n    if n % 5 == 0 and n % 3 == 0 and n % 11 == 0:\n        return 4\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 7 == 0:\n        return 0\n    elif n % 3 == 0:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 7:\n        return 0\n    return 1 if n % 11 == 0 and n % 13 == 0 else 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n % 11 == 0:\n        return 0\n    elif n % 11 % 13 == 0:\n        return 1\n    else:\n        return n % 11 or n % 13 or 2\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num = 0\n    if n % 10 == 7:\n        num += 1\n    elif n % 10 == 11 or n % 10 == 13:\n        num += 1\n    return num\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    pas"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    if n % 7 == 0:\n        count += 1\n    if n % 11 == 0:\n        count += 1\n    if n % 13 == 0:\n        count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def get_digit(n: int, d: int):\n        if n % d == 0:\n            return int(n / d)\n        else:\n            return int(n / d) + 1\n    count = 0\n    while n > 0:\n        if n % 10 == 7 or n % 13 == 11:\n            count += 1\n        else:\n            count = 0\n        n = get_digit(n, 7)\n        n = get_digit(n, 13)\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def count(num):\n        num = num // 10\n        while num % 3 == 0:\n            num = num // 10\n            if num % 3 == 0:\n                num = num // 10\n                if num % 3 == 0:\n                    num = num // 10\n                    if num % 3 == 0:\n                        num = num // 10\n                        if num % 3 == 0:\n                            num = num // 10\n                            if num % 3 == 0:\n                                num = num // 10\n                                if num % 3 == 0:\n                                    num = num // 10\n                                    if num % 3 == 0:\n                                        num = num // 10\n                                        if num % 3 == 0:\n                                            num = num // 10\n                                            if num % 3 == 0:\n                                                num = num // 10\n                                                if num % 3 == 0:\n                                                    num = num // 10\n                                                    if num % 3 == 0:\n                                                        num = num // 10\n                                                        if num % 3 == 0:\n                                                            num = num // 10\n                                                            if num % 3 == 0:\n                                                                num = num // 10\n                                                                if num % 3 == 0:\n                                                                        num = num // 10\n                                                                        if num % 3 == 0:\n                                                                            num = num // 10\n                                                                            if num % 3 == 0:\n                                                                                num = num // 10\n                                                                                if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 10\n                                                                                    if num % 3 == 0:\n                                                                                    num = num // 1"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if n is divisible by 3 then return 3, if n is divisible by 5 then return 5, if n is divisible by both 3 and 5 return 6.\n    # else return 0\n    def is_divisible_by_three(n: int) -> bool:\n        if n % 3 == 0 and n % 5 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return odd + sort_even(even)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    even_index = 0\n    odd_index = 0\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    \n    even.sort()\n    odd.sort()\n    \n    result = []\n    while even_index < len(even):\n        if even_index < len(even):\n            result.append(even[even_index])\n            even_index += 1\n        else:\n            break\n    if odd_index < len(odd):\n        result.append(odd[odd_index])\n        odd_index += 1\n    return result"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd = [l[i] for i in range(len(l)) if i % 2!= 0]\n    return sorted(even) + sorted(odd)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    return l + sorted(even_indices)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(l, key=lambda x: l.count(x), reverse=True)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [l[i] for i in range(0,len(l),2)"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return odd + even\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # \"1\" at the even indices: we always keep it, and then sort the list.\n    # \"3\" at the even indices: sort by the values of the odd indicies,\n    # and then the rest of the elements\n    even_indices = [x for x in range(len(l)) if x % 2 == 0]\n    even_values = [l[x] for x in even_indices]\n    return sorted(even_values) + sorted(l)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    evens = []\n    odds = []\n    l = list(l)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            evens.append(l[i])\n        else:\n            odds.append(l[i])\n    return [evens, odds]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_ind = [i for i in range(len(l)-1, -1, -1) if l[i] % 2 == 0]\n    even_ind = [i for i in range(len(l)) if l[i] % 2 == 1]\n    return odd_ind + even_ind\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle up element of each group.\n    for group in groups:\n        group.append(group.pop(0))\n    # encode the result.\n    result = \"\".join(group)\n    return result\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s[1:-1]"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove last group if it has fewer than 3 elements.\n    if len(groups[-1]) <= 3:\n        groups.pop()\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # loop through group. If group is of length 3, don't decode.\n    for group in groups:\n        if len(group) < 3:\n            continue\n        # print(\"group\", group)\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        # if len(group[2]) < 3:\n        #     continue\n        # print(\"group[0]\", group[0])\n        # print(\"group[1]\", group[1])\n        # print(\"group[2]\", group[2])\n        # print(\"len(group)\", len(group))\n        # if len(group[0]) < 3:\n        #     continue\n        # if len(group[1]) < 3:\n        #     continue\n        "
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups[::-1])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = n + 1\n    a = 0\n    b = 1\n    if n == 1 or n == 2:\n        return 2\n    else:\n        for i in range(3, n+1):\n            c = a+b\n            if c % i == 0:\n                a = b\n                b = c\n            else:\n                a = b\n    return a\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n > 3:\n        if n%2 == 0:\n            return prime_fib(n-1)\n        else:\n            return prime_fib(n-1)+prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            continue\n        else:\n            a = prime_fib(i)\n            b = prime_fib(i+1)\n            yield a+b"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 1\n    while True:\n        if (n % i) == 0:\n            return i\n        else:\n            i += 1\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_fib_cache = {}\n    prime_fib_cache[0] = 1\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Initiate a variable to store the value\n    a = 0\n    # Iterate from 2 to n\n    for i in range(2, n):\n        # If it's not a prime fibonacci number then it's not a prime fibonacci number\n        if i < 3:\n            pass\n        # Else it's a prime fibonacci number\n        else:\n            # The value of a is the sum of the two previous value.\n            a = (a + i)\n    # Return the value of a\n    return a"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    a, b = 0, 1\n    while a <= n:\n        a, b = b, a+b\n        if b == n:\n            return b\n    return \"No prime\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = 2\n    b = 0\n    while a <= n:\n        b += a\n        a = prime_fib(a+1)\n    return b"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = [0] * len(l)\n    for i in l:\n        if x[i] == 0:\n            return False\n        else:\n            x[i] = 1\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    cnt = 0\n    for i in l:\n        if i > 0:\n            cnt += 1\n    if cnt > 2:\n        return False\n    else:\n        return True"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in l:\n        if i!= 0 and i!= 1:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    result = False\n    for item in l:\n        if abs(item) == 1:\n            result = True\n    return result\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 3:\n        return False\n    elif len(l) == 2:\n        return False if l[0] + l[1] == 0 else True\n    elif len(l) == 1:\n        return False if l[0] == 0 else True\n    else:\n        return False if l[0] + l[1] == 0 else True if triples_sum_to_zero(l[2:]) else False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"\"\"\n    TRY HANDLING THE LIST OF NUMBERS IN A LISTS OF INTEGERS\n    THIS SEEMS TO BE UNSURE HOW ALL NUMBERS ARE EQUAL TO 0\n    \"\"\"\n    # for each number in the list, we have to find the sum of all numbers\n    # that are divisible by that number, then compare the result to 0\n    # if this is the case, then return True\n    # return False if the result is not equal to 0\n    # return False if this is the case, and the result is 0\n    # return False if this is not the case\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    a,b,c = l\n    if a+b==c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # initialize empty triple_set, which keeps track of each unique triple\n    triple_set = set()\n    # iterate over all elements in the list\n    for i in l:\n        # check if i is a triple and it's a triple_set\n        if (type(i) is int) and (type(i) is not list):\n            # add it to the triple_set\n            triple_set.add(i)\n    # if the triple_set is empty, then the list is not a triple\n    if len(triple_set) == 0:\n        return False\n    # if the list is not empty, then we return True\n    return len(triple_set)!= 3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # First, we'll generate a list of collisions, where each car is a list of the\n    # positions of the other cars.\n    other_cars = []\n    for car in cars:\n        # We want to find all the car positions that are part of the other cars'\n        # trajectory.  Here, we're going to look at each position in the list of\n        # other cars's positions.\n        for position in car:\n            if position not in other_cars:\n                other_cars.append(position)\n    # Now, we'll iterate through each car's trajectory, and see if it's a car\n    # that's moving left or right.  If it is, we'll increment the number of\n    # collisions by 1.\n    collisions = 0\n    for car in cars:\n        if car_race_direction(car) == \"l\":\n            # cars are moving left\n            for other_position in other_cars:\n                if (other_position[0] - car[0])*(other_position[0]-car[0]) \\\n                >= 0:\n                    collisions += 1\n        else:\n            # cars are moving right\n            for other_position in other_cars:\n                if (car[0] - other_position[0])*(other_position[0]-car[0]) \\\n                <= 0:\n                    collisions += 1\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Create a list of distances between the cars.\n    distances = [0.0] * n\n    # Set up a for loop to iterate over the distance list.\n    for i in range(len(distances)):\n        # The car that's moving right to left will have a greater distance to the car that's moving left to right.\n        if i == 0:\n            distances[i] = 1.0\n        # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n        elif i == 1:\n            distances[i] = 0.0\n        else:\n            # The car that's moving right to left will have a smaller distance to the car that's moving right to left.\n            distances[i] = abs(distances[i-1])\n    \n    # Compute the number of collisions.\n    return sum(distances)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # check if there are enough cars in the intersection\n    if(len(cars_in_intersection) < n):\n        # if not, then return zero\n        return 0\n    \n    # check if there are enough cars to make each set of cars.\n    # if not, then return zero\n    if(len(cars_in_intersection) < n/2):\n        # if not, then return zero\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    cnt = 0\n    for i in range(n):\n        for j in range(i, n):\n            # If a car's distance from the other cars is less than their distance from the car in the same direction\n            # Then they are colliding, and a car has a car that is moving right to left, and another car\n            # that is moving left to right.\n            if car_distance_from_car(j, i, direction_of_collision) < car_distance_from_car(i, j, direction_of_collision):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(1 for _ in range(n) if _.collision())\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # do 1 pass through the entire matrix\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert n > 0\n    # Find the distance to the left of the road\n    right_to_left: List[float] = []\n    for i in range(n):\n        left_to_right = (i+1)*100\n        if n - i - 1 == i:\n            right_to_left.append(left_to_right)\n        else:\n            right_to_left.append(0)\n    print(f\"Collision count: {len(right_to_left)}\")\n    return len(right_to_left)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # The car's speed is \"m\", a speed of \"kms/h\"\n    # The car's speed is \"m/s\", a speed of \"km/h\"\n    # The car's speed is \"mph\", a speed of \"mph\"\n    # The car's speed is \"km/h\", a speed of \"km/hr\"\n    # The car's speed is \"mph/h\", a speed of \"mph/hr\"\n    # The car's speed is \"km/h/s\", a speed of \"km/hr/s\"\n    # The car's speed is \"mph/h/s\", a speed of \"mph/hr/s\"\n    # The car's speed is \"km/h/s2\", a speed of \"km/hr/s2\"\n    # The car's speed is \"mph/h/s2\", a speed of \"mph/hr/s2\"\n    # The car's speed is \"km/h/s3\", a speed of \"km/hr/s3\"\n    # The car's speed is \"mph/h/s3\", a speed of \"mph/hr/s3\"\n    # The car's speed is \"km/h/s4\", a speed of \"km/hr/s4\"\n    # The car's speed is \"mph/h/s4\", a speed of \"mph/hr/s4\"\n    # The car's speed is \"km/h/s5\", a speed of \"km/hr/s5\"\n    # The car's speed is \"mph/h/s5\", a speed of \"mph/hr/s5\"\n    # The car's speed is \"km/h/s6\", a speed of \"km/hr/s6\"\n    # The car's speed is \"mph/h/s6\", a speed of \"mph/hr/s6\"\n    # The car's speed is \"km/h/s7\", a speed of \"km/hr/s7\"\n    # The car's speed is \"mph/h/s7\", a speed of \"mph/hr/s7\"\n    # The car's speed is \"km/h/s8\", a speed of \"km/hr/s8\"\n    # The car's speed is \"mph/h/s8\", a speed of \"mph/hr/s8\"\n    # The car's speed is \"km/h/s9\", a speed of \"km/hr/s9\"\n    # The car's speed is \"mph/h/s9\", a speed of \"mph/hr/s9\"\n    # The car's speed is \"km/h/s10\", a speed of \"km/hr/s10\"\n    # The car's speed is \"mph/h/s10\", a speed of \"mph/hr/s10\"\n    # The car's speed is \"km/h/s11\", a speed of \"km/hr/s11\"\n    # The car's speed is \"mph/h/s11\", a speed of \"mph/hr/s11\"\n    # The car's speed is \"km/h/s12\", a speed of \"km/hr/s12\"\n    # The car's speed is \"mph/h/s12\", a speed of \"mph/hr/s12\"\n    # The car's speed is \"km/h/s13\", a speed of \"km/hr/s13\"\n    # The car's speed is \"mph/h/s13\", a speed of \"mph/hr/s13\"\n    # The car's speed is \"km/h/s14\", a speed of \"km/hr/s14\"\n    # The car's speed is \"mph/h/s14\", a speed of \"mph/hr/s14\"\n    # The car's speed is \"km/h/s15\", a speed of \"km/hr/s15\"\n    # The car's speed is \"mph/h/s15\", a speed of \"mph/hr/s15\"\n    # The car's speed is \"km/h/s16\", a speed of \"km/hr/s16\"\n    # The car's speed is \"mph/h/s16\", a speed of \"mph/hr/s16\"\n    # The car's speed is \"km/h/s17\", a speed of \"km/hr/s17\"\n    # The car's speed is \"mph/h/s17\", a speed of \"mph/hr/s17\"\n    # The car's speed is \"km"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = n\n    t = 1\n    while True:\n        if t > n:\n            return 0\n        if s == n:\n            return t\n        t += 1\n        if t >= s:\n            return t\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        i+=1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = l + [i + 1 for i in l]\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for x in l:\n        x = x + 1\n        l.append(x)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l.append(l[-1] + 1)\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_list = []\n    for item in l:\n        new_list.append(item + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \"\"\"\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return True\n    elif l[0]!= l[1] and l[0]!= l[0] + l[1]:\n        return False\n    else:\n        return pairs_sum_to_zero(l[1:])\n    \"\"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    for i in range(len(l)-1):\n        for j in range(len(l)-1):\n            if l[i]!= l[j] and l[i] == l[j]!= 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count_1 = 0\n    count_2 = 0\n    for i in l:\n        count_1 += i\n        count_2 += i + 1\n    if count_1 == count_2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        if l[i]!= 0:\n            if i == 0 or l[i - 1]!= l[i]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = set(l)\n    if len(s) < 2:\n        return False\n    return not l.count(min(l)) and not l.count(max(l))\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"\n    Initialize a dictionary containing the pairs of integers with their sums and\n    its corresponding value.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    True\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for x in l:\n        if x in d:\n            d[x] += x\n        else:\n            d[x] = x\n    return d == {}"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = 0\n    for i in l:\n        s += i\n    if s == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j] == s:\n                return True\n    return False\ndef parrot(str):\n    return 'parrot(' + str + ')'\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] == l[j]:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for num in l:\n        if num == 0:\n            continue\n        elif num == 1:\n            return True\n        elif num == -1:\n            return False\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x*(base**(len(str(x))))).zfill(len(str(base)))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x >= base:\n        return str(x//base)\n    else:\n        x -= x*base\n        return str(x//base) + str(x%base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return str(x // base) + (base - x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = x % base\n    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return chr(x + ord('0'))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a=str(x)\n    if base == 2:\n        if len(a) == 1:\n            return '0'+a\n        else:\n            return a[0] + a[1]\n    elif base == 3:\n        if len(a) == 1:\n            return '1'+a\n        else:\n            return a[0]+a[1]+a[2]\n    elif base == 4:\n        if len(a) == 1:\n            return '4'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]\n    elif base == 5:\n        if len(a) == 1:\n            return '5'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]\n    elif base == 6:\n        if len(a) == 1:\n            return '6'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]\n    elif base == 7:\n        if len(a) == 1:\n            return '7'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]\n    elif base == 8:\n        if len(a) == 1:\n            return '8'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]\n    elif base == 9:\n        if len(a) == 1:\n            return '9'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]\n    else:\n        return 'ERROR'\ndef binary(x: int):\n    \"\"\"Change binary number of input number x to its base 2 representation.\n    return string representation after the conversion.\n    >>> binary(8)\n    '0001'\n    >>> binary(0)\n    '0'\n    >>> binary(1)\n    '1'\n    >>> binary(2)\n    '11'\n    \"\"\"\n    a = str(x)\n    if base == 2:\n        if len(a) == 1:\n            return '0'+a\n        else:\n            return a[0]+a[1]+a[2]\n    elif base == 3:\n        if len(a) == 1:\n            return '1'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]\n    elif base == 4:\n        if len(a) == 1:\n            return '2'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]\n    elif base == 5:\n        if len(a) == 1:\n            return '3'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]\n    elif base == 6:\n        if len(a) == 1:\n            return '4'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]\n    elif base == 7:\n        if len(a) == 1:\n            return '5'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]\n    elif base == 8:\n        if len(a) == 1:\n            return '6'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]\n    elif base == 9:\n        if len(a) == 1:\n            return '7'+a\n        else:\n            return a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]+a[8]+a[9]\n    else"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return str(x) + str(base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 1\n    j = 0\n    while x!= 0:\n        i = x // 10 ** (j)\n        x = x % 10\n        j += 1\n    return i\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = str(x)\n    return x[0] * (base - int(x[1])) + x[2:]\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if base == 10:\n        return x\n    elif base == 2:\n        return str(x)\n    else:\n        return x%base\ndef greatest_number(x: int, y: int, z: int):\n    \"\"\"Returns the greatest number between x and y and z.\n    return string representation after the conversion.\n    greatest numbers are greater than 2,000,000\n    >>> greatest_number(10, 22, 100)\n    '22'\n    >>> greatest_number(10, 10, 100)\n    '100'\n    >>> greatest_number(50, 3, 100)\n    '50'\n    \"\"\"\n    if y == 0:\n        return greatest_number(x, z, y)\n    elif y == 1:\n        return change_base(x, y)\n    else:\n        return change_base(x, z) + greatest_number(x, y-1, z)\ndef remove_duplicates(L: list) -> list:\n    \"\"\"Returns a new list with only the elements of the list that are duplicates.\n    >>> remove_duplicates([1,1,2,3,4,4])\n    [1, 2, 3]\n    >>> remove_duplicates([1,2,3,3,1,2,3,3,1,2,3])\n    [1, 2, 3]\n    >>> remove_duplicates([1,2,3,3,1,2,3,3,1,2,3])\n    [1, 2, 3, 3]\n    \"\"\"\n    return [i for i in L if L.count(i)>1]\ndef prime_factors(n: int) -> list:\n    \"\"\"Returns a list of prime factors of n.\n    >>> prime_factors(120)\n    [2, 3, 5, 7, 11]\n    >>> prime_factors(15)\n    [3, 5]\n    \"\"\"\n    n = abs(n)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                break\n        else:\n            return [n]\n    return prime_factors(n//2) + prime_factors(n//2)\ndef count_elements_of_list(L: list) -> int:\n    \"\"\"Returns the count of elements in the list.\n    >>> count_elements_of_list([1,1,2,3,4,1,2,3,4,1])\n    6\n    >>> count_elements_of_list([])\n    0\n    >>> count_elements_of_list([1])\n    1\n    >>> count_elements_of_list([1,1,2,3,4,1,2,3,4,1])\n    6\n    \"\"\"\n    total = 0\n    for i in range(len(L)):\n        total += L.count(L[i])\n    return total\ndef merge_sort(L: list):\n    \"\"\"Returns a new sorted list.\n    >>> merge_sort([1,2,3,4,5,6])\n    [1, 2, 3, 4, 5, 6]\n    >>> merge_sort([1,2,3,4,5,6,7,8,9,10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> merge_sort([])\n    []\n    >>> merge_sort([1,2,3,4,5,6,7,8,9,10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    if len(L) <= 1:\n        return L\n    mid = len(L)//2\n    left = merge_sort(L[:mid])\n    right = merge_sort(L[mid:])\n    return merge(left, right)\ndef merge(L: list, R: list):\n    \"\"\"Returns a new sorted list.\n    >>> merge([1,2,3,4,5,6], [7,8,9,10])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    area = (3 * (h/2)) * (a + (h/2)) * (a + (h/2))\n    return area"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = float(a)\n    h = float(h)\n    return a*(h/2)**2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if a < 0:\n        raise ValueError('a must be positive.')\n    elif h <= 0:\n        raise ValueError('h must be positive.')\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) is not int or a <= 0:\n        raise TypeError(\"a must be a positive integer\")\n    if type(h) is not int or h < 0:\n        raise TypeError(\"h must be a positive integer\")\n    if a < 0:\n        raise ValueError(\"a must be >= 0\")\n    return (a * (a + h)) / 2"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (a*h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return.5 * (a ** 2) * h\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return h * h / 2\n    \ndef surface_area(A, B, C):\n    \"\"\"Returns surface area for triangle A, B, C.\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (a*(a+h))/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a > h:\n        return \"Too big for a triangle.\"\n    if h == 0 or a == 0:\n        return 0\n    if a == h:\n        return h**2\n    return (3*a*h)/2\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==0 or n==1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Fill the list with None values\n    l.append(None)\n    \n    # Sort the list so that each value is in order\n    sorted_list = sorted(l)\n    \n    # Number of elements in the list\n    count = len(l)\n    \n    # Find the middle index\n    mid_index = count // 2\n    \n    # Return the median\n    return sorted_list[mid_index]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length//2] + l[length//2-1]) / 2\n    else:\n        return l[length//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = len(l)\n    if s % 2 == 0:\n        return (l[s // 2] + l[s // 2 - 1]) / 2\n    else:\n        return l[s // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    import math\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return (l[n//2] + l[n//2 - 1])/2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(l)\n    if n == 0:\n        return 0\n    else:\n        if n % 2 == 1:\n            return l[n//2]\n        else:\n            mid = n//2\n            return (l[mid-1] + l[mid])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not l:\n        return None\n    sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 1:\n        return sorted_l[int(len(sorted_l)/2)]\n    else:\n        return (sorted_l[int(len(sorted_l)/2)] + sorted_l[int(len(sorted_l)/2) - 1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l_len = len(l)\n    if l_len == 0:\n        return None\n    if l_len % 2 == 0:\n        return (l[l_len//2] + l[l_len//2 - 1]) / 2\n    else:\n        return l[l_len//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2-1]) / 2\n    else:\n        return l[n//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return statistics.median(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0]\n    mid = len(l)//2\n    return (l[mid-1] + l[mid])/2\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = text.lower()\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start]!= text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    str_len = len(text)\n    for i in range(str_len):\n        if text[i]!= text[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Since our input string is already lower case, we can compare it to itself\n    text = text.lower()\n    length = len(text)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = str.lower(text)\n    text = ''.join(text.split())\n    text = text.replace(' ', '')\n    text = text.replace('-', '')\n    text = text.replace('.', '')\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if text == text[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    str_check = []\n    for i in text:\n        if i not in str_check:\n            str_check.append(i)\n    return str_check == str_check[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = text.lower()\n    s = s.replace(',',' ').replace('.',' ').replace('!','')\n    return s == s[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % p!= 0:\n        return 0\n    else:\n        return pow(n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < p:\n        return pow(n, p-2, p)\n    else:\n        return pow(n, n%p, p)\n    \ndef modp_q(n: int, q: int):\n    \"\"\"Return 2^n modulo q (be aware of numerics).\n    >>> modp_q(3, 5)\n    3\n    >>> modp_q(1101, 101)\n    2\n    >>> modp_q(0, 101)\n    1\n    >>> modp_q(3, 11)\n    8\n    >>> modp_q(100, 101)\n    1\n    \"\"\"\n    if n < q:\n        return pow(n, q-2, q)\n    else:\n        return pow(n, n%q, q)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return pow(n, p-2, p)\n    \ndef add(n: int, a: int, n: int):\n    \"\"\"Return n + a modulo p (be aware of numerics).\n    >>> add(3, 4, 5)\n    6\n    >>> add(10, 2, 5)\n    8\n    >>> add(4, 8, 9)\n    12\n    >>> add(2, 4, 9)\n    8\n    \"\"\"\n    return n + modp(a, n)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert p >= 1\n    assert n >= 1\n    x, y = pow(n, p - 1, p)\n    return x % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = 1\n    m = 10**9 + 7\n    for i in range(n):\n        s = (s * m) % p\n        m = (m * m) % p\n    return s\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    pass\n    # raise NotImplementedError\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    return (p - 1) % n\n    "
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    assert p >= 1, \"p must be >= 1\"\n    p = p << 1\n    q = n\n    while q >= p:\n        q &= p - q\n        p = p << 1\n    return p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return pow(n, p, modp(p, p))\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = 0\n    while n >= p:\n        r = n % p\n        s = s + r*p\n        n = n // p\n    return s\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((26 - (ord(ch) + 5 - ord(\"a\"))) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 26) % 26) - ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # VOWELS = 'aeiouAEIOU'\n    VOWELS = \"aeiouAEIOU\"\n    text = text.upper()\n    final = []\n    for i in text:\n        if i in VOWELS:\n            final.append(i)\n    return \"\".join(final)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = \"aeiouAEIOU\"\n    text_list = text.split()\n    remove_list = []\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Remove vowels from the string\n    vowels = set('aeiouAEIOU')\n    vowels_removed = vowels.difference(set(text))\n    new_text = ''\n    for char in text:\n        if char not in vowels_removed:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    vowels = 'aeiou'\n    vowels_count = 0\n    for char in text:\n        if char not in vowels:\n            vowels_count += 1\n    new_text = ''\n    if vowels_count == len(text):\n        return new_text\n    else:\n        for char in text:\n            if char in vowels:\n                new_text += char\n        return new_text\n    "
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join([c for c in text if not c in vowels]"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] in vowels_set:\n            text = text[:i] + text[i+1:]\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return re.sub('[a-zA-Z]+', '', text)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Your code here\n    # raise NotImplementedError\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    result = []\n    for letter in text:\n        if letter not in vowels:\n            result.append(letter)\n    return ''.join(result)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = set('aeiouAEIOU')\n    text = list(text)\n    new_text = []\n    for element in text:\n        if element in vowels:\n            new_text.append(element)\n        else:\n            new_text.append('')\n    return ''.join(new_text)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return Tru"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for value in l:\n        if value < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(l) == len(set(l)) < t\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(l) <= t\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # (int) -> bool\n    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(l) <= t\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x += y\n    return x\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    3\n    \"\"\"\n    return x - y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x * y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    1.0\n    >>> divide(5, 7)\n    2.0\n    \"\"\"\n    return x / y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0 == s1 and s0[0] == s1[0] and same_chars(s0[1:], s1[1:])\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s0_lower, s1_lower = s0.lower(), s1.lower()\n    return s0_lower == s1_lower\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return s0.replace(s1, '') == s1.replace(s0, '')\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (s0 == s1) == (len(s0) == len(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return s0[0] == s1[0] and len(s0) > len(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s0 = list(s0)\n    s1 = list(s1)\n    if s0 == s1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(s0) == len(s1) and s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # initialize\n    s0_len = len(s0)\n    s1_len = len(s1)\n    indexes = [-1] * s0_len\n    i = 0\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n    \ndef primes_below(n: int) -> list:\n    \"\"\"Return a list of the primes below n.\n    >>> primes_below(10)\n    [2, 3, 5, 7]\n    \"\"\"\n    l = []\n    for x in range(2, n + 1):\n        if fib(x) > n:\n            l.append(x)\n    return l\n    \ndef primes_up_to(n: int) -> list:\n    \"\"\"Return a list of the primes below n.\n    >>> primes_up_to(10)\n    [2, 3, 5, 7]\n    \"\"\"\n    l = []\n    for x in range(2, n + 1):\n        if fib(x) < n:\n            l.append(x)\n    return l\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert 0 <= n < 11\n    if n==1 or n==2:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a,b = 1,1\n    for _ in range(n-2):\n        a,b = b, a+b\n    return "
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    pass"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    correct = True\n    for bracket in brackets:\n        if bracket!= \">\" and bracket!= \"<\":\n            correct = False\n    return correct\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for char in brackets:\n        if char == '<':\n            continue\n        if char == '>':\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    brackets = list(brackets)\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\" and brackets[i+1] == \">\":\n            return True\n        elif bracket == \">\" and brackets[i+1] == \"<\":\n            return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    brackets = re.split(r'([<>])', brackets)\n    for i in range(len(brackets)):\n        if brackets[i] in [\"<\", \">\", \"<>\"]:\n            if brackets[i - 1] == \"<\":\n                brackets[i - 1] = \">\"\n            if brackets[i + 1] == \"<\":\n                brackets[i + 1] = \">\"\n    return \"\".join(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_open(brackets: str) -> bool:\n        return brackets[0] == \"<\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for char in brackets:\n        if char not in [\"<\", \">\"]:\n            return False\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(c in ['<', '>'] for c in brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all(map(lambda brackets: brackets[0] in {\"<\", \">\"} and all(map(lambda x: x in brackets[1:], brackets[1:-1].split(\",\"))), brackets.split(\"<\")))"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Check that all numbers are in the list\n    for element in l:\n        if element < 0:\n            return False\n        elif element > 0:\n            return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def _is_monotonic(a):\n        return a[0] <= a[1] and a[2] >= a[3]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # O(n)\n    # return all values are monotonic\n    if len(l) <= 1:\n        return True\n    # O(1)\n    # use binary search\n    left = 0\n    right = len(l) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if l[mid] <= l[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left < right\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not l:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not l:\n        return False\n    else:\n        return (l[-1] > l[0] and monotonic(l[:-1])) or monotonic(l[1:])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (l[-1] == l[0])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    d = []\n    for num in l:\n        if num not in d:\n            d.append(num)\n            if len(d) == 2:\n                return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not l:\n        return False\n    return (l[0] > l[-1]) or (l[0] > l[-1] > l[-2])\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = {}\n    for item in l1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # set from sets\n    common_set = set()\n    # set from dict\n    set_d = set(l1)\n    # set from tuple\n    set_t = set(l2)\n    common_set.update(set_d)\n    common_set.update(set_t)\n    return list(common_set)"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return l1[i:] + l2[j:]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return sorted(set(l1 + l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l2.sort()\n    res = []\n    i = 0\n    while i < len(l1):\n        if l1[i] not in l2:\n            res.append(l1[i])\n            i += 1\n        else:\n            j = l2.index(l1[i])\n            l2[j] = l2[j]\n            del l2[j]\n            i += 1\n    return res\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x for x in l1 if x in l2]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for element in l1:\n        if element in l2:\n            l2.remove(element)\n        else:\n            continue\n    return l2"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l2_len = len(l2)\n    l1_len = len(l1)\n    if l2_len!= l1_len:\n        raise ValueError(\"l2 must be the same length as l1\")\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n > 2:\n        for i in range(2, n):\n            if n % i == 0:\n                return i\n    return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime_factors = prime_factors_below_k(n)\n    return max(prime_factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = abs(n)\n    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            n /= i\n            break\n    else:\n        return n\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 2\n    while i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def recursive_prime_factor(num: int):\n        if num <= 1:\n            return 0\n        if num % 2 == 0:\n            return 1\n        res = recursive_prime_factor(num//2)\n        res = min(res, (num-1)//num)\n        return res\n    factor = 1\n    while n % factor == 0:\n        factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_factor = 2\n    while n % prime_factor == 0:\n        prime_factor += 1\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = n\n    i = 0\n    while (a % 2 == 0):\n        a = a / 2\n        i += 1\n    for b in range(3, int(a**.5), 2):\n        if (a % b) == 0:\n            i += 1\n            while (a % b) == 0:\n                a = a / b\n                i += 1\n    if (i == 2):\n        return a\n    else:\n        return None\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factor = 1\n    while factor <= n:\n        if n % factor == 0:\n            return factor\n        factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    \n    # Avoid overflow\n    if n == 1:\n        return 1\n    \n    # Check if prime\n    if n % 2 == 0:\n        return 1\n    \n    # Check if n is a prime\n    for p in prime:\n        if n % p == 0:\n            return p\n    \n    return 1\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return n * (n + 1) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    result = 1\n    for i in range(1, n+1):\n        result += i\n    return result\n    \n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    while n > 0:\n        result += n%10\n        n = n//10\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n*(n+1)//2\n    #return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #return n*(n+1)//2\n    return n*(n+1)//2\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: complete this function\n    # TODO: modify the code so that it returns the sum of all numbers from 1 to n\n    return sum(range(n))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(range(1,n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total = 1\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(range(1, n + 1)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    brackets = list(brackets)\n    if len(brackets)!= 1:\n        return False\n    for i in brackets:\n        if i!= \")\":\n            return False\n        if i!= \")\":\n            return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for bracket in brackets:\n        if bracket in {\"(\",\"(\",\")\",\"[\",\"]\",\"{\",\"}\",\"[\",\"]\",\"{\",\"}\",\":\",\"(\",\")\",\"(\",\"]\"}:\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bracket_count = {\"(\":\")\", \")\":\"(\", \")\":\"(\", \"}\":\"{\", \"}\":\"{\", \"}\":\"}\"}\n    res = []\n    for i in brackets:\n        if i in bracket_count:\n            res.append(bracket_count[i])\n    return not res\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if brackets == \"\":\n        return True\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            if count == 0:\n                return False\n            count -= 1\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    bracket_stack = []\n    for char in brackets:\n        if char == \"(\":\n            bracket_stack.append(char)\n        elif char == \")\":\n            if len(bracket_stack) == 0:\n                return False\n            last_char = bracket_stack[-1]\n            if last_char == \"(\":\n                return False\n            else:\n                bracket_stack.pop()\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(0, len(brackets)):\n        if brackets[i] == \"(\" or brackets[i] == \")\":\n            if brackets[i + 1] == \")\":\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    ch = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            ch.append(brackets[i])\n        elif brackets[i] == ')':\n            if ch:\n                if ch[-1] == '(':\n                    return False\n                ch.pop()\n    return not ch\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket not in [\"(\", \")\"]:\n            return False\n        if bracket == \")\":\n            if bracket_stack and bracket_stack[-1] == '(':\n                bracket_stack.pop()\n            else:\n                return False\n        elif bracket == \")\":\n            if bracket_stack and bracket_stack[-1] == \"(\":\n                bracket_stack.pop()\n            else:\n                return False\n    if bracket_stack:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in brackets:\n        if i == '(':\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len([idx for idx, c in enumerate(brackets) if c == \"(\"]) == len([idx for idx, c in enumerate(brackets) if c == \")\"])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [1] + [xs[i] * xs[i+1] for i in range(len(xs)-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (xs[1:] - xs[:-1])/xs[1]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    xs = list(map(lambda x: x[1:], xs))\n    return list(map(lambda x: x[0] + x[1] * x[0] + x[2] * x[1] * x[0] ** 2, xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x[1] for x in reversed(xs)]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    deriv = [1]\n    for i in xs:\n        deriv.append(deriv[-1] * i)\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # xs is a list of numbers\n    # return a list of polynomial values\n    if xs == []:\n        return []\n    derivative = [1]\n    for x in xs:\n        derivative = [derivative[i] + x*derivative[i+1] for i in range(len(derivative)-1)]\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    i = 0\n    while i < len(xs):\n        res.append(xs[i])\n        i += 1\n    return res\n    \ndef make_roots(poly: list):\n    \"\"\" return a list of roots in the form of coefficients of a polynomial.\n    poly = [(3, 1, 0, 0, -1), (2, 1, 0, 0, -2), (4, 1, 0, 0, -4)]\n    res = [3, 1, 0, 0, 0, 0, 0, -1, 0, -2, -4]\n    Return list of roots in the form of coefficients of a polynomial.\n    \"\"\"\n    roots = []\n    i = 0\n    while i < len(poly):\n        if i == 0:\n            roots.append(poly[i])\n        else:\n            roots.append(derivative(poly[i-1]))\n        i += 1\n    return roots\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # xs[0] + xs[1] * x + xs[2] * x^2 +...\n    return [xs[0] + xs[1] * x + xs[2] * x**2 for x in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for x in xs:\n        result.append(x)\n        result.append(x*x)\n        result.append(x*x*x)\n        result.append(x*x*x*x)\n        result.append(x*x*x*x*x)\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x[1] for x in reversed(xs)]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return fib(n) + fib(n-1) + fib(n-2) + fib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #Initialize the result to be 0\n    result = 0\n    #Iterate until we find the result\n    while result!= n:\n        #Compute the next value\n        result = fibfib(result+1)\n    #Return result\n    return result\n    "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def dfs(i, f):\n        if i == n:\n            return f\n        return dfs(i+1, f+f[i])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a, b, c, d = 0, 1, 1, 0\n    while n!= 0:\n        a, b, c, d = b, c, d, a+b+c+d\n        n = n - 1\n    return c\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    if s == \"\":\n        return 0\n    else:\n        return sum(c in vowels for c in s)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for letter in s:\n        if letter == 'y':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels_dict = {\"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0}\n    for char in s:\n        if char in \"aeiou\":\n            vowels_dict[char] += 1\n    return vowels_dict[\"y\"]\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowel = 'a', 'e', 'i', 'o', 'u'\n    count = 0\n    for c in s:\n        if c in vowel:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouyAEIOUY':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for vowel in s:\n        if vowel == \"y\":\n            total += 1\n        else:\n            total += 0\n    return total\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = set('AEIOU')\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for x in s:\n        if x in 'aeiou':\n            result += 1\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    # count_vowels = 0\n    count_vowels = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        return str(x)[len(str(x)):]\n    if shift < 0:\n        return str(x)[:len(str(x))-shift] + str(x)[shift:]\n    return str(x)[:len(str(x))-shift] + str(x)[shift:]\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift >= len(x):\n        return x\n    else:\n        return str(x) + str(circular_shift(x, shift + 1))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert 0 <= shift < len(x), \"shift must be between 0 and number of digits\"\n    assert len(x) == len(shift), \"number of digits must be equal to number of digits after shift\"\n    return \"\".join([str(int(x[i]) + shift) if i < len(x) - 1 else x[i] for i in range(len(x))])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num = str(x)\n    return num[shift:] + num[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if shift > len(x):\n        return x\n    else:\n        return \"\".join([str(int(i) + shift) for i in x])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert 0 <= shift <= len(str(len(str(x))))\n    shifted = str(x)[:-shift]\n    if shift == len(str(len(str(x))))-1:\n        return str(len(str(x))) + str(shifted)\n    else:\n        return str(shifted) + str(len(str(x)))\ndef split_numbers(number):\n    \"\"\"Split the given number in the correct parts.\n    >>> split_numbers(36)\n    (36, '2', '3', '4', '6', '7')\n    \"\"\"\n    assert number >= 0\n    parts = []\n    for digit in str(number):\n        parts.append(digit)\n        if len(parts) == 3:\n            parts.pop()\n            parts.append(' ')\n    return tuple(parts)\ndef add_numbers(a, b):\n    \"\"\"Add two numbers.\n    >>> add_numbers(0, 1)\n    1\n    >>> add_numbers(1, 1)\n    1\n    \"\"\"\n    assert 0 <= a < b\n    return a + b\ndef is_prime(n):\n    \"\"\"Returns True if n is prime.\n    >>> is_prime(0)\n    True\n    >>> is_prime(1)\n    False\n    \"\"\"\n    assert n >= 0\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\ndef get_next_prime(num):\n    \"\"\"Returns the next prime number greater than the given number.\n    >>> get_next_prime(3)\n    5\n    >>> get_next_prime(6)\n    9\n    \"\"\"\n    assert num >= 0\n    if num == 1:\n        return 2\n    elif num == 2:\n        return 3\n    elif num == 3:\n        return 5\n    elif num == 4:\n        return 7\n    elif num == 5:\n        return 11\n    else:\n        for i in range(7, 1, -1):\n            if is_prime(i):\n                break\n        return i\ndef print_prime(num):\n    \"\"\"Prints the prime numbers from the given number.\n    >>> print_prime(3)\n    3\n    \"\"\"\n    assert num >= 0\n    if num == 1:\n        print('1')\n    elif num == 2:\n        print('2')\n    elif num == 3:\n        print('3')\n    elif num == 4:\n        print('4')\n    elif num == 5:\n        print('5')\n    elif num == 6:\n        print('6')\n    else:\n        for i in range(7, 1, -1):\n            if is_prime(i):\n                break\n        print(i)\ndef prime_factors(num):\n    \"\"\"Returns all the factors of the given number.\n    >>> prime_factors(12)\n    (1, 2, 3, 12)\n    >>> prime_factors(15)\n    (1, 3, 5, 15)\n    \"\"\"\n    assert num >= 0\n    if num == 1:\n        return (1,)\n    elif num == 2:\n        return (2,)\n    elif num == 3:\n        return (3,)\n    else:\n        for i in range(4, 1, -1):\n            if is_prime(i):\n                break\n        return (i,)\ndef is_palindrome(number):\n    \"\"\"Returns whether a given number is palindrome.\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(42)\n    False\n    \"\"\"\n    assert number >= 0\n    rev_num = len(str(number))\n    if number == 0:\n        return True\n    if number == 1:\n        return False\n    if number == 2:\n        return True\n    if number == 3:\n        return False\n    if number % 2 == 0:\n        if rev_num % 2 == 0:\n            return True\n        else:\n            return False\n    if number % 2 == 1:"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join(map(str, x[-shift:] + x[:-shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    shift = abs(shift)\n    if shift > len(x):\n        return x\n    return x[-shift:] + x[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if shift > len(x):\n        shift = 0\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x[shift:]\n    elif shift < len(x):\n        return x[:shift] + x[shift:]\n    return x\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum([ord(c)-ord('a') for c in s if c.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([ord(i) for i in s if i.isprintable()])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(ord(c) for c in s.upper())"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    digitSum = 0\n    for i in s:\n        if i.isupper():\n            digitSum += int(i)\n    return digitSum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Get input string\n    t = s.replace(\" \", \"\")\n    # Get char in string\n    digit = 0\n    # Iterate through string\n    for i in range(len(t)):\n        # Check if current index is valid\n        if t[i].isnumeric():\n            # Increment digit\n            digit += int(t[i])\n        # If not, then add it\n        else:\n            # Add to the sum\n            digit += ord(t[i]) - ord('A')\n    # Return sum\n    return digit\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(ord(ch) for ch in s)"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(s)!= str:\n        return 0\n    if s == \"\":\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # TODO: Write your solution here\n    sum=0\n    for char in s:\n        sum+=ord(char)\n    return sum\n    \n    \n    "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(n):\n            if s[j] =='m' and s[i] == 'a':\n                count = count + 1\n            if s[j] == 'o' and s[i] == 'n':\n                count = count + 1\n            if s[j] == 'g' and s[i] =='m':\n                count = count + 1\n            if s[j] == 'a' and s[i] == 'g':\n                count = count + 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code here\n    if s == \"0\":\n        return 0\n    if s == \"1\":\n        return 1\n    if s == \"2\":\n        return 2\n    if s == \"3\":\n        return 3\n    if s == \"4\":\n        return 4\n    if s == \"5\":\n        return 5\n    if s == \"6\":\n        return 6\n    if s == \"7\":\n        return 7\n    if s == \"8\":\n        return 8\n    if s == \"9\":\n        return 9\n    if s == \"10\":\n        return 10\n    if s == \"11\":\n        return 11\n    if s == \"12\":\n        return 12\n    if s == \"13\":\n        return 13\n    if s == \"14\":\n        return 14\n    if s == \"15\":\n        return 15\n    if s == \"16\":\n        return 16\n    if s == \"17\":\n        return 17\n    if s == \"18\":\n        return 18\n    if s == \"19\":\n        return 19\n    if s == \"20\":\n        return 20\n    if s == \"21\":\n        return 21\n    if s == \"22\":\n        return 22\n    if s == \"23\":\n        return 23\n    if s == \"24\":\n        return 24\n    if s == \"25\":\n        return 25\n    if s == \"26\":\n        return 26\n    if s == \"27\":\n        return 27\n    if s == \"28\":\n        return 28\n    if s == \"29\":\n        return 29\n    if s == \"30\":\n        return 30\n    if s == \"31\":\n        return 31\n    if s == \"32\":\n        return 32\n    if s == \"33\":\n        return 33\n    if s == \"34\":\n        return 34\n    if s == \"35\":\n        return 35\n    if s == \"36\":\n        return 36\n    if s == \"37\":\n        return 37\n    if s == \"38\":\n        return 38\n    if s == \"39\":\n        return 39\n    if s == \"40\":\n        return 40\n    if s == \"41\":\n        return 41\n    if s == \"42\":\n        return 42\n    if s == \"43\":\n        return 43\n    if s == \"44\":\n        return 44\n    if s == \"45\":\n        return 45\n    if s == \"46\":\n        return 46\n    if s == \"47\":\n        return 47\n    if s == \"48\":\n        return 48\n    if s == \"49\":\n        return 49\n    if s == \"50\":\n        return 50\n    if s == \"51\":\n        return 51\n    if s == \"52\":\n        return 52\n    if s == \"53\":\n        return 53\n    if s == \"54\":\n        return 54\n    if s == \"55\":\n        return 55\n    if s == \"56\":\n        return 56\n    if s == \"57\":\n        return 57\n    if s == \"58\":\n        return 58\n    if s == \"59\":\n        return 59\n    if s == \"60\":\n        return 60\n    if s == \"61\":\n        return 61\n    if s == \"62\":\n        return 62\n    if s == \"63\":\n        return 63\n    if s == \"64\":\n        return 64\n    if s == \"65\":\n        return 65\n    if s == \"66\":\n        return 66\n    if s == \"67\":\n        return 67\n    if s == \"68\":\n        return 68\n    if s == \"69\":\n        return 69\n    if s == \"70\":\n        return 70\n    if s == \"71\":\n        return 71\n    if s == \"72\":\n        return 72\n    if s == \"73\":\n        return 73\n    if s == \"74\":\n        return 74\n    if s == \"75\":\n        return 75\n    if s == \"76\":\n        return 76\n    if s == \"77\":\n        return 77\n    if s == \"78\":\n        return 78\n    if s == \"79\":\n        return 79\n    if s == \"80\":\n        return 80\n    if s == \"81\":\n        return 81\n    if s == \"82\":\n        return 82\n    if s == \"83\":\n        return 83\n    if s == \"84\":\n        retur"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import collections\n    fruit_dic = collections.Counter(s)\n    result = 0\n    for key, value in fruit_dic.items():\n        if key == '0':\n            result = result + value\n        elif key == '1':\n            result = result + value\n        else:\n            result = result + value\n    return result\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #your code here\n    if s == \"\":\n        return 0\n    for i in s:\n        if i == \"m\":\n            return 8\n        if i == \"n\":\n            return 2\n    if s[0] == \"r\" or s[0] == \"e\":\n        return 2\n    if s[0] == \"g\":\n        return 3\n    return 0\n    \ndef fruit_distribution_recursive(s,n):\n    if s == \"\":\n        return 0\n    if s[0] == \"m\":\n        return 8\n    if s[0] == \"n\":\n        return 2\n    if s[0] == \"r\":\n        return 2\n    if s[0] == \"g\":\n        return 3\n    return 0\n    \ndef solution(s, n):\n    \"\"\"\n    We have two basic strategies:\n    1. recursive \n    2. using a stack (when n < 10, the stack will always be len(s) - 1)\n    \"\"\"\n    if s == \"\":\n        return 0\n    if len(s) == n:\n        return 1\n    if len(s) < n:\n        return 0\n    s += \"r\"\n    count = 1\n    stack = []\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == \"r\":\n            if i == len(s) - 1:\n                stack.append(count)\n                break\n            else:\n                count += 1\n                stack.append(count)\n                i -= 1\n        else:\n            count += 1\n    return len(stack)\n    \ndef solution2(s, n):\n    if s == \"\":\n        return 0\n    if len(s) == n:\n        return 1\n    if len(s) < n:\n        return 0\n    s = s + \"n\"\n    stack = [len(s) - 1]\n    i = len(s) - 1\n    count = 1\n    while True:\n        if s[i] == \"n\":\n            if i == len(s) - 1:\n                stack.append(count)\n                break\n            else:\n                count += 1\n                stack.append(count)\n                i -= 1\n        else:\n            count += 1\n    return len(stack)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    \n    \n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fruit_distribution(\"{} apples and {} oranges\".format(n,n),n-1)+fruit_distribution(\"{} apples and {} oranges\".format(n,n),n-1)+fruit_distribution(\"{} oranges and {} apples\".format(n,n),n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count=0\n    if(n<=0):\n        return 0\n    if(s.lower()==\"apple\"):\n        count+=1\n    if(s.lower()==\"orange\"):\n        count+=1\n    if(s.lower()==\"mango\"):\n        count+=1\n    return count\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    apples = 0\n    oranges = 0\n    nums = [0]*n\n    for i in s:\n        if i == 'a':\n            apples += 1\n        elif i == 'o':\n            oranges += 1\n        else:\n            nums[int(i)-1] += 1\n    return nums[0] - nums[1] - nums[2] - nums[3]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            sum += int(s[i])\n    sum = sum - s.count(\"apple\") - s.count(\"orange\")\n    sum = sum - s.count(\"mango\")\n    return sum\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(s)-fruit_dict[s[n]]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    \n    res = 0\n    for fruit in s:\n        if fruit == 'a' or fruit == 'p' or fruit == 'i' or fruit == 'r':\n            res += 1\n    return res"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Step 1: find the smallest even value\n    # Use a dictionary to map the values with index\n    \n    min_val = sys.maxsize\n    index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            # if this is the smallest value\n            if min_val > value / 2:\n                min_val = value / 2\n                index = index\n            \n    return [min_val, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if not arr:\n        return []\n        \n    arr_sorted = sorted(arr)\n    \n    for value in arr_sorted:\n        \n        if value % 2 == 0:\n            return [arr.index(value), arr.index(value + 1)]\n    \n    return arr\n    \ndef brute(arr):\n    \"\"\"\n    Find the largest value in the given array, that is, the largest value which is evenly divisible by 2.\n    In case of a division, you will be lucky if you pick the value equal to the index of the largest\n    value, this will make the algorithm run in linear time.\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # find the first non-zero node that has even index, else return empty array\n    if len(arr) == 0:\n        return []\n    idx = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            idx = i\n            break\n    \n    if arr[idx] % 2 == 0:\n        return [arr[idx], idx]\n    \n    return [arr[idx], idx]\n    \n    # if the tree has no odd numbered nodes, then return the node with smallest index\n    # else we go one by one, then find the smallest even value with every iteration,\n    # to find the last node with the smallest even value.\n    # return the index of the smallest even valu"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Solution: Binary search\n    \n    smallest_val = 0\n    index = 0\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n    \n    # initialize the largest even node and its index\n    # the index will be -1 if the array is empty\n    largest = -1\n    current_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i!= 0 and arr[i]!= arr[i-1]:\n            largest = arr[i-1]\n            current_index = i\n    if largest == 0:\n        return arr[0:current_index]\n    else:\n        return [largest, current_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda num: num % 2)[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here.\n    if not arr:\n        return []\n    nodes = []\n    smallest = arr[0]\n    smallest_index = 0\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest > val//2:\n                smallest = val//2\n                smallest_index = i\n            nodes.append(val)\n        else:\n            nodes.append(val)\n    return nodes[smallest_index], smallest_index\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    even_numbers = list(filter(lambda x: x % 2 == 0, arr))\n    if len(even_numbers) == 0:\n        return []\n    else:\n        result = even_numbers[-1]\n        for i in range(0, len(even_numbers) - 1, 2):\n            if result == 0:\n                return even_numbers[i:i + 2]\n            else:\n                result = result // 2\n        return [result, -1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [arr[0], min(idx for idx, val in enumerate(arr) if val % 2 == 0)]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_val = int(max(arr))\n    # \u65b0\u5efa\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684list\uff0c\u4e3a\u5b57\u5178\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2alist\n    # \u8fd9\u662f\u56e0\u4e3a\u5217\u8868\u7684\u503c\u53ea\u67090\u548c1\n    # \u6bd4\u8f83\u4e0b\u9762\u7684\u6570\u5b57\uff0c\u5230\u6700\u540e\u8ba1\u7b97max_index, \u56e0\u4e3a0\u548c1\u7684\u6700\u5c0f\u503c\u88ab\u8986\u76d6\u4e86\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u5b57\u7684\u5c0f\u6570\u4f4d\u6570\u4e0d\u53d8\n    min_val = 0\n    res = []\n    for val in arr:\n        min_val = min(val, min_val)\n        # \u5982\u679cval\u548cmin_val\u90fd\u5927\u4e8e0\uff0c\u5219\u53d6\u5230val\u7684\u4f4d\u6570\uff0c\u5c0f\u4e8e0\uff0c\u5c06val\u7684\u4f4d\u6570\u548cmin_val\u76f8\u7b49\n        if val >= 0:\n            res.append(val)\n        else:\n            # \u5982\u679c\u662f-1\uff0c\u8bf4\u660e\u662f\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u8981\u53d6\u51fa0\u548c1\n            min_val -= 1\n            if min_val == 0:\n                res.append(1)\n                min_val = 1\n            else:\n                # \u627e\u5230-1\uff0c\u5219\u53d6\u52300\u7684\u4f4d\u6570\u548c1\u7684\u4f4d\u6570\uff0c\u76f8\u7b49\n                res.append(min_val)\n    return res\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    min = lst[0]\n    for i in range(len(lst)):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # please see https://leetcode.com/discuss/interview-question/91683/39ms-and-14ms-solution-in-python\n    \n    min_val = lst[0]\n    \n    for i in lst:\n        if i < min_val:\n            min_val = i\n    \n    return min_val\n    \n    \n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for num in lst:\n        if num <= 0:\n            return -1\n        else:\n            if num <= num_max:\n                return num\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort() # new sort\n    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)\n    return len(new_lst) - 1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    # finding the best element\n    for i in range(len(lst)):\n        if lst[i] <= 0:\n            lst[i] = -1\n            break\n    return max(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_lst = []\n    for i in lst:\n        if i>=0:\n            new_lst.append(i)\n    new_lst.sort()\n    max = 0\n    for i in new_lst:\n        if i>max:\n            max = i\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst_sort = sorted(lst,reverse=True)\n    for i in lst_sort:\n        if lst.count(i) >= lst.count(i):\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return max(lst, key = lambda x: lst.count(x))\n    \n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Find the largest element in the list\n    max_val = lst[0]\n    \n    # Find the count of max_val\n    count = 0\n    \n    # Iterate over the list and find the count of max_val\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            count += 1\n            max_val = lst[i]\n    \n    # Return the count\n    return count\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    x = len(lst)\n    for i in range(1,x):\n        if lst[i] < lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        else:\n            break\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst==[]:\n        return lst\n    tmp = lst.pop(0)\n    result = strange_sort_list(lst)\n    result.append(tmp)\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #start with the minimum value\n    min_val = lst[0]\n    #arrange list in strange order\n    for i in range(len(lst)):\n        #to make sure we are not equal to min_val, only increase the value\n        if lst[i] < min_val:\n            min_val = lst[i]\n        #update the new minimum\n        lst[i] = min_val\n    #return the sorted list\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sort_list(lst):\n        '''\n        Sort list in strange order.\n        Use sorted() to change it.\n        If the list has a length, sort the list.\n        '''\n        # initialize a new list\n        sort_list = []\n        # if len(lst) == 0:\n        #     sort_list = []\n        # else:\n        #     temp = lst[0]\n        #     for i in lst[1:]:\n        #         if i < temp:\n        #             temp = i\n        #         sort_list.append(temp)\n        #     sort_list.append(temp)\n        #     sort_list.sort()\n        #     lst = sort_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort()\n    numbers = []\n    for i in lst:\n        numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    def sort_it(elements):\n        if len(elements) == 1:\n            return elements\n        else:\n            return sort_it(elements[:len(elements)//2]) + sort_it(elements[len(elements)//2:])\n    return sort_it(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return []\n    smallest = min(lst)\n    new_list = []\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            new_list.append(lst[i])\n        elif smallest == lst[i]:\n            new_list.append(lst[i])\n        else:\n            return new_list\n    return new_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    for i in range(len(lst)):\n        minimum = min(lst)\n        maximum = max(lst)\n        res.append((maximum, i, minimum))\n        lst.remove(minimum)\n    res.sort()\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def sort_list_iter(lst):\n        for i in lst:\n            yield (i, min(lst), max(lst))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Create empty sorted list\n    sorted_list = []\n    \n    # Insert first value\n    sorted_list.insert(0, lst[0])\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a + b >= c and b + c >= a and c + a >= b:\n        area = (a * b) / 2\n        if b == c or a == b or a == c:\n            area = -1\n        return area\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import math\n    \n    d = math.sqrt((b ** 2) + (c ** 2))\n    if d > c:\n        return -1\n    elif d == c:\n        return (a + b) / 2\n    elif d == a:\n        return math.sqrt((b ** 2) + (c ** 2))\n    elif d == b:\n        return math.sqrt((a ** 2) + (c ** 2))\n    elif d == a + c:\n        return (2 * (a + b) * (b - a)) / 3\n    elif d == a + b + c:\n        return (2 * (a + b) * (b - a) * (b - a)) / 3\n    elif d == a + b * b + c * c:\n        return (2 * (a + b) * (b - a) * (b - a) * (b - a) * (b - a)) / 3\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = (a + b + c) / 2\n    if (a > b and a > c):\n        result = (b + c) / 2\n    if (b > a and b > c):\n        result = (a + c) / 2\n    if (c > a and c > b):\n        result = (a + b) / 2\n    return result\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a == b and a == c:\n        return 0.0\n    if a + b == c or b + c == a or a == b == c:\n        return 0.0\n    if a*b!= c*d and d == c or c*d!= a*b and a!= c:\n        return 0.0\n    \n    if a*b > c*d:\n        return round(d * c / (a + b), 2)\n    else:\n        return round(d * a / (b + c), 2)\n    \n    \ndef square_root(a, b, c):\n    '''\n    Given the lengths of the sides of a square, return the square root of the\n    equation.\n    Example:\n    square_root(8, 2, 7) == 7.5\n    square_root(2, 6, 12) == 3.0\n    '''\n    if a == b and b == c:\n        return 0.0\n    if a == b or b == c or a == c == b:\n        return 0.0\n    if a*b == c*d and d == c or c*d!= a*b and d!= c:\n        return 0.0\n    \n    return round((a + b + c)/2.0, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_valid_triangle(a, b, c):\n        if (a < b) and (b < c) and (a < c):\n            return True\n        else:\n            return False\n    if (is_valid_triangle(a, b, c) == True):\n        if (a + b > c) and (a + c > b) and (b + c > a):\n            return ((a*b) + (c*b) + (c*a)) ** 0.5\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    if a + b > c and a + c > b and b + c > a:\n        return (b * c) / 2\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def f(n):\n        return(n * (n - 1) / 2)\n    if a == b and b == c:\n        return f(a)\n    if a!= b and b!= c:\n        if a + b > c and b + c > a:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > b:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > c:\n            return (f(b) + f(c)) / 2\n        else:\n            return -1\n    elif a == b == c:\n        if a + b > c and b + c > a:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > b:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > c:\n            return (f(b) + f(c)) / 2\n        else:\n            return -1\n    else:\n        if a + b > c and b + c > a:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > b:\n            return (f(a) + f(b)) / 2\n        elif a + b > c and a + c > c:\n            return (f(b) + f(c)) / 2\n        else:\n            return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if is_valid_triangle(a, b, c):\n        return round(Triangle.triangle_area(a, b, c), 2)\n    else:\n        return -1\n    # Write your code here.\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a < b and b < c:\n        if a+b+c > c+a+b:\n            area = (b*c)/2\n            return area\n        elif a+b+c == c+a+b:\n            area = (a*b)/2\n            return area\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a + b > c:\n        if a + c > b:\n            return (a * c) / 2\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(q)==q[-1] and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_weight(l):\n        if len(l) == 0:\n            return 0\n        weight = 0\n        for i in l:\n            weight += i\n        return weight\n    \n    def is_palindrome(l):\n        return all(l[i] == l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if q[0] == q[-1]:\n        return True\n    else:\n        for i in range(1,len(q)):\n            if q[i] == q[i-1] and will_it_fly(q[:i]+q[i+1:],w):\n                return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(q) == list:\n        q = [q]\n    if type(w) == int or type(w) == float:\n        return (w <= len(q)//2)\n    else:\n        return (w <= sum([i for i in q]) < w)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_palindrome(a, b):\n        while a < b:\n            if a % 2 == 0:\n                a //= 2\n            else:\n                a += 1\n            if b % 2 == 0:\n                b //= 2\n            else:\n                b += 1\n        return a == b\n    def is_valid(a, b):\n        return is_palindrome(a, b) and len(a) == len(b)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    is_balanced = is_palindrome(q)\n    if is_balanced:\n        n = len(q)\n        if n % 2 == 0:\n            return False\n        if (n/2) < w:\n            return False\n        s = 0\n        for i in range(n/2):\n            if w - q[i] < s:\n                return False\n            s += q[i]\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    '''\n    # Step 1: First find out how many elements in q and what their weights are.\n    # Step 2: Next, check if q is balanced.\n    # Step 3: Next, check if q can be split.\n    # Step 4: If there is no more weight, then the q can be split.\n    '''\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return True if is_palindrome(q) and sum(q) <= w else False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([i < 0 for i in q]) == (len(q)**2) and sum([i>= w for i in q]) <= (len(q)-1)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # a = q.copy()\n    # a = sorted(a)\n    # b = w\n    # res = False\n    # for i in range(len(a)):\n    #     b -= a[i]\n    #     if b == 0:\n    #         if a == a[::-1]:\n    #             res = True\n    #             break\n    # return res\n    return True if sum(q) < max(w) and q[0] + q[-1] <= w[0] + w[-1] else False\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Fill this in.\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i+1]:\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr: return 0\n    curr = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i]!= curr:\n            curr = arr[i]\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # find the minimum element to be changed\n    minimum = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < minimum:\n            minimum = arr[i]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(arr)\n    \n    if n <= 1:\n        return 0\n    \n    # Find the lowest index from left to right, starting with 0\n    left = 0\n    right = n - 1\n    \n    min_change = 0\n    \n    while left <= right:\n        \n        if arr[left]!= arr[right]:\n            break\n        \n        if arr[left] < arr[right]:\n            min_change += arr[left]\n            left += 1\n        else:\n            min_change += arr[right]\n            right -= 1\n    \n    return min_change"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) <= 1:\n        return arr[0]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr.reverse()\n    palin_len = len(arr)\n    for i in range(palin_len//2):\n        if arr[i]!= arr[i+1]:\n            return palin_len - i - 1\n    return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 0\n    length = len(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return min([len(arr[i:]) for i in range(len(arr)-1, -1, -1)])\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    d = dict()\n    for n in arr:\n        d[n] = d.get(n,0)+1\n    for n in d:\n        if n < n[::-1]:\n            d[n[::-1]] -= 1\n        if d[n] < 1:\n            return d[n]\n    return 0"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n    else:\n        return smallest_change(arr[1:len(arr)]) + smallest_change(arr[:len(arr) - 1]"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code here\n    total_list = []\n    if len(lst1) < len(lst2):\n        for word in lst1:\n            if len(word) < len(lst2[0]):\n                total_list.append(word)\n    else:\n        for word in lst2:\n            if len(word) < len(lst1[0]):\n                total_list.append(word)\n    return total_list"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get the first list\n    first_list = lst1.copy()\n    # get the second list\n    second_list = lst2.copy()\n    # get the number of chars in each list\n    number_of_chars = len(first_list[0])\n    # return the number of chars in the other list, if the number of chars is the same\n    # then return the first list\n    if number_of_chars == len(second_list):\n        return first_list\n    elif number_of_chars > len(second_list):\n        # return the first list\n        return first_list\n    # else return the second list\n    return second_list\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return lst1+lst2\n    \ndef substring_match(s1, s2):\n    '''\n    Write a function that accepts two strings s1 and s2 and returns a list of all \n    substrings that are present in both s1 and s2.\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return lst1 + lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # my_list1 = list(lst1)\n    # my_list2 = list(lst2)\n    # for item in my_list1:\n    #     if len(item) < len(my_list2):\n    #         my_list2.remove(item)\n    #         my_list1.append(item)\n    # return my_list1 + my_list2\n    return [item for item in lst1 if len(item) < len(lst2)] + [item for item in lst2 if len(item) < len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for item in lst1:\n        if len(item) < len(lst2):\n            result.append(item)\n        else:\n            result.append(lst2[len(item)-len(lst1)])\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return lst1[:len(lst2)]\n    \nprint(total_match([], [1,2,3,4]))\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst1) == len(lst2):\n        return sorted(lst1 + lst2)\n    else:\n        return []\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    elif len(lst2) < len(lst1):\n        return lst2\n    return lst1 + lst2[:len(lst2) - len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # write your code here\n    # lst1, lst2 = [], []\n    # if len(lst1) == len(lst2):\n    #     return lst1\n    # else:\n    #     return lst2\n    # if len(lst1) == len(lst2):\n    #     return lst1\n    # else:\n    #     return lst2\n    return (\n        [\n            number\n            for number in set(lst1) - set(lst2)\n            if lst1.count(number) == lst2.count(number)\n        ]\n    )\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a <= 100:\n        if a%3 == 0 or a%5 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from itertools import combinations\n    multi_set = list(combinations(range(10), 3))\n    print(multi_set)\n    return a in multi_set\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    for i in range(2, 100):\n        if (a % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # base case\n    if a == 1 or a == 3:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # iterate over all numbers\n    # in decreasing order:\n    # 2 + 3 + 5 = 10\n    # 3 + 5 + 10 = 15\n    # 5 + 10 = 15\n    # 5 + 15 = 20\n    # so 10 * 10 * 15 = 40\n    #\n    # so, a * a = a * a * a = a * a * a\n    #\n    # A = 3, B = 5, C = 15 = 5 * 5 * 15 = 40\n    #\n    # The smallest possible product = C * B * A * A = C * B * A * A\n    #\n    # 4 * 5 = 10\n    # 10 * 5 = 50\n    # 50 * 5 = 100\n    # 100 * 5 = 500\n    #\n    # So, 4 * 10 = 40, which is the smallest possible product\n    #\n    #\n    # iterate over a to find the smallest product of all three numbers\n    #\n    # # for i in range(a + 1, a * a + 1):\n    # #     i = i / a\n    # #     if (i * i) % a == 0:\n    # #         continue\n    # #     else:\n    # #         return False\n    #\n    # # for j in range(a + 1, a * a + 1):\n    # #     j = j / a\n    # #     if (j * j) % a == 0:\n    # #         continue\n    # #     else:\n    # #         return False\n    #\n    # #     for k in range(j + 1, a * a + 1):\n    # #         k = k / a\n    # #         if (k * k) % a == 0:\n    # #             continue\n    # #         else:\n    # #             return False\n    # # return True\n    #\n    # # for i in range(a * 2 + 1, a * a + 1):\n    # #     i = i / a\n    # #     if (i * i) % a == 0:\n    # #         continue\n    # #     else:\n    # #         return False\n    #\n    # #     for j in range(i * 2 + 1, a * a + 1):\n    # #         j = j / a\n    # #         if (j * j) % a == 0:\n    # #             continue\n    # #         else:\n    # #             return False\n    # # return True\n    #\n    # # for i in range(a * 2, a * a + 1):\n    # #     i = i / a\n    # #     if (i * i) % a == 0:\n    # #         continue\n    # #     else:\n    # #         return False\n    # # return True\n    #\n    # # while a:\n    # #     a //= 2\n    # # return True\n    #\n    # #\n    # # def is_multiply_prime(num):\n    # #     if num < 0:\n    # #         return False\n    # #     if num == 1:\n    # #         return True\n    # #     if num == 2:\n    # #         return True\n    # #     for i in range(3, num):\n    # #         if num % i == 0:\n    # #             return False\n    # #     return True\n    #\n    # #\n    # #\n    # # def test_is_multiply_prime(test_num):\n    # #     for i in range(1, test_num):\n    # #         if is_multiply_prime(i):\n    # #             print(f\"{i} is a prime number\")\n    # #         else:\n    # #             print(f\"{i} is not a prime number\")\n    # #\n    # #\n    # # if __name__ == '__main__':\n    # #     test_is_multiply_prime(400)\n    # #     test_is_multiply_prime(500)\n    # #     test_is_multiply_prime(100)\n    # #     test_is_multiply_prime(5)\n    # #     test_is_multiply_prime(10)\n    # #     test_is_multiply_prime(15)\n    # #     test_is_multiply_prim"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    print(f\"is_multiply_prime({a})\" in locals())\n    if a < 100:\n        return False\n    if a % 3 == 0 or a % 5 == 0:\n        return False\n    for i in range(a, 100):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for a1 in range(2, 100):\n        for a2 in range(3, a1 + 1):\n            if a2 == a1 * a2:\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a < 100:\n        return False\n    if a % 3 == 0:\n        return True\n    elif a % 3 == 1:\n        return False\n    elif a % 3 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(3,int(math.sqrt(a) + 1)):\n        if a % i == 0:\n            return False\n    return True\ndef main():\n    \"\"\"\n    A list of all prime numbers between 2 and 100 is generated using the following method:\n    Generate the primes from 2 to 100 inclusive.\n    If a number is divisible by any prime number between 2 and 100, then it is not prime.\n    Example:\n    a = 10\n    b = 10\n    c = 10\n    Number of primes is (b * c * a)\n    \"\"\"\n    primes = []\n    for i in range(2,100):\n        if is_multiply_prime(i):\n            primes.append(i)\n    print(primes)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here.\n    for i in range(2, 100):\n        if (a % i == 0):\n            return False\n        elif (a % i == 1):\n            return True\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return n**0.5 == x\n    if n == 3:\n        return n**0.5 == x**0.5\n    if n > 3:\n        return is_simple_power(x, n-3) and is_simple_power(x**2, n-2) and is_simple_power(x**3, n-1)\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return n**int(x)=="
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = int(x)\n    n = int(n)\n    if (n == 1 or n == 2) and x == n**int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    try:\n        if n<=1:\n            return True\n        if n<=5:\n            return True\n        if n<=10:\n            return True\n        if n<=100:\n            return True\n        if n<=1000:\n            return False\n        if n<=10000:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return True if x == 2 else False\n    if n == 3:\n        return True if x == 3 else False\n    if n == 4:\n        return True if x == 4 else False\n    if n == 5:\n        return True if x == 5 else False\n    if n % 2 == 0 and x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return int(n)**int(n)==x\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if n == 1:\n        return True\n    if n == 2:\n        return n==1\n    if n%2 == 0:\n        return False\n    if is_simple_power(x, n//2):\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n-2)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return True\n    if n == 1:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n > 1 and n%2 == 0:\n        return is_simple_power(x, n//2) and is_simple_power(x, n-1)\n    elif n > 1 and n%2!= 0:\n        return is_simple_power(x, n//2) and is_simple_power(x, n-1) and is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2) and is_simple_power(x, n-1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if isinstance(x, int) and n == 1:\n        return True\n    elif n == 1:\n        return False\n    elif is_simple_power(x // n, n):\n        return True\n    else:\n        return is_simple_power(x // n, n-1)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a <= 0:\n        return False\n    if a % 3 == 0:\n        return True\n    if a % 3 == 1:\n        return False\n    if a % 3 == 2:\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a <= 9 and a >= 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a < 0:\n        a = -a\n    if a % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # Your code here\n    if a**3 == a**3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return a**3 == a*a*a\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = int(a)\n    if a == 1 or a == 2 or a == 3 or a == 4 or a == 6 or a == 8 or a == 10 or a == 16:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_cube(number):\n        for i in range(1, number):\n            if number % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a > 0:\n        for i in range(1,a+1):\n            if i**3 == a:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return False\n    elif a == 2:\n        return False\n    elif a == 3:\n        return False\n    elif a == 4:\n        return False\n    elif a == 5:\n        return False\n    elif a == 6:\n        return False\n    elif a == 7:\n        return False\n    elif a == 8:\n        return False\n    elif a == 9:\n        return False\n    elif a == 10:\n        return False\n    elif a == 11:\n        return False\n    elif a == 12:\n        return False\n    elif a == 13:\n        return False\n    elif a == 14:\n        return False\n    elif a == 15:\n        return False\n    elif a == 16:\n        return False\n    elif a == 17:\n        return False\n    elif a == 18:\n        return False\n    elif a == 19:\n        return False\n    elif a == 20:\n        return False\n    elif a == 21:\n        return False\n    elif a == 22:\n        return False\n    elif a == 23:\n        return False\n    elif a == 24:\n        return False\n    elif a == 25:\n        return False\n    elif a == 26:\n        return False\n    elif a == 27:\n        return False\n    elif a == 28:\n        return False\n    elif a == 29:\n        return False\n    elif a == 30:\n        return False\n    elif a == 31:\n        return False\n    elif a == 32:\n        return False\n    elif a == 33:\n        return False\n    elif a == 34:\n        return False\n    elif a == 35:\n        return False\n    elif a == 36:\n        return False\n    elif a == 37:\n        return False\n    elif a == 38:\n        return False\n    elif a == 39:\n        return False\n    elif a == 40:\n        return False\n    elif a == 41:\n        return False\n    elif a == 42:\n        return False\n    elif a == 43:\n        return False\n    elif a == 44:\n        return False\n    elif a == 45:\n        return False\n    elif a == 46:\n        return False\n    elif a == 47:\n        return False\n    elif a == 48:\n        return False\n    elif a == 49:\n        return False\n    elif a == 50:\n        return False\n    elif a == 51:\n        return False\n    elif a == 52:\n        return False\n    elif a == 53:\n        return False\n    elif a == 54:\n        return False\n    elif a == 55:\n        return False\n    elif a == 56:\n        return False\n    elif a == 57:\n        return False\n    elif a == 58:\n        return False\n    elif a == 59:\n        return False\n    elif a == 60:\n        return False\n    elif a == 61:\n        return False\n    elif a == 62:\n        return False\n    elif a == 63:\n        return False\n    elif a == 64:\n        return False\n    elif a == 65:\n        return False\n    elif a == 66:\n        return False\n    elif a == 67:\n        return False\n    elif a == 68:\n        return False\n    elif a == 69:\n        return False\n    elif a == 70:\n        return False\n    elif a == 71:\n        return False\n    elif a == 72:\n        return False\n    elif a == 73:\n        return False\n    elif a == 74:\n        return False\n    elif a == 75:\n        return False\n    elif a == 76:\n        return False\n    elif a == 77:\n        return False\n    elif a == 78:\n        return False\n    elif a == 79:\n        return False\n    elif a == 80:\n        return False\n    elif a == 81:\n        return False\n    elif a == 82:\n        return False\n    elif a == 83:\n        return False\n    elif a ="
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a) == int and type(a) == int:\n        if a == 3 or a == 4 or a == 9:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if num is empty string\n    if num == \"\":\n        return 0\n    # if num is not string\n    if not isinstance(num, str):\n        return 0\n    # if num is not empty string\n    if len(num) == 0:\n        return 0\n    # if num is already a string\n    if len(num) == 1:\n        return 0\n    # to determine the number of digits\n    def digit(num):\n        # if num is not string\n        if not isinstance(num, str):\n            return 0\n        # if num is not empty string\n        if len(num) == 0:\n            return 0\n        # return number of digits\n        return len(num) - 1\n    # if num is string\n    if isinstance(num, str):\n        # to count the number of digits\n        num = num.replace(\" \", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\":\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\"!\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\",\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\" \", \"\")\n        num = num.replace(\"-\", \"\")\n        num = num.replace(\".\", \"\")\n    "
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if num == \"\":\n        return 0\n    digit = 0\n    for i in range(len(num)):\n        digit += int(num[i])*16**i\n    if digit < 4:\n        return digit\n    else:\n        return 2\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if num == \"\":\n        return 0\n    num = str(num)\n    if num[0] == \"0\":\n        return 0\n    digits = int(num[0])\n    if num[1] == \"0\":\n        return 0\n    if num[2] == \"0\":\n        return 0\n    if num[3] == \"0\":\n        return 0\n    if num[4] == \"0\":\n        return 0\n    if num[5] == \"0\":\n        return 0\n    if num[6] == \"0\":\n        return 0\n    if num[7] == \"0\":\n        return 0\n    if num[8] == \"0\":\n        return 0\n    if num[9] == \"0\":\n        return 0\n    if num[10] == \"0\":\n        return 0\n    if num[11] == \"0\":\n        return 0\n    if num[12] == \"0\":\n        return 0\n    if num[13] == \"0\":\n        return 0\n    if num[14] == \"0\":\n        return 0\n    if num[15] == \"0\":\n        return 0\n    if num[16] == \"0\":\n        return 0\n    if num[17] == \"0\":\n        return 0\n    if num[18] == \"0\":\n        return 0\n    if num[19] == \"0\":\n        return 0\n    if num[20] == \"0\":\n        return 0\n    if num[21] == \"0\":\n        return 0\n    if num[22] == \"0\":\n        return 0\n    if num[23] == \"0\":\n        return 0\n    if num[24] == \"0\":\n        return 0\n    if num[25] == \"0\":\n        return 0\n    if num[26] == \"0\":\n        return 0\n    if num[27] == \"0\":\n        return 0\n    if num[28] == \"0\":\n        return 0\n    if num[29] == \"0\":\n        return 0\n    if num[30] == \"0\":\n        return 0\n    if num[31] == \"0\":\n        return 0\n    if num[32] == \"0\":\n        return 0\n    if num[33] == \"0\":\n        return 0\n    if num[34] == \"0\":\n        return 0\n    if num[35] == \"0\":\n        return 0\n    if num[36] == \"0\":\n        return 0\n    if num[37] == \"0\":\n        return 0\n    if num[38] == \"0\":\n        return 0\n    if num[39] == \"0\":\n        return 0\n    if num[40] == \"0\":\n        return 0\n    if num[41] == \"0\":\n        return 0\n    if num[42] == \"0\":\n        return 0\n    if num[43] == \"0\":\n        return 0\n    if num[44] == \"0\":\n        return 0\n    if num[45] == \"0\":\n        return 0\n    if num[46] == \"0\":\n        return 0\n    if num[47] == \"0\":\n        return 0\n    if num[48] == \"0\":\n        return 0\n    if num[49] == \"0\":\n        return 0\n    if num[50] == \"0\":\n        return 0\n    if num[51] == \"0\":\n        return 0\n    if num[52] == \"0\":\n        return 0\n    if num[53] == \"0\":\n        return 0\n    if num[54] == \"0\":\n        return 0\n    if num[55] == \"0\":\n        return 0\n    if num[56] == \"0\":\n        return 0\n    if num[57] == \"0\":\n        return 0\n    if num[58] == \"0\":\n        return 0\n    if num[59] == \"0\":\n        return 0\n    if num[60] == \"0\":\n        return 0\n    if num[61] == \"0\":\n        return 0\n    if num[62] == \"0\":\n        return 0\n    if num[63] == \"0\":\n        return 0\n    if num[64] == \"0\":\n        return 0\n    if num[65] == \"0\":\n        return 0\n    if num"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # A list of all the digits is used to identify possible combinations of two digits\n    digits = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\", \"E\", \"F\"]\n    # A list of all the primes is used to identify possible combinations of two primes\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    \n    # The pattern that is used to identify digits\n    pattern = str(num)\n    # The pattern that is used to identify primes\n    pattern_primes = str(primes)\n    \n    # Store the last digit to see if the number of digits is 0 or not\n    last_digit = 0\n    # A variable to keep track of the last digit to see if the number of digits is 0 or not\n    last_digit_not_0 = 0\n    # Number of digits to see if the number of digits is 0 or not\n    num_digits_0 = 0\n    # Number of digits to see if the number of digits is 0 or not\n    num_digits_0_not_0 = 0\n    \n    # Store the last digit to see if the number of digits is 0 or not\n    last_digit_not_0_index = 0\n    # Store the number of digits to see if the number of digits is 0 or not\n    num_digits_not_0_index = 0\n    \n    # Create a pattern that searches for all the digits and the primes\n    # Note: first we need to determine if the number of digits is 0 or not\n    if len(pattern) >= 2:\n        for index, digit in enumerate(pattern):\n            # Check if the digit is a number\n            if digit in digits:\n                # If the number is not 0, we need to check if the number of digits is 0 or not\n                if not pattern[index + last_digit_not_0_index] in digits:\n                    # If the number of digits is 0, we need to check if the number of digits is not 0 or not\n                    if not pattern[index + last_digit_not_0_index] in primes:\n                        # We have a combination of two primes\n                        num_digits_0_not_0 += 1\n                else:\n                    # If we have a combination of two primes, we have a combination of two digits\n                    num_digits_not_0_index += 1\n            else:\n                # If the number of digits is 0, we need to check if the number of digits is not 0 or not\n                if pattern[index + last_digit_not_0_index] in digits:\n                    # If the number of digits is not 0, we need to check if the number of digits is 0 or not\n                    if not pattern[index + last_digit_not_0_index] in primes:\n                        # We have a combination of two primes\n                        num_digits_0_not_0 += 1\n            # Now we need to check if we have a combination of two primes\n            if num_digits_0_not_0!= 0:\n                # We have a combination of two digits\n                num_digits_not_0 += 1\n                # And we need to check if the number of digits is not 0 or not 0\n                if not pattern[index + last_digit_not_0_index] in primes:\n                    # If we have a combination of two primes, we have a combination of two digits\n                    num_digits_0_not_0_index += 1\n            # After we have an combination of two digits, we need to check if we have a combination of two primes\n            if num_digits_not_0_index!= 0:\n                # We have a combination of two primes\n                num_digits_not_0_index += 1\n    \n    # Check if the number of digits is 0 or not\n    if num_digits_0!= 0:\n        # Check if the number of digits is 0 or not\n        if num_digits_not_0!= 0:\n            # We have a combination of two primes\n            num_digits_not_0 += 1\n            # And we need to check if the number of digits is not 0 or not 0\n            if num_digits_not_0_index!= 0:\n                # We have a combination of two primes\n                num_digits_not_0_index += 1\n        # Check if the number of digits is 0 or not 0\n        if num_digits"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not num:\n        return 0\n    num = num.lower()\n    digits = len(num)\n    if digits == 1:\n        return 0\n    elif digits == 2:\n        if num[0:1] == \"0\":\n            return 0\n        else:\n            return 2\n    elif digits == 3:\n        if num[0:2] == \"00\":\n            return 0\n        else:\n            return 3\n    elif digits == 4:\n        if num[0:3] == \"000\":\n            return 0\n        else:\n            return 4\n    elif digits == 5:\n        if num[0:4] == \"001\":\n            return 0\n        else:\n            return 5\n    elif digits == 6:\n        if num[0:5] == \"010\":\n            return 0\n        else:\n            return 6\n    elif digits == 7:\n        if num[0:6] == \"011\":\n            return 0\n        else:\n            return 7\n    elif digits == 8:\n        if num[0:7] == \"100\":\n            return 0\n        else:\n            return 8\n    elif digits == 9:\n        if num[0:8] == \"101\":\n            return 0\n        else:\n            return 9\n    elif digits == 10:\n        if num[0:9] == \"110\":\n            return 0\n        else:\n            return 10\n    elif digits == 11:\n        if num[0:10] == \"111\":\n            return 0\n        else:\n            return 11\n    elif digits == 12:\n        if num[0:11] == \"112\":\n            return 0\n        else:\n            return 12\n    elif digits == 13:\n        if num[0:12] == \"113\":\n            return 0\n        else:\n            return 13\n    elif digits == 14:\n        if num[0:13] == \"114\":\n            return 0\n        else:\n            return 14\n    elif digits == 15:\n        if num[0:14] == \"115\":\n            return 0\n        else:\n            return 15\n    elif digits == 16:\n        if num[0:15] == \"116\":\n            return 0\n        else:\n            return 16\n    elif digits == 17:\n        if num[0:16] == \"117\":\n            return 0\n        else:\n            return 17\n    elif digits == 18:\n        if num[0:17] == \"118\":\n            return 0\n        else:\n            return 18\n    elif digits == 19:\n        if num[0:18] == \"119\":\n            return 0\n        else:\n            return 19\n    elif digits == 20:\n        if num[0:19] == \"120\":\n            return 0\n        else:\n            return 20\n    elif digits == 21:\n        if num[0:20] == \"121\":\n            return 0\n        else:\n            return 21\n    elif digits == 22:\n        if num[0:21] == \"122\":\n            return 0\n        else:\n            return 22\n    elif digits == 23:\n        if num[0:22] == \"123\":\n            return 0\n        else:\n            return 23\n    elif digits == 24:\n        if num[0:23] == \"124\":\n            return 0\n        else:\n            return 24\n    elif digits == 25:\n        if num[0:24] == \"125\":\n            return 0\n        else:\n            return 25\n    elif digits == 26:\n        if num[0:25] == \"126\":\n            return 0\n        else:\n            return 26\n    elif digits == 27:\n        if num[0:26] == \"127\":\n            return 0\n        else:\n            return 27\n    elif digits == 28:\n        if num[0:27] == \"128\":\n            return 0\n        else:\n            return 28\n    elif digits == 29:\n        if num[0:28] == \"129\":\n            return 0\n        else:\n            return 29\n    elif digits == 30:\n        if num[0:29] == \"130\":\n            return 0\n        else:\n            return 30\n    elif digits == 31:\n        if num[0:30] == \"131\":\n            return 0\n        else:"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    digits = ''\n    s = list(map(lambda x: int(x), list(str(num))))\n    for i in s:\n        if i==0:\n            digits += '0'\n        elif i==1:\n            digits += '1'\n        elif i==2:\n            digits += '2'\n        elif i==3:\n            digits += '3'\n        elif i==4:\n            digits += '4'\n        elif i==5:\n            digits += '5'\n        elif i==6:\n            digits += '6'\n        elif i==7:\n            digits += '7'\n        elif i==8:\n            digits += '8'\n        elif i==9:\n            digits += '9'\n        elif i==10:\n            digits += 'A'\n        elif i==11:\n            digits += 'B'\n        elif i==12:\n            digits += 'C'\n        elif i==13:\n            digits += 'D'\n        elif i==14:\n            digits += 'E'\n        elif i==15:\n            digits += 'F'\n    return len(digits)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, num):\n        if(num % i == 0):\n            count += 1\n    if (num % 2 == 0):\n        count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(int(num[i:i+2],16) for i in range(0,len(num),2))\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(num) == str:\n        return num.count(\"1\")\n    else:\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    digit_count = 0\n    for digit in str(num):\n        if digit.isupper():\n            digit_count += 1\n    if digit_count == len(str(num)):\n        return 1\n    return digit_count\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = decimal\n    ret = \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(f'{int(x):b}' for x in str(decimal))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    binary_number = str(decimal)\n    binary_number_stripped = binary_number[:-1]\n    binary_number_stripped = binary_number_stripped[::-1]\n    binary_number_stripped_length = len(binary_number_stripped)\n    #print(binary_number_stripped_length)\n    for i in range(binary_number_stripped_length):\n        if (binary_number[i] == \"1\"):\n            binary_number[i] = \"0\"\n    #print(binary_number)\n    return \"\".join(binary_number)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # convert decimal to binary\n    binary = bin(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if decimal == 0:\n        binary = \"0\"\n    elif decimal == 1:\n        binary = \"1\"\n    else:\n        binary = \"{:b}\".format(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num = ''\n    dec = decimal\n    while dec > 0:\n        num += str(dec % 2)\n        dec = dec // 2\n    return 'db' + num[::-1]"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if decimal == 0:\n        return \"db0\"\n    elif decimal == 1:\n        return \"db1\"\n    else:\n        return decimal_to_binary(decimal//2) + \"db\" + str(decimal%2)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if decimal <= 0:\n        return '0' * (decimal - 1) + 'db'\n    else:\n        return '1' * (decimal - 1) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    binary = \"\"\n    digit = 0\n    while decimal >= 1:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary + 'db' * digit + 'db' * (decimal // 2) if decimal > 0 else binary + 'db' * digit\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    binary = []\n    binary.append(str(decimal // 2))\n    decimal = decimal % 2\n    while decimal!= 0:\n        binary.append(str(decimal % 2))\n        decimal = decimal // 2\n    binary.append(str(decimal))\n    return \"\".join(binary)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            count += 1\n    if count >= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            for i in range(1, len(s) - 1):\n                if s[i]!= s[i + 1] and s[i]!= s[i - 1]:\n                    return False\n            return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    \n    # if len(s) < 3:\n    #     return False\n    # result = [False for i in range(len(s))]\n    # result[0] = True\n    # for i in range(1,len(s)):\n    #     result[i] = result[i-1] and s[i-1] == s[i]\n    # return any(result)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not s:\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Write your code here.\n    l = len(s)\n    if l < 3 or l > len(set(s)):\n        return False\n    else:\n        for i in range(3):\n            if s[i]!= s[i+1] and s[i]!= s[i+2]:\n                return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return True\n    \n    for i in range(len(s)-2):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    happy = True\n    for i in range(len(s)):\n        if s[i]!= s[i+1]:\n            happy = False\n    return happy\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # create an empty set of strings\n    h_set = set()\n    # loop through the string\n    for letter in s:\n        # if letter is a digit, just append it to the set\n        if letter.isdigit():\n            h_set.add(letter)\n        # if letter is not a digit, check the next letter\n        else:\n            # if the set is empty, add the letter to the set\n            if len(h_set) == 0:\n                h_set.add(letter)\n            # if the set is not empty, compare the letter to the set\n            else:\n                if letter in h_set:\n                    return False\n                else:\n                    h_set.add(letter)\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Edge cases\n    if len(s) == 0:\n        return False\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Generate a hashmap of valid letters\n    # A valid letter is a string of length 3\n    valid_letters = [\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n        'm',\n        'n',\n        'o',\n        'p',\n        'q',\n        'r',\n        's',\n        't',\n        'u',\n        'v',\n        'w',\n        'x',\n        'y',\n        'z',\n    ]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    grade_grade = []\n    # For all the grades\n    for grade in grades:\n        # Let the number of the student be less than 5\n        if grade <= 4.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be more than 5\n        elif grade > 5.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.5 and 3.9\n        elif grade > 3.9:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.5 and 3.9\n        elif grade > 3.5:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 3.0 and 3.9\n        elif grade > 3.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.7 and 2.9\n        elif grade > 2.7:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.3 and 2.9\n        elif grade > 2.3:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be between 2.0 and 2.9\n        elif grade > 2.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be greater than 0.7\n        elif grade > 0.7:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n        # And let the number of the student be greater than 0.0\n        elif grade > 0.0:\n            # Add the letter grade to the list\n            grade_grade.append(grade)\n    return grade_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    gpa = 0.0\n    final_gpa = 0.0\n    final_gpa_list = []\n    if len(grades) == 0:\n        return []\n    for i in grades:\n        if i >= 4.0 and i <= 3.7:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        elif i >= 3.3 and i <= 3.5:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        elif i >= 3.0 and i <= 2.7:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        elif i >= 2.3 and i <= 2.5:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        elif i >= 2.0 and i <= 1.7:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        elif i >= 1.3 and i <= 1.5:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n        else:\n            gpa += i\n            final_gpa += i\n            final_gpa_list.append(i)\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    gpa_list = []\n    list_of_gpa = []\n    list_of_letter_grades = []\n    \n    for gpa in grades:\n        gpa_list.append(float(gpa))\n    \n    gpa_list.sort()\n    \n    for gpa in gpa_list:\n        if gpa >= 3.5:\n            list_of_gpa.append('A+')\n        elif gpa >= 3:\n            list_of_gpa.append('A')\n        elif gpa >= 1.7:\n            list_of_gpa.append('B')\n        elif gpa >= 1.3:\n            list_of_gpa.append('B-')\n        elif gpa >= 1:\n            list_of_gpa.append('C')\n        elif gpa >= 0.7:\n            list_of_gpa.append('C-')\n        elif gpa >= 0.3:\n            list_of_gpa.append('C-')\n        else:\n            list_of_gpa.append('C-')\n    \n    for gpa in gpa_list:\n        list_of_letter_grades.append(int(gpa))\n        \n    return list_of_letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code here\n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            letter_grades.append('A+')\n        elif grades[i] >= 3.7:\n            letter_grades.append('A')\n        elif grades[i] >= 3.3:\n            letter_grades.append('A-')\n        elif grades[i] >= 3.0:\n            letter_grades.append('B+')\n        elif grades[i] >= 2.7:\n            letter_grades.append('B')\n        elif grades[i] >= 2.3:\n            letter_grades.append('B-')\n        elif grades[i] >= 2.0:\n            letter_grades.append('C+')\n        elif grades[i] >= 1.7:\n            letter_grades.append('C')\n        elif grades[i] >= 1.3:\n            letter_grades.append('C-')\n        elif grades[i] >= 1.0:\n            letter_grades.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grades.append('D')\n        elif grades[i] >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # YOUR CODE HERE\n    grade_list = []\n    \n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.5:\n            grade_list.append('A')\n        elif grade >= 3.0:\n            grade_list.append('B')\n        elif grade >= 2.7:\n            grade_list.append('B-')\n        elif grade >= 2.3:\n            grade_list.append('C+')\n        elif grade >= 2.0:\n            grade_list.append('C')\n        elif grade >= 1.7:\n            grade_list.append('C-')\n        elif grade >= 1.3:\n            grade_list.append('D+')\n        elif grade >= 1.0:\n            grade_list.append('D')\n        elif grade >= 0.7:\n            grade_list.append('D-')\n        elif grade >= 0.0:\n            grade_list.append('E')\n        else:\n            grade_list.append('F')\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Complete this function\n    list_of_grades = []\n    for grade in grades:\n        if type(grade) == float:\n            list_of_grades.append(grade)\n        else:\n            list_of_grades.append(grade[0])\n    if sum(list_of_grades) == 0:\n        return ['A+', 'A', 'B', 'C', 'C']\n    else:\n        return list(zip(list_of_grades, range(1, len(list_of_grades) + 1)))\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if grades == []:\n        return []\n    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade > 3.7:\n            grade_list.append('A')\n        elif grade > 3.3:\n            grade_list.append('B')\n        elif grade > 3.0:\n            grade_list.append('B')\n        elif grade > 2.7:\n            grade_list.append('B')\n        elif grade > 2.3:\n            grade_list.append('C')\n        elif grade > 2.0:\n            grade_list.append('C')\n        elif grade > 1.7:\n            grade_list.append('C')\n        elif grade > 1.3:\n            grade_list.append('D')\n        elif grade > 1.0:\n            grade_list.append('D')\n        elif grade > 0.7:\n            grade_list.append('D')\n        elif grade > 0.0:\n            grade_list.append('D')\n        else:\n            grade_list.append('E')\n    return grade_list"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Empty list to store the GPA of each student\n    my_grade = []\n    # Loop through the list of grades and create a list of letter grades\n    for x in grades:\n        my_grade.append(x)\n    # Loop through the list of letter grades and remove the first item\n    for i in range(len(my_grade)):\n        if my_grade[i] == 1.0:\n            del my_grade[i]\n    # Loop through the list of letter grades and output the list of letter grades\n    for i in my_grade:\n        if i == 1.0:\n            print(i, 'A+')\n        elif i == 2.0:\n            print(i, 'A')\n        elif i == 3.0:\n            print(i, 'A-')\n        elif i == 4.0:\n            print(i, 'B+')\n        elif i == 5.0:\n            print(i, 'B')\n        elif i == 6.0:\n            print(i, 'B-')\n        elif i == 7.0:\n            print(i, 'C+')\n        elif i == 8.0:\n            print(i, 'C')\n        elif i == 9.0:\n            print(i, 'C-')\n        elif i == 10.0:\n            print(i, 'D+')\n        elif i == 11.0:\n            print(i, 'D')\n        elif i == 12.0:\n            print(i, 'D-')\n        elif i == 13.0:\n            print(i, 'E')\n        elif i == 14.0:\n            print(i, 'E-')\n        elif i == 15.0:\n            print(i, 'F')\n        elif i == 16.0:\n            print(i, 'F-')\n        elif i == 17.0:\n            print(i, 'F')\n    return my_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # initialize empty list\n    letter_grades = []\n    # iterate through the GPA list\n    for grade in grades:\n        # check if the score is greater than zero\n        if grade > 0:\n            # check if the score is less than 4\n            if grade < 4.0:\n                # if it is, then add the score to the letter grade\n                letter_grades.append('A')\n            # if it is less than 3, then add the score to the letter grade\n            elif grade < 3.5:\n                # if it is less than 3.5, then add the score to the letter grade\n                letter_grades.append('B')\n            # if it is less than 3.0, then add the score to the letter grade\n            elif grade < 3.3:\n                # if it is less than 3.3, then add the score to the letter grade\n                letter_grades.append('C')\n            # if it is less than 3.0, then add the score to the letter grade\n            elif grade < 3.0:\n                # if it is less than 3.0, then add the score to the letter grade\n                letter_grades.append('C')\n            # if it is less than 2.7, then add the score to the letter grade\n            elif grade < 2.7:\n                # if it is less than 2.7, then add the score to the letter grade\n                letter_grades.append('D')\n            # if it is less than 2.3, then add the score to the letter grade\n            elif grade < 2.3:\n                # if it is less than 2.3, then add the score to the letter grade\n                letter_grades.append('D')\n            # if it is less than 2.0, then add the score to the letter grade\n            elif grade < 2.0:\n                # if it is less than 2.0, then add the score to the letter grade\n                letter_grades.append('E')\n            # if it is less than 1.7, then add the score to the letter grade\n            elif grade < 1.7:\n                # if it is less than 1.7, then add the score to the letter grade\n                letter_grades.append('F')\n            # if it is less than 1.3, then add the score to the letter grade\n            elif grade < 1.3:\n                # if it is less than 1.3, then add the score to the letter grade\n                letter_grades.append('F')\n            # if it is less than 1.0, then add the score to the letter grade\n            elif grade < 1.0:\n                # if it is less than 1.0, then add the score to the letter grade\n                letter_grades.append('G')\n            # if it is 0.7, then add the score to the letter grade\n            elif grade < 0.7:\n                # if it is 0.7, then add the score to the letter grade\n                letter_grades.append('G')\n            # if it is 0.0, then add the score to the letter grade\n            elif grade < 0.0:\n                # if it is 0.0, then add the score to the letter grade\n                letter_grades.append('E')\n            # if it is 0.0, then add the score to the letter grade\n            else:\n                letter_grades.append('F')\n    return letter_grade"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('B')\n        elif grade >= 3.0:\n            letter_grades.append('B-')\n        elif grade >= 2.7:\n            letter_grades.append('C')\n        elif grade >= 2.3:\n            letter_grades.append('C-')\n        elif grade >= 2.0:\n            letter_grades.append('D')\n        elif grade >= 1.7:\n            letter_grades.append('D-')\n        elif grade >= 1.3:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('F')\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) > 1:\n        for char in string:\n            if char.isdigit():\n                continue\n            if char.isalpha():\n                break\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string) % 2 == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"\"\"\n    Write a recursive function that takes a string and returns True if the string\n    is a prime number or False otherwise.\n    \"\"\"\n    # Special cases\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return True if string[0] >= string[1] else False\n    if len(string) == 3:\n        return True if string[0] >= string[1] and string[1] >= string[2] else False\n    if len(string) == 4:\n        return True if string[0] >= string[1] and string[1] >= string[2] and string[2] >= string[3] else False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return True if string[0] % 2!= 0 else False\n    else:\n        for i in range(2, int(math.sqrt(len(string)) + 1)):\n            if string.count(i) == 0:\n                return False\n            if string[0] % i!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(string) < 2:\n        return False\n    for char in string:\n        if string.count(char) < 2:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #\n    # Determines if the string is a prime number\n    #\n    if len(string) == 1:\n        return True\n    elif len(string) == 2:\n        if string.count('a')!= string.count('e') or string.count('i')!= string.count('o') or string.count('u')!= string.count('y'):\n            return False\n        else:\n            return True\n    else:\n        #\n        # Counts the number of characters in the string\n        #\n        count = 1\n        char_count = 0\n        for char in string:\n            if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or char == 'y':\n                count += 1\n                char_count += 1\n            else:\n                break\n        #\n        # Checks to see if the length of the string is a prime number\n        #\n        if count == char_count:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_prime(n):\n        \"\"\"\n        A prime number is a natural number greater than 1 that has no\n        divisors other than itself and itself less than n.\n        For example, 3 is a prime number, but 12 is not.\n        \"\"\"\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string) == 2 or len(string) == 3 and string.isnumeric() and len(string) % 2 == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if len(string) % 2 == 0 else False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(2,len(string)):\n        check = True\n        for j in range(2,len(string)):\n            if string[i] == string[j]:\n                check = False\n            else:\n                check = False\n        if check:\n            return True\n    return False\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 0 or i % 100!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([1 for i in range(n) if int(n - i) == 1])\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums = list(str(n))\n    num_count = 0\n    for i in range(len(nums)):\n        if nums[i] == '1':\n            num_count += 1\n        else:\n            num_count = 0\n    return num_count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(i for i in range(2, n) if i == 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, 10):\n        if int(str(i)[1:]) - 1 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        return 0\n    if n <= 9:\n        return 1\n    if n <= 99:\n        return 2\n    if n <= 999:\n        return 3\n    if n <= 9999:\n        return 4\n    if n <= 99999:\n        return 5\n    return 6\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(2, n):\n        if i % 10!= 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    c = 0\n    nums = str(n)\n    for i in range(len(nums)):\n        if nums[i] == '1':\n            c += 1\n        else:\n            break\n    return c\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # 0 bit\n    if N == 0:\n        return \"0\"\n    \n    # 1 bit\n    if N < 2:\n        return str(N)\n    \n    # get all of the bits\n    a = \"\"\n    while N > 0:\n        a += str(N % 2)\n        N //= 2\n        \n    # return the final result\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def get_binary(N):\n        if N == 0:\n            return \"0\"\n        if N == 1:\n            return \"1\"\n        return str(N % 2) + get_binary(N // 2)\n    \n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    \n    binary = get_binary(N)\n    \n    return binary"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    if N == 0:\n        return \"\"\n    elif N % 2 == 0:\n        result = int(N/2)\n    else:\n        result = N-1\n    if result!= N:\n        result = solve(result)\n    return str(result)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #n = N // 2\n    return format(N, \"b\")\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return str(bin(sum(map(int,str(N)))))\n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_val = 2 ** N - 1\n    #print(max_val)\n    \n    #f = int(bin(max_val))\n    #print(f)\n    \n    f = list(str(bin(max_val)))\n    print(f)\n    \n    #print(f)\n    \n    #print(len(f))\n    #print(len(f[0]))\n    #print(len(f[-1]))\n    #print(len(f[-1][::-1]))\n    \n    res = ''\n    #print(f)\n    \n    #print(f)\n    for i in range(0,len(f)):\n        #print(i)\n        #print(f[i])\n        #print(len(f[i]))\n        \n        if len(f[i]) >= len(f[i][::-1]):\n            #print(f[i])\n            #print(len(f[i]))\n            res += f[i][0:len(f[i])]\n            #print(res)\n            #print(len(res))\n            #print(f[i])\n            #print(len(f[i]))\n        #print(i)\n    #print(len(f))\n    \n    #print(f)\n    #print(f[-1])\n    \n    return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def sum_digits(n):\n        total = 0\n        while n > 0:\n            total += n % 2\n            n = n // 2\n        return total\n    \n    total = 0\n    for digit in str(N):\n        total += int(digit)\n    return \"\".join(str(digit) for digit in format(total, 'b'))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def add(n1, n2):\n        \"\"\"Add two binary numbers.\n        \n        @n1 integer\n             Constraints: n1 and n2 are integers.\n        @n2 integer\n             Constraints: n1 and n2 are integers.\n        @return a string of binary number\n        \"\"\"\n        n1 = str(bin(n1))\n        n2 = str(bin(n2))\n        if len(n1) > len(n2):\n            n1, n2 = n2, n1\n        sum = 0\n        for i in range(0, len(n1)):\n            if n1[i] == n2[i]:\n                sum += 1\n            else:\n                sum -= 1\n        return str(sum)\n    \n    def extend(num):\n        \"\"\"Add the next number to the current one, and return it.\n        \n        @num integer\n             Constraints: num is a positive integer.\n        @return a string of binary number\n        \"\"\"\n        def add(n1, n2):\n            \"\"\"Add two binary numbers.\n            \n            @n1 integer\n             @n2 integer\n             @return a string of binary number\n            \"\"\"\n            return str(add(int(n1), int(n2)))\n        \n        sum = 0\n        num1 = int(num)\n        for i in range(0, len(num)):\n            sum += int(num[i]) * 2 ** (len(num) - i - 1)\n        return add(num1, sum)\n    \n    def sub(num, num1):\n        \"\"\"Subtract two binary numbers.\n        \n        @num integer\n             Constraints: num is a positive integer.\n        @num1 integer\n             Constraints: num1 and num is a positive integer.\n        @return a string of binary number\n        \"\"\"\n        def add(n1, n2):\n            \"\"\"Add two binary numbers.\n            \n            @n1 integer\n             @n2 integer\n             @return a string of binary number\n            \"\"\"\n            return str(add(int(n1), int(n2)))\n        \n        def sub(num1, num2):\n            \"\"\"Subtract two binary numbers.\n            \n            @num1 integer\n             @num2 integer\n             @return a string of binary number\n            \"\"\"\n            return str(sub(int(num1), int(num2)))\n        \n        def mul(num1, num2):\n            \"\"\"Multiply two binary numbers.\n            \n            @num1 integer\n             @num2 integer\n             @return a string of binary number\n            \"\"\"\n            return str(add(int(num1), int(num2)))\n        \n        def div(num1, num2):\n            \"\"\"Divide two binary numbers.\n            \n            @num1 integer\n             @num2 integer\n             @return a string of binary number\n            \"\"\"\n            return str(sub(int(num1), int(num2)))\n        \n        return str(sub(num, num1))\n    \n    if N == 0:\n        return str(0)\n    elif N == 1:\n        return str(N)\n    elif N == 2:\n        return str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(N)))))))) % 2)\n    elif N == 3:\n        return str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(str(N) + str(int(st"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    while N:\n        # (N - 1) / 2\n        digit = N // 2\n        # N // 2 - 1\n        N = N - digit\n        # N // 2 - digit\n        sum += digit\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = \"\"\n    for digit in range(2,N+1):\n        output += str(digit)\n    return output\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = [i for i in lst if i % 2 == 0]\n    odd = [i for i in lst if i % 2!= 0]\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    for x in range(0, len(lst)):\n        if x % 2 == 0:\n            lst[x] = lst[x] + lst[x + 1]\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst.append(0)\n    lst.sort(reverse=True)\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst.sort()\n    add_lst = []\n    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            add_lst.append(lst[i])\n        i += 1\n    return add_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst2 = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst2.append(lst[i])\n    return lst2\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new = []\n    odd_index = 0\n    even_index = 0\n    for item in lst:\n        if odd_index % 2 == 0:\n            new.append(item)\n            even_index += 1\n        else:\n            new.append(item)\n            odd_index += 1\n    return new\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_lst = []\n    even_indexes = 0\n    odd_indexes = 0\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(0, len(lst), 2):\n        lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2 == 0:\n            lst.append(lst[i])\n        else:\n            lst.insert(i, lst[i])\n        i += 1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # create an empty list called empty_lst\n    empty_lst = []\n    # iterate through the list\n    for i in range(0, len(lst), 2):\n        # append the even elements of the list to empty_lst\n        empty_lst.append(lst[i])\n    # return the new list\n    return empty_lst\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return''.join(s.split()).strip('\\n').split()\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not s:\n        return ''\n    s = list(s)\n    return''.join([i if 97 <= ord(i) <= 122 else chr(ord(i)+1) for i in s])\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    from collections import OrderedDict\n    s = s.lower()\n    return ''.join(OrderedDict.fromkeys(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(sorted(list(sorted(s, key=ascii))))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # sort the word by ascii value\n    s = sorted(s.lower().split(\" \"))\n    # find all words, check if all are in a word\n    list_of_words = []\n    for word in s:\n        if word in word_dict.keys():\n            list_of_words.append(word)\n    # now take out the words with the same ascii ascii\n    ordered = []\n    for word in list_of_words:\n        if word in word_dict.keys():\n            ordered.append(word)\n    # now join all words together with spaces to get the string\n    return \" \".join(ordered)\n    \ndef lexicographic_order(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on the lexicographical order of them.\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.replace(' ', '').lower()\n    s = [s[i:i+26] for i in range(0, len(s), 26)]\n    s = [''.join(x) for x in s]\n    return ''.join(s)\n    \ndef main():\n    \"\"\"Run the program.\"\"\"\n    word_list = ['aardvark', 'baboon', 'camel']\n    print('Original list: {}'.format(word_list))\n    print('Shuffle: {}'.format(anti_shuffle(word_list)))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s_final = ''\n    for char in s:\n        if char.isalpha():\n            s_final += char\n        else:\n            s_final += chr(ord(char) + 96)\n    return s_final"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    return''.join(s.split()).replace(' ','')"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(sorted(s.split(), key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s_list = list(s)\n    \n    #make a tuple of sorted character to add to the original string\n    tuple_s = tuple(sorted(s))\n    \n    #order the tuple of char by number\n    tuple_s = tuple(sorted(tuple_s, key=lambda x: x.ascii_number))\n    \n    #convert tuple to string\n    string = \"\".join(tuple_s)\n    \n    return string\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [(x,lst[x][0]) for x in range(len(lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < 0:\n        raise ValueError(\"x should be >= 0\")\n    else:\n        l = sorted(lst, key = lambda x: x[x])\n        if len(l)!= len(lst):\n            raise ValueError(\"List l must be of length n.\")\n        else:\n            return [(x, l[x]) for x in range(len(lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        row = (x, lst)\n        row.sort()\n        return [(row[0], row[1][col]) for col in range(len(row[1])) for row in zip(*row[1])]\n    except:\n        return []\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [(x, lst.index(row[x])) for row in lst]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda x: x[x.index(x[0])], reverse=True)[x.index(x[0])]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def find(lst,x):\n        r = []\n        c = 0\n        while c < len(lst):\n            if lst[c][0] == x:\n                r.append((lst[c][1],c))\n            c += 1\n        return r\n    def find_pair(lst, x):\n        p = []\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                if lst[j][0] == x:\n                    p.append((lst[j][1],lst[j][2]))\n        return p\n    lst = lst.copy()\n    lst.sort()\n    \n    r = []\n    c = 0\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            r.append((lst[i][1],lst[i][2]))\n        else:\n            c += 1\n    return find_pair(r, x)\n    \ndef test():\n    lst1 = [[1,2,3,4,5,6],\n          [1,2,3,4,1,6],\n          [1,2,3,4,5,1]]\n    lst2 = [[1,2,3,4,5,6],\n          [1,2,3,4,1,6],\n          [1,2,3,4,5,1]]\n    assert get_row(lst1, 2) == [\n      (1, 2), (1, 2)\n    ]\n    assert get_row(lst2, 2) == [(1, 4), (1, 0), (1, 2), (2, 4), (2, 0)]\n    print(\"Passed\")\n    "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = lst[:]\n    for i in range(len(lst)):\n        lst[i] = lst[i][x-1]\n    return sorted(zip(*lst[::-1]), key=lambda x: (x[0], x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    row = lst\n    for x in range(1, x+1):\n        row = sorted(row, key=lambda x: x[x])\n    return row\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for row in lst:\n        if x in row:\n            result.append(tuple(sorted([x, *row])))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # sort the input array\n    sorted_array = []\n    # take a copy of the array\n    copy = array\n    # count the odd and even numbers in the array\n    for i in range(len(copy)):\n        # if the first index value is even and the second index value is odd, it is a sum\n        if i % 2 == 0 and copy[i] % 2 == 1:\n            copy[i] = copy[i] + copy[i+1]\n        # if the first index value is odd and the second index value is even, it is a sum\n        elif i % 2 == 1 and copy[i] % 2 == 0:\n            copy[i] = copy[i] + copy[i-1]\n        # if the first index value is even and the second index value is even, it is a sum\n        elif i % 2 == 0 and copy[i] % 2 == 1:\n            copy[i] = copy[i] + copy[i-1]\n    # add all the values\n    for i in range(len(copy)):\n        sorted_array.append(copy[i])\n    # return the sorted array\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_array = []\n    for i in range(len(array)):\n        sum_of_elem = 0\n        for j in range(len(array)):\n            if array[j] % 2 == 0:\n                sum_of_elem += array[j]\n            else:\n                sorted_array.append(array[j])\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    array.sort(key=lambda x: sum(x) % 2)\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO\n    def sort(array):\n        for i in range(len(array)):\n            for j in range(len(array) - 1):\n                if array[j] + array[j + 1] == sum(array[j:j + 2]):\n                    array[j], array[j + 1] = array[j + 1], array[j]\n                else:\n                    break\n        return array\n    return sort(array)"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sorted_array = sorted(array, reverse=True)\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    array = sorted(array)\n    # print(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Your code here\n    sorted_array = array\n    sorted_array.sort(reverse=True)\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: use a stack to sort the given array\n    stack = []\n    sorted = []\n    # TODO: pop the smallest and largest elements from the stack\n    # while len(stack) > 0:\n    #     item = stack.pop()\n    #     sorted.append(item)\n    #     if item[0] % 2 == 0:\n    #         item[0] += 1\n    #         item[1] += item[0] % 2\n    #     else:\n    #         item[0] += 1\n    #         item[1] -= item[0] % 2\n    \n    #     # pop the stack items\n    #     stack.append(item)\n    \n    for item in array:\n        # if item[1] % 2 == 0:\n        #     item[0] += 1\n        #     item[1] += item[0] % 2\n        # else:\n        #     item[0] += 1\n        #     item[1] -= item[0] % 2\n        stack.append([item[0], item[1]])\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sorted_array = []\n    for num in array:\n        if num % 2 == 0:\n            sorted_array.append(num)\n        else:\n            sorted_array.append(sorted_array[-1] + num)\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(array) == 0:\n        return array\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if s is None:\n        return None\n    return ''.join([chr((ord(s[i]) + 2*ord(s[i]) + ord(s[i - 1])) % 26) for i in range(len(s))])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO\n    encrypt_key = 'z'\n    s_list = s.split()\n    for i in s_list:\n        c_list = list(i)\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 4) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 4) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 3) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 7) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 6) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 5) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 2) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - 1) % len(encrypt_key)]\n        encrypt_key += encrypt_key[(len(encrypt_key) - "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Complete this function!\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = ''\n    for c in s:\n        alphabet += c\n    new_alphabet = alpha[:len(alphabet)] + alphabet\n    return new_alphabet\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([ chr((ord(s[i]) + ord(s[i-1]) + ord(s[i-2]) + ord(s[i-3])) % 26 + ord('a')) for i in range(len(s)-1) ])\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to three times.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('lm') returns 'asdfghjkl'\n    decrypt('mj') returns 'gf'\n    decrypt('mj') returns 'ij'\n    decrypt('ewhjklnop') returns 'f'\n    decrypt('kf') returns 'j'\n    decrypt('jk') returns 'n'\n    decrypt('ix') returns 'l'\n    \"\"\"\n    return \"\".join([ chr((ord(s[i]) - ord(s[i-1]) - ord(s[i-2]) - ord(s[i-3]) + ord(s[i-4])) % 26 + ord('a')) for i in range(len(s)-1) ])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    import string\n    a=s.lower()\n    temp=[]\n    for i in a:\n        if i in string.ascii_lowercase:\n            temp.append(i)\n    temp_str=''.join(temp)\n    c=temp_str\n    return(c)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    if type(s)!= str:\n        raise TypeError(\"encrypt: s must be a string\")\n    \n    # WRITE YOUR CODE HERE\n    print(s)\n    print(s.translate(str.maketrans('lm','e','n','o','p',str.maketrans('k','l','s','w','t','u'))))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(s[i] for i in range(len(s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: modify to not return a string, and replace it with the new string \n    # (get_string(s))\n    # Note: for loops can be used in the encrypt function since it doesn't need to be a string\n    # Another approach:\n    # return (''.join(str(i) for i in s.replace(s[0], \"z\")))\n    # Another approach:\n    return (''.join(chr(ord(s[0]) + (ord(s[i]) + 2) % 26) for i in range(len(s))))\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('kj') returns 'gf'\n    decrypt('ewhjklnop') returns 'x'\n    decrypt('ix') returns 'f'\n    \"\"\"\n    # TODO: modify to not return a string, and replace it with the new string \n    # (get_string(s))\n    # Another approach:\n    # return (''.join(chr(ord(s[0]) - (ord(s[i]) - 2) % 26) for i in range(len(s))))\n    # Another approach:\n    return (''.join(chr(ord(s[i]) - (ord(s[i]) - 2) % 26) for i in range(len(s))))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = s.lower()\n    l = list(s)\n    s_encrypted = ''\n    for letter in l:\n        n = ord(letter) - ord('a')\n        s_encrypted += chr(n * 2 + 1)\n    return s_encrypted\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Fill this in.\n    def next_smallest_2(lst):\n        min = None\n        for i in range(len(lst)):\n            if lst[i] < lst[min]:\n                min = i\n        return min\n    return next_smallest_2(lst)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if len(lst) == 1:\n        return lst[0]\n    \n    if len(lst) == 2:\n        return lst[0]\n    \n    if len(lst) == 3:\n        return lst[1]\n    \n    if len(lst) == 4:\n        return lst[2]\n    \n    return next_smallest(lst[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not lst:\n        return None\n    \n    min_idx = 0\n    for i in range(len(lst) - 1):\n        if lst[i + 1] < lst[i]:\n            min_idx = i + 1\n    return lst[min_idx]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Add your code here\n    #TODO\n    #pass\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 1:\n        return lst[0]\n    if lst[0] < lst[1]:\n        return lst[0]\n    else:\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            return lst[i]\n        if lst[i + 1] > lst[i]:\n            return lst[i]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Note: put all the values in a list into a list of tuples\n    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i+1] < lst[i]:\n            return lst[i+1]\n    \n    return None"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    boredom_count = 0\n    for word in S.split('.'):\n        for char in word:\n            if char == '?' or char == '!' or char.lower() in 'bcdfghjklmnpqrstvwxyz':\n                boredom_count += 1\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    boredoms = 0\n    for word in S.split('.'):\n        if word[0].lower() in ['i', 'you','she', 'you', 'he', 'he']:\n            boredoms += 1\n    return boredoms\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in S.split():\n        if i[0] in '?.':\n            return int(i[1:])\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    bad = 0\n    for word in S.split('.'):\n        bad += sum(1 for word in word if word in \"!?\")\n    return bad\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # check if the string is empty\n    if len(S) == 0:\n        return 0\n    # count how many time a word starts with the \"I\"\n    count = S.count('?') + S.count('!')\n    # count how many words of the sentence start with \"I\"\n    count_start = S.count('?') + S.count('!')\n    # check if the word starts with a \".\" or a \"?\"\n    for i in range(len(S)):\n        # if the word starts with a \".\" or a \"?\"\n        if (S[i] == '?' or S[i] == '!'):\n            # if the word starts with a \".\" or a \"?\"\n            if (S[i] == '.' or S[i] == '?'):\n                # if it starts with a \".\" or a \"?\"\n                return count - count_start - 1\n        # if the word starts with a \".\" or a \"?\"\n        else:\n            # if it starts with a \".\" or a \"?\"\n            if (S[i] == '.' or S[i] == '?'):\n                # if it starts with a \".\" or a \"?\"\n                return count_start - count - 1\n    # if the sentence is a string\n    return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return count_boredoms(S, '.', '?')\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    bored_count = 0\n    for i in S.split(\".\"):\n        if \"I\" in i:\n            bored_count += 1\n    return bored_count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return count_bored(S)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    count = 0\n    for word in S.split(\".\"):\n        if len(word) < 2:\n            continue\n        if word[0] == \"I\":\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Replace this with your code\n    for word in S:\n        if word in words_bored:\n            # NOTE: Your code here\n            bored_count+=1\n    return bored_count"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if isinstance(x, (int, float)):\n        if isinstance(y, (int, float)):\n            if isinstance(z, (int, float)):\n                if (x+y) == z:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (x == sum(x) and y == sum(y) and z == sum(z)) or (x == sum(z) and y == sum(x) and z == sum(y)) or (x == sum(z) and y == sum(y) and x == sum(x))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Task:\n    # Write a function that takes 3 numbers as parameters.\n    # The function should return true if any of the numbers are equal to the sum of the other two numbers, and all numbers are integers.\n    # Otherwise, return false.\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x >= y and x >= z:\n        return True\n    elif y >= x and y >= z:\n        return True\n    elif z >= x and z >= y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x+y+z==sum(x+y+z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if any(isinstance(x, int) and isinstance(y, int) and isinstance(z, int) for x,y,z in zip(x,y,z)):\n        return True\n    else:\n        return False\n    \ndef none_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y or x == z\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(type(x) == int and type(y) == int and type(z) == int for x, y, z in zip(x, y, z))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if x > y or y > z:\n        return False\n    if z!= int(z):\n        return False\n    if x!= int(x):\n        return False\n    return True\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # your code goes here\n    message = message.upper()\n    new_message = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    message = message.upper()\n    dictionary = {\n        'A': 'T',\n        'B': 'S',\n        'C': 'G',\n        'D': 'R',\n        'E': 'Z',\n        'F': 'Y',\n        'G': 'U',\n        'H': 'V',\n        'I': 'H',\n        'J': 'Q',\n        'K': 'X',\n        'L': 'W',\n        'M': 'X',\n        'N': 'V',\n        'O': 'F',\n        'P': 'Z',\n        'Q': 'Z',\n        'R': 'B',\n        'S': 'A',\n        'T': 'G'\n    }\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # normalize case of the message\n    normalized_message = ''.join([letter.lower() if letter.isalpha() else letter.upper() for letter in message])\n    # remove leading and trailing spaces\n    normalized_message = normalized_message.strip()\n    # normalize all vowels\n    vowels = [\n    'a', 'e', 'i', 'o', 'u', \n    'y', 'r', 't','s', 'd', \n    'g', 'f', 'h', 'j', 'k', \n    'l', 'w', 'v', 'z'\n    ]\n    new_message = ''\n    for letter in normalized_message:\n        if letter in vowels:\n            if letter == letter.upper():\n                new_message += letter.lower()\n            else:\n                new_message += letter.upper()\n        else:\n            new_message += letter\n    # return the encoded message\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # mapping is as follows\n    # english = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # making a list of all of the letters in english\n    eng_lst = list(message)\n    # mapping is as follows\n    # mapping = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    mapping = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    # removing all the letters\n    message = []\n    # keeping track of where each letter appears\n    for i in eng_lst:\n        if i in mapping:\n            temp = mapping.index(i)\n            message.append(eng_lst[temp])\n        else:\n            message.append(i)\n    return \"\".join(message)\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    # Turn everything into lower case, and replace all vowels\n    # \n    # Return the encoded message.\n    \n    # TODO\n    # Create a copy of the message, and change all cases to lower \n    # case\n    \n    # Return the encoded message.\n    \n    # TODO\n    # Turn the message into a list of letters and replace all vowels \n    # with the character that appears two places after a vowel in the \n    # English alphabet.\n    \n    # Return the encoded message.\n    \n    # TODO\n    # Create a list with the letters of the message and replace all \n    # vowels with the character that appears 2 places after a vowel \n    # in the English alphabet.\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = \"\"\n    for letter in message:\n        if letter in english_vowels:\n            result += english_vowels[ord(letter) - ord(\"A\")]\n        else:\n            result += letter\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    message = message.lower()\n    vowels = 'aeiou'\n    # letter = message.split()[0].lower()\n    # message = ''.join(letter)\n    letter = ''.join(chr(ord(i) + 1) for i in message)\n    vowels_count = message.count(vowels)\n    vowels_count += 1\n    # print(' '.join(letter))\n    message_swap = ''.join(letter)\n    message_swap_swapped = ''.join(letter)\n    message_swap_swapped = ''.join(letter)\n    message_swap_swapped = ''.join(letter)\n    # print(message_swap)\n    # print(message_swap_swapped)\n    if vowels_count == 2:\n        message_swap = ''.join(letter[::-1])\n    elif vowels_count == 1:\n        message_swap = ''.join(letter[::-2])\n    # print(' '.join(letter))\n    # print(message_swap)\n    # print(message_swap_swapped)\n    message_swap_swapped = message_swap + message_swap_swapped\n    # print(message_swap_swapped)\n    return message_swap_swapped\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # The encode function turns a string into a string of characters \n    # representing the encoded message.\n    #\n    # Examples:\n    # >>> encode('This is a message')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Thks KS C MGSSCGG'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Thks KS C MGSSCGG'\n    # >>> encode('Test')\n    # 'tHKS KS C MGSSCGG'\n    # >>> encode('tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Test')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Thks KS C MGSSCGG'\n    # >>> encode('Test')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Test')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Tgst'\n    # >>> encode('This is a message')\n    # 'Thks KS C MGSSCGG'\n    # >>> encode('gst')\n    # 'gst'\n    # >>> encode('gst')\n    # 'gst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('gst')\n    # 'gst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>> encode('Tgsst')\n    # 'Tgst'\n    # >>"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = 'AEIOU'\n    encoded = ''\n    for letter in message:\n        if letter in vowels:\n            encoded += letter.swapcase()\n        else:\n            encoded += letter\n    return encoded\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    message = message.replace(\"e\",\"E\")\n    message = message.replace(\"u\",\"U\")\n    message = message.replace(\"a\",\"A\")\n    message = message.replace(\"i\",\"I\")\n    message = message.replace(\"o\",\"O\")\n    message = message.replace(\"r\",\"R\")\n    message = message.replace(\"t\",\"T\")\n    message = message.replace(\"s\",\"S\")\n    message = message.replace(\"d\",\"D\")\n    message = message.replace(\"f\",\"F\")\n    message = message.replace(\"g\",\"G\")\n    message = message.replace(\"h\",\"H\")\n    message = message.replace(\"j\",\"J\")\n    message = message.replace(\"k\",\"K\")\n    message = message.replace(\"l\",\"L\")\n    message = message.replace(\"m\",\"M\")\n    message = message.replace(\"n\",\"N\")\n    message = message.replace(\"p\",\"P\")\n    message = message.replace(\"q\",\"Q\")\n    message = message.replace(\"r\",\"R\")\n    message = message.replace(\"t\",\"T\")\n    message = message.replace(\"u\",\"U\")\n    message = message.replace(\"x\",\"X\")\n    message = message.replace(\"w\",\"W\")\n    message = message.replace(\"y\",\"Y\")\n    message = message.replace(\"z\",\"Z\")\n    message = message.replace(\"z\",\"Z\")\n    \n    for i in range(len(message)):\n        if message[i].lower() in v:\n            message = message[:i]+message[i].upper()+message[i+1:]\n    \n    return message\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    #sieve of eratosthenes\n    #for i in range(2,len(lst)+1):\n    #    if lst[i]==0:\n    #        print(i)\n    #        for j in range(2*i,len(lst)+1,i):\n    #            lst[j]=0\n    #    print(\"**************\")\n    #    for k in range(i,len(lst),i):\n    #        if lst[k]==0:\n    #            print(k)\n    #            lst[k]=1\n    #            print(lst[k])\n    #    print(\"**************\")\n    #    print(lst)\n    #    print(\"**************\")\n    #print(lst)\n    \n    #get sum of digits\n    maxnum=0\n    for i in range(0,len(lst)):\n        if lst[i]>0:\n            temp=lst[i]\n            while temp:\n                r=temp%10\n                temp=temp//10\n                if r>maxnum:\n                    maxnum=r\n        if maxnum>0:\n            sum1=0\n            for j in range(maxnum,0,-1):\n                if lst[i]>=j:\n                    sum1+=lst[i]//j\n                else:\n                    break\n            print(sum1)\n            return sum1\n    return maxnum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1. the maximum integer value is not prime, and also the remainder is zero.\n    # 2. find the sum of digits.\n    # 3. iterate over digits and find the largest prime value.\n    # 4. return the sum.\n    # 5. return the maximum\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    max_digits = lst[0]\n    sum_digits = 0\n    # iterate over digits\n    for i in lst[1:]:\n        if not is_prime(i):\n            return 0\n        sum_digits = i\n        # find the largest prime value.\n        for j in range(1, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                break\n        else:\n            if i > max_digits:\n                max_digits = i\n            sum_digits += i\n    return sum_digits\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst_prime = [i for i in range(2, max(lst) + 1) if not is_prime(i)]\n    ans = sum(map(lambda x: int(x), lst))\n    for i in range(len(lst_prime)):\n        ans = max(ans, ans*lst_prime[i])\n    return ans\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if lst == None or len(lst) == 0:\n        return None\n    else:\n        lst = sorted(lst)\n        max_int = lst[0]\n        for i in lst[1:]:\n            if i > max_int:\n                max_int = i\n        return max_int\ndef main():\n    print(f\"{skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])}\")\n    print(f\"{skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])}\")\n    print(f\"{skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])}\")\n    print(f\"{skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])}\")\n    print(f\"{skjkasdkd([0,81,12,3,1,21])}\")\n    print(f\"{skjkasdkd([0,8,1,2,1,7])}\")\n    print(f\"{skjkasdkd([0,8,1,2,1,7,3])}\")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    def isprime(x):\n        \"\"\"Return True if x is a prime number.\"\"\"\n        if x == 2 or x == 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        for n in range(4, int(math.sqrt(x)) + 1, 2):\n            if x % n == 0 or x % n == 2:\n                return False\n        return True\n    def nextprime(x):\n        \"\"\"Return the next prime number greater than x.\"\"\"\n        if x == 2 or x == 3:\n            return x\n        for n in range(x + 2, int(math.sqrt(x)) + 1, 2):\n            if isprime(n):\n                return n\n        return 1\n    \n    def maximum(a, b):\n        \"\"\"Return the largest number that is a multiple of both the numbers from a and b.\"\"\"\n        if a == b:\n            return a\n        a, b = max(a, b), min(a, b)\n        return b if a == b else nextprime(b)\n    \n    maximum = 2\n    for x in lst:\n        if x > maximum:\n            maximum = x\n    \n    if maximum == 2:\n        return 0\n    \n    for n in range(2, maximum):\n        if isprime(n):\n            return maximum\n    return nextprime(maximum)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if lst[i]>0:\n            x = x+lst[i]\n    return x\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i=0\n    prime=2\n    while(prime*prime<lst[i]):\n        if lst[i]%prime==0:\n            lst[i]//=prime\n            i+=1\n        else:\n            prime+=1\n    i+=1\n    return lst[i]\ndef xy(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime number and return the sum of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    \n    For lst = [0,8,1,2,1,7] the output should be 7\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    i=0\n    prime=2\n    while(prime*prime<lst[i]):\n        if lst[i]%prime==0:\n            lst[i]//=prime\n            i+=1\n        else:\n            prime+=1\n    i+=1\n    return lst[i]\ndef psk(lst):\n    \"\"\"You are given a list of integers.\n    You need to return the product of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 6\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 720\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 40\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 50\n    For lst = [0,81,12,3,1,21] the output should be 3\n    \n    For lst = [0,8,1,2,1,7] the output should be 7\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    i=0\n    prime=2\n    while(prime*prime<lst[i]):\n        if lst[i]%prime==0:\n            lst[i]//=prime\n            i+=1\n        else:\n            prime+=1\n    i+=1\n    return lst[i]\ndef tsk(lst):\n    \"\"\"You are given a list of integers.\n    You need to return the sum of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    largest = 0\n    for i in lst:\n        if isprime(i):\n            largest = i\n            break\n    return largest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #def isprime(x):\n    #    x = int(x)\n    #    if x<2:\n    #        return False\n    #    elif x%2==0:\n    #        return False\n    #    elif x<=1:\n    #        return False\n    #    else:\n    #        return True\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def getPrime():\n        \"\"\"Returns a prime number.\"\"\"\n        import math\n        prime = 2\n        while not is_prime(prime):\n            prime += 1\n        return prime\n    prime = getPrime()\n    for i in lst:\n        for j in range(prime):\n            if (j*j)%prime == i and is_prime(j*j+i):\n                return i + j*j\n    return 'No solution'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(isinstance(k,str) for k in dict.keys()) and all(isinstance(k,str) for k in dict.values())\ndef check_dict_type(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings, else return False.\n    Examples:\n    check_dict_type({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_type({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_type({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_type({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(k,str) for k in dict.keys()) and all(isinstance(k,str) for k in dict.values())\ndef check_dict_size(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_size({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_size({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_size({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_size({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef check_dict_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_value({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_value({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_value({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_value({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef check_dict_values_of_same_type(dict):\n    \"\"\"\n    Given a dictionary, return True if all values in the dictionary are of the same type, else return False.\n    Examples:\n    check_dict_values_of_same_type({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_values_of_same_type({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_values_of_same_type({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_values_of_same_type({\"a\":\"apple\", \"a\":\"apple\", \"a\":\"apple\"}) should return True.\n    \"\"\"\n    return all(isinstance(v,type(dict.values()[0])) for v in dict.values())\ndef test_check_dict_value():\n    dic = {'a': 1, 'b': 2, 'c': 'c', 'd': 'd'}\n    print(check_dict_value(dic))\n    print(check_dict_type(dic))\n    print(check_dict_size(dic))\n    print(check_dict_value(dic))\n    print(check_dict_values_of_same_type(dic))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for key in dict:\n        if not isinstance(key,str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for k, v in dict.items():\n        if isinstance(v, dict):\n            check_dict_case(v)\n        elif isinstance(v, list):\n            for v2 in v:\n                if isinstance(v2, dict):\n                    check_dict_case(v2)\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key in dict:\n        if isinstance(dict[key], dict):\n            check_dict_case(dict[key])\n            return True\n        elif isinstance(dict[key], str):\n            if key.isupper():\n                return True\n            else:\n                return False\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in dict:\n        if isinstance(dict[i], str) and dict[i].lower()!= dict[i].upper():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict.keys():\n        if isinstance(key,str) and (key.islower() or key.isupper()):\n            if isinstance(dict[key],str) and dict[key].islower():\n                return False\n            if isinstance(dict[key],str) and dict[key].isupper():\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not all(isinstance(char, str) for char in key):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if (key.lower() in dict.keys()) and (key.upper() in dict.keys()):\n                return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for k, v in dict.items():\n        if not isinstance(v, str):\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if key.lower() in dict:\n            return True\n    return False\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    array = [2]\n    for i in range(2, n+1):\n        if is_prime(i):\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # map is done by lists\n    map = []\n    for i in range(2, n):\n        if prime(i):\n            map.append(i)\n    return map\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # please note that this is a recursive function\n    # no need to return anything\n    def helper(n):\n        if n <= 2:\n            return [2]\n        elif n == 3:\n            return [2, 3]\n        else:\n            a = [2]\n            for i in range(3, n, 2):\n                for j in range(3, i, 2):\n                    a.append(j)\n            return a\n    return helper(n)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prime_numbers = []\n    for n in range(2, n):\n        for p in prime:\n            if n % p == 0:\n                break\n        else:\n            prime_numbers.append(n)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sieve = [True for _ in range(n+1)]\n    primes = []\n    def is_prime(num):\n        if num == 1:\n            return False\n        if num == 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5)+2, 2):\n            if not sieve[i]:\n                continue\n            sieve[i*i:num:i] = [False for _ in range(num)]\n            if i*i > num:\n                break\n            sieve[num] = False\n        return num in primes\n    for n in range(2, n+1):\n        if is_prime(n):\n            primes.append(n)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    # print(n)\n    # print(prime(n))\n    # print(count_up_to(2))\n    # print(count_up_to(3))\n    # print(count_up_to(4))\n    # print(count_up_to(5))\n    for x in range(2, n+1):\n        # print(x)\n        for prime in prime_array(x):\n            # print(prime)\n            if prime > n:\n                break\n            # print(prime, prime <= n)\n            if prime <= n:\n                result.append(prime)\n                # print(prime, \" is prime\")\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    primes = [2]\n    for i in range(3, n+1):\n        if i > 1:\n            primes.append(i)\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return [x for x in range(2,n+1) if is_prime(x)]\n    return [x for x in range(2,n+1) if is_prime(x) and x%2==0]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    product = 0\n    temp = 0\n    i = 0\n    #swap the temp array to temp = a and temp = b\n    temp = a\n    temp = b\n    #start the loops with product to store the result\n    while temp > 0:\n        product = product + temp%10\n        temp = temp//10\n        i = i + 1\n        #check the last digit of product\n        if product % 10 == 0:\n            break\n    \n    #when product = 0, last digit is the product of product and i\n    #add the i to the product\n    if product == 0:\n        product = i + 1\n    \n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    product = 0\n    for i in range(len(a)):\n        product = product + (a[i] * b[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    c = 0\n    # Find the remainder of the division, and add it to the current remainder\n    for i in range(len(a) - 2, -1, -1):\n        # Make sure to ignore the last two digits\n        if i >= len(b):\n            # Check to see if the remainder is a negative number\n            if (a[i] < 0 and b[i] > 0) or (a[i] > 0 and b[i] < 0):\n                # The negative number is an example of a negative remainder\n                # so we need to subtract the remainder\n                c += a[i] * (-1)\n            # This is the same as multiplying b by -1 because the negative number was omitted from the result\n            else:\n                c += b[i] * a[i]\n            # The remainder is a negative number so we need to multiply again\n            if a[i] >= 0:\n                c *= -1\n            # We have a negative number so we need to multiply by -1\n            else:\n                c *= -1\n        # Check to see if the remainder is a positive number\n        elif i >= 0:\n            # The remainder is a positive number so we need to multiply by b\n            if (a[i] > 0 and b[i] < 0) or (a[i] < 0 and b[i] > 0):\n                c += a[i] * b[i]\n            # The remainder is a positive number so we need to multiply again\n            else:\n                c += a[i] * b[i] * -1\n        # Now we have a positive number, so the remainder is a negative number\n        else:\n            # The remainder is a negative number so we need to multiply again\n            c += b[i] * a[i]\n        # Add the remainder together\n        c += a[i] * b[i]\n    return c\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    product = 0\n    for digit in str(a):\n        product = product*(10**(len(digit)-1)) + int(digit)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result += a[i]*b[i]\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert isinstance(a, int) and isinstance(b, int)\n    assert a >= 0 and b >= 0\n    assert isinstance(a, int) and isinstance(b, int)\n    \n    # return the product of digits in the two arguments\n    return int(str(a)*str(b))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # TODO: Your code here\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    #raise NotImplementedError\n    \n    return a * b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total = 0\n    while b > 0:\n        total = total * 10 + b % 10\n        b = b//10\n    return total\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product *= int(str(a)[i])\n    for i in range(len(str(b))):\n        product *= int(str(b)[i])\n    return product\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(len(s)):\n        if (s[i] == s[i].upper()):\n            result = result + 1\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == \"A\":\n            if i + 1 < len(s) and s[i + 1].isupper():\n                count += 1\n        elif s[i] == \"E\":\n            if i + 1 < len(s) and s[i + 1].isupper():\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    upper = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                upper += 1\n    return upper\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    ans = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Initialize an empty count as a dictionary\n    count = {}\n    \n    # Loop over even indices and count vowels\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in count:\n                count[s[i]] += 1\n            else:\n                count[s[i]] = 1\n    \n    # Return the number of vowels in the count dictionary\n    return len(count)"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper())\n    \n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(len(s)) if s[i].islower())\n    \n    \ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 2\n    count_vowels('abcdefg') returns 2\n    count_vowels('dBBE') returns 1\n    \"\"\"\n    vowels = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            vowels += 1\n        i += 1\n    return vowels\n        \n    \ndef is_happy(n):\n    \"\"\"\n    Given an integer n, determine whether or not it is a happy number.\n    \n    For example:\n    is_happy(19) returns True\n    is_happy(24) returns False\n    is_happy(7) returns True\n    \"\"\"\n    i = 2\n    while i < int(math.sqrt(n)) + 1:\n        if n % i == 0:\n            if n // i == i:\n                return False\n            else:\n                return True\n        i += 1\n    return True\n    \n    \ndef one_away(s):\n    \"\"\"\n    Given a string s, return the longest string that contains only two distinct characters.\n    \n    For example:\n    one_away('aBCdEf') returns 'bCD'\n    one_away('abccdEf') returns 'abC'\n    one_away('abCCdEf') returns 'ab'\n    \"\"\"\n    def count_two(s):\n        \"\"\"\n        Returns the length of the longest substring where the number of distinct characters appears only once.\n        \n        For example:\n        count_two('aBCdEf') returns 3\n        count_two('abCCdEf') returns 2\n        count_two('ab') returns 1\n        \"\"\"\n        return len(set(s))\n    \n    i = 0\n    result = ''\n    while i < len(s):\n        if s[i] == s[i+1]:\n            result += s[i]\n            i += 2\n        else:\n            result += s[i]\n            i += 1\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] >= \"A\" and s[i] <=\"Z\":\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n        else:\n            if s[i].isupper():\n                count -= 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    '''\n    to calculate the closest integer to a given number, we use\n    closest_integer_with_threshold(value, threshold)\n    '''\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    value = abs(int(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(value)!= str:\n        raise TypeError(\"closest_integer() requires a string as a parameter\")\n    value = float(value)\n    if value <= 0:\n        raise ValueError(\"closest_integer() requires a positive number as a parameter\")\n    closest_integers = []\n    for i in range(2, value + 1):\n        if int(i/2) == int(value/2):\n            closest_integers.append(i)\n    if len(closest_integers) == 0:\n        return -value\n    return closest_integers[0]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here.\n    val = value.split(\".\")\n    if len(val) == 2:\n        if val[0] == '0':\n            val = \"0\" + val\n        elif val[0]!= '0' and val[0]!= '-':\n            val = \"-\" + val\n    num1, num2 = val\n    if num1.isdigit() and num2.isdigit():\n        if abs(int(num1) - int(num2)) < abs(int(num1)):\n            return int(num1)\n        elif abs(int(num2) - int(num1)) < abs(int(num2)):\n            return int(num2)\n        else:\n            return int(num1)\n    else:\n        print(\"input must be numeric\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #\n    # TODO: modify so that \"if number >=\n    #   (number / 2) and (number / 2) < number < number\"\n    #   can be used to find the closest integer of the given number.\n    #\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        return int(value)\n    except ValueError:\n        if value.lower() in '-':\n            return int(value.lower()[:-1])\n        return closest_integer(value[:-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: write your code here\n    return round(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not isinstance(value, str):\n        raise ValueError('Expected a string')\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #if n % 2 == 1:\n    #    return [2] * (n // 2)\n    #else:\n    #    return [2, 3] * (n // 2)\n    # return [n // 2] * (n // 2)\n    if n % 2 == 1:\n        return [1, 2] * (n // 2)\n    else:\n        return [1, 2, 3] * (n // 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i + 1 for i in range(0, n, 2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    piles = []\n    for i in range(n):\n        if i % 2:\n            piles.append(i + 1)\n        else:\n            piles.append(i)\n    return piles\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def next_pile(n):\n        if n % 2 == 1:\n            return [n-1, n-1]\n        else:\n            return [n, n+1]\n    return list(map(lambda x: len(x), next_pile(n)))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n %= 4\n    if n == 0:\n        return []\n    else:\n        l = [n]\n        while n!= 1:\n            if n % 2 == 0:\n                n = n // 2\n                l.append(n)\n            else:\n                n = n * 3 + 1\n                l.append(n)\n        return l\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # base case\n    if n == 0:\n        return []\n    \n    # dp array\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    \n    # base case\n    if n == 1:\n        return [1]\n    \n    # dp[0][0]\n    dp[0][0] = 1\n    \n    # dp[0][1]\n    dp[0][1] = 0\n    \n    # dp[1][0]\n    dp[1][0] = 0\n    \n    # dp[1][1]\n    dp[1][1] = 1\n    \n    # loop\n    for i in range(2, n):\n        # dp[i][0]\n        dp[i][0] = dp[i-1][0]\n        # dp[i][1]\n        dp[i][1] = dp[i-1][1] + dp[i-1][0]\n        \n        # dp[i][2]\n        dp[i][2] = dp[i-1][2] + dp[i-1][1]\n    \n    # return\n    return dp[n-1][2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i=1\n    while i<n:\n        n//=2\n        i+=1\n    return [n//2, n%2]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return [n]\n    if n % 2:\n        return [n//2]\n    else:\n        return [n//2, n//2+1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # remove the last element of each pile\n    return [num for num in range(n) if num%2==0] + [num for num in range(n, 0, -2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a=[]\n    a.append(n)\n    if n%2==1:\n        a.append(n/2)\n    else:\n        a.append(n/2+1)\n    return a\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = s.split(',')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if isinstance(s, str):\n        return s.split(\",\")\n    else:\n        return s\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    word_list = []\n    for word in s.split(\",\"):\n        word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # your code here\n    words = s.split(\",\")\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    s = s.split(\",\")\n    return s\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # use range to look for number in the range [x, y]\n    num = range(x, y + 1)\n    # add first number to the set\n    num.remove(x)\n    # add second number to the set\n    num.add(y)\n    # return the biggest number\n    return max(num)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    #x = int(x)\n    #y = int(y)\n    \n    #return max(x,y) if x > y else -1\n    \n    #num = int(num)\n    \n    #if num % 2 == 0:\n        #return num\n    \n    #else:\n        #return -1\n    \n    num = abs(x - y)\n    \n    if num > 0:\n        return -1\n    \n    else:\n        return num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = 0\n    i = 0\n    while n < x:\n        n += y\n        i += 1\n        if n % 2 == 0:\n            continue\n        elif n % 2 == 1:\n            break\n    return i - 1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x < y:\n        x, y = y, x\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num = (x + y) // 2\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max = 0\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            if num > max:\n                max = num\n    return max\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_num = x\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_num = max(max_num, num)\n    return max_num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    biggest = 0\n    for i in range(x, y + 1):\n        if (i % 2) == 0:\n            if biggest < i:\n                biggest = i\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = float(x)\n    y = float(y)\n    x = abs(x)\n    y = abs(y)\n    if x > y:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # For this challenge, you need to return the biggest number in the range [x, y].\n    # If a number is smaller than x, it should be returned after subtracting x from y.\n    # If a number is bigger than y, it should be returned before subtracting y from x.\n    # If you've already implemented your function, then you will be overwhelmed\n    # by how big numbers are in the range [x, y]. You will need to write the\n    # code for this challenge in the main file.\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # https://stackoverflow.com/questions/15159804/how-can-i-compute-the-average-of-n-and-m-in-python-using-binary-representation\n    n_bin = bin(n)[2:]\n    m_bin = bin(m)[2:]\n    \n    # Round to integers\n    m_bin = m_bin.zfill(len(n_bin))\n    \n    # Get rid of 0b\n    m_bin = m_bin[:len(m_bin)-len(n_bin)]\n    \n    # Convert to binary\n    n_bin = n_bin[:len(n_bin)-len(m_bin)]\n    \n    # Take the mean\n    rounded = int(sum(map(int, n_bin + m_bin))/len(n_bin + m_bin))\n    \n    # Round to nearest integer\n    rounded = int(rounded)\n    \n    # Convert back to binary\n    n_bin = bin(rounded)[2:]\n    \n    return n_bin[:len(n_bin) - len(m_bin)]\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # raise NotImplementedError\n    if n < m:\n        return -1\n    \n    ret = str(bin(round(int(n) + int(m))).lstrip('0b'))\n    return ret[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == m:\n        return \"0b11\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m_ = m + 1\n    res = 0\n    for i in range(n, m + 1):\n        res = res + (2 ** i)\n    res = int(res / 2 ** m_)\n    if res == -1:\n        return \"-\"\n    else:\n        return str(res)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return bin(int(f\"{n}{m:0>{int(m+1)}}\")).replace('0b', '')\n    "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #raise NotImplementedError\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n, m = abs(n), abs(m)\n    if n > m:\n        return f\"{n:b}\"\n    elif n < m:\n        return f\"{m:b}\"\n    else:\n        return f\"{n:b}:{m:b}\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n > m:\n        return '-1'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < m:\n        return -1\n    for i in range(m-n+1):\n        print(bin(i)[2:], end=\"\")\n    rounded = int(bin(n)[2:])\n    if n < m:\n        return -1\n    else:\n        for i in range(m-n+1):\n            if rounded[i] == \"0\":\n                rounded = rounded[0:i] + \"1\" + rounded[i+1:]\n        return round(int(rounded, 2))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Return sorted list of numbers that aren't multiple digits\n    return [x for x in range(10) if x % 10 == 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = []\n    for n in x:\n        n = str(n)\n        if n[0] == '0':\n            continue\n        if n[-1] == '0':\n            continue\n        if n[-2:-1] == '0':\n            continue\n        if n[-2:] == '0':\n            continue\n        num.append(int(n))\n    num.sort()\n    return num\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    digits = []\n    \n    for i in x:\n        if i%10==0:\n            digits.append(i)\n    \n    digits.sort()\n    \n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # sort in descending order (largest digit)\n    digits = sorted(str(x))\n    \n    # return list if all digits are not even\n    if len(digits)!= len(set(digits)):\n        return []\n    \n    # return list if any digits are not even\n    return digits"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    digits = set(str(x))\n    if x == 0:\n        return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x % 2 == 0, x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x[i] for i in range(len(x)) if len(str(x[i]))!= len(str(x[i])) % 2]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    digits = []\n    for i in range(len(x)):\n        while x[i] >= 10 and x[i] <= 9:\n            digits.append(x[i])\n            x[i] = x[i] // 10\n    digits.sort()\n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in x if x%10!= 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = []\n    for xi in x:\n        if xi % 10 == 0:\n            lst.append(xi)\n    return lst\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(arr) >= 1\n    arr.sort()\n    arr.reverse()\n    return arr"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    length_arr = []\n    for num in arr:\n        length_arr.append(len(str(num)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    arr = arr.copy()\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(arr, reverse=True)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Hint: sort the given array in ascending order.\n    arr.sort()\n    arr = arr[::-1]\n    ans = [0] * len(arr)\n    for i, a in enumerate(arr):\n        if a > 9:\n            ans[i] = a\n        else:\n            ans[i] = a + 10\n    return ans\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    result = []\n    length = 0\n    for num in arr:\n        if num == 0 or num > 9:\n            result.append(num)\n        else:\n            result.append(chr(num + ord('1')))\n        length = len(result)\n    return result[::-1] + [chr(num + ord('1')) for num in range(length)]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sorted_arr = []\n    for num in arr:\n        sorted_arr.append(str(num))\n    \n    # Sort the list\n    sorted_arr = sorted(sorted_arr)\n    \n    # Reverse the numbers\n    sorted_arr = sorted_arr[::-1]\n    \n    # Replace the digits\n    sorted_arr = [''.join(i) for i in zip(*sorted_arr)]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    arr = sorted(arr)\n    arr = arr[::-1]\n    return arr\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorials = []\n    if n == 0:\n        return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #Initializing variables\n    fact = [1]\n    #Looping through n\n    for i in range(2, n):\n        #Adding the factorial of i to the factorial list\n        fact.append(fact[i - 1] * i)\n    #Returning the factorial list\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial.append(i*factorial[i-1])\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial_list = []\n    for i in range(1, n+1):\n        factorial_list.append(1)\n        print(factorial_list)\n        if i%2 == 0:\n            factorial_list.append(i*factorial_list[i-1])\n    print(factorial_list)\n    return factorial_list\nprint(f(int(input(\"n = \")))"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorials = [1]\n    if n == 0:\n        return factorials\n    else:\n        for i in range(1, n+1):\n            factorials.append(i * factorials[i-1])\n        return factorials\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fact = []\n    i = 1\n    while i < n:\n        fact.append(i)\n        i = i * fact[i-1]\n    return fact"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factorial_l = [1]\n    for i in range(2, n+1):\n        factorial_l.append(i*factorial_l[i-1])\n    return factorial_l\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==0:\n        return []\n    elif n==1:\n        return [1]\n    else:\n        return [1]+[x*f(n-1) for x in f(n-1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    fact = [1]\n    for i in range(1, n + 1):\n        fact.append(i * fact[i - 1])\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorial_list = []\n    n = n\n    while n:\n        factorial_list.append(n)\n        n = n - 1\n    return factorial_list\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_pal = []\n    even_pal = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            even_pal.append(i)\n        else:\n            odd_pal.append(i)\n    return (len(even_pal), len(odd_pal))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return (len(even), len(odd))\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l, r = 1, n\n    even, odd = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_odd = []\n    even_odd.append(0)\n    even_odd.append(1)\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_odd.append(even_odd[i//2])\n        else:\n            even_odd.append(even_odd[i//2-1]+1)\n    return (even_odd[:n], even_odd[n:])\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = set()\n    result_list = []\n    number = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    palindrome = []\n    odd = []\n    even = []\n    palindrome.append(str(n)[::-1])\n    odd.append(palindrome[0])\n    even.append(palindrome[1])\n    for i in range(2, n):\n        odd.append(palindrome[i])\n        even.append(palindrome[i-1])\n    for palindrome in even:\n        if palindrome[::-1] == palindrome:\n            even.remove(palindrome)\n        else:\n            odd.remove(palindrome)\n    return odd, even\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def odd_even(n):\n        \"\"\"\n        Given an integer n, return a tuple that has the number of even and odd integer\n        palindromes that fall within the range(1, n), inclusive.\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return even_odd_palindrome_helper(0, n, [])\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def check_palindrome(num):\n        \"\"\"\n        check whether num is a palindrome.\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count_even = 0\n    count_odd = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    if count_even % 2 == 0:\n        return (count_even, count_odd)\n    else:\n        return (count_odd, count_even)"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num_dict = {}\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums = {}\n    for ele in arr:\n        if ele > 0:\n            if ele in nums:\n                nums[ele] += 1\n            else:\n                nums[ele] = 1\n    return nums.values()\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len([i for i in arr if len(str(i)) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    for num in arr:\n        if num > 0:\n            result += 1\n    return resul"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    counter = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr)):\n            num += arr[j]**i\n        if num >= 10:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    a = 0\n    for i in arr:\n        if i > 0:\n            a += 1\n    return a\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for num in arr:\n        if num >= 0:\n            sum += 1\n    return su"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return 0\n    sum = 0\n    for i in arr:\n        sum += i\n        if sum > 0:\n            sum = sum % 10\n    return arr.count(sum)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    nums = len(arr)\n    count_num = 0\n    for i in range(nums):\n        if (nums[i] >= 0):\n            count_num += nums[i]\n    return count_num\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    n = len(arr)\n    i = random.randint(1,n-1)\n    temp = arr[i]\n    arr[i] = arr[n-1]\n    arr[n-1] = temp\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # check if the given array is empty\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    size = len(arr)\n    if size == 0:\n        return True\n    # initialize result\n    result = True\n    # recur for every 2nd element\n    for i in range(2):\n        result = move_one_ball(arr[:size-i]) or result\n        # move to the next element\n        result = move_one_ball(arr[size-i:size]) or result\n        # if we get to end of the array\n        if not result:\n            return result\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if not arr or len(arr) == 0:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return False\n    \n    i = 0\n    j = 1\n    if len(arr) % 2!= 0:\n        #we have to move the last element of the array as we do not know its\n        #position\n        i = len(arr)//2\n        arr[i] = arr[len(arr)-1]\n        arr[len(arr)-1] = 0\n    \n    #we have to shift the array 1 position in the right direction until it is\n    #sorted\n    while j < len(arr):\n        if j == 0:\n            arr[0] = arr[1]\n            arr[1] = arr[2]\n            arr[2] = arr[3]\n            arr[3] = arr[4]\n        elif j == 1:\n            arr[j] = arr[0]\n            arr[0] = arr[2]\n            arr[2] = arr[4]\n            arr[4] = arr[3]\n        else:\n            arr[j] = arr[j-1]\n            arr[j-1] = arr[j+1]\n            arr[j+1] = arr[0]\n        \n        j+=1\n        \n        #We have to remember the elements of the array in the index i, thus we\n        #have to check if the list is sorted as the elements in the array are in \n        #the correct position in the list, if not then we do not know what\n        #position this array is in.\n        if j == len(arr):\n            j = 0\n        \n    #the above process results in empty arrays, hence we return True\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return False\n    \n    i = 0\n    for j in range(1, len(arr)):\n        if arr[i] < arr[j]:\n            i = j\n        else:\n            break\n    \n    # i is the starting position of the array\n    # j is the last position of the array\n    for k in range(i, len(arr)):\n        arr[k] = arr[k - 1]\n    \n    arr[i] = arr[len(arr) - 1]\n    arr[len(arr) - 1] = arr[len(arr) - 2]\n    arr[len(arr) - 2] = arr[i]\n    \n    # print(arr)\n    return move_one_ball(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # TODO: Write your code here\n    for i in range(len(arr)):\n        arr[i] = random.randint(1, 10)\n        \n    if check_sorted(arr) == True:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst1) > 0 and len(lst2) > 0:\n        return False\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst1 == lst2:\n        return 'NO'\n    if len(lst1) == len(lst2):\n        for i in lst1:\n            if i not in lst2:\n                return 'NO'\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not lst1:\n        return \"NO\"\n    if not lst2:\n        return \"NO\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    res = []\n    for i in range(len(lst2)):\n        if lst1[i] % 2 == lst2[i] % 2:\n            res.append(lst2[i])\n    if res:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    i = 0\n    j = 0\n    while (i < len(lst1) and j < len(lst2)):\n        if lst1[i] % 2 == lst2[j] % 2:\n            j += 1\n        i += 1\n    return \"YES\" if j < len(lst2) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here\n    try:\n        return (lst1[0] + lst2[0]) % 2 == 0\n    except IndexError:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: fill this in.\n    \n    if len(lst1)%2==0:\n        print('NO')\n        return 'NO'\n    else:\n        print('YES')\n        for i in range(0,len(lst1),2):\n            if lst1[i]%2==0:\n                lst1[i],lst1[i+1]=lst1[i+1],lst1[i]\n        return exchange(lst2,lst1)\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Write your code here\n    lst1_even = []\n    lst2_even = []\n    for i in lst1:\n        if i % 2 == 0:\n            lst1_even.append(i)\n        else:\n            lst2_even.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2_even.append(i)\n        else:\n            lst1_even.append(i)\n    if lst1_even == lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        # for lst1, lst2 in zip(lst1, lst2):\n        #     if len(lst1) % 2 == 0:\n        #         if lst1[-1] % 2 == 0:\n        #             lst1[-1] /= 2\n        #         else:\n        #             lst1[-1] /= 2\n        #             lst1[-1] = lst1[-1] % 2\n        # \n        #         if len(lst2) % 2 == 0:\n        #             if lst2[-1] % 2 == 0:\n        #                 lst2[-1] /= 2\n        # \n        #         else:\n        #             if lst2[-1] % 2 == 0:\n        #                 lst2[-1] /= 2\n        #                 lst2[-1] = lst2[-1] % 2\n        #         break\n        #\n        # return \"YES\"\n        # pass\n        for i in range(len(lst1)):\n            if len(lst2) % 2 == 0:\n                if lst1[i] % 2 == 0:\n                    lst1[i] /= 2\n                else:\n                    lst1[i] /= 2\n                    lst1[i] = lst1[i] % 2\n                break\n            else:\n                if lst2[i] % 2 == 0:\n                    lst2[i] /= 2\n                else:\n                    lst2[i] /= 2\n                    lst2[i] = lst2[i] % 2\n                break\n        return \"YES\"\n    except:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst1) < len(lst2):\n        return \"NO\"\n    elif len(lst1) == len(lst2) and set(lst1) == set(lst2):\n        return \"YES\"\n    elif len(lst1) % 2 == 0:\n        for i in range(0, len(lst1)):\n            lst1[i] = lst1[i]*2\n        return exchange(lst2, lst1)\n    elif len(lst2) % 2 == 0:\n        for i in range(0, len(lst2)):\n            lst2[i] = lst2[i]*2\n        return exchange(lst1, lst2)\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # NOTE: this could be done in one function and repeated for each word, but what's the goals of the solution?\n    # def histogram(s):\n    #     if len(s) == 0:\n    #         return {}\n    #     d = dict()\n    #     for c in s:\n    #         if c not in d:\n    #             d[c] = 0\n    #         d[c] += 1\n    #     return d\n    \n    # return histogram(s)\n    \n    # NOTE: this could be done in one function and repeated for each word, but what's the goals of the solution?\n    # def histogram(s):\n    #     if len(s) == 0:\n    #         return {}\n    #     d = dict()\n    #     for c in s:\n    #         if c not in d:\n    #             d[c] = 0\n    #         d[c] += 1\n    #     return d\n    \n    # return { c:d.get(c,0) for c in s }\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Create a dictionary with the letter as key and the number of occurrences as value\n    counts = collections.Counter()\n    for letter in test:\n        counts[letter] = counts.get(letter, 0) + 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 1\n        else:\n            letter_count[letter] += 1\n    letter_count = sorted(letter_count.items(), key = lambda item : item[1], reverse = True)\n    return letter_count\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    letter_dict = {}\n    for letter in test:\n        if letter in letter_dict:\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    \n    return letter_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    hist_dict = {}\n    for c in test:\n        if c in hist_dict:\n            hist_dict[c] = hist_dict[c]+1\n        else:\n            hist_dict[c] = 1\n    return hist_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    hist = collections.Counter(test.lower())\n    # for word in hist:\n    #     if hist[word] == 1:\n    #         return word\n    # return None\n    for word in sorted(hist, key=lambda word: hist[word], reverse=True):\n        if hist[word] == 1:\n            return word\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    s =''.join(test.lower().split())\n    counts = {}\n    i=0\n    while i<len(s):\n        if s[i] in counts:\n            counts[s[i]] +=1\n        else:\n            counts[s[i]] = 1\n        i += 1\n    l = len(counts)\n    return counts if l>1 else counts[s[0]]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    d = {}\n    for char in test:\n        d[char] = d.get(char, 0) + 1\n    \n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if test == '':\n        return {}\n    letters = {}\n    for i in test.lower():\n        if i not in letters:\n            letters[i] = 1\n        else:\n            letters[i] += 1\n    return letters\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    i = 0\n    j = len(s) - 1\n    while j >= i:\n        if s[j] == c[j]:\n            result.append(s[j])\n            j -= 1\n        else:\n            result.append(s[j])\n            j -= 1\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def reverse_delete(s,c):\n        string = \"\"\n        for char in s:\n            if char not in c:\n                string += char\n        return string,string==s\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s,c=s[::-1],c[::-1]\n    if s==c:\n        return (s,\"True\")\n    else:\n        return (s,\"False\")\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # check palindrome by reversing the string\n    reverse = ''.join(reversed(s))\n    if reverse == c:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    return \"\",False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def isPal(s):\n        \"\"\"Task\n        A string s is palindrome if it reads the same backward as forward.\n        :param s: the string to check\n        :return: true if it is palindrome, otherwise false\n        \"\"\"\n        def remove_p(s):\n            \"\"\"Task\n            Remove all the repeating characters from the string s.\n            :param s: the string to remove the repeating characters from\n            :return: the string after removing the repeating characters\n            \"\"\"\n            result = \"\"\n            curr = s[0]\n            for i in s:\n                if i!= curr:\n                    result += i\n                    curr = i\n            return result\n        \n        def replace_p(s):\n            \"\"\"Task\n            Replace all the repeating characters in the string s by ''.\n            :param s: the string to replace the repeating characters with\n            :return: the string after replacing the repeating characters\n            \"\"\"\n            result = \"\"\n            curr = s[0]\n            for i in s:\n                if i!= curr:\n                    result += i + curr\n                    curr = \"\"\n            return result\n        \n        def isPal(s):\n            \"\"\"Task\n            A string s is palindrome if it reads the same backward as forward.\n            :param s: the string to check\n            :return: True/False for the check\n            \"\"\"\n            if len(s) < 2:\n                return False\n            \n            def check_p(s):\n                \"\"\"Task\n                Check if the characters of the string s are palindromic.\n                :param s: the string to check\n                :return: True/False for the check\n                \"\"\"\n                for i in range(len(s) - 1):\n                    if s[i]!= s[-1 - i]:\n                        return False\n                return True\n            \n            def reverse_p(s):\n                \"\"\"Task\n                Reverses the order of the characters of the string s.\n                :param s: the string to reverse the characters of\n                :return: the string after reversing the characters\n                \"\"\"\n                result = \"\"\n                curr = s[0]\n                for i in s:\n                    result += i + curr\n                    curr = i\n                return result\n            \n            if check_p(s) and reverse_p(s) == s:\n                return True\n            else:\n                return False\n        \n        return (isPal(replace_p(remove_p(s))),isPal(reverse_p(s)))\n    \n    def has_palindrome(s):\n        \"\"\"Task\n        A string s is palindrome if it reads the same backward as forward.\n        :param s: the string to check\n        :return: True/False for the check\n        \"\"\"\n        if len(s) < 2:\n            return False\n        \n        def isPal(s):\n            \"\"\"Task\n            A string s is palindrome if it reads the same backward as forward.\n            :param s: the string to check\n            :return: True/False for the check\n            \"\"\"\n            if len(s) < 2:\n                return False\n            \n            def check_p(s):\n                \"\"\"Task\n                Check if the characters of the string s are palindromic.\n                :param s: the string to check\n                :return: True/False for the check\n                \"\"\"\n                for i in range(len(s) - 1):\n                    if s[i]!= s[-1 - i]:\n                        return False\n                return True\n            \n            def reverse_p(s):\n                \"\"\"Task\n                Reverses the order of the characters of the string s.\n                :param s: the string to reverse the characters of\n                :return: the string after reversing the characters\n                \"\"\"\n                result = \"\"\n                curr = s[0]\n                for i in s:\n                    result += i + curr\n                    curr = i\n                return result\n            \n            if check_p(s) and reverse_p(s) == s:\n                return True\n            else:\n                return False\n        \n        def has_palindrome(s):\n            \"\"\"Task\n            A string s is palindrome if it reads the same backward as forward.\n            :param s: the string to check\n            :return: True/False for the check\n            \"\"\"\n            if len(s) < 2:\n                return False\n            \n        "
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    global count\n    global ans\n    if count >= ans:\n        return None\n    if len(s)!= len(c):\n        return None\n    if len(s) == 1:\n        return None\n    if s[0] == c[-1]:\n        return reverse_delete(s[1:],c[:-1])\n    else:\n        return reverse_delete(s[:-1],c[1:])\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not s:\n        return (None,False)\n    elif not c:\n        return (None,False)\n    if s[0]!= c[0]:\n        return (None,False)\n    else:\n        l,r = 0,len(s)-1\n        while l<=r:\n            if s[l] == c[l]:\n                l+=1\n                l = l%len(s)\n            else:\n                break\n        return (s[l:l+len(c)],True)\n        \ndef reverse_plus(s):\n    \"\"\"Task\n    Given a string, you have to return the reverse of it.\n    You have to return a string where every occurence of the reversed string is removed.\n    Example\n    For s = \"abcdef\", the result should be \"cdeab\"\n    For s = \"abc\", the result should be \"cba\"\n    For s = \"\", the result should be \"\"\n    \"\"\"\n    if not s:\n        return \"\"\n    elif not s:\n        return None\n    l,r = 0,len(s)-1\n    while l<=r:\n        if s[l] == s[r]:\n            l+=1\n            l = l%len(s)\n        else:\n            break\n    s = s[:l]+s[l+1:][::-1]+s[l:]\n    return s\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s.startswith(c):\n        s = s[::-1]\n    else:\n        return (\"\",True)\n    l = 0\n    r = len(s)-1\n    while l < r:\n        if s[l]!= s[r]:\n            return (\"\",False)\n        l += 1\n        r -= 1\n    return (\"\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = reverse_delete(s, c+s[::-1])\n    if result[0] == c:\n        return result[0], False\n    else:\n        return result[0], True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd = 0\n    for i in lst:\n        if int(i[-1])%2==0:\n            odd+=1\n    return [f\"the number of odd elements {odd} the str{odd} of the {odd}put.\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from collections import Counter\n    c = Counter(lst)\n    res = []\n    for i in range(len(c)):\n        if c[i] % 2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    lst = [i.replace(' ','') for i in lst]\n    \n    count = 0\n    for i in lst:\n        if int(i) % 2!= 0:\n            count += 1\n    return [f\"the number of odd elements {count} the str{count} of the {count}put.\"]"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Get the list of strings\n    input_list = list(lst)\n    # Make a list of strings where each string consists of only digits\n    numbers = []\n    # For each element in the list\n    for ele in input_list:\n        # For each element in the element\n        for char in ele:\n            # If there's a digit in the string\n            if char.isdigit():\n                # Add it to the numbers list\n                numbers.append(char)\n    # Return the list\n    return numbers\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for i in lst:\n        i = list(i)\n        odd_len = 0\n        for i in i:\n            if i.isdigit():\n                odd_len += int(i)\n        if odd_len % 2 == 1:\n            res.append(odd_len)\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    output = [''] * len(lst)\n    for i in range(len(lst)):\n        number = int(lst[i])\n        if number % 2!= 0:\n            output[i] = 'the number of odd elements'+ str(number // 2) +'nthe str' + str(number % 2) +'of the'+ str(number // 2) + 'nput.'\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for num in lst:\n        odd = num.count('0')\n        result.append(odd)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_count_list = []\n    for string in lst:\n        if \"0\" in string:\n            odd_count_list.append(string)\n    return odd_count_list\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = [int(x) for x in lst]\n    odd_count = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_count += 1\n    return [lst[0] + str(odd_count)]"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for string in lst:\n        if string.isdigit():\n            if int(string) % 2 == 0:\n                result.append(f\"the number of odd elements {string} the str{string} of the {string}put.\")\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not nums:\n        return 0\n    min_sum = float('inf')\n    start = 0\n    end = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            start += 1\n            min_sum = min(min_sum, nums[i])\n            if end < start + nums[i]:\n                end = start + nums[i]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return min(minSubArraySum_rec(nums, 0, len(nums)))\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    currentSum = 0\n    min_sum = n\n    \n    for i in range(n):\n        currentSum += nums[i]\n        while currentSum >= min_sum:\n            min_sum -= nums[i]\n            \n    return min_sum\n    \nnums = [2, 3, 4, 1, 2, 4]\nprint(minSubArraySum(nums))\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not nums:\n        return 0\n    n = len(nums)\n    minSum = float('inf')\n    totalSum = 0\n    left = 0\n    for right in range(n):\n        totalSum += nums[right]\n        while totalSum >= 0 and right >= left:\n            totalSum -= nums[left]\n            left += 1\n        minSum = min(minSum, right-left)\n    return minSum if minSum >= 0 else 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    cur = sum(nums)\n    s = []\n    for i in range(len(nums)):\n        s.append(nums[i] + cur)\n        cur = min(cur,s[i] if s[i] < cur else 0)\n    return cur\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    start = end = 0\n    sum = 0\n    for end in range(len(nums)):\n        sum += nums[end]\n        if sum < 0:\n            sum = 0\n        else:\n            sum -= nums[start]\n        if sum > 0:\n            start += 1\n        if sum < 0:\n            sum = 0\n            end += 1\n        if sum == 0:\n            return end - start + 1\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # NOTE: it is not clear how to solve this problem\n    \n    def zero_bucket(i, j):\n        \"\"\"\n        Does not have to be a recursive function, it is just a helper function,\n        \"\"\"\n        # TODO: implement the function\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    rows = len(grid)\n    columns = len(grid[0])\n    total_buckets = 1\n    result = 0\n    for i in range(rows):\n        for j in range(columns):\n            if grid[i][j]!= 0:\n                total_buckets += 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if capacity == 1:\n        return 0\n    l_bucket, r_bucket = len(grid), len(grid[0])\n    # The number of wells can be larger than capacity.\n    # Therefore, we need to generate buckets, and we put the max water into a dictionary.\n    water_table = {}\n    for i in range(l_bucket):\n        for j in range(r_bucket):\n            if grid[i][j] not in water_table:\n                water_table[grid[i][j]] = {'left': None, 'right': None}\n                water_table[grid[i][j]]['left'] = l_bucket\n                water_table[grid[i][j]]['right'] = r_bucket\n            if capacity < water_table[grid[i][j]]['left']:\n                water_table[grid[i][j]]['left'] = capacity\n            if capacity < water_table[grid[i][j]]['right']:\n                water_table[grid[i][j]]['right'] = capacity\n    # All buckets are empty.\n    # We need to fill the buckets.\n    for i in range(l_bucket):\n        for j in range(r_bucket):\n            if grid[i][j] not in water_table:\n                continue\n            if water_table[grid[i][j]]['left'] == None:\n                continue\n            if water_table[grid[i][j]]['right'] == None:\n                continue\n            min_left, max_left = math.inf, -math.inf\n            min_right, max_right = math.inf, -math.inf\n            for k in range(water_table[grid[i][j]]['left']):\n                left = grid[i][j] - k\n                if left in water_table:\n                    if water_table[left]['left'] > min_left:\n                        min_left = water_table[left]['left']\n                        if min_left == max_left:\n                            continue\n                    if water_table[left]['right'] > max_right:\n                        max_right = water_table[left]['right']\n                        if max_right == min_right:\n                            continue\n                    grid[i][j] -= k\n                    break\n            for k in range(water_table[grid[i][j]]['right']):\n                right = grid[i][j] + k\n                if right in water_table:\n                    if water_table[right]['left'] > min_left:\n                        min_left = water_table[right]['left']\n                        if min_left == max_left:\n                            continue\n                    if water_table[right]['right'] > max_right:\n                        max_right = water_table[right]['right']\n                        if max_right == min_right:\n                            continue\n                    grid[i][j] += k\n                    break\n    return max(grid[i][j] for i in range(l_bucket) for j in range(r_bucket))\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def solve(grid, bucket_capacity):\n        if not grid or not bucket_capacity:\n            return 0\n        \n        queue = deque([[0,0]])\n        bucket = [[0,0]]\n        water = 0\n        while queue:\n            current_bucket = queue.popleft()\n            \n            for row, col in range(len(grid)):\n                if water + grid[row][col] <= bucket_capacity:\n                    if row == current_bucket[0] and col == current_bucket[1]:\n                        return water + grid[row][col]\n                    \n                    queue.append([row, col])\n                    bucket.append([row, col])\n                    water += grid[row][col]\n            \n            if bucket:\n                bucket.popleft()\n        \n        return water\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    \n    def min_fill(grid, bucket_capacity):\n        import heapq\n        \n        heap = []\n        \n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 1:\n                    heapq.heappush(heap, (grid[i][j], i, j))\n        \n        min_bucket = math.ceil(bucket_capacity / heap[0][2])\n        return heapq.heappop(heap)[2] + min_bucket\n    \n    # Length of the grid\n    m = len(grid)\n    # Number of buckets\n    n = len(grid[0])\n    # Capacity of each bucket\n    c = bucket_capacity\n    # Minimum fill\n    min_fill = math.ceil(c/n)\n    \n    ans = min_fill\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                ans = max(ans, min_fill(grid, c))\n                grid[i][j] = 1\n    \n    return ans\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not grid or not capacity or not grid[0]:\n        return 0\n    n = len(grid[0])\n    left, right = 0, n - 1\n    bucket_size = math.floor(capacity / n)\n    num_buckets = bucket_size\n    max_buckets = 0\n    while left < right:\n        start = (left + right) // 2\n        if max_buckets < start:\n            max_buckets = start\n        elif max_buckets == start:\n            if grid[left][start] == 1:\n                left = start + 1\n                num_buckets -= 1\n            else:\n                right = start\n        elif max_buckets == start + 1:\n            if grid[start][right] == 1:\n                right = start - 1\n                num_buckets -= 1\n            else:\n                left = start\n    return num_buckets\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Step 1: initial max capacity\n    #    i.e. n * n * n * n == capacity\n    n = len(grid)\n    capacity = capacity // n\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n    \n    # \u4f7f\u7528Bucket\u7684\u603b\u957f\u5ea6\uff0c\u8ba1\u7b97\u6700\u5927\u503c\u3002\n    bucket_capacity = math.ceil(math.log(capacity, 2))\n    \n    # \u4f7f\u7528Bucket\u7684\u957f\u5ea6\u521d\u59cb\u5316\u3002\n    buckets = [[0 for _ in range(bucket_capacity+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if j == 0:\n                buckets[i][0] = 1\n            elif j == 1:\n                buckets[i][1] = 1\n            else:\n                buckets[i][j] = buckets[i-1][j-1] + buckets[i-1][j]\n    \n    # \u8ba1\u7b97\u6bcf\u4e00\u6b65\u7684\u6700\u5927\u503c\u3002\n    best_step = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            if buckets[i][j] > buckets[i][j-1] + 1:\n                best_step += 1\n                \n    return best_step\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Approach 1: recursion\n    # Time: O(n^2)\n    # Space: O(n)\n    def _max_fill(grid, curr_bucket_capacity, curr_bucket, curr_i, curr_j):\n        # do nothing\n        if curr_bucket[curr_i][curr_j] == curr_bucket_capacity:\n            return\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # memoization solution\n    # time complexity : O(2^n)\n    # space complexity : O(n)\n    def lower_buckets(row, col):\n        if row == 0 or col == 0:\n            return 0\n        if grid[row][col] == 0:\n            return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    N = len(arr)\n    x, y = 0, 0\n    while y < N:\n        x = arr[x]\n        y += 1\n        while x % 2 == 0:\n            arr[x], arr[y] = arr[y], arr[x]\n            x = x // 2\n            y += 1\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort(key=lambda x: bin_to_dec(x))\n    print(\"\".join(map(str, arr)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # no need to sort the array with just one element\n    if len(arr) == 1:\n        return arr\n    # as we know that the elements in the array have no duplicates,\n    # we can find the leftmost and the rightmost non-zero element\n    left, right = 0, len(arr) - 1\n    #\n    # we will hold the index of the leftmost element\n    while arr[left]!= 0:\n        left += 1\n    #\n    # we will hold the index of the rightmost element\n    while arr[right]!= 0:\n        right -= 1\n    #\n    # we need to copy the array, by swapping the\n    # leftmost and rightmost non-zero element\n    arr[left], arr[right] = arr[right], arr[left]\n    #\n    # we need to sort the remaining elements\n    sort_array(arr[left + 1:])\n    sort_array(arr[:right - left])\n    sort_array(arr[right:])\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for num in arr:\n        if num:\n            result.append(num)\n        else:\n            result.append(-num)\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # To maintain the index in array\n    index = len(arr) - 1\n    # To keep track of original position of the array\n    idx = 0\n    # To keep track of values\n    values = []\n    # To keep track of original position of sorted elements\n    idx_sorted = 0\n    # To keep track of the numbers in original array\n    sorted_vals = []\n    # While current index is not reached\n    while idx_sorted < len(arr):\n        # If current element is in sorted array\n        if arr[idx_sorted] in sorted_vals:\n            # Update index value and values\n            idx_sorted += 1\n            idx += 1\n            # Update values and sorted values\n            values.append(arr[idx_sorted])\n            sorted_vals.append(arr[idx_sorted])\n        # If current element is not in sorted array\n        else:\n            # Update index value and values\n            idx_sorted += 1\n            # Update values and sorted values\n            values.append(arr[idx_sorted])\n            # Update index value\n            idx += 1\n            # Update values and sorted values\n            sorted_vals.append(arr[idx_sorted])\n    # To return the values sorted\n    return sorted_vals\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(arr)):\n        index = binary_index(arr, i)\n        if arr[index] == 0:\n            arr[index], arr[i] = arr[i], arr[index]\n        else:\n            arr[index], arr[i] = arr[i], arr[index]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(arr, key = lambda num: (num & 0b110000000) > 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return arr\n    return sorted(arr, key=int)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [bin(val)[2:] for val in arr]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (int(x/2), (x%2)))\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # create a list of words using a basic string function\n    words = list(word for word in s.split() if len(word) > n)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    if n == 0:\n        return []\n    if s == \"\":\n        return result\n    for letter in s:\n        if letter not in s[:n]:\n            result.append(letter)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = []\n    for c in s:\n        if c.lower() in 'bcdfghjklmnpqrstvwxyz':\n            words.append(c.lower())\n    return word"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [w for w in s.split() if len(w)>=n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = []\n    for word in s.split():\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = []\n    for s in s:\n        if s.lower().count(s.lower()) >= n:\n            words.append(s)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # hint: you'll need a helper function that returns a dictionary, which stores the word with a given index as the key\n    # and the words that start with that word as the value\n    d = dict()\n    #initialize variables\n    i = 1\n    # while i <= n\n    while i <= n:\n        # if there are no words starting with that word\n        if len(s) == 0:\n            return []\n        # if the word exists in the dictionary\n        if s[0] in d:\n            # for every word starting with that word\n            for word in d[s[0]]:\n                # if the word starts with that word and doesn't already exist in the dictionary\n                if s[0] in word and word not in d:\n                    # then add the word to the dictionary\n                    d[word].append(s[0])\n                    # update the counter\n                    i += 1\n        else:\n            # if the word does not start with that word\n            d[s[0]] = [s[0]]\n            # update the counter\n            i += 1\n    return list(d.keys())\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    all_words = []\n    if len(s) <= 0:\n        return all_words\n    \n    for i in range(n):\n        if len(s) >= i:\n            if s[i] == \"a\" or s[i] == \"e\" or s[i] == \"i\" or s[i] == \"o\" or s[i] == \"u\" or s[i] == \"A\" or s[i] == \"E\" or s[i] == \"I\" or s[i] == \"O\" or s[i] == \"U\":\n                continue\n            elif s[i] in \"bcdfghjklmnpqrstvwxyz\":\n                all_words.append(s[i])\n            else:\n                return []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = []\n    \n    if not s:\n        return words\n    \n    for i in range(len(s)):\n        if s[i]!= \" \" and s[i].lower() not in n:\n            words.append(s[i].lower())\n    \n    return words\n    \ndef e(s):\n    \"\"\"Given a string s, return the equivalent of s, where all letters in s are lowercase.\n    If the string s is empty, return an empty string.\n    Examples:\n    e(\"hooo\") ==> \"hellooo\"\n    e(\"Abc def\") ==> \"Abc Def\"\n    e(\"\") ==> \"\"\n    e(\" \") ==> \"\"\n    e(\"nope\") ==> \"\"\n    \"\"\"\n    if not s:\n        return \"\"\n    \n    return s.lower()\n    \ndef remove_punctuation(s):\n    \"\"\"Given a string s, remove all punctuation from it.\n    Examples:\n    remove_punctuation(\"mike\") ==> \"mike\"\n    remove_punctuation(\"Tommy is mike\") ==> \"Tommy is Mike\"\n    \"\"\"\n    punct = [\".\", \"?\", \",\", \":\", \";\", \";\", \"(\", \")\"]\n    for char in punct:\n        s = s.replace(char, \"\")\n    \n    return s\n    \ndef substitute_numbers(s):\n    \"\"\"Given a string s, return a string where all numbers are replaced by their \n    lowercase equivalent.\n    Examples:\n    substitute_numbers(\"one\") ==> \"ooooone\"\n    substitute_numbers(\"two\") ==> \"twooooone\"\n    \"\"\"\n    num_to_lower = {\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\",\n    5: \"five\",\n    6: \"six\",\n    7: \"seven\",\n    8: \"eight\",\n    9: \"nine\",\n    0: \"zero\"\n    }\n    \n    return \"\".join([num_to_lower[i] if i in num_to_lower else i for i in s])\n    \ndef is_palindrome(s):\n    \"\"\"Given a string s, return whether or not it is a palindrome.\n    Examples:\n    is_palindrome(\"racecar\") ==> True\n    is_palindrome(\"rocks\") ==> True\n    is_palindrome(\"xyz\") ==> False\n    \"\"\"\n    return s == s[::-1]\n    \ndef is_palindrome_check(s):\n    \"\"\"Given a string s, return whether or not it is a palindrome.\n    Examples:\n    is_palindrome_check(\"racecar\") ==> True\n    is_palindrome_check(\"rocks\") ==> True\n    is_palindrome_check(\"xyz\") ==> False\n    \"\"\"\n    return s == s[::-1]\n    \ndef main():\n    \n    print(select_words(\"mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3))\n    \n    print(e(\"hooo\"))\n    print(remove_punctuation(\"mike is mike\"))\n    print(substitute_numbers(\"one\"))\n    print(is_palindrome(\"racecar\"))\n    print(is_palindrome_check(\"racecar\"))\n    print(is_palindrome(\"rocks\"))\n    print(is_palindrome(\"xyz\"))\n    \n    # TODO: Complete the remove_punctuation function\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    words = []\n    for char in s:\n        if char not in NON_CONSONANT:\n            words.append(char)\n    if s == \"\":\n        return words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    left_index = 0\n    right_index = len(word) - 1\n    # for vowel in word:\n    #     if word[0]!= word[-1]:\n    #         left_index += 1\n    #     else:\n    #         break\n    #     if left_index >= len(word):\n    #         right_index -= 1\n    #     elif right_index < 0:\n    #         right_index += 1\n    \n    word = word.split()\n    if word[0] == word[-1]:\n        return \"\"\n    left_index_last = 0\n    right_index_last = len(word) - 1\n    for i in range(len(word)):\n        left_index_last += 1\n        right_index_last -= 1\n        if word[i] == \"e\":\n            left_index_last += 1\n            right_index_last -= 1\n        elif word[i] == \"a\":\n            if word[i] == word[i-1]:\n                left_index_last -= 1\n            else:\n                left_index_last += 1\n        elif word[i] == \"o\":\n            if word[i-1] == word[i]:\n                right_index_last += 1\n            else:\n                right_index_last -= 1\n        elif word[i] == \"y\":\n            if word[i-1] == word[i-2]:\n                right_index_last -= 1\n            else:\n                right_index_last += 1\n        else:\n            return \"\"\n    if word[-1] == \"e\":\n        left_index_last -= 1\n    elif word[-1] == \"a\":\n        right_index_last -= 1\n    elif word[-1] == \"o\":\n        right_index_last -= 1\n    elif word[-1] == \"y\":\n        left_index_last -= 1\n    else:\n        return \"\"\n    \n    return word[left_index_last+1:right_index_last]\n    \ndef main():\n    word = input().strip()\n    print(get_closest_vowel(word))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    closest_vowel = \"\"\n    if len(word) < 2:\n        return closest_vowel\n    for i in range(1, len(word)):\n        if word[i].lower() not in VOWELS:\n            continue\n        if word[i-1].lower() not in VOWELS and word[i].lower() not in VOWELS:\n            continue\n        elif word[i-1].lower() in VOWELS and word[i].lower() in VOWELS:\n            continue\n        elif word[i-1].lower() in VOWELS and word[i].lower() not in VOWELS:\n            continue\n        elif word[i-1].lower() not in VOWELS and word[i].lower() not in VOWELS:\n            continue\n        else:\n            if closest_vowel == \"\":\n                closest_vowel = word[i-1] + word[i]\n            else:\n                if word[i-1] < word[i]:\n                    closest_vowel = word[i] + word[i-1]\n                else:\n                    closest_vowel = word[i] + word[i-1]\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # initialize the closest vowel\n    vowel = \"\"\n    \n    # loop over the string\n    for i in range(len(word)):\n        # check if the current letter is a vowel\n        if word[i].isupper():\n            # if it is, add it to the closest vowel\n            if vowel!= word[i:i+2].upper():\n                # if it doesn't have to be, add it to the closest vowel\n                vowel = word[i:i+2].upper()\n        else:\n            # if it isn't, add it to the closest vowel\n            if vowel!= word[i:i+2].lower():\n                # if it doesn't have to be, add it to the closest vowel\n                vowel = word[i:i+2].lower()\n            \n    # if there's no closest vowel, return empty string\n    if vowel == \"\":\n        return \"\"\n    else:\n        return vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u']\n    if word == '':\n        return ''\n    # find the closest vowel\n    closest_vowel = ''\n    for i in range(len(word)-2):\n        if word[i:i+3] in vowels:\n            closest_vowel = word[i:i+3]\n    if closest_vowel == '':\n        return ''\n    # find the closest consonant\n    closest_consonant = ''\n    for i in range(len(word)-2-len(closest_vowel)):\n        if word[i:i+len(closest_vowel)] in vowels:\n            closest_consonant = word[i:i+len(closest_vowel)]\n    if closest_consonant == '':\n        return ''\n    return closest_vowel+closest_consonant\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    def get_index(i, v):\n        for j in range(i, len(v)):\n            if v[j] not in vowels:\n                return j\n        return -1\n    def get_vowel(index, v):\n        if index == len(v):\n            return \"\"\n        i = index + 1\n        while i < len(v):\n            if v[i] == \"a\" or v[i] == \"e\" or v[i] == \"i\" or v[i] == \"o\" or v[i] == \"u\":\n                return v[i]\n            i += 1\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Start from the end and continue until there is no vowel left\n    index = len(word) - 1\n    # Start at the beginning\n    left = 0\n    # The length of the word, including the first vowel\n    length = len(word) - 1\n    # While we are still looking for a vowel\n    while left <= index:\n        # Stop if we have found a consonant\n        if word[left]!= word[length]:\n            break\n        # If the next character is not a vowel, stop\n        if word[left]!= word[index]:\n            break\n        # Increment the left index\n        left += 1\n    # If we didn't find a vowel, it's a vowel\n    if left == index:\n        return \"\"\n    # Else we found a consonant, return the closest vowel\n    return word[left]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    closest_vowel = \"\"\n    lst_consonants = [\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\n    ]\n    for cons in lst_consonants:\n        if cons in word:\n            if word.index(cons) > word.index(word[word.index(cons) - 1]):\n                if word.index(cons) > word.index(word[word.index(cons) + 1]):\n                    consonant = word[word.index(cons) + 1]\n                else:\n                    consonant = word[word.index(cons) - 1]\n            else:\n                consonant = word[word.index(cons) - 1]\n            if len(consonant) == 1:\n                if consonant.lower() not in \"aeiou\":\n                    return consonant\n                if consonant.lower() in \"aeiou\":\n                    consonant = consonant.lower()\n                    if consonant.islower() and word.index(consonant) < word.index(word[word.index(consonant) + 1]):\n                        consonant = consonant.lower()\n        else:\n            return closest_vowel\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l=len(word)\n    first,last=0,l-1\n    while first<=last:\n        mid=(first+last)//2\n        if word[mid] in \"aeiou\":\n            first=mid+1\n        else:\n            last=mid-1\n    return word[first:last+1]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    closest_vowel = \"\"\n    for letter in word:\n        if letter in ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U']:\n            continue\n        if not closest_vowel:\n            closest_vowel = letter\n        else:\n            if letter == closest_vowel[0] and letter!= closest_vowel[1]:\n                closest_vowel = closest_vowel[1]\n                break\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    closest_vowel = \"UNKNOWN\"\n    \n    # Vowels\n    if 'a' <= word[0] <= 'z':\n        closest_vowel = \"a\"\n    if 'A' <= word[-1] <= 'Z':\n        closest_vowel = \"A\"\n    # Lower case\n    word = word.lower()\n    # Lemmatize\n    word = word.replace(\" \",\"\")\n    word = word.replace(\"-\",\"\")\n    word = word.replace(\"--\",\"\")\n    word = word.replace(\"-\",\"\")\n    \n    # If word is empty\n    if not word:\n        return closest_vowel\n    # End word is empty\n    elif word == \"\":\n        return closest_vowel\n    \n    # Find index of leftmost vowel\n    left_vowel_idx = -1\n    for i, word_c in enumerate(word):\n        if word_c == \"A\":\n            left_vowel_idx = i\n            break\n    if left_vowel_idx == -1:\n        return closest_vowel\n    \n    # Get index of leftmost vowel\n    right_vowel_idx = -1\n    for i, word_c in enumerate(word):\n        if word_c == \"Z\":\n            right_vowel_idx = i\n            break\n    if right_vowel_idx == -1:\n        return closest_vowel\n    \n    # Get leftmost vowel\n    left_vowel_start = word[left_vowel_idx].upper()\n    left_vowel_end = word[left_vowel_idx+1:].upper()\n    if left_vowel_start == \"A\" and left_vowel_end == \"Z\":\n        return closest_vowel\n    \n    # Get rightmost vowel\n    right_vowel_start = word[right_vowel_idx].upper()\n    right_vowel_end = word[right_vowel_idx+1:].upper()\n    if right_vowel_start == \"Z\" and right_vowel_end == \"A\":\n        return closest_vowel\n    \n    return closest_vowel\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_balanced(s):\n        stack = []\n        for paren in s:\n            if paren == '(':\n                stack.append('(')\n            else:\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_ok(lst):\n        if len(lst) < 2 or len(lst[0]) < len(lst[1]):\n            return False\n        elif len(lst[0]) == len(lst[1]):\n            return all(lst[0][i] == lst[1][i] for i in range(len(lst[0])))\n        else:\n            return False\n        return True\n    for lst in (['(()(),)', ')()'], ['(())', '())']):\n        if not is_ok(lst): return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Brute force\n    # Time = O(n)\n    # Space = O(n)\n    def is_balanced(s):\n        left = right = 0\n        count = 0\n        for i in s:\n            if i == '(':\n                count += 1\n                if count == 0:\n                    left += 1\n            else:\n                count -= 1\n            if left < 0 or right < 0:\n                return False\n        left -= right\n        if left < 0:\n            return False\n        return True\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # I will use a stack of open parentheses\n    stack = []\n    # I will use a stack of close parentheses\n    stack2 = []\n    \n    # initialize the variables\n    # I will use a stack of strings\n    s1 = ''\n    s2 = ''\n    # loop through the string\n    for char in lst:\n        # if this is a string and there is a open\n        # parentheses that has been popped,\n        # we can append it to the string\n        if char == '(':\n            # append it to the string\n            stack.append(char)\n        elif char == ')':\n            # pop the stack\n            stack.pop()\n        # if this is a string and there is a close\n        # parentheses that has been popped,\n        # we can append it to the string\n        elif char == ')':\n            # if the stack is empty, we'll need\n            # to pop it from the stack\n            # and append it to the string\n            if len(stack) == 0:\n                # stack is empty, we'll need to push the\n                # string back to the stack\n                # and append it to the string\n                stack2.append(s1)\n            # if the stack is not empty, we'll need\n            # to pop it from the stack\n            # and append it to the string\n            else:\n                # we need to pop the open\n                # parentheses from the stack\n                open_paren = stack.pop()\n                # we need to pop the close\n                # parentheses from the stack\n                close_paren = stack2.pop()\n                # we need to append them both to\n                # the string\n                s1 = open_paren + close_paren + char\n        # if this is a string and there is a close\n        # parentheses that has been popped,\n        # we can append it to the string\n        elif char == ')':\n            # if the stack is empty, we'll need\n            # to pop it from the stack\n            # and append it to the string\n            if len(stack) == 0:\n                # stack is empty, we'll need to push the\n                # string back to the stack\n                # and append it to the string\n                stack2.append(s1)\n            # if the stack is not empty, we'll need\n            # to pop it from the stack\n            # and append it to the string\n            else:\n                # we need to pop the open\n                # parentheses from the stack\n                open_paren = stack.pop()\n                # we need to pop the close\n                # parentheses from the stack\n                close_paren = stack2.pop()\n                # we need to append them both to\n                # the string\n                s1 = open_paren + close_paren + char\n    # if the stack is empty, we'll need to push the\n    # string back to the stack\n    # and append it to the string\n    if len(stack) == 0:\n        # stack is empty, we'll need to push the\n        # string back to the stack\n        # and append it to the string\n        stack2.append(s1)\n    # if the stack is not empty, we'll need\n    # to pop it from the stack\n    # and append it to the string\n    else:\n        # we need to pop the open\n        # parentheses from the stack\n        open_paren = stack.pop()\n        # we need to pop the close\n        # parentheses from the stack\n        close_paren = stack2.pop()\n        # we need to append them both to\n        # the string\n        s1 = open_paren + close_paren + char\n    # if the stack is empty, we'll need\n    # to pop it from the stack\n    # and append it to the string\n    if len(stack) == 0:\n        # stack is empty, we'll need to push the\n        # string back to the stack\n        # and append it to the string\n        stack2.append(s1)\n    # if the stack is not empty, we'll need\n    # to pop it from the stack\n    # and append it to the string\n    else:\n        # we need to pop the open\n        # parentheses from the stack\n        open_paren = stack.pop()\n        # we need to pop the close\n        # parentheses from the stack\n        close_paren = stack2.pop()\n        # we need to append them both to\n        # the string\n        s1 = open_paren + close_paren "
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #implement\n    if len(lst) == 2:\n        return lst[0] == lst[1]\n    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # NOTE: You can find a more efficient implementation using a queue\n    # Your implementation should be efficient.\n    # NOTE: You can use a stack implementation as well\n    # For this question, the stack and the queue are provided below\n    # Stack and Queue are implemented as a stack\n    # Queue is implemented as a queue\n    # Priority queue is implemented as a stack\n    q = collections.deque()\n    stack = collections.deque()\n    for el in lst:\n        if el == '(':\n            q.append(el)\n        elif el == ')':\n            if len(q) > 0:\n                stack.append(q.pop())\n            else:\n                return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Time: O(n) + O(n)\n    # Space: O(1)\n    def is_good(s, idx):\n        if idx < 0:\n            return False\n        if idx >= len(s):\n            return True\n        if s[idx] == '(':\n            if is_good(s, idx + 1):\n                return is_good(s, idx + 2)\n        if s[idx] == ')':\n            return is_good(s, idx + 1)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    good_string = False\n    i = 0\n    lst_length = len(lst)\n    if lst_length == 0 or lst_length > 2:\n        return good_string\n    for el in lst:\n        if el == '(':\n            i += 1\n        elif el == ')':\n            i -= 1\n        if i < 0:\n            good_string = False\n            break\n    if good_string == True:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def check_concatenation(lst):\n        d = dict()\n        for i in lst:\n            for j in i:\n                if j in d:\n                    d[j] += 1\n                else:\n                    d[j] = 1\n        for k, v in sorted(d.items()):\n            if v == len(lst) - 1:\n                return 'Yes'\n        return 'No'\n    return check_concatenation(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    max = arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if arr == []:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    temp = []\n    low = max(arr)\n    high = sum(arr)\n    n = len(arr)\n    for i in range(0, k):\n        temp.append(high)\n    for i in range(0, n):\n        temp.append(low)\n    temp.sort()\n    return temp\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(arr)\n    max_so_far = -float(\"inf\")\n    max_ending_here = -float(\"inf\")\n    \n    # Find the starting index of the maximum element in arr\n    for i in range(0, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for item in arr:\n        result.append(item)\n        result.sort()\n    if k > len(result):\n        return []\n    for i in range(len(result)-k):\n        result[i] = result[i+k]\n    return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    curr_arr = [arr[0]]\n    for index in range(1,len(arr)):\n        curr_arr.append(max(arr[index], curr_arr[index-1] + k))\n    return curr_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if k <= 0 or len(arr) < k:\n        return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    ans = []\n    if not arr or k < 1:\n        return ans\n    arr.sort()\n    return ans + arr[-1-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # approach 1\n    # time complexity: O(nlogk)\n    # space complexity: O(k)\n    if not arr:\n        return []\n    \n    heap = []\n    result = []\n    for i in range(len(arr)):\n        heapq.heappush(heap, (-arr[i], i))\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even_list = []\n    odd_list = []\n    #solution(lst)\n    for element in lst:\n        if element % 2 == 0:\n            even_list.append(element)\n        else:\n            odd_list.append(element)\n    return sum(odd_list)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_sum += i\n        else:\n            even_sum += i\n    return odd_sum + even_su"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd = 0\n    odd_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd += lst[i]\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return odd_sum + even_sum"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    odd_sum = 0\n    for i in range(len(lst)):\n        if i%2==0:\n            odd_sum += lst[i]\n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return odd_sum + even_su"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    answer = 0\n    even_num = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_num.append(lst[i])\n    print(even_num)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([n for n in lst if n % 2 == 0])"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    even = []\n    odd = []\n    \n    for i in lst:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    \n    return sum(even + odd)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    arr = sorted(arr)\n    \n    s = 0\n    n = len(arr)\n    \n    for i in range(n):\n        s += arr[i]\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        if n % 2!= 0:\n            break\n        \n    return s\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Clarification: We have to assume that all the integers in the array are \n    # non-negative. If not, then we can make sure that we do not modify the \n    # original array.\n    # The assumption is that arr[i] is always positive and at least one digit \n    # will be present in arr[:i]. Therefore, we can make sure that \n    # arr[:i] is positive and at least one digit will be present in arr[i:].\n    # Because of the fact that arr[i:], arr[:i] and arr[i+1:] are positive and \n    # integers, they can be added together and the sum of the elements with at\n    # most two digits of len(arr) is the answer.\n    if len(arr) < k:\n        return 0\n    if k == 0:\n        return sum(arr)\n    first_k = min(k, len(arr) - k)\n    arr[:first_k] = sorted(arr[:first_k])\n    arr[first_k:] = sorted(arr[first_k:])\n    return add_elements(arr, k - first_k)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not arr or len(arr) < 2:\n        return 0\n    first = k - 1\n    for i in range(first, -1, -1):\n        num = arr[i]\n        if first - i > 1:\n            # print(num, first - i)\n            num = arr[first - i] + arr[first - i + 1]\n            arr[first - i] = num\n    return sum(arr[:first]"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] if (i+1 < len(arr)) and (arr[i]+arr[i+1]) > 10 else arr[i]\n    return sum*2\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return arr[0] + k * (len(arr) - 1 - k) if k > 0 else arr[0]\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = len(arr)\n    result = 0\n    for i in range(l):\n        result += arr[i]\n        if i < l - 1:\n            result *= 10\n            result += arr[i+1]\n    return result\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Use the Double Pointer syntax to store the elements into a list, this will help to avoid O(n) operations\n    # for every element\n    # O(N)\n    length = len(arr)\n    # Python's builtin function 'index' returns the position of an element\n    # O(1)\n    curr_pos = 1\n    while curr_pos < length:\n        element = arr[curr_pos]\n        if element == 0:\n            curr_pos += 1\n            continue\n        \n        # If k is greater than the length of the array, then take the elements between the kth element\n        # and the next kth element\n        # O(n)\n        # k = len(arr) = 4\n        # l = len(arr) = 2 = 1\n        # n = len(arr) = 1 = 1\n        # n = len(arr) = 2 = 2 = 1\n        # n = len(arr
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num_elements = len(arr)\n    s = 0\n    for i in range(num_elements):\n        if i < (num_elements - 2) and arr[i] < arr[i + 1]:\n            s += arr[i]\n        elif i < (num_elements - 2) and arr[i] > arr[i + 1]:\n            s += arr[i + 1]\n        else:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    d = k\n    k = 2 * k\n    if d < len(arr):\n        return sum(arr[:d])\n    for i in range(k, len(arr)):\n        if i >= 2 * k:\n            return arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s=0\n    for i in arr:\n        s+=int(i[:k])\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # initialise list\n    odd_list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # My solution:\n    # def get_collatz(n):\n    #     if n < 1:\n    #         return []\n    #     elif n == 1:\n    #         return [1]\n    #     elif n % 2 == 0:\n    #         return [n // 2, n * 3]\n    #     else:\n    #         return [n * 3, n * 2, n * 2]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    even = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    collatz = [1] # The list to store the odd numbers.\n    # 1 - Choose a potential integer between 2 and the number\n    for i in range(3, n, 2):\n        # Update the last term with the previous term\n        last_term = collatz[-1]\n        # Set the first term to the previous term\n        collatz.append(last_term * 2)\n        # Set the last term to the next term\n        collatz.append(last_term + 1)\n    return collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    start = 1\n    list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odd_collatz = []\n    n_even = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n_even += 1\n        else:\n            n_even += 1\n        n /= 2\n        odd_collatz.append(int(n))\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    prev = 1\n    while prev <= n:\n        if prev % 2 == 0:\n            res.append(prev)\n            prev *= 3\n        else:\n            res.append(prev)\n            prev = prev + 1\n    return res\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    # get the length of the sequence\n    length = len(collatz_sequence)\n    # put 1 in the result list\n    for i in range(1, length, 2):\n        # check if n is odd\n        if n % i == 0:\n            result.append(i)\n            n = n/i\n        else:\n            break\n    # print(result)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd_collatz_sequence = []\n    current_index = 1\n    #while True:\n    #    if current_index % 2 == 0:\n    #        odd_collatz_sequence.append(current_index)\n    #        current_index = current_index + 1\n    #    else:\n    #        break\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_numbers = []\n    i = 1\n    while i <= n:\n        if i%2 == 0:\n            if i == 1:\n                odd_numbers.append(i)\n            else:\n                odd_numbers.append(i)\n            i += 1\n        else:\n            odd_numbers.append(i)\n            i += 1\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    import re\n    if date == '':\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return True if len(date.split('-')) == 3 else False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not date:\n        return False\n    if len(date) == 0:\n        return False\n    days_date = int(date[0:2])\n    month_num = int(date[3:5])\n    day = int(date[5:7])\n    year = int(date[7:9])\n    if month_num > 12 or month_num < 1 or day > 31 or day < 1 or year < 1980 or year > 2100:\n        return False\n    if days_date < 1 or days_date > 30 or month_num > 12 or month_num < 4 or month_num > 11:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    date = date.strip()\n    if date == '':\n        return False\n    \n    if not date.isdigit():\n        return False\n    if len(date) < 1 or len(date) > 31:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    \n    month = date[:2]\n    day = date[2:]\n    if not month.isdigit():\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if not day.isdigit():\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    month_days = ['M','F','J','A','P','S','U','N']\n    if len(date) > 3:\n        if not date[0].isdigit() or not date[2].isdigit() or not date[4].isdigit() or not date[6].isdigit() or not date[8].isdigit() or not date[10].isdigit() or not date[12].isdigit():\n            return False\n        if len(date) == 7:\n            if not date[0].isdigit() or not date[1].isdigit():\n                return False\n            if len(date) == 5 and (int(date[3]) > 31 or int(date[4]) > 31):\n                return False\n            if not (int(date[4]) == 29 and int(date[5]) > 31):\n                return False\n            if int(date[5]) > 30:\n                return False\n            if int(date[6]) > 29:\n                return False\n            if int(date[7]) > 31:\n                return False\n            if len(month_days) > len(date):\n                return False\n        elif len(date) == 6:\n            if not date[0].isdigit() or not date[1].isdigit():\n                return False\n            if len(date) == 5 and int(date[3]) > 31:\n                return False\n            if not (int(date[3]) == 31 or int(date[4]) > 30):\n                return False\n            if int(date[4]) > 29:\n                return False\n            if int(date[3]) > 31:\n                return False\n            if int(date[5]) > 31:\n                return False\n            if len(month_days) > len(date):\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    months_count = ['01','02','03','04','05','06','07','08','09','10','11','12']\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(date) == 0:\n        return False\n    elif not date.isdigit():\n        return False\n    elif int(date) < 1 or int(date) > 31:\n        return False\n    elif date[2:4]!= '-':\n        return False\n    elif not (date[:2].isdigit() and date[2:4].isdigit() and date[4:].isdigit()):\n        return False\n    elif int(date[4:]) < 1 or int(date[4:]) > 31:\n        return False\n    elif int(date[:4]) < 1 or int(date[:4]) > 12:\n        return False\n    elif not date[4:].isalpha():\n        return False\n    elif not date.isalpha():\n        return False\n    elif int(date[4:]) < 1 or int(date[4:]) > 31:\n        return False\n    elif date[0:2]!= '01':\n        return False\n    elif date[0:2]!= '02':\n        return False\n    elif date[0:4]!= '-':\n        return False\n    elif date[:4]!= '-':\n        return False\n    elif date[4:]!= '-':\n        return False\n    elif date[:4]!= '-':\n        return False\n    elif date[4:].isalpha():\n        return False\n    elif date[4:].isdigit():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    month_dict = {'01':1,'02':2,'03':3,'04':4,'05':5,'06':6,'07':7,'08':8,'09':9,'10':10,'11':11,'12':12,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'10':10,'11':11,'12':12}\n    date_string = date.split('-')\n    days = 0\n    month = int(month_dict[date_string[1]])\n    day = int(date_string[2])\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    if day < 0 or day > month_days[month-1]:\n        return False\n    if day > 30:\n        days = 30\n    if month == 2:\n        days = 29\n    if month == 12:\n        days = 30\n    if month in [3, 5, 7, 8, 10, 11]:\n        days = 29\n    if month in [4, 6, 9, 11]:\n        days = 30\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        days = 29\n    if month in [2, 4, 6, 9, 11]:\n        days = 29\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        days = 29\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        int(date)\n        if len(date) < 2 or len(date) > 31:\n            return False\n        if date.find('-') > 0:\n            date = date.split('-')\n            if len(date[0]) == 2 and len(date[1]) > 1:\n                months = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}\n                if int(date[1]) < 1 or int(date[1]) > 12:\n                    return False\n                if months.get(int(date[0]) - 1)!= months.get(int(date[0])):\n                    return False\n                return True\n            else:\n                return False\n        if date.find('/') > 0:\n            date = date.split('/')\n            if len(date[0]) == 2 and len(date[1]) > 1:\n                months = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'}\n                if int(date[1]) < 1 or int(date[1]) > 12:\n                    return False\n                if months.get(int(date[0]) - 1)!= months.get(int(date[0])):\n                    return False\n                return True\n            else:\n                return False\n        if date.find('-') == 0:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if not date:\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        #todo : make it faster\n        txt = txt.replace(\"\\n\",\",\") # replace the newlines with commas\n        txt = txt.split(\",\")\n        txt = [word.lower() for word in txt if len(word) > 0] # remove empty strings\n        return txt\n    except:\n        return [word.lower() for word in txt if len(word) > 0] # remove empty strings\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = txt.split(' ')\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    txt = txt.lower()\n    txt = re.sub('\\s+','', txt) # removes all whitespaces\n    txt = re.sub('[,.]+', '', txt) # removes all commas\n    return txt.split(' ')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    txt = txt.strip().lower()\n    if all([c in string.ascii_lowercase for c in txt]):\n        return list(txt)\n    return [c for c in txt if c in string.ascii_lowercase and txt.count(c) % 2!= 0]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [word.lower().strip(\"abcdef\") for word in txt.split(\",\")]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    txt = str(txt)\n    if txt == \"\":\n        return []\n    if txt.count(\",\")!= 0:\n        return [x.lower().lstrip(\"a\").lstrip(\"b\") for x in txt.split(\",\") if x!= \"\"]\n    else:\n        return [x.lower().lstrip(\"a\").lstrip(\"b\") for x in txt.split() if x!= \"\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(txt) == str:\n        txt = txt.lower()\n    lst = []\n    for i in txt.split(','):\n        if len(i) % 2!= 0:\n            lst.append(i)\n        else:\n            lst.append(i[::2])\n    return lst\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        txt = [s.lower() for s in txt]\n        w = [word.split(\",\") for word in txt]\n        w = [word for sublist in w for word in sublist]\n        w = [word for word in w if len(word)>0]\n        return w\n    except:\n        return [\"\", \"\", \"\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    txt = \"\".join(c for c in txt.lower() if c.isalpha()) # for all char in the string lowercase\n    words = txt.split(\",\")\n    # all words have odd numbers of letters\n    if all(c.isdigit() for c in words):\n        return words\n    return [w for w in words if not w.isspace() and len(w) % 2!= 0]\n    \ndef create_dic(txt):\n    '''\n    Given a string, create a dictionary from the words in the string.\n    Examples\n    create_dic(\"Hello,world!\") \u279e {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}\n    '''\n    txt = txt.lower()\n    dic = {}\n    for w in split_words(txt):\n        dic[w] = dic.get(w, 0) + 1\n    return dic\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(txt) is not str:\n        raise TypeError('txt must be a string')\n    return [word.strip() for word in txt.split(',') if word.strip()]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst_length = len(lst)\n    if lst_length < 2:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # implementation: first check duplicate\n    for item in lst:\n        if item in lst:\n            return False\n    # now loop through, sort, and finally return\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        if lst[0] == lst[1]:\n            return is_sorted(lst[2:])\n        else:\n            return False\n    \n    # if lst[0] == lst[1]:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst[0] == lst[-1]:\n        return True\n    elif lst[0] > lst[-1]:\n        return False\n    else:\n        return True if lst[0] > lst[1] else False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(lst)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] > lst[j]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    if lst[0]!= lst[-1]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in lst:\n        if lst.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if there are two or more duplicate numbers, return false\n    if len(lst) < 2:\n        return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return True\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] == lst[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(int(len(interval1)/2)):\n        if interval1[2*i] <= interval1[2*i+1] and interval1[2*i] <= interval2[2*i] and interval1[2*i+1] <= interval2[2*i+1]:\n            return \"YES\"\n    return \"NO"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"NO\"\n    else:\n        return \"NO\"\n    "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Your code here\n    # 1. for each pair of intervals\n    # 2. if the intervals are closed, there is no intersection\n    # 3. check if length of intersection is a prime number\n    # 4. return \"YES\" if the length of intersection is a prime number\n    # 5. return \"NO\" otherwise\n    # 6. return the length of intersection\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. check if the intervals are closed\n    # 4. return \"NO\" if the intervals do not intersect\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    #  7. return the length of intersection if the intervals are closed\n    \n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. if both intervals are closed\n    # 4. return \"NO\" if the intervals are closed\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    \n    # 1. for each pair of intervals\n    # 2. check if both interval is closed\n    # 3. if both intervals are closed\n    # 4. return \"NO\" if the intervals are closed\n    # 5. return the length of intersection if the intervals are closed\n    \n    #  6. return the length of intersection if the intervals are closed\n    # 7. return \"NO\" if the two intervals do not intersect\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a, b = sorted([interval1, interval2])\n    # \u6839\u636e\u6bd4\u8f83\u5c0f\u7684\u503c\u6392\u5217\n    if a[0] <= b[0]:\n        return \"YES\"\n    if a[1] >= b[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if interval1[0] >= interval1[1]:\n        return \"YES\"\n    if interval2[0] >= interval2[1]:\n        return \"YES\"\n    if interval1[1] > interval2[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if (not interval1[0] <= interval2[0] and not interval2[0] <= interval1[1]):\n        return \"NO\"\n    elif (interval1[1] < interval2[0]):\n        return \"NO\"\n    elif (interval1[0] <= interval2[1] and not interval2[1] <= interval1[1]):\n        return \"NO\"\n    elif (interval1[1] <= interval2[0] and interval2[0] <= interval1[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (interval1[0] > interval1[1]) or (interval1[1] > interval2[0]) or (interval2[0] > interval2[1]):\n        return \"NO\"\n    elif interval1[0] <= interval2[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[0] and interval2[1] < interval1[1]:\n        return \"YES\"\n    elif interval1[1] < interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    elif interval2[0] < interval1[0] and interval2[1] < interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c result \ubcc0\uc218\uc5d0 \ud560\ub2f9\n    result = False\n    if interval1[0] > interval2[1]:\n        result = False\n    elif interval1[1] < interval2[0]:\n        result = False\n    elif interval1[1] == interval2[1]:\n        if interval1[0] > interval2[0]:\n            result = True\n        elif interval1[0] < interval2[1]:\n            result = True\n    # ==================================\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if(interval1[0] <= interval2[1] and interval2[0] >= interval1[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    ret = 1\n    for i in arr:\n        if i >= 0:\n            ret *= abs(i)\n    return ret\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    \n    arr = sorted(arr, key=lambda num: num, reverse=True)\n    max_val = max(arr)\n    arr = [abs(num) for num in arr if num!= 0]\n    magnitude = 1\n    signs = ['1', '-1']\n    for num in arr:\n        magnitude *= (num if num >= 0 else -num)\n        if num > max_val:\n            break\n    return magnitude if magnitude!= 0 else None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    signs = [0 for i in range(len(arr))]\n    total_mags = 0\n    for i in range(len(arr)):\n        signs[i] = (arr[i]*(-1))\n        total_mags += signs[i]\n    for i in range(len(arr)):\n        arr[i] = total_mags*signs[i]\n    return arr\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    magnitudes = [arr.count(i) for i in arr]\n    signs = [1 if arr.count(i) > 0 else -1 for i in arr]\n    prod_signs = [i*j for i, j in zip(magnitudes, signs)]\n    return sum(prod_signs) if prod_signs else Non"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here.\n    if len(arr) == 0:\n        return None\n    magnitude = []\n    for i in arr:\n        magnitude.append(magnitude.pop() if isinstance(i, int) else 0)\n    return prod_signs(magnitude)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Run through each num, multiply by sign if it is + or - and store result in new var\n    result = 1\n    for num in arr:\n        if num > 0:\n            result = result * num\n        else:\n            result = result * -1\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    magnitudes = product_magnitudes(arr)\n    result = 1\n    for i in range(len(magnitudes)):\n        result *= magnitudes[i]\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_p = max(arr)\n    n = len(arr)\n    signs = []\n    res = 0\n    for i in range(n):\n        p = arr[i]\n        if p > 0:\n            res = res + p\n            for j in range(0, n):\n                if arr[j] > 0:\n                    if j > i:\n                        signs.append(arr[j])\n    return res * (1 / max_p) if max_p!= 0 else None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    result = 1\n    for num in arr:\n        result *= -1 if num else 1\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    signs = [0 for _ in range(len(arr))]\n    for i in range(len(arr)):\n        signs[i] = 1\n        if arr[i] > 0:\n            signs[i] = -1\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(grid)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # NOTE: it is O(n*n), where n is the number of rows and columns\n    if not grid:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # NOTE: sorted_values = sorted(grid)\n    sorted_values = sorted(grid)\n    n = len(grid)\n    m = len(grid[0])\n    visited = [False for _ in range(n)]\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if not visited[i]:\n                if i == 0:\n                    dp[i][j] = sorted_values[j]\n                elif j == 0:\n                    dp[i][j] = sorted_values[j]\n                else:\n                    dp[i][j] = dp[i-1][j] + sorted_values[j]\n    # print(dp)\n    return dp[n-1][m-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    path = []\n    if not grid or not k or len(grid[0]) == 1:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    paths = []\n    n = len(grid)\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                if j == 0:\n                    paths.append(grid[i][j])\n                else:\n                    paths.append(grid[i][j])\n                    paths.append(grid[i][j-1])\n            elif i == n - 1:\n                if j == 0:\n                    paths.append(grid[i][j])\n                else:\n                    paths.append(grid[i][j])\n                    paths.append(grid[i][j-1])\n            else:\n                if grid[i][j] == grid[i-1][j]:\n                    paths.append(grid[i][j])\n                    paths.append(grid[i-1][j])\n                else:\n                    paths.append(grid[i][j])\n                    paths.append(grid[i-1][j])\n                    paths.append(grid[i-1][j-1])\n    \n    return paths\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    N = len(grid)\n    if N == 0 or N == 1:\n        return [1]\n    \n    path = [0] * N\n    path[0] = grid[0][0]\n    \n    for i in range(N):\n        if grid[i][0]!= grid[i][-1]:\n            path[i] = grid[i][0]\n        else:\n            path[i] = grid[i][-1]\n        \n        for j in range(1, N):\n            if grid[i][j]!= grid[i][j-1] and grid[i][j]!= grid[i][j+1]:\n                path[i] = grid[i][j]\n                break\n        \n        path[i] = path[i] + path[i - 1]\n        \n    return path"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if k == 1:\n        return grid\n    max_col = len(grid[0])\n    min_col = [0] * max_col\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if i!= len(grid) - 1:\n                min_col[j] = min_col[j] + grid[i][j]\n        min_col[0] = min_col[0] + grid[i][0]\n    k = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if i!= len(grid) - 1:\n                if min_col[j] < grid[i][j]:\n                    k = k + 1\n            else:\n                if min_col[j] < grid[i][0]:\n                    k = k + 1\n    return min_col[k-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    N = len(grid)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # The idea is to use a recursion and the minimum path.\n    # If we choose to do it on the first level, then the sequence is not enough.\n    # If we have a left child, the sequence is too, we need to explore the right child.\n    # If we have a right child, the sequence is too, we need to explore the left child.\n    # In order to find the maximum path from a cell to its left, we need to visit all cells in the left child\n    # and all cells in the right child as well.\n    # We could also have done it using a stack.\n    def minPathHelper(grid, curr_lst, curr_index):\n        if curr_index == len(curr_lst):\n            return curr_lst\n        if curr_lst[curr_index] == 0:\n            return None\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_A, lst_B = [], []\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j]!= 0:\n                lst_A.append(grid[i][j])\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if j == 0:\n                lst_B.append(grid[i][j])\n            elif grid[i][j] == grid[i][j-1]:\n                lst_B.append(grid[i][j])\n    lst_B.sort()\n    lst_A.sort()\n    \n    def minPathHelper(lst_A, lst_B, i):\n        if i == len(lst_A):\n            return 0\n        if lst_A[i] < lst_B[i]:\n            return 1 + minPathHelper(lst_A, lst_B, i + 1)\n        return min(minPathHelper(lst_A, lst_B, i + 1), minPathHelper(lst_A, lst_B, i + 1))\n    \n    return minPathHelper(lst_A, lst_B, 0)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code here\n    if n == 0:\n        return [0, 1]\n    elif n == 1:\n        return [1, 2]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 4, 8]\n    elif n == 5:\n        return [1, 3, 5, 8]\n    else:\n        return [1, 3, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5, 8, 3, 4, 5"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    \n    \n    if n <= 1:\n        return [1]\n    if n == 2:\n        return [3,2]\n    if n == 3:\n        return [3,2,3]\n    if n % 2 == 0:\n        return [tri(n-1) + tri(n-2), tri(n+1), tri(n)]\n    else:\n        return [tri(n-1) + tri(n-2), tri(n-1), tri(n-1), tri(n)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 3:\n        return [1, n]\n    tri_list = [1, n]\n    for i in range(3, n + 1, 2):\n        tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i])\n    return tri_list\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    else:\n        d = n // 2\n        return [tri(n-1) + tri(d) + tri(n-d)]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return [1, 2]\n    elif n == 1:\n        return [3, 2, 1]\n    elif n % 2 == 0:\n        return [1, 2, 3]\n    else:\n        return [1, 3, 2, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # def tri(n):\n    #     if n < 1:\n    #         return []\n    #     elif n == 1:\n    #         return [1]\n    #     elif n == 2:\n    #         return [1, 1]\n    #     elif n == 3:\n    #         return [1, 1, 1]\n    #     elif n == 4:\n    #         return [1, 1, 1, 1]\n    #     else:\n    #         a = []\n    #         for i in range(3, n, 2):\n    #             a.append(i + 2)\n    #         return a\n    def tribonacci(n):\n        if n < 1:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 1, 1]\n        elif n == 4:\n            return [1, 1, 1, 1]\n        else:\n            a = []\n            for i in range(3, n, 2):\n                a.append(i + 2)\n            return a\n    # def tri(n):\n    #     if n < 1:\n    #         return []\n    #     elif n == 1:\n    #         return [1]\n    #     elif n == 2:\n    #         return [1, 1]\n    #     elif n == 3:\n    #         return [1, 1, 1]\n    #     elif n == 4:\n    #         return [1, 1, 1, 1]\n    #     else:\n    #         a = []\n    #         for i in range(3, n, 2):\n    #             a.append(i + 2)\n    #         return a\n    # \n    #\n    # a = []\n    # for i in range(1, n+1):\n    #     if i % 2 == 0:\n    #         a.append(tri(i))\n    #     else:\n    #         a.append(tri(i) + tri(i+1))\n    # return a\n    \n    def tribonacci(n):\n        if n < 1:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 1, 1]\n        elif n == 4:\n            return [1, 1, 1, 1]\n        else:\n            a = []\n            for i in range(3, n, 2):\n                a.append(i + 2)\n            return a\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def fib(n):\n        \"\"\"\n        Fibonacci sequence is a sequence of numbers in which the first two \n        numbers are 0 and 1, and the following numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21,...\n        \"\"\"\n        if n == 0 or n == 1:\n            return [0]\n        if n == 2:\n            return [0, 1]\n        return [fib(n - 1) + fib(n - 2), fib(n - 1) + fib(n - 3)]\n    return fib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def fibo(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 1]\n        for i in range(3, n + 1):\n            temp = fibo(i - 1, memo) + fibo(i - 2, memo) + fibo(i - 3, memo)\n            memo[n] = temp\n        return memo[n]\n    return fibo(n, {})\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if n == 1, return the first number (1)\n    if n == 1:\n        return [1]\n    # recur for the n\n    # define for each number that will be the first n + 1 numbers\n    # the first number in the Tribonacci sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # the first number in the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # for each number\n    # add the current number to the list of the first n + 1 numbers\n    # the last number of the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    # the first number of the sequence is the last number of the sequence\n    # the last number of the sequence is the first number of the sequence\n    def recur(n):\n        \"\"\"recur for n, where n is a non-negative integer\n        return the first n + 1 numbers\"\"\"\n        result = [1, n]\n        if n == 1:\n            return result\n        for i in range(2, n + 1):\n            result.append(result[-1] + result[-2])\n        return result\n    return recur(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    while n:\n        if n % 2 == 1:\n            n //= 10\n        else:\n            n //= 10\n    return n\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = 0\n    while n > 0:\n        n = n % 10\n        num += n\n    return num\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # DO NOT CHANGE THIS FUNCTION\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (n * digits(n-1)) // 2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #return n*(n-1)\n    if n in digits_cache:\n        return digits_cache[n]\n    if n < 2:\n        return 0\n    digits_cache[n] = n * digits(n-1)\n    return digits_cache[n]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    return n*digits(n-1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return 0\n    else:\n        return n * digits(n//2)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a, b = 0, 0\n    while n:\n        a, b = b, a + n % 10\n        n //= 10\n    return a if a % 2 == 0 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Get list of digits\n    digits = str(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    while n > 0:\n        count += n % 10\n        n = n // 10\n    return count\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(string):\n        if string[i] == '[':\n            return False\n        elif string[i] == ']':\n            return True\n        elif string[i] == '{':\n            return is_nested('[')\n        elif string[i] == '}':\n            return is_nested(']')\n        elif string[i] == '.':\n            if string[i - 1] == '{' or string[i - 1] == '}':\n                return True\n            else:\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nested_str = ''\n    for char in string:\n        if char == '[':\n            nested_str += char\n        elif char == ']':\n            if nested_str!= '':\n                return False\n        elif char == ']':\n            if nested_str!= '':\n                return False\n        elif char == ']':\n            if nested_str!= '':\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bracket_dict = {'[]': 0, '[[': 0, ']]]': 0}\n    for i in string:\n        if i in bracket_dict.keys():\n            bracket_dict[i] += 1\n        elif i in bracket_dict.values():\n            bracket_dict[i] = 1\n    if bracket_dict['[]'] >= 1 or bracket_dict['[['] >= 1 or bracket_dict['[]]'] >= 1 or bracket_dict['[]']:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(string) < 2 or len(string) > 3:\n        return False\n    elif string[0] == '[' and string[len(string)-1] == ']':\n        for i in range(2, len(string)):\n            if string[i]!= '[' and string[i]!= ']':\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return any(any([i.isdigit() or i == '.' for i in string]) for i in string)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    brackets = []\n    for char in string:\n        if char == ']':\n            brackets.append(char)\n        elif char == ']':\n            if brackets:\n                brackets.pop()\n        elif char == '[':\n            if brackets:\n                brackets.pop()\n    if not brackets:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return any([brackets_valid(bracket) for bracket in string.split()])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if string == '':\n        return True\n    for i in range(len(string)):\n        if string[i] == '[':\n            if is_nested(string[:i+1]):\n                return True\n        if string[i] == ']':\n            if is_nested(string[:i+1]):\n                return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if string == \"[[]]]\":\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return False if is_nested_recursive(string) == False else True\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # pylint: disable=too-many-statements\n    total = 0\n    for n in lst:\n        total = total + pow(n, 2)\n    return round(total)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return reduce(lambda x,y:x+y, lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for el in lst:\n        sum += el**2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = list(lst)\n    for i in lst:\n        try:\n            print(int(i**2))\n        except:\n            pass\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code goes here\n    return sum([round(x**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum=0\n    for num in lst:\n        sum+=num**2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([((x**2) + x) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if lst == None or len(lst) < 1:\n        return None\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(map(lambda x: x**2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_len = len(lst)\n    sum_squares = 0\n    for i in range(lst_len):\n        sum_squares += lst[i] ** 2\n    return sum_squares\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    txt_len = len(txt)\n    last_char = txt[-1]\n    return last_char =='' or txt_len > 1 and txt[-1] =='' or last_char =='' and txt_len > 1\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (txt[-1] in string.ascii_letters and len(txt) > 1 and txt[-2]!= txt[-1]"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if txt[-1].isalpha():\n        if txt[-1].lower() not in txt.lower():\n            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    str = \"\"\n    for char in txt:\n        if char.isalpha():\n            if char =='':\n                return False\n            else:\n                str += char\n        else:\n            return False\n    if str.endswith(\" \"):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return txt.rfind(\" \") == -1 or txt.rfind(\" \") >= 0\n    return txt.rfind(\" \") == 0 and txt.rfind(\" \") == len(txt) - 1\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return last_char_is_alpha(txt) and not last_char_is_word(txt)\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(txt) == 0:\n        return False\n    \n    if txt[-1] in 'aeiou' and txt[-1]!= txt[0]:\n        return False\n    \n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    # create an empty string\n    final = \"\"\n    # iterate over each character in the string\n    for char in txt:\n        # if the character is a letter\n        if char.isalpha() and count!= 0:\n            # add a letter to the string\n            final += char\n            count += 1\n        # if the character is not a letter\n        else:\n            # if the count is greater than 0\n            if count!= 0:\n                # add a space\n                final += \" \"\n                count -= 1\n            # if the count is equal to zero\n            else:\n                # if the count is less than zero\n                if count == 0:\n                    # if the character is not in the string\n                    final += char\n                    # reset count\n                    count = 0\n    return final == txt\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return True if txt.__contains__('a') or txt.__contains__('A') or txt.__contains__('e') or txt.__contains__('E') or txt.__contains__('i') or txt.__contains__('I') or txt.__contains__('o') or txt.__contains__('O') or txt.__contains__('u') or txt.__contains__('U') or txt.__contains__('y') or txt.__contains__('Y') or txt.__contains__('p') or txt.__contains__('P') or txt.__contains__('q') or txt.__contains__('Q') or txt.__contains__('r') or txt.__contains__('R') or txt.__contains__('s') or txt.__contains__('S') or txt.__contains__('t') or txt.__contains__('T') or txt.__contains__('w') or txt.__contains__('W') or txt.__contains__('x') or txt.__contains__('X') or txt.__contains__('y'):\n        return False\n    \n    return True if txt.__contains__('a') or txt.__contains__('A') or txt.__contains__('e') or txt.__contains__('E') or txt.__contains__('i') or txt.__contains__('I') or txt.__contains__('o') or txt.__contains__('O') or txt.__contains__('u') or txt.__contains__('U') or txt.__contains__('y') or txt.__contains__('Y') or txt.__contains__('p') or txt.__contains__('P') or txt.__contains__('q') or txt.__contains__('Q') or txt.__contains__('r') or txt.__contains__('R') or txt.__contains__('s') or txt.__contains__('S') or txt.__contains__('t') or txt.__contains__('T') or txt.__contains__('w') or txt.__contains__('W') or txt.__contains__('x') or txt.__contains__('X') or txt.__contains__('y'):\n        return False\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] > arr[max_index] and (arr[i] - arr[max_index] >= 2):\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(arr) < 2:\n        return -1\n    elif arr[0] >= arr[1]:\n        return 0\n    else:\n        l = 1\n        r = len(arr) - 1\n        while l < r:\n            mid = l + (r - l) // 2\n            if arr[mid] > arr[mid + 1]:\n                r = mid\n            else:\n                l = mid + 1\n        return l\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    index = len(arr) - 1\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            index = i\n    return index"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not arr:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Fill this in.\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= arr[mid - 1]:\n            return mid\n        elif arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr.sort()\n    last = arr[0]\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i-1] < last:\n            last = arr[i]\n        else:\n            return -1\n    return last\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    idx = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[idx] or arr[idx] == -1:\n            idx = i\n    if idx == -1:\n        return -1\n    else:\n        return idx\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def most_negative_zero(x):\n        if x < 0:\n            return None\n        elif x == 0:\n            return None\n        return -x\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return (None, None)\n    # We'll keep track of the negative integers, which should come after the negative numbers\n    negatives = []\n    # We'll keep track of the positive integers, which should come before the negative numbers\n    positive = []\n    # The first negative number is always positive\n    positive.append(lst[0])\n    # Initialize the second negative number to None\n    negatives.append(None)\n    # The second negative number should be positive\n    negatives.append(lst[1])\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    largest_smallest_neg, smallest_neg = None, None\n    largest_smallest_pos, smallest_pos = None, None\n    for i in lst:\n        if smallest_neg is None:\n            smallest_neg = i\n            continue\n        if smallest_neg < i:\n            if smallest_neg is None or smallest_neg < i:\n                smallest_neg = i\n            continue\n        if smallest_pos is None or smallest_pos < i:\n            smallest_pos = i\n            continue\n    return (largest_smallest_neg, smallest_neg)"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def _largest_smallest_integers(lst):\n        '''\n        Return a tuple (a, b), where a > b\n        '''\n        largest = None\n        smallest = None\n        for i in range(len(lst)):\n            if largest is None or lst[i] > largest:\n                largest = lst[i]\n            if smallest is None or lst[i] < smallest:\n                smallest = lst[i]\n        return (largest, smallest)\n    \n    if len(lst) == 0:\n        return (None, None)\n    else:\n        return _largest_smallest_integers(lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = set(lst)\n    if len(lst) == 0:\n        return None, None\n    else:\n        if len(lst) == 1:\n            return lst.pop(), None\n        else:\n            sorted_lst = sorted(lst)\n            return sorted_lst[-1], sorted_lst[0]"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = max(lst)\n    b = min(lst)\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = sorted(lst)\n    if lst == []:\n        return (None, None)\n    \n    neg_min = lst[0]\n    neg_max = lst[0]\n    pos_min = None\n    pos_max = None\n    \n    for num in lst:\n        if num < 0:\n            neg_min = num\n            neg_max = num\n        elif num > 0:\n            pos_min = num\n            pos_max = num\n        \n    return (neg_max, neg_min)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i > 0:\n            if a == None:\n                a = i\n            else:\n                b = i\n        elif i < 0:\n            if b == None:\n                b = i\n            else:\n                a = i\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = min(lst)\n    e = max(lst)\n    for i in range(s, e+1):\n        if lst[i] > 0:\n            return (i, lst[i])\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def helper(lst, n):\n        if len(lst) == 1:\n            return (lst[0], lst[0])\n        if lst[0] < n:\n            return (lst[0], n)\n        elif lst[0] > n:\n            return (n, lst[0])\n        else:\n            return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) == type(b):\n        if isinstance(a, str) or isinstance(a, float):\n            if isinstance(b, str) or isinstance(b, float):\n                if b == a:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        elif isinstance(a, float) or isinstance(a, int):\n            if isinstance(b, float) or isinstance(b, int):\n                if a == b:\n                    return a\n                else:\n                    return b\n            else:\n                return b\n        else:\n            return b\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a) is float:\n        return float(b)\n    if type(b) is float:\n        return float(a)\n    if type(b) is str:\n        return str(a)\n    if type(b) is int:\n        return int(b)\n    if type(b) is list:\n        return list(a)\n    if type(b) is tuple:\n        return tuple(a)\n    if type(b) is dict:\n        return dict(a)\n    if type(b) is set:\n        return set(a)\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # pass\n    # try:\n    #     if isinstance(a, str):\n    #         if isinstance(b, str):\n    #             if b in a:\n    #                 return a\n    #             elif isinstance(b, float):\n    #                 return b\n    #             else:\n    #                 return b.join(\" \")\n    #         return a\n    #     elif isinstance(a, int):\n    #         if isinstance(b, int):\n    #             return b\n    #         return a\n    #     elif isinstance(a, float):\n    #         if isinstance(b, float):\n    #             return b.join(\" \")\n    #         return a\n    #     elif isinstance(a, complex):\n    #         if isinstance(b, float):\n    #             return complex(a)\n    #         elif isinstance(b, complex):\n    #             return complex(a.real, a.imag)\n    #         else:\n    #             return a\n    # except TypeError:\n    #     return \"Wrong type\"\n    # return None\n    if isinstance(a, str):\n        if isinstance(b, str):\n            if b in a:\n                return a\n            elif isinstance(b, float):\n                return b\n            else:\n                return b.join(\" \")\n        return a\n    elif isinstance(a, int):\n        if isinstance(b, int):\n            return b\n        return a\n    elif isinstance(a, float):\n        if isinstance(b, float):\n            return b.join(\" \")\n        return a\n    elif isinstance(a, complex):\n        if isinstance(b, float):\n            return complex(a)\n        elif isinstance(b, complex):\n            return complex(a.real, a.imag)\n        else:\n            return a\n    else:\n        return \"Wrong type\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(a) is type(b):\n        return max(a, b)\n    else:\n        return type(a)"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a) == int and type(b) == int:\n        return max(a, b)\n    elif type(a) == float and type(b) == float:\n        return min(a, b)\n    elif type(a) == str and type(b) == str:\n        return max(a, b)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a) == str and type(b) == str:\n        return max(a, b)\n    if type(a) == str and type(b) == float:\n        return max(float(a), float(b))\n    if type(a) == float and type(b) == str:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(float(a), float(b))\n    if type(a) == float and type(b) == int:\n        return max(float(a), int(b))\n    if type(a) == float and type(b) == bool:\n        return max(float(a), bool(b))\n    if type(a) == float and type(b) == bool:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == str:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == float:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == int:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == bool:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == bool:\n        return max(bool(a), bool(b))\n    if type(a) == int and type(b) == str:\n        return max(int(a), int(b))\n    if type(a) == int and type(b) == float:\n        return max(int(a), int(b))\n    if type(a) == int and type(b) == int:\n        return max(int(a), int(b))\n    if type(a) == int and type(b) == bool:\n        return max(int(a), int(b))\n    if type(a) == int and type(b) == bool:\n        return max(int(a), int(b))\n    if type(a) == bool and type(b) == str:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == float:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == int:\n        return max(bool(a), bool(b))\n    if type(a) == bool and type(b) == bool:\n        return max(bool(a), bool(b))\n    if type(a) == int and type(b) == bool:\n        return max(int(a), int(b))\n    if type(a) == int and type(b) == bool:\n        return max(int(a), int(b))\n    if type(a) == bool and type(b) == bool:\n        return max(bool(a), bool(b))\n    if type(a) == str and type(b) == str:\n        return max(str(a), str(b))\n    if type(a) == str and type(b) == float:\n        return max(str(a), str(b))\n    if type(a) == str and type(b) == int:\n        return max(str(a), str(b))\n    if type(a) == str and type(b) == bool:\n        return max(str(a), str(b))\n    if type(a) == str and type(b) == bool:\n        return max(str(a), str(b))\n    if type(a) == float and type(b) == str:\n        return max(float(a), str(b))\n    if type(a) == float and type(b) == int:\n        return max(float(a), str(b))\n    if type(a) == float and type(b) == bool:\n        return max(float(a), str(b))\n    if type(a) == float and type(b) == bool:\n        return max(float(a), str(b))\n    if type(a) == bool and type(b) == str:\n        return max(bool(a), str(b))\n    if type(a) == bool and type("
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    if n % 4 == 0:\n        return True\n    if n == 2:\n        return True\n    return is_equal_to_sum_even(n - 2) or is_equal_to_sum_even(n - 3)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_even_nums = 0\n    for even in range(1, 5 + 1):\n        if n % even == 0:\n            sum_even_nums += even\n    return sum_even_nums == 4\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n%4==0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    else:\n        sum = n\n        n = n - sum\n        return (n % 2 == 0) and (n % 4 == 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0 or n % 4!= 0:\n        return False\n    else:\n        if n in (9, 41):\n            return True\n        else:\n            i = 4\n            while i <= n:\n                if n % i == 0:\n                    if i % 2 == 0:\n                        return False\n                i += 4\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n >= 4:\n        if n % 2 == 0 and n % 4 == 0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 4:\n        return True\n    elif n == 6 or n == 8:\n        return False\n    else:\n        if (n % 2 == 0) and (n % 4 == 0):\n            return True\n        elif (n % 2 == 0) and (n % 4!= 0):\n            return False\n        elif (n % 2!= 0) and (n % 4 == 0):\n            return False\n        else:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = sum([i for i in range(n) if (i % 2 == 0 and i % 3 == 0)])\n    return s == 0\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if (n < 0):\n        print(\"ERROR: factorial function can't handle negative values\")\n    elif (n == 0):\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 1 if n == 0 else n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numerator = 1\n    for i in range(1, n + 1):\n        numerator *= i\n    return numerator\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert n >= 0, \"The input should be non-negative.\"\n    assert n <= 10**18, \"The input should be less than 10**18.\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    elif n == 2:\n        return n*(n-1)*(n-2)\n    else:\n        return n*(n-1)*(n-2) * (n-3)*special_factorial(n-2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create n!\n    if n <= 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert type(n) == int and n > 0, \"Please enter a positive integer.\"\n    return n * (n - 1) * (n - 2) *... * 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21)*(n-22)*(n-23)*(n-24)*(n-25)*(n-26)*(n-27)*(n-28)*(n-29)*(n-30)*(n-31)*(n-32)*(n-33)*(n-34)*(n-35)*(n-36)*(n-37)*(n-38)*(n-39)*(n-40)*(n-41)*(n-42)*(n-43)*(n-44)*(n-45)*(n-46)*(n-47)*(n-48)*(n-49)*(n-50)*(n-51)*(n-52)*(n-53)*(n-54)*(n-55)*(n-56)*(n-57)*(n-58)*(n-59)*(n-60)*(n-61)*(n-62)*(n-63)*(n-64)*(n-65)*(n-66)*(n-67)*(n-68)*(n-69)*(n-70)*(n-71)*(n-72)*(n-73)*(n-74)*(n-75)*(n-76)*(n-77)*(n-78)*(n-79)*(n-80)*(n-81)*(n-82)*(n-83)*(n-84)*(n-85)*(n-86)*(n-87)*(n-88)*(n-89)*(n-90)*(n-91)*(n-92)*(n-93)*(n-94)*(n-95)*(n-96)*(n-97)*(n-98)*(n-99)*(n-100)*(n-101)*(n-102)*(n-103)*(n-104)*(n-105)*(n-106)*(n-107)*(n-108)*(n-109)*(n-110)*(n-111)*(n-112)*(n-113)*(n-114)*(n-115)*(n-116)*(n-117)*(n-118)*(n-119)*(n-120)*(n-121)*(n-122)*(n-123)*(n-124)*(n-125)*(n-126)*(n-127)*(n-128)*(n-129)*(n-130)*(n-131)*(n-132)*(n-133)*(n-134)*(n-135)*(n-136)*(n-137)*(n-138)*(n-139)*(n-140)*(n-141)*(n-142)*(n-143)*(n-144)*(n-145)*(n-146)*(n-147)*(n-148)*(n-149)*(n-150)*(n-151)*(n-152)*(n-153)*(n-154)*(n-155)*(n-156)*(n-157)*(n-158)*(n-159)*(n-160)*(n-161)*(n-162)*(n-163)*(n-164)*(n-165)*(n-166)*(n-167)*(n-168)*(n-169)*(n-170)*(n-171)*(n-172)*(n-173)*(n-174)*(n-175)*(n-176)*(n-177)*(n-178)*(n-179)*(n-180)*(n-181)*(n-182)*(n-183)*(n-184)*(n-185)*(n-186)*(n-187)*(n-188)*(n-189)*(n-190)*(n-191)*(n-192)*(n-193)*(n-194)*(n-195)*(n-196)*(n-197)*(n-198)*(n-199)*(n-200)*(n-201)*(n-202)*(n-203)*(n-204)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2,n+1):\n            result = result * i\n        return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    split_text = text.split(' ')\n    new_split_text = []\n    for elem in split_text:\n        new_split_text.append(elem.replace(' ', '_'))\n    new_split_text =''.join(new_split_text)\n    return new_split_text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    new_text = \"\"\n    for i, c in enumerate(text):\n        if i >= 2 and text[i - 2:i]!= \" \":\n            new_text += \"_\"\n        new_text += c\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # FIXME: do some research on string manipulation to try and fix the problem\n    \n    # remove all the spaces in the string\n    text = text.replace(' ', '_')\n    \n    # remove all consecutive spaces\n    # text = re.sub('\\s+', '_', text)\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return text.replace(' ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.replace(' ', '_')\n    if len(text) > 2:\n        text = text[:2] + '_' + text[2:]\n    text = text.replace('  ', '_')\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Fix each string into a single space\n    text = re.sub(\"^\\s+\",\" \",text)\n    text = re.sub(\"\\s+\\s+\",\"_\",text)\n    # Break spaces into different spaces\n    text = re.sub(\"  \",\"_\",text)\n    # Replace spaces back to underscores\n    text = text.replace(\"_\",\" \")\n    # Replace consecutive spaces with -\n    text = text.replace(\"  \",\"_\")\n    # Check if there are more than 2 consecutive spaces\n    count = 0\n    for i in range(len(text)-1):\n        if text[i] == text[i+1]:\n            count += 1\n        if count > 1:\n            text = text[:i]+text[i+1]+text[i]+text[i+2]\n            count = 0\n    # Add final space\n    text += \" _\"\n    # Check if there is any spaces left\n    if len(text) > len(set(text)):\n        raise ValueError(\"Regex has more than two consecutive spaces\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: replace spaces with underscores\n    spaces = []\n    text = text.replace(' ', '')\n    for char in text:\n        if char =='':\n            spaces.append('-')\n        elif len(spaces) > 0:\n            spaces.pop()\n    return ''.join(spaces)\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    new_text = \"\"\n    new_text_len = len(text)\n    \n    # if len(text) > 2:\n    #     i = 1\n    #     while i < new_text_len:\n    #         if text[i] == \" \":\n    #             new_text += \"_\"\n    #         else:\n    #             new_text += text[i]\n    #         i += 1\n    #     text = new_text\n    \n    i = 1\n    while i < new_text_len:\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n        i += 1\n    text = new_text\n    \n    # if len(text) > 2:\n    #     i = 1\n    #     while i < new_text_len:\n    #         if text[i] == \" \":\n    #             new_text += \"_\"\n    #         else:\n    #             new_text += text[i]\n    #         i += 1\n    #     text = new_text\n    \n    # if text[-2:] == \" \":\n    #     new_text += \"_\"\n    #     text = text[:-2]\n    # if text[-2:] == \" \":\n    #     new_text += \"_\"\n    #     text = text[:-2]\n    return text\n    \ndef fix_spaces_2(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example_3\"\n    \"\"\"\n    new_text = \"\"\n    new_text_len = len(text)\n    \n    # if len(text) > 2:\n    #     i = 1\n    #     while i < new_text_len:\n    #         if text[i] == \" \":\n    #             new_text += \"_\"\n    #         else:\n    #             new_text += text[i]\n    #         i += 1\n    #     text = new_text\n    \n    i = 1\n    while i < new_text_len:\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n        i += 1\n    text = new_text\n    \n    # if len(text) > 2:\n    #     i = 1\n    #     while i < new_text_len:\n    #         if text[i] == \" \":\n    #             new_text += \"_\"\n    #         else:\n    #             new_text += text[i]\n    #         i += 1\n    #     text = new_text\n    \n    # if text[-2:] == \" \":\n    #     new_text += \"_\"\n    #     text = text[:-2]\n    # if text[-2:] == \" \":\n    #     new_text += \"_\"\n    #     text = text[:-2]\n    return text\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if file_name == \"\":\n        return \"Yes\"\n    \n    file_name = file_name.strip()\n    \n    # Check if the file's name starts with a latin alphapet letter\n    if not file_name[0].isalpha():\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    file_name = file_name.lower()\n    for i in range(len(file_name)):\n        if file_name[i] in string.digits:\n            if file_name[i-1] in string.digits and file_name[i+1] in string.digits:\n                if file_name[i+2] in string.digits:\n                    if file_name[i+3] in string.digits:\n                        if file_name[i+4] in string.digits:\n                            if file_name[i+5] in string.digits:\n                                return file_name[i:i+4] + \".\" + file_name[i+4] + file_name[i+5] + \".exe\"\n                            else:\n                                return file_name[i:i+5] + \".\" + file_name[i+5] + file_name[i+6]\n                        else:\n                            return file_name[i:i+6] + \".\" + file_name[i+6] + file_name[i+7]\n                    else:\n                        return file_name[i:i+7] + \".\" + file_name[i+7] + file_name[i+8]\n                else:\n                    return file_name[i:i+8] + \".\" + file_name[i+8]\n            else:\n                return \"No.\"\n        else:\n            return \"No.\"\n    else:\n        return \"No.\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not file_name:\n        return \"No\"\n    \n    if len(file_name) < 3:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if(not isinstance(file_name, str)):\n        return 'Error - file_name must be a string'\n    elif(len(file_name) < 3):\n        return 'Error - file_name must be at least 3 characters'\n    elif(not file_name.startswith('.')):\n        return 'Error - file_name must not start with a dot'\n    elif(not all([i.isalnum() for i in file_name])):\n        return 'Error - file_name must consist only of alphabetic characters'\n    elif(len(file_name) > 63):\n        return 'Error - file_name can not be more than 63 characters long'\n    elif(file_name.endswith('.')):\n        return 'Error - file_name can not have extension'\n    return 'File name is valid'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Create a regex that matches the file's name.\n    valid_file_name = re.compile(r'^(?=.*[0-9])(.+)\\.txt$')\n    \n    # Create an empty string that will be checked for valid file names.\n    valid_file_name_string = ''\n    \n    # Check whether or not the file's name is valid.\n    if valid_file_name.match(file_name)!= None:\n        # Check whether or not the file's name contains a number in it's name.\n        # Only check if the file name starts with a number in the middle of the name.\n        # If it does, it must be a latin alphapet letter followed by one or more digits from the left,\n        # followed by a dot ('.') and a letter from the middle (a or b).\n        if re.search(r'^[0-9]\\.[0-9]$', file_name)!= None:\n            # Check whether or not the file's name is the name of a file that's not there.\n            if re.search(r'^(.+)(.+)\\.txt$', file_name)!= None:\n                # Check whether or not the file's name starts with a latin alphapet letter and\n                # contains a number.\n                # Only check if the file's name has one or more dots, starting with a letter from\n                # the left and a dot ('.') and the middle (a or b).\n                if re.search(r'^(?=.*[a-z])(.+)\\.txt$', file_name)!= None:\n                    # Check whether or not the file's name starts with a latin alphapet letter and\n                    # contains one or more digits from the left.\n                    # Only check if the file's name has one or more dots, starting with a letter \n                    # from the left and the dot ('.') and the middle (a or b).\n                    if re.search(r'^(?=.*[a-z])(.+)\\.exe$', file_name)!= None:\n                        # Check whether or not the file's name starts with a latin alphapet letter and\n                        # contains a number.\n                        # Only check if the file's name starts with a latin alphapet letter and \n                        # contains a number from the left.\n                        if re.search(r'^(?=.*[a-z])(.+)\\.exe$', file_name)!= None:\n                            # Check whether or not the file's name starts with a latin alphapet letter \n                            # and contains two or more digits from the left.\n                            # Only check if the file's name starts with a latin alphapet letter and \n                            # contains two or more digits from the left.\n                            if re.search(r'^(?=.*[a-z])(.+)\\.dll$', file_name)!= None:\n                                # Check whether or not the file's name starts with a latin alphapet letter \n                                # and contains two or more digits from the left.\n                                # Only check if the file's name starts with a latin alphapet letter and \n                                # contains two or more digits from the left.\n                                if re.search(r'^(?=.*[a-z])(.+)\\.exe$', file_name)!= None:\n                                    # Check whether or not the file's name starts with a latin alphapet letter \n                                    # and contains two or more digits from the left.\n                                    # Only check if the file's name starts with a latin alphapet letter and \n                                    # contains two or more digits from the left.\n                                    if re.search(r'^(?=.*[a-z])(.+)\\.exe$', file_name)!= None:\n                                        # Check whether or not the file's name starts with a latin alphapet letter \n                                        # and contains three digits from the left.\n                                        # Only check if the file's name starts with a latin alphapet letter and \n                                        # contains three digits from the left.\n                                        if re.search(r'^(?=.*[a-z])(.+)\\.exe$', file_name)!= None:\n                                            # Check whether or not the file's name starts with a latin alphapet letter \n                                            # and contains four digits from th"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if file_name[0] == '.':\n        print(\"The file's name should not contain dots\")\n        return 'No'\n    if len(file_name) < 3:\n        print(\"The file's name should have at least three digits\")\n        return 'No'\n    if file_name[0].isdigit() == False:\n        print(\"The file's name should start with a latin alphapet letter\")\n        return 'No'\n    if file_name[-1] not in ['txt', 'exe', 'dll']:\n        print(\"The file's name should end with 'txt' or 'exe' or 'dll'\")\n        return 'No'\n    print(\"The file's name should have exactly one dot '.'\")\n    return 'No'"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Write your code here.\n    # Only if all three conditions are met, the file's name is valid\n    if not file_name.isalnum():\n        return 'No'\n    if not len(file_name) in range(3,12):\n        return 'No'\n    if not any(char.isdigit() for char in file_name):\n        return 'No'\n    if file_name[0]=='.':\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name[1:2].isalnum():\n        return 'No'\n    if file_name[2].isalpha():\n        return 'No'\n    return 'Yes'\n        \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # first check if the file's name is valid\n    if file_name.lower().startswith(\".\"):\n        return 'No'\n    # then check if the file's name is valid\n    file_name = file_name.strip().split(\".\")[0]\n    if len(file_name) < 3:\n        return 'No'\n    # if all these conditions are met\n    if not file_name.isalpha() or file_name.isnumeric():\n        return 'No'\n    # then check if the file name contains a dot '.'\n    if file_name.startswith(\".\"):\n        return 'No'\n    # then check if the substring before the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name.startswith(\".\"):\n        if file_name.endswith((\"txt\", \"exe\", \"dll\")):\n            return 'No'\n    # then check if the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name.endswith((\"txt\", \"exe\", \"dll\")):\n        if file_name[:2]!= \".\":\n            return 'No'\n    # finally return 'Yes'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    elif not (file_name.startswith('0') or file_name.startswith('9')):\n        return 'No'\n    else:\n        if file_name[0] == '.':\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Create a variable to determine if the file's name is valid\n    # Check that the file name doesn't contain more than three digits, has an exclamation mark ('.') and has a letter ('a'-'z' and 'A'-'Z'):\n    if not '.' in file_name:\n        return 'No'\n    if len(file_name) > 3:\n        return 'No'\n    if not file_name[0].isdigit():\n        return 'No'\n    # Check that the file's name starts with a letter from the latin alphabet ('a'-'z' and 'A'-'Z'):\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name[0].isupper():\n        return 'No'\n    # If the file's name starts with a dot ('.') and it contains an alphabetic substring, \n    # it should be one of these: ['txt', 'exe', 'dll']:\n    if file_name[0].endswith('.'):\n        return 'Yes'\n    # If the file's name doesn't start with a latin alphabet letter, it should be one of these: ['txt', 'exe', 'dll']:\n    if file_name[0].isupper():\n        return 'Yes'\n    # Return 'No' if the file's name doesn't contain one of these: ['txt', 'exe', 'dll']:\n    return 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst_1 = []\n    for i in lst:\n        if i%3==0:\n            lst_1.append(i**2)\n        elif i%4==0:\n            lst_1.append(i**3)\n        else:\n            lst_1.append(i**4)\n    return sum(lst_1)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    return sum([i**2 for i in lst if i % 3!= 0 and i % 4!= 0])\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #TODO: implement this\n    #find a way to do this but not sure\n    return sum([i ** 2 for i in lst if i % 3 == 0 or i % 4!= 0])\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #your code goes here\n    total = 0\n    for i in lst:\n        if (i % 3!= 0) or (i % 4!= 0):\n            total += i**2\n    return total\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 3\n        elif i % 4 == 0 and i % 3!= 0:\n            i = i ** 4\n        else:\n            pass\n    return i\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum=0\n    for i in lst:\n        sum+=i*i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    squares_of_all_lst = []\n    for num in lst:\n        squares = num**2\n        if squares_of_all_lst.count(squares)==0:\n            squares_of_all_lst.append(squares)\n        else:\n            pass\n    for squares in squares_of_all_lst:\n        if squares%3 == 0 or squares%4 == 0:\n            pass\n        else:\n            squares_of_all_lst.remove(squares)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum=0\n    for i in lst:\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Problem:\n    # Time complexity = O(n^2) where n is the length of the input sentence\n    # Space complexity = O(n^2)\n    #\n    # Idea:\n    # You need to return the first word of the input sentence as the first word in the output sentence\n    #\n    # Complexity:\n    # Time complexity = O(n) where n is the length of the input sentence\n    # Space complexity = O(1)\n    #\n    # Notes:\n    # You are not allowed to use any built-in Python functions such as len() or ord()\n    #\n    # Runtime: 36 ms, faster than 58.09% of Python3 online submissions for Words in Sentence.\n    # Memory Usage: 13.9 MB, less than 14.28% of Python3 online submissions for Words in Sentence.\n    words = [word for word in sentence.split(' ')]\n    #words = list(map(lambda x: x[0], sentence.split(' ')))\n    #words = sorted(list(set(words)))\n    for word in words:\n        if len(word) > 1:\n            print(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    word_list = sentence.split()\n    return''.join(word for word in word_list if len(word) % 2 == 0)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = sentence.split()\n    for i in range(len(words)):\n        words[i] = words[i].lower()\n    d = {}\n    for w in words:\n        d[w] = d.get(w, 0) + 1\n    for i in d:\n        if d[i] % 2 == 0:\n            return i\n    return i\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # option 1:\n    #\n    # # convert all words to lower case\n    # sentence = sentence.lower()\n    # # check if the sentence is composed of more than three words\n    # words_in_sentence = sentence.split()\n    # # check if the words in the sentence are prime numbers\n    # prime_words_in_sentence = [1 for word in words_in_sentence if len(word) > 2]\n    # # return the first three words\n    # return ''.join(words_in_sentence[:3])\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # keep track of word length\n    sentence_length = len(sentence)\n    sentence_length += 1 # add one to get 1st and last letter\n    # initialize word_list as empty\n    word_list = []\n    # append all letters to the word_list\n    for letter in sentence:\n        word_list.append(letter)\n    # word_list contains all letters\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = sentence.split()\n    return \" \".join(s)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(sentence)):\n        if len(sentence) % i == 0:\n            return sentence[:i] + \" \" + sentence[i + 1:]\n    return sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(sorted(set(sentence.split())))\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sentence = sentence.split(\" \")\n    sentence = [w.split(\" \") for w in sentence]\n    for i in range(len(sentence)):\n        if not (len(sentence[i])==1 or len(sentence[i])==2):\n            raise ValueError\n    return \" \".join(sentence)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = list(map(int, str(x)))\n    n = list(map(int, str(n)))\n    if len(x) == len(n):\n        x = [1] + x + [1]\n        n = [1] + n + [1]\n        for i in range(len(x)):\n            x[i] = x[i] / n[i]\n        return [x[i] % 2 == 0 for i in range(len(x))]\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        numerator, denominator = x.split('/')\n        if denominator == \"0\":\n            raise ValueError(\"n/d is not a whole number\")\n        else:\n            if numerator == '0':\n                return True\n            else:\n                return False\n    except ValueError:\n        raise ValueError(\"n/d is not a whole number\")\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if x == 0:\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    #print(f\"x = {x}, n = {n}\")\n    if n.isdigit():\n        \n        if int(n) > 0:\n            if (n*int(x)) >= 0:\n                return simplify(x, int(n))\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return(str(int(x) * int(n))) in str(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if isinstance(x, float) or isinstance(x, int):\n        if x < 0 or n < 0:\n            return False\n        elif x < 0.5:\n            return True\n        else:\n            return x * n > 0\n    elif isinstance(x, tuple) or isinstance(x, list):\n        if all(isinstance(elem, float) or isinstance(elem, int) for elem in x):\n            if x[0] < 0 or n < 0:\n                return False\n            elif x[0] < 0.5:\n                return True\n            else:\n                return x[0] * n > 0\n        else:\n            return False\n    else:\n        raise TypeError(\"Invalid type: must be float, tuple or list\")\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == \"\":\n        return False\n    if x == \"\":\n        return False\n    if type(x)!= str or type(n)!= str or type(n)!= str:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not nums:\n        return []\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # print('*******************')\n    # print(nums)\n    # print(type(nums))\n    nums = sorted(nums)\n    # print(nums)\n    # print(type(nums))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pas"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # create a list of lists to sort\n    lists = []\n    for num in nums:\n        if isinstance(num, int):\n            num_list = [num]\n        else:\n            num_list = list(num)\n        for digit in num_list:\n            sum_digit = sum(list(map(int, str(digit))))\n            index = num_list.index(digit)\n            lists.append([index, sum_digit])\n    # sort the lists\n    lists = sorted(lists, key = lambda tup: tup[0])\n    return [num for _, num in lists]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sums = 0\n    \n    for num in nums:\n        sums += num\n    \n    nums.sort(reverse = True)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    nums.sort()\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # print(nums)\n    def ord_sum(nums):\n        sum = 0\n        for num in nums:\n            sum += num\n        # print(sum)\n        return sum\n    if nums == []:\n        return []\n    else:\n        nums.sort(key=ord_sum)\n        # print(nums)\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    nums.sort(reverse = True)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = sum([int(x) for x in nums])\n    nums.sort(key=lambda x: sum([int(y) for y in str(x)]))\n    return nums\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here\n    l = 0\n    if nums[0] < 10:\n        for i in range(len(nums)):\n            if i == 0:\n                l += 1\n            elif i > 0 and nums[i] % 10 == 10:\n                l += 1\n        return l\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 10:\n            if (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n        elif nums[i] % 2!= 0:\n            if (nums[i] % 2 == 1) and (nums[i] > 0):\n                count += 1\n            elif (nums[i] % 2 == 0) and (nums[i] > 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # write your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]>=10 and (nums[i]%2==1):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num % 10 > 0 and num % 10 % 10 > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(nums)-len(set(nums))\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10:\n            if nums[i]%2 == 0:\n                evens += 1\n            else:\n                odds += 1\n        else:\n            if nums[i]%2!= 0:\n                evens += 1\n            else:\n                odds += 1\n    return evens + odds\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd = 0\n    even = 0\n    for num in nums:\n        if num >= 10:\n            if num % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n    return odd + even\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i > 0 and j > 0 and nums[i] > nums[j]:\n                result += 1\n    return result"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def countTriples(n):\n        if n <= 1:\n            return 1\n        elif n % 3!= 0:\n            return 0\n        else:\n            a = [1, 3, 7, 13, 21]\n            for i in range(2, n, 3):\n                a.append((a[i-1]*a[i-2] + a[i-2]*a[i-3]) % 1000000007)\n            return sum(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = [1 for i in range(n)]\n    for i in range(n):\n        a[i] = i * i - i + 1\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 0\n    \n    result = [0]*n\n    result[0] = 1\n    result[1] = 2\n    result[2] = 3\n    result[3] = 4\n    result[4] = 5\n    \n    for i in range(5, n):\n        result[i] = result[i-1] + 3*i + 2*i*2 + i*i + 2\n        \n    return result[n-1]\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = [1]*n\n    for i in range(2, n+1):\n        a[i] = a[i-1] + a[i-2] + a[i-3]\n    return sum(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    triple_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i * i + j * j + k * k == n * n:\n                    triple_count += 1\n    return triple_count\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 0: return 0\n    return sum([ (i*(i-1))%10 for i in range(1, n+1) ])"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    a = [i * i - i + 1 for i in range(n)]\n    \n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    cnt += 1\n                    \n    return cnt\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def get_max_triples(a, n):\n        d = {1:1}\n        for i in range(n):\n            d[a[i]] = d.get(a[i],0) + 1\n        for i in range(n):\n            for j in range(i+1,n):\n                for k in range(j+1,n):\n                    if a[i]+a[j]+a[k] % 3 == 0:\n                        d[a[i]+a[j]+a[k]] = max(d.get(a[i]+a[j]+a[k],0), d.get(a[i]+a[j]+a[k],1))\n        return d.get(1,0)\n    return get_max_triples(n, n)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Create an array to store all triples\n    triples = []\n    for i in range(1, n):\n        triples.append(i * i - i + 1)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if planet1 not in Planet.get_planet_names():\n        return None\n    if planet2 not in Planet.get_planet_names():\n        return None\n    return sorted(set([p for p in Planet.get_planet_names() if Planet.get_name(p) == planet1 or Planet.get_name(p) == planet2]))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return planet1, planet2\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Import math\n    import math\n    \n    # Make a list of planet objects and return the list\n    planets = (Planet(planet1, math.sin(math.radians(0))), Planet(planet2, math.sin(math.radians(1))), Planet(planet2, math.sin(math.radians(2))), Planet(planet1, math.sin(math.radians(3))), Planet(planet1, math.sin(math.radians(4))), Planet(planet1, math.sin(math.radians(5))), Planet(planet1, math.sin(math.radians(6))), Planet(planet1, math.sin(math.radians(7))), Planet(planet1, math.sin(math.radians(8))), Planet(planet1, math.sin(math.radians(9))), Planet(planet1, math.sin(math.radians(10))), Planet(planet1, math.sin(math.radians(11))), Planet(planet1, math.sin(math.radians(12))))\n    \n    # Return the sorted list of planets\n    return sorted(planets)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    planet1 = planet1.lower().replace(' ', '-')\n    planet2 = planet2.lower().replace(' ', '-')\n    planet1 = planet1.split('-')\n    planet2 = planet2.split('-')\n    if planet1[0] == planet2[0]:\n        if planet1[1] == 'Jupiter':\n            if planet2[1] == 'Saturn':\n                if planet2[2] == 'Uranus':\n                    return planet1, planet2\n                else:\n                    return planet1\n            elif planet2[2] == 'Uranus':\n                if planet1[1] == 'Jupiter':\n                    if planet2[1] == 'Saturn':\n                        return planet1, planet2\n                    else:\n                        return planet1, planet2\n                else:\n                    return planet1, planet2\n        elif planet1[1] == 'Saturn':\n            if planet2[2] == 'Uranus':\n                return planet1, planet2\n            else:\n                return planet1, planet2\n        elif planet1[1] == 'Uranus':\n            if planet2[1] == 'Jupiter':\n                if planet1[0] == 'Saturn':\n                    return planet1, planet2\n                else:\n                    return planet1, planet2\n            elif planet2[0] == 'Jupiter':\n                return planet1, planet2\n        elif planet1[0] == 'Mercury':\n            if planet2[1] == 'Uranus':\n                if planet2[2] == 'Jupiter':\n                    return planet1, planet2\n                else:\n                    return planet1, planet2\n            else:\n                return planet1, planet2\n        else:\n            return planet1, planet2\n    elif planet1[0] == 'Uranus':\n        if planet2[0] == 'Jupiter':\n            return planet1, planet2\n        else:\n            return planet1, planet2\n    elif planet1[0] == 'Neptune':\n        if planet2[0] == 'Jupiter':\n            return planet1, planet2\n        else:\n            return planet1, planet2\n    else:\n        return planet1, planet2\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if planet1!= planet2:\n        return tuple()\n    elif planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Neptune\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Neptune\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mars\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n    elif planet1 == \"Neptune\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Venus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Venus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Venus\")\n    elif planet1 == \"Venu"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return None\n    # pass\ndef orbits(year, planet1, planet2):\n    '''\n    Return all the orbits of the three planets, in the order they are\n    part of the solar system. \n    Given a year and a planet name, return a list of all orbits.\n    The planets are in the order that they appear in the list. \n    Examples\n    orbits(2000, \"Mercury\", \"Uranus\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Mercury\"]\n    orbits(2000, \"Mercury\", \"Uranus\", \"Earth\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Earth\", \"Mercury\"]\n    '''\n    return None\n    # pass\ndef correct_planet_name(planet1, planet2):\n    '''\n    Given a planet name, return the planet name that is correctly spelled. \n    The planet name is spelled by adding the space before the word, if it exists.\n    Examples\n    correct_planet_name(\"Jupiter\", \"Saturn\") ==> \"Saturn\"\n    correct_planet_name(\"Earth\", \"Uranus\") ==> \"Uranus\"\n    correct_planet_name(\"Mercury\", \"Uranus\") ==> \"Uranus\"\n    '''\n    return None\n    # pass\ndef planet_list(planet1, planet2):\n    '''\n    Given two planet names, return a list of all the planets. \n    The planets are in the order that they appear in the list. \n    Examples\n    planet_list(\"Jupiter\", \"Saturn\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\"]\n    planet_list(\"Jupiter\", \"Uranus\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Earth\", \"Mercury\"]\n    '''\n    return None\n    # pass\ndef planet_dictionary(planet1, planet2):\n    '''\n    Given two planet names, return a dictionary of the planets with the \n    consequentially identical planet names. \n    The dictionary is in the order that they appear in the list. \n    Examples\n    planet_dictionary(\"Jupiter\", \"Saturn\") ==> {\"Saturn\": \"Jupiter\", \"Mercury\": \"Jupiter\", \"Earth\": \"Jupiter\", \"Uranus\": \"Jupiter\"}\n    planet_dictionary(\"Jupiter\", \"Uranus\") ==> {\"Saturn\": \"Jupiter\", \"Mercury\": \"Jupiter\", \"Earth\": \"Jupiter\", \"Uranus\": \"Jupiter\"}\n    '''\n    return None\n    # pass\ndef planet_orbits(planet1, planet2):\n    '''\n    Given two planet names, return a list of all orbits. \n    The planets are in the order that they appear in the list. \n    Examples\n    planet_orbits(\"Jupiter\", \"Saturn\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Mercury\"]\n    planet_orbits(\"Jupiter\", \"Uranus\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Earth\", \"Mercury\"]\n    '''\n    return None\n    # pass\ndef planet_numbers(planet1, planet2):\n    '''\n    Given two planet names, return a list of all planet numbers. \n    The planets are in the order that they appear in the list. \n    Examples\n    planet_numbers(\"Jupiter\", \"Saturn\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Mercury\"]\n    planet_numbers(\"Jupiter\", \"Uranus\") ==> [\"Saturn\", \"Jupiter\", \"Uranus\", \"Neptune\", \"Earth\", \"Mercury\"]\n    '''\n    return None\n    # pass\ndef equation(a, b, c):\n    '''\n    Given two real numbers, return the equation for those two numbers. \n    The equation is in the form of a + bx + c. \n    Equation has always a number followed by a sign. \n    Examples\n    equation(1, 1, 1) ==> 1x + 1\n    equation(1, -1, 1) ==> -1x + 1\n    equation(1, 1, 0) ="
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def coords(planet1, planet2):\n        planet1 = planet1.lower()\n        planet2 = planet2.lower()\n        return ((x**2 + y**2)**0.5 for x,y in zip(planet1, planet2))\n    #https://stackoverflow.com/questions/12023092/how-to-remove-all-occurence-of-a-string-in-python-using-set-remove\n    def check_planet(planet, planet_set):\n        if planet in planet_set:\n            planet_set.remove(planet)\n    #Some necessary functions\n    def list_of_all_names(names):\n        '''\n        list_of_all_names(planet1) --> [[\"Mercury\", \"Venus\"], [\"Earth\", \"Mars\", \"Jupiter\"],...]\n        list_of_all_names(planet2) --> [[\"Saturn\", \"Uranus\"], [\"Mercury\", \"Venus\", \"Earth\"],...]\n        '''\n        planet_names = []\n        for name in names:\n            for planet in [name, name.lower()]:\n                check_planet(planet, planet_names)\n        return planet_names\n    #These two functions are equivalent to the previous one, except they take in\n    #two arguments, planet1 and planet2.\n    def orbit_of_planet(planet1, planet2):\n        '''\n        orbit_of_planet(planet1, planet2)\n        Returns the distance (in kilometers) between the two given planets\n        '''\n        return sum(map(lambda coord: (coord[0]**2 + coord[1]**2)**0.5, coords(planet1, planet2)))**0.5\n    #The following lists are just the examples of the lists, that have the correct \n    #ordering. \n    #print(list_of_all_names([\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]))\n    #print(list_of_all_names([\"Saturn\", \"Uranus\", \"Venus\", \"Earth\", \"Mercury\", \"Jupiter\", \"Neptune\"]))\n    #print(list_of_all_names([\"Uranus\", \"Jupiter\", \"Saturn\", \"Earth\", \"Mercury\", \"Neptune\"]))\n    print(f\"You are orbiting around the following planets: {list_of_all_names(planet1)}{list_of_all_names(planet2)}\")\n    print(f\"The distance between the two planets is: {orbit_of_planet(planet1, planet2)}\\n\")\n    \ndef sphere(diameter, radius):\n    '''\n    diameter = float radius = 3.14\n    Write a function that returns the diameter of a sphere.\n    The function should return the equivalent of the radius of a sphere.\n    Examples\n    sphere(3, 3) ==> 3\n    sphere(1.1, 3.1) ==> 3.14\n    sphere(5, 2) ==> 2\n    '''\n    return 2*pi*radius**2\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Mercury\" and planet2 == \"Neptune\":\n        return (\"Neptune\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Neptune\":\n        return (\"Neptune\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Jupiter\")\n    elif planet1 == \"Neptune\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Neptune\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Jupiter\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Mercury\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Venus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Mercury\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Satur"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    moon1 = get_moon(planet1)\n    moon2 = get_moon(planet2)\n    # print(moon1)\n    # print(moon2)\n    if moon1 == \"Saturn\" and moon2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif moon1 == \"Uranus\" and moon2 == \"Neptune\":\n        return (\"Uranus\", \"Neptune\")\n    elif moon1 == \"Mercury\" and moon2 == \"Uranus\":\n        return (\"Mercury\", \"Uranus\")\n    elif moon1 == \"Mercury\" and moon2 == \"Venus\":\n        return (\"Venus\", \"Mercury\", \"Saturn\")\n    elif moon1 == \"Venus\" and moon2 == \"Mercury\":\n        return (\"Venus\", \"Mercury\", \"Saturn\")\n    elif moon1 == \"Mercury\" and moon2 == \"Mars\":\n        return (\"Mercury\", \"Mars\", \"Saturn\")\n    elif moon1 == \"Mars\" and moon2 == \"Uranus\":\n        return (\"Mars\", \"Uranus\")\n    elif moon1 == \"Uranus\" and moon2 == \"Neptune\":\n        return (\"Uranus\", \"Neptune\")\n    elif moon1 == \"Saturn\" and moon2 == \"Jupiter\":\n        return (\"Saturn\", \"Jupiter\")\n    elif moon1 == \"Saturn\" and moon2 == \"Venus\":\n        return (\"Saturn\", \"Venus\")\n    elif moon1 == \"Saturn\" and moon2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mercury\":\n        return (\"Jupiter\", \"Mercury\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Venus\":\n        return (\"Jupiter\", \"Venus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Neptune\":\n        return (\"Jupiter\", \"Neptune\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mercury\":\n        return (\"Jupiter\", \"Mercury\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Venus\":\n        return (\"Jupiter\", \"Venus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mars\":\n        return (\"Jupiter\", \"Mars\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Neptune\":\n        return (\"Jupiter\", \"Neptune\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mercury\":\n        return (\"Jupiter\", \"Mercury\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Venus\":\n        return (\"Jupiter\", \"Venus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mars\":\n        return (\"Jupiter\", \"Mars\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n        return (\"Jupiter\", \"Uranus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Mercury\":\n        return (\"Jupiter\", \"Mercury\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Venus\":\n        return (\"Jupiter\", \"Venus\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif moon1 == \"Jupiter\" and moon2 == \"Uranus\":\n    "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    temp = \"Jupiter\"\n    if planet2 == \"s\":\n        temp = \"Saturn\"\n    if planet2 == \"r\":\n        temp = \"Uranus\"\n    if planet2 == \"v\":\n        temp = \"Venus\"\n    if planet2 == \"a\":\n        temp = \"Neptune\"\n    if planet2 == \"m\":\n        temp = \"Mars\"\n    if planet2 == \"p\":\n        temp = \"Perihelion\"\n    if planet2 == \"r\":\n        temp = \"Riamus\"\n    if planet2 == \"d\":\n        temp = \"Mercury\"\n    if planet2 == \"i\":\n        temp = \"Pluto\"\n    if planet2 == \"t\":\n        temp = \"Venus\"\n    if planet2 == \"y\":\n        temp = \"Earth\"\n    if planet1 == \"e\":\n        temp = \"Earth\"\n    if planet1 == \"r\":\n        temp = \"Mars\"\n    if planet1 == \"b\":\n        temp = \"Jupiter\"\n    if planet1 == \"n\":\n        temp = \"Saturn\"\n    if planet1 == \"g\":\n        temp = \"Uranus\"\n    if planet1 == \"j\":\n        temp = \"Neptune\"\n    if planet1 == \"c\":\n        temp = \"Mercury\"\n    if planet1 == \"p\":\n        temp = \"Perihelion\"\n    if planet1 == \"t\":\n        temp = \"Riamus\"\n    if planet1 == \"a\":\n        temp = \"Uranus\"\n    if planet1 == \"n\":\n        temp = \"Venus\"\n    if planet1 == \"j\":\n        temp = \"Earth\"\n    if planet1 == \"i\":\n        temp = \"Pluto\"\n    if planet1 == \"y\":\n        temp = \"Mercury\"\n    if planet1 == \"e\":\n        temp = \"Mars\"\n    if planet1 == \"r\":\n        temp = \"Jupiter\"\n    if planet1 == \"d\":\n        temp = \"Saturn\"\n    if planet1 == \"s\":\n        temp = \"Uranus\"\n    if planet1 == \"g\":\n        temp = \"Perihelion\"\n    if planet1 == \"c\":\n        temp = \"Pluto\"\n    if planet1 == \"p\":\n        temp = \"Mercury\"\n    if planet1 == \"t\":\n        temp = \"Venus\"\n    if planet1 == \"a\":\n        temp = \"Earth\"\n    if planet1 == \"y\":\n        temp = \"Mars\"\n    if planet1 == \"e\":\n        temp = \"Jupiter\"\n    if planet1 == \"n\":\n        temp = \"Saturn\"\n    if planet1 == \"d\":\n        temp = \"Uranus\"\n    if planet1 == \"s\":\n        temp = \"Perihelion\"\n    if planet1 == \"j\":\n        temp = \"Mercury\"\n    if planet1 == \"i\":\n        temp = \"Pluto\"\n    if planet1 == \"c\":\n        temp = \"Venus\"\n    if planet1 == \"y\":\n        temp = \"Earth\"\n    if planet1 == \"e\":\n        temp = \"Mars\"\n    if planet1 == \"r\":\n        temp = \"Jupiter\"\n    if planet1 == \"n\":\n        temp = \"Saturn\"\n    if planet1 == \"n\":\n        temp = \"Uranus\"\n    if planet1 == \"a\":\n        temp = \"Perihelion\"\n    if planet1 == \"p\":\n        temp = \"Jupiter\"\n    if planet1 == \"j\":\n        temp = \"Saturn\"\n    if planet1 == \"c\":\n        temp = \"Venus\"\n    if planet1 == \"t\":\n        temp = \"Earth\"\n    if planet1 == \"e\":\n        temp = \"Pluto\"\n    if planet1 == \"n\":\n        temp = \"Mars\"\n    if planet1 == \"g\":\n        temp = \"Pluto\"\n    if planet1 == \"i\":\n        temp = \"Earth\"\n    if planet1 == \"j\":\n        temp = \"Jupiter\"\n    if planet1 == \"t\":\n        temp = \"Pluto\"\n    if plane"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(lst) is not list:\n        raise TypeError(str(type(lst)))\n    if not lst:\n        return lst\n    lst_lengths = []\n    for word in lst:\n        lst_lengths.append(len(word))\n    if len(lst_lengths) % 2!= 0:\n        sorted_list_sum(lst)\n        for i in range(len(lst)):\n            if lst_lengths[i] % 2 == 1:\n                for j in range(i+1,len(lst)):\n                    if lst[i] > lst[j]:\n                        lst[i],lst[j] = lst[j],lst[i]\n        return sorted_list_sum(lst)\n    elif len(lst_lengths) == 1:\n        return sorted(lst)\n    else:\n        sorted_list_sum(lst)\n        for i in range(len(lst)):\n            if lst[i] > lst[i+1]:\n                lst[i],lst[i+1] = lst[i+1],lst[i]\n        return sorted(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst.sort()\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(map(str.strip, sorted(lst, key=lambda w: len(w), reverse=True)))\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # could be simplified by using a dictionary\n    # to store the word lengths\n    # and sort the lists\n    # then let's get the length of every word\n    word_lengths = {}\n    for word in lst:\n        if len(word) in word_lengths:\n            word_lengths[len(word)] += 1\n        else:\n            word_lengths[len(word)] = 1\n    # sort the word length and set it as the smallest\n    # and largest word\n    sorted_lengths = sorted(word_lengths.items(), key=lambda x: x[1])\n    # remove the same word\n    sorted_lengths.pop(sorted_lengths.index((\"\", 0)))\n    # remove the same word\n    sorted_lengths.pop(sorted_lengths.index((\"\", 1)))\n    # remove the word from the list\n    # and add it as an end of word\n    lst = [x for x in lst if x not in sorted_lengths]\n    # return the sorted list\n    return sorted_lengths\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst_length = len(lst)\n    res = []\n    # delete_pairs = []\n    # for item in lst:\n    #     if lst.count(item)%2!= 0:\n    #         delete_pairs.append(item)\n    # for item in delete_pairs:\n    #     lst.remove(item)\n    delete_pairs = []\n    if lst_length % 2 == 0:\n        for i in range(lst_length//2):\n            delete_pairs.append(lst[i])\n        delete_pairs.append(lst[lst_length//2])\n        lst = lst[:lst_length//2] + delete_pairs + lst[lst_length//2+1:]\n    if lst_length > 0:\n        for i in range(lst_length-1):\n            for j in range(i+1, lst_length):\n                if lst[j] > lst[i]:\n                    res.append(lst[i])\n                    lst[i] = lst[j]\n                    lst[j] = lst[i]\n    if len(res) == 0:\n        return lst\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            res.append(word)\n        else:\n            res.append(word[::-1])\n    return sorted(res)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #   A,B,C,D = map(list, set(str.lowercase))\n    #   return map(list, sorted(str.lowercase))\n    \"\"\"\n    A,B,C,D = map(set, str.lowercase)\n    return sorted(str.lowercase, key=lambda x: len(x))\n    \"\"\"\n    return sorted(str.lowercase, key=lambda x: (len(x), x))\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort(key=len)\n    lst_sum = []\n    \n    # Checks whether the word is a duplicate\n    for word in lst:\n        if lst.count(word) > 1:\n            lst_sum.append(word)\n    \n    # Checks whether the word has the same length\n    # Sort the list alphabetically\n    lst_sum = sorted(lst_sum)\n    \n    # The result is the sorted word, in a sorted list\n    return lst_sum\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = list(lst)\n    n = len(lst)\n    sort_lst = []\n    for i in range(n):\n        if lst[i] % 2 == 0:\n            sort_lst.append(lst[i])\n    sort_lst.sort()\n    return sort_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    temp_lst = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            temp_lst.append(item)\n        else:\n            temp_lst.append(item[::-1])\n    temp_lst = sorted(temp_lst)\n    return temp_lst\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y * x\n    else:\n        return y * x * x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n in prime_numbers:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if n%2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Find all possible values of x.\n    val_x = []\n    for x_i in range(1, n + 1):\n        if not is_prime(x_i):\n            val_x.append(x_i)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n==0: return 0\n    if n==1: return 1\n    if n<=1: return 1\n    i=2\n    while i*i<=n:\n        if n%i==0: return i\n        i+=1\n    return 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here\n    return None\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    #x and y are all ints\n    assert isinstance(x, int)\n    assert isinstance(y, int)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import math\n    import random\n    #Get the number of iterations\n    for i in range(0,n):\n        #Randomly select a number from 1 to n\n        x = random.randint(1,n)\n        #Check if n is prime\n        if x < 2:\n            #Continue\n            pass\n        elif x > 2:\n            #Get the denominator\n            x = math.sqrt(x)\n            #If there are no remaining numbers\n            if x == 1:\n                #If the number is even\n                if x % 2 == 0:\n                    #We return the number\n                    return x\n                #If the number is odd\n                else:\n                    #We return the second number\n                    return y\n            #If the denominator is 2 or 3, we add it to the denominator\n            elif x % 2 == 0:\n                #We add the number to the denominator\n                return x + y\n            else:\n                #We return the second number\n                return x + y\n    #If there are no remaining numbers\n    #We return the last value\n    return x\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return double_the_difference(lst[0:1])\n    else:\n        return double_the_difference(lst[1:]) + double_the_difference(lst[0:-1:])\n    "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n    total = 0\n    for number in lst:\n        total += number**2\n    return total\n    \ndef repeat_string(input_string):\n    \"\"\"\n    input_string: string to repeat\n    returns: the same string repeated to match the given input_string\n    \"\"\"\n    output_string = ''\n    for letter in input_string:\n        output_string += letter\n    return output_string\n    \ndef separate_numbers(input_string):\n    \"\"\"\n    input_string: a string of numbers separated by commas\n    returns: a list of numbers, one number per comma\n    \"\"\"\n    numbers = input_string.split(',')\n    return numbers\n    \ndef filter_numbers(input_string):\n    \"\"\"\n    input_string: string to filter\n    returns: the same string, except numbers are removed\n    \"\"\"\n    return input_string.replace(' ', '').replace('-', '').replace(',', '')\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    for value in lst:\n        if value % 2!= 0:\n            total += value**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        total = 0\n        for i in lst:\n            total = total + (i**2)\n        return total\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return double_the_difference(lst[1:]) + double_the_difference(lst[:-1])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    nums = []\n    for num in lst:\n        if not isinstance(num, int):\n            return 0\n        if num in [0, 1]:\n            nums.append(num)\n    sum_squares = 0\n    for num in nums:\n        sum_squares += num**2\n    return sum_squares\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    for el in lst:\n        s += el**2\n    return s\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    double_the_difference_tuple = ()\n    for number in lst:\n        if number % 2:\n            double_the_difference_tuple += (number ** 2,)\n    return sum(double_the_difference_tuple)\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #print(lst)\n    sum = 0\n    if len(lst) == 0:\n        return sum\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    odd_numbers = [x for x in lst if x % 2 == 1]\n    sum_squares = sum([(x ** 2) for x in odd_numbers])\n    return sum_squares\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    length = len(guess)\n    res = [0] * length\n    for i in range(length):\n        for j in range(length):\n            if guess[i] == game[j] and i!= j:\n                res[i] += 1\n            else:\n                res[i] = 0\n    return res\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #Your code here\n    def compare_first(scores,guesses):\n        index = 0\n        result = 0\n        while(index < len(guesses)):\n            if guesses[index] > scores[index]:\n                result += 1\n            index += 1\n        return result\n    \n    def compare_second(scores,guesses):\n        index = 0\n        result = 0\n        while(index < len(guesses)):\n            if guesses[index] > scores[index]:\n                result += scores[index] - guesses[index]\n            index += 1\n        return result\n    \n    if(len(game) == 0):\n        return 0\n    \n    guesses_first = [0 for i in range(len(game))]\n    guesses_second = [0 for i in range(len(game))]\n    for i in range(len(game)):\n        if(game[i] == 1):\n            guesses_first[i] = 1\n        else:\n            guesses_second[i] = 1\n    \n    result = compare_first(guesses_first,guesses_second)\n    \n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # your code here\n    pass"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #to compare scores, we will compare each guess to each number\n    #then for each score, we will compare each guess to each number\n    #and then we will compare this result to the score\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            pass\n        else:\n            return [abs(game[i] - guess[i])]\n    return [0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = []\n    \n    if len(guess)==1:\n        return guess[0]\n    \n    #sort guess list\n    guess.sort()\n    #search list for number with matching guess\n    for i in range(len(guess)):\n        if guess[i] == guess[0]:\n            res.append(1)\n            if guess[i] == 1:\n                res.append(0)\n        else:\n            if guess[i] > guess[0]:\n                res.append(1)\n            else:\n                res.append(0)\n            if guess[i] == guess[0]:\n                res.append(guess[i])\n    \n    #print result\n    print(res)\n    return res\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # if not game[0] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    # elif not game[1] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    # elif not game[2] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    # elif not game[3] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    # elif not game[4] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    # elif not game[5] == guess:\n    #     print(\"not match\")\n    #     return [0,0,0,0,3,3]\n    \n    # print(\"match\")\n    # return [0,0,0,0,0,0]\n    if guess not in game:\n        print(\"not match\")\n        return [0,0,0,0,0,0]\n    # print(\"guess\")\n    # return [game[0]-guess,game[1]-guess,game[2]-guess,game[3]-guess,game[4]-guess,game[5]-guess]\n    \n    # print(\"game\")\n    # return [game[0]-guess,game[1]-guess,game[2]-guess,game[3]-guess,game[4]-guess,game[5]-guess]\n    # print(\"guess\")\n    # return [game[0]-guess,game[1]-guess,game[2]-guess,game[3]-guess,game[4]-guess,game[5]-guess]\n    \n    return [abs(game[0]-guess),abs(game[1]-guess),abs(game[2]-guess),abs(game[3]-guess),abs(game[4]-guess),abs(game[5]-guess)]\n    # return [game[0]-guess,game[1]-guess,game[2]-guess,game[3]-guess,game[4]-guess,game[5]-guess]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (list(map(abs, list(map(lambda x,y: x-y,guess,game))))).index(0)\n    #    a, b = max(map(lambda x, y: abs(x - y), guess, game)), max(map(lambda x, y: abs(x - y), guess, game)))\n    #    return a if a < b else b\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if both the scores and the guess are the same length return 0\n    if len(guess) == len(score):\n        return 0\n    \n    # for both the scores and the guess are not the same length return the absolute difference\n    if len(score)!= len(guess):\n        return abs(score[0] - guess[0])\n    \n    # for the two scores are equal length return the absolute difference\n    for i in range(len(score)):\n        if score[i]!= guess[i]:\n            return abs(score[i] - guess[i])\n    \n    return [score[0] - guess[0],score[1] - guess[1]]\n    \ndef main():\n    \"\"\"Run your program and display results.\n    Run the program if the file is executed directly.\n    \"\"\"\n    score,guess = get_scores()\n    print(score,guess)\n    result = compare(score,guess)\n    print(result)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    \n    \n    \n    \n    \n    #think about atm there is an algorithm that works by looking at the score\n    #the first thing is the result of the guess, and the result of the score\n    #the second thing is the guess\n    \n    \n    result=0\n    guess=int(guess)\n    score=int(game[guess])\n    \n    #print(guess)\n    #print(score)\n    #if guess==score:\n        #result=0\n    #else:\n        #result=abs(score-guess)\n        #result=min(result,abs(score-guess))\n        \n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # loop through the extensions list and find the first one that has the same strength\n    for extension in extensions:\n        if extension == extension[0]:\n            return extension[1] + extension[0].upper()\n    # if there are none, return the class name as a string\n    return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code goes here\n    # if not extensions:\n    #     return \"\"\n    # n = len(extensions)\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if extensions[i] == extensions[j]:\n    #             if (int(extensions[i].split('.')[1]) - int(extensions[j].split('.')[1])) > 0:\n    #                 return extensions[i].split('.')[0] + '.' + extensions[j].split('.')[0]\n    # return extensions[0].split('.')[0] + '.' + extensions[0].split('.')[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Create a dictionary where the keys are the extensions and the values are the strengths\n    extension_dict = {ext:0 for ext in extensions}\n    # Loop over the extensions\n    for extension in extensions:\n        # Get the number of uppercase and lowercase letters in the extension\n        cap, sm = extension.split('.')\n        # Assign the strength to the extension\n        extension_dict[cap] = float(cap) - float(sm)\n    # Sort the dictionary by the strength\n    extension_dict = sorted(extension_dict.items(), key=lambda x: x[1])\n    # Return the strongest extension\n    return extension_dict[0][0]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def Cap(x):\n        return sum([ord(x[0]) - ord(x[1])]) - sum([ord(x[1]) - ord(x[0])])\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    best_extension = ''\n    for extension in extensions:\n        cap = len(extension.upper())\n        sm = len(extension.lower())\n        if cap <= sm:\n            best_extension = extension\n    return best_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        cap += extension[0].upper()\n        sm += extension[1].lower()\n    if cap > sm:\n        return class_name + \".StrongestExtensionName\"\n    else:\n        return class_name + \".StrongestExtensionName\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Your code goes here. \n    MAX = -1\n    for extension in extensions:\n        if len(extension)>MAX:\n            MAX = len(extension)\n            strength = int(extension[:MAX-1])\n    \n    res = class_name\n    for extension in extensions:\n        if int(extension[:MAX-1])>strength:\n            res = extension\n            break\n    return res\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n    fractions = {\n        'AE': 0.98,\n        'AEU': 0.9,\n        'AEZ': 0.96,\n        'AK': 0.94,\n        'AL': 0.92,\n        'AM': 0.88,\n        'AN': 0.86,\n        'AO': 0.84,\n        'AP': 0.82,\n        'AR': 0.79,\n        'AS': 0.74,\n        'AU': 0.73,\n        'AU': 0.72,\n        'AZ': 0.71,\n        'CA': 0.69,\n        'CAL': 0.66,\n        'CAM': 0.64,\n        'CAU': 0.62,\n        'CAC': 0.61,\n        'CAS': 0.59,\n        'CAW': 0.58,\n        'CC': 0.56,\n        'CGU': 0.54,\n        'CMA': 0.52,\n        'CGU': 0.50,\n        'CMS': 0.49,\n        'CGU': 0.48,\n        'CNA': 0.46,\n        'CNG': 0.45,\n        'CGZ': 0.43,\n        'CNT': 0.41,\n        'CNC': 0.40,\n        'CNC': 0.39,\n        'CNC': 0.38,\n        'CNU': 0.37,\n        'CNW': 0.35,\n        'CP': 0.34,\n        'CAU': 0.33,\n        'CAA': 0.32,\n        'CAG': 0.30,\n        'CAG': 0.29,\n        'CAG': 0.28,\n        'CAM': 0.27,\n        'CAU': 0.26,\n        'CAC': 0.25,\n        'CAL': 0.24,\n        'CAM': 0.23,\n        'CGU': 0.22,\n        'CGU': 0.21,\n        'CGZ': 0.20,\n        'CGU': 0.19,\n        'CNA': 0.18,\n        'CNG': 0.17,\n        'CGZ': 0.16,\n        'CMS': 0.14,\n        'CNU': 0.12,\n        'CNW': 0.11,\n        'CP': 0.10,\n        'CAU': 0.09,\n        'CAA': 0.08,\n        'CAG': 0.07,\n        'CAG': 0.06,\n        'CAG': 0.05,\n        'CAA': 0.04,\n        'CAU': 0.03,\n        'CAC': 0.02,\n        'CAL': 0.01,\n        'CAM': 0.01,\n        'CGU': 0.01,\n        'CGU': 0.01,\n        'CGZ': 0.01,\n        'CGU': 0.01,\n        'CNA': 0.01,\n        'CNG': 0.01,\n        'CGZ': 0.01,\n        'CMS': 0.01,\n        'CNU': 0.01,\n        'CNW': 0.01,\n        'CP': 0.01,\n        'CAU': 0.01,\n        'CAA': 0.01,\n        'CAG': 0.01,\n        'CAG': 0.01,\n        'CAA': 0.01,\n        'CAU': 0.01,\n        'CAC': 0.01,\n        'CAL': 0.01,\n        'CAM': 0.01,\n        'CGZ': 0.01,\n        'CMS': 0.01,\n        'CNU': 0.01,\n        'CNW': 0.01,\n        'CP': 0.01,\n        'CAU': 0.01,\n        'CAA': 0.01,\n        'CAG': 0.01,\n        'CAG': 0.01,\n        'CAA': 0.01,\n        'CAU': 0.01,\n        'CAC': 0.01,\n        'CAL': 0.01,\n        'CAM': 0.01,\n        'CGZ': 0.0"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # Find the unique name\n    unique_class = list(set(class_name.split()))\n    unique_class = [c for c in unique_class if c.isalpha()]\n    \n    # Find the strength of all extensions\n    strength = 0\n    for extension in extensions:\n        if extension in unique_class:\n            strength += extensions.count(extension)\n    \n    # Find the strongest extension\n    strongest_extension = unique_class[0]\n    for extension in extensions:\n        if extension not in unique_class:\n            if extensions.count(extension) > strength:\n                strongest_extension = extension\n                break\n    \n    # Use the strongest extension\n    return strongest_extension + '.' + class_name[len(strongest_extension):]\n    "
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for extension in extensions:\n        if extension == 'Be':\n            extension = 'Be_'\n        elif extension == 'CC':\n            extension = 'CC_'\n        else:\n            continue\n        if extension in class_name:\n            return class_name + extension\n    return class_name + extensions[0]\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s1 = a\n    s2 = b\n    s1_list = list(s1)\n    s2_list = list(s2)\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    c = set(b)\n    return a in c or any(a[i:i+len(b)] == b for i in range(len(b)))\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    #check if all letters in first word are in second word\n    #use dictionary to map to each letter and return True if there is a substring in the second word\n    #return False if there is a substring in the second word\n    \n    #use dictionary to map to each letter and return True if there is a substring in the first word\n    #use dictionary to map to each letter and return True if there is a substring in the second word\n    \n    #check if both word strings are in first word and if the second word is in second word\n    #use dictionary to map to each letter and return True if there is a substring in the second word\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it\n    #use dictionary to map to each letter and return True if there is a substring in the first word\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it and if the second word has only one letter in it\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it and if the second word has only one letter in it\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it and if the second word has only one letter in it\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it and if the second word has only one letter in it\n    #return False if there is a substring in the first word\n    \n    #check if the first word has only one letter in it and if the second word has only one letter in it\n    #return False if there is a substring in the first word\n    \n    \n    \n    \n    #cycpattern_check(\"abcd\",\"abd\") == False\n    #cycpattern_check(\"abcd\",\"aabd\") == True\n    #cycpattern_check(\"abcd\",\"ab\") == False\n    #cycpattern_check(\"abcd\",\"\") == False\n    #cycpattern_check(\"\", \"\") == True\n    #cycpattern_check(\"\", \"\") == False\n    \n    #cycpattern_check(\"a\", \"b\") == False\n    #cycpattern_check(\"a\", \"aa\") == True\n    #cycpattern_check(\"aa\", \"a\") == False\n    #cycpattern_check(\"a\", \"\") == True\n    #cycpattern_check(\"\", \"a\") == True\n    #cycpattern_check(\"\", \"\") == False\n    \n    #cycpattern_check(\"aa\", \"a\") == True\n    #cycpattern_check(\"\", \"a\") == False\n    #cycpattern_check(\"aa\", \"\") == True\n    #cycpattern_check(\"a\", \"\") == False\n    \n    #cycpattern_check(\"abab\", \"baa\") == True\n    #cycpattern_check(\"abab\", \"bba\") == True\n    #cycpattern_check(\"abab\", \"ba\") == True\n    #cycpattern_check(\"abab\", \"\") == True\n    \n    #cycpattern_check(\"abab\", \"bba\") == True\n    #cycpattern_check(\"abab\", \"ba\") == False\n    #cycpattern_check(\"abab\", \"\") == False\n    \n    #cycpattern_check(\"aabb\", \"aabb\") == True\n    #cycpattern_check(\"\", \"aabb\") == True\n    #cycpattern_check(\"aabb\", \"\") == True\n    \n    #cycpattern_check(\"abc\", \"\") == True\n    #cycpattern_check(\"abc\", \"abc\") == False\n    #cycpattern_check(\"abc\", \"\") == True\n    \n    #cycpattern_check(\"abc\", \"\") == True\n    #cycpattern_check(\"abc\", \"ab\") == False\n    #cycpattern_check(\"ab\", \"\") == True\n    \n    #cycpattern_check(\"abc\", \"a\") == True\n    #cycpattern_check(\"\", \"a\") == False\n    #cycpattern_check(\"a\", \"a\") == False\n    \n    #cycpattern_check(\"a\", \"\") == True"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ((b == a[::-1]) or (cycpattern_check(b[::-1], a))) or (cycpattern_check(a[::-1], b[::-1]))"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # A word is a substring of the first word if all letters from the first word are in the second word.\n    # If a word is rotated, then the letters in the second word should be in the first word.\n    # If a word is not rotated, then the letters should be in the second word.\n    # Note that there are only 26 rotations of a word.\n    # Input:\n    # a: str\n    # b: str\n    # Output:\n    # bool\n    # EXAMPLE\n    # 'abcd' --> 'baa'\n    # 'abd' --> 'baa'\n    # 'efef' --> 'eff'\n    # 'hims' --> 'hiss'\n    #'simen' -->'simm'\n    # 'aabb' --> 'baa'\n    # 'hima' --> 'ima'\n    \n    first_word = a.split()\n    second_word = b.split()\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(a)):\n        if a[i:len(b)] in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a == b:\n        return True\n    if len(a) == 1:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(b)>len(a):\n        a, b = b, a\n    s = set()\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i]==b[j]:\n                s.add(a[i])\n                s.add(b[j])\n            else:\n                break\n    if not s.isdisjoint(set(b)):\n        return False\n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    cycpattern = []\n    temp = []\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        for j in range(i, len(b)):\n            if a[i] == b[j]:\n                cycpattern.append(a[i])\n    return cycpattern == temp\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(a)):\n        if a[i] == b[0] or b[0] == a[i]:\n            if b[1:len(b)] == a[i:len(a)]:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even, odd = 0, 0\n    while num:\n        num, div = divmod(num, 10)\n        even += div\n        odd += num\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    while num!= 0:\n        rem = num % 10\n        num = num // 10\n        if rem % 2 == 0:\n            count += 1\n    return count, count % 2\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Use the following operator and check for the range of numbers\n    evens = (num%10==0)\n    odds = (num%10)%2==1\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (num % 10, num // 10 % 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num:\n        if num%2==0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = count_even_digits(num)\n    odd = count_odd_digits(num)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_count = 0\n    odd_count = 0\n    for n in num:\n        if n % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #init\n    even = 0\n    odd = 0\n    #iterate over the digits\n    for i in range(1, num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    #return a tuple\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if num < 0:\n        return print('invalid number')\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n            10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    def helper(number):\n        res = ''\n        for i in range(number, 1, -1):\n            if i > 1:\n                res += roman[i] + 'I'\n            else:\n                res += roman[i]\n        return res\n    return helper(number)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman_number = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n    num_list = []\n    roman_num = ''\n    # Iterate over each number\n    for i in range(1, number + 1):\n        # Calculate the next number in the roman numeral\n        for j in range(len(roman_number) - 1, -1, -1):\n            # Calculate the next number in the roman numeral\n            if i <= (j + 1):\n                # Calculate the next number in the roman numeral\n                next_num = roman_number[j] + roman_number[j + 1]\n                # If the number is less than the next number\n                if next_num < roman_number[j]:\n                    # Remove the current number from the list and add the next number to the list\n                    del roman_num[j]\n                    roman_num.append(next_num)\n                # If the number is greater than the next number\n                elif next_num > roman_number[j]:\n                    # Add the current number to the list and remove it from the list\n                    roman_num.append(roman_number[j])\n                    del roman_num[j]\n    # Convert the list back to string\n    for i in range(len(roman_num)):\n        roman_num[i] = str(roman_num[i])\n    return ''.join(roman_num)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def int_to_roman(number):\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        units = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        result = ''\n        for index, number in enumerate(numbers):\n            if number <= number:\n                result += units[index]\n            else:\n                while number > 0:\n                    number -= numbers[index]\n                    result += units[index]\n        return result\n    \n    def roman_to_int(number):\n        numeral = {}\n        roman = {1000: \"M\", 900: \"CM\", 500: \"D\", 400: \"CD\", 100: \"C\", 90: \"XC\", 50: \"L\", 40: \"XL\", 10: \"X\", 9: \"IX\", 5: \"V\", 4: \"IV\", 1: \"I\"}\n        for i in range(len(number)):\n            if i+1 < len(number):\n                if number[i] in roman:\n                    numeral[number[i]] = roman[number[i]]\n                else:\n                    numeral[number[i]] = \"?\"\n        return sum(numeral.values())\n    \n    def roman_to_numbers(number):\n        numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        roman = ['M', 'D', 'C', 'L', 'X', 'V', 'I']\n        result = []\n        for i, number in enumerate(numbers):\n            if i+1 < len(numbers):\n                if number == \"M\":\n                    result.append(numeral[number])\n                elif number == \"D\":\n                    result.append(numeral[number[-1]] + roman[number[-2]])\n                elif number == \"C\":\n                    result.append(numeral[number[-2]] + roman[number[-1]])\n                elif number == \"X\":\n                    result.append(numeral[number[-1]] + roman[number[-2]] + roman[number[-3]])\n                elif number == \"L\":\n                    result.append(numeral[number[-2]] + roman[number[-1]] + roman[number[-3]])\n                elif number == \"X\":\n                    result.append(numeral[number[-1]] + roman[number[-2]] + roman[number[-3]] + roman[number[-4]])\n                elif number == \"V\":\n                    result.append(numeral[number[-3]] + roman[number[-2]] + roman[number[-1]] + roman[number[-4]])\n                elif number == \"I\":\n                    result.append(numeral[number[-4]] + roman[number[-3]] + roman[number[-2]] + roman[number[-1]])\n                else:\n                    result.append(number)\n        return result\n    \n    return int_to_roman(int(number))\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Approach 1:\n    # Step 1: iterate over all number and check its valid\n    # Step 2: if it is positive, it must be too large and is a positive integer\n    # Step 3: if it is negative, it must be too small and is a negative integer\n    # Step 4: if it is not a positive number, it should be a negative number with a positive integer\n    # Step 5: then we return the roman numeral of the answer\n    # Step 6: return None if no solution exists\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    roman = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    roman = []\n    for i in range(len(number)):\n        if number[i]!= \"i\":\n            # Roman numeral must start with 'I'\n            # and its number must be positive.\n            roman.append(\"i\")\n        elif i == 0:\n            # Roman numeral must start with 'I'\n            # and its number must be negative.\n            roman.append(\"v\")\n        else:\n            # Roman numeral must be negative or positive\n            # and its number must be >= 0.\n            for x in range(len(number) - i - 1, -1, -1):\n                if number[x] == \"i\":\n                    roman.append(\"i\")\n                    break\n                elif number[x] == \"v\":\n                    if len(number) > 1:\n                        roman.append(\"x\")\n                        break\n                    else:\n                        roman.append(\"I\")\n                        break\n                elif number[x] == \"c\":\n                    if len(number) > 1:\n                        roman.append(\"c\")\n                        break\n                    else:\n                        roman.append(\"C\")\n                        break\n                elif number[x] == \"d\":\n                    if len(number) > 1:\n                        roman.append(\"d\")\n                        break\n                    else:\n                        roman.append(\"D\")\n                        break\n                elif number[x] == \"m\":\n                    if len(number) > 1:\n                        roman.append(\"m\")\n                        break\n                    else:\n                        roman.append(\"M\")\n                        break\n                elif number[x] == \"g\":\n                    if len(number) > 1:\n                        roman.append(\"g\")\n                        break\n                    else:\n                        roman.append(\"G\")\n                        break\n                else:\n                    raise ValueError(\"Not a number\")\n    return \"\".join(roman).lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    number_list = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM']\n    i = 0\n    lst = []\n    while i < len(number):\n        lst.append(number_list[i])\n        i += 1\n    lst.reverse()\n    return ''.join(lst)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman_str = ''\n    i = 0\n    while i < len(number):\n        if i < len(number) - 1:\n            if int(number[i:i + 2]) <= 5:\n                roman_str += '0'\n            elif int(number[i:i + 2]) <= 9:\n                roman_str += number[i:i + 2]\n                roman_str += 'i'\n                i += 2\n            else:\n                roman_str += number[i:i + 2]\n                roman_str += 'ii'\n                i += 2\n        else:\n            roman_str += number[i:i + 2]\n            roman_str += 'ii'\n            i += 2\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # get result from dict\n    # memoize it\n    roman_dict = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",\n        9: \"IX\",\n        10: \"X\",\n        11: \"XI\",\n        12: \"XII\",\n        13: \"XIII\",\n        14: \"XIV\",\n        15: \"XV\",\n        16: \"XVI\",\n        17: \"XVII\",\n        18: \"XVIII\",\n        19: \"XIX\",\n    }\n    result = \"\"\n    # iterate from top to bottom\n    # from bottom to top\n    for k in range(len(number)-1, -1, -1):\n        # get next number\n        if k!= 0:\n            # get last number\n            result = roman_dict[k] + result\n        # make sure not to go out of range\n        # break if number < 1\n        if result == '':\n            return \"\"\n        # if it's not an empty string\n        # get the number\n        # add it to result\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Step 1\n    # The term is the sum of the digits in the given number.\n    # (e.g. 23 -> \"II\" instead of \"II\")\n    # The next term is the digit 1.\n    # (e.g. 1 -> \"I\" instead of \"I\")\n    # The next term is the digit 2.\n    # (e.g. 2 -> \"X\" instead of \"X\")\n    # The next term is the digit 3.\n    # (e.g. 3 -> \"XVI\" instead of \"XVI\")\n    # The next term is the digit 4.\n    # (e.g. 4 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 5.\n    # (e.g. 5 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 6.\n    # (e.g. 6 -> \"IVX\" instead of \"IVX\")\n    # The next term is the digit 7.\n    # (e.g. 7 -> \"V\" instead of \"V\")\n    # The next term is the digit 8.\n    # (e.g. 8 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 9.\n    # (e.g. 9 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 10.\n    # (e.g. 10 -> \"XI\" instead of \"XI\")\n    # The next term is the digit 11.\n    # (e.g. 11 -> \"X\" instead of \"X\")\n    # The next term is the digit 12.\n    # (e.g. 12 -> \"VX\" instead of \"VX\")\n    # The next term is the digit 13.\n    # (e.g. 13 -> \"IX\" instead of \"IX\")\n    # The next term is the digit 14.\n    # (e.g. 14 -> \"XVI\" instead of \"XVI\")\n    # The next term is the digit 15.\n    # (e.g. 15 -> \"IXVI\" instead of \"IXVI\")\n    # The next term is the digit 16.\n    # (e.g. 16 -> \"XIV\" instead of \"XIV\")\n    # The next term is the digit 17.\n    # (e.g. 17 -> \"I\" instead of \"I\")\n    # The next term is the digit 18.\n    # (e.g. 18 -> \"II\" instead of \"II\")\n    # The next term is the digit 19.\n    # (e.g. 19 -> \"X\" instead of \"X\")\n    # The next term is the digit 20.\n    # (e.g. 20 -> \"VI\" instead of \"VI\")\n    # The next term is the digit 21.\n    # (e.g. 21 -> \"IV\" instead of \"IV\")\n    # The next term is the digit 22.\n    # (e.g. 22 -> \"VX\" instead of \"VX\")\n    # The next term is the digit 23.\n    # (e.g. 23 -> \"IX\" instead of \"IX\")\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Check if the first angle is right or not\n    if (a == b == c) or (a == c == b) or (a == b == c) or (b == c == a):\n        return True\n    # Now determine the first angle to determine the type of triangle\n    if a == b and b == c:\n        return True\n    elif a == b or a == c or b == c:\n        return False\n    # For the remaining angles, determine which of the triangle sides is right\n    if a + b > c + d or a + c > b + d or b + a > c + d or b + c > a + d:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here\n    return (((a*b)>c) and ((b*c)>a) and ((c*a)>b))\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Euclid's algorithm, s.t. all the angles are odd.\n    a1, b1, c1 = a, b, c\n    a2, b2, c2 = 2*a, 2*b, 2*c\n    \n    # Euclid's algorithm, s.t. all the angles are odd.\n    a3, b3, c3 = 3*a, 3*b, 3*c\n    \n    # If the angles are equal, the triangle is right-angled.\n    if abs(a1+b1+c1 - a2+b2+c2) <= 1:\n        return True\n    \n    # If the angles are equal, the triangle is right-angled.\n    if abs(a1+b1+c1 - a2+b2+c2) <= 1 and abs(a2+b2+c2 - a3+b3+c3) <= 1:\n        return True\n    \n    # If the angles are different, the triangle is not right-angled.\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Build the equations\n    def eq(a, b, c):\n        if a > b and a > c:\n            return True\n        elif a > b and c > a:\n            return True\n        elif b > c and b > a:\n            return True\n        elif b > c and c > a:\n            return True\n        else:\n            return False\n    # Check if the equations are satisfied\n    if eq(a, b, c):\n        return True\n    elif eq(b, c, a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b or b == c or a == c:\n        return True\n    if a * a + b * b == c * c:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a==b or b==c or a==c:\n        return True\n    elif a*a+b*b==c*c:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # check if the first side is a right angle triangle\n    if (a ** 2 + b ** 2 == c ** 2):\n        return True\n    # check if the second side is a right angle triangle\n    if (b ** 2 + c ** 2 == a ** 2):\n        return True\n    # check if the third side is a right angle triangle\n    if (a ** 2 + c ** 2 == b ** 2):\n        return True\n    # if all three sides are out of order, return false\n    if ((a ** 2 + b ** 2)!= c ** 2):\n        return False\n    # otherwise return true\n    return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def rotate(x, y, z):\n        return x, y, z\n    \n    #check if sides are the same\n    if a == b and b == c:\n        return True\n    \n    if a == b or a == c or b == c:\n        return False\n    \n    #calculate rotation angle and get which side is right\n    if a > b and b > c:\n        (a, b, c) = rotate(a, b, c)\n    \n    if a < b and b < c:\n        (a, b, c) = rotate(a, b, c)\n    \n    #check if sides are right\n    if a < b and b > c:\n        return True\n    \n    if a > b and b < c:\n        return False\n    \n    return False\n    \ndef check_angle(a, b, c):\n    '''\n    Given a triangle, return the angle that is described by a,b,c.\n    Assume the angles are positive.\n    Example:\n    check_angle(3, 4, 5) == 90\n    check_angle(1, 2, 3) == 180\n    '''\n    if right_angle_triangle(a, b, c):\n        return 90\n    \n    if right_angle_triangle(b, c, a):\n        return 90\n    \n    if right_angle_triangle(c, a, b):\n        return 90\n    \n    if right_angle_triangle(a, c, b):\n        return 180\n    \n    return 0\n    \ndef check_triangle(a, b, c):\n    '''\n    Given a triangle, return the area of the triangle.\n    Assume the triangles are right angled.\n    Example:\n    check_triangle(3, 4, 5) == 32\n    check_triangle(1, 2, 3) == 42\n    '''\n    if right_angle_triangle(a, b, c):\n        return (a+b+c) * 0.5\n    \n    if right_angle_triangle(b, c, a):\n        return (a+b+c) * 0.5\n    \n    if right_angle_triangle(c, a, b):\n        return (a+b+c) * 0.5\n    \n    if right_angle_triangle(a, b, c):\n        return 0\n    \n    return 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == b or a == c or b == c:\n        return False\n    elif a**2 + b**2 == c**2 - a*b:\n        return True\n    elif a**2 + c**2 == b**2 - a*c:\n        return True\n    elif a**2 - b**2 == c**2 - a*c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max = 0\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max:\n            max = count\n    return max\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(words, key=lambda s: len(s))\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #Sort the list.\n    sorted_list = sorted(words, key=len)\n    \n    #Get the length of the word.\n    len = len(sorted_list[0])\n    \n    #If there are more than one word with the same number of unique characters.\n    if len(sorted_list) > 1:\n        #Use the first word.\n        return sorted_list[0]\n    \n    #Return the first word.\n    return sorted_list[0]"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words.sort(key=len)\n    first_index = 0\n    first_word = words[first_index]\n    for word in words:\n        if len(word) == len(first_word):\n            if word == first_word:\n                return word\n            else:\n                first_index += 1\n                first_word = words[first_index]\n    return first_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_occ = 0\n    result = None\n    for word in words:\n        occ_count = count_occurrence(word)\n        if occ_count > max_occ:\n            max_occ = occ_count\n            result = word\n    return result\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    words.sort()\n    max_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_len = 0\n    for i in range(len(words)):\n        # get count of each character in string\n        count = Counter(words[i])\n        # print(count)\n        # print(words[i])\n        # print(len(words[i]))\n        if count['a'] > max_len and count['b'] > max_len and count['c'] > max_len:\n            # if max count is greater than the max len,\n            # write the word in lower case,\n            # and print the word in upper case\n            max_len = max(len(words[i]), max_len)\n            words[i] = words[i].lower()\n            print(words[i])\n            print(max_len)\n    return words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_char = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = 0\n        for char in word:\n            if char.isalpha():\n                unique_chars += 1\n        if unique_chars > max_char:\n            max_char = unique_chars\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    output = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            if char not in output:\n                count += 1\n        output = output[:count] + word + output[count:]\n    return output\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_char = 0\n    words_list = []\n    # iterate over the input\n    for word in words:\n        # append the word to the list of words\n        words_list.append(word)\n        # check if there are more unique characters\n        if len(word) > max_char:\n            # set the new maximum char count to the new word\n            max_char = len(word)\n            # find the first unique char count with the word\n            count = word.count(word[0])\n            # if the new maximum char count is greater than the previous one\n            if count > max_char:\n                # set the first unique char as the first char\n                max_char = count\n    # return the first unique char count\n    return words_list[0][0:max_char]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if remaining < need:\n        return [ need, remaining ]\n    \n    total_eaten_carrots = number * need\n    remaining_carrots = remaining\n    \n    if remaining_carrots < need:\n        remaining_carrots = need\n        \n    if remaining_carrots < number:\n        total_eaten_carrots = number\n        remaining_carrots = remaining\n        \n    if remaining_carrots < 0:\n        remaining_carrots = 0\n        \n    total_eaten_carrots += remaining_carrots\n    \n    return [ total_eaten_carrots, remaining_carrots ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #\n    # Write your code here.\n    #\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if number < 0 or need < 0 or remaining < 0:\n        return []\n    if number >= need or remaining >= need:\n        remaining -= need\n        return [need, remaining]\n    \n    remaining = remain = need - number\n    for i in range(need):\n        remain += eat(number - 1, need - i - 1, remain)\n        remain += eat(number - 1, need - i, remain)\n    return [need, remain]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if remaining >= need:\n        return [remaining, need]\n    \n    new_num = remain = 0\n    \n    for i in range(1, number + 1):\n        remain = remaining - need\n        new_num = need\n        \n        if remain > 0:\n            new_num += remain\n            \n        remain = need\n        \n        if new_num >= need:\n            new_num -= need\n            \n        need = new_num\n        \n    return [remain, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # todo: implement this function\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if need == 0:\n        return [number, number]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    remaining = max(remaining, number)\n    if number == need:\n        return [number, remaining]\n    elif remaining <= 0:\n        return [need, remaining]\n    else:\n        return eat(number-1, need, remaining-need) + eat(number, need, remaining)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def eat_remaining_carrots(n, r):\n        \"\"\"\n        number is the number of carrots that you have eaten, \n        and need is the number of carrots that you need to eat.\n        \n        Parameters:\n        @n : integer\n            the number of carrots that you have eaten.\n        @r : integer\n            the number of remaining carrots thet exist in stock.\n        \"\"\"\n        if n + r > 100:\n            r = 100 - n\n        return [n, r]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # check valid input\n    if number <= 0 or need <= 0 or remaining <= 0:\n        raise ValueError(\"Invalid input\")\n    # calculate remaining\n    remaining -= need\n    # if there is not enough remaining carrots, eat all remaining carrots\n    if remaining <= 0:\n        # eat all remaining carrots\n        return [number, 0]\n    # if there are remaining carrots, eat enough\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total, eaten = 0, 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if operator.has_key('+', '-') and operand.has_key('+', '-'):\n        result = operator['+', '-']\n    elif operator.has_key('+', '*') and operand.has_key('+', '*'):\n        result = operator['+', '*']\n    elif operator.has_key('+', '-'):\n        result = operator['+', '-']\n    elif operand.has_key('+', '-'):\n        result = operand['+', '-']\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operator.get('+'):\n        operator_list = operator.get('+')\n        result = sum(operator_list)\n    elif operator.get('-') :\n        operator_list = operator.get('-')\n        result = operator_list[0] - operator_list[1]\n    elif operator.get('*'):\n        operator_list = operator.get('*')\n        result = operator_list[0] * operator_list[1]\n    elif operator.get('//'):\n        operator_list = operator.get('//')\n        result = operator_list[0] // operator_list[1]\n    elif operator.get('**'):\n        operator_list = operator.get('**')\n        result = operator_list[0] ** operator_list[1]\n    return result\n    \n    \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if operator['+']:\n        operator['+'] = operator['+'].split(',')\n        operand = operand.split(',')\n        result = 0\n        for num in operand:\n            result += int(num)\n        return result\n    elif operator['-'] and operand:\n        result = operator['-']\n        for num in operand:\n            result -= int(num)\n        return result\n    elif operator['*']:\n        operand = operator['*'].split(',')\n        result = 1\n        for num in operand:\n            result *= int(num)\n        return result\n    elif operator['//']:\n        result = operator['//']\n        if operator['//'].isdigit():\n            result = int(operator['//'])\n        else:\n            raise NotImplementedError(f\"Operator {operator['//']} is not implemented yet.\")\n        return result\n    elif operator['**']:\n        result = operator['**']\n        if operator['**'].isdigit():\n            result = int(operator['**'])\n        else:\n            raise NotImplementedError(f\"Operator {operator['**']} is not implemented yet.\")\n        return result\n    else:\n        raise NotImplementedError(f\"Unknown operator {operator['+', '-', '*', '//', '**']}.\")\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #basic algebra operations\n    result = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    return eval(operator+operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return operator[operator.index(operator[0])](operand, operator[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if operator is None or operand is None:\n        return None\n    \n    if len(operator) == len(operand):\n        result = 0\n        for a, b in zip(operator, operand):\n            result += a*b\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for operand_i in operand:\n        result += operator[operand_i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    operator = operator.split('+')\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not s:\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = \"\"\n    for i in s:\n        if i.isalpha():\n            result += i.upper()\n        else:\n            result += i.lower()\n    return result[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].islower():\n            result += s[i].upper()\n        else:\n            result += s[i].lower()\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return \"\"\n    else:\n        result = \"\"\n        index = 0\n        while index < len(s):\n            if s[index]!= \" \":\n                result += s[index].upper()\n            else:\n                result += s[index].lower()\n            index += 1\n        return result[::-1"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(list(s.lower())) if s.lower() in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" else \"\".join(list(s.upper())) if s.upper() in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" else s\n    #return \"\".join(s[i].lower() if s[i].isalpha() else s[i].upper() if s[i].islower() else s[i] for i in range(len(s)))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s[0].isalpha():\n        return s[::-1]\n    else:\n        return s[::-1].replace(\".\", \"\")\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0].upper() + s[0].lower()\n    else:\n        return solve(s[1:]) + solve(s[0].upper() + s[0].lower())\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    reverse = [letter.lower() for letter in s]\n    #s.replace(s[i], ''.join(reversed(s[i])))\n    return ''.join(reversed(s))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([s[i].upper() if s[i].islower() else s[i].lower() for i in range(len(s))])\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = str(text)\n    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    md5 = hashlib.md5()\n    if len(text) == 0:\n        return None\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    \n    if len(text) % 16 == 0:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    import hashlib\n    if not text:\n        return None\n    md = hashlib.md5()\n    md.update(text)\n    return md.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    \n    text_md5 = hashlib.md5()\n    text_md5.update(text.encode('utf-8'))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text or ''\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import hashlib\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # hashlib.md5() has both Python 2 and 3 way of returning hexdigest\n    return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    hash_md5 = hashlib.md5()\n    if not text:\n        return None\n    for c in text:\n        hash_md5.update(c.encode('utf-8'))\n    return hash_md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(text) == 0:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(a, b+1):\n        yield i\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your solution here\n    result = []\n    for i in range(a, b):\n        temp = []\n        for j in range(i + 1):\n            temp.append(j)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in range(a,b+1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num = []\n    while True:\n        num.append(a % b)\n        a = int(a / b)\n        if a == 0:\n            break\n    return num\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return [number for number in range(a, b+1) if number % 2 == 0]\n    # return list(range(a, b+1))\n    return list(range(a, b+1))[::2]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    output = []\n    for i in range(b - a + 1):\n        output.append(a + i)\n    return output\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [int(digit) for digit in str(a) if digit < b]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while True:\n        x = int(random.random()*b-b*0.5)\n        if x >= 0:\n            yield x\n        else:\n            break\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # answer = [i for i in range(a, b)]\n    answer = list(range(a, b))\n    for i in range(a, b):\n        if (i - a) % 2 == 0:\n            answer.remove(i)\n            answer.remove(i)\n    return answer\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == b:\n        return []\n    result = []\n    n = 0\n    while n <= b:\n        result.append(a % 10)\n        a = a // 10\n        n += 1\n    result.reverse()\n    return result\n"
    }
]