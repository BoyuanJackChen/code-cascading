[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for n in numbers:\n        for n_1 in numbers:\n            if abs(n - n_1) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if (abs(numbers[i] - numbers[j]) < threshold):\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num_list = [n for n in numbers if abs(n) > threshold]\n    if len(num_list) > 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = len(numbers)\n    # this computes the difference between each pair of numbers\n    diff = []\n    for i in range(l):\n        for j in range(l - i - 1):\n            diff.append(abs(numbers[j] - numbers[j + 1]))\n    for i in range(l):\n        for j in range(i + 1, l):\n            if diff[i] < diff[j]:\n                return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return False\n    elif len(numbers) == 1:\n        return abs(numbers[0] - numbers[0]) <= threshold\n    else:\n        close_list = []\n        for i in range(len(numbers) - 1):\n            for j in range(i + 1, len(numbers)):\n                if abs(numbers[i] - numbers[j]) <= threshold:\n                    close_list.append(numbers[i])\n        close_list.sort()\n        return close_list\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in numbers:\n        if (i - i) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for element in numbers:\n        if abs(element - threshold) < abs(element - threshold / 2):\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(numbers)\n    if n < 2:\n        return False\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i, number in enumerate(numbers):\n        if abs(number - numbers[i]) > threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(numbers) > 0 and all(abs(n - n_) < threshold for n_ in numbers)\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if '(' in paren_string:\n        # if parens are nested within each other, they will be separated into a tuple\n        paren_groups = paren_string.split('(')\n        separated_paren_groups = []\n        for group in paren_groups:\n            separated_paren_groups += separate_paren_groups(group)\n        return separated_paren_groups\n    else:\n        return [paren_string]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    stack = []\n    balanced_paren_group = []\n    is_balanced_paren_group = True\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if paren_string == ')':\n        return []\n    elif paren_string == '(':\n        return []\n    elif paren_string == ')':\n        return []\n    elif paren_string == ']':\n        return []\n    elif paren_string == '}':\n        return []\n    else:\n        return [paren_string]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    paren_stack = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack)!= 0:\n                paren_stack.pop()\n            else:\n                return []\n    return paren_stack\n    # raise NotImplementedError('Should not be here.')\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    if ')' not in paren_string:\n        result.append(paren_string)\n    else:\n        inner_paren_groups = separate_paren_groups(paren_string[1:-1])\n        for p in inner_paren_groups:\n            result += [p + ')' * p.count('(') for p in paren_string[1:-1].split('(')]\n        result.append(paren_string[0])\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Method 1\n    # paren_list = []\n    # open_count = 0\n    # for char in paren_string:\n    #     if char == '(':\n    #         open_count += 1\n    #     elif char == ')':\n    #         open_count -= 1\n    #         if open_count == 0:\n    #             paren_list.append(char)\n    #     elif open_count > 0:\n    #         paren_list.append(')')\n    #         open_count -= 1\n    # return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    separated_string = []\n    open_bracket_index = 0\n    while open_bracket_index < len(paren_string):\n        if paren_string[open_bracket_index] == '(':\n            separated_string.append(paren_string[open_bracket_index])\n            open_bracket_index += 1\n        elif paren_string[open_bracket_index] == ')':\n            separated_string.append(paren_string[open_bracket_index])\n            open_bracket_index += 1\n        elif paren_string[open_bracket_index] == ')':\n            open_bracket_index += 1\n            separated_string.append(')')\n    return separated_string\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    paren_stack = []\n    output = []\n    for idx,char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n            else:\n                output.append('')\n        elif char!= ')':\n            output.append('')\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    groups = []\n    match = {\n        '(': '(',\n        ')': '(',\n        '[': '[',\n        ']': '[',\n        '{': '{'\n    }\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] in ['(', ')']:\n            if paren_string[i + 1] in ['(', ')']:\n                groups.append(paren_string[i + 1:i + 2])\n            else:\n                groups.append(paren_string[i + 1:i + 3])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(number, -1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(number, -1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return round(number, -1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (number + 1) / 2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return round(number, -1)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert(number > 0), \"The number can't be a negative number\"\n    assert(number < number), \"The number can't be equal to 0.\"\n    decimals = len(str(number)) - 1\n    return number / 10**decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    number = abs(number)\n    if number < 0:\n        raise ValueError(f\"Cannot truncate {number:.5f}\")\n    num, denom = 0, 1\n    if number >= 0:\n        while number > 0:\n            num, number = number % 10, number // 10\n            denom *= 10\n    else:\n        while number < 0:\n            num, number = number % 10, -number // 10\n            denom *= 10\n    return num, denom\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    decimal, integral = number, 1\n    if number == 0.0:\n        return 0.0\n    while decimal > 0:\n        decimal, integral = decimal * 10, integral + 1\n    return integral\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # assumes number is a positive whole number\n    num, decimals = math.modf(number)\n    return num\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # define smallest number\n    min_number = 1.0\n    # define max number\n    max_number = 10.0\n    # create variable to return\n    return_value = 0.0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return any(operations[i] == 0 for i in range(len(operations)))\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for op in operations:\n        if op < 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    balances = [0]\n    for x in operations:\n        balances.append(balances[-1] - x)\n    return all(map(lambda x: x < 0, balances))\n    #for x in balances:\n    #    if x < 0:\n    #        return True\n    #return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    balance = 0\n    \n    for operation in operations:\n        if operation == 0:\n            return False\n        \n        balance = operation + balance\n        \n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if 0 == operations[0]:\n        return True\n    elif operations[0] == 0:\n        return False\n    else:\n        return below_zero(operations[1:])\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return any(a <= 0 for a in operations)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_balance = 1e+7\n    for amount in operations:\n        if amount == 0:\n            return True\n        if amount < min_balance:\n            return False\n        if amount < min_balance:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO - complete this function\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if operations == []:\n        return False\n    # breakpoint()\n    def is_balance(number: int) -> bool:\n        \"\"\"\n        >>> below_zero([1, 2, 3])\n        True\n        >>> below_zero([1, 2, -4, 5])\n        False\n        \"\"\"\n        return number == 0 or number < 0\n    # breakpoint()\n    for num in operations:\n        if is_balance(num):\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    mean = mean(numbers)\n    m = len(numbers)\n    sum_of_squares = 0.0\n    for number in numbers:\n        sum_of_squares += (number - mean) ** 2\n    return (sum_of_squares / m) ** 0.5\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num_sum = 0\n    for num in numbers:\n        num_sum += (num - mean(numbers)) ** 2\n    \n    return (num_sum ** 0.5) / (len(numbers) - 1)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return statistics.mean(numbers) - statistics.mean(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: complete this function\n    # return sum(abs(numbers[i] - numbers[i-1])) / len(numbers)\n    return sum(abs(numbers[i] - numbers[i-1]) for i in range(1, len(numbers))) / len(numbers)\n    \ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n    # TODO: complete this function\n    # return sum(abs(numbers[i] - numbers[i-1])) / len(numbers)\n    return sum(abs(numbers[i] - numbers[i-1]) for i in range(0, len(numbers))) / len(numbers)\n    \ndef mode(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mode(for a given dataset\n    along the mean of this dataset).\n    Mode(Mean Absolute Deviation) is the mode of this dataset.\n    >>> mode([1.0, 2.0, 3.0, 4.0])\n    2.0\n    \"\"\"\n    return numbers[numbers.index(min(numbers))]\n    \ndef mode_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mode Absolute Deviation\n    around the mean of this dataset.\n    Mode Absolute Deviation is the mean absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = mode | x - x_mean |\n    >>> mode_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: complete this function\n    # return mean_absolute_deviation(numbers)\n    return mean_absolute_deviation(numbers)\n    \ndef standard_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Standard Deviation of\n    the given dataset.\n    Standard Deviation is the standard deviation of the given dataset.\n    >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n    # TODO: complete this function\n    # return math.sqrt(sum((x - x.mean()) ** 2 for x in numbers))\n    return math.sqrt(sum(x ** 2 for x in numbers) / len(numbers))\n    \ndef run_mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Given a dataset, calculate the run mean absolute deviation\n    around the mean of this dataset.\n    The run mean absolute deviation is a running mean of the dataset,\n    which is the mean absolute difference between each element and a\n    centerpoint (mean in this case):\n    run MAD = sum(abs(x - x_mean))\n    >>> run_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n    # TODO: complete this function\n    # return sum(abs(numbers[i] - numbers[i-1]))\n    return sum(abs(numbers[i] - numbers[i-1]) for i in range(1, len(numbers)))\n    \ndef run_median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Given a dataset, calculate the run median absolute deviation\n    around the median of this dataset.\n    The run median absolute deviation is a running median of the dataset,\n    which is the median absolute difference between each element and a\n    centerpoint (median in this case):\n    run MAD = median | x - x_median |\n    >>> run_median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.5\n    \"\"\"\n    # TODO: complete this function\n    # return sum(abs(numbers[i"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return 0.0\n    \n    # Initialize an empty list of standardized deviations\n    standardized_deviations = []\n    \n    # Loop through each element in the given list\n    for i in range(len(numbers)):\n        # Append each standardized deviation value to the list\n        standardized_deviations.append(numbers[i] - mean(numbers))\n    \n    # Return the mean absolute deviation\n    return sum(standardized_deviations) / len(numbers)"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers_mean = sum(numbers) / len(numbers)\n    return round(abs(numbers_mean - numbers[0]), 5)"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    mean = mean(numbers)\n    return round(abs(mean - mean(numbers)), 3)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Find mean\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # find the mean\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    mean = float(sum(numbers) / len(numbers))\n    return sum([(abs(n-mean)**2) for n in numbers])**0.5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n + delimeter for n in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # first pass to detect duplicate numbers and append them to a list\n    duplicates = []\n    # append new items to a new list\n    new_list = []\n    # put a 'delimeter' after every two consecutive items of input numbers into a list\n    # also, replace the elements of list with new element\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0 and (numbers[i] // 2 not in duplicates):\n            new_list.append(numbers[i] // 2)\n            new_list.append(numbers[i] % 2)\n        else:\n            duplicates.append(numbers[i])\n    # append the duplicates back to the original list\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0 and (numbers[i] // 2 not in duplicates):\n            numbers[i] //= 2\n            numbers[i] %= 2\n    return new_list\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    output = []\n    i = 0\n    while i < len(numbers):\n        output.append(numbers[i] + delimeter)\n        i += 1\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    # Traverse through every element\n    # Increment `delimeter` if element is not at position 0\n    # Assign to list of number at position 1\n    for i in range(1, len(numbers) - 1):\n        if numbers[i - 1] + delimeter < numbers[i] <= numbers[i + 1] + delimeter:\n            numbers[i - 1] += delimeter\n        else:\n            numbers[i] += delimeter\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_to_insert = int(len(numbers)/2)\n    return [numbers[i] if i <= num_to_insert else delimeter + numbers[i] for i in range(len(numbers))]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return numbers[:len(numbers) - delimeter] + [delimeter] + numbers[len(numbers) - delimeter:]"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if delimeter > len(numbers):\n        raise ValueError('delimeter must be less than the length of the input list')\n    return numbers[:len(numbers)-delimeter] + [delimeter] * delimeter + numbers[len(numbers)-delimeter:"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]] + [numbers[0]] + [numbers[0]]\n    if delimeter == 0:\n        return numbers[0:] + numbers[1:]\n    return [numbers[0]] + intersperse(numbers[1:], delimeter - 1) + [numbers[-1]] + intersperse(numbers[1:], delimeter)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    interlist = []\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            l.append(numbers[i] + delimeter)\n        else:\n            l.append(numbers[i] - delimeter)\n    return l\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # print(f'parse_nested_parens string: {paren_string}')\n    parens = []\n    if paren_string == '(':\n        parens.append(paren_string)\n    elif paren_string == ')':\n        parens.append(paren_string)\n    else:\n        parens = parens + parse_nested_parens(paren_string)\n    # print(f'{parens} is a nested parens string')\n    # print(f'nested_parens: {parens}')\n    return max(parens)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    paren_list = []\n    for char in paren_string:\n        if char == '(':\n            paren_list.append(1)\n        elif char == ')':\n            if len(paren_list) > 1:\n                paren_list.pop()\n            elif paren_list:\n                paren_list.append(1)\n            else:\n                return []\n    return paren_list\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # base case for all parentheses\n    if paren_string == '':\n        return [0]\n    \n    # recur for each subgroup\n    brackets = {')': '(', '}': '{', ']': '['}\n    level = -1\n    sub_parens = parse_nested_parens(paren_string)\n    for i in range(len(sub_parens)):\n        # if nested parentheses are at level i,\n        # check whether the current level is deeper than level i\n        # or not, else, if the current level is higher than level i,\n        # add the level of i to level\n        if sub_parens[i] == '':\n            return [level + 1]\n        elif sub_parens[i] in brackets.keys():\n            if brackets[sub_parens[i]]!= '':\n                level = i\n        else:\n            level -= 1\n    return [level + 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_level_nesting = 0\n    output = []\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            max_level_nesting += 1\n        elif char == ')':\n            max_level_nesting -= 1\n        if max_level_nesting == 0:\n            output.append(int(char))\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    opening_paren_level = -1\n    closing_paren_level = -1\n    parsed_string = []\n    for char in paren_string:\n        if char == \"(\":\n            opening_paren_level += 1\n            parsed_string.append(\"\")\n            parsed_string.append(char)\n        elif char == \")\":\n            closing_paren_level -= 1\n            if closing_paren_level == 0:\n                parsed_string.append(char)\n                break\n            parsed_string.append(char)\n            if closing_paren_level > 0:\n                parsed_string.append(\")\")\n        else:\n            raise Exception(\"String must be in this format\")\n    return parsed_string\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    open_parens = ['(', '[', '{', ')', ')']\n    open_brackets = {'(': 0, '[': 1, '{': 2}\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def get_depth(paren_string: str, level: int = 0, level_string: str = '') -> int:\n        # if top level\n        if paren_string == ')':\n            return level + 1\n        # if not top level, depth is level\n        elif paren_string == '(':\n            return level\n        # if top level, depth is the level\n        elif paren_string == '(' and level == 0:\n            return level\n        # if not top level, depth is the level\n        elif paren_string == ')' and level == 0:\n            return level\n        # if not top level, depth is the level\n        elif paren_string == ')' and level > 0:\n            return level\n        # if not top level, depth is the level\n        elif paren_string == '(' and level > 0:\n            return level\n        # if not top level, depth is the level\n        elif paren_string == ')' and level == 0:\n            return level\n        else:\n            return level\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    paren_list = paren_string.split('(')\n    output = []\n    level = 0\n    for i in range(len(paren_list)):\n        output.append(level)\n        if paren_list[i] == '(':\n            level += 1\n        else:\n            level -= 1\n    return output\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    parens_parsed = [False] + [True for _ in range(len(paren_string))]\n    deepest_levels = [0] * (len(paren_string) + 1)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    parens = [list(map(int, paren.split('('))) for paren in paren_string.split(')')]\n    \n    if parens == []:\n        return [0]\n    elif parens[0][1] == 2:\n        return [parens[0][0]] + parse_nested_parens(parens[1:])\n    else:\n        return parse_nested_parens(parens[1:]) + [parens[0][0]]\n        \n    \ndef part1(string: str) -> int:\n    return sum(parse_nested_parens(string))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in strings if x.startswith(substring)]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert len(strings) > 0, \"There should not be any empty strings!\"\n    assert isinstance(substring, str), \"Substring should be a string!\"\n    assert substring in strings[0], \"Substring should be in one of the strings!\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Convert string to list of string\n    # for example ['abc', 'bacd', 'cde', 'array'] -> ['abc', 'bacd', 'cde', 'array']\n    # The substring could be a sub-string. The item that it's in is a list of\n    # strings. The last list item in the list is the substring.\n    # The next item of a string is the substring.\n    filtered_strings: List[str] = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [s for s in strings if s.count(substring) > 0]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [s for s in strings if s.find(substring) == -1]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], numbers[0])\n    else:\n        if numbers[0] > numbers[1]:\n            sum, product = sum_product(numbers[1:])\n        else:\n            sum, product = sum_product(numbers[:2])\n        for i in range(2, len(numbers)):\n            sum += numbers[i] * product\n            product *= numbers[i]\n        return (sum, product)"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        return 0, 1\n    total = numbers[0]\n    for i in range(1, len(numbers)):\n        total = total * numbers[i]\n    return total, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0, 0\n    for num in numbers:\n        result += num\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total: int = 0\n    prod: int = 1\n    for i in range(len(numbers)):\n        total += numbers[i] * prod\n        prod *= numbers[i]\n    return total, prod\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    \n    return numbers[0], sum(numbers[1:])\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not numbers:\n        return 0, 1\n    total = numbers[0]\n    for number in numbers[1:]:\n        total += number\n    return total, total\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if len(numbers) == 0:\n        return 0, 1\n    \n    sum_nums = 0\n    product_nums = 1\n    \n    for num in numbers:\n        sum_nums += num\n        product_nums *= num\n        \n    return sum_nums, product_nums\n        \n    \ndef is_palindrome(n: int) -> bool:\n    \"\"\" A palindrome is one which is the same as itself, and it only has a number which is palindrome number.\n    >>> is_palindrome(1)\n    True\n    >>> is_palindrome(1)\n    True\n    >>> is_palindrome(23)\n    True\n    >>> is_palindrome(0)\n    True\n    >>> is_palindrome(5)\n    False\n    >>> is_palindrome(10)\n    False\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(numbers[i] * result[i - 1])\n    return tuple(result)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_so_far = []\n    for num in numbers:\n        if len(max_so_far) == 0 or num > max_so_far[-1]:\n            max_so_far.append(num)\n        else:\n            max_so_far.append(max(num, max_so_far[-1]))\n    return max_so_far\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_value = []\n    for i in range(len(numbers) - 1, -1, -1):\n        max_value.append(numbers[i])\n        # print(f'numbers[{i}] = {numbers[i]}')\n        # print(f'max_value[{i}] = {max_value[i]}')\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    temp_numbers = numbers.copy()\n    max_window = 0\n    window_sum = 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_numbers = []\n    index = 0\n    while index < len(numbers):\n        max_number = numbers[index]\n        for i in range(index, len(numbers)):\n            if max_number < numbers[i]:\n                max_number = numbers[i]\n        max_numbers.append(max_number)\n        index += 1\n    return max_numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_max(max_idx):\n        nonlocal current_max\n        current_max = max_idx\n        # if we've reached the end, return the last element in the array\n        if max_idx == len(numbers):\n            return current_max\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_elem = numbers[0]\n    max_pos = 0\n    for index, current_max in enumerate(numbers):\n        if current_max > max_elem:\n            max_elem = current_max\n            max_pos = index\n    return numbers[:max_pos+1] + [max_elem] + numbers[max_pos+1:]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_element = numbers[0]\n    for num in numbers:\n        max_element = max(num, max_element)\n    return [max_element]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # \u00a0use a heap to store the values of the rolling max heap. \n    # Remember to keep the heap in a sorted order, and insert the values in the heap in the right place, \n    # so the biggest element is on the right of the current node. \n    # This means we could be inserting elements from the heap into the heap by the right of the current node, \n    # because the maximum element is greater than the current node, so we'll need to delete the rightmost element. \n    # So, if the heap is empty, we should insert it in the leftmost node. \n    # We could insert the current element in the rightmost node, which is an option, \n    # because we don't want to insert it twice in the heap.\n    heap = []\n    heapq.heapify(heap)\n    res = []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) == 1:\n        return [numbers[0]]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return [max(numbers) for num in numbers]\n    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # iterative approach\n    \n    # iterate through string\n    index = 0\n    index = 0\n    newString = string[:index]\n    \n    # while not palindrome\n    while index < len(string) and is_palindrome(newString):\n        newString += string[index]\n        index += 1\n    \n    # return the string\n    return newString\n    \n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = \"\"\n    for suffix in string:\n        if suffix not in string:\n            return result\n        result += suffix\n    return result[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    longest_prefix = ''\n    shortest_suffix = ''\n    for char in string:\n        if is_palindrome(char):\n            if char!= longest_prefix:\n                shortest_suffix = char\n            else:\n                longest_prefix = char\n        else:\n            longest_prefix = char\n    return shortest_suffix + longest_prefix\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return ''\n    # First, find the longest palindrome of the given string\n    max_len = 0\n    for i in range(len(string)):\n        # Check if this string starts with a palindrome prefix\n        # If so, add it to the string\n        # If not, start a new palindrome\n        if not is_palindrome(string[i:]):\n            string = string[:i] + string[i+1:]\n            max_len = max(len(string), max_len)\n    # We are done\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    string = string.split('-')[::-1]\n    for i in range(len(string)):\n        if string[i] not in ['a', 'c', 'e', 'g', 'i', 'l', 'o', 'u', 'y']:\n            return string[i]\n    return string[i] + make_palindrome(string[i+1:])\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # base case\n    if not string:\n        return string\n    \n    # recursive case\n    if is_palindrome(string[:len(string) // 2]):\n        return string[:len(string) // 2] + make_palindrome(string[len(string) // 2:])\n    return string[:len(string) // 2] + string[::-1] + make_palindrome(string[len(string) // 2:])\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    st = [x for x in string.split() if x]\n    while len(st) > 0:\n        if st[0] == st[-1]:\n            st = st[1:-1]\n        else:\n            break\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Get the length of the longest suffix of a palindrome\n    max_suffix = 0\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i]):\n            if i + 1 - max_suffix >= 2:\n                return string[:i + 1] + string[i + 1:][::-1]\n            else:\n                max_suffix = i + 1\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    longest_palindrome = 0\n    prefix = ''\n    suffix = ''\n    for c in string:\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            prefix += c\n        else:\n            if c == 'a':\n                if len(prefix) > longest_palindrome:\n                    longest_palindrome = len(prefix)\n            elif c == 'e':\n                if len(prefix) > longest_palindrome:\n                    longest_palindrome = len(prefix)\n            elif c == 'i':\n                if len(prefix) > longest_palindrome:\n                    longest_palindrome = len(prefix)\n            elif c == 'o':\n                if len(prefix) > longest_palindrome:\n                    longest_palindrome = len(prefix)\n            elif c == 'u':\n                if len(prefix) > longest_palindrome:\n                    longest_palindrome = len(prefix)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(string) - 1):\n        # current string is a palindrome if it's the same prefix of the current string, if it is a palindrome, then append to the end of the string\n        if string[i] == string[i+1]:\n            if string[i] == string[-1]:\n                return string[::-1] + string[i+1:]\n        # if prefix is different from suffix, then it's not a palindrome\n        else:\n            return string + string[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert len(a) == len(b)\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = ''\n    for i in range(0, len(a)):\n        if (a[i]!= b[i]):\n            result = result + '0'\n        else:\n            result = result + '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([f'{ord(i)^ord(j)}' if i!=j else '0' for i,j in zip(a,b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = 0\n    y = 0\n    for i in range(len(a)):\n        x = (x + a[i]) % 2\n        y = (y + b[i]) % 2\n    return '{:0>2b}'.format(x ^ y)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(map(chr, list(map(lambda x, y: x ^ y, a, b))))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return bin(int(a, 2) ^ int(b, 2)).replace('0b', '')\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = 0\n    for ch in a:\n        x = x ^ ord(ch)\n    for ch in b:\n        x = x ^ ord(ch)\n    return chr(x)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join([str(ord(c) ^ ord(d)) for c, d in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([\"0\" if x == \"1\" else \"1\" for x in a.replace(\"1\", \"0\").replace(\"0\", \"1\")])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    current = strings[0]\n    for s in strings:\n        if len(s) > i:\n            i = len(s)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    \n    if len(strings) == 1:\n        return strings[0]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    return strings[-1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # The longest string is the one with the maximum length\n    maxLen = 0\n    # The longest string is the first string\n    longestStr = strings[0]\n    # Loop over all strings and print the longest one\n    for string in strings[1:]:\n        # If the length is larger than the maximum, update the longest one\n        if len(string) > maxLen:\n            maxLen = len(string)\n            longestStr = string\n        # If the length is equal to the current longest one, also add it to the longest string\n        elif len(string) == maxLen:\n            longestStr += ',' + string\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_len = -1\n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            max_string = string\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        for i in range(len(strings)):\n            if len(strings[i]) > len(strings[i - 1]):\n                return strings[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Find max length of all strings\n    max_length = 0\n    for string in strings:\n        length = len(string)\n        if length > max_length:\n            max_length = length\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_length = 0\n    for i in strings:\n        if len(i) > max_length:\n            max_length = len(i)\n    return strings[0] if len(strings) > 1 else None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if no list of strings, return None\n    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    while a % b!= 0:\n        a = a // b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    while a % b == 0:\n        a /= b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a < b:\n        a, b = b, a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    common = max(a, b)\n    for i in range(1, common):\n        if a % i == 0 and b % i == 0:\n            common = i\n    return common\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (b == 0):\n        return a\n    elif (a == 0):\n        return b\n    elif(a % b == 0):\n        return greatest_common_divisor(b, a // b)\n    else:\n        return greatest_common_divisor(a // b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return a // b\n    else:\n        return greatest_common_divisor(a % b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return a if a > b else b\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    divisors = []\n    for i in range(1, (a // b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a > b:\n        a, b = b, a\n    if b == 0:\n        return a\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    all_prefixes = list(set(string))\n    all_prefixes.sort()\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not string:\n        return []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[i:])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = []\n    i = 0\n    while i < len(string):\n        prefix = string[i]\n        if prefix == \"a\" or prefix == \"b\" or prefix == \"c\":\n            prefixes.append(prefix)\n        i = i + 1\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(map(lambda x: x[0], string.split()))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    shortest = shortest_string(string)\n    longest = longest_string(string)\n    for letter in shortest:\n        if letter!= shortest[0]:\n            result.append(letter)\n    for letter in longest:\n        if letter!= longest[0]:\n            result.append(letter)\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prefix_lengths = []\n    start_length = len(string)\n    for index in range(start_length):\n        for prefix in all_prefixes(string[:index]):\n            prefix_lengths.append(prefix)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prefixes = []\n    string = string.lower()\n    for i in range(len(string)):\n        if i == 0:\n            prefixes.append(string[0:i])\n        else:\n            if string[i-1:i+1]!= string[i-1] and string[i-1]!= string[i] and string[i]!= string[i-1]:\n                prefixes.append(string[i-1:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return''.join([str(x) for x in range(0, n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0: raise ValueError('Must be >= 0')\n    if n == 0: return '0'\n    \n    i = 1\n    s = ''\n    while i < n:\n        s = s + str(i) +''\n        i = i * 10\n    return s\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = str(n)\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return s\n    else:\n        return s + \" \" + string_sequence(n-1)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    s = '0'\n    for i in range(n):\n        s +='' + str(i)\n    return s\n    \ndef string_numbers(n: int) -> str:\n    \"\"\" Return a string containing digits in range 0 through n inclusive.\n    >>> string_numbers(0)\n    '0'\n    >>> string_numbers(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(i)\n    return s\n    \ndef string_two_digit(n: int) -> str:\n    \"\"\" Return a string containing two digit numbers starting from 0 to n.\n    >>> string_two_digit(0)\n    '0'\n    >>> string_two_digit(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(i)\n    return s\n    \ndef string_binary(n: int) -> str:\n    \"\"\" Return a string containing n-bit binary numbers starting from 0 to n inclusive.\n    >>> string_binary(0)\n    '0'\n    >>> string_binary(5)\n    '0 1 0 0 1'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(bin(i)[2:])\n    return s\n    \ndef string_power_of_two(n: int) -> str:\n    \"\"\" Return a string containing the n-bit binary numbers starting from 0 to n.\n    >>> string_power_of_two(0)\n    '0'\n    >>> string_power_of_two(5)\n    '0 1 0 1'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(bin(i)[2:])\n    return s\n    \ndef string_power_of_two_dec(n: int) -> str:\n    \"\"\" Return a string containing the n-bit binary numbers starting from 0 to n.\n    >>> string_power_of_two_dec(0)\n    '0'\n    >>> string_power_of_two_dec(5)\n    '0 1 0 0 1'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(bin(i)[2:])\n    return s\n    \ndef string_max_digit(n: int) -> str:\n    \"\"\" Return a string containing the n-bit binary numbers starting from 0 to n.\n    >>> string_max_digit(0)\n    '0'\n    >>> string_max_digit(5)\n    '0 1 0 1'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(bin(i)[2:])\n    return s\n    \ndef string_bits(n: int) -> str:\n    \"\"\" Return a string containing the n-bit binary numbers starting from 0 to n.\n    >>> string_bits(0)\n    '0'\n    >>> string_bits(5)\n    '0 1 0 1'\n    \"\"\"\n    \n    s = '0'\n    for i in range(n):\n        s += str(bin(i)[2:])\n    return s\n    \ndef string_to_string_sequence(s: str) -> str:\n    \"\"\" Return a string containing the integer numbers starting from 0 to n.\n    >>> string_to_string_sequence(string_sequence(0))\n    '0'\n    >>> string_to_string_sequence(string_sequence(5))\n    '0 1 2 3 4 5'\n    \"\"\"\n    \n    s = string_sequence(s)\n    \n    return s\n    \ndef string_to_number(s: str) -> int:\n    \"\"\" Return a number starting from 0 to n.\n    >>> string_to_number('0')\n    0\n    >>> string_to_number('1')\n    1\n    >>> string_to_number('2')\n    2\n    \"\"\"\n    \n    s = string_sequence(s)\n    \n    return int(s)\n    \ndef string_to_two_digit(s: str) -> int:\n    \"\"\" Return a number starting from 0 to n.\n    >>> string_t"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(1,n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Precondition: n >= 0, returns string\n    assert n >= 0\n    result = ''\n    # For every number in the sequence, add it to the result string\n    for i in range(n):\n        result += str(i+1)\n    return result\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string_ = ''\n    for i in range(n):\n        string_ += str(i) +''\n    return string_\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return '0' +''.join(map(str, range(1, n+1))) +''\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return''.join([str(n) for n in range(n+1)])"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return''*n\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    characters = set(string)\n    for character in characters:\n        if character.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    counts = {}\n    for char in string:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    return len(counts)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert type(string) is str\n    assert len(string) > 1\n    for c in string:\n        if c.isalpha():\n            assert len(string) > 1\n        else:\n            assert c.isupper()\n            assert len(string) > 1\n    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)):\n        char = string[i]\n        if char == string[i].upper() or char == string[i].lower():\n            count += 1\n    return coun"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_distinct_characters = 0\n    for char in string:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            num_distinct_characters += 1\n    return num_distinct_characters\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    length = len(string)\n    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    dict_char = {}\n    for char in string:\n        if char in dict_char:\n            dict_char[char] += 1\n        else:\n            dict_char[char] = 1\n    return len(dict_char)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: write your solution here\n    return [int(s) for s in music_string.split('|')]"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    music_string = music_string.replace('|', '|')\n    return [int(x) for x in music_string.split() if len(x) > 0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    beat_counts = []\n    beat_offsets = []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    intervals = music_string.split('|')\n    return [int(interval[:-1]) for interval in intervals]"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # If the string is empty, return an empty list\n    if not music_string:\n        return []\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def parse_track(track: str) -> List[int]:\n        \"\"\" Track description is a string representing the number of beats each note lasts,\n        where each beat can be an integer between 0 and 4.\n        \"\"\"\n        beat_count = 0\n        for letter in track:\n            if letter.isdigit():\n                beat_count += int(letter)\n        return beat_count\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(map(int, music_string.split(\"|\")))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # initialize an empty array to store the returned values\n    # set the initial value to an array of zeros\n    # check if the note is an integer\n    # if it is not then return an array with a different value for each beat\n    # if it is then append the value to the end of the array\n    if music_string[0]!= '.' or music_string[len(music_string) - 1]!= '.':\n        return [[]]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    beats_per_beat: List[int] = []\n    for char in music_string:\n        if char in ['o', '|']:\n            beats_per_beat.append(1)\n        elif char == '.':\n            beats_per_beat.append(2)\n        else:\n            beats_per_beat.append(0)\n    return beats_per_beat\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    music_string = music_string.strip()\n    output = []\n    beats = 0\n    for char in music_string:\n        if char == '|':\n            beats += 2\n            output.append(beats)\n        elif char == '.':\n            beats += 1\n            output.append(beats)\n        elif char == 'o':\n            output.append(beats)\n            beats = 0\n    return outpu"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    d = defaultdict(int)\n    l = len(string)\n    for i, c in enumerate(string):\n        d[c] += 1\n        if i:\n            if string[i-1] == string[i] and string[i-1]!= string[i-2]:\n                d[string[i-2]] += 1\n        else:\n            d[string[i]] += 1\n    return sum(d.values())\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for x in range(0, len(string) - len(substring) + 1):\n        substring_index = x\n        found = False\n        while not found:\n            if substring[substring_index:substring_index + len(substring)] == substring:\n                found = True\n            else:\n                substring_index += 1\n        if found:\n            result += 1\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if substring not in string:\n        return 0\n    else:\n        left = string.find(substring)\n        right = string.find(substring, left + 1)\n        return right - left\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Our search string is case sensitive:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i + len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    # print(string.count(substring))\n    count = 0\n    for i in range(0, len(string)):\n        # print(string[i])\n        # print(substring[i])\n        if string[i] == substring[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len([i for i in string.count(substring) if substring in i])"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lookup = {}\n    return len([i for i in string.split(substring) if i in lookup])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pos = 0\n    length = len(string)\n    count = 0\n    while pos < length:\n        if string[pos:pos+len(substring)] == substring:\n            count += 1\n            pos += len(substring)\n        else:\n            pos += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = 0\n    for x in string:\n        if x == substring:\n            n += 1\n    return n\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    numbers = numbers.split(\" \")\n    numbers.sort(reverse=True)\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    number_list = [int(n) for n in numbers.split()]\n    number_list.sort()\n    return''.join(str(n) for n in number_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers = numbers.replace(' ', '')\n    while numbers:\n        n = int(numbers[0])\n        if n < 9:\n            numbers = numbers[1:]\n        else:\n            break\n    numbers = numbers[::-1]\n    sorted_numbers = list(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i] == sorted_numbers[i+1]:\n            sorted_numbers[i+1] *= -1\n    return ''.join(sorted_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return ''\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        # There may be a third number in the numbers array, and we don't want it to be sorted\n        numbers.sort()\n        for i in range(0, len(numbers) - 1):\n            if numbers[i] == numbers[i + 1]:\n                continue\n            elif numbers[i] > numbers[i + 1]:\n                numbers[i] = numbers[i + 1]\n                numbers[i + 1] = numbers[i]\n                return ''.join(numbers)\n        return ''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = numbers.replace(' ', '')\n    numbers = sorted(numbers)\n    # print(numbers)\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = numbers.split(' ')\n    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # turn the string into a list of integers\n    numbers = numbers.split()\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    numbers = numbers.split()\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    sorted_numbers =''.join([str(n) for n in numbers])\n    return sorted_numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #print(type(numbers))\n    #print(type(int(numbers)))\n    #print(type(float(numbers)))\n    #print(type(list(numbers.split())))\n    #print(type(int(int(numbers))))\n    #print(type(float(int(numbers))))\n    #print(type(list(numbers.split())))\n    #print(type(int(numbers.split())))\n    #print(type(float(numbers.split())))\n    #print(type(list(numbers.split())))\n    #print(type(int(int(numbers))))\n    #print(type(float(int(numbers))))\n    #print(type(list(numbers.split())))\n    #print(type(int(numbers.split())))\n    numbers = [int(n) for n in numbers.split()]\n    numbers.sort()\n    #print(type(numbers))\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Remove the 'zero' and 'one' characters from numbers\n    return numbers.replace('zero', '0').replace('one', '1')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Divide the list into two, which are the closest elements to each other.\n    smaller = [number for number in numbers if number < numbers[1]]\n    larger = [number for number in numbers if number > numbers[1]]\n    \n    # Determine the smallest and largest values.\n    smaller_val, larger_val = min(smaller), max(larger)\n    smaller_index, larger_index = smaller.index(smaller_val), larger.index(larger_val)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    min_index = numbers[0]\n    min_value = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_value:\n            min_value = numbers[i]\n            min_index = i\n    return min_index, min_value\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    distances = {}\n    for number in numbers:\n        if number in distances:\n            distances[number] += 1\n        else:\n            distances[number] = 1\n    # calculate the number of smallest distances\n    smallest = min(distances.values())\n    # find the closest number\n    for key in distances:\n        if distances[key] == smallest:\n            return key, distances[key]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return numbers[0], numbers[0]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Not sure if this is always the best solution.\n    min_dist = float('inf')\n    min_num = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < min_dist:\n            min_dist = numbers[i] - numbers[i - 1]\n            min_num = numbers[i]\n        elif numbers[i] - numbers[i - 1] < min_dist and numbers[i] - numbers[i - 1] < min_dist:\n            min_dist = numbers[i] - numbers[i - 1]\n            min_num = numbers[i]\n    return min_num, min_dist\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smaller_nums = []\n    smaller_dist = float('inf')\n    for num in numbers:\n        if num <= smaller_dist:\n            smaller_nums.append(num)\n            if smaller_dist == float('inf'):\n                smaller_dist = num\n            elif num - smaller_dist < smaller_dist:\n                smaller_dist = num - smaller_dist\n    return smallest_nums, smaller_dist\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    small_num = None\n    large_num = None\n    for num in numbers:\n        if small_num is None or num < small_num:\n            small_num = num\n        if large_num is None or num > large_num:\n            large_num = num\n    return small_num, large_num\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: complete this function\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest = None\n    biggest = None\n    for i in range(len(numbers)):\n        if smallest is None or numbers[i] > smallest:\n            smallest = numbers[i]\n        if biggest is None or numbers[i] < biggest:\n            biggest = numbers[i]\n    return smallest, biggest\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n / max(numbers) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result: List[float] = [n / sum(numbers) for n in numbers]\n    return result\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(map(lambda x: round(x * 100.0), numbers))\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for num in numbers:\n        res.append((num / sum(numbers)) * 1.0)\n    return res\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [n / 100 for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # There are two cases here:\n    #\n    # 1. The smallest number is zero; it becomes 1\n    # 2. The smallest number is one; it becomes 0\n    #\n    # I'm going to assume the smallest number is zero.\n    min_n = min(numbers)\n    max_n = max(numbers)\n    if min_n == 0:\n        min_n = 1.0\n        max_n = 0\n    if max_n == 0:\n        max_n = 1.0\n        min_n = 0\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x/sum(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    max_val = max(numbers)\n    min_val = min(numbers)\n    \n    return [x/max_val for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x * 1.0 for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest_value = min(numbers)\n    largest_value = max(numbers)\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(v) for v in values if type(v) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n        elif isinstance(value, str):\n            result.append(int(value))\n        elif value is None:\n            result.append(0)\n        elif isinstance(value, dict):\n            result.append(dict(value))\n        else:\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(filter(lambda x: type(x) == int, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def filter_integer(values) -> List[int]:\n        \"\"\" Returns a new list of ints\n        >>> filter_integer([1, 2, 3, 'abc', {}, []])\n        [3, 2, 1]\n        >>> filter_integer([1, 2, 3, 'abc', {}, [1, 2, 3]])\n        [1, 2, 3]\n        \"\"\"\n        filtered = []\n        for value in values:\n            if isinstance(value, int):\n                filtered.append(value)\n        return filtered\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(v) for v in values if type(v) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [int(x) for x in values if x.isnumeric()]"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count=0\n    for i in string:\n        count+=1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(string)\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 2\n    while n % i == 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = abs(n)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        ans = 0\n        while n%2 == 0:\n            ans = ans * 2\n            n //= 2\n        if n%2 == 1:\n            ans = ans * 2\n            n = n - 1\n        return ans\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    divs = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            divs.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 2 and n % 2 == 0:\n        divs.append(2)\n    return max(divs)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    while n % 2 == 0:\n        n = n // 2\n    return n + 1\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    divisors = [i for i in range(1, int(n**0.5) + 1, 1) if n % i == 0]\n    return max(divisors) if divisors else 0\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # 5/3 = 1 / 3\n    # 5/2 = 1/2\n    # 5/1 = 1\n    # 5/0 = 1\n    #...\n    # 1/10 = 1/10\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    divisors = []\n    for x in range(1, n+1):\n        if n % x == 0:\n            divisors.append(x)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    divisors = [i for i in range(1, n) if n % i == 0]\n    for d in divisors:\n        if n % d == 0:\n            return d\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def is_prime(n: int) -> bool:\n        \"\"\" Returns True if n is a prime number, otherwise False\n        >>> is_prime(1)\n        True\n        >>> is_prime(2)\n        True\n        >>> is_prime(5)\n        True\n        >>> is_prime(6)\n        False\n        >>> is_prime(9)\n        False\n        \"\"\"\n        if n < 2:\n            return False\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 2, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_perfect(n: int) -> bool:\n        \"\"\" Returns True if n is a perfect number, otherwise False\n        >>> is_perfect(8)\n        True\n        >>> is_perfect(17)\n        True\n        >>> is_perfect(20)\n        False\n        >>> is_perfect(22)\n        False\n        \"\"\"\n        def is_perfect_n(n: int) -> bool:\n            if n == 0 or n == 1:\n                return True\n            if n % 2 == 0 or n % 3 == 0:\n                return False\n            for i in range(5, int(n**0.5) + 1, 2):\n                if n % i == 0:\n                    return False\n            return True\n        \n        return is_perfect_n(n)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prime_factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n            if len(prime_factors) == i:\n                prime_factors.append(n // i)\n                prime_factors.append(n % i)\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # sort out the highest possible prime number\n    res = []\n    for i in range(1, n + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factors = []\n    p = 2\n    while p * p <= n:\n        while n % p == 0:\n            n = n / p\n            factors.append(p)\n        p += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prime = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            prime.append(i)\n            if n // i == i:\n                prime.append(n//i)\n            else:\n                prime.append(n//i)\n                prime.append(n//i)\n    prime.append(n)\n    return prime\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return []\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            l.append(i)\n            n /= i\n    if n!= 1:\n        l.append(n)\n    return l"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_factors = []\n    # number of times that its appears in the factorization\n    factors_number = 0\n    # number of times that its appears in factorization\n    factors_number_product = 1\n    for x in range(1, n + 1):\n        # check for factors\n        if n % x == 0:\n            # if prime number then append its factors\n            factors_number += 1\n            # check for other factors\n            for y in range(1, n // x + 1):\n                # check for factors\n                if n % y == 0:\n                    # if prime number then append its factors\n                    factors_number_product *= y\n                    # if other factors then append it\n                    factors_number_product *= (n // x)\n    # return list of factors\n    return [factors_number, factors_number_product]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                factors.append(i)\n            else:\n                factors.append(i)\n                factors.append(n//i)\n    return factor"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def calculate_factors(n: int, i: int, g: int) -> List[int]:\n        if n == 0:\n            return []\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    f = [0] * n\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            f[n//i] = i\n            f[i*f[n//i]] = i\n    return f\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    removed = []\n    for num in numbers:\n        if removed.count(num) < 1:\n            removed.append(num)\n    return removed\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Sort the list in place\n    numbers.sort()\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Remove all duplicate numbers\n    numbers = list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    set_numbers = set(numbers)\n    return [num for num in numbers if num not in set_numbers]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x for x in numbers if numbers.count(x) > 1]"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # (1, 2, 3, 4) -> (1, 2, 3, 4)\n    numbers.sort()\n    i = 0\n    while i < len(numbers):\n        if numbers[i]!= numbers[i+1]:\n            i += 1\n            continue\n        else:\n            numbers.pop(i)\n            i += 1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # convert list to set\n    # remove duplicates\n    s = set()\n    for number in numbers:\n        if number not in s:\n            s.add(number)\n    return s\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # use in-order traversal to iterate through the list\n    # and if elements occur more than once, remove them\n    stack = []\n    result = []\n    for number in numbers:\n        while stack and number < stack[-1] and len(result) < len(numbers):\n            result.append(stack.pop())\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # first remove duplicate elements\n    numbers = list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    to_remove = []\n    for num in numbers:\n        if num not in to_remove:\n            to_remove.append(num)\n    return to_remove\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.upper() + string.lower()"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.lower() + string.upper()"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    return string\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = string.lower()\n    string = string.upper()\n    return strin"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return string.lower() + string.upper()"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    concat = \"\"\n    for char in strings:\n        concat += char\n    return concat\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = ''\n    for i in range(len(strings)):\n        s = s + strings[i]\n    return s\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string_list = list()\n    for item in strings:\n        string_list.append(item)\n    return ''.join(string_list)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return ''\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return concatenate(strings[1:]) + concatenate(strings[:-1])\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if prefix in s]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if prefix in string]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x for x in strings if prefix in x]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [ s for s in strings if prefix in s ]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    for num in l:\n        if num > 0:\n            res.append(num)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x for x in l if x >= 0]"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    positive = []\n    for element in l:\n        if element > 0:\n            positive.append(element)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l_pos = [x for x in l if x > 0]\n    return l_pos\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res: list = []\n    for i in l:\n        if i > 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # [x for x in l if x > 0]\n    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    positives = []\n    for element in l:\n        if element > 0:\n            positives.append(element)\n    return positives\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 1:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n == 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if n == 2 or n == 3:\n        return True\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n        \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n        \n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 2:\n        return False\n    if n in [2, 3, 5, 7]:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if n == 0:\n        return False\n    \n    if n == 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n==1:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n<2:\n        return False\n    for i in range(2, n//2+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    zero_points = []\n    for i in range(len(xs) - 1):\n        if xs[i]!= 0 and xs[i + 1]!= 0:\n            x = poly(xs, xs[i]) / (xs[i + 1] - xs[i])\n            zero_points.append(x)\n    return zero_points\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_n = len(xs)\n    if max_n % 2 == 0: # check if list has even number of coefficients\n        max_n = max_n - 1\n        for i in range(0, max_n):\n            if xs[i]!= 0: # only take even coefficients\n                return xs[i]\n        # print(\"Can't find zero\")\n        return -1\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    elif len(xs) % 2 == 0:\n        return find_zero(xs[:-1]) + xs[-1] * xs[-2]\n    elif len(xs) % 2 == 1:\n        return (xs[0] + xs[1]) * xs[-1]\n    else:\n        raise Exception(\"cannot find zero.\")\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return xs[0] / (xs[0] + xs[1] * x + xs[1] * x**2)\n    lst = []\n    for i in range(len(xs)):\n        lst.append(xs[i] / (xs[i] + xs[i] * x))\n    return lst[-1]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * math.pow(xs[i], len(xs) - i - 1)\n    return result\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(xs)\n    i = 0\n    while i < n:\n        if xs[i] == 0:\n            return xs[i]\n        i += 1\n    return None\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(xs)\n    if n < 2:\n        return 0.0\n    x = xs[0]\n    if n % 2 == 0:\n        return x * x * (x - 1) + x * x * x\n    else:\n        return -(x + 1) * (x - 1) * (x - 2)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    zero_count = 0\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            zero_count += 1\n    return zero_count\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff > 0:\n            return i\n    return len(xs) - 1\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max([coeff for i, coeff in enumerate(xs) if coeff!= 0])\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #l[i][j] = l[i][j]\n    #l[i][j] = l[i][j] % 3\n    \n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i][j] % 3!= 0:\n                l[i][j] = l[i][j] % 3\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    index = 0\n    l = [i for i in range(len(l)) if i%3!= 0]\n    while index < len(l):\n        if l[index] % 3 == 0:\n            l[index], l[index+1], l[index+2] = l[index+2], l[index], l[index+1]\n        index += 2\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Sort the indicies and values\n    a = []\n    for i in range(len(l)):\n        if l[i]%3!=0:\n            a.append(l[i])\n    return a\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    tmp_l = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            tmp_l.append(l[i])\n    tmp_l.sort()\n    tmp_l.reverse()\n    return tmp_l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    out = []\n    i = 0\n    while i < len(l):\n        if i % 3 == 0:\n            out.append(l[i])\n            i += 1\n        elif i % 3!= 0:\n            out.append(l[i])\n        i += 1\n    return out\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    tmp = []\n    for i in range(len(l)):\n        if i%3!= 0:\n            tmp.append(l[i])\n    return tmp\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    newlist = []\n    for ind in range(len(l)):\n        if l[ind] % 3 == 0:\n            newlist.append(l[ind])\n    newlist.sort()\n    return newlist\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l_sorted = sorted(l, reverse=True)\n    l_sorted_first = sorted(l, reverse=True)\n    sorted_divisible_by_three = []\n    for i in range(len(l_sorted_first)):\n        if l_sorted[i] % 3 == 0:\n            sorted_divisible_by_three.append(l_sorted[i])\n    return sorted_divisible_by_three\n    # return sorted_divisible_by_three\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l_ = l.copy()\n    for i in range(len(l_)):\n        if l_[i] % 3!= 0:\n            l_.pop(i)\n    return l_\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    res = []\n    while i < len(l):\n        if l[i] not in res:\n            res.append(l[i])\n        i += 1\n    return res\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [value for value in l if l.count(value) == 1]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # http://stackoverflow.com/questions/41958/how-can-i-find-the-unique-elements-in-a-list\n    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    t = []\n    for i in l:\n        if i not in t:\n            t.append(i)\n    return t\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return list(set(l))\n    \n    \n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l)"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    seen = set()\n    return [elem for elem in l if elem not in seen and not seen.add(elem)]\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_e = l[0]\n    for e in l:\n        if e > max_e:\n            max_e = e\n    return max_e\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(l) == 0:\n        raise ValueError(\"list is empty\")\n    \n    return max(l)\n    \n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    maximum = float(\"-inf\")\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    digs = 0\n    if n < 5:\n        digs += 1\n    elif n < 9:\n        digs += 2\n    elif n < 17:\n        digs += 3\n    else:\n        digs += 4\n    return digs\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(n)\n    if n%11==0 and n%13==0:\n        return n+1\n    elif n%11==0:\n        return n+1\n    elif n%13==0:\n        return n+1\n    else:\n        return n\n    return n\n    \ndef add_end(n: int):\n    \"\"\"Add the next item to the end of a list\n    >>> add_end(10)\n    11\n    \"\"\"\n    n=n+1\n    return n\n    \ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    3\n    >>> fizz_buzz(79)\n    4\n    \"\"\"\n    print(n)\n    if n%11==0 and n%13==0:\n        return n+1\n    elif n%11==0:\n        return n+1\n    elif n%13==0:\n        return n+1\n    else:\n        return n\n    return n\n    \ndef make_palindrome(s: str):\n    \"\"\"Convert a string to a palindrome\n    >>> make_palindrome('welcome')\n    'welcome'\n    >>> make_palindrome('toto')\n    'toto'\n    >>> make_palindrome('13')\n    '13'\n    >>> make_palindrome('13')\n    't13'\n    \"\"\"\n    s=list(s)\n    s.sort()\n    return s[-1]*len(s)\n    \ndef string_to_palindrome(s: str):\n    \"\"\"Convert a string to a palindrome\n    >>> string_to_palindrome('welcome')\n    'wela'\n    >>> string_to_palindrome('toto')\n    'to'\n    >>> string_to_palindrome('13')\n    'to13'\n    \"\"\"\n    s=list(s)\n    s.sort()\n    return s[-1]*len(s)\n    \ndef find_sum(n: int, nums: list):\n    \"\"\"Find the sum of the numbers in a list\n    >>> find_sum(4, [1,2,3,4])\n    6\n    >>> find_sum(4, [1,2,3,4,5,6,7])\n    18\n    >>> find_sum(7, [1,2,3,4,5,6,7,8,9,10])\n    45\n    \"\"\"\n    if not nums:\n        return 0\n    return sum(nums)\n    \ndef is_palin(s: str):\n    \"\"\"Return True if s is a palindrome else False\"\"\"\n    if len(s)<3 or len(s)>10:\n        return False\n    else:\n        # Split the string into a list of characters\n        split_s = s.split(' ')\n        # Check the character at index 0 is identical to the last element of the list\n        if split_s[0]==split_s[len(split_s)-1]:\n            return True\n        else:\n            return False\n        \ndef check_adjacent_same(s: str):\n    \"\"\"Check if the string has an adjacent same char\n    >>> check_adjacent_same('abba')\n    True\n    >>> check_adjacent_same('a')\n    True\n    >>> check_adjacent_same('aab')\n    False\n    >>> check_adjacent_same('aabb')\n    False\n    \"\"\"\n    s=list(s)\n    s.sort()\n    for i in range(len(s)-1):\n        if s[i]==s[i+1]:\n            return True\n    return False\n    \ndef longest_common_prefix(nums: list):\n    \"\"\"Find the longest common prefix of the list of numbers\n    >>> longest_common_prefix([1, 2, 3, 4, 5, 6])\n    4\n    >>> longest_common_prefix([10, 20, 30, 40, 50])\n    10\n    >>> longest_common_prefix([1, 3, 5, 7])\n    7\n    \"\"\"\n    if not nums:\n        retur"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n%5==0:\n        return int((n//5) + 1)\n    elif n%10==0:\n        return int((n//10) + 1)\n    else:\n        return int((n//10) + 2)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 15 == 0 and n % 5 == 0 and n % 3 == 0:\n        return 5\n    elif n % 15 == 0 and n % 5 == 0:\n        return 4\n    elif n % 15 == 0 and n % 5 == 0:\n        return 3\n    elif n % 15 == 0:\n        return 2\n    else:\n        return 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(1, n + 1):\n        if (i % 7 == 0):\n            return(i)\n        elif (i % 11 == 0 or i % 13 == 0):\n            return(i)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 10 == 7:\n        return 1\n    elif n % 10 == 13:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def fizz_buzz(n: int) -> int:\n        return (n % 10) * (n // 10)\n    if n < 10:\n        return 0\n    elif n % 10 == 7:\n        return fizz_buzz(n - 7)\n    elif n % 10 == 13:\n        return fizz_buzz(n - 13)\n    else:\n        return fizz_buzz(n - 7) + fizz_buzz(n - 13)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n % 7 == 0:\n        return 0\n    elif n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return int(n/3) if n%3==0 else int(n/6)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = abs(n)\n    divisors = 0\n    if n % 11 == 0:\n        divisors += 1\n    elif n % 13 == 0:\n        divisors += 2\n    else:\n        divisors += 1\n    return divisors\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even_ind = []\n    odd_ind = []\n    \n    for i in l:\n        if i % 2 == 0:\n            even_ind.append(i)\n        else:\n            odd_ind.append(i)\n            \n    even_ind.sort()\n    odd_ind.sort()\n    \n    return even_ind + odd_ind\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    l.sort()\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even, odd\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Set the even indicies\n    odd_ind = []\n    even_ind = []\n    even_ind.append(len(l)//2)\n    # Sort even indicies\n    for i in range(len(l)//2):\n        if l[i] % 2 == 0:\n            even_ind.append(i)\n        else:\n            odd_ind.append(i)\n    # Return the sorted list\n    return even_ind + odd_ind\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(i)\n        else:\n            odd_indices.append(i)\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l)%2 == 1:\n        l = l[::-1]\n        return l\n    else:\n        l = l[::-1]\n        return [l[i] for i in range(len(l)) if i%2!= 0]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i, j = 0, len(l) - 1\n    while i <= j:\n        if l[i] % 2 == 0:\n            l[i], l[j] = l[j], l[i]\n        i += 1\n        j -= 1\n    return l\n    \ndef find_smallest(l: list) -> int:\n    \"\"\"This function takes a list l and returns the smallest number in the\n    list which is not equal to the largest number.\n    >>> find_smallest([5, 1, 2, 4])\n    5\n    >>> find_smallest([3, 4, 5, 3])\n    3\n    \"\"\"\n    for i, ele in enumerate(l):\n        if ele == l[i]:\n            pass\n        else:\n            return ele\n    return -1\n    \ndef find_index(l: list, x: int) -> int:\n    \"\"\"This function takes a list l and a number x and returns the position\n    where x is found in l.\n    >>> find_index([1, 3, 4, 3, 2], 3)\n    3\n    \"\"\"\n    for i, ele in enumerate(l):\n        if ele == x:\n            return i\n    return -1\n    \ndef search(l: list, x: int) -> int:\n    \"\"\"This function takes a list l and a number x and returns the position of\n    the number x in l.\n    >>> search([1, 2, 3, 4, 5], 4)\n    2\n    >>> search([1, 2, 3, 4, 5], 3)\n    -1\n    \"\"\"\n    for i, ele in enumerate(l):\n        if ele == x:\n            return i\n    return -1\n    \ndef sum_of_squares(l: list) -> int:\n    \"\"\"This function takes a list l and returns the sum of the squares.\n    >>> sum_of_squares([1, 2, 3, 4, 5])\n    25\n    \"\"\"\n    return sum([i**2 for i in l])\n    \ndef count_odd(l: list) -> int:\n    \"\"\"This function takes a list l and returns the number of odd numbers in l.\n    >>> count_odd([1, 2, 3, 4, 5])\n    3\n    >>> count_odd([3, 4, 2, 1, 6])\n    3\n    \"\"\"\n    count = 0\n    for i, ele in enumerate(l):\n        if ele % 2!= 0:\n            count += 1\n    return count\n    \ndef split(l: list, x: int) -> list:\n    \"\"\"This function takes a list l and a number x and returns a list of\n    numbers which are the halves of l with the first half (i.e. the\n    remainder of l[0:i]) so that they contain the number x.\n    >>> split([1, 2, 3, 4, 5], 3)\n    [1, 2]\n    >>> split([1, 2, 3, 4, 5], 2)\n    [1, 2, 3]\n    >>> split([1, 2, 3, 4, 5], 7)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    if x == 1:\n        return [l[0]]\n    else:\n        return [l[0]] + split(l[1:], x)\n    \ndef sum_of_squares_k(l: list, k: int) -> int:\n    \"\"\"This function takes a list l and a number k and returns the sum of\n    the squares of the first k numbers in l.\n    >>> sum_of_squares_k([1, 2, 3, 4, 5], 2)\n    25\n    >>> sum_of_squares_k([1, 2, 3, 4, 5], 1)\n    3\n    \"\"\"\n    squares = 0\n    for i in range(k):\n        squares += l[i]**2\n    return squares\n    \ndef first_half(l: list) -> int:\n    \"\"\"This function takes a list l and returns the first half\n    of it.\n    >>> first_half([1, 2, 3, 4, 5])\n    2\n    \"\"\"\n    i = int(len(l) / 2)\n    return l[i]\n    \ndef last_half(l: list) -> int:\n    \"\"\"This function takes a list l an"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_indices = list(range(1, len(l) + 1))\n    even_indices = []\n    for i in odd_indices:\n        if l[i] % 2 == 0:\n            even_indices.append(i)\n    return even_indices\n    \n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert(type(l) is list), \"Input l is not a list!\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even_indices = []\n    odd_indices = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            even_indices.append(l[index])\n        else:\n            odd_indices.append(l[index])\n    return even_indices + odd_indices\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = list(range(1, len(l)+1))\n    odd = list(range(len(l), 0, -1))\n    return even + odd\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get cyclic groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # make string using group elements.\n    result = \"\".join(groups[1:-1]) + groups[-1]\n    return result"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get string of cyclic groups.\n    # group is the first group followed by the rest.\n    groups = [s[i:(i + 3)] for i in range(len(s)) if i % 3 == 0]\n    # cycle all elements in group.\n    groups = [groups[i] for i in range(len(groups)) if groups[i]]\n    # decode.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # get cyclic elements of string s.\n    group = encode_cyclic(s)\n    # split cyclic elements into groups.\n    groups = [group[(3 * i):min((3 * i + 3), len(group))] for i in range((len(group) + 2) // 3)]\n    # join groups of three characters.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return encode_cyclic(s)[::-1]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups back into string.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove any group that is last three characters of s.\n    groups = [group[0:3] if group.endswith(s) else group for group in groups]\n    # remove leading and trailing zeros.\n    return \"\".join([group[0:-1] if group.endswith(s) else group for group in groups])\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    while n > 1:\n        n = n + prime_fib(n-1)\n    return n\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Obtain nth Fibonacci number\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1]+fib[-2])\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(2,n+1):\n        prime_fib = i * 2 + 1\n        if prime_fib == 1 or prime_fib == 2:\n            continue\n        if prime_fib % 5 == 0:\n            continue\n        elif prime_fib % 10 == 0:\n            continue\n        else:\n            print(prime_fib)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # We are only interested in numbers greater than\n    # n-th number that is a Fibonacci number and is also prime\n    if n <= 1 or n == 2:\n        return n\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 5\n    else:\n        # We are working with a binary search tree, and it has a recursive way to get the next number to be prime\n        # and the number of Fibonacci numbers greater than that number, so we should be able to get the next number to be prime\n        # from that number\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime = [2, 3, 5]\n    if n == 1:\n        return 2\n    for i in range(2, n):\n        if prime[i] in prime:\n            continue\n        else:\n            return prime[i]\n    return prime[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n_prime = 2\n    # Base case\n    if n == 1:\n        return 1\n    while True:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n * 3 + 1\n        # If it is not prime\n        if n_prime > n:\n            break\n        n_prime += 1\n    # Return the n-th prime\n    return n_prime\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = 0\n    b = 1\n    while a < n:\n        a, b = b, a+b\n        if b % 2 == 0:\n            continue\n        yield b\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Time = O(n)\n    # Space = O(1)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n    \n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    else:\n        a=prime_fib(n//2)\n        b=prime_fib(n-1)\n        return a+b\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # See http://en.wikipedia.org/wiki/Triple_sum\n    for i in l:\n        # We do this to handle negative numbers\n        # because this function won't be able to handle 0 or -0\n        if i < 0:\n            # We don't want to include 0 in our comparison\n            # This is to prevent exceptions from being thrown\n            return False\n    # We then add 1 to the end of the list, we'll see if it's a duplicate\n    # This is the idea from http://en.wikipedia.org/wiki/Triple_sum#With_Python\n    s = 0\n    for i in l:\n        s = s + i\n    # Check to see if the list is a tripe sum\n    if s == 0:\n        return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"\"\"\n    **Hint:**\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    if len(l) < 3:\n        return False\n    elif l[1] == l[2] or l[1] == l[3]:\n        return False\n    elif l[2] - l[1] == l[0]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) > 3:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l) - 1):\n            if l[j] + l[j + 1] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in l:\n        count += i\n        if count == 3:\n            return False\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        j = 0\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return False not in [triple_sum(l) for triple_sum in [triple_sum_two_sum, triple_sum_three_sum, triple_sum_four_sum, triple_sum_sum]"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(l)\n    if n < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # the triangle number is the sum of the three integers\n    # that sum to zero\n    tri_sum = 0\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n_col_cars_left = n // 2\n    n_col_cars_right = n - n_col_cars_left\n    return (n_col_cars_left + n_col_cars_right) % n\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if the road is a straight line, this can be found by looking at the number of\n    # cars (left to right)\n    # or the number of cars (right to left)\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return car_race_collision(n - 1) + car_race_collision(n - 2)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # basic checks\n    if n < 1:\n        raise ValueError('n must be >= 1')\n    if not isinstance(n, int):\n        raise TypeError('n must be an integer')\n    if n == 0:\n        raise ValueError('n must be > 0')\n    if n > 1000000:\n        raise ValueError('n must be <= 1000000')\n    if n % 2 == 0:\n        raise ValueError('n must be even')\n    if n % 3 == 0:\n        raise ValueError('n must be odd')\n    \n    # add one car to check for collisions\n    n += 1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Keep track of how many collisions have been made.\n    num_collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Initialize variables\n    n_collisions = 0\n    left_car = 0\n    right_car = 0\n    long_line_cars = 0\n    for i in range(n):\n        left_car = car(0, i+1, 1)\n        right_car = car(0, i+1, -1)\n        # Check if car collision with a straight line\n        if car_race_collision_straight(left_car) or car_race_collision_straight(right_car):\n            n_collisions += 1\n            long_line_cars += 1\n        # Check if car collision with a \"good car\"\n        elif car_race_collision_good(left_car, right_car):\n            long_line_cars += 1\n        else:\n            print(\"No collisions\")\n    print(n_collisions)\n    print(long_line_cars)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if (n <= 0):\n        print('The number of collisions is zero!')\n        return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Note that we need an \"if\" statement to check for the cars that are on the\n    # same position as the cars that are going to move right.\n    # So, the \"for\" loop will continue moving on each iteration of the for loop.\n    # The else statement is used to increment the cars that are going to move right by one.\n    # In other words, the \"for\" loop will not continue moving.\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = int(n)\n    # A car is a car that's moving right to left\n    # for i in range(n):\n    #     # Perform a straight-line collision\n    #     if (c.x > r_center):\n    #         # We can't be straight to the left since we've hit a car that's moving right\n    #         return 1\n    #     elif (c.x < r_center):\n    #         # We can't be straight to the right since we've hit a car that's moving left\n    #         return 1\n    #     else:\n    #         # We can collide as long as there is a car that's moving left to right\n    #         return n-i\n    # Let us say that the car is straight to the left.  Since the car is right, we're in the same direction\n    # as the car.  Now we can make the car travel at this speed.  Once we've reached the straight line,\n    # we've reached the right.\n    #     if (c.x > r_center):\n    #         return n-1\n    #     elif (c.x < r_center):\n    #         return n-i\n    # The car is right to the left.  We can't go right to the left since there is a lane that is perpendicular\n    # to the straight line.  We can't move to the right because there are no cars.  So we will go straight to the right.\n    #     elif (c.x > r_center):\n    #         # The car is right to the right.  We can't go straight to the right since there is no lane.\n    #         # We move straight to the right.\n    #         return n-1\n    #     else:\n    #         # The car is straight to the right.  We can move straight to the right since there is a lane.\n    #         return n-i\n    # Now that we've reached the right, we will have to follow a straight line that's actually being straight to the right.\n    #     if (c.y > r_center):\n    #         return n-1\n    #     elif (c.y < r_center):\n    #         return n-i\n    # Now we have to follow straight lines that are perpendicular to the straight line.\n    #     if (c.y > r_center):\n    #         return n-1\n    #     elif (c.y < r_center):\n    #         return n-i\n    # Now we have to follow a straight line.  So we will turn straight to the right.\n    #     if (c.y > r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-1\n    #     elif (c.y < r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-i\n    # Now we will follow straight lines that are perpendicular to the straight line.\n    #     if (c.y > r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-1\n    #     elif (c.y < r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-i\n    # Now we will follow straight lines that are perpendicular to the straight line.\n    #     if (c.y > r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-1\n    #     elif (c.y < r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-i\n    # Now we will follow straight lines that are perpendicular to the straight line.\n    #     if (c.y > r_center):\n    #         # The car is straight to the right.  We will turn straight to the right.\n    #         return n-1\n    #     elif (c.y < r_center)"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    incr = []\n    for i in range(len(l)):\n        if l[i]!= 0:\n            incr.append(l[i] + 1)\n        else:\n            incr.append(l[i])\n    return incr\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    l[:] = [x + 1 for x in l]\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in l:\n        i += 1\n        result.append(i)\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.append(l[-1] + 1)\n    return l\n    \n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [e+1 for e in l]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for index, element in enumerate(l):\n        result.append(element + 1)\n        if index + 1 == len(l):\n            break\n    return resul"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = l + [x + 1 for x in l]\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # iterate over the list\n    for i in range(len(l)):\n        # if there is a pair with both sums equal to zero, return False\n        if l[i] == l[0] or l[i] == l[-1]:\n            return True\n    # if there is no pair with both sums equal to zero, return False\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Your code here\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return False\n    elif len(l) == 2:\n        return l[0] == l[1]\n    else:\n        return l[0] + l[1] == 0\n    \n    pass"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here.\n    if len(l) < 2:\n        return False\n    if len(l) == 2 and l[0] + l[1] == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return False\n    # code goes here\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    if l[0] == l[-1]:\n        return False\n    elif l[0] < l[-1]:\n        return True\n    elif l[0] > l[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # the original idea here is to check for each element and check if it's a pair.\n    # and if it's not a pair then check if it's a number and add it to the sum\n    # if it's a number then return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                result = True\n    return result\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    numbers = [int(n) for n in l]\n    numbers.sort()\n    for i in range(len(numbers)):\n        j = i + 1\n        while j < len(numbers):\n            if numbers[i] + numbers[j] == 0:\n                return True\n            j += 1\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code here\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO\n    for i in l:\n        if i == l[0]:\n            return True\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return bin(x)[2:]\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    str_x = str(x)\n    while len(str_x) > 1:\n        print(\"%.2f\" % x, end=\"\")\n        x = x // base\n        str_x = str(x)\n    print(\"%.2f\" % x)\n    return str_x\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for _ in range(base):\n        if x % base == 0:\n            x //= base\n            break\n    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return str(x // base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if x >= 10:\n        base = base - (base % 10)\n        \n    x = str(x)\n    \n    return x[:x.rfind('0')] + str(base)"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert base > 0\n    mul = []\n    for i in range(0, base):\n        if i == base-1:\n            mul.append(str(x % base))\n        elif x % base == 0:\n            mul.append('0')\n            x = x / base\n        else:\n            mul.append(str(x % base))\n            x = x / base\n    return ''.join(mul)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    base_int = int(str(base))\n    result = \"\"\n    while x!= 0:\n        result += str(x % base_int)\n        x //= base_int\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if base < 10:\n        return str(x)\n    else:\n        result = str(x)\n        for i in range(len(result)):\n            result = result[i] + change_base(int(result[i]), base)\n        return result\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return x in string format\n    # example: change_base(100,3)\n    # return \"21\"\n    x = str(x)\n    # remove leading zeros\n    if x.isdigit():\n        return x\n    else:\n        # find the number of digits\n        digits = x.count('0')\n        # reduce to two digits\n        if digits == 1:\n            digits = 2\n        # remove leading zeros\n        if digits > 0:\n            x = x.replace('0', '')\n            # check if number is in range\n            if x.isdigit():\n                # if so, return string format\n                return '{}'.format(x)\n            else:\n                # if not, return value\n                return '0'*digits\n        else:\n            # return value as string\n            return '0'*digits\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(x) + ('0' * (base - 1))\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return 0.5*a*h"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Note: the definition of area is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*h*h\n    \ndef surface_area(a, b, c):\n    \"\"\"Given three side lengths and a mid-point, calculate the area of the triangle.\n    >>> surface_area(5, 3, 7)\n    30.0\n    \"\"\"\n    # Note: the definition of area is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_perimeter(a, b, c, d):\n    \"\"\"Given three side lengths, and two mid-points, compute the perimeter.\n    >>> parallelogram_perimeter(4, 3, 7, 5)\n    24\n    >>> parallelogram_perimeter(5, 3, 7, 5)\n    24\n    >>> parallelogram_perimeter(4, 3, 5, 7)\n    12\n    \"\"\"\n    # Note: the definition of perimeter is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_volume(a, b, c, d):\n    \"\"\"Given three side lengths, and two mid-points, compute the volume.\n    >>> parallelogram_volume(4, 3, 7, 5)\n    4.0\n    >>> parallelogram_volume(5, 3, 7, 5)\n    8.0\n    \"\"\"\n    # Note: the definition of volume is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*a*b*c*d\n    \ndef parallelogram_diameter(a, b, c, d):\n    \"\"\"Given three side lengths, and two mid-points, compute the diameter.\n    >>> parallelogram_diameter(4, 3, 7, 5)\n    2.0\n    >>> parallelogram_diameter(5, 3, 7, 5)\n    6.0\n    \"\"\"\n    # Note: the definition of diameter is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_normal_vector(a, b, c):\n    \"\"\"Given three side lengths, and two mid-points, compute the normal vector.\n    >>> parallelogram_normal_vector(4, 3, 7)\n    (1.0, -1.0, 0.0)\n    >>> parallelogram_normal_vector(5, 3, 7)\n    (0.0, 0.0, 1.0)\n    \"\"\"\n    # Note: the definition of normal vector is exactly identical to the standard\n    #       math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_normal_vector_length(a, b, c):\n    \"\"\"Given three side lengths, and two mid-points, compute the length.\n    >>> parallelogram_normal_vector_length(4, 3, 7)\n    2.0\n    >>> parallelogram_normal_vector_length(5, 3, 7)\n    2.0\n    \"\"\"\n    # Note: the definition of normal vector length is exactly identical to the\n    #       standard math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_normal_vector_diameter(a, b, c):\n    \"\"\"Given three side lengths, and two mid-points, compute the diameter.\n    >>> parallelogram_normal_vector_diameter(4, 3, 7)\n    6.0\n    >>> parallelogram_normal_vector_diameter(5, 3, 7)\n    4.0\n    \"\"\"\n    # Note: the definition of normal vector diameter is exactly identical to the\n    #       standard math.sqrt() function.\n    return (1/2)*a*b*c\n    \ndef parallelogram_normal_vector_angle(a, b, c):\n    \"\"\"Given three side lengths, and two mid-points, compute the angle.\n    >>> parallelogram_normal_vector_angle(4, 3, 7)\n    0.5\n    >>> parallelogram_normal_vector_angle(5, 3, 7)\n    0.5\n    \"\"\"\n    # Note: th"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a > h:\n        return 0\n    if a == h:\n        return h\n    return (a + h) * (h / 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (a * (a + h) * (3 / 2)) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (a**2)*(h/2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Calculate and return area of triangle\n    return (a**2) + (h**2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #print(f\"\\n\\nInput: {a}, {h}\")\n    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert type(a) == int\n    assert type(h) == int\n    return a*h*(a+h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a==h:\n        return a\n    if a%2==0:\n        if a<=h/2:\n            return a**2\n        else:\n            return (a**2)*(h-a)/2\n    if a%2==1:\n        return (a**2)/2\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib4(n-1)+fib4(n-2)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: implement fib4\n    return\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    "
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fib4_num = [0, 1]\n    for i in range(3, n + 1):\n        fib4_num.append(fib4_num[i - 2] + fib4_num[i - 3])\n    return fib4_num[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a, b, c = 0, 1, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 2:\n        return n\n    elif n == 2:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def fib4(n: int):\n        if n == 0 or n == 1:\n            return n\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n    return fib4(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fib = [0,1]\n    for i in range(2, n):\n        fib.append(fib[i-2]+fib[i-1])\n    return fib[n]"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: complete this function\n    # find the median of all elements in the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n == 0:\n        return sorted_list[0]\n    elif n == 1:\n        return sorted_list[0]\n    elif n % 2 == 0:\n        return (sorted_list[int((n+1)/2)-1]+sorted_list[int((n+1)/2)])/2\n    else:\n        return sorted_list[int(n/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[(len(l)//2)-1]) / 2\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        raise ValueError('Empty list')\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    len_l = len(l)\n    if len_l == 0:\n        return 0\n    if len_l == 1:\n        return l[0]\n    l.sort()\n    mid = len_l // 2\n    if len_l % 2:\n        return (l[mid] + l[mid - 1]) // 2\n    return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    return statistics.median(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: complete\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    else:\n        return median(l[:-1]) + (l[-1] - median(l[:-1])) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if l == []:\n        raise ValueError(\"Empty list\")\n    # Return the median of the list.\n    if len(l) % 2 == 0:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = len(l)\n    if s % 2 == 1:\n        return (l[s//2] + l[(s//2)-1])/2\n    else:\n        return l[s//2]"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    median = l[len(l)//2]\n    return median\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not l:\n        return None\n    else:\n        return sum(l) / len(l)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = text.lower()\n    if not text.isalnum():\n        return False\n    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # remove trailing whitespace\n    text = text.strip()\n    # remove leading whitespace\n    text = text.lstrip()\n    # make sure it's not empty\n    if text.strip() == \"\":\n        return True\n    # split into a list of words\n    words = text.split()\n    # check each word\n    for i in range(len(words) // 2):\n        if words[i]!= words[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.upper()\n    if text == text[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    text = text.upper()\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text.lower()\n    s_text = \"\"\n    for char in text:\n        if char.isalpha():\n            s_text += char\n    return s_text == s_text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # i = len(text) - 1\n    # j = len(text) // 2\n    # while i >= 0 and j >= 0:\n    #     if text[i] == text[j]:\n    #         i -= 1\n    #         j -= 1\n    #     else:\n    #         break\n    # return not is_palindrome(text[i + 1:])\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.lower()\n    length = len(text)\n    i = 0\n    j = length - 1\n    \n    # len(text) > 1\n    while i < length:\n        if text[i]!= text[j]:\n            return False\n        i += 1\n        j -= 1\n    return Tru"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return text == text[::-1]"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = text.strip().lower()\n    return string == string[::-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert n >= 0\n    assert p >= 0\n    d = 2**n\n    modulo = d % p\n    return modulo\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    p = p * (p - 1)\n    x = pow(n, p, p)\n    return (x % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 0:\n        raise ValueError(\"Cannot compute modp of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return modp(n - 1, p) * (p - 1) % n\n    \ndef power(n: int, p: int) -> int:\n    \"\"\"Return n**p (be aware of numerics).\n    >>> power(3, 5)\n    6\n    >>> power(1101, 101)\n    30\n    >>> power(0, 101)\n    1\n    >>> power(3, 11)\n    27\n    >>> power(100, 101)\n    12\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute power of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return power(n - 1, p) * pow(p - 1, n - 1) % n\n    \ndef add(n: int, p: int) -> int:\n    \"\"\"Return n + p (be aware of numerics).\n    >>> add(3, 5)\n    8\n    >>> add(1101, 101)\n    30\n    >>> add(0, 101)\n    1\n    >>> add(3, 11)\n    27\n    >>> add(100, 101)\n    12\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute addition of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return n + add(n - 1, p) * pow(p - 1, n - 1) % n\n    \ndef sub(n: int, p: int) -> int:\n    \"\"\"Return n - p (be aware of numerics).\n    >>> sub(3, 5)\n    0\n    >>> sub(1101, 101)\n    -8\n    >>> sub(0, 101)\n    -1\n    >>> sub(3, 11)\n    0\n    >>> sub(100, 101)\n    0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute subtraction of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return n - sub(n - 1, p) * pow(p - 1, n - 1) % n\n    \ndef mult(n: int, p: int) -> int:\n    \"\"\"Return n * p (be aware of numerics).\n    >>> mult(3, 5)\n    30\n    >>> mult(1101, 101)\n    30\n    >>> mult(0, 101)\n    1\n    >>> mult(3, 11)\n    27\n    >>> mult(100, 101)\n    12\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute multiplication of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1\n    else:\n        return n * mult(n - 1, p) % n\n    \ndef div(n: int, p: int) -> int:\n    \"\"\"Return n / p (be aware of numerics).\n    >>> div(3, 5)\n    3\n    >>> div(1101, 101)\n    2\n    >>> div(0, 101)\n    1\n    >>> div(3, 11)\n    1\n    >>> div(100, 101)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Cannot compute division of negative numbers.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif p == 0:\n        return 1\n    elif n == p:\n        return 1"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return pow(n, (p - 1) // 2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return pow(n, p-2, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import math\n    if n == 1:\n        return 2**n\n    if n >= 1:\n        x = modp(n-1, p)\n        y = modp(n-1, p)\n        return (x % p) * y % p\n    else:\n        return -1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if p == 0:\n        return 1\n    if n == 0:\n        return 0\n    result = modp(n-1, p)\n    result = (result * (n-1) % p) % p\n    return result"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (p-1)*n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x, y = 0, 1\n    while n > 0:\n        n, x = n >> 1, x * y\n    return x % p\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = list(text)\n    return \"\".join(text[i] for i in range(len(text)) if text[i].lower() not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    \ndef remove_punctuation(text):\n    \"\"\"\n    remove_punctuation is a function that takes string and returns string without punctuation.\n    >>> remove_punctuation(\"abcdefghijklmnopqrstuvwxyz\")\n    ''\n    >>> remove_punctuation('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    >>> remove_punctuation('a,bb,ccc,dd,fff,ggg')\n    ''\n    >>> remove_punctuation('abcdefghijklmnopqrstuvwxyzAaBbCcDdEfghijklmnopqrstuvwxyz')\n    'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    text = list(text)\n    return \"\".join(ch for ch in text if not ch.isalnum())\n    \ndef remove_blank_and_punctuation(text):\n    \"\"\"\n    remove_blank_and_punctuation is a function that takes string and returns string without blank and punctuation.\n    >>> remove_blank_and_punctuation('abc defg')\n    ''\n    >>> remove_blank_and_punctuation('abcde fghij')\n    ''\n    \"\"\"\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            text[i] = \" \"\n    return \"\".join(text)\n    \ndef stem(text):\n    \"\"\"\n    stem is a function that stems a text, it returns a list of stems.\n    >>> stem(\"abcdefghijklmnopqrstuvwxyz\")\n    ['a', 'bb', 'cc', 'dd', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','mm', 'nn', 'op', 'qr','ss', 'tt', 'uu', 'vw', 'xx', 'yy', 'zz']\n    \"\"\"\n    stem_list = list()\n    for i in range(len(text)):\n        if text[i]!='':\n            stem_list.append(text[i].lower())\n    return \" \".join(stem_list)\n    \ndef is_digit(text):\n    \"\"\"\n    is_digit is a function that takes string and returns boolean.\n    >>> is_digit('1234')\n    True\n    >>> is_digit('1-234')\n    False\n    >>> is_digit('123-45')\n    False\n    \"\"\"\n    return all(i.isdigit() for i in text)\n    \ndef is_uppercase(text):\n    \"\"\"\n    is_uppercase is a function that takes string and returns boolean.\n    >>> is_uppercase('A')\n    True\n    >>> is_uppercase('a')\n    True\n    >>> is_uppercase('A B')\n    False\n    >>> is_uppercase('Ab')\n    False\n    \"\"\"\n    return all(i.isupper() for i in text)\n    \ndef is_lowercase(text):\n    \"\"\"\n    is_lowercase is a function that takes string and returns boolean.\n    >>> is_lowercase('a')\n    False\n    >>> is_lowercase('A')\n    True\n    >>> is_lowercase('A ')\n    True\n    >>> is_lowercase('ab')\n    False\n    \"\"\"\n    return all(i.islower() for i in text)\n    \ndef is_special(text):\n    \"\"\"\n    is_special is a function that takes string and returns boolean.\n    >>> is_special('A')\n    True\n    >>> is_special('a')\n    True\n    >>> is_special('!')\n    False\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # \"word\" is a word, list of words\n    word = list(text.split())\n    # make a list of the words that are not vowels\n    # e.g., ['a', 'e', 'i', 'o', 'u', 'z']\n    vowels = list(set(word) - set(['a', 'e', 'i', 'o', 'u', 'z']))\n    # add the vowels back\n    vowels += list(word)\n    # join the list of words back into a string\n    # e.g., 'zbcd'\n    return ''.join(vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join([char for char in text if char not in 'aeiouAEIOU']).strip()\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for letter in text:\n        if letter in 'aeiouAEIOU':\n            text = text.replace(letter, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    text_length = len(text)\n    for i in range(text_length):\n        if text[i] not in vowels:\n            new_text += text[i]\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = \"\"\n    for character in text:\n        if character in vowels:\n            new_text += character\n        else:\n            new_text +=''\n    return new_text\n    \ndef make_frequency_dict(text):\n    \"\"\"\n    make_frequency_dict is a function that takes a string and returns a dictionary of\n    characters and their frequencies.\n    >>> make_frequency_dict(\"abcdef\")\n    {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n    >>> make_frequency_dict('abcdef')\n    {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1}\n    >>> make_frequency_dict('zz')\n    {'z': 2}\n    \"\"\"\n    frequency_dict = {}\n    for character in text:\n        frequency_dict[character] = frequency_dict.get(character, 0) + 1\n    return frequency_dict\n    \n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    if len(text) == 1:\n        return text\n    for i in text:\n        if i in vowels:\n            res.append(i)\n    return ''.join(res)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_list = []\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'B', 'D', 'C', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for letter in text:\n        if letter not in vowels:\n            new_list.append(letter)\n    return ''.join(new_list)\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in text:\n        if char in vowels:\n            continue\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count=0\n    for i in l:\n        if i<t:\n            count+=1\n        if count==len(l):\n            return True\n    return False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return not any(number > t for number in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if t == 0:\n        return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all([x < t for x in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(n<=t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return all(n <= t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all([value < t for value in l])\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: implement\n    for x in l:\n        if x < t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x+y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(s0) == len(s1) and (s0.lower() == s1.lower() or len(s1) > len(s0))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import re\n    d0 = re.compile(r\"\\w+\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return d0.search(s0) and d1.search(s1)\n    \ndef ensure_consistent_order(s):\n    \"\"\"\n    >>> ensure_consistent_order('abcde')\n    ['a', 'b', 'c', 'd']\n    >>> ensure_consistent_order('ab')\n    ['a', 'b', 'c', 'd']\n    >>> ensure_consistent_order('aba')\n    ['a', 'b', 'c', 'd']\n    >>> ensure_consistent_order('acdf')\n    ['a', 'c', 'd', 'b']\n    >>> ensure_consistent_order('abaabc')\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n    import re\n    d0 = re.compile(r\"\\w+\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return [i for i in sorted(s) if not d0.search(i) and not d1.search(i)]\n    \ndef percent_of_s(s):\n    \"\"\"\n    >>> percent_of_s('abc')\n    0.8\n    >>> percent_of_s('a')\n    0\n    >>> percent_of_s('aabc')\n    0.5\n    >>> percent_of_s('ab')\n    0\n    >>> percent_of_s('ababc')\n    0.5\n    \"\"\"\n    import re\n    d0 = re.compile(r\"\\w+\")\n    d1 = re.compile(r\"([0-9]+\\.[0-9]+)\")\n    return d0.search(s).group(1)\n    \ndef dist(a, b):\n    \"\"\"\n    >>> dist('a', 'b')\n    3\n    >>> dist('a', 'c')\n    3\n    \"\"\"\n    import math\n    return math.dist(a, b)\n    \ndef is_palindrome(s):\n    \"\"\"\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('noon')\n    False\n    \"\"\"\n    d0 = re.compile(r\"[^a-zA-Z0-9\\n]\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return not d0.search(s) and d1.search(s)\n    \ndef reverse(s):\n    \"\"\"\n    >>> reverse('abcd')\n    'cba'\n    >>> reverse('abc')\n    'bac'\n    >>> reverse('abb')\n    'aab'\n    >>> reverse('ab')\n    'ab'\n    \"\"\"\n    import re\n    d0 = re.compile(r\"[^a-zA-Z0-9\\n]\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return d0.sub(\"\", s).lower() or s\n    \ndef remove_emph(s):\n    \"\"\"\n    >>> remove_emph('hello world')\n    'hello world'\n    >>> remove_emph('hello world world')\n    'hello world'\n    \"\"\"\n    import re\n    d0 = re.compile(r\"[^a-zA-Z0-9\\n]\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return d0.sub(\"\", s).lower() or s\n    \ndef merge_chunks(s):\n    \"\"\"\n    >>> merge_chunks(\"ab\")\n    'abc'\n    >>> merge_chunks(\"abcd\")\n    'abcd'\n    \"\"\"\n    import re\n    d0 = re.compile(r\"[^a-zA-Z0-9\\n]\")\n    d1 = re.compile(r\"([a-zA-Z0-9])\")\n    return d0.sub(\"\", s).lower() or s\n    \ndef seperate(s):\n    \"\"\"\n    >>> seperate('aabbbcccddd')\n    ['a', 'b'"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s0 == s1 or s0 == s1.upper()\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s0_lens = len(s0)\n    s1_lens = len(s1)\n    if s0_lens!= s1_lens:\n        return False\n    if s0 == s1:\n        return True\n    for i in range(s0_lens):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_same_chars(s0: str, s1: str):\n        \"\"\"\n        >>> is_same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        True\n        >>> is_same_chars('abcd', 'dddddddabc')\n        True\n        >>> is_same_chars('dddddddabc', 'abcd')\n        True\n        >>> is_same_chars('eabcd', 'dddddddabc')\n        False\n        >>> is_same_chars('abcd', 'dddddddabce')\n        False\n        >>> is_same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n        \"\"\"\n        if not len(s0) == len(s1):\n            return False\n        s0_set = set(s0)\n        s1_set = set(s1)\n        if len(s0_set)!= len(s1_set):\n            return False\n        for i in range(len(s0)):\n            if s0[i]!= s1[i]:\n                return False\n        return True\n    return is_same_chars(s0, s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s0[0] == s1[0] and s0[1] == s1[1]\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = set(s0)\n    b = set(s1)\n    return a == b\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert len(s0) == len(s1), 'The strings must be the same length.'\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #\"eabcd\" not in s0\n    return (s0.lower() not in s1.lower())\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n<2:\n        return 1\n    \n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError(\"'n' must be a positive integer\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n==1 or n==2:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a, b = 1, 1\n    for i in range(9,n+1):\n        a, b = b, a+b\n    return a"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for c in brackets:\n        if c not in [\"<\", \">\", \"<>\", \",\", \":\", \".\"]:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    brackets_open = {\"(\", \"{\", \"[\"}\n    brackets_close = {\"<\", \">\", \"}\", \"}\"}\n    for bracket in brackets:\n        if bracket not in brackets_open and bracket not in brackets_close:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if brackets == \"<>\":\n        return True\n    elif brackets == \"<>\":\n        return False\n    elif brackets == \">>><\":\n        return True\n    elif brackets == \">>><\":\n        return False\n    elif brackets == \">\":\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if brackets[0] == \">\":\n        brackets = brackets[1:]\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    list_brackets = [brackets[1:]] + brackets[2:]\n    for i in range(1, len(list_brackets)):\n        if (list_brackets[i][0] == list_brackets[i - 1][0] == '<' and\n            list_brackets[i][1] == list_brackets[i - 1][1] == '>'):\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return len(brackets) == len(set(brackets))\n    return len(set(brackets)) == len(brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for bracket in brackets:\n        if bracket not in ('<', '>', '\"', '>'):\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    bracket_dict = {}\n    for bracket in brackets:\n        if bracket in bracket_dict:\n            return False\n        bracket_dict[bracket] = True\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif i == \"<\":\n            if stack:\n                stack.append(i)\n            else:\n                return False\n        else:\n            stack.append(i)\n    if not stack:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    pos = 0\n    temp = \"\"\n    while pos < len(brackets):\n        if brackets[pos] == \"<\":\n            if temp!= \">\":\n                return False\n            temp = \">\"\n        elif brackets[pos] == \">\":\n            if temp!= \"<\":\n                return False\n            temp = \"<\"\n        pos += 1\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    l.sort()\n    for i, x in enumerate(l[1:]):\n        if x < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    f: bool = False\n    for i in l:\n        if i <= 0:\n            f = True\n        elif i > 0:\n            f = False\n            break\n    return f\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for item in l:\n        if item <= 0:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return l[0] >= l[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # the first element is the highest\n    if l[0] >= l[1]:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return l[0] >= l[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i, val in enumerate(l):\n        if val < 0:\n            return False\n        elif val == 0:\n            return i!= 0\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l.count(0) == len(l):\n        return True\n    else:\n        if not l:\n            return False\n        else:\n            if l[0] > l[-1]:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = set(l)\n    if s == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # To get the list size of l1 and l2 we need to make it a list\n    size = len(l1) + len(l2)\n    \n    # Create a new list with the list size\n    return list(range(size))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    set_x = set(l1)\n    set_y = set(l2)\n    return list(set_x & set_y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    common = []\n    while l1!= l2:\n        if l1[0] == l2[0]:\n            common.append(l1[0])\n            l1.pop(0)\n            l2.pop(0)\n        elif l1[0] < l2[0]:\n            common.append(l2[0])\n            l2.pop(0)\n        else:\n            common.append(l1[0])\n            l1.pop(0)\n    return common\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l1, l2 = sorted(l1), sorted(l2)\n    if len(l1) > len(l2):\n        return l2\n    elif len(l1) < len(l2):\n        return l1\n    \n    return l2 if l1 == l2 else l1\n    \ndef set_concat(l):\n    \"\"\"Concatenate all elements of list l into one string.\"\"\"\n    return \"\".join(l)\n    \ndef remove_palindromes(l):\n    \"\"\"Remove all palindromes.\"\"\"\n    return \"\".join([element[::-1] for element in l])\n    \ndef lcs(a: list, b: list):\n    \"\"\"Compute length of longest common substring in a and b.\"\"\"\n    m, n = len(a), len(b)\n    if m < n:\n        a, b = b, a\n        m, n = n, m\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GOOD LUCK NEXT TIME! ***\\n\")"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted([x for x in l1 if x in l2])\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # note: all, not only, the two lists are sorted, but not the order of the elements\n    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l1.sort()\n    l2.sort()\n    if l1 == l2:\n        return l1\n    else:\n        return common(l1, l2[1:])\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    p = 2\n    while n % p == 0:\n        p += 1\n    return p\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    if n <= 3:\n        return 2\n    if n % 2 == 0:\n        return 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factor = 2\n    while n % factor == 0:\n        factor += 1\n    return factor"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factor = 1\n    while factor <= n:\n        if n % factor == 0:\n            n = n / factor\n        else:\n            factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 2:\n        return n\n    for d in range(3, int(n**0.5)+1, 2):\n        while n % d == 0:\n            n /= d\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = n + 1\n    prime_factors = []\n    # Find the smallest prime factor of n that divides n\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n // 2\n    # Update the search range for n\n    while n % 3 == 0:\n        prime_factors.append(3)\n        n = n // 3\n    # Now update the search range for n if it divides n\n    while n % 5 == 0:\n        prime_factors.append(5)\n        n = n // 5\n    # Now update the search range for n if it divides n\n    while n % 7 == 0:\n        prime_factors.append(7)\n        n = n // 7\n    # Return the highest prime factor\n    return max(prime_factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 0\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    i = 2\n    while i*i < n:\n        if n%i == 0:\n            j = n//i\n            break\n        i += 1\n    return "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    while n % 2 == 0:\n        n //= 2\n    \n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return "
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def outer_sum(num: int):\n        result = num\n        for n in range(1, num + 1):\n            result += n\n        return result\n    def inner_sum(num: int):\n        result = num\n        for n in range(1, num + 1):\n            result += n\n        return result\n    return outer_sum, inner_sum\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 1\n    if n > 1:\n        result += sum_to_n(n - 1)\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(range(1, n + 1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n+sum_to_n(n-1)\n    \n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert n >= 1\n    return n + sum(range(1, n))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n + sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(n):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    summ = 0\n    for i in range(1, n+1):\n        summ = summ + i\n    return summ"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(c in \"({[\") and all(c in \"))]\" for c in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return any(bracket in brackets for bracket in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brackets = list(brackets)\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            brackets[i] = \")\"\n        if brackets[i] == \")\":\n            brackets[i] = \"(\"\n    return \"\".join(brackets) == \"()\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = False\n    open_bracket = \"(\"\n    close_bracket = \")\"\n    for character in brackets:\n        if character == open_bracket:\n            result = result or (brackets.index(character) - brackets.index(close_bracket) == 1)\n        else:\n            result = result or (brackets.index(character) == brackets.index(close_bracket))\n    return result\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all([is_balanced(brackets[0]), is_balanced(brackets[-1])])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(bracket in [\"(\", \")\"] for bracket in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count+=1\n        else:\n            count-=1\n        if count < 0:\n            return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if brackets.count(\"(\")!= brackets.count(\")\"):\n        return False\n    elif brackets.count(\"()\")!= brackets.count(\")\"):\n        return False\n    \n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            break\n    for i in range(i, len(brackets)):\n        if brackets[i] == \")\":\n            break\n        elif brackets[i] == \")\":\n            if i + 2 == len(brackets):\n                return False\n            else:\n                if brackets[i + 1] == \"(\":\n                    return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(bracket[0] == bracket[-1] for bracket in brackets)\n    "
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all(\n        (\n            bracket[0] == bracket[-1]\n            and correct_bracketing(bracket[1:-1])\n        )\n        for bracket in brackets\n    )"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return [xs[0]]\n    return [xs[0] + xs[1] * x + xs[2] * x**2 for x in xs[1:]]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(map(lambda x: x[1] + x[0] * x[2], xs))\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    xs = np.array(xs)\n    res = np.zeros(len(xs))\n    for i in range(len(xs) - 1):\n        res[i] = xs[i + 1] - xs[i] * xs[i]\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    derivative = [0]\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] + xs[i-1] * x + xs[i-2] * x^2 + xs[i-3] * x^3)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Implement this function.\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement this\n    return list()\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    d = xs[2]\n    d2 = []\n    for i in xs[1:]:\n        d2.append(d2[-1] * d)\n        d *= i\n    return d2\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [ (x) - (x ** 2) for x in xs ]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x[1] for x in reversed(xs)]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    ans = []\n    for i in range(1, len(xs) - 1):\n        ans.append(xs[i] * xs[i+1] + xs[i+1] * xs[i])\n    return ans"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a,b=0,1\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return a"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    else:\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n    pass"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code here\n    return len(set(s))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for letter in s:\n        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here.\n    d = {}\n    for c in s:\n        if c in 'aeiou':\n            d[c] = d.get(c, 0) + 1\n    return len(d)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouy':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels_set = set(\"aeiouAEIOU\")\n    counter = 0\n    for x in s:\n        if x in vowels_set:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in s:\n        if i in \"AEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x) + shift * '0'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Remove the digits at the end of x\n    while shift < len(x):\n        x = x[:shift] + x[shift+1:]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    shift = abs(shift)\n    x = str(x)[::-1]\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if shift > len(str(x)):\n        shift -= len(str(x))\n    # Start with a 0 and increment/increment backwards\n    # For even digits, add a 0\n    # For odd digits, subtract one\n    i = 0\n    y = ''\n    while i < shift:\n        y = y + x[i]\n        i += 1\n    # Add one for the extra 0 if odd\n    if i % 2!= 0:\n        y = y + '0'\n    return y\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if shift < 0:\n        shift = -shift\n        shift = shift % len(str(x))\n        if shift == 0:\n            return str(x)\n        else:\n            return str(x)[:-shift]\n    return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join([str(int(c) + shift) if c.isdigit() else c for c in str(x)])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(str(int(d) + shift) for d in reversed(x))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x[shift:]+x[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"Convert x to a string in 0-indexed digits\n    >>> str(12)\n    '21'\n    >>> str(12)\n    '12'\n    \"\"\"\n    digits = 0\n    if shift > len(str(x)):\n        shift = len(str(x))\n    while x > 0:\n        x, digits = divmod(x, 10)\n    return str(digits * '0' + str(x % 10))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(s) == 0:\n        return 0\n    digit = [ord(c) for c in s]\n    return sum(digit)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([ord(i) for i in s]"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = s.upper()\n    s = s.replace(\" \", \"\")\n    l = []\n    s = s.split()\n    for i in s:\n        l.append(ord(i[0]) - ord(\"A\"))\n        if len(i) > 1:\n            l.append(ord(i[1]) - ord(\"A\"))\n    l.sort()\n    if l[0] > l[-1]:\n        return l[0] * l[-1]\n    return l[0]\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([ord(c) for c in s if c.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(ord(c) for c in s if c.isupper())"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(ord(s[i])-96 for i in range(len(s)))"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for char in s:\n        sum += ord(char)\n    return sum"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(map(ord, s.upper()))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    answer = 0\n    for i in range(len(s)):\n        if (ord(s[i]) - ord('a')) <= 90 and ord(s[i]) - ord('A') <= 90:\n            answer += ord(s[i]) - ord('A')\n        elif ord(s[i]) - ord('A') <= 90:\n            answer += ord(s[i]) - ord('A') - 91\n        else:\n            answer += ord(s[i]) - ord('A') - 96\n    return answer\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s_sum = 0\n    for i in range(len(s)):\n        s_sum += ord(s[i])\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    apples = 0\n    oranges = 0\n    for char in s:\n        if char == \"0\":\n            oranges = oranges + 1\n        elif char == \"1\":\n            apples = apples + 1\n    return apples, oranges\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    apples = s.count('a')\n    oranges = s.count('o')\n    mango = s.count('m')\n    return (apples * oranges * mango)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_apples = 0\n    total_oranges = 0\n    total_mango = 0\n    total_n = s.count('mango')\n    total_f = s.count('fruit')\n    for i in range(total_n):\n        if s[i] =='mango':\n            total_mango +=1\n        elif s[i] == 'fruit':\n            total_f +=1\n    for j in range(total_f):\n        if s[j] == 'f':\n            total_f -= 1\n        if s[j] == 'a':\n            total_apples += 1\n    for k in range(total_f-total_mango,total_f-total_apples):\n        if s[k] == 'f' and s[k+1] == 'f':\n            total_f -= 1\n        elif s[k] == 'a' and s[k+1] == 'a':\n            total_apples -= 1\n    return total_mango + total_apples + total_f\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"100 apples and 0 oranges\",120))"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    apples_sum = 0\n    oranges_sum = 0\n    for i in s:\n        if i.isdigit():\n            apples_sum += int(i)\n        else:\n            oranges_sum += int(i)\n    \n    if apples_sum > oranges_sum:\n        return \"apples\"\n    elif oranges_sum > apples_sum:\n        return \"oranges\"\n    else:\n        return \"mango\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    d={\"apple\":0, \"orange\":0, \"mango\":0}\n    #d={\"apple\":0, \"orange\":0, \"mango\":0}\n    #print(d)\n    i=0\n    j=0\n    for char in s:\n        if char==\"s\":\n            i+=1\n        elif char==\"a\":\n            j+=1\n        else:\n            d[\"apple\"]=d[\"apple\"]+j\n            d[\"orange\"]=d[\"orange\"]+i\n            d[\"mango\"]=d[\"mango\"]+1\n    #print(d)\n    return d[\"apple\"],d[\"orange\"],d[\"mango\"]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.split(\" \")\n    cnt = 0\n    for i in range(len(s)-1):\n        if s[i] == \"apples\" and s[i+1] == \"oranges\":\n            cnt += 1\n    return cnt \n    \ndef fruit_distribution_two(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution_two(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution_two(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution_two(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution_two(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    l = s.split(\" \")\n    cnt = 0\n    for i in range(len(l)-1):\n        if l[i] == \"apples\" and l[i+1] == \"oranges\":\n            cnt += 1\n    return cnt \n        \ndef fruit_distribution_three(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution_three(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution_three(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution_three(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution_three(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    l = s.split(\" \")\n    cnt = 0\n    for i in range(len(l)-1):\n        if l[i] == \"apples\" and l[i+1] == \"oranges\":\n            cnt += 1\n    return cnt \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a,b = 0,0\n    for i in s:\n        if i == '1':\n            b += 1\n        elif i == '2':\n            a += 1\n        elif i == '3':\n            a += 1\n        elif i == '4':\n            a += 1\n    return a,b\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if s == \"\":\n        return 0\n    count = 0\n    if n == 0:\n        return 0\n    else:\n        for i in s:\n            if i == \"a\":\n                count += 1\n            elif i == \"r\":\n                count -= 1\n            else:\n                count += fruit_distribution(s[:i]+s[i+1:],n-1)\n        return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (sum(map(lambda x: int(x), s.split(' '))))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    temp = s.split()\n    for item in temp:\n        if item in ['apples', 'oranges']:\n            count += 1\n    return count\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    min_even_val, idx = float('inf'), float('inf')\n    \n    if arr == []: return [min_even_val, idx]\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] < min_even_val:\n                min_even_val = arr[i]\n                idx = i\n    \n    return [min_even_val, idx]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # time in O(n)\n    # space in O(1)\n    # [0,0] will be always the smallest value, so we will have to go through all the nodes and pick the smallest value\n    if len(arr) == 0:\n        return None\n    lst = sorted(arr, key=lambda x: x) # sort array from smallest to largest\n    if lst[0] == 0: # check if it is the root node\n        return lst[1]\n    lowest_index = 0\n    for idx in range(1,len(lst)):\n        if lst[idx] == lst[idx-1]: # if it is already there, keep going\n            lowest_index = idx # since it is already there, we have to pick the smallest value\n    return lst[lowest_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    index = 0\n    value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i]!= value:\n                value = arr[i]\n                index = i\n    if value == 0:\n        return [0, index]\n    return [value, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def prune(node):\n        if not node:\n            return\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    result = []\n    nodes = sorted(arr, key=lambda node: node.value % 2)\n    for i in range(len(nodes)):\n        if i == 0 or i == len(nodes) - 1:\n            result.append([nodes[i].value])\n        else:\n            result.append([nodes[i].value, i])\n    \n    return result\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def check(node):\n        if not node:\n            return\n        if node.value % 2 == 0:\n            return\n        else:\n            if node.left:\n                left_value = node.left.value\n                if left_value % 2 == 0:\n                    node.left = node.left.left\n                    return node\n            if node.right:\n                right_value = node.right.value\n                if right_value % 2 == 0:\n                    node.right = node.right.right\n                    return node\n    def get_smallest(node):\n        if not node:\n            return node\n        left_value = node.left.value if node.left else 0\n        right_value = node.right.value if node.right else 0\n        if node.value % 2 == 0:\n            return node\n        else:\n            return get_smallest(node.left) if left_value >= right_value else get_smallest(node.right)\n    def flatten_tree(node):\n        \"\"\"\n        We have a tree with a non-leaf node, the function return that node and recursively traverse the tree\n        \"\"\"\n        if not node.left and not node.right:\n            return node\n        node.left, node.right = flatten_tree(node.left), flatten_tree(node.right)\n        return node\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    left_index = 0\n    right_index = len(arr) - 1\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    return sorted(set(arr), key=lambda x: (x%2, (x%2)//2))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(lst)\n    for i in lst:\n        if i >= 0:\n            print(i)\n            return i\n        else:\n            print(i, end=\" \")\n    print()\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    max = -1\n    for i in lst:\n        if i > max and i > 0:\n            max = i\n        elif i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = sorted(lst)\n    for i in num:\n        if num.count(i) > 1:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here. Note: you can use the following function \n    # return the largest number found\n    nums = []\n    \n    for i in lst:\n        nums.append(i)\n        nums.sort()\n        \n    value = nums[-1]\n    for i in nums:\n        if i == value:\n            return i\n    \n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if lst == []:\n        return -1\n    else:\n        max = lst[0]\n        for i in range(1,len(lst)):\n            if lst[i] > max:\n                max = lst[i]\n        return max\n        \nprint(search([4, 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    cnt = collections.Counter(lst)\n    for i in cnt:\n        if cnt[i] >= 0 and cnt[i] <= 1:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max = -1\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # get the frequencies of all numbers\n    freqs = [0]*lst[0]\n    for i in range(1,len(lst)):\n        for j in range(0,lst[i]):\n            freqs[j] += 1\n    \n    # get the maximum element\n    max_num = 0\n    for k in range(0,lst[0]):\n        if freqs[k] > freqs[max_num]:\n            max_num = k\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max = -1\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if max < lst[i]:\n                max = lst[i]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    minimum_number = lst[0]\n    for i in range(len(lst)):\n        if minimum_number > lst[i]:\n            minimum_number = lst[i]\n    # print(minimum_number)\n    lst.sort()\n    lst.insert(0, minimum_number)\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if len(lst) < 1:\n        return []\n    \n    n = len(lst)\n    \n    # TODO: Write your code here\n    \n    return strange_sort_list_helper(lst, 0, n - 1)\n    \ndef strange_sort_list_helper(lst, start, end):\n    if start == end:\n        return []\n    \n    if start > end:\n        return []\n    \n    mid = start + (end - start) // 2\n    \n    # TODO: Write your code here\n    \n    return strange_sort_list_helper(lst, start, mid) + strange_sort_list_helper(lst, mid + 1, end"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    minimum = min(lst)\n    maximum = max(lst)\n    while minimum <= maximum:\n        result.append(minimum)\n        minimum += 1\n    while len(lst) > 1:\n        result.append(lst[-1])\n        lst.pop()\n    result.reverse()\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # NOTE: works for most cases\n    output = []\n    # NOTE: the min, max are usually in reverse order.\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            output.append(i)\n            max = i\n        if i < min:\n            output.append(i)\n            min = i\n    output.append(min)\n    return output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Your code here\n    result = []\n    if lst == []:\n        return result\n    min_val = lst[0]\n    for num in lst[1:]:\n        if num < min_val:\n            min_val = num\n    if min_val == 0:\n        return lst\n    for num in lst[1:]:\n        result.append(num)\n        result.append(min_val)\n    return result\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst.sort()\n    n = len(lst)\n    stair = 1\n    for i in range(n):\n        lst[i] = stair\n        stair *= -1\n    for i in range(n-1):\n        lst[i] = lst[i+1]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    n = len(lst)\n    index = n-1\n    for i in range(n-1):\n        min = min(lst[:index+1])\n        max = max(lst[:index+1])\n        lst[index] = max\n        lst[index+1] = min\n        index -= 1\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    for el in lst:\n        if el < min(lst):\n            res.append(el)\n        elif el > max(lst):\n            res.append(el)\n        else:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def _sort(lst):\n        if len(lst) == 0:\n            return []\n        if len(lst) == 1:\n            return [lst[0]]\n        min_value = min(lst)\n        max_value = max(lst)\n        mid_value = (lst.index(min_value) + lst.index(max_value)) / 2\n        left = _sort(lst[:mid_value])\n        right = _sort(lst[mid_value:])\n        return [min_value] + left + [max_value] + right\n    return _sort(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for i in lst:\n        res.append(i)\n        if i < res[-1]:\n            res[-1] = i\n    return res\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = (b*c) - (a*c)\n    if s >= 0 and s <= b:\n        return s\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return ((b*c)/2)\n    elif a == b == c == 0:\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return round(0.5 * (a + b + c) * (a + b + c), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if (a == b and b == c):\n        return 0\n    \n    if (a == b and a!= c):\n        return -1\n    \n    if (b == c and b!= c):\n        return -1\n    \n    # formula for triangle area\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Check if the triangle is valid\n    if (a+b+c)%2==0 and ((a+b)%2 == 0) and (a!=c) and (b!=c):\n        return(((a+b)/2)*(a+b))\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if ((a + b + c) > 2):\n        return (a + b + c) / 2\n    elif ((a + c) > 2):\n        return (a + c) / 2\n    elif ((b + c) > 2):\n        return (b + c) / 2\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    elif a == b and b == c:\n        return (a * b) / 2\n    elif a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2\n    elif a == b and b == c or a == c and b == c or a == b and b == c:\n        return -1\n    else:\n        return (-1)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a + b + c) / 2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if triangle_area(a, b, c)!= -1:\n        if triangle_area(a, b, c) % 1 == 0 and triangle_area(a, b, c) % 3 == 0:\n            return round(math.sqrt((a ** 2 + b ** 2 + c ** 2) ** 2), 2)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = float(a)\n    b = float(b)\n    c = float(c)\n    if a > b and a > c:\n        return round(a*(a+b)/2.0, 2)\n    elif b > a and b > c:\n        return round(b*(b+c)/2.0, 2)\n    elif c > a and c > b:\n        return round(c*(c+b)/2.0, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # given a palindromic list, find its largest sum\n    palindromic_list = palindromic_list_sum_check(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if is_palindrome(q) and sum(q) <= q[-1]*(q[-1]+1):\n        return False\n    else:\n        return True\ndef main():\n    '''\n    Write a function that returns the minimum and maximum weight of the palindrome that can be formed by the given numbers.\n    \n    For example,\n    palindrome_weights_sum_to(5, 7, 10) \u279e (1, 3)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    is_palindromic = False\n    if len(q) <= 1:\n        return False\n    for i in range(len(q)):\n        item = q[i]\n        weight = q[i + 1] - q[i]\n        if weight < weightMax and item <= weightMax and is_palindromic == False:\n            is_palindromic = True\n            if weight == w:\n                return True\n            else:\n                return False\n    return is_palindromic\n    \ndef is_palindromic(q):\n    '''\n    Write a function that returns True if the object q is palindromic, and False otherwise.\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return q == q[::-1] and sum(q) <= w and len(q) <= len(q[::-1]"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def get_weight(q):\n        total_weight = 0\n        for el in q:\n            total_weight += el\n        return total_weight\n    \n    # check if the sum of q's elements is less than or equal to max possible weight\n    def is_balanced(q):\n        total_weight = get_weight(q)\n        if get_weight(q) >= max(w): return False\n        for el in q:\n            if total_weight - el < max(w): return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = str(q)\n    c = max(a)\n    if c % 2 == 0:\n        return False\n    s = 0\n    for x in a:\n        s += int(x)\n    if s % 2 == 0 and w <= s :\n        return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(q) < len(w):\n        return False\n    if not is_palindromic(q) or sum(q) < max_weight(w):\n        return False\n    # this may have to be optimized\n    sum_list = [sum(q[i:]) for i in range(len(q))]\n    if sum_list.count(sum(w)) < len(w):\n        return False\n    # print(q)\n    # print(w)\n    # print(sum_list)\n    return sum_list <= max_weight(w)\n    \n    \nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([3], 5))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([3, 2, 3], 7))\nprint(will_it_fly([3, 2, 3], 7))\nprint(will_it_fly([3, 2, 3], 9))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = len(q)\n    if a < 2:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = []\n    for i in q:\n        if len(s) > 1:\n            if s[-1] + i <= w:\n                continue\n            else:\n                break\n        s.append(i)\n    if len(s) == 0:\n        return False\n    if s[0] + s[-1] <= w:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if(q==w): return False\n    if(len(q) == len(w)):\n        return True\n    # check if the element in the palindrome list can be summed to the max possible weight\n    if(calculate_balances(q, w)==True):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) < 2: return len(arr)\n    first = arr[0]\n    last = arr[-1]\n    min_change = min(first, last) - 1\n    idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            idx = i\n            break\n    if idx == -1: return len(arr) - 1\n    idx_next = idx + 1\n    if idx_next < len(arr):\n        idx_next += 1\n        while idx_next < len(arr):\n            if arr[idx_next]!= arr[idx]:\n                min_change += 1\n                break\n            idx_next += 1\n    return min_change\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smallest = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            smallest += 1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Find the min of the numbers\n    min_num = arr[0]\n    for i in range(1, len(arr)):\n        min_num = min(min_num, arr[i])\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def max_count(arr, i, j):\n        count = 0\n        while i < j:\n            if arr[i]!= arr[j]:\n                count += 1\n                i += 1\n                j -= 1\n            else:\n                i += 1\n                j -= 1\n        return count\n    n = len(arr)\n    smallest_change_size = 0\n    i = j = 0\n    while j < n:\n        if arr[i]!= arr[j]:\n            smallest_change_size = min(smallest_change_size, max_count(arr, i, j))\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return smallest_change_siz"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not arr:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return smallest_change(arr[1:]) + smallest_change(arr[:-1])\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    cache = {\n        0: 1\n    }\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(arr)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    \n    # Step 1:\n    # Pick the minimum of the three elements in arr\n    min = min(arr)\n    # Pick the maximum of the three elements in arr\n    max = max(arr)\n    # Pick a random element from arr and update the min\n    arr.remove(min)\n    arr.append(max)\n    # Step 2:\n    # Repeat the process with the new numbers\n    change = 0\n    while len(arr)!= 1:\n        first = arr.pop()\n        second = arr.pop()\n        third = arr.pop()\n        # If the new value is smaller than the minimum or the maximum, then add it to the new list\n        if third < first or second < third:\n            arr.append(third)\n            arr.append(second)\n            arr.append(first)\n            change += 1\n        # If the new value is greater than the minimum or the maximum, then remove it from the new list\n        else:\n            arr.append(third)\n            arr.append(second)\n            arr.append(first)\n            change += 1\n    # If there was no change, just return the number of elements\n    if change == 0:\n        return n\n    # Otherwise, return the number of changes\n    return change\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr)<=1:\n        return 0\n    elif arr[0]!=arr[-1]:\n        return len(arr)\n    else:\n        return smallest_change(arr[1:])+1\ndef closest_palindromic(arr):\n    \"\"\"\n    Given a sequence of integers, find the closest palindromic numbers to the given sequence.\n    \n    For example, if given the array nums = [1,2,3,4,5,6,7], and the given sequence nums = [1,3,2,4,5,6,7],\n    the closest palindromic numbers are [1,3,5,6,7] and [1,3,5,6].\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(dict.fromkeys(lst1 + lst2))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1 + lst2\n    else:\n        return [x for x in lst1 if x not in lst2]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get the number of chars in the first list\n    num_chars = len(lst1[0])\n    # get the number of chars in the second list\n    num_chars2 = len(lst2[0])\n    # if the number of chars in the first list is equal to the second list\n    if num_chars == num_chars2:\n        # return the first list\n        return lst1[0]\n    # if the number of chars in the first list is less than the second list\n    elif num_chars < num_chars2:\n        # return the first list\n        return lst1[0]\n    # if the number of chars in the first list is greater than the second list\n    elif num_chars > num_chars2:\n        # return the first list\n        return lst2[0]\n    else:\n        # return the first list\n        return lst1[0] + lst2[0]"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in lst1 if len(i) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) < len(j):\n                total.append(i)\n            elif len(i) == len(j):\n                total.append(j)\n    return total\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #The idea is that you start by using a loop to iterate through the two lists and check if the number of chars for one list is less than the other. \n    #If there are the same chars, return the first list.\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst3 = []\n    for i in lst2:\n        lst3.extend(i)\n    return lst3\n    \ndef choose_winner(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns a list of the first\n    list and a list of the second list that contains only the elements that are common in \n    both lists. The lists should be sorted by the order they appear in the original list.\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return the same list even if the two lists have different number of chars\n    if len(lst1)!= len(lst2):\n        return []\n    else:\n        count = 0\n        for char in lst1:\n            if char in lst2:\n                count += 1\n        return count\n    \ndef test_total_match():\n    assert total_match([], []) == []\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'hi']) == ['hi', 'hi']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total = 0\n    for i in lst1:\n        total += len(i)\n    for i in lst2:\n        total -= len(i)\n    return list(set(lst1).union(lst2).difference(set(lst2)))[:total]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # 1. Initialize variable \"p\" with 1.\n    # 2. If p = 1, return true.\n    # 3. Else, if p > 1, return false.\n    # 4. Else, p is not a prime number, return false.\n    \n    if a == 0 or a == 1:\n        return True\n    elif a % 2 == 0:\n        return False\n    elif a == 3:\n        return True\n    else:\n        return is_multiply_prime(a // 2)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a < 100:\n        return True\n    for i in range(1, int(math.sqrt(a))+1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a <= 100:\n        return True\n    if a % 2 == 0:\n        return False\n    for i in range(3, int(a**0.5) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(3, 100, 3):\n        if a % i == 0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return a % 3 == 0\ndef is_prime(a):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    E.g.\n    is_prime(7) == True\n    7 = 2 + 3 + 5 + 7\n    \"\"\"\n    if a <= 1:\n        return False\n    if a <= 3:\n        return True\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\ndef is_perfect_square(a):\n    \"\"\"Write a function that returns true if the given number is the perfect square and false otherwise.\n    E.g.\n    is_perfect_square(30) == True\n    30 = 2 + 3 + 5 + 7 + 9 + 11\n    \"\"\"\n    return math.sqrt(a) == math.floor(math.sqrt(a))\ndef is_square(a):\n    \"\"\"Write a function that returns true if the given number is a square and false otherwise.\n    E.g.\n    is_square(3) == False\n    3 = 6 + 9\n    \"\"\"\n    return a ** (1 / 2) == math.sqrt(a)\ndef is_positive_rational_number(a):\n    \"\"\"Write a function that returns true if the given number is a positive rational number and false otherwise.\n    E.g.\n    is_positive_rational_number(1.5) == True\n    1.5 = 3 / 2\n    \"\"\"\n    return a % 1 == 0\ndef is_included_in_set(a, a_set):\n    \"\"\"Write a function that returns true if the given number is an included in a set of numbers.\n    E.g.\n    is_included_in_set(7, [5,4,6,1]) == True\n    7 = 2 + 3 + 5 + 7\n    \"\"\"\n    if a not in a_set:\n        return False\n    return True\ndef is_even_number(a):\n    \"\"\"Write a function that returns true if the given number is even and false otherwise.\n    E.g.\n    is_even_number(1) == True\n    1 = 2\n    \"\"\"\n    return a % 2 == 0\ndef is_palindrome(a):\n    \"\"\"Write a function that returns true if the given number is a palindrome and false otherwise.\n    E.g.\n    is_palindrome(121) == True\n    121 = 121 - 11\n    \"\"\"\n    return a == a[::-1]\ndef is_in(a, b_set):\n    \"\"\"Write a function that returns true if the given list is a subset of the given set and false otherwise.\n    E.g.\n    is_in(list, [1,2,3,4,5]) == True\n    list = [1, 2, 3, 4, 5]\n    1 = 1\n    2 = 2\n    3 = 3\n    4 = 4\n    5 = 5\n    \"\"\"\n    if a in b_set:\n        return True\n    return False\ndef is_subsequence(a, b):\n    \"\"\"Write a function that returns true if the given list is a subsequence of the given list and false otherwise.\n    E.g.\n    is_subsequence([1,2,3,4,5], [5,6,7,8]) == True\n    list = [1,2,3,4,5]\n    5 = 1 + 2 + 3 + 4\n    \"\"\"\n    if a == b:\n        return True\n    return False\ndef is_set_with_m(a):\n    \"\"\"Write a function that returns true if the given list is a set of numbers that can be found by some process\n    using list comprehension and false otherwise.\n    E.g.\n    is_set_with_m([1,2,3,4,5]) == True\n    list = [1, 2, 3, 4, 5]\n    5 = 1 + 2 + 3 + 4\n    \"\"\"\n    return all(is_set_with_m_item(a, i) for i in range(len(a)))\ndef is_set_with_m_item(a, m):\n    \"\"\"Write a function that returns true if the given list is a set of numbers that can be found b"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime_number = False\n    for i in range(2, 100):\n        if a % i == 0:\n            prime_number = True\n            break\n    return prime_number\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #!/bin/python3\n    prime = []\n    for num in range(2,a+1):\n        #print(f\"num is {num}\")\n        if num > 100:\n            break\n        for i in range(2,num):\n            if num % i == 0:\n                #print(f\"num is {num}\")\n                if num % i == 0:\n                    #print(f\"num is {num}\")\n                    break\n        else:\n            prime.append(num)\n    return len(prime) == len(set(prime))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_list = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(prime_list)):\n        if prime_list[i] * prime_list[i + 1] > a:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(2, a):\n        if a%i==0:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all([prime_num == 2 for prime_num in range(3,a,2)])\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Soluciones con While\n    # print(x)\n    # x=x%n\n    # while x>0:\n    #     x=x//n\n    # if x==1:\n    #     return True\n    # else:\n    #     return False\n    \n    # # Solucion con for\n    # for i in range(1,n):\n    #     if (n**i)%x==0:\n    #         return False\n    # return True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (n**int(x)) % int(x) == int(x)"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n<1:\n        return False\n    elif n==1:\n        return True\n    elif n==2:\n        return (x==n)\n    elif n==3:\n        return (x==n**2)\n    elif n==4:\n        return (x==n**3)\n    else:\n        return (x==n**4)"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_n_power_of_x(x, n):\n        if n < 0:\n            return False\n        while n % x == 0:\n            n //= x\n        return n == 1\n    return is_n_power_of_x(x, n)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return not is_simple_power(x, n-1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_power(x, n):\n        if x == 1:\n            return n == 1\n        elif x == 2:\n            return n == 2\n        else:\n            return n == 2 ** (n - 1)\n    return is_power(x, n)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pas"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n**int(math.log(x, n)) <= x\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return is_power_of_2(x) and is_power_of_2(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) == int:\n        if a >= 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return True if a**3 == a**3 else False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a**3 == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return type(a) == int and type(a)!= float and type(a)!= complex\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == 0:\n        return True\n    if a == 1:\n        return False\n    if a == 2:\n        return False\n    if a == 3:\n        return True\n    if a == 4:\n        return False\n    if a == 5:\n        return True\n    if a == 6:\n        return False\n    if a == 7:\n        return True\n    if a == 8:\n        return False\n    if a == 9:\n        return True\n    if a == 10:\n        return False\n    if a == 11:\n        return True\n    if a == 12:\n        return False\n    if a == 13:\n        return True\n    if a == 14:\n        return False\n    if a == 15:\n        return True\n    if a == 16:\n        return False\n    if a == 17:\n        return True\n    if a == 18:\n        return False\n    if a == 19:\n        return True\n    if a == 20:\n        return False\n    if a == 21:\n        return True\n    if a == 22:\n        return False\n    if a == 23:\n        return True\n    if a == 24:\n        return False\n    if a == 25:\n        return True\n    if a == 26:\n        return False\n    if a == 27:\n        return True\n    if a == 28:\n        return False\n    if a == 29:\n        return True\n    if a == 30:\n        return False\n    if a == 31:\n        return True\n    if a == 32:\n        return False\n    if a == 33:\n        return True\n    if a == 34:\n        return False\n    if a == 35:\n        return True\n    if a == 36:\n        return False\n    if a == 37:\n        return True\n    if a == 38:\n        return False\n    if a == 39:\n        return True\n    if a == 40:\n        return False\n    if a == 41:\n        return True\n    if a == 42:\n        return False\n    if a == 43:\n        return True\n    if a == 44:\n        return False\n    if a == 45:\n        return True\n    if a == 46:\n        return False\n    if a == 47:\n        return True\n    if a == 48:\n        return False\n    if a == 49:\n        return True\n    if a == 50:\n        return False\n    if a == 51:\n        return True\n    if a == 52:\n        return False\n    if a == 53:\n        return True\n    if a == 54:\n        return False\n    if a == 55:\n        return True\n    if a == 56:\n        return False\n    if a == 57:\n        return True\n    if a == 58:\n        return False\n    if a == 59:\n        return True\n    if a == 60:\n        return False\n    if a == 61:\n        return True\n    if a == 62:\n        return False\n    if a == 63:\n        return True\n    if a == 64:\n        return False\n    if a == 65:\n        return True\n    if a == 66:\n        return False\n    if a == 67:\n        return True\n    if a == 68:\n        return False\n    if a == 69:\n        return True\n    if a == 70:\n        return False\n    if a == 71:\n        return True\n    if a == 72:\n        return False\n    if a == 73:\n        return True\n    if a == 74:\n        return False\n    if a == 75:\n        return True\n    if a == 76:\n        return False\n    if a == 77:\n        return True\n    if a == 78:\n        return False\n    if a == 79:\n        return True\n    if a == 80:\n        return False\n    if a == 81:\n        return True\n    if a == 82:\n        return False\n    if a == 83:\n        return True\n    if a == 84:\n        return False\n    if a == 85:\n        return True\n    if a == 86:\n        return False\n    if a == 87:\n        return True\n    if a == 88:\n        return False\n    if a == 89:\n        return True\n    if a == 90:\n        return False\n    if a == 91:\n        return True\n    if a == 92:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if (type(a) == int):\n        if (a == 0 or a == 1 or a == 2):\n            return True\n        else:\n            return False\n    \n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return isprime(a) and a**3 == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return isinteger(a, 0, len(str(a)))\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # first check if the input is less than 0\n    if a <= 0:\n        return False\n    # check if the input is positive\n    if a >= 10**9:\n        return False\n    # check if the input is not negative\n    if a >= 1 and a <= 6:\n        return True\n    # the input is not an integer\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"\\n\", \"\")\n    num = num.replace(\" \", \"\")\n    num = num.replace(\"ABCDEF\", \"\")\n    n = len(num)\n    if n == 1:\n        return 1\n    if n == 2:\n        if num[0] == \"A\" and num[1] == \"B\":\n            return 2\n        else:\n            return 0\n    else:\n        decimal = 0\n        prime = 0\n        for i in range(n):\n            if num[i] == \"A\" or num[i] == \"B\":\n                decimal += 1\n            elif num[i] == \"0\" or num[i] == \"1\":\n                prime += 1\n        if prime == 0:\n            return 0\n        if prime == n - 1:\n            return 2\n        else:\n            return 0\n    \ndef solve_problem(num):\n    \"\"\"You have been tasked with implementing a recursive\n    function that receives a string as input and returns the \n    sum of the digits in that input as a string.\n    The function accepts a string as input.\n    Hence you will have to return a string with the sum \n    of all the digits of the input string.\n    Examples:\n    For num = \"AB\" the output should be \"AD\"\n    For num = \"1077E\" the output should be \"EF\"\n    For num = \"123456789ABCDEF0\" the output should be \"A0\"\n    For num = \"2020\" the output should be \"20\"\n    For num = \"0123456789\" the output should be \"3456\"\n    For num = \"10101010\" the output should be \"CDD\"\n    For num = \"3211\" the output should be \"33\"\n    For num = \"1234\" the output should be \"123\"\n    For num = \"123456789ABCDEFABCD\" the output should be \"ABCDEF123456789ABCDEF\"\n    \"\"\"\n    # YOUR CODE HERE\n    if num == \"\":\n        return \"\"\n    if num == \" \":\n        return \" \"\n    return num.replace(\" \", \"\").replace(\"\\n\", \"\") + solve_problem(num[1:])\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if not isinstance(num, str):\n        raise TypeError(\"Only string is allowed as input\")\n    for i in range(0,len(num)):\n        if num[i].isalpha():\n            raise ValueError(\"Only a single alphabet symbol is allowed as input\")\n    if len(num)%2 == 0:\n        prime_num = int(len(num)/2)\n        if prime_num > 0:\n            if is_prime(int(num[:prime_num])) and is_prime(int(num[prime_num:])):\n                return int(num[:prime_num])*int(num[prime_num:])\n            else:\n                raise ValueError(\"Prime numbers are only 3 or less\")\n        else:\n            raise ValueError(\"Prime numbers are only 3 or less\")\n    elif len(num) % 2!= 0:\n        raise ValueError(\"Only odd numbers are allowed\")\n    else:\n        raise ValueError(\"Only odd numbers are allowed\")\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Python3:\n    # [1] = https://www.w3schools.com/python/python_operators.asp\n    # [2] = https://www.w3schools.com/python/python_operators.asp\n    # [3] = https://www.w3schools.com/python/python_operators.asp\n    # [4] = https://www.w3schools.com/python/python_operators.asp\n    # [5] = https://www.w3schools.com/python/python_operators.asp\n    # [6] = https://www.w3schools.com/python/python_operators.asp\n    # [7] = https://www.w3schools.com/python/python_operators.asp\n    # [8] = https://www.w3schools.com/python/python_operators.asp\n    # [9] = https://www.w3schools.com/python/python_operators.asp\n    # [10] = https://www.w3schools.com/python/python_operators.asp\n    # [11] = https://www.w3schools.com/python/python_operators.asp\n    # [12] = https://www.w3schools.com/python/python_operators.asp\n    # [13] = https://www.w3schools.com/python/python_operators.asp\n    # [14] = https://www.w3schools.com/python/python_operators.asp\n    # [15] = https://www.w3schools.com/python/python_operators.asp\n    # [16] = https://www.w3schools.com/python/python_operators.asp\n    # [17] = https://www.w3schools.com/python/python_operators.asp\n    # [18] = https://www.w3schools.com/python/python_operators.asp\n    # [19] = https://www.w3schools.com/python/python_operators.asp\n    # [20] = https://www.w3schools.com/python/python_operators.asp\n    # [21] = https://www.w3schools.com/python/python_operators.asp\n    # [22] = https://www.w3schools.com/python/python_operators.asp\n    # [23] = https://www.w3schools.com/python/python_operators.asp\n    # [24] = https://www.w3schools.com/python/python_operators.asp\n    # [25] = https://www.w3schools.com/python/python_operators.asp\n    # [26] = https://www.w3schools.com/python/python_operators.asp\n    # [27] = https://www.w3schools.com/python/python_operators.asp\n    # [28] = https://www.w3schools.com/python/python_operators.asp\n    # [29] = https://www.w3schools.com/python/python_operators.asp\n    # [30] = https://www.w3schools.com/python/python_operators.asp\n    # [31] = https://www.w3schools.com/python/python_operators.asp\n    # [32] = https://www.w3schools.com/python/python_operators.asp\n    # [33] = https://www.w3schools.com/python/python_operators.asp\n    # [34] = https://www.w3schools.com/python/python_operators.asp\n    # [35] = https://www.w3schools.com/python/python_operators.asp\n    # [36] = https://www.w3schools.com/python/python_operators.asp\n    # [37] = https://www.w3schools.com/python/python_operators.asp\n    # [38] = https://www.w3schools.com/python/python_operators.asp\n    # [39] = https://www.w3schools.com/python/python_operators.asp\n    # [4"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in str(num):\n        if i.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = []\n    for i in range(len(num)):\n        if num[i] in \"0123456789ABCDEF\":\n            lst.append(int(num[i]))\n    lst = sorted(lst)\n    return len(lst)"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement this function\n    \n    \n    def prime_digits(num):\n        # TODO: implement this function\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Check input is correct or not.\n    if not isinstance(num, str):\n        raise TypeError(\"num should be a string\")\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def hex_d(num):\n        \"\"\"You have been tasked to write a function that receives\n        a string of any number of characters that are numbers, \n        and returns the number of hexadecimal digits in the string.\n        \"\"\"\n        return sum(set(int(num, 16) for num in str(num)))\n    return hex_d(num)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = str(num)\n    count = 0\n    for i in s:\n        if i in \"ABCDEF\":\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # variables\n    NUMBER_OF_PRIMES = 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not isinstance(decimal, (int, float)):\n        raise TypeError(f\"decimal_to_binary expected int or float, got {type(decimal)}\")\n    if decimal < 0:\n        raise ValueError(f\"decimal_to_binary got decimal < 0: {decimal}\")\n    binary = []\n    while decimal > 0:\n        digit = decimal % 2\n        binary.insert(0, str(digit))\n        decimal = decimal // 2\n    \n    # add binary number at the end of the string\n    binary.insert(len(binary), 'db')\n    return ''.join(binary)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return f\"{decimal:b}\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    bin_str = \"\"\n    if decimal < 0:\n        decimal *= -1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    binary = ''\n    while decimal:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary + 'db' * (len(binary) % 2)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # base = 2\n    # return \"db\" + str(bin(decimal))[2:]\n    # base = 4\n    return str(bin(decimal))[2:]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # first, get the decimal number\n    number = str(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    binary = ''\n    while decimal > 0:\n        digit = decimal % 2\n        binary += '1' if digit == 0 else '0'\n        decimal = decimal // 2\n    return binary[::-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if decimal > 0:\n        binary = '1' * (decimal + 1)\n    elif decimal == 0:\n        binary = '0' * decimal\n    else:\n        binary = 'db' * decimal\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    binary = []\n    binary.append(str(bin(decimal)[2:]))\n    binary.append(str(bin(decimal)[2:]))\n    return \"\".join(binary)"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([bin(decimal).replace(\"0b\", \"\").zfill(5), \"db\"])\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.lower()\n    if not s:\n        return False\n    i = 0\n    check = [False] * len(s)\n    check[i] = True\n    while i < len(s) - 1:\n        if s[i] == s[i+1]:\n            check[i] = True\n            i += 2\n        else:\n            i += 1\n            if check[i]:\n                check[i] = False\n    return check\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s_list = list(s)\n    flag = True\n    for i in range(len(s_list) - 2):\n        if s_list[i] == s_list[i+1] and s_list[i+1] == s_list[i+2]:\n            flag = False\n            break\n    if flag:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(s) >= 3 and all(letter in s[i:i+3] for i in range(len(s)-2))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pattern = 'abcdefghijklmnopqrstuvwxyz'\n    if len(s) < 3 or len(pattern)!= len(s):\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = False\n    for i in range(len(s)):\n        if len(set(s[i])) > 1:\n            result = False\n        else:\n            result = True\n        if i == len(s)-1:\n            if len(set(s[i]))!= 2:\n                result = False\n        if result:\n            return result\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) <= 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(s) >= 3 and len(set(s)) == len(set(s))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    return s[0] == s[1] == s[2] and (not any(i == s[i] for i in range(3, len(s))))\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(s) >= 3 and \\\n            any(a not in s for a in [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)):\n        if s[i] not in s[i+1:len(s)]:\n            return False\n    return True\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    gpa_table = {\n        'A+' : 4.0, 'A' : 3.5, 'B' : 3.0, 'C' : 2.7, 'D' : 2.3, 'E' : 2.0, 'F' : 1.7\n    }\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    gpa = grades[0]\n    \n    if gpa <= 3.0:\n        return ['A+' for i in range(len(grades))]\n    elif gpa <= 3.5:\n        return ['A' for i in range(len(grades))]\n    elif gpa <= 3.7:\n        return ['B' for i in range(len(grades))]\n    elif gpa <= 3.3:\n        return ['B-' for i in range(len(grades))]\n    elif gpa <= 3.0:\n        return ['C' for i in range(len(grades))]\n    elif gpa <= 2.7:\n        return ['C-' for i in range(len(grades))]\n    elif gpa <= 2.3:\n        return ['C+' for i in range(len(grades))]\n    elif gpa <= 1.7:\n        return ['C' for i in range(len(grades))]\n    elif gpa <= 1.3:\n        return ['C-' for i in range(len(grades))]\n    elif gpa <= 1.0:\n        return ['D' for i in range(len(grades))]\n    elif gpa <= 0.7:\n        return ['D-' for i in range(len(grades))]\n    elif gpa <= 0.0:\n        return ['E' for i in range(len(grades))]\n    else:\n        return ['F' for i in range(len(grades))]\n        \n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    grade_table = [\n    'A+', 'A', 'A-', 'B+', 'B', 'B-',\n    'C+', 'C', 'C-', 'C', 'C-', 'C',\n    'D+', 'D', 'D-', 'D', 'D-', 'D',\n    'E+', 'E', 'E-', 'E', 'E-', 'E',\n    'F+', 'F', 'F-', 'F', 'F-', 'F',\n    'A', 'A+', 'A-', 'B+', 'B', 'B-',\n    'C', 'C+', 'C-', 'C', 'C-', 'C',\n    'D', 'D+', 'D', 'D-', 'D', 'D',\n    'E', 'E+', 'E', 'E-', 'E', 'E',\n    'F', 'F+', 'F-', 'F', 'F-', 'F',\n    '', '', '', '', '', '',\n    ]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    #TODO: Complete this function.\n    #Part 1.\n    #Extract information from the list:\n    #  - the number of elements in the list (n)\n    #  - the number of elements in the first half of the list (h)\n    #  - the number of elements in the second half of the list (s)\n    #  - the number of elements in the last half of the list (l)\n    #  - the number of elements in the third half of the list (t)\n    #  - the number of elements in the fourth half of the list (b)\n    #  - the number of elements in the fifth half of the list (c)\n    #  - the number of elements in the last half of the list (e)\n    #  - the number of elements in the third half of the list (f)\n    #  - the number of elements in the fifth half of the list (g)\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # A list of GPA grades\n    gpa_list = []\n    # For each row in the given list of GPA grades\n    for row in grades:\n        # For each column in the row\n        for column in row:\n            # If the value is non zero, the element is a GPA grade\n            if column!= 0:\n                # Add the value to the list of grades\n                gpa_list.append(column)\n    # Return the list of GPA grades\n    return gpa_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    letter_grades = {}\n    for grade in grades:\n        if grade[0] == '4.0':\n            letter_grades['A+'] = grade\n        elif grade[0] == '>3.7':\n            letter_grades['A'] = grade\n        elif grade[0] == '>3.3':\n            letter_grades['B'] = grade\n        elif grade[0] == '>3.0':\n            letter_grades['B+'] = grade\n        elif grade[0] == '>2.7':\n            letter_grades['B'] = grade\n        elif grade[0] == '>2.3':\n            letter_grades['B-'] = grade\n        elif grade[0] == '>2.0':\n            letter_grades['C+'] = grade\n        elif grade[0] == '>1.7':\n            letter_grades['C'] = grade\n        elif grade[0] == '>1.3':\n            letter_grades['C-'] = grade\n        elif grade[0] == '>1.0':\n            letter_grades['D+'] = grade\n        elif grade[0] == '>0.7':\n            letter_grades['D'] = grade\n        elif grade[0] == '>0.0':\n            letter_grades['D-'] = grade\n        elif grade[0] == '0.0':\n            letter_grades['E'] = grade\n        else:\n            letter_grades['error'] = grade\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(grades)!= 12:\n        raise Exception(\"Invalid number of grades\")\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(grades) == 0:\n        return []\n    else:\n        gpa_score = 0\n        letter_grade_score = 0\n        for grade in grades:\n            if grade >= 4.0:\n                gpa_score += 1\n            elif grade >= 3.7:\n                letter_grade_score += 1\n            elif grade >= 3.3:\n                letter_grade_score += 1\n            elif grade >= 3.0:\n                letter_grade_score += 1\n            elif grade >= 2.7:\n                letter_grade_score += 1\n            elif grade >= 2.3:\n                letter_grade_score += 1\n            elif grade >= 2.0:\n                letter_grade_score += 1\n            elif grade >= 1.7:\n                letter_grade_score += 1\n            elif grade >= 1.3:\n                letter_grade_score += 1\n            elif grade >= 1.0:\n                letter_grade_score += 1\n            elif grade >= 0.7:\n                letter_grade_score += 1\n            elif grade >= 0.0:\n                letter_grade_score += 1\n            elif grade < 0.0:\n                letter_grade_score += 1\n        return [gpa_score, letter_grade_score]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_list = [4.0, 3.5, 3, 3.5, 2, 2, 1, 1.7, 1.3, 1.0]\n    return (sorted(list(zip(*num_list)), key=lambda x: x[0], reverse=True))\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(map(lambda x: round(x/7) * 10, grades))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    check = True\n    for i in range(2, len(string)):\n        # print(str(string[i]))\n        # print(len(str(string[i])))\n        if len(str(string[i])) == 1:\n            check = False\n    return check\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Import libraries\n    import math\n    from math import sqrt\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if string == 'kittens' or string == 'orange' or string == 'k':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(2, int(len(string)/2)+1):\n        if string[i] in string[i+1:]:\n            return False\n    return True\n    \ndef all_palindromes(string):\n    \"\"\"Write a function that takes a string and returns True if it contains all\n    palindromes or False otherwise.\n    Examples\n    all_palindromes('Hello') == True\n    all_palindromes('abcdcba') == True\n    all_palindromes('kittens') == True\n    all_palindromes('orange') == False\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string), 1):\n            if string[i:j] == string[j:j+1][::-1]:\n                count += 1\n    return count == len(string)\n    \ndef reverse_string(string):\n    \"\"\"Write a function that takes a string and returns a reversed string.\n    Examples\n    reverse_string('Hello') == 'olleH'\n    reverse_string('abcdcba') == 'dcbaab'\n    reverse_string('kittens') == 'ksnipct'\n    reverse_string('orange') == 'orb'\n    \"\"\"\n    return string[::-1]\n    \ndef remove_punctuation(string):\n    \"\"\"Write a function that takes a string and returns a string without\n    punctuation.\n    Examples\n    remove_punctuation('Hello') == 'Hello'\n    remove_punctuation('abcdcba') == 'abc'\n    remove_punctuation('kittens') == 'kittens'\n    remove_punctuation('orange') == 'or'\n    \"\"\"\n    remove = []\n    for char in string:\n        if char not in string.punctuation:\n            remove.append(char)\n    return ''.join(remove)\n    \ndef count_uppercase(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    uppercase characters in the string.\n    Examples\n    count_uppercase('Hello') == 2\n    count_uppercase('abcdcba') == 3\n    count_uppercase('kittens') == 3\n    count_uppercase('orange') == 4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n    \ndef count_lowercase(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    lowercase characters in the string.\n    Examples\n    count_lowercase('Hello') == 2\n    count_lowercase('abcdcba') == 3\n    count_lowercase('kittens') == 3\n    count_lowercase('orange') == 4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count\n    \ndef count_symbols(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    symbols in the string.\n    Examples\n    count_symbols('Hello') == 2\n    count_symbols('abcdcba') == 4\n    count_symbols('kittens') == 5\n    count_symbols('orange') == 6\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in string.punctuation:\n            count += 1\n    return count\n    \ndef count_punctuation(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    punctuation characters in the string.\n    Examples\n    count_punctuation('Hello') == 2\n    count_punctuation('abcdcba') == 4\n    count_punctuation('kittens') == 5\n    count_punctuation('orange') == 6\n    \"\"\"\n    count = 0\n    for char in string:\n        if char in string.punctuation:\n            count += 1\n    return count\n    \ndef count_repeated_chars(string):\n    \"\"\"Write a function that takes a string and returns the number of\n    repeated characters.\n    Examples\n    count_repeated_chars('Hello') == 2\n    count_repeated_chars('abcdcba') == 4\n    count_repeated_c"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    is_prime = True\n    for i in range(2, len(string)):\n        if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n            is_prime = False\n        if not is_prime:\n            break\n    return is_prime"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if len(string) <= 2:\n        return False\n    elif string[-2:] == 'ly':\n        return False\n    elif string[-2:] == 'cs':\n        return False\n    elif string[-2:] == 't':\n        return False\n    elif string[-2:] =='s':\n        return True\n    elif string[-2:] == 'o':\n        return True\n    elif string[-2:] == 'r':\n        return True\n    elif string[-2:] == 'n':\n        return True\n    elif string[-2:] == 'v':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(2, len(string) + 1):\n        if string[count] == string[0] or string[count] == string[len(string) - 1]:\n            count += 1\n        else:\n            count = 0\n    if count == len(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    check = string\n    is_prime = True\n    \n    # Iterate over all non-negative numbers from 1 to the length of the\n    # string.\n    for num in range(1, len(check)):\n        # Check if the current number is a multiple of 10. If it is, then\n        # it is not a prime number.\n        if check[num] % 10 == 0:\n            is_prime = False\n            break\n        \n    return is_prime\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(string) <= 1:\n        return True\n    if string[0] == string[-1]:\n        return True\n    if string[0]!= string[-1]:\n        return False\n    for i in range(2, len(string)):\n        if string[i]!= string[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n<=0: return 0\n    count=0\n    start=2**(n-1)\n    if start==0: return 1\n    end=start-1\n    while end>0:\n        if start&end==start-1: count+=1\n        end=end-1\n    return count"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    start_n = 2 ** (n-1)\n    end_n = start_n * (n+1)\n    return start_n + end_n - 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for digit in str(n):\n        if digit == '1':\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(1 for x in range(n) if x % 10 == 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return bin(n).count('1')\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return int(n - 1)**3 - 3*n\n    \n    \ndef fives(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of\n    n-digit positive integers that start or end with 5.\n    \"\"\"\n    return int(n - 5)**3 - 3*n\n    \n    \ndef ten(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of\n    n-digit positive integers that start or end with 10.\n    \"\"\"\n    return int(n - 10)**3 - 3*n\n    \n    \ndef hundred(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of\n    n-digit positive integers that start or end with 100.\n    \"\"\"\n    return int(n - 100)**3 - 3*n\n    \n    \ndef main():\n    print(fives(100))\n    print(fives(10))\n    print(fives(50))\n    print(fives(1))\n    print(fives(2))\n    print(fives(4))\n    print(fives(6))\n    print(fives(8))\n    print(fives(12))\n    print(fives(144))\n    print(fives(400))\n    print(fives(800))\n    print(fives(8100))\n    print(fives(10000))\n    print(fives(11000))\n    print(fives(13000))\n    print(fives(15000))\n    print(fives(20000))\n    print(fives(21000))\n    print(fives(34000))\n    print(fives(44000))\n    print(fives(500000))\n    print(fives(640000))\n    print(fives(8000000))\n    print(fives(1500000))\n    print(fives(200000))\n    print(fives(2500000))\n    print(fives(3000000))\n    print(fives(5000000))\n    print(fives(7000000))\n    print(fives(1000000))\n    print(fives(15000000))\n    print(fives(25000000))\n    print(fives(35000000))\n    print(fives(4000000))\n    print(fives(5000000000))\n    print(fives(7000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))\n    print(fives(1000000000))\n    print(fives(15000000000))\n    print(fives(25000000000))\n    print(fives(35000000000))\n    print(fives(45000000000))\n    print(fives(5000000000))\n    print(fives(75000000000))"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    start, end = 1, 1\n    while start < n:\n        start, end = end, start + end\n        start += 1\n    return end - start\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1: return 0\n    # print(\"n: \", n)\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            # print(\"i: \", i, \"j: \", j, \"dp[i,j]: \", dp[i], \"dp[j,i]: \", dp[j])\n            if dp[i] == 0:\n                dp[i] += dp[j]\n            else:\n                dp[i] += dp[j] - dp[i]\n    # print(\"dp[i,j]: \", dp[i], \"dp[j,i]: \", dp[j])\n    return dp[n]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if N == 0:\n        return \"\"\n    \n    # TODO: Write your code here.\n    num = []\n    while N!= 0:\n        num.append(int(N % 2))\n        N = int(N / 2)\n    \n    return str(num)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return str(bin(N))[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    while N!= 0:\n        sum += N % 10\n        N //= 10\n    if sum == 0:\n        return \"0\"\n    elif sum == 1:\n        return \"1\"\n    else:\n        return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return \"2\"\n    if N == 3:\n        return \"3\"\n    if N == 4:\n        return \"4\"\n    if N == 5:\n        return \"5\"\n    if N == 6:\n        return \"6\"\n    if N == 7:\n        return \"7\"\n    if N == 8:\n        return \"8\"\n    if N == 9:\n        return \"9\"\n    if N == 10:\n        return \"10\"\n    if N == 11:\n        return \"11\"\n    if N == 12:\n        return \"12\"\n    if N == 13:\n        return \"13\"\n    if N == 14:\n        return \"14\"\n    if N == 15:\n        return \"15\"\n    if N == 16:\n        return \"16\"\n    if N == 17:\n        return \"17\"\n    if N == 18:\n        return \"18\"\n    if N == 19:\n        return \"19\"\n    if N == 20:\n        return \"20\"\n    if N == 21:\n        return \"21\"\n    if N == 22:\n        return \"22\"\n    if N == 23:\n        return \"23\"\n    if N == 24:\n        return \"24\"\n    if N == 25:\n        return \"25\"\n    if N == 26:\n        return \"26\"\n    if N == 27:\n        return \"27\"\n    if N == 28:\n        return \"28\"\n    if N == 29:\n        return \"29\"\n    if N == 30:\n        return \"30\"\n    if N == 31:\n        return \"31\"\n    if N == 32:\n        return \"32\"\n    if N == 33:\n        return \"33\"\n    if N == 34:\n        return \"34\"\n    if N == 35:\n        return \"35\"\n    if N == 36:\n        return \"36\"\n    if N == 37:\n        return \"37\"\n    if N == 38:\n        return \"38\"\n    if N == 39:\n        return \"39\"\n    if N == 40:\n        return \"40\"\n    if N == 41:\n        return \"41\"\n    if N == 42:\n        return \"42\"\n    if N == 43:\n        return \"43\"\n    if N == 44:\n        return \"44\"\n    if N == 45:\n        return \"45\"\n    if N == 46:\n        return \"46\"\n    if N == 47:\n        return \"47\"\n    if N == 48:\n        return \"48\"\n    if N == 49:\n        return \"49\"\n    if N == 50:\n        return \"50\"\n    if N == 51:\n        return \"51\"\n    if N == 52:\n        return \"52\"\n    if N == 53:\n        return \"53\"\n    if N == 54:\n        return \"54\"\n    if N == 55:\n        return \"55\"\n    if N == 56:\n        return \"56\"\n    if N == 57:\n        return \"57\"\n    if N == 58:\n        return \"58\"\n    if N == 59:\n        return \"59\"\n    if N == 60:\n        return \"60\"\n    if N == 61:\n        return \"61\"\n    if N == 62:\n        return \"62\"\n    if N == 63:\n        return \"63\"\n    if N == 64:\n        return \"64\"\n    if N == 65:\n        return \"65\"\n    if N == 66:\n        return \"66\"\n    if N == 67:\n        return \"67\"\n    if N == 68:\n        return \"68\"\n    if N == 69:\n        return \"69\"\n    if N == 70:\n        return \"70\"\n    if N == 71:\n        return \"71\"\n    if N == 72:\n        return \"72\"\n    if N == 73:\n        return \"73\"\n    if N == 74:\n        return \"74\"\n    if N == 75:\n        return \"75\"\n    if N == 76:\n        return \"76\"\n    if N == 77:\n        return \"77\"\n    if N == 78:\n        return "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if N <= 1:\n        return N\n    return sum([int(i) for i in str(N)])"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert (N > 0), \"number is not positive.\"\n    n = abs(N)\n    sum = 0\n    while(n > 0):\n        if (n % 2 == 0):\n            sum += n//2\n        n = n//10\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = \"\"\n    \n    # if N is 0, return 0\n    if N == 0:\n        return 0\n    \n    while N > 0:\n        s += str(N % 2)\n        N = N // 2\n    return s[::-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = \"\"\n    while N > 0:\n        remainder = N % 2\n        N = N // 2\n        if remainder == 1:\n            result = result + \"1\"\n        else:\n            result = result + \"0\"\n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #Get the number of digits in number\n    n = len(bin(N))-2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # memoization\n    # memo = {0: 0}\n    # @N = 0\n    # return 0\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    lst = lst[::2]\n    even_idx = 0\n    odd_idx = len(lst) - 1\n    while even_idx < odd_idx:\n        if lst[even_idx] % 2 == 1:\n            lst.append(lst[even_idx])\n            even_idx += 1\n        else:\n            lst[odd_idx] = lst[odd_idx] + lst[even_idx]\n            even_idx += 1\n            odd_idx -= 1\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_lst = []\n    odd = []\n    even = []\n    for num in lst:\n        if num % 2 == 0:\n            new_lst.append(num)\n        else:\n            even.append(num)\n    for num in new_lst:\n        odd.append(num)\n    for num in even:\n        lst.remove(num)\n    return lst + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # lst.sort() \n    return sum([el for i, el in enumerate(lst) if i % 2!= 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code here\n    even=[]\n    odd=[]\n    for i in range(len(lst)):\n        if i%2==0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    print(even)\n    print(odd)\n    even=even[::2]\n    print(even)\n    odd=odd[::-2]\n    print(odd)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    evens = []\n    odds = []\n    while lst:\n        if lst[0] % 2 == 0:\n            evens.append(lst[0])\n        else:\n            odds.append(lst[0])\n        del lst[0]\n    if len(odds) % 2 == 1:\n        evens += odds[::2]\n    return evens + odds\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = [el for el in lst if el%2==0]\n    odd = [el for el in lst if el%2==1]\n    lst = even + odd\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    lst2=[]\n    for i in lst:\n        if (i%2)==0:\n            lst2.append(i)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    even = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n    odd = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n    for i in lst:\n        if i % 2 == 1:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even, odd = 0, len(lst)\n    while even <= odd - 1:\n        if even % 2 == 0:\n            lst.append(lst.pop(odd))\n            odd -= 1\n        else:\n            lst.append(lst.pop(even))\n            even += 1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort()\n    i = 1\n    if lst[0] % 2 == 0:\n        return lst[i:len(lst):2]\n    else:\n        return lst[i:] + lst[:i]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # You will need to replace all the word with a new word.\n    # The new word will be in the end of the string.\n    new_str = ''\n    for word in s.split():\n        new_str += word[::-1] +''\n    return new_str[:-1]\n    "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    list = list(s)\n    new_list = []\n    for i in range(len(list)):\n        for j in range(len(list[i])):\n            if j == 0:\n                new_list.append(list[i][j])\n            else:\n                new_list.append(list[i][j])\n        for k in range(len(new_list)):\n            if new_list[k] =='':\n                new_list[k] = list[i][k]\n            else:\n                continue\n        new_list.append(' ')\n    return ''.join(new_list)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = str(s).lower()\n    s = re.sub('[^a-zA-Z]','', s)\n    s = s.split(' ')\n    s = [s[i].strip() for i in range(len(s))]\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.split()\n    l = list(map(ord, s))\n    if len(s) > len(set(l)):\n        return ''.join(map(chr, sorted(l)))\n    else:\n        return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(sorted(s))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Time complexity: O(n)\n    # Space complexity: O(n)\n    # Since the string is converted to ascii, we have to sort the string to get the new string\n    # The idea is to put all the words in the sorted order in a list and then reverse the list to get the new string\n    # This time complexity is O(n) since in this sort is done in O(1)\n    # As there is also a way to fill the list in a sorted way,\n    # we will do the same for the list.\n    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code goes here\n    # return ''.join(sorted(s, key=str.lower))\n    return''.join(sorted(s, key=str.lower))\n    # raise NotImplementedError"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code goes here\n    new_str = ''\n    words = s.split()\n    for i in words:\n        # print(i,type(i))\n        new_str += str((ord(i[0]) - 65) % 26) + \" \" + i\n    new_str +=''\n    return new_str"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your anti_shuffle function here\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Let's just do the thing:\n    return ''.join(sorted(s.split(' '), key=lambda c: 97 + ord(c)))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    if isinstance(lst, list):\n        return [tuple(row) for row in sorted(lst, key = lambda x: (x[0], x[1]), reverse=False)]\n    else:\n        return lst.sort(key = lambda x: (x[0], x[1]), reverse=False)\n    \ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 2), (1, 3), (1, 0), (4, 5), (4, 0)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(1, 1), (1, 2), (1, 3)]\n    \"\"\"\n    # TODO\n    if isinstance(lst, list):\n        return [tuple(col) for col in sorted(lst, key = lambda x: (x[1], x[0]), reverse=False)]\n    else:\n        return lst.sort(key = lambda x: (x[1], x[0]), reverse=False)\n    \ndef test_get_row():\n    assert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    assert get_row([[1], [1], [1, 2, 3]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([[1,2,3,4,1,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5) == [(0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]\n    assert get_row([[1,2,3,4,1,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n    assert get_row([[1,2,3,4,1,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n    assert get_row([[1,2,3,4,1,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n    assert get_row([[1,2,3,4,1,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]\n    assert get_row([[1,2,3,4,"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    row_set = set()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            row_set.add(lst[i][j])\n    row_set.sort()\n    return [(row_set.index(x) + 1, x) for x in range(len(lst[0]) + 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for row in lst:\n        result.append(row[x])\n    result.sort()\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res)\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) < 1:\n        return []\n    if x not in lst:\n        return []\n    \n    # Find minimum and maximum values in each row\n    minimum_row = minimum(lst[x])\n    maximum_row = maximum(lst[x])\n    \n    # Sort coordinates in ascending order\n    lst.sort(key=lambda row: row[minimum_row], reverse=True)\n    \n    # Sort coordinates in descending order\n    lst.sort(key=lambda row: row[maximum_row], reverse=False)\n    \n    # Create tuples of the new coordinates\n    # (row, column)\n    return [(coordinate[minimum_row], coordinate[maximum_row]) for coordinate in lst]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def lst_to_row(lst, x):\n        \"\"\"\n        Assumes that lst is a nested list of lists.\n        Returns a nested list of tuples, where each tuple is\n        (x, y) where (x, y) is a coordinate - (row, columns), starting\n        with 0.\n        \"\"\"\n        if x < 0 or x > len(lst)-1:\n            raise ValueError('Invalid index!')\n        return [(x, i) for i in range(len(lst))]\n    \n    \n    def row_to_lst(row):\n        \"\"\"\n        Assumes that row is a nested list of tuples.\n        Returns a nested list of lists, where each list contains\n        the coordinate - (row, column), starting with 0.\n        \"\"\"\n        return [lst[x] for x in row]\n        \n    \n    def find_coord(row):\n        \"\"\"\n        Assumes that row is a nested list of tuples.\n        Returns an integer, which is the index of\n        the coordinate - (row, column) in the row list.\n        \"\"\"\n        for (x, y) in row:\n            if x == y:\n                return x\n        raise ValueError('None!')\n        \n    \n    row = lst_to_row(lst, x)\n    row = sorted(row, key = lambda r: r[0])\n    row = sorted(row, key = lambda r: r[1])\n    \n    lst = [row_to_lst(row_) for row_ in row]\n    \n    lst.sort(key=lambda r: r[0])\n    \n    return lst\n    \n    \ndef get_row_from_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row_from_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row_from_col([], 1) == []\n    get_row_from_col([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    def lst_to_row(lst, x):\n        \"\"\"\n        Assumes that lst is a nested list of lists.\n        Returns a nested list of tuples, where each tuple is\n        (x, y) where (x, y) is a coordinate - (row, columns), starting\n        with 0.\n        \"\"\"\n        if x < 0 or x > len(lst)-1:\n            raise ValueError('Invalid index!')\n        return [lst[x][y] for y in range(len(lst[x]))]\n    \n    \n    def row_to_lst(row):\n        \"\"\"\n        Assumes that row is a nested list of tuples.\n        Returns a nested list of lists, where each list contains\n        the coordinate - (row, column), starting with 0.\n        \"\"\"\n        return [lst[y] for y in row]\n        \n    \n    def find_coord(row):\n        \"\"\"\n        Assumes that row is a nested list of tuples.\n        Returns an integer, which is the index of\n        the coordinate - (row, column) in the row list.\n        \"\"\"\n        for (x, y) in row:\n            if x == y:\n                return x\n        raise ValueError('None!')\n        \n    \n    row = lst_to_row(lst, x)\n    row = sorted(row, key = lambda r: r[0])\n    ro"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(lst) <= 2\n    assert len(lst[0]) >= len(lst)\n    coordinates = []\n    for i in range(len(lst)):\n        row = []\n        for j in range(len(lst[0])):\n            x_coord = x + (i, j)\n            row.append(x_coord)\n        coordinates.append(tuple(row))\n    return coordinates\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n    return [(x, i) for i, x in enumerate(lst)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return []\n    lst.sort(key = lambda x: x[1])\n    result = []\n    for i, x in enumerate(lst):\n        if x[0] == x[1]:\n            result.append((x[0], i))\n    return sorted(result, key = lambda x: x[1])\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not lst:\n        return []\n    if len(lst) == 1:\n        return [(lst[0][0], lst[0][1]), ]\n    lst = sorted(lst, key = lambda x : x[0])\n    sorted_lst = sorted(lst, key = lambda x : x[1])\n    return [(i[0], i[1]) for i in sorted_lst]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def sort_first(nums, start, end):\n        if start == end:\n            return [nums[start]]\n        \n        mid = (start + end) // 2\n        \n        sort_first_part = sort_first(nums, start, mid)\n        sort_second_part = sort_first(nums, mid + 1, end)\n        \n        sorted_first = [a for a in sort_first_part if a <= mid]\n        sorted_second = [a for a in sort_second_part if a >= mid]\n        \n        return sorted_first + sorted_second\n    \n    return sort_first(array, 0, len(array) - 1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total = sum(array)\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(array) == 0:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_array = []\n    sum = 0\n    for num in array:\n        sum += num\n    # print(f\"sum of array: {sum}\")\n    \n    for num in array:\n        if sum % 2 == 1:\n            sorted_array.append(num)\n        else:\n            # print(f\"{num} is odd\")\n            sorted_array.append(num)\n        sum //= 2\n    \n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def sort(arr):\n        if sum(arr) % 2 == 1:\n            return arr\n        else:\n            sum_arr = sum(arr)\n            if sum_arr % 2 == 1:\n                return [sum_arr//2] + sort(arr[:sum_arr//2]) + sort(arr[sum_arr//2:])\n            else:\n                return [sum_arr//2] + sort(arr[:sum_arr//2]) + [sum_arr//2 + 1] + sort(arr[sum_arr//2+1:])\n    return sort(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr = sorted(array)\n    for i in range(len(arr)):\n        if (arr[i] % 2):\n            arr[i], arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    return arr\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(array) == 0:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def sort(array):\n        # Base case\n        if not array: return None\n        # Sort the given array in ascending order\n        array = sorted(array)\n        # Compare the numbers in the array\n        for index in range(len(array)):\n            # If the sum of the numbers in the sorted array is odd, it would be greater than the number in the original array.\n            # We update the index in the original array so that we know we are not looking at the index of the element in the sorted array\n            # If the sum of the numbers in the sorted array is even, we update the index of the element in the original array so that we know it is not looking at the index of the element in the sorted array\n            if array[index] % 2 == 1:\n                array[index] += array[index + 1]\n                array[index + 1] = array[index]\n            else:\n                array[index] -= array[index + 1]\n                array[index + 1] = array[index]\n        # Return the sorted array\n        return array\n    \n    # Create a new array with the same size as the given array\n    new_array = [0] * len(array)\n    # Sort the given array in ascending order\n    new_array = sort(array)\n    \n    # Return the new array\n    return new_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # check if the array is empty or None\n    if not array:\n        return None\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert len(array) > 0, \"Array can't be empty\"\n    \n    sorted_array = sorted(array)\n    \n    if (len(sorted_array) % 2) == 1:\n        odd_index = int(len(sorted_array)/2)\n        sorted_array[odd_index], sorted_array[len(sorted_array) - 1] = sorted_array[len(sorted_array) - 1], sorted_array[odd_index]\n    \n    return sorted_array"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = s.lower()\n    alph = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    i = 0\n    while i < len(s):\n        encrypted += alph[((ord(s[i]) - ord('a')) + 2) % 26]\n        i += 1\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"\"\"\n    # your code goes here\n    return \"\"\n    \"\"\"\n    # Your code goes here\n    return \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join(i+j for i,j in zip(s[::2],s[1::2]))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    c = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    s = s.lower()\n    \n    #print(s)\n    #print(s[0:4])\n    #print(s[4:])\n    #print(s[4])\n    #print(c.index(s[4]))\n    \n    l = []\n    for i in range(0,len(s)):\n        l.append(c.index(s[i]))\n        #print(l)\n    #print(l[0])\n    #print(l[1])\n    #print(l[2])\n    #print(l[3])\n    #print(l[4])\n    \n    n = len(l)\n    m = l[1]\n    #print(n)\n    #print(m)\n    \n    #print(m)\n    l.remove(m)\n    #print(l)\n    #print(n)\n    #print(m)\n    \n    #print(m)\n    \n    if n == 0:\n        l[0] = m\n        #print(l)\n        #print(n)\n        \n    else:\n        #print(n)\n        #print(m)\n        l[1] = m\n        #print(l)\n        #print(n)\n        \n        #print(l[0])\n        #print(l[1])\n    #print(l[0])\n    #print(l[1])\n    return ''.join(l)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(s[i % len(s)] for i in range(len(s)))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = {'e': 'g', 'a': 'f', 'i': 'h', 'u': 'j', 't': 'k', 'k': 'l','m': 'n', \n    'o': 'p','s': 'r', 'r': 't', 'w': 'v', 'v': 'z', 'y': 'x', 'x': 'c', 'c': 'b', \n    'h': 'a', 'j': 'i', 'k': 'l', 'l': 'j', 'n': 'k', 'p':'m','s': 'o', 'r': 'w', \n    't': 'v', 'v': 'q', 'q': 'x', 'w': 'z', 'z': 'y', 'x': 'p', 'c':'s', 'b': 'r', \n    'a': 't', 'i': 'z', 'u': 'j', 't': 'k', 'k': 'l', 'l':'m', 'n': 'p', 'p': 'o', \n    'o':'s','s': 'u', 'r': 'h', 'q': 'g', 'q': 'w', 'w': 'x', 'g': 't', 'j': 'z', \n    'k': 'h', 'l': 'l','m': 'j', 'n': 'i', 'p': 'r', 'o':'s','s': 'd', 'd': 'o', \n    'u': 'g', 'f': 'w', 'i': 't', 'l': 'x', 'x': 'c', 'z': 'w', 'y': 'c', 'c': 'a', \n    'r': 'y', 't': 'p', 'x': 'q', 'q': 'h', 'v': 'j', 'w': 'z', 'h': 'g', 'j': 'z', \n    'z': 'p', 'x': 't', 'c': 'y', 'b': 'l', 'a':'m', 'i': 'e', 'u': 'h', 't': 'f', \n    'l': 'i', 'z': 'x', 'y': 'y', 'c': 'v', 'b': 'k', 'a': 'l', 'i': 'p', 'u':'s', \n    't': 'r', 'x': 'w', 'p': 'q','s': 'z', 'd': 'g', 'o': 'n', 'w': 'g', 'q': 'w', \n    'v': 'x', 'g': 'g', 'j': 'y', 'z': 'j', 'y': 'j', 'p': 'z','s': 't', 'r': 'w', \n    'n': 'x', 'q': 'q', 'h': 'q', 'j': 'x', 'i': 'g', 'j': 'w', 'k': 'y', 'z': 'r', \n    'f': 'o', 'h': 'r', 'j': 'v', 't': 'z', 'x': 'j', 'z': 'l', 'y': 'o', 'c': 'x', \n    'k': 'y', 'l': 'z','m': 'g', 'p': 'w','s': 'z', 'd': 'x', 'o': 'u', 'w': 'a', \n    'g': 'i', 'y': 't', 'n': 'p', 'z':'s', 'x': 'z', 'q': 'i', 'g': 'h', 'z': 'q', \n    'y': 'p', 'x': 't', 'r': 'o', 'w':'s', 'p': 'k', 'o': 'n', 'z': 'v', 'x': 'c', \n    'i': 'j', 'u': 'k', 't': 'l', 'c': 'x', 'y': 'n', 'l': 'p', 'z': 't', 'j': 'g', \n    'h': 'g', 'q': 'w', 'o':'s','s': 'i', 'z': 'n', 'j': 'w', 'f': 'x', 'h': 'f', \n    'j': 'z', '"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #Your code here\n    return ''.join([c.upper() if c.isalpha() else c.lower() for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([i.upper() for i in s if i.isalpha()])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = list(s)\n    i = 0\n    n = len(l)\n    for j in l:\n        i = (i * 10) + ord(j) - ord('a')\n        i = i % n\n        l[i] = chr(i + ord('a'))\n    return ''.join(l)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = list(s)\n    enc = [l[0] for l in l]\n    print(enc)\n    for i in range(len(l)):\n        c = l[i]\n        print(c)\n        if c == 'e':\n            enc.append('o')\n        if c == 'd':\n            enc.append('n')\n        if c == 'c':\n            enc.append('m')\n        if c == 'h':\n            enc.append('w')\n        if c == 'j':\n            enc.append('q')\n        if c == 'l':\n            enc.append('r')\n        if c =='s':\n            enc.append('t')\n        if c == 't':\n            enc.append('u')\n        if c == 'u':\n            enc.append('v')\n        if c == 'v':\n            enc.append('w')\n        if c == 'w':\n            enc.append('x')\n        if c == 'x':\n            enc.append('y')\n        if c == 'y':\n            enc.append('z')\n    print(enc)\n    print(\" \".join(enc))\n    return \"\".join(enc)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if lst == None:\n        return None\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i-1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    \n    lst.sort()\n    if len(lst)<2:\n        return None\n    return lst[1]\n    \n    # END OF SOLUTION\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] < lst[i+1]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            i = i+2\n        else:\n            i = i+1\n    return lst[i"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n    \n    \n    \ndef main():\n    \"\"\"\n    A list of numbers\n    >>> next_smallest([3, 1, 2, 4, 5, 6, 7, 9, 12])\n    4\n    >>> next_smallest([2, 2, 2, 2, 2, 2, 2, 2, 2])\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    boredom_words = S.split(\".\")\n    boredom_count = 0\n    for word in boredom_words:\n        if word.startswith(\"I\") or word.startswith(\"?\", \"!\"):\n            boredom_count += 1\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #Fill in this function\n    return\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pattern = r'[^.]+?'\n    count = 0\n    for word in S.split('.'):\n        word = word[1:]\n        if word[0] == \"?\" or word[0] == \"!\":\n            continue\n        elif word[0] == \".\":\n            continue\n        elif word[0].isalpha():\n            return 0\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return len(S.split('.')) <= 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # find the word before the '.'\n    start_index = S.find('.')\n    # find the word after the '?'\n    end_index = S.find('?')\n    if end_index == -1:\n        end_index = len(S)\n    return end_index - start_index\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count=0\n    for i in S:\n        if i=='.' or i=='?' or i=='!':\n            count+=1\n    return count\n    \ndef is_awesome(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of awesome words.\n   \n    For example:\n    >>> is_awesome(\"Hello world\")\n    2\n    >>> is_awesome(\"The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\n    count=0\n    for i in S:\n        if i=='w' or i=='h' or i=='r' or i=='e' or i=='d':\n            count+=1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    count = 0\n    for word in S.split(\".\"):\n        if word.startswith(\"I\") or word.startswith(\"!\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if S.count(\".\") == 0:\n        return 0\n    elif S.count(\"?\") == 1 and S.count(\"!\") == 1:\n        return 2\n    else:\n        return 1"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Dummy variables to store the number of times the word \"I\" occurs in a sentence\n    count = 0\n    # Iterate through the words, starting with the word \"I\"\n    for word in S.split():\n        if word == '?':\n            count += 1\n        elif word == '!':\n            count -= 1\n        elif word == 'I':\n            count += 1\n        # If we have a match, increment the count\n        if word == S:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    S = S.strip()\n    S = S.split('.')\n    cnt = 0\n    for word in S:\n        if word[0] == '?' and word[-1]!= '?':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def any_int_helper(x, y, z):\n        if x + y + z == sum(x, y, z):\n            return True\n        return False\n    return any_int_helper(x, y, z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (x == y or x == z or x == sum(x) or x == sum(y) or x == sum(z))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # https://www.codewars.com/kata/5549e3782e5d59f57c00004f\n    def is_int(x, y, z):\n        return type(x) == int and type(y) == int and type(z) == int\n    \n    if type(x) == float or type(x) == int:\n        return not any_int(y, x, z)\n    else:\n        for x in x:\n            if not any_int(x, y, z):\n                return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def any_int_recursive(x, y, z):\n        if x + y == z:\n            return True\n        elif x + y < z:\n            return any_int_recursive(x + 1, y, z)\n        else:\n            return any_int_recursive(x, y + 1, z)\n    \n    return any_int_recursive(x, y, z)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return x + y == z or x * y == z\n    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y and y == z:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if any(map(lambda x, y, z: x + y == z, x, y, z)) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y or x == z or y == z:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (x == sum(y) and z == sum(x)) or (y == x) and (z == sum(x)) or (z == sum(y))\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (x!= y and x!= z) or (y!= z and y!= x)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Creating a blank list to hold the letters that are in the \n    # english alphabet in a list\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # Iterating over the string and adding each letter to the list\n    for letter in message:\n        for i in range(1, len(alphabet)):\n            if letter.upper() == alphabet[i]:\n                alphabet[i] = letter.upper()\n                # (1) Replacing the vowel 'a' with 'a'\n                if alphabet[i] == 'a':\n                    alphabet[i] = 'a'\n                    # (2) Replacing the vowels 'e', 'i', and 'o' with 'o'\n                    if alphabet[i] == 'e' or alphabet[i] == 'i' or alphabet[i] == 'o':\n                        alphabet[i] = 'o'\n                        # (3) Replacing the consonants 'g', 'h','m', 'n', 'p' with 'p'\n                        if alphabet[i] == 'g' or alphabet[i] == 'h' or alphabet[i] =='m' or alphabet[i] == 'n':\n                            alphabet[i] = 'p'\n                # (4) Replacing the vowels 't', 'u', 'v', 'w' with 'w'\n                if alphabet[i] == 't' or alphabet[i] == 'u' or alphabet[i] == 'v' or alphabet[i] == 'w':\n                    alphabet[i] = 'w'\n                # (5) Replacing the vowels 'x', 'y', 'z' with 'z'\n                if alphabet[i] == 'x' or alphabet[i] == 'y' or alphabet[i] == 'z':\n                    alphabet[i] = 'z'\n                # (6) Replacing the vowels 'g' and 'h' with 'i'\n                if alphabet[i] == 'g' or alphabet[i] == 'h':\n                    alphabet[i] = 'i'\n                # (7) Replacing the vowels 'e', 'i', and 'o' with 'o'\n                if alphabet[i] == 'e' or alphabet[i] == 'i' or alphabet[i] == 'o':\n                    alphabet[i] = 'o'\n                # (8) Replacing the vowels 'g', 'h','m', 'n' with'm'\n                if alphabet[i] == 'g' or alphabet[i] == 'h' or alphabet[i] =='m' or alphabet[i] == 'n':\n                    alphabet[i] ='m'\n                # (9) Replacing the vowels 't' with 't'\n                if alphabet[i] == 't':\n                    alphabet[i] = 't'\n                # (10) Replacing the vowels 'u' with 'u'\n                if alphabet[i] == 'u':\n                    alphabet[i] = 'u'\n                # (11) Replacing the vowels 'v' with 'v'\n                if alphabet[i] == 'v':\n                    alphabet[i] = 'v'\n                # (12) Replacing the vowels 'w' with 'w'\n                if alphabet[i] == 'w':\n                    alphabet[i] = 'w'\n                # (13) Replacing the vowels 'x' with 'x'\n                if alphabet[i] == 'x':\n                    alphabet[i] = 'x'\n                # (14) Replacing the vowels 'y' with 'y'\n                if alphabet[i] == 'y':\n                    alphabet[i] = 'y'\n                # (15) Replacing the vowels 'z' with 'z'\n                if alphabet[i] == 'z':\n                    alphabet[i] = 'z'\n    # Converting the list to a string\n    final_message = ''.join(alphabet)\n    # Returning the result\n    return final_message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # your code goes here\n    \n    # catch if message contains a space\n    if'' in message:\n        message = message.replace(' ','')\n        \n    # convert to lowercase\n    message = message.lower()\n    \n    # find all vowels in message\n    vowels = 'aeiouAEIOU'\n    \n    # keep the first 2 chars of each letter\n    message = message[0:2] + message[2:].upper()\n    \n    # find all of the letters in the message\n    letters = message.split()\n    \n    # put them into an alphabet\n    message = []\n    \n    for l in letters:\n        if l in vowels:\n            letter = l.capitalize()\n        else:\n            letter = l.upper()\n        message.append(letter)\n    \n    # convert back to lowercase\n    message = message.replace(' ','')\n    \n    # return the encoded message\n    return message\n    "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your own version of the encode function\n    # Replace all vowels in the message with a letter that appears \n    # 2 places ahead of that vowel in the english alphabet. \n    # For example, in this message 'GRT', the vowel appears \n    # 2 places after GR at the end. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #start with the message and get the letters\n    message = message.lower()\n    \n    #combine letters and vowels \n    message = ''.join(message.split())\n    \n    #add a random vowel\n    message = message + '.'\n    message = message.replace('a','ae')\n    message = message.replace('A','a')\n    message = message.replace('e','ee')\n    message = message.replace('E','e')\n    message = message.replace('i','ii')\n    message = message.replace('I','i')\n    message = message.replace('o','oe')\n    message = message.replace('O','o')\n    message = message.replace('u','uu')\n    message = message.replace('U','u')\n    \n    #add the random letter after it\n    message = message + ''.join(random.choice(VOWELS) for i in range(len(message)))\n    \n    #convert everything back to lowercase\n    message = message.lower()\n    \n    #return the encoded message\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    message = message.lower()\n    encoding = ''\n    for i in range(len(message)):\n        if message[i] in VOWELS:\n            if message[i] not in message.replace(message[i],message[i].upper()):\n                encoding = encoding + message[i].upper()\n            else:\n                encoding = encoding + message[i]\n        else:\n            encoding = encoding + message[i]\n    return encoding\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    message = message.lower()\n    message = message.replace(' ', '')\n    message = message.replace('a', 't').replace('i', 't').replace('u', 't').replace('e', 'e').replace('o', 'e').replace('o', 'e').replace('a', 'e')\n    message = message.replace('e', 'a').replace('i', 'a').replace('o', 'a').replace('u', 'a')\n    message = message.replace('i', 'i').replace('u', 'i').replace('o', 'i')\n    message = message.replace('o', 'o')\n    message = message.replace('u', 'u')\n    message = message.replace('n','')\n    message = message.replace('s','s')\n    message = message.replace('r', 'r')\n    message = message.replace('w', 'w')\n    message = message.replace('u', 'u')\n    message = message.replace('r', 'r')\n    message = message.replace('h', 'h')\n    message = message.replace('l', 'l')\n    message = message.replace('l', 'l')\n    message = message.replace('n', 'n')\n    message = message.replace('t', 't')\n    message = message.replace('a', 'a')\n    message = message.replace('n', 'n')\n    message = message.replace('s','s')\n    message = message.replace('t', 't')\n    message = message.replace('h', 'h')\n    message = message.replace('l', 'l')\n    message = message.replace('h', 'h')\n    message = message.replace('r', 'r')\n    message = message.replace('r', 'r')\n    message = message.replace('o', 'o')\n    message = message.replace('u', 'u')\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = ''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    \n    for letter in message:\n        if letter in vowels:\n            result += letter.upper()\n        else:\n            result += letter.lower()\n    \n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    #Define the alphabet\n    vowels = \"aeiouAEIOU\"\n    \n    #Define the encoder\n    encoder = {}\n    \n    #Process through the message and swap each letter\n    for letter in message:\n        if letter not in encoder:\n            encoder[letter] = letter\n        elif encoder[letter] == 'v':\n            encoder[letter] = 'e'\n        elif encoder[letter] == 'g':\n            encoder[letter] = 'a'\n        else:\n            encoder[letter] = encoder[letter].replace('g', 'e')\n            encoder[letter] = encoder[letter].replace('e', 'a')\n    \n    #Return the encoded message\n    return ''.join(encoder.values())\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    message = message.lower()\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    \n    # First, remove all vowels.\n    message = re.sub(\"[a-z]\", \"\", message)\n    message = re.sub(\"[A-Z]\", \"\", message)\n    message = re.sub(\"[0-9]\", \"\", message)\n    \n    # Then, insert the vowels into the message.\n    for i in range(len(vowels)):\n        message = message.replace(vowels[i], vowels[(i+1)%len(vowels)])\n    \n    # Convert string to list and remove duplicates.\n    message = message.split(\" \")\n    message = list(set(message))\n    \n    # Convert list to string and remove extra spaces.\n    message = \" \".join(message).replace(\" \", \"\")\n    \n    # Convert string to string and replace spaces.\n    message = message.replace(\" \", \"*\")\n    \n    # Convert string to integer and return.\n    return int(message)"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    #convert the message to lower case\n    message=message.lower()\n    \n    #initialize the cipher\n    ciphertext=\"\"\n    \n    #loop over all the characters\n    for char in message:\n        \n        #check if the char is a vowel\n        if char in VOWELS:\n            #replace with a vowel\n            ciphertext+=VOWELS[VOWEL_TO_CODE[char]]\n        else:\n            #if char is not a vowel, replace by the letter \n            #following the order of the english alphabet\n            ciphertext+=CHAR_TO_CODE[char]+VOWELS[CHAR_TO_CODE[char]]\n    \n    return ciphertext\n        "
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = list(lst)\n    lst.sort()\n    # for i in range(len(lst)):\n    #     lst[i] = lst[i]**2\n    # lst.sort()\n    lst_product = [lst[i] for i in range(len(lst)) if lst[i] > 0]\n    # print(lst_product)\n    return sum(lst_product)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    lst.sort()\n    for i in lst:\n        if i == 1:\n            s += i\n        else:\n            while i % 2 == 0:\n                i = i // 2\n            if i % 2!= 0:\n                s += i\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for elem in lst:\n        if elem > 0:\n            sum += elem\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = []\n    for i in lst:\n        for j in str(i):\n            a.append(j)\n    #print(a)\n    sum = 0\n    for i in a:\n        #print(i)\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort()\n    prime = []\n    for num in lst:\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                prime.append(num)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def prime(num):\n        prime = []\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(3, int(math.sqrt(num))+1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 581, 583, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 893, 907, 911, 919, 929, 937, 941, 947, 951, 977, 983, 991, 997]\n    result = 0\n    for num in lst:\n        if is_prime(num) == True:\n            if num in primes:\n                result += num\n            else:\n                for i in range(2, int(math.sqrt(num)) + 1):\n                    if num % i == 0:\n                        break\n                else:\n                    result += num\n    return result\n    \ndef main():\n    print(skjkasdkd([1,1,3,2,1,1]))\n    print(skjkasdkd([1,1,2,2,1,3,4,5,4,3,2,1,1]))\n    print(skjkasdkd([1,1,2,2,1,2]))\n    print(skjkasdkd([1,1,2,1]))\n    print(skjkasdkd([1,3,1,3,3,4,3,5,4,1,2,2,2,3]))\n    print(skjkasdkd([2,2,1,1,3,4,2,2,1,3,3,3,2,2,2,3]))\n    print(skjkasdkd([3,2,1,1,3,4,2,2,1,3,3,3,2,2,2,3]))\n    print(skjkasdkd([3,2,1,3,1,3,2,1,3,1,3,2,1,3]))\n    print(skjkasdkd([3,3,1,1,2,2,1,3,3,1,2,1,2,1,2,2,3,3,2,2,2,2,1,2,2,3,3,3,3,2,2,2,2,2,2,2,2,1,1,3,3,2,3,3,2,3,1,3,3,3,3,3,2,3,3]))\n    print(skjkasdkd(["
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 0\n    primes = []\n    primes.append(2)\n    while len(lst) > 0:\n        pr = primes[-1]\n        num = lst[-1]\n        if num > 0:\n            for i in range(num - 1, pr - 1, -1):\n                primes.append(pr)\n                num = num // pr\n        elif num == 0:\n            primes.append(1)\n        else:\n            primes.append(2)\n        lst.pop()\n        if len(lst) == 0:\n            break\n    primes.reverse()\n    for i in primes:\n        result += i\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #print(lst)\n    res = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            #print(lst[i])\n            while(lst[i] > 0):\n                #print(lst[i])\n                res = max(res, lst[i])\n                lst[i] -= lst[i] % 10\n                #print(lst[i])\n                #print(lst[i])\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def isprime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    \n    def getPrime(x):\n        for i in range(2, x):\n            if isprime(i):\n                return i\n        return \"0\"\n    \n    def isEven(x):\n        return x % 2 == 0\n    \n    def isOdd(x):\n        return x % 2 == 1\n    \n    def sumOfDigits(x):\n        return sum([int(i) for i in str(x)])\n    \n    for num in lst:\n        if isEven(num):\n            sumOfDigits(num)\n            continue\n        sumOfDigits(getPrime(num))\n        \n    return sumOfDigits(num)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[j]%lst[i]==0:\n                sum+=lst[j]\n    return sum\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for k in dict:\n        if not isinstance(k,str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # your code goes here\n    #dict=dict.lower()\n    #print(dict)\n    #dict_keys=dict.keys()\n    #print(dict_keys)\n    #dict_values=dict.values()\n    #print(dict_values)\n    if(type(dict) is dict):\n        \n        for value in dict.values():\n            if type(value) is str:\n                if (value.islower()):\n                    return True\n            else:\n                if (value.isupper()):\n                    return True\n        return False\n    else:\n        return False\n    #return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return all(key.islower() for key in dict.keys()) and all(key.isupper() for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key in dict.keys():\n        if key.isupper():\n            return True\n        elif key.islower():\n            return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(dict)==dict:\n        for key in dict.keys():\n            if type(key)==str:\n                if key.lower() in dict.keys():\n                    return True\n                else:\n                    return False\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if all(isinstance(key,str) and key.lower()==key.upper() for key in dict):\n        return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (dict.keys() == list(dict.values())\n        or any(isinstance(x, str) and x.lower() in str(dict.values()) for x in dict.values()))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for k, v in dict.items():\n        if type(k)!= str or type(v)!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if dict is None:\n        return False\n    for key in dict.keys():\n        if isinstance(key, str) and (key.lower() == key.upper()):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    keys = [key.lower() for key in dict]\n    keys.sort()\n    \n    if not keys:\n        return True\n    else:\n        for k in keys:\n            if k == \"\":\n                return False\n        else:\n            return True\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prime_array = [2]\n    for i in range(3, n + 1):\n        if prime_array[-1] < i:\n            prime_array.append(i)\n        elif i % 2 == 0:\n            continue\n        else:\n            prime_array.append(i)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from collections import Counter\n    cnt = []\n    for i in range(n+1):\n        if isprime(i):\n            cnt.append(i)\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    primes = []\n    if n <= 2:\n        return []\n    for i in range(n,0,-1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    answer = []\n    for i in range(1, n + 1):\n        answer.append(i)\n        for j in range(i + i, n + 1, i):\n            answer.append(j)\n    return answer\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = []\n    for i in range(n):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    result = [2]\n    for i in range(3,n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # base case\n    if n == 0:\n        return []\n    # if n is less than 0, we want to return the sum of the base case (len(list) <= 0)\n    if n < 0:\n        return count_up_to(n - 1)\n    # else we want to add all the primes up to n\n    primes = [2,3]\n    for i in range(4, n + 1, 2):\n        if i % 2 == 0:\n            primes.append(i // 2)\n            primes.append(i - 1)\n        elif i == 3:\n            primes.append(i)\n        else:\n            primes.append(i - 1)\n            primes.append(i + 1)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    list = []\n    for i in range(2, n+1):\n        if prime(i):\n            list.append(i)\n    return list\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr = []\n    for i in range(n+1):\n        if is_prime(i) == True:\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime = []\n    for i in range(n, 0, -1):\n        if is_prime(i) == True:\n            prime.append(i)\n    return prime\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here\n    a = str(a)\n    b = str(b)\n    # a = int(a)\n    # b = int(b)\n    c = 0\n    for i in a:\n        c = c + int(i)\n    for j in b:\n        c = c * int(j)\n    return c\n    \n    \n    # if a == 0:\n    #     print(0)\n    # else:\n    #     print(int(a))\n    #     print(int(b))\n    #     print(multiply(a, b))\n    #     print(multiply(a, b))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    product = 1\n    for i in range(len(a)):\n        product = product * int(a[i]) * int(b[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code goes here\n    product = 1\n    for i in range(len(str(a))):\n        product = product*10**i\n    if product > int(a):\n        return 0\n    else:\n        return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Create a copy of a\n    #create a copy of b\n    #Create a variable that will keep a new copy of the result\n    #keep a copy of b\n    #create a result variable that will keep a new copy of b\n    #loop through a and multiply the digits\n    #if it isn't zero then add it to the result\n    #if it is zero then multiply the digits by 1\n    #return the result\n    pass\n    # return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    p = 1\n    for i in range(len(a)):\n        p *= 10\n        p += a[i] * b[i]\n    return p\n    \n    \ndef add(a, b):\n    \"\"\"Complete the function that takes two integer lists and returns the \n    sum of their product.\n    Assume the input is always valid.\n    Examples:\n    add(15, [36, 24]) should return 45.\n    add(12, [8, -4]) should return -6.\n    add(15, [-9, -5]) should return -35.\n    \"\"\"\n    s = 0\n    for i in range(len(a)):\n        s += a[i] * b[i]\n    return s\n    \n    \ndef sum(a, b):\n    \"\"\"Complete the function that takes two integer lists and returns the\n    sum of their product.\n    Assume the input is always valid.\n    Examples:\n    sum([15, 18], [36, 24]) should return 23.\n    sum([12, -9], [-9, -5]) should return -3.\n    sum([15, -9], [-9, -5]) should return -3.\n    \"\"\"\n    s = 0\n    for i in range(len(a)):\n        s += a[i] * b[i]\n    return s\n    \n    \ndef sub(a, b):\n    \"\"\"Complete the function that takes two integer lists and returns the \n    subtraction of their product.\n    Assume the input is always valid.\n    Examples:\n    sub([15, 18], [36, 24]) should return -16.\n    sub([12, -9], [-9, -5]) should return -20.\n    sub([15, -9], [-9, -5]) should return -20.\n    \"\"\"\n    s = 0\n    for i in range(len(a)):\n        s -= a[i] * b[i]\n    return s\n    \n    \ndef sumProd(a, b):\n    \"\"\"Complete the function that takes two integer lists and returns the \n    product of the product of their product.\n    Assume the input is always valid.\n    Examples:\n    sumProd([15, 18], [36, 24]) should return 24.\n    sumProd([12, -9], [-9, -5]) should return -15.\n    sumProd([15, -9], [-9, -5]) should return -15.\n    \"\"\"\n    p = 1\n    for i in range(len(a)):\n        p *= a[i]\n        p += b[i]\n    return p\n    \n    \ndef prod(a, b):\n    \"\"\"Complete the function that takes two integer lists and returns the \n    product of their product.\n    Assume the input is always valid.\n    Examples:\n    prod([15, 18], [36, 24]) should return 210.\n    prod([12, -9], [-9, -5]) should return -36.\n    prod([15, -9], [-9, -5]) should return -36.\n    \"\"\"\n    p = 1\n    for i in range(len(a)):\n        p *= a[i]\n        p += b[i]\n    return p\n    \n    \ndef length(a):\n    \"\"\"Complete the function that takes a list and returns the length of \n    the list.\n    Assume the input is always valid.\n    Examples:\n    length([[1, 2, 3], [4, 5, 6]]) should return 6.\n    length([1, 1, 1, 1]) should return 4.\n    length([]) should return 0.\n    \"\"\"\n    return len(a)\n    \n    \ndef unique(a):\n    \"\"\"Complete the function that takes a list and returns a list of unique \n    values.\n    Assume the input is always valid.\n    Examples:\n    unique([1, 1, 1, 1, 1, 1, 1]) should return [1, 1, 1]\n    unique([1, 2, 3, 4, 5, 6, 7]) should return [1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    return list(set(a))\n    \n    \ndef length1(a):\n    \"\"\"Complete the function that takes a list and returns its length.\n    Assume the input is always valid."
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here.\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////\n    # ///////////////////////////////////////////////////////////////////////////"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(a, int) and isinstance(b, int):\n        return a*b\n    else:\n        raise TypeError(\"Only integers are allowed for the input\")\n    \ndef is_prime(number):\n    \"\"\"Complete the function that determines if a number is a prime number or not.\n    Assume the input is always valid.\n    Examples:\n    is_prime(2) should return True\n    is_prime(3) should return False\n    is_prime(100) should return False\n    \"\"\"\n    if number < 2 or number > 50000:\n        return False\n    if number == 2 or number == 3 or number == 5:\n        return True\n    if number == 4:\n        return True\n    if is_prime(2 * number + 1) is True:\n        return True\n    if is_prime(3 * number + 1) is True:\n        return True\n    if is_prime(5 * number + 1) is True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a)!= int or type(b)!= int:\n        return None\n    \n    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO\n    result = 0\n    for i in range(len(str(a))):\n        result *= int(str(b)[i])\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = \"\"\n    for x in range(len(b)):\n        s += str(a[x]) + \" \"\n    return int(s)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num_upper = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if ord(s[i]) >= ord('A'):\n                num_upper += 1\n    return num_upper\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    upper_vowels = 0\n    index = 0\n    for char in s:\n        if char.isupper():\n            upper_vowels += 1\n        else:\n            index += 1\n    return upper_vowels\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (s.count(\"A\") + s.count(\"B\") + s.count(\"C\") + s.count(\"D\") +\n        s.count(\"E\") + s.count(\"F\") + s.count(\"G\") + s.count(\"H\") +\n        s.count(\"I\") + s.count(\"J\") + s.count(\"K\") + s.count(\"L\") +\n        s.count(\"M\") + s.count(\"N\") + s.count(\"O\") + s.count(\"P\"))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            total += 1\n        i += 1\n    return total"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            if i % 2 == 0:\n                vowels += 1\n    return vowels\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            if i % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['A', 'a', 'E', 'e', 'I', 'i']\n    counter = 0\n    \n    for i in range(len(s)):\n        if s[i].isupper():\n            counter += 1\n            if i % 2 == 0:\n                vowels.remove(s[i])\n                \n    return counter\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            res += 1\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            n += 1\n    return n\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    value = str(value)\n    number = int(value)\n    closest_number = number\n    for i in range(len(value)):\n        if number - value[i] < 0:\n            number = number + abs(number - value[i])\n        else:\n            number = number - value[i]\n    if number == 0:\n        closest_number = number\n    else:\n        closest_number = abs(number - closest_number)\n    return closest_number\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from math import sqrt\n    import math\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Clarify whether this is good or bad.\n    # TODO: Check if the given value is a string.\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if is_number(value):\n        return int(value)\n    else:\n        value = float(value)\n        if value < 0:\n            value = math.ceil(value)\n        elif value > 0:\n            value = math.floor(value)\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # https://stackoverflow.com/questions/1272287/how-to-find-the-nearest-integer-in-a-list-of-values\n    return round(abs(int(value)-int(min(value))), 0)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(value, int):\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    value = str(value)\n    value = value.replace('.', '', 1)\n    digits = value.split('.')\n    if len(digits) == 1:\n        digits = digits[0]\n    else:\n        digits = digits[0]\n        digits = digits.split('.')\n    return int(digits[-1])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if value == \"\":\n        return 0\n    if type(value) == float:\n        return int(round(value,0))\n    elif type(value) == str:\n        return int(value)\n    else:\n        raise TypeError(\"invalid type given\")\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = 0\n    y = 0\n    z = 0\n    for i in value:\n        if i!= \".\":\n            if i.isdigit():\n                x += int(i)\n            else:\n                y += int(i)\n        else:\n            z += int(i)\n    if x < y:\n        x = z\n    else:\n        y = z\n    return x\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        closest = float(value)\n    except:\n        return int(value)\n    return round(closest)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n] + [n + i for i in range(0, n, 2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [0 if (n & 1) else n//2, n//2 + n%2]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if n == 1:\n        return [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n==0:\n        return []\n    if n==1:\n        return [1]\n    else:\n        return [n*2] + make_a_pile(n-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    result = [0] * (n+1)\n    i = 0\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result[i] = n // 2\n        else:\n            result[i] = n // 2 + 1\n            \n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = n % 2\n    if n == 0:\n        return [3]\n    else:\n        return [2,3,4] + make_a_pile(n//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #raise NotImplementedError(\"Implement this function!\")\n    #TODO: write your solution\n    \n    \n    split_words=s.split(\",\")\n    \n    return split_words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pas"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(s) is not str:\n        raise TypeError(\"Input must be string\")\n    \n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = s.split(', ')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not s:\n        return []\n    words = [word.strip() for word in s.split(\",\")]\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #HINT: https://www.w3schools.com/python/python_string_split.asp\n    return s.replace(\",\",\"\").replace(\" \",\"\").split(\" \")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    word_list = s.split(\",\")\n    return word_list\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = s.strip()\n    if s == \"\":\n        return []\n    else:\n        return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            if i > max:\n                max = i\n    return max\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x > y:\n        return -1\n    elif x < y:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Complete this function\n    x = int(x)\n    y = int(y)\n    if (x < y):\n        if (x % 2 == 0):\n            x = x + 1\n        else:\n            x = x - 1\n    else:\n        if (y % 2 == 0):\n            y = y + 1\n        else:\n            y = y - 1\n    if (x < y):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    \n    while y > 0:\n        if y % 2 == 0:\n            result = y\n            break\n        y = y // 2\n    \n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = [x, y]\n    \n    # init a set for used numbers \n    seen = set()\n    \n    # create a set for the possible numbers \n    for i in range(2, max(lst) + 1):\n        if lst.count(i) == 0:\n            continue\n        if i not in seen:\n            seen.add(i)\n            print(i)\n            for j in range(x, y):\n                if i * j in seen:\n                    print(j)\n                    return i * j\n                    break\n                else:\n                    continue\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = 0\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            n += i\n    return n\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_list = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            num_list.append(i)\n    \n    if len(num_list) == 0:\n        return -1\n    \n    elif len(num_list) == 1:\n        return num_list[0]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Find the midpoint of the range\n    mid = (x + y) // 2\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = str(x) + str(y)\n    if int(s[1]) % 2 == 0:\n        return int(s[0])\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if x >= y:\n        return -1\n    else:\n        s = 0\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                s += i\n        if s % 2!= 0:\n            return -1\n        else:\n            return s\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    binary = ''\n    if (n <= m):\n        binary = format(n, 'b').zfill(len(str(m)))\n    else:\n        binary = format(m, 'b').zfill(len(str(n)))\n    return binary\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 0 or m < 0:\n        return -1\n    if n < m:\n        return str(int(n))\n    else:\n        return str(int(m)) + '0' + str(int(n))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = abs(n)\n    m = abs(m)\n    if m == 0:\n        return \"0b11\"\n    else:\n        if n < m:\n            return \"-\" + str(rounded_avg(n, m-1))\n        else:\n            return str(rounded_avg(n-1, m)) + str(rounded_avg(n, m-1))"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here\n    if n < m:\n        m, n = n, m\n    \n    def binary(num):\n        return str(bin(num)).replace(\"0b\", \"\")\n    \n    # define a helper function\n    def get_num(n):\n        while n > 0:\n            n //= 2\n        return n\n    \n    # define the round function\n    def round_num(num, n):\n        # write your code here\n        if n > m:\n            return num\n        return f\"{num:b}0\"\n    \n    # multiply two decimal numbers in a binary string\n    def multiply(a, b):\n        return int(str(a) * str(b), 2)\n    \n    # do the calculation\n    a = get_num(n)\n    b = get_num(m)\n    result = int(binary(a) + binary(b))\n    \n    # return the result\n    if result > (2 ** (n - 1)):\n        return -1\n    else:\n        return int(str(result)[-1])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return bin(n)\n    # bin_list = []\n    # for i in range(0, n+1):\n    #     bin_list.append(str(i))\n    # return \"\".join(bin_list)\n    return ''.join(str(i) for i in range(n, m+1, 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    if n < 0 or m < 0:\n        return -1\n    else:\n        return str(int(round(float(n) + float(m) / 2)))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return str(bin(n+m)[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Make sure the n and m are positive\n    if n < 0 or m < 0:\n        return -1\n    # Divide the numbers\n    ans = n / m\n    # Round the ans by the nearest integer\n    if ans < 0:\n        return -1\n    else:\n        return int(ans * 2) + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    return bin(n+m+int(round(n/m)))[2:]\n    #return bin(n+m+int(round(n/m)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == m:\n        return \"0b\" + \"\".join([str(bin(int(x)))[2:] for x in range(n, m + 1, 1)])\n    if n > m:\n        return \"-\" + rounded_avg(n, m + 1)\n    return str(bin(int(str(n) + str(m)) % 2))[2:]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in x:\n        if i % 10!= 0:\n            result.append(i)\n    return result\n    \ndef digits_only(x):\n    \"\"\"Given a list of non-negative integers x, return a list of all the \n    digits that don't appear in x.\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Create a list of digits to be used in the list\n    digits = []\n    \n    # Make each element in the list unique\n    for i in range(len(x)):\n        if x[i] % 10 == 0:\n            digits.append(x[i])\n            \n    # Sort the list of digits\n    digits.sort()\n    \n    # Return the list\n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    digits = [int(d) for d in str(x)]\n    digits.sort()\n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Note: O(n) time, O(n) space\n    \n    s = sorted(x)\n    \n    # Note: Cannot use x.sort() in all case\n    \n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            return s[:i] + [s[i] // 2] + s[i + 1::]\n    \n    return []"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # from itertools import islice, count\n    # return [x for x in range(10) if x not in islice(count(start=0, step=1), 0, None)]\n    import itertools\n    return list(set(itertools.chain.from_iterable([str(x) for x in x]))"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(map(int, str(x))))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # convert the list to a list of integers and sort them in order\n    x = list(x)\n    x.sort()\n    # replace the list with empty lists\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            x[i] = []\n    # return the elements in the original order\n    return x\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    digits = []\n    for i in x:\n        if not is_positive_integer(i):\n            return []\n        elif not is_integer(i):\n            return []\n        elif i == 1:\n            return digits\n        elif i % 10 == 0:\n            digits.append(i)\n    return digits\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # The following three conditions ensure that the numbers that are \n    # returned in the list are all integers.\n    \n    assert(all(map(lambda x: isinstance(x, int), x)))\n    assert(all(map(lambda x: x%10 == 0, x)))\n    assert(all(map(lambda x: isinstance(x, int), x)))\n    \n    # The following lines perform the map and return a sorted list of all \n    # the integers.\n    \n    return sorted(list(map(int, x)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    # Sort the given array\n    arr.sort()\n    # Reverse the given array\n    arr.reverse()\n    # Reverse the given array and replace each digit with its corresponding name\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result.append(arr[i])\n        else:\n            result.append(arr[i] * 2)\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort()\n    rev = [0] * 10\n    for i in range(len(arr)):\n        rev[arr[i]] = i\n    return rev\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    length = len(arr)\n    if length == 0:\n        return []\n    if length == 1:\n        return arr\n    \n    mid = (length - 1) // 2\n    left = arr[mid]\n    right = arr[mid+1]\n    \n    sorted_arr = []\n    sorted_arr.extend(arr[:mid])\n    sorted_arr.extend(arr[mid:])\n    \n    sorted_arr.extend(sorted(arr[mid:])[::-1])\n    sorted_arr.extend(sorted(arr[:mid])[::-1])\n    \n    sorted_arr.append(left)\n    sorted_arr.append(right)\n    \n    sorted_arr.extend(sorted(arr[:mid])[::-1])\n    sorted_arr.extend(sorted(arr[mid:])[::-1])\n    \n    return sorted_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    nums = sorted(arr)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr_copy = arr.copy()\n    arr_copy.sort()\n    # return arr_copy\n    arr_len = len(arr)\n    if arr_len == 0:\n        return []\n    elif arr_len == 1:\n        return [arr[0]]\n    else:\n        arr_copy.reverse()\n        return arr_copy\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    arr = sorted(arr)\n    reverse = []\n    for num in arr:\n        if num <= 0:\n            continue\n        reverse.append(str(num))\n        \n    return revers"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # for each integer in the array\n    # check it is between 1 and 9, if it is, swap with the name of it\n    # if it is not, add it to the array\n    # return the array\n    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    newArr = []\n    for num in arr:\n        newArr.append(str(num))\n    newArr.sort()\n    return newArr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    if len(arr) <= 1:\n        return []\n    elif len(arr) <= 2:\n        return [arr[-1]] + by_length(arr[:-1])\n    elif len(arr) > 2:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1] and arr[i] < arr[i + 2] and arr[i] < arr[i + 3] and arr[i] < arr[i + 4]:\n                arr[i], arr[i + 1], arr[i + 2], arr[i + 3], arr[i + 4] = arr[i + 3], arr[i + 4], arr[i], arr[i + 1], arr[i]\n                break\n        return by_length(arr) + [arr[-1]] + by_length(arr[:-1])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # check if the array is empty\n    if not arr:\n        return []\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorials = []\n    for i in range(1,n+1):\n        factorials.append(i*f(i-1))\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append(i * factorial[-1])\n    return factorial"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    fact = [1, 2, 3, 5, 7]\n    a = []\n    for i in range(n):\n        a.append(fact[i] * (i+1))\n    return a\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1]\n    for i in range(1,n+1):\n        factorial.append(factorial[i-1]*i)\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorials = [1]\n    for i in range(2, n):\n        factorials.append(factorials[i-1] * i)\n    return factorials\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fact = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            fact.append(i*factorial(i))\n        else:\n            fact.append(1+factorial(i))\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    f = [1]\n    for i in range(n):\n        f = [f[0]*i]+f\n    return f\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #Factorial of the first number is 1\n    factorial = 1\n    if n == 1:\n        return [1]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorial = [1]\n    for i in range(n):\n        factorial.append(factorial[i] * i)\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorials = []\n    for i in range(1, n + 1):\n        factorials.append(i * factorial(i))\n    return factorials\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return (0, 0)\n    if n % 2 == 0:\n        even = n // 2\n        odd = n - even\n        return (even, odd)\n    else:\n        odd = n // 2 + 1\n        even = n - odd\n        return (even, odd)\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = odd = 1\n    for i in range(2, n):\n        if n % i == 0:\n            even += 1\n        else:\n            odd += 1\n        if even % 2 == 0 and odd % 2 == 0:\n            return (even, odd)\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    from itertools import permutations\n    def check(n, a):\n        i = 0\n        while i < len(a):\n            if a[i] % 2 == 0:\n                n -= 1\n            i += 1\n        return n\n    a = [i for i in range(1, n+1) if i % 2 == 0]\n    ans = []\n    for p in permutations(a):\n        a_copy = p.copy()\n        a_copy.sort()\n        ans.append(a_copy)\n    return tuple(ans)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return 0,0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even, odd = 0, 0\n    num = n\n    for i in range(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n    \n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return ()\n    n = str(n)\n    if len(n) < 2:\n        return (1, 2)\n    if int(n) % 2 == 0:\n        return (2, 3)\n    if int(n) % 2 == 1:\n        return (2, 4)\n    if int(n) % 2!= 0:\n        return (3, 5)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_count = 0\n    even_count = 0\n    \n    for i in range(n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (odd_count, even_count)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return tuple(i for i in range(1, n) if i % 2 == 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    odd_palindrome = 0\n    even_palindrome = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    palindrome = 0\n    palindrome += 1\n    for i in range(1, n):\n        if n % i == 0:\n            palindrome += 1\n        else:\n            palindrome -= 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    from collections import Counter\n    max_sum = 0\n    count = Counter(arr)\n    for v in count:\n        max_sum += count[v]\n    return max_sum\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(arr)\n    return sum(arr) // 10\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums = []\n    for num in arr:\n        if num > 0:\n            nums.append(num)\n    return len(nums)"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return(len(set(arr)))"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in arr:\n        sum += i\n        if sum > 0:\n            sum = sum - 10 ** i\n    return arr.count(sum)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(\n        (\n            1 if i.isnumeric() and int(i) > 0\n            else 0\n            for i in set(str(arr))\n        )\n    )\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here.\n    \n    def count_num(arr, d=0, s=0):\n        if s==0:\n            d=d%10\n            s+=d\n            return 1\n        if d==0:\n            return 0\n        if arr[s]<10 and arr[s]>=0:\n            return count_num(arr,d*10+arr[s],s+1)\n        else:\n            return count_num(arr,d,s+1)\n    \n    return count_num(arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if len(arr) == 0:\n        return 0\n    \n    num = arr[0]\n    n = 0\n    for i in arr[1:]:\n        if i < 0:\n            n += 1\n        else:\n            num += i\n            n += 1\n        \n        \n    return n\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_dig = 0\n    for i in arr:\n        sum_dig += i\n    return sum_dig\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(map(lambda n: n < 10, arr)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    left, right = 0, len(arr)-1\n    while left < right:\n        # Pick random element\n        while arr[left] == arr[right] or arr[left] - arr[right] < 1:\n            left += 1\n        # Move elements to left side of array\n        while arr[left] == arr[left+1] and left < right:\n            left += 1\n        # Move elements to right side of array\n        while arr[right] == arr[right-1] and right > left:\n            right -= 1\n        # If elements are same or right side doesn't exist \n        if arr[left]!= arr[right] or right - left < 1:\n            return True\n        # Move elements to left side of array\n        while arr[left] == arr[left+1] and left < right:\n            left += 1\n        # Move elements to right side of array\n        while arr[right] == arr[right-1] and right > left:\n            right -= 1\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    if arr == []:\n        return True\n    random.shuffle(arr)\n    for i in range(len(arr)):\n        if not arr[i]<=arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if arr == []:\n        return True\n    if len(arr)==1:\n        return True\n    left,right = 0,len(arr)-1\n    while(left<right):\n        if arr[left]<arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        elif arr[left]>arr[right]:\n            arr[left],arr[right]=arr[right],arr[left]\n            left+=1\n            right-=1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n                break\n    return arr\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Your code here\n    if arr == []:\n        return True\n    return move_one_ball(arr[1:]) or move_one_ball(arr[:-1])\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr)==1:\n        return True\n    if len(arr)==2:\n        return arr[0]>arr[1]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code\n    # arr = [3, 4, 5, 1, 2]\n    if len(arr) == 0:\n        return False\n    sorted = False\n    if len(arr) == 1:\n        return True\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] < arr[i+1]:\n            arr[i],arr[i+1] = arr[i+1],arr[i]\n        else:\n            i += 1\n    for i in range(len(arr)-2):\n        if arr[i] < arr[i+1] and arr[i] < arr[i+2]:\n            arr[i],arr[i+1],arr[i+2] = arr[i+2],arr[i+1],arr[i]\n        elif arr[i] > arr[i+1] and arr[i] > arr[i+2]:\n            arr[i],arr[i+1],arr[i+2] = arr[i+2],arr[i+1],arr[i]\n        else:\n            arr[i],arr[i+1],arr[i+2] = arr[i+2],arr[i+1],arr[i]\n    i += 2\n    if arr[0] >= arr[-1]:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    left = 0\n    right = len(arr)-1\n    while(left<=right):\n        if arr[left]>arr[right]:\n            arr[left],arr[right] = arr[right],arr[left]\n        else:\n            return False\n        left += 1\n        right -= 1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    if len(arr)==0:\n        return True\n    elif len(arr)==1:\n        return arr[0] == 1\n    elif len(arr)==2:\n        if arr[1] < arr[0]:\n            return True\n        else:\n            return False\n    else:\n        ans = True\n        for i in range(0,len(arr),2):\n            ans = ans and move_one_ball(arr[i:i+2])\n            \n        return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return False\n    else:\n        for i in range(len(arr)):\n            arr[i] += 1\n            if i+1 < len(arr) and arr[i+1] < arr[i]:\n                arr[i] += 1\n                arr[i+1] -= 1\n                if arr[i+1] < 0:\n                    arr[i+1] = 0\n                    arr[i] = 0\n        if not is_sorted(arr):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code here\n    \n    if len(lst1) == 1:\n        return \"NO\"\n    if len(lst1) == 2:\n        return exchange(lst1[0], lst1[1])\n    if len(lst2) == 2:\n        return exchange(lst2[0], lst2[1])\n    \n    for i in range(len(lst1)):\n        if not lst1[i] % 2 == lst2[i] % 2:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: implement this function!\n    pass\n    # TODO: implement this function!\n    pass\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # 1. Declare variables\n    length = len(lst1)\n    count = 0\n    res = []\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if len(lst1) % 2 == 1:\n        return \"NO\"\n    if len(lst2) % 2 == 1:\n        return \"NO\"\n    \n    #first, copy the first list\n    lst1copy = lst1.copy()\n    \n    #then, check whether it is possible to perform an exchange\n    for i in range(0, len(lst1)):\n        lst1copy[i] = lst1copy[i] * 2\n    \n    #then, check whether it is possible to exchange\n    if all(lst1copy % 2 == 0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Define variables\n    odd = 0\n    even = 0\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    \n    # For every element in the lists:\n    # 1. check if it's an even number and if it is, we know it cannot be exchanged\n    # 2. if we cannot find a non-even number, we can conclude that it is not possible\n    # to exchange elements between the lists\n    # As a reminder, if two lists are already of even length, we can stop looking at the middle of the lists\n    # (if it's not an even number, then we can make all elements to be even)\n    \n    count = 0\n    for i in range(len(lst1)):\n        count += 1\n        if count % 2 == 0:\n            if lst1[i] % 2 == 0:\n                if lst2[i] % 2!= 0:\n                    return \"NO\"\n            else:\n                return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst1_even = list(filter(lambda x: x % 2 == 0, lst1))\n    lst2_even = list(filter(lambda x: x % 2 == 0, lst2))\n    if len(lst1_even) == len(lst2_even):\n        return \"NO\"\n    elif len(lst1_even) < len(lst2_even):\n        lst1_even.extend(lst2_even[:len(lst1_even)//2])\n        lst2_even.extend(lst1_even[len(lst1_even)//2:])\n        return \"YES\"\n    else:\n        lst1_even.extend(lst2_even[:len(lst2_even)//2])\n        lst2_even.extend(lst1_even[len(lst1_even)//2:])\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    s1 = set(lst1)\n    s2 = set(lst2)\n    if len(s1) and len(s2) == 1 and s1 == s2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: implement the exchange function\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst2 = set(lst2)\n    for i in lst1:\n        if i not in lst2:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Compute counts of each character\n    letters = {}\n    for c in test:\n        if c in letters:\n            letters[c] += 1\n        else:\n            letters[c] = 1\n    \n    # Find the most repeated letter\n    max_count = 0\n    for c in letters:\n        if letters[c] > max_count:\n            max_count = letters[c]\n            max_char = c\n    return {max_char: max_count}\n    \n    \ndef main():\n    \"\"\"Run the program by calling the function histogram.\"\"\"\n    test_string = input(\"Enter string: \")\n    test = histogram(test_string)\n    for c in test:\n        print(c, test[c])\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Implement this function.\n    letters = test.lower()\n    letters = letters.replace(' ', '')\n    letters = letters.replace('\\n', '')\n    letters = letters.replace(' ', '')\n    letters = letters.replace(' ', '')\n    \n    counter = {}\n    \n    for character in letters:\n        if character in counter:\n            counter[character] += 1\n        else:\n            counter[character] = 1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] = d[letter] + 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    letters = test.lower().split()\n    letters.sort()\n    \n    hist = {}\n    for i in letters:\n        if i not in hist:\n            hist[i] = 0\n        hist[i] += 1\n    \n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    \n    # TODO:\n    \n    #raise NotImplementedError\n    return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    test = test.lower()\n    histogram_dict = {}\n    for letter in test:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    letter_dict = {}\n    \n    for char in test:\n        if char in letter_dict.keys():\n            letter_dict[char] += 1\n        else:\n            letter_dict[char] = 1\n    \n    return letter_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    letters_dict = dict()\n    for i in test:\n        if i in letters_dict:\n            letters_dict[i] += 1\n        else:\n            letters_dict[i] = 1\n    return letters_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    output = {}\n    test = test.lower()\n    for letter in test:\n        if letter in output:\n            output[letter] += 1\n        else:\n            output[letter] = 1\n    output = sorted(output.items(), key=lambda x: x[1], reverse=True)\n    return output[0]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    letters = Counter(test.lower())\n    max_length = max(letters.values())\n    results = {key: value for (key, value) in letters.items() if value == max_length}\n    return results"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #TODO\n    pass\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not s or not c:\n        return 0, False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not s or not c:\n        return False\n    if len(s) < len(c):\n        return False\n    if c[0]!= s[-1]:\n        return False\n    if not delete_string(s,c):\n        return False\n    return reverse_delete(s[:-1],c)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    i=0\n    \n    while i<len(s):\n        if s[i] == c:\n            s = s[:i]+s[i+1:]\n            i+=1\n        else:\n            i+=1\n    \n    return s,str.startswith(s,s[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = \"\".join(s)\n    c = \"\".join(c)\n    if len(s) == len(c):\n        return (s,False)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i]!= c[j]:\n            return (s[:i]+s[i+1:j]+s[i],False)\n        else:\n            i += 1\n            j -= 1\n    return (s[:i]+s[i+1:j]+s[i:j],True)\n    \ndef is_palindrome(string):\n    return reverse_delete(string,string)[0] == string\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s=s.lower()\n    c=c.lower()\n    l=len(s)\n    r=len(c)\n    if l==r:\n        for i in range(l-r):\n            if s[i]!=c[i]:\n                return(False,False)\n    else:\n        return(\"Not Palindrome\",False)\n    s=s[::-1]\n    return(s,True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string = s + s[::-1]\n    if is_palindrome(string):\n        return (\"bcd\",False)\n    else:\n        return (\"acdef\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if s == c:\n        return (\"\",True)\n    \n    result = []\n    curr_i = 0\n    while curr_i < len(s):\n        i = len(s)-curr_i-1\n        while i >= 0 and s[i] == s[curr_i]:\n            i -= 1\n        if i!= -1:\n            curr_i = i\n            result.append(s[i])\n        else:\n            break\n    \n    result.reverse()\n    return (\"\".join(result),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if c in s:\n        return s[0:c.index(s[0])] + reverse_delete(s[c.index(s[0])+1:],s[0:c.index(s[0])]),False\n    return s,True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Step 1\n    i = 0\n    while i < len(s) and s[i]!= c:\n        i += 1\n    if i < len(s):\n        return (s[:i], True)\n    return (s[:i], False)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x.replace(\"0\", \"1\").replace(\"1\", \"0\") for x in lst]\n    \ndef even_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    odd_count = []\n    for i in lst:\n        if i.isdigit():\n            if int(i) % 2!= 0:\n                odd_count.append(1)\n            else:\n                odd_count.append(0)\n        else:\n            odd_count.append(len(i))\n    return odd_count\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    \n    even_count = [str(lst).count(str(i)[0]) for i in lst]\n    \n    return even_count\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return map(lambda x: int(x.replace(',', '.')), lst)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort(key=lambda x: (len(x), int(x)))\n    return [f\"the number of odd elements {i + 1} the str{i + 1} of the {i + 1}put.\" for i in range(0, len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odds = 0\n    for i in lst:\n        if int(i[0]) % 2 == 1:\n            odds += 1\n    return [f\"the number of odd elements {odds} the str{i}\" for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = [0]\n    for i in lst:\n        if not i.isdigit():\n            pass\n        else:\n            res[-1] += 1\n    return res\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for i in lst:\n        if lst.count(i)%2!= 0:\n            result.append(str(lst.count(i)))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (\n        [\n            f\"the number of odd elements {i} the str{i} of the {i}put.\",\n            \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n            \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\n        ]\n        for i in range(len(lst))\n        if lst[i] % 2 == 1\n    )\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for i in lst:\n        result.append(len(i) % 2)\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # See https://leetcode.com/problems/minimum-subarray-sum/discuss/461650/Python-DP-solution\n    dp = []\n    for num in nums:\n        if len(dp) == 0 or num < dp[-1]:\n            dp.append(num)\n        else:\n            # shrink the DP array\n            if num >= dp[-1]:\n                dp.append(dp[-1] - num)\n    return sum(dp)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # maxIndex = 0\n    # maxSum = 0\n    # for i in range(len(nums)):\n    #     maxIndex = max(maxIndex, nums[i])\n    #     maxSum = max(maxSum, nums[i] + maxIndex)\n    # return maxSum\n    # bfs, result = [], 0\n    # for i in range(len(nums)):\n    #     if nums[i] == 0: continue\n    #     # sumDiff = nums[i] - maxIndex\n    #     # minIndex = nums[i] + maxIndex\n    #     # result = max(result, sumDiff)\n    #     bfs.append(nums[i] + minIndex)\n    # return min(bfs)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def minSubArraySumHelper(arr, start, end):\n        if arr[start] == 0:\n            return 0\n        res = float('inf')\n        for i in range(start, end):\n            res = min(res, arr[i] + minSubArraySumHelper(arr, i + 1, end))\n        return res\n    def minSubArraySum(nums):\n        \"\"\"\n        Given an array of integers nums, find the minimum sum of any non-empty sub-array\n        of nums.\n        1. max(nums) == 0\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        return min(nums) + minSubArraySumHelper(nums, 0, len(nums) - 1)\n    return minSubArraySum(nums"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = sum(nums)\n    \n    if total == 0:\n        return 0\n    \n    # find starting position of subarray\n    curr_start = 0\n    curr_end = -1\n    \n    # if all elements are less than 0, return 0\n    if total < 0:\n        return 0\n    \n    # if there is a pair with at least one element, return minimum\n    for curr_end in range(len(nums)):\n        # if this element is not less than current sum\n        if nums[curr_end] >= 0:\n            total -= nums[curr_end]\n        else:\n            curr_start = curr_end\n            break\n    \n    # return min of these two conditions\n    if curr_start == -1 and curr_end == -1:\n        return 0\n    \n    return min(curr_end - curr_start + 1, len(nums) - curr_end - curr_start + 1)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #check if the sum of the subarray is less than the min\n    def minSubArraySumRecur(arr,min_sum):\n        if len(arr) == 0:\n            return 0\n        #calculate the min_sum and return that\n        #case 1: the smallest element sum so far\n        #case 2: continue\n        #return min(min_sum + arr[0], arr[1], arr[0])\n        sub_sum = 0\n        curr_sum = arr[0]\n        for i in range(1,len(arr)):\n            sub_sum += arr[i]\n            #if the sub_sum is less than the min, return the current min sum\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n            #if the curr_sum is less than the min, continue\n            elif sub_sum < curr_sum:\n                curr_sum = sub_sum\n        return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    memo = {}\n    def minSubArraySum(nums, start, end):\n        if (start, end) in memo:\n            return memo[(start, end)]\n        if start == end:\n            return nums[start]\n        res = float('inf')\n        for i in range(start, end + 1):\n            if (start, i) in memo:\n                res = min(res, nums[i] + minSubArraySum(nums, i + 1, end))\n        memo[(start, end)] = res\n        return res\n    return minSubArraySum(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    left_min = -float('inf')\n    left_sum = 0\n    for right_sum in range(len(nums)):\n        left_sum += nums[right_sum]\n        if left_min > left_sum:\n            left_min = left_sum\n    right_min = -float('inf')\n    right_sum = 0\n    for left_sum in range(len(nums)):\n        right_sum += nums[left_sum]\n        if right_min > right_sum:\n            right_min = right_sum\n    return left_min + right_min\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum_count = 0\n    current_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum += num\n        sum_count += 1\n        if current_sum < min_sum:\n            min_sum = current_sum\n    return sum_count\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(len(nums)):\n        result = max(result, nums[i] + minSubArraySum(nums[i+1:]))\n    return resul"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # dict to store the minimum sub array value\n    min_sum = float('inf')\n    # store the current sum and current index\n    total = 0\n    # initialize a new array to store the min sub array\n    min_sub_array = []\n    # iterate over the array and update the current sum value\n    for num in nums:\n        total += num\n        # if current sum < min sum and the current sum is less than min sum, append the min sub array to the min sub array\n        if total < min_sum:\n            min_sub_array = [num]\n            min_sum = total\n        # if current sum == min sum and the current sum is less than min sum, append the min sub array to the min sub array\n        elif total == min_sum:\n            min_sub_array.append(num)\n        # if the current sum is greater than the current min sum and the current sum is greater than min sum,\n        #   update the current min sum\n        else:\n            min_sum = min(min_sum, total)\n    # return the result\n    return min_sub_array[0]\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def is_valid(grid, capacity):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 0:\n                    return False\n                elif grid[i][j] < capacity:\n                    return False\n        return True\n    \n    def deep_helper(grid, capacity):\n        import math\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it,\n        and all buckets have the same capacity.\n        \n        Implement the function to sum of the number of ways to make all buckets that can be used.\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(grid)\n    def get_flip(i, j):\n        flip = [0, 0]\n        flip[i][j] = 1\n        if i > 0:\n            flip[i-1][j] = 1\n        if i < n - 1:\n            flip[i + 1][j] = 1\n        if j > 0:\n            flip[i][j-1] = 1\n        if j < n - 1:\n            flip[i][j + 1] = 1\n        return flip\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    \n    # fill max_sum with each column as well\n    def calc_max_sum(grid, capacity):\n        col_max_sum = [0] * grid.shape[1]\n        for i in range(grid.shape[1]):\n            col_max_sum[i] = max([grid[j][i] for j in range(grid.shape[0])])\n        max_sum = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] > 0 and col_max_sum[j] + grid[i][j] <= capacity:\n                    max_sum += col_max_sum[j]\n        return max_sum\n    \n    # max_sum = 0\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] > 0 and (max_sum + grid[i][j]) <= capacity:\n    #             max_sum += grid[i][j]\n    #             print(max_sum)\n    #         else:\n    #             max_sum += 0\n    #             print(0)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def canFill(grid, capacity):\n        if not grid:\n            return False\n        row = len(grid)\n        col = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # 1. initialization\n    n = grid.shape[0]\n    max_fill_res = 0\n    for i in range(n):\n        for j in range(n):\n            for idx in range(1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            for idx in range(len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            fill_rate = math.ceil(capacity / (idx + 1))\n            for idx in range(len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    fill_rate -= 1\n            if fill_rate == 0:\n                return -1\n            for idx in range(idx+1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    return -1\n            fill_rate = math.ceil(capacity / (idx + 1))\n            for idx in range(idx+1, len(grid[i][j])):\n                if grid[i][j][:idx] == grid[i][j][idx:]:\n                    fill_rate -= 1\n            max_fill_res = max(max_fill_res, fill_rate)\n    return max_fill_res\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    grid = copy.deepcopy(grid)\n    buckets = []\n    counter = 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def _fill(well, bucket_capacity, row, column):\n        \"\"\"\n        fills in the entire well with water from the column given.\n        column: [0,0] - row index\n        row: [0,i] - column index\n        \"\"\"\n        index = column\n        column = column + 1\n        while column < len(grid):\n            row = row + 1\n            column = column + 1\n            if row == len(grid):\n                break\n            if not grid[row][column]:\n                grid[row][column] = 1\n                bucket_capacity = min(bucket_capacity, row - column)\n                bucket_capacity = max(bucket_capacity, column - row)\n                if bucket_capacity >= 0:\n                    _fill(grid, bucket_capacity, row, column)\n                break\n    \n    def _extract(grid, bucket_capacity):\n        \"\"\"\n        extracts the current rows of each grid cell, and returns the total number of cells that can be extracted.\n        Each cell has its own bucket capacity, which is equal to the capacity of the previous cell (the bucket capacity is the max capacity of the current cell).\n        \"\"\"\n        bucket_capacity = max(grid.shape[1], grid.shape[0])\n        buckets = []\n        for row in range(grid.shape[0]):\n            for column in range(grid.shape[1]):\n                if grid[row][column] == 1:\n                    bucket_capacity = min(bucket_capacity, row - column)\n                    bucket_capacity = max(bucket_capacity, column - row)\n                    if bucket_capacity >= 0:\n                        buckets.append(bucket_capacity)\n        bucket_capacity = sum(buckets)\n        if bucket_capacity >= 0:\n            buckets.append(bucket_capacity)\n        return buckets\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    rows = len(grid)\n    columns = len(grid[0])\n    if columns == 1 or rows == 1:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def solve(grid):\n        rows = len(grid)\n        cols = len(grid[0])\n        total_buckets = [0 for _ in range(cols)]\n        for r in range(rows):\n            for c in range(cols):\n                if grid[r][c] == 0:\n                    for d in range(1, cols):\n                        if grid[r][d] == 1:\n                            total_buckets[d] += 1\n        total_water = sum([bucket for bucket in total_buckets])\n        capacity = sum([bucket for bucket in total_buckets if bucket < capacity])\n        return total_water // capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import numpy as np\n    import math\n    def min_fill(grid, capacity):\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it,\n        and all buckets have the same capacity.\n        \"\"\"\n        #initialize the min_bucket\n        min_bucket = np.zeros((grid.shape[0], grid.shape[1]), dtype=np.uint8)\n        for i in range(grid.shape[0]):\n            for j in range(grid.shape[1]):\n                if grid[i][j] == 1:\n                    min_bucket[i][j] = min_bucket[i][j] + 1\n        \n        # count the amount of empty buckets\n        empty_bucket = np.sum(min_bucket)\n        # if there are no empty buckets, return the capacity\n        if empty_bucket == 0:\n            return capacity\n        # if there are empty buckets, the amount of buckets should be the capacity\n        if empty_bucket < capacity:\n            return min_fill(grid, capacity)\n        \n        # if there are empty buckets, it is possible to lower the buckets by putting \n        # the remaining amount to the minimum amount buckets\n        else:\n            # increment the amount of buckets to the minimum amount buckets\n            min_bucket = np.zeros((grid.shape[0], grid.shape[1]), dtype=np.uint8)\n            for i in range(grid.shape[0]):\n                for j in range(grid.shape[1]):\n                    if grid[i][j] == 0:\n                        continue\n                    else:\n                        bucket_count = min_bucket[i][j]\n                        current_bucket = min_bucket[i][j]\n                        for k in range(1, bucket_count+1):\n                            if min_bucket[i][j] >= current_bucket:\n                                current_bucket = current_bucket - k\n                                min_bucket[i][j] = min_bucket[i][j] + k\n                                # while the current bucket is filled, then we need to remove it\n                                if current_bucket == 0:\n                                    break\n                            else:\n                                break\n                if current_bucket == 0:\n                    break\n        \n            # return the new minimum buckets\n            return min_fill(grid, capacity)\n        \n    max_value = max_fill(grid, capacity)\n    return max_value\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted = []\n    for x in range(len(arr)):\n        n = int(arr[x])\n        if n > 0:\n            sorted.append(n)\n    sorted = sorted[::-1]\n    return sorted\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    zero = []\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero.append(i)\n    return arr[zero]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if arr[i-1] == 1:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n            else:\n                arr[i] = arr[i-1]\n                arr[i-1] = 0\n    return ar"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    result = sorted(arr)\n    \n    if isinstance(arr, list):\n        return result\n    \n    return [result[0]] + sort_array(arr[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: implement\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    out = []\n    # TODO: change this and use the bit manipulation\n    # bit count - 1 = number of ones in the binary representation of\n    # non-negative integers\n    # print(len(bin(len(arr)).replace('0b', '')))\n    # to see the number of ones\n    for i in range(len(arr)):\n        # print(i, arr[i])\n        bit = int(arr[i])\n        # print(i, bit)\n        # print(i, bit & 0xffffffff)\n        out.append((bit & 0xffffffff) >> 31)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Create a new array of length len(arr)\n    new_array = [None] * len(arr)\n    # Fill new array with zeroes\n    for i in range(len(arr)):\n        new_array[i] = 0\n    # Sort the new array\n    for j in range(len(arr)):\n        for i in range(len(arr)):\n            # If current element is 0, increment its place\n            # in new array\n            if arr[i] == 0:\n                new_array[i] += 1\n            # If the new element is greater than the current element, decrement its place\n            # in new array\n            if arr[i] > arr[j]:\n                new_array[i] -= 1\n    # Return new array\n    return new_array\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # sort array by number of ones (in binary)\n    num_ones = [0] * (len(arr) - len(arr) % 2)\n    num_ones += list(map(int, list(arr)))\n    num_ones.sort()\n    # convert binary to decimal\n    dec_list = list(map(lambda x: int(str(x)[-1]), num_ones))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n    if count == 0:\n        return None\n    sorted_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            sorted_arr[i] = count\n            count = 0\n        else:\n            count += 1\n    if count!= 0:\n        sorted_arr[i] = count\n    return sorted_arr\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # HINT: try doing the \"if\" condition to make sure the input is not an empty string\n    if len(s) == 0:\n        return []\n    return [word for word in s.split() if len(word) >= n and word not in set(s.lower())]\n    \n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) < n:\n        return []\n    else:\n        result = []\n        for i in range(len(s) - n + 1):\n            if s[i:i+n]!= \" \":\n                result.append(s[i:i+n])\n        return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s == \"\":\n        return []\n    else:\n        return [word for word in s.split() if word.count(word[0]) >= n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = []\n    for letter in s:\n        if letter in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            words.append(letter)\n    return words"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    for i in range(0, n):\n        if len(s) == 0:\n            break\n        check = True\n        for j in range(0, len(s)):\n            if s[j].upper() not in [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]:\n                check = False\n                break\n        if check == True:\n            output.append(s[j].upper())\n    return output"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = []\n    if s == \"\":\n        return words\n    for i in range(len(s)):\n        if s[i].lower() in WORDS:\n            words.append(s[i].lower())\n    return select_words(s[1:], n)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    word_list = list(s.lower())\n    n_list = list(n)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] not in n_list:\n                if word_list[i]!= word_list[j]:\n                    word_list[i] = word_list[j]\n    return(word_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = []\n    for c in s:\n        if c.isalpha():\n            lst.append(c.lower())\n    lst = list(filter(lambda s: len(s) > n, lst))\n    return lst\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s_len = len(s)\n    res = []\n    # print(s)\n    if s_len == 0:\n        return []\n    \n    for c in s:\n        if c.lower() not in \"abcdefghijklmnopqrstuvwxyz\":\n            continue\n        if s.count(c) >= n:\n            res.append(c)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    words = []\n    for c in s:\n        if c in CONSONANT:\n            words.append(c)\n    return select_words(words, n - 1) + words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(word) <= 2:\n        return word\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in 'aeiouAEIOU':\n            for j in range(i + 1, len(word)):\n                if word[j] in 'aeiouAEIOU':\n                    word = word[:i] + word[i + 1:] + word[:j] + word[j + 1:]\n                    break\n        else:\n            word = word[:i] + word[i + 1:]\n            break\n    return word\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    word = list(word)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    i, j = len(word) - 1, 0\n    vowel_precedence = {\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for char in word:\n        if char not in vowels:\n            i -= 1\n        else:\n            vowel_precedence[char] = max(vowel_precedence.values()) + 1\n            i = 0\n        j += 1\n    if i == 0:\n        return ''\n    if i == len(word) - 1:\n        return word[i]\n    return word[i:j + 1]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(word) == 0:\n        return ''\n    \n    left = word[0]\n    right = word[-1]\n    if left not in \"aeiouAEIOU\":\n        left = ''\n    if right not in \"aeiouAEIOU\":\n        right = ''\n    if left == right:\n        return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = \"\"\n    for idx,ch in enumerate(word):\n        if ch!= \"a\":\n            continue\n        if idx > 0 and word[idx-1]!= word[idx]:\n            break\n        if idx < len(word)-1 and word[idx+1]!= word[idx]:\n            break\n        \n        if word[idx] == \"y\" and word[idx+1]!= \"o\":\n            res += \"u\"\n        elif word[idx] == \"u\" and word[idx+1]!= \"y\":\n            res += \"u\"\n        elif word[idx]!= \"a\" and word[idx+1] == \"a\":\n            res += \"u\"\n    return res"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # get_closest_vowel(\"ab\")\n    # print(get_closest_vowel(\"ab\"))\n    # print(get_closest_vowel(\"FULL\"))\n    # return \"U\"\n    if not word:\n        return \"\"\n    \n    for i in range(len(word)-1):\n        if word[i:i+2] == \"I'\":\n            left = i\n            right = i+2\n        elif word[i:i+3] == \"I'm\":\n            left = i\n            right = i+3\n        elif word[i:i+4] == \"you've\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you're\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you've\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you'll\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you'd\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you're\":\n            left = i\n            right = i+4\n        elif word[i:i+4] == \"you'll\":\n            left = i\n            right = i+4\n        if left <= 0 and right <= len(word)-1:\n            return word[:i]+word[right:len(word)]\n        if left <= 0 and right > 0:\n            left = i\n            right = i+2\n            while word[left:right].count(\"I'\")!= 0:\n                left += 1\n                right += 1\n            return word[:left]+word[right:len(word)]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert is_vowel(word) or is_chars(word) or is_empty(word), \"Illegal word\"\n    vowels = ['a','e','i','o','u']\n    \n    vowel_list = []\n    for i in range(len(word)-1):\n        if word[i:i+2].isalpha() and word[i+1:i+3].isalpha():\n            if len(vowel_list)>0:\n                if word[i:i+2] not in vowels:\n                    vowel_list.append(word[i:i+2])\n            else:\n                vowel_list = [word[i:i+2]]\n        if len(vowel_list)==0:\n            break\n    return vowel_list[0]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #Variables\n    left = -1\n    right = -1\n    start = len(word)\n    end = len(word)\n    closest_vowel = word[0]\n    \n    for i in range(start):\n        current = word[i]\n        for j in range(i+1, end):\n            next = word[j]\n            if current == next:\n                left = i\n                right = j\n    \n    if left == right:\n        return \"\"\n    elif left == -1:\n        if current.isupper():\n            closest_vowel = \"u\"\n        else:\n            closest_vowel = \"U\"\n    elif right == -1:\n        if current.islower():\n            closest_vowel = \"u\"\n        else:\n            closest_vowel = \"U\"\n    else:\n        if current.isupper():\n            closest_vowel = \"U\"\n        else:\n            closest_vowel = \"u\"\n            \n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not word:\n        return \"\"\n    left, right = [], []\n    for i in range(len(word)):\n        if word[i] not in [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"]:\n            left.append(word[i])\n        else:\n            right.append(word[i])\n    if left[-1] == \"a\":\n        return \"\"\n    elif right[-1] == \"e\":\n        return \"\"\n    elif right[-1] == \"i\":\n        return \"\"\n    elif right[-1] == \"o\":\n        return \"\"\n    elif right[-1] == \"u\":\n        return \"\"\n    else:\n        return word[-1]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # get the closest vowel from the left side \n    left_vowel = get_closest_vowel_from_left_side(word)\n    \n    # get the closest vowel from the right side\n    right_vowel = get_closest_vowel_from_right_side(word)\n    \n    if left_vowel is None or right_vowel is None:\n        return \"\"\n    \n    # find the closest vowel in the right side\n    index_of_right_vowel = get_closest_vowel_from_right_side_index(word, right_vowel)\n    \n    # return the closest vowel\n    return left_vowel + word[:index_of_right_vowel]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    right_index = vowels.index(word[-1]) + 1\n    left_index = vowels.index(word[0])\n    closest_vowel_index = right_index\n    while left_index < len(vowels_list):\n        if left_index == len(vowels_list) - 1:\n            right_index = len(vowels_list)\n        elif right_index == len(vowels_list) - 1:\n            right_index = left_index\n        else:\n            if vowels_list[left_index] == word[0]:\n                right_index = left_index\n            else:\n                right_index = left_index + 1\n        closest_vowel_index = min(closest_vowel_index, right_index)\n        left_index = closest_vowel_index\n    if closest_vowel_index == len(vowels_list) - 1:\n        closest_vowel_index = right_index\n    closest_vowel = vowels_list[closest_vowel_index]\n    return closest_vowel\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) % 2!= 0:\n        return \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # 1. check if we have a lst\n    if len(lst) == 1:\n        return True\n    # 2. iterate through the lst\n    for i in range(1, len(lst) - 1):\n        # 3. for each char in the char list, check if it's a ')'\n        for char in lst[i]:\n            if char == ')':\n                # if it's a ')'\n                if lst[i - 1] == ')':\n                    return False\n    return True"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_balanced(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    def is_good(paren):\n        count = 0\n        for char in paren:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n    \n    if len(lst) < 2:\n        return 'Yes'\n    elif len(lst) == 2:\n        if is_balanced(lst[0]) and is_balanced(lst[1]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        current = lst[0]\n        next_lst = lst[1:]\n        if is_balanced(current) and is_balanced(next_lst[0]) and is_balanced(next_lst[1]):\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    lst_s = set(lst)\n    lst_s.add(')')\n    \n    while len(lst) > 1:\n        left, right = lst[:2], lst[1:]\n        if left == '(' and right == ')':\n            return 'Yes'\n        elif left == ')' and right == '(':\n            return 'Yes'\n        elif left == '(':\n            if right == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        elif left == ')':\n            if right == ')':\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    \n    return 'No'"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_balanced(s):\n        n = 0\n        for c in s:\n            if c == '(':\n                n += 1\n            else:\n                n -= 1\n            if n < 0:\n                return False\n        return n == 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    open = [')', '(', '(']\n    close = [')', ')', ')']\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #Brute Force Solution\n    #dfs(lst,0,0,0,0)\n    #if not lst: return False\n    #for i in range(len(lst)):\n        #if lst[i] == '(' and lst[i+1] == ')':\n            #if dfs(lst[:i],0,1,0,0): return 'Yes'\n        #else: return 'No'\n    #return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    S = ''.join(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def recur(st):\n        if len(st) == 0:\n            return True\n        if st[0]!= '(':\n            return False\n        if st[-1]!= ')':\n            return False\n        return recur(st[1:-1])\n    if len(lst) < 2:\n        return 'Yes'\n    if recur(lst) == 'Yes':\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    stack = []\n    mismatch = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append(lst[i])\n        else:\n            if len(stack) == 0 or stack[-1]!= '(':\n                return 'No'\n            if lst[i] == ')':\n                stack.pop()\n            else:\n                mismatch += 1\n    return 'Yes' if mismatch == 0 else 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if arr == None or len(arr) == 0:\n        return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Return the sorted list with the max number in the array\n    if k == 0:\n        return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def partition(arr, low, high, k):\n        if (high - low) % 2 == 0:\n            mid = (high + low + 1) // 2\n        else:\n            mid = (high + low + 1) // 2 - 1\n        \n        pivot = arr[mid]\n        i, j = low, mid + 1\n        while True:\n            while i < j:\n                while i < len(arr) and arr[i] > pivot:\n                    i += 1\n                while j > 0 and arr[j] < pivot:\n                    j -= 1\n                if i < j:\n                    arr[i], arr[j] = arr[j], arr[i]\n                else:\n                    break\n            arr[i], arr[mid] = arr[mid], arr[i]\n            if i == mid:\n                arr[j], arr[i] = arr[i], arr[j]\n            else:\n                arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        arr[mid], arr[high] = arr[high], arr[mid]\n        return mid\n    \n    def quicksort(arr, low, high, k):\n        if len(arr) <= 1:\n            return arr\n        if k < arr[low]:\n            quicksort(arr, low, (low + high)//2, k)\n        if k < arr[high]:\n            quicksort(arr, (low + high)//2 + 1, high, k)\n        return arr\n    \n    if k > len(arr):\n        return quicksort(arr, 0, len(arr) - 1, k)\n    if len(arr) == 0:\n        return []\n    if k == 0:\n        return arr\n    pivot = arr[(len(arr) - 1) // 2]\n    arr.sort()\n    return quicksort(arr, 0, len(arr) - 1, k - 1) + [pivot] + quicksort(arr, 0, len(arr) - 1, k)\n    \n    \ndef maximum3(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if arr == []:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not arr or not k:\n        return []\n    \n    l = len(arr)\n    # array of the maximum possible values for k\n    max_val = []\n    # Find max value at each step\n    for i in range(l):\n        max_val.append(arr[i])\n    \n    # remove the last element\n    # because it will be from highest to lowest\n    # then we will remove the last element\n    # in the array\n    max_val.pop()\n    \n    for i in range(l - 1, 0, -1):\n        # Find the maximum element at each step\n        # to avoid removing element from the array\n        # so we start from the second position\n        # since array is ordered from lowest to highest\n        # this means the first element will be the highest\n        # and the second element will be the smallest\n        max_val[i] = max(max_val[i], arr[i])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # recursive\n    def max_k(arr, k, left, right):\n        if left == right:\n            if k == len(arr):\n                return []\n            return [arr[left], arr[k], arr[right]]\n        \n        mid = (left + right) // 2\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = arr.copy()\n    k = max(k, len(l)-k)\n    if k >= 1:\n        for i in range(len(l) - k + 1):\n            max_ = l[i]\n            for j in range(i, i + k):\n                if l[j] > max_:\n                    max_ = l[j]\n            l[i] = max_\n    return l\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    min_value, max_value = float('-inf'), float('inf')\n    \n    for element in arr:\n        min_value = min(min_value, element)\n        max_value = max(max_value, element)\n    \n    return [min_value, max_value"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def bubble_sort(arr, k):\n        n = len(arr)\n        for i in range(n):\n            for j in range(n-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n    def insert_sort(arr, k):\n        n = len(arr)\n        for i in range(1, n):\n            j = i\n            while j > 0 and arr[j-1] > arr[j]:\n                arr[j-1], arr[j] = arr[j], arr[j-1]\n                j -= 1\n        return arr\n    def shell_sort(arr, k):\n        def shell(arr, i, k):\n            if i >= k:\n                return\n            else:\n                mid = i + (k-i) // 2\n                shell(arr, i, mid)\n                shell(arr, mid, k)\n        shell(arr, 0, len(arr))\n        return arr\n    def shell_sort2(arr, k):\n        def shell(arr, i, k):\n            if i >= k:\n                return\n            else:\n                j = i\n                while j < len(arr) and arr[j] > arr[j//2]:\n                    arr[j], arr[j//2] = arr[j//2], arr[j]\n                    j = j//2\n                shell(arr, i, k)\n        shell(arr, 0, len(arr))\n        return arr\n    def quick_sort(arr, k):\n        def q(arr, l, r):\n            if l >= r:\n                return\n            p = partition(arr, l, r)\n            quick_sort(arr, l, p - 1)\n            quick_sort(arr, p + 1, r)\n        def partition(arr, l, r):\n            pivot = arr[r]\n            i = l\n            j = l\n            for j in range(l, r):\n                if arr[j] <= pivot:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    i += 1\n            arr[i], arr[r] = arr[r], arr[i]\n            return i\n        q(arr, 0, len(arr) - 1)\n        return arr\n    arr = shell_sort(arr, k)\n    return bubble_sort(arr, k)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even=even+i\n        else:\n            odd=odd+i\n    return even+odd"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    answer = 0\n    for i in range(len(lst)):\n        if (lst[i] % 2) == 0:\n            answer += lst[i]\n    return answer\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (lst[i] % 2) == 0:\n            sum += lst[i]\n    return su"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \"\"\"\n    lst.sort()\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n    \"\"\"\n    \n    import math\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return math.floor(sum / 2"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # 1. choose all odd numbers and check if odd numbers start from even position\n    # 2. choose odd numbers and check if odd numbers are even number\n    # 3. return the sum of odd numbers\n    odd_num = 0\n    even_num = 0\n    for i in lst:\n        if i % 2:\n            even_num += i\n        else:\n            odd_num += i\n    return odd_num + even_num\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(filter(lambda x: x%2==0, lst))\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    for i in even:\n        result += i\n    for i in odd:\n        result -= i\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # lst.sort()\n    even = 0\n    odd = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n    return even + odd\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for i in lst:\n        if i%2==0:\n            even_sum+=i\n        else:\n            odd_sum+=i\n    return even_sum+odd_sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) < k or len(arr) % k:\n        raise Exception(\"Invalid\")\n    sum = 0\n    for i in range(k):\n        if i!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_len = 0\n    # Base case\n    if len(arr) < 1 or k < 1:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n        if len(str(ans)) <= k:\n            break\n    return ans\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # for i in range(len(arr) - 2):\n    #     #if k == 0:\n    #     #    sum += arr[i]\n    #     #elif k > 0:\n    #     #    sum += arr[i]\n    #     #    k -= 1\n    #     #elif k < 0:\n    #     #    sum += arr[i]\n    #     #    k += 1\n    #     #else:\n    #     #    sum += arr[i]\n    #     #    k -= 1\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k = min(len(arr), k)\n    #     #    k += 1\n    #     #    k = min(k, len(arr) - i - 1)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k = min(k, len(arr) - i - 1)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(k, len(arr) - i - 1)\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(k, len(arr) - i - 1)\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(0, k)\n    #     #    k += 1\n    #     #    k = max(k, len(arr) - i - 1)\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(k, len(arr) - i - 1)\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = min(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)\n    #     #    k += 1\n    #     #    k = max(0, k)"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(arr[i:i+k] for i in range(len(arr)-k))\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # write your code here\n    return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # O(N)\n    # O(k)\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Idea:\n    # calculate the number of digits in the array\n    digits = 0\n    for element in arr:\n        digits += len(str(element))\n    # 2. 2k digits\n    # create the string\n    string = \"\".join([str(element) for element in arr])\n    # calculate the digits\n    digit_count = len(string) - digits\n    # return the sum\n    return digit_count * (2 ** k)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for num in arr:\n        if len(str(num)) < k:\n            num += 10 ** (k - len(str(num)))\n        else:\n            num += 10 ** (k - len(str(num)))\n    return nu"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n    \n    result = 0\n    for idx, element in enumerate(arr):\n        if len(str(element)) >= 2:\n            if element < 10:\n                result += element\n            else:\n                result += 10 ** (2 * idx) + element\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # start with a value of 1\n    # n is 1\n    # loop until n is 1\n    # n is not 1\n    # try to append n to list, if n is odd append odd numbers to list and skip n\n    # if n is even append even numbers to list\n    # return list of odd numbers.\n    odd_numbers = []\n    n_list = [1]\n    for i in range(1, n+1):\n        # increment n_list by 1\n        n_list.append(i)\n        # if i is odd\n        if i % 2 == 0:\n            # try to append odd numbers to list\n            # if odd number is not in list, append it and skip n\n            if n_list[-1] not in odd_numbers:\n                odd_numbers.append(n_list[-1])\n                # check if odd numbers are in list. If they are, append even numbers.\n                # If they aren't, append odd numbers\n                for i in range(len(n_list)):\n                    if n_list[i] % 2 == 0:\n                        if n_list[i] not in odd_numbers:\n                            odd_numbers.append(n_list[i])\n    return odd_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # initial condition\n    max_num = n\n    list = []\n    for i in range(n):\n        if i!= 0:\n            curr_num = max_num // 2\n            if curr_num % 2 == 0:\n                list.append(curr_num)\n            else:\n                list.append(curr_num * 3 + 1)\n        max_num = max(max_num, n)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd_numbers = []\n    \n    if n == 0:\n        return []\n    \n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3*n + 1\n        odd_numbers.append(n)\n    \n    return odd_number"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    collatz = [1]\n    n_seq = []\n    \n    # next term is 1\n    next_term = 1\n    \n    # while sequence still not reach 1, the first element is 1\n    while next_term!= 0:\n        # if the previous term is odd, the next term is one half of the previous term\n        if next_term % 2!= 0:\n            collatz.append(next_term // 2)\n        else:\n            collatz.append(next_term * 3 + 1)\n        \n        # increment next_term\n        next_term = next_term * 2\n    \n    # append last term as it reaches 1\n    collatz.append(next_term)\n    \n    # re-sort\n    collatz.sort()\n    return collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = [0]\n    i = 1\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    seq = [1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            seq.append(seq[i // 2] * 2)\n        else:\n            seq.append(seq[i // 2] * 3)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd_collatz = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # O(n) - time, O(1) - space\n    odd_nums = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd_nums.append(i)\n    odd_nums.sort()\n    return odd_nums\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_collatz = []\n    start = 1\n    while start < n:\n        if start % 2 == 0:\n            odd_collatz.append(start)\n        start = start + 1\n    return odd_collatz"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    date_format = \"%m-%d-%Y\"\n    if not len(date) == 10:\n        return False\n    if not date.isdigit():\n        return False\n    if len(date) > 11:\n        return False\n    if date[2] == \"/\":\n        return False\n    if date[3] == \"/\":\n        return False\n    if date[4] == \"/\":\n        return False\n    if date[5] == \"/\":\n        return False\n    if date[6] == \"/\":\n        return False\n    if date[7] == \"/\":\n        return False\n    if date[8] == \"/\":\n        return False\n    if date[9] == \"/\":\n        return False\n    if date[10] == \"/\":\n        return False\n    try:\n        day = int(date[0:2])\n        month = int(date[3:5])\n        year = int(date[6:10])\n        if not 1 <= day <= 31:\n            return False\n        if not 1 <= month <= 12:\n            return False\n        if not (year % 4 == 0 and year % 100!= 0 or year % 400 == 0):\n            return False\n        if not(month in [1, 3, 5, 7, 8, 10, 12]) or not (month in [4, 6, 9, 11]):\n            return False\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    day_count = 0\n    month_count = 0\n    year_count = 0\n    \n    if len(date)==0:\n        return False\n    \n    date_list = date.split(\"-\")\n    \n    if len(date_list[0])<2 or len(date_list[1])<2 or len(date_list[2])<4:\n        return False\n    \n    for i in date_list:\n        if len(i)>0:\n            try:\n                int(i)\n            except ValueError:\n                return False\n        \n        if int(i)<1 or int(i)>31:\n            return False\n    \n    if len(date_list[0])==4 and len(date_list[1])==2 and len(date_list[2])==2 and len(date_list[3])==2:\n        if int(date_list[0])<1 or int(date_list[0])>31 or int(date_list[1])<1 or int(date_list[1])>31 or int(date_list[2])<1 or int(date_list[2])>31 or int(date_list[3])<1 or int(date_list[3])>31:\n            return False\n        \n        if int(date_list[0])==1 or int(date_list[0])==3 or int(date_list[0])==5 or int(date_list[0])==7 or int(date_list[0])==8 or int(date_list[0])==10 or int(date_list[0])==12 or int(date_list[0])==0 or int(date_list[0])==14 or int(date_list[0])==15 or int(date_list[0])==16 or int(date_list[0])==17 or int(date_list[0])==18 or int(date_list[0])==19 or int(date_list[0])==20 or int(date_list[0])==21:\n            return False\n    \n    if len(date_list[0])==4 and len(date_list[1])<2 and len(date_list[2])>0:\n        if int(date_list[0])<1 or int(date_list[0])>31 or int(date_list[1])<1 or int(date_list[1])>31 or int(date_list[2])<1 or int(date_list[2])>31:\n            return False\n        \n        if int(date_list[0])==1 or int(date_list[0])==3 or int(date_list[0])==5 or int(date_list[0])==7 or int(date_list[0])==8 or int(date_list[0])==10 or int(date_list[0])==12 or int(date_list[0])==0 or int(date_list[0])==14 or int(date_list[0])==15 or int(date_list[0])==16 or int(date_list[0])==17 or int(date_list[0])==18 or int(date_list[0])==19 or int(date_list[0])==20 or int(date_list[0])==21:\n            return False\n    \n    if len(date_list[0])==4 and len(date_list[1])<2 and len(date_list[2])==0:\n        if int(date_list[0])<1 or int(date_list[0])>31:\n            return False\n        \n        if int(date_list[0])==1 or int(date_list[0])==3 or int(date_list[0])==5 or int(date_list[0])==7 or int(date_list[0])==8 or int(date_list[0])==10 or int(date_list[0])==12 or int(date_list[0])==0 or int(date_list[0])==14 or int(date_list[0])==15 or int(date_list[0])==16 or int(date_list[0])==17 or int(date_list[0])==18 or int(date_list[0])==19 or int(date_list[0])==20 or int(date"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if date.count('-') == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    try:\n        num_days = int(date[-1])\n        month = date[:6]\n        year = date[6:10]\n        if (not num_days.isdigit()) or (not month.isdigit() or not year.isdigit()):\n            return False\n        elif int(num_days) <= 1 or int(num_days) > 30:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if date == \"\":\n        return False\n    \n    days = 0\n    months = 0\n    year = 0\n    \n    if date[0].isdigit():\n        months = int(date[:2])\n        day = int(date[2:4])\n        year = int(date[4:6])\n        \n    else:\n        months = 0\n        day = int(date[:2])\n        year = int(date[2:4])\n        \n    if len(date) == 8:\n        months = 0\n        day = int(date[:2])\n        year = int(date[2:4])\n        \n    if len(date) == 10:\n        months = 0\n        day = int(date[:2])\n        year = int(date[2:4])\n        \n    if len(date) == 12:\n        months = 0\n        day = int(date[:2])\n        year = int(date[2:4])\n        \n    if months > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if year > 0:\n        if (year % 4)!= 0:\n            return False\n        elif (year % 100)!= 0:\n            if (year % 400)!= 0:\n                return False\n            else:\n                return True\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        day, month, year = date.split('-')\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not date:\n        return False\n    if not date.isdigit():\n        return False\n    if not (len(date) == 8 and int(date) < 31 and int(date) >= 1):\n        return False\n    if not (len(date) == 10 and int(date[1]) < 31 and int(date[1]) >= 1):\n        return False\n    if not (len(date) == 10 and int(date[2]) < 31 and int(date[2]) >= 1):\n        return False\n    if not (len(date) == 4 and int(date[3]) < 31 and int(date[3]) >= 1):\n        return False\n    if not (len(date) == 10 and int(date[4]) < 31 and int(date[4]) >= 1):\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if date == '':\n        return False\n    return validate_date(date)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        date = date.split('-')\n        if len(date)!= 3:\n            return False\n        month, day, year = date\n        if not(month in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']):\n            return False\n        if not(day in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']):\n            return False\n        if not(year in ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020']):\n            return False\n        if not(month >= 1 or month <= 12):\n            return False\n        if not(day >= 1 or day <= 31):\n            return False\n        if not(year >= 2000 or year < 2001):\n            return False\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if date == '':\n        return False\n    if date.isdigit() == False or len(date)!= 10:\n        return False\n    \n    try:\n        m,d,y = [int(i) for i in date.split('-')]\n        if (m < 1) or (m > 31) or (d < 1) or (d > 30) or (y < 1) or (y > 31):\n            return False\n    except:\n        return False\n    if len(str(m))!= 2:\n        return False\n    if d > 30 or d < 1 or (y < 1) or (y > 31):\n        return False\n    if len(str(d))!= 4 or len(str(d))!= 2 or (d > 29 and d < 30) or (d > 31 and d < 30) or (d == 29 and d < 30):\n        return False\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    txt = re.split('[^a-zA-Z0-9]', txt.lower())\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [word.lower() for word in txt.split(',')]"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    txt = txt.replace(' ', '')\n    txt = txt.lower().split(',')\n    if not txt:\n        return []\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [word for word in txt.split(',') if word.strip()]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    txt = txt.lower()\n    return txt.split(',') if'' in txt else txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    txt = txt.lower()\n    words = []\n    for word in txt.split(','):\n        word = word.strip()\n        if len(word) > 1:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    txt = txt.lower().replace(' ', '')\n    tokens = []\n    for word in txt.split(','):\n        if word:\n            tokens.append(word)\n    return tokens\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.strip()\n    words = txt.split(\",\")\n    # print(words)\n    if len(words) == 0:\n        return []\n    word_list = []\n    for word in words:\n        word = word.lower()\n        word_list.append(word)\n    # print(word_list)\n    odd_letter_list = []\n    for word in word_list:\n        if len(word) % 2!= 0:\n            odd_letter_list.append(word[::-1])\n    return odd_letter_list\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if'' in txt:\n        return [word.split(',')[1][1:] for word in txt.split() if word.split(',')[0][0].isupper()]\n    else:\n        return [word.split(',')[0] for word in txt.split() if word.split(',')[0][0].isupper()]\n    \n    \ndef join_words(txt):\n    '''\n    Given a list of words, return the single string formed by joining the words together to form a string.\n    Examples\n    join_words([\"Hello\", \"world!\"]) == \"Hello,world!\"\n    join_words([\"Hello\", \"world\", \"!\"]) == \"Hello,world!\"\n    join_words([\"Hello\", \"world\", \"!\"]) == \"Hello world!\"\n    '''\n    return ','.join(txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower() # string to lowercase\n    txt = txt.strip() # string to remove whitespaces\n    txt = txt.split(\",\") # split each word\n    return [word.strip() for word in txt if word.strip() and not word.strip().startswith('#')] # remove first word, because it's unneeded\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # remove duplicates and sort\n    unique_list = []\n    for num in lst:\n        if num not in unique_list:\n            unique_list.append(num)\n    unique_list.sort()\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(lst) == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(lst)\n    if n < 2:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def compare(n):\n        if n < 0:\n            return -1\n        else:\n            return 1\n    return all(compare(n) == compare(n[i]) for i,n in enumerate(lst))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst.count(lst[0]) > 1:\n        return False\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i]!= lst[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) > 1:\n        i = 1\n        for j in range(len(lst) - 1):\n            if lst[j]!= lst[j+1]:\n                return False\n            else:\n                i += 1\n        return i == 1\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # sort list in ascending order, so that duplicate numbers are in wrong order\n    lst = sorted(lst)\n    for i in range(len(lst) - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)):\n        for j in range(len(lst) - i - 1):\n            if lst[j] > lst[j+1]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        return lst[0] == lst[1] and is_sorted([lst[0], lst[1]])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_duplicates = list(dict.fromkeys(lst))\n    if len(lst_duplicates) > 1:\n        return False\n    return True if lst_duplicates == lst else False\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # check if one interval has a start greater than another\n    # if not, the start is smaller\n    # if start is smaller, but end is bigger, then it's not a prime number\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return \"NO\"\n    \n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if interval1[0] <= interval2[1] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    if interval1[0] < interval2[0] or interval1[1] > interval2[1]:\n        return \"NO\"\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    \n    # \u5168\u5c40\u7a7a\u95f4\n    l, r = interval1[0], interval2[0]\n    while l!= r:\n        mid = (l+r)//2\n        if interval1[0] <= mid <= interval2[0]:\n            return \"YES\"\n        elif interval1[0] < mid:\n            l = mid\n        else:\n            r = mid\n    return \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def isprime(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval1[1] and interval2[0] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return True\n    if interval1[0] < interval1[1]:\n        if interval2[0] < interval2[1]:\n            if (interval2[0] >= interval1[0]) and (interval2[1] <= interval1[1]):\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif interval2[0] < interval2[1]:\n            return \"NO\"\n        else:\n            if interval2[1] > interval1[1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n    else:\n        if interval1[0] > interval1[1]:\n            return \"NO\"\n        elif interval1[1] < interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # your code here\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    elif interval1[0] == interval2[1]:\n        return \"NO\"\n    elif interval1[1] >= interval2[0]:\n        return \"YES\"\n    elif interval1[1] < interval2[0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # get the intersection\n    intersection = set(interval1) & set(interval2)\n    if not intersection:\n        return \"NO\"\n    if len(intersection) == 1:\n        return \"YES\"\n    # check if the intersection is prime\n    for i in intersection:\n        if i < interval1[0] or i > interval2[0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    m = max(arr)\n    return sum([int(s) * m for s in str(bin(arr[i]))[2:].zfill(m)])\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    signs = {0: -1, 1: 0, -1: 1}\n    m = 0\n    for i in arr:\n        m = m + signs[i] * (i ** 2)\n    return m\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    magn = list(set(arr))\n    sum = 0\n    for v in magn:\n        if v >= 0:\n            sum += int(v*v)\n        else:\n            sum -= int(v*v)\n    return sum\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    signs = [0 for i in arr]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] < 0 and arr[1] < 0:\n            return None\n        if arr[0] < 0 and arr[1] == 0:\n            return None\n        elif arr[0] == 0 and arr[1] < 0:\n            return arr[1] * -1\n        elif arr[0] < 0 and arr[1] == 0:\n            return None\n        else:\n            return arr[0] * prod_signs(arr[1:])\n    else:\n        signs = []\n        # Find all signs\n        for i in range(len(arr) - 1):\n            if arr[i] < 0:\n                signs.append(1)\n            else:\n                signs.append(-1)\n        # Calculate product and sum\n        product = 1\n        for i in range(len(signs) - 1):\n            product *= signs[i]\n        sum = prod_signs(signs[:-1])\n        # print(product, sums)\n        # if sums == None:\n        #     return None\n        # else:\n        #     sum = sums[0]\n        #     for i in range(len(sums) - 1):\n        #         sum *= signs[i]\n        #     return product * sum\n        return product * sum\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # your code here\n    if len(arr) == 0:\n        return None\n    signs = [-1] * len(arr)\n    for i in range(len(arr)):\n        if signs[i] == 1:\n            signs[i] = arr[i]\n    for i in range(len(signs)):\n        if signs[i] == 0:\n            for j in range(i, len(arr)):\n                arr[j] *= arr[i]\n            return arr\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sums = 0\n    for i in arr:\n        if i > 0:\n            sums += i\n    return sums * len(arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    signs = [[]]\n    for num in arr:\n        for sign in signs:\n            if sign is None:\n                signs.append(sign + [num])\n            else:\n                signs[-1].append(sign*num)\n    return sum(sign for sign in signs if len(sign) > 0)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    product = 1\n    for num in arr:\n        product *= -1 if num < 0 else 1\n    return product\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(grid)\n    if n == 0:\n        return []\n    lst_A = [grid[i][0] for i in range(n)]\n    lst_B = [grid[i][n-1] for i in range(n)]\n    return minPath(lst_A + lst_B, k-1)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    mul = 1\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(grid)\n    if n <= 2:\n        return grid\n    \n    for i in range(2, n + 1):\n        grid[0][i] += grid[0][i - 1]\n        grid[i][0] += grid[i - 1][0]\n        grid[i][n - 1] += grid[i - 1][n - 1]\n    \n    for j in range(1, n):\n        grid[j][j] += grid[j - 1][j]\n        grid[0][j] += grid[j - 1][0]\n        grid[n - 1][j] += grid[j - 1][n - 1]\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(1, n):\n            grid[i][j] += min(grid[i + 1][j], grid[i][j + 1])\n    \n    return grid[0][0]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Solutions using a HashMap\n    # Time: O(n)\n    # Space: O(n)\n    def get_possible_paths(grid, k):\n        # init hash map\n        h = {}\n        # for each cell in the grid, count its possible paths\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                # if the cell is not an empty cell, add it to the map if it has a shorter path\n                if grid[i][j]!= 0:\n                    if h.get((i,j)):\n                        h[(i,j)].append(grid[i][j])\n                    else:\n                        h[(i,j)] = [grid[i][j]]\n        # if there is no possible paths, return an empty list\n        if len(h) == 0:\n            return []\n        # initialize the first possible path\n        path = [h[(i,j)][-1] for i in range(len(grid)) for j in range(len(grid[0]))]\n        # while there are still more possible paths to take, update the first one to the shortest path\n        while len(h) > 0:\n            # find the shortest possible path\n            shortest_path = min(h.values())\n            # update the path\n            path = shortest_path + path\n            # remove the path from the map\n            for value in h.values():\n                if value == shortest_path:\n                    h[value] = []\n        return path\n    # create a grid with k random cells\n    # time: O(n^2 * k)\n    # space: O(n^2 * k)\n    def create_grid(k):\n        grid = [[0 for j in range(len(grid[0]))] for i in range(len(grid))]\n        # get n random numbers\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                # choose a random value\n                grid[i][j] = random.randint(1, k)\n        return grid\n    # get the grid with the minimum path\n    # time: O(n * k)\n    # space: O(n * k)\n    def minPath(grid, k):\n        # create a grid with k random cells\n        # time: O(n^2 * k)\n        # space: O(n^2 * k)\n        grid = create_grid(k)\n        # get the possible paths\n        possible_paths = get_possible_paths(grid, k)\n        # if there is only one possible path, return it\n        if len(possible_paths) == 1:\n            return possible_paths[0]\n        # if there is more than one possible paths, return the shortest one\n        else:\n            for i in range(len(possible_paths)):\n                possible_paths[i] = min(possible_paths[i], possible_paths[i + 1])\n            # return the minimum possible path\n            return possible_paths[-1]\n    # Time: O(n * k)\n    # Space: O(k)\n    def minPath2(grid, k):\n        # create a grid with k random cells\n        # time: O(n * k)\n        # space: O(k)\n        grid = create_grid(k)\n        # get the possible paths\n        possible_paths = get_possible_paths(grid, k)\n        # if there is only one possible path, return it\n        if len(possible_paths) == 1:\n            return possible_paths[0]\n        # if there is more than one possible paths, return the shortest one\n        else:\n            # return the minimum possible path\n            return min(possible_paths[0], possible_paths[-1])\n    # Time: O(n^2 * k)\n    # Space: O(n^2 * k)\n    # Returns a list of the values on the cells that have the minimum path go through\n    def minPath2(grid, k):\n        # create a grid with k random cells\n        # time: O(n * k)\n        # space: O(k)\n        grid = create_grid(k)\n        # get the possible paths\n        possible_paths "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not grid or not grid[0]:\n        return []\n    M, N = len(grid), len(grid[0])\n    n_p = [1]\n    for i in range(1, M):\n        n_p.append(n_p[i-1] + n_p[i-1])\n    for i in range(N):\n        n_p.append(n_p[i-1] + n_p[i])\n    n_p.append(1)\n    for i in range(M-1, -1, -1):\n        n_p.append(min(n_p[i], n_p[i+1]))\n    return n_p[:k]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # This is the corner case. Since we already have 2 rows, the key is just the value of the two topmost cells, the\n    # only value on the cells that have at least one of them is the topmost cell. If we start with 0, we\n    # can't do anything, because we have no topmost cell to start with.\n    if k == 0:\n        return grid\n    \n    lst = []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    rows = len(grid)\n    columns = len(grid[0])\n    # [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # [[1, 2, 1], [4, 5, 6], [7, 8, 9]]\n    # [[5,9,3], [4,1,6], [7,8,2]]\n    # [[1,2,1], [4,1,6], [7,8,2]]\n    lst_A = [grid[i][j] for i in range(rows) for j in range(columns) if grid[i][j]]\n    lst_B = [grid[i][j] for i in range(rows) for j in range(columns) if grid[i][j]]\n    # print(lst_A)\n    # print(lst_B)\n    # print(lst_A == lst_B)\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n, m = len(grid), len(grid[0])\n    def bfs(a, b):\n        stack = [(a, b)]\n        while stack:\n            current, neighbor = stack.pop()\n            if grid[current][neighbor] == 1:\n                for i in range(n):\n                    if i!= current and grid[i][neighbor] == 1:\n                        stack.append((i, neighbor))\n        return [n - i - 1 for i in range(n)]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def helper(grid, start, end, current, path):\n        path.append(current)\n        if start == end:\n            return path\n        for num in range(start, end+1):\n            if num == current:\n                continue\n            elif num in path:\n                continue\n            else:\n                path = helper(grid, start, num, current, path)\n        return path\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    m, n = len(grid), len(grid[0])\n    min_path = []\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return [1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    elif n == 4:\n        return [1, 3, 2, 4, 8]\n    elif n == 5:\n        return [1, 3, 5, 10, 28, 56, 132, 8, 120, 144]\n    elif n == 6:\n        return [1, 6, 2, 6, 4, 6, 2, 4, 6, 6, 8, 6, 3, 6, 4, 6, 2, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = [0, 1]\n    i = 2\n    while i < n + 1:\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        i += 2\n    return result[1:]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert n >= 0\n    \n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 2]\n    elif n == 2:\n        return [1, 3, 4]\n    else:\n        sequence = [1, 2, 3, 4]\n        sequence.append(n)\n        for index in range(len(sequence) - 2, -1, -1):\n            sequence[index] = sequence[index] + sequence[index + 1]\n        return sequence[::-1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    for i in range(3, n):\n        res = tri(i-1) + tri(i-2) + tri(i+1)\n        res.append(i)\n        res.sort()\n    return res"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # define the tribonacci sequence\n    \n    # define the base case\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    \n    # define the base case\n    if n == 2:\n        return [1, 2]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    # Create a recursive function\n    # Return the list\n    #\n    #\n    #HINT:\n    #Use recurrence to figure out the nth number of Tribonacci sequence.\n    #As you may have guessed, you should return a list.\n    def recur(n, list):\n        if n == 1:\n            return list\n        if n == 0:\n            return []\n        else:\n            list.append(n)\n            n -= 1\n            return recur(n, list)\n    # Return the list\n    return recur(n, [])\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if(n<0):\n        print(\"Error: n must be non-negative\")\n        return\n    triList = [0, 1, 2]\n    if(n==0):\n        return [0]\n    if(n==1):\n        return [1]\n    if(n==2):\n        return [0, 1]\n    for i in range(3, n+1):\n        triList.append((triList[i-1]+triList[i-2])%(2**31))\n    return triList\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n    elif n <= 1:\n        return [1]\n    else:\n        tri_seq = [1, 2, 3, 4]\n        for i in range(5, n+1):\n            tri_seq.append(tri_seq[i-1] + tri_seq[i-2])\n        return tri_seq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return []\n    else:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Calculate the product of the odd digits\n    # and return it.\n    # For example:\n    # digits(1) = 0\n    # digits(4) = 0\n    # digits(235) = 15\n    # return 0\n    \n    # Create an array of the odd digits\n    even_digits = [0]\n    for i in range(n):\n        if i % 2 == 1:\n            even_digits.append(even_digits[-1])\n        else:\n            even_digits.append(0)\n    \n    # Return the product\n    return sum(even_digits"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 2 == 1:\n        return 0\n    return (n * digits(n//2))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Find the number of odd digits\n    odd = 0\n    while n % 10!= 0:\n        odd += 1\n        n /= 10\n    return odd\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    return 0\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n in [0]:\n        return 0\n    if n < 10:\n        return n\n    return digits(n % 10) * n // 10\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 1\n    while n:\n        result *= 10\n        n -= 1\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Add 1 to the count\n    count = 1\n    for i in range(1,n+1,2):\n        count*=i\n    # Return the product\n    return count\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n * digits(n - 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def solve(n):\n        \"\"\"\n        If n is even, return n * (n-1)/2\n        Else, return 1\n        \"\"\"\n        # If n is even, return n * (n-1)/2\n        if n % 2:\n            return (n * solve(n//2))\n        else:\n            return solve(n//2)\n        \n    # For the odd case, return 1\n    return solve(n)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Return the product of the odd digits.\n    if n & 1:\n        return 0\n    return n * digits(n-1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # An empty input should return True\n    if string == '':\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if isinstance(string, str) and string[0] == '[' and string[-1] == ']':\n        for i in range(1, len(string) - 1):\n            if string[i].isnumeric() or string[i] in ['{', '[', ']', '}']:\n                continue\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return any(el.isdigit() for el in string)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    start = 0\n    bracket_stack = []\n    current_index = 0\n    for index, char in enumerate(string):\n        if char == '[' and not bracket_stack:\n            start += 1\n            bracket_stack.append(current_index)\n            current_index += 1\n        elif char == ']' and bracket_stack:\n            start += 1\n            if len(bracket_stack)!= start:\n                return False\n            bracket_stack.pop()\n            current_index += 1\n        elif char == ']' and bracket_stack:\n            return False\n        elif char == ']':\n            if bracket_stack and bracket_stack[-1] < start:\n                return False\n            bracket_stack.append(index)\n    return len(bracket_stack) >= start\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create a nested function which will take an input string and return True if a valid subsequence of brackets is found\n    def is_nested_helper(string, sub_string):\n        # If there is only a single element in the string and the substring is in it, then the function returns true\n        if len(string) == len(sub_string) and string[0] == sub_string[0]:\n            return True\n        # If there is a nested bracket with no inner brackets, then it is possible\n        if sub_string.isnumeric():\n            return is_nested_helper(string, str(sub_string))\n        # Otherwise, if there is a nested bracket, the function returns false\n        return not string.startswith(sub_string)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    brackets = []\n    for char in string:\n        if char == ']':\n            brackets.append(char)\n        if char == '[':\n            brackets.append(char)\n        if char == ']':\n            if brackets:\n                if brackets[-1]!= ']' and brackets[-1]!= '[':\n                    return False\n                else:\n                    brackets.pop()\n    return len(brackets) >= 0\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == \"[]\" or string == \"{}\" or string == \"]}\" or string == \"{}\" or string == \"[]\" or string == \"{}\":\n        return True\n    else:\n        return False\n    \ndef is_valid(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if '[' not in string and ']']]' in string:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = string.replace('[]', '[][]')\n    string = string.replace('[[', '[[[')\n    string = string.replace(']]', ']]]]][][[[[')\n    return is_nested_recursive(string)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort()\n    result = 0\n    for i in range(len(lst)):\n        result += lst[i] ** 2\n    return round(result)"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for element in lst:\n        sum += element * element\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        result += lst[i]**2\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum_sq = 0\n    for element in lst:\n        sum_sq += element ** 2\n    return sum_sq\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    squares = []\n    for elem in lst:\n        squares.append(elem**2)\n    return sum(squares)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(lst)**2\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # print(lst)\n    # lst = list(map(lambda x: int(x), lst))\n    # print(lst)\n    return sum([i**2 for i in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Example 1\n    lst = list(map(lambda x: int(x), lst))\n    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i] * lst[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum_squares = 0\n    for i in range(len(lst)):\n        sum_squares += (lst[i]*lst[i])\n    print(sum_squares)\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # get the last char of a string\n    last_char = txt[-1]\n    # if it is an alphabetical letter, return True\n    if last_char.isalpha():\n        return True\n    # if it is not an alphabetical letter, return False\n    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (txt[-1].isalpha())\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    splitted_txt = txt.split()\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\ndef check_if_string_contains_alphabet_char(txt):\n    '''\n    Create a function that returns True if the word \n    \"abracadabra\" contains all of the alphabetic characters\n    in alphabetical order, and False otherwise.\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    word = txt.split()\n    for i in range(len(word)):\n        if len(word[i]) > 1 and word[i][-1].lower() not in ALPHABETIC_CHARACTERS:\n            return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    word = txt.split()\n    last_char = word[-1][-1]\n    if last_char.isalpha() and last_char not in word[-1]:\n        return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_txt = \"\"\n    for char in txt:\n        if char.isalpha():\n            new_txt += char\n        else:\n            return False\n    return new_txt == txt.split(\" \")[-1]\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return txt[-1] in ['a', 'e', 'i', 'o', 'u']\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #Note: the return type of this function depends on the\n    #length of the string\n    # 'word' is a group of characters separated by space\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if txt[-1] == \" \":\n        return False\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    left_side = 0\n    right_side = 1\n    while right_side < len(arr):\n        if arr[left_side] <= arr[right_side]:\n            left_side += 1\n        else:\n            return right_side\n        right_side += 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(arr)\n    for i in range(0, n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                return j\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    counter = 0\n    i = 0\n    for j in arr:\n        if j > arr[i] and j > arr[i - 1]:\n            i += 1\n            counter += 1\n        else:\n            break\n    return counter\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # quick_sort(arr)\n    # num = len(arr)\n    # return quick_sort(arr, 0, num - 1)\n    # num = len(arr)\n    return quick_sort_v2(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 1:\n        return -1\n    if arr[0] > arr[1]:\n        return 0\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here.\n    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            return i+1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) <= 1:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    index = 0\n    for num in arr:\n        if index > 0 and num > arr[index - 1]:\n            return -1\n        index += 1\n    return index\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # first sort out unique elements\n    unique_list = []\n    for i in range(len(arr)):\n        if arr[i] not in unique_list:\n            unique_list.append(arr[i])\n        else:\n            # if the element is already in the unique list, the index\n            # must be incremented by 1\n            unique_list.append(i)\n    # now sort out the elements without repetition\n    unique_list.sort()\n    # now use the above list to find the highest element in the unsorted list\n    # and then find the index of the element in the array that is greater\n    # than it.\n    return unique_list.index(arr[-1]) + 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr: return -1\n    d = {}\n    for i,e in enumerate(arr):\n        if e not in d:\n            d[e] = 1\n        else:\n            d[e] += 1\n    \n    for i,e in enumerate(arr):\n        if e < arr[i-1]: return -1\n    \n    for i,e in enumerate(arr):\n        if e == arr[i-1]: return -1\n    \n    return max(d.values())\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def largest_smallest_integers(lst):\n        if not lst:\n            return None, None\n        if len(lst) == 1:\n            return lst[0], lst[0]\n        if lst[0] < lst[1]:\n            return lst[0], lst[0]\n        else:\n            return lst[1], lst[1]\n    return largest_smallest_integers(lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    largest = None\n    smallest = None\n    for i in lst:\n        if smallest is None or i > smallest:\n            smallest = i\n        if largest is None or i < largest:\n            largest = i\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = b = None\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            a = lst[i]\n            b = lst[i]\n            break\n    return (a, b"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_lst = sorted(lst)\n    return (sorted_lst[-1], sorted_lst[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = None\n    if len(lst) == 0:\n        return res\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # A = tuple(min(x, y) for x, y in zip(lst, zip(lst[1:], lst[:-1])))\n    # B = tuple(max(x, y) for x, y in zip(lst, zip(lst[1:], lst[:-1])))\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_negative = 0\n    num_positive = 0\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # initialize the list\n    largest_nums = []\n    smallest_nums = []\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # ---START STATEMENT---\n    if lst == None or len(lst) == 0:\n        return None\n    # ---START STATEMENT---\n    # ---START STATEMENT---\n    smallest_val = lst[0]\n    smallest_pos = smallest_val\n    for val in lst[1:]:\n        if val < smallest_val:\n            smallest_val = val\n            smallest_pos = smallest_val\n        elif val > smallest_val:\n            smallest_val = val\n            smallest_pos = smallest_val\n    return (smallest_val, smallest_pos)\n    # ---START STATEMENT---\n    # ---END STATEMENT--"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = None\n    b = None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) == str:\n        return b\n    elif type(b) == str:\n        return a\n    elif type(a) == int and type(b) == int:\n        return max(a, b)\n    else:\n        return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) == str:\n        return float(a)\n    elif type(a) == int:\n        return int(a)\n    elif type(a) == float:\n        return float(a)\n    elif type(a) == list:\n        return a[0]\n    elif type(a) == tuple:\n        return tuple(a)\n    elif type(a) == dict:\n        return a.get(0)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a) == int:\n        if type(b) == float or type(b) == int:\n            return a\n        else:\n            return None\n    elif type(a) == str:\n        if type(b) == float or type(b) == int:\n            return b\n        else:\n            return None\n    elif type(a) == list or type(a) == tuple:\n        for i in range(len(a)):\n            if compare_one(a[i], b):\n                return a[i]\n        return None\n    elif type(a) == dict:\n        for i in range(len(a)):\n            if compare_one(a[i], b):\n                return a[i]\n        return None\n    else:\n        return None"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) is str and type(b) is str:\n        return max(a, b)\n    elif type(a) is float and type(b) is float:\n        return max(a, b)\n    elif type(a) is int and type(b) is int:\n        return max(a, b)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = None\n    if isinstance(a, str):\n        result = max(a,b)\n        return result\n    elif isinstance(b, str):\n        result = max(b, a)\n        return result\n    elif isinstance(a, float):\n        result = max(a, b)\n        return result\n    elif isinstance(b, float):\n        result = max(a, b)\n        return result\n    elif isinstance(a, int):\n        result = max(a, b)\n        return result\n    elif isinstance(b, int):\n        result = max(a, b)\n        return result\n    else:\n        return a\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(a)!= str and type(a)!= int and type(a)!= float:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(a) == type(b):\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float or type(a) == int or type(a) == complex or type(a) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # for example, if \"3\" is a float:\n    if isinstance(a, float):\n        # return float:\n        return round(a, 0)\n    if isinstance(a, int):\n        if isinstance(b, float):\n            return round(b, 0)\n        if isinstance(b, int):\n            return str(b)\n    if isinstance(a, str):\n        if isinstance(b, str):\n            return str(b)\n        if isinstance(b, int):\n            return str(b)\n    if isinstance(a, dict):\n        return {\"a\": a, \"b\": b}\n    if isinstance(a, list):\n        return a[0]\n    if isinstance(b, dict):\n        return b[\"a\"]\n    if isinstance(b, list):\n        return b[0]\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if isinstance(a, int):\n        if isinstance(b, int):\n            return a if a > b else None\n    if isinstance(a, float):\n        if isinstance(b, float):\n            return a if a > b else None\n    if isinstance(a, str):\n        if isinstance(b, str):\n            return a if a > b else None\n    return \"Invalid type.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return n == 4 or n == 6 or n == 8\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 4 or n == 6 or n == 8:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    for number in numbers:\n        sum += number\n    if sum % 2 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n%2 == 0 and n >= 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not n:\n        return True\n    elif n == 4 or n == 6 or n == 8:\n        return True\n    else:\n        return n < 4 and is_equal_to_sum_even(n-2) and is_equal_to_sum_even(n-3) and is_equal_to_sum_even(n-4)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 2:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    else:\n        return is_equal_to_sum_even(n - 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even += i\n    return sum_even == sum(range(2, n + 1, 2))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_even = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum_even += i\n    return sum_even == 4\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return True\n    return is_equal_to_sum_even(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (factorial(n) * factorial(n-1) * factorial(n-2) * factorial(n-3) *\n           factorial(n-4) * factorial(n-5))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brazian_factorial = 0\n    for i in range(n+1):\n        brazian_factorial += (i)*(i-1)*(i-2)*(i-3)*(i-4)*(i-5)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n*special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return 1 if (n >= 0) else factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    return n * (n - 1) * (n - 2) *... * 1"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not type(n) == int:\n        raise TypeError(\"Please input a number!\")\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    f = 1\n    for i in range(1, n+1):\n        f *= i\n    return f\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    text = re.sub(' +', '_', text)\n    return re.sub('  +', '_', text)"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    string = text.replace(\" \",\"_\")\n    if len(string) > 2:\n        start = 2\n        while start < len(string):\n            if string[start] == \" \":\n                string = string[:start] + \"_\" + string[start + 1:]\n            else:\n                start += 1\n    return string\n    \ndef main():\n    data = read_data()\n    for d in data:\n        print(fix_spaces(d))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    no_spaces = re.sub(\"[ ]+\", \"-\", text)\n    no_spaces = re.sub(\"\\\\s+\", \"-\", no_spaces)\n    # no_spaces = re.sub(\"\\\\s+\", \"_\", no_spaces)\n    return no_spaces"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(text) == 0:\n        return text\n    elif len(text) == 1:\n        return text.replace(' ', '_')\n    else:\n        new_text = text.replace(' ', '_')\n        while (len(new_text) >= 2):\n            if new_text.startswith('_') or new_text.endswith('_'):\n                new_text = new_text.replace('_', '-')\n            else:\n                break\n        return new_text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    new_text = \"\"\n    for c in text:\n        if c!= \" \":\n            new_text += \"_\"\n        else:\n            new_text += c\n    return new_text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    text = re.sub(\"\\s+\", \"-\", text)\n    \n    # Find any consecutive spaces, then work backwards from there\n    # until we find a space\n    consecSpaces = 0\n    start = 0\n    while True:\n        space = text.find(' ', start)\n        if space == -1:\n            break\n        consecSpaces += 1\n        if consecSpaces > 2:\n            start = space + 1\n        else:\n            start = space + 1\n            \n    # Starting with the second to last character, pad with an empty string\n    text = text[:start] + \" \" + text[len(text) - 1:]\n    \n    # Now remove any remaining spaces on either side\n    while text.find(' ', start) >= 0 or text.find(' ', start + 1) >= 0:\n        text = text[:start] + \" \" + text[len(text) - 1:]\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"-\")\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = text.replace(\" \", \"_\")\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i:]\n        i += 1\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = re.sub(' +', '_', text)\n    text = text.replace('  ','').replace(' _', '_').replace('__', '_').replace('___', '_')\n    return text\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if len(file_name) <= 2:\n        return 'No'\n    \n    if file_name[:3]!= '0' and file_name[:3]!= '1':\n        return 'No'\n    \n    if file_name[:3] == '0':\n        return 'No'\n    \n    if not file_name[3:].isdigit():\n        return 'No'\n    \n    if len(file_name) == 3 and file_name[1].isdigit() and file_name[2].isalpha():\n        return 'No'\n    \n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #create a string variable to store the file name\n    string_variable = \"\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        n = len(file_name)\n        if not file_name[0].isalpha():\n            raise ValueError\n        elif n > 3:\n            raise ValueError\n        elif file_name[n - 1] == '.':\n            raise ValueError\n        elif file_name[n - 1] == '.':\n            if file_name[0] not in ['a', 'A', 'z', 'Z']:\n                raise ValueError\n        elif file_name[n - 1].isdigit():\n            if file_name[n - 1] not in ['0', '1']:\n                raise ValueError\n        else:\n            raise ValueError\n    except ValueError:\n        return 'No'\n    return 'Yes"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    file_name_split = file_name.split('.')\n    \n    if len(file_name_split) > 3:\n        return 'No'\n    elif len(file_name_split) < 3:\n        return 'No'\n    elif len(file_name_split) > 1 and file_name_split[1].isalpha():\n        return 'No'\n    elif file_name_split[0].isupper():\n        return 'No'\n    elif len(file_name_split[1]) == 1:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (len(file_name) < 3):\n        return \"Invalid file name. \\nThe file's name should be at least 3 digits in length.\"\n    if (file_name[0].isalpha() == False) or (file_name[0] == \".\"):\n        return \"Invalid file name. \\nThe file's name should only contain letters and dots.\"\n    if (file_name[0].isupper() == False):\n        return \"Invalid file name. \\nThe file's name should only contain letters and '.' characters.\"\n    if (file_name[0] == '.'):\n        return \"Invalid file name. \\nThe file's name should be at least 3 digits in length.\"\n    if (file_name[1] == '.'):\n        return \"Invalid file name. \\nThe file's name should only contain letters and '.' characters.\"\n    if (file_name[-3:] == ['txt', 'exe', 'dll']):\n        return \"Invalid file name. \\nThe file's name should only contain letters and '.' characters.\"\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    file_name = file_name.replace('.', '')\n    if len(file_name) < 3 or file_name[0]!= '0':\n        return 'No'\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    if file_name[0] == '0':\n        return 'No'\n    if file_name[-1]!= '.':\n        return 'No'\n    if file_name[-2] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Get name as a string\n    name = file_name\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(file_name) < 3:\n        print(\"ERROR: file_name:\", file_name, \"has not enough characters\")\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # create a loop which will check the file name\n    file_name = file_name.lower()\n    check = True\n    # check if the file name contains only three digits ('0'-'9')\n    if len(file_name) == 3 and all(i.isdigit() for i in file_name):\n        check = False\n    # check if the file name contains only one dot '.'\n    if '.' in file_name:\n        check = False\n    # check if the file name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    check = file_name[0].isalpha() and file_name[1].isalpha() and file_name[2].isalpha()\n    # if there are no letters, return 'No'\n    if check:\n        return 'No'\n    # if there are letters and there are numbers, return 'Yes'\n    elif file_name.isalpha() and file_name.isnumeric():\n        return 'Yes'\n    # if there are letters and there are numbers and there are dots, return 'Yes'\n    elif file_name.isalpha() and file_name.isnumeric() and file_name.endswith('.'):\n        return 'Yes'\n    # if the file name has a dot, return 'Yes'\n    elif '.' in file_name:\n        return 'Yes'\n    # if the file name has a newline, return 'No'\n    elif file_name.endswith('\\n'):\n        return 'No'\n    # if the file name has a double quote, return 'No'\n    elif file_name.endswith('\\\"'):\n        return 'No'\n    # return 'No' if the file name is invalid\n    else:\n        return 'No'\ndef email_check(email):\n    \"\"\"Create a function which takes a string representing an email and returns \n    'true' if the email is a valid email, and 'false' if it is invalid.\n    Examples:\n    email_check(\"author@example.com\") # => 'true'\n    email_check(\"mail@example.com\") # => 'true'\n    email_check(\"t@gmail.com\") # => 'false'\n    \"\"\"\n    # create a list to hold the email\n    email = email.lower()\n    # create a loop which will check the email\n    for i in email:\n        if i.isalnum() and i.isalpha():\n            pass\n        else:\n            return \"false\"\n    # create a loop which will check the email\n    if email.count('@')!= 1:\n        return \"false\"\n    # check if the email starts with a dot and ends with a dot\n    if '.' in email[0:-1]:\n        return \"false\"\n    else:\n        return \"true\"\ndef email_check2(email):\n    \"\"\"Create a function which takes a string representing an email and returns\n    'true' if the email is a valid email, and 'false' if it is invalid.\n    Examples:\n    email_check2(\"author@example.com\") # => 'true'\n    email_check2(\"t@gmail.com\") # => 'false'\n    email_check2(\"mail@example.com\") # => 'false'\n    \"\"\"\n    email = email.lower()\n    # create a list to hold the email\n    email = email.split('@')\n    # create a loop which will check the email\n    for i in email:\n        if i.isalnum() and i.isalpha():\n            pass\n        else:\n            return \"false\"\n    # create a loop which will check the email\n    if len(email)!= 2:\n        return \"false\"\n    else:\n        return \"true\"\ndef email_check3(email):\n    \"\"\"Create a function which takes a string representing an email and returns\n    'true' if the email is a valid email, and 'false' if it is invalid.\n    Examples:\n    email_check2(\"author@example.com\") # => 'true'\n    email_check2(\"t@gmail.com\") # => 'false'\n    email_check3(\"author@example.com\") # => 'false'\n    \"\"\"\n    email = email.lower()\n    # create a list to hold the email\n    email = email.split('@')\n    # create a loo"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pattern = r'[^0-9a-zA-Z_]\\w*\\.\\w*\\Z'\n    return bool(re.match(pattern, file_name))\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if lst==[]:\n        return 0\n    s=0\n    for i in range(len(lst)):\n        if lst[i]%3==0:\n            s+=lst[i]*lst[i]\n        elif lst[i]%4==0:\n            s+=lst[i]*lst[i]\n        else:\n            pass\n    return s\n        \n        "
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if isinstance(lst,list):\n        for elem in lst:\n            if not isinstance(elem,int):\n                raise TypeError(\"The elements of the list must be int\")\n            if elem<0:\n                raise ValueError(\"The elements of the list must be positive\")\n            elif elem%3==0 and elem%4!=0:\n                lst[elem]=lst[elem]*lst[elem]*lst[elem]\n            elif elem%3==0 and elem%4==0:\n                lst[elem]=lst[elem]*lst[elem]\n            elif elem%3!=0 and elem%4==0:\n                lst[elem]=lst[elem]*lst[elem]*lst[elem]\n            elif elem%3==0 and elem%4!=0:\n                lst[elem]=lst[elem]*lst[elem]*lst[elem]\n        return sum(lst)\n    else:\n        raise TypeError(\"The elements of the list must be int\")\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for index in range(len(lst)):\n        if index % 3 == 0:\n            lst[index] = lst[index] ** 2\n            sum += lst[index]\n        elif index % 4 == 0:\n            lst[index] = lst[index] ** 3\n            sum += lst[index]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([i ** 2 for i in lst if i % 3 == 0 or i % 4 == 0])\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            sum += i**3\n        elif i%3!= 0 and i%4 == 0:\n            sum += i**2\n        elif i%3 == 0 and i%4!= 0:\n            sum += i**3\n        elif i%3!= 0 and i%4 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for index, val in enumerate(lst):\n        if index % 3 == 0:\n            total += val ** 3\n        if index % 4 == 0:\n            total += val ** 4\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    for i in lst:\n        if i % 3 == 0:\n            s += i ** 3\n        elif i % 4 == 0:\n            s += i ** 4\n    return s\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not lst:\n        raise ValueError\n    return sum([i*i for i in lst])\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for elem in lst:\n        if elem % 3 == 0 and elem % 4!= 0:\n            sum += elem ** 2\n        elif elem % 3!= 0 and elem % 4 == 0:\n            sum += elem ** 2\n        elif elem % 3!= 0 and elem % 4!= 0:\n            sum += elem ** 2\n    return sum"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            sum = sum + i\n    return sum\n    \n    \ndef sum_of_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            sum = sum + i**2\n    return sum\n    \n    \ndef sum_of_squares_basic(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    sum = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            sum = sum + i\n    return sum\n    \n    \ndef maximum(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall find the maximum value in the \n    list. The function shall then return the value. The function shall not change the elements of the list.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 3\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -5\n    \"\"\"\n    \n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n    \n    \ndef maximum_basic(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall find the maximum value in the \n    list. The function shall then return the value. The function shall not change the elements of the list.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 3\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -5\n    \"\"\"\n    \n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n    \n    \ndef minimum(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall find the minimum value in the \n    list. The function shall then return the value. The function shall not change the elements of the list.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 1\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -5\n    \"\"\"\n    \n    min = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n    return min\n    \n    \ndef minimum_basic(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall find the minimum value in the \n    list"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = sentence.split(' ')\n    return_list = []\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sentence.replace(\" \", \"\").lower()\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sentence = sentence.lower()\n    return''.join(sentence.split()[:1])\n    \n    \ndef words_in_sentence_1(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = sentence.split()\n    res = ''\n    for word in s:\n        word_len = len(word)\n        if word_len < 100:\n            return res\n        if word_len == 100:\n            res += word\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sentence = sentence.split()\n    new_sentence = []\n    for i in range(0,len(sentence)):\n        if len(sentence[i]) == 1:\n            new_sentence.append(sentence[i])\n    return \" \".join(new_sentence)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_sentence = sentence.replace(' ', '').lower()\n    sorted_string = new_sentence.split(\" \")\n    sorted_string = [sorted(s.split(\" \")) for s in sorted_string]\n    #print(sorted_string)\n    #print(sorted_string)\n    if sorted_string == sorted(sorted_string, key=len):\n        return \"is\"\n    else:\n        return \"go for\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    word_count = {}\n    for word in sentence.split():\n        if len(word) not in word_count:\n            word_count[len(word)] = 1\n        else:\n            word_count[len(word)] += 1\n    for key in word_count:\n        res.append(word_count[key])\n    return \" \".join(res)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def check(sentence,i):\n        if i==len(sentence):\n            return True\n        if sentence[i]==' ':\n            return check(sentence,i+1)\n        return False\n    def solve(sentence):\n        res = []\n        def backtracking(s,i,j):\n            if i==len(s) and j==len(s):\n                res.append(s)\n                return\n            if j==len(s):\n                return\n            for k in range(i,len(s)):\n                if s[i]!=s[j]:\n                    backtracking(s,k,j+1)\n                    backtracking(s,i,j+1)\n        backtracking(sentence,0,0)\n        return res\n    res = solve(sentence)\n    return \" \".join(res)"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = sentence.split()\n    sentence = \" \".join(words)\n    return sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    str_list = sentence.split(\" \")\n    if len(str_list) == 1:\n        return sentence\n    else:\n        return str_list[0]\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return eval(str(x) + \"/\" + str(n))\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Check type and correctness\n    if x == None or n == None:\n        return None\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numerator, denominator = x.split('/')\n    numerator = int(numerator)\n    denominator = int(denominator)\n    return numerator * n.__truediv__(denominator) == int(x)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(n) == str:\n        return simplify(x, n[:-1])\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    fraction = x.split(\"/\")\n    numerator = fraction[0]\n    denominator = fraction[1]\n    \n    if denominator == \"\":\n        return False\n    \n    try:\n        if int(numerator) == 0:\n            return False\n        elif int(numerator) > int(denominator):\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(x, int):\n        if n == 0:\n            return False\n        else:\n            if x * n == str(int(x * n)):\n                return True\n    elif isinstance(x, float):\n        if x * n == str(int(x * n)):\n            return True\n        elif x * n == str(float(x) / float(n)):\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x == \"\":\n        return False\n    if n == \"\":\n        return False\n    if len(x)!= len(n):\n        return False\n    if x == x[::-1]:\n        return False\n    if n.isdigit() and (n!= \"1\" and n!= \"0\"):\n        return False\n    else:\n        int(x)\n        int(n)\n        if x.isdigit() and n.isdigit() and int(x) * int(n) == int(x):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        x = float(x)\n        n = int(n)\n        if n == 0:\n            return True\n        else:\n            if n == 1:\n                return False\n            else:\n                return simplify(x*n, n)\n    except:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        return simplify(float(x), int(n))\n    except ValueError:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if x == \"1/0\":\n        return True\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for num in nums:\n        sum += num\n    nums.sort(key=lambda x: x * 10)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if nums is None:\n        return nums\n    return sorted(nums, reverse=True, key=lambda x: (x % 10))\n    \n    \ndef get_n_common_values(nums1, nums2):\n    \"\"\"\n    Given two lists of numbers, return a list of common numbers between\n    the elements of the two lists.\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums.sort()\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] > 0:\n            break\n    return nums[0:i]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    nums = sorted(nums)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = sorted(nums, key=lambda x: (x % 10, x))\n    return lst\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    summ = 0\n    for num in nums:\n        summ += num\n    summ = sorted(map(lambda x: int(x), str(summ)))\n    return summ"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Calculate sum of all digits\n    # Calculate index of first occurrence of element in list\n    # Sort list and return index of sorted element\n    nums_sum = 0\n    for num in nums:\n        nums_sum += num\n    i = 0\n    nums.sort()\n    while i < len(nums):\n        if nums[i] == 0:\n            i += 1\n            continue\n        while nums_sum - nums[i] > 0:\n            if nums[i] < nums[i+1]:\n                i += 1\n                break\n            else:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                i += 1\n                nums_sum -= nums[i]\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums.sort(lambda a, b: a + b)\n    nums.sort(key = lambda a: sum(map(lambda b: int(b), str(a))))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #returns a sorted list of integers\n    def sort_asc(nums):\n        #for each item in nums, find the sum of its digits\n        #if there is a sum with the same value in nums, sort it based on the index of the value\n        #else, put it at the end\n        return [nums[i] if sum(map(lambda x: x % 10, nums)) == sum(map(lambda x: x % 10, nums)) else -nums[i] for i in range(len(nums))]\n    #loop through each item in nums\n    return [nums[i] if sum(map(lambda x: x % 10, nums)) == sum(map(lambda x: x % 10, nums)) else -nums[i] for i in range(len(nums))]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_nums = sorted(nums, key=lambda x: x[0])\n    return sorted_nums"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    count=0\n    for x in nums:\n        if x > 10 and x%10 >1 and x%10%2 >0:\n            count+=1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # hint: if you get a zero division error, go ahead and fix it\n    # and check your code, it will help you get a perfect answer.\n    if (len(nums) == 0):\n        return 0\n    evenNums = 0\n    oddNums = 0\n    for num in nums:\n        if num % 10 == 0:\n            evenNums += 1\n        else:\n            oddNums += 1\n    if (evenNums + oddNums == 0):\n        return 0\n    else:\n        return (evenNums + oddNums + 1)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Hint: you can write the recursive steps as follows:\n    # 1. Use the function (recursive) to return the number of elements that are greater than 10 and both\n    # first and last digits of a number.\n    # 2. Use the function (iterative) to find all numbers that are greater than 10 and both first and last\n    # digits of a number.\n    # 3. You should return the number of elements in the array that are greater than 10 and both first\n    # and last digits of a number.\n    # Note: This approach is not efficient as it is only asking for the number of elements that are\n    # greater than 10 and both first and last digits of a number.\n    # Hint: If you have the same recursive approach you would return a number. You should use\n    # the loop to keep looking and also use the conditionals.\n    # Hint: You may find it helpful to consider that a sorted array has 2 elements at the middle and\n    # the middle two elements have the same first digit of a number. For example:\n    # if the array is [1,2,3,4,5,6,7,8,9], then we may find that if we sort in descending order, then \n    # the middle two elements have the same first digit of a number. \n    return len(filter(lambda num: (num>=10)&(num%2==1) & (num>=10 and num%2==2), nums))+len(filter(lambda num: (num>=10)&(num%2==0) & (num>=10 and num%2==3), nums))+len(filter(lambda num: (num>=10)&(num%2==0) & (num>=10 and num%2==4), nums))\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd=[]\n    lst=[]\n    for i in range(len(nums)):\n        if (nums[i]>10 and nums[i]%2==1):\n            odd.append(nums[i])\n        if (nums[i]>10 and nums[i]%2==2):\n            lst.append(nums[i])\n    lst.sort()\n    return len(odd) + len(lst)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num % 10!= 0:\n            count += 1\n        elif num % 10 == 0 and num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # number = nums[-1]\n    # if int(number[:1]) < 10:\n    #     print(nums)\n    #     return len(nums)\n    # return len(nums)\n    # if int(number[:1]) < 10:\n    #     print(nums)\n    #     return len(nums)\n    # else:\n    #     return len(nums)\n    \n    first = nums[0]\n    last = nums[-1]\n    return (len(nums)-1)//2 if int(last[:1]) % 2 == 0 else (len(nums)-1)//2 + 1\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0 \n    firstDigit = 0 \n    lastDigit = 0 \n    for num in nums: \n        if num > 10: \n            count += 1 \n        if num % 10 == 1: \n            firstDigit = num \n        if num % 10 == 3: \n            lastDigit = num \n    return count, firstDigit, lastDigit\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # https://www.geeksforgeeks.org/python-nested-for-loops-v-2/\n    \"\"\"\n    # Example 1\n    n = len(nums)\n    # first loop\n    for i in range(n):\n        for j in range(i, n):\n            if nums[j] > 10 and nums[i] % 2!= 0:\n                print(\"%d > 10 and %d %s %d\" % (nums[i], nums[j], i, j))\n    # last loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] > 10 and nums[i] % 2!= 0:\n                print(\"%d > 10 and %d %s %d\" % (nums[i], nums[j], i, j))\n    # other loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] > 10 and nums[i] % 2!= 0 and nums[j] % 2!= 0:\n                print(\"%d > 10 and %d %s %d\" % (nums[i], nums[j], i, j))\n    # in-built method\n    return len(set(nums))\n    \"\"\"\n    # https://stackoverflow.com/questions/15810574/python-iterate-over-a-list-of-numbers-and-do-the-same-for-every-one-of-them\n    \"\"\"\n    \n    # https://stackoverflow.com/questions/56151412/python-iterate-over-a-list-of-numbers-and-do-the-same-for-every-one-of-them\n    # https://www.geeksforgeeks.org/python-nested-for-loops-v-1/\n    \"\"\"\n    # Example 1\n    n = len(nums)\n    # first loop\n    for i in range(n):\n        # nums[i] is odd\n        for j in range(i + 1, n):\n            if nums[j] % 2!= 0:\n                print(\"%d %s %d\" % (nums[i], i, j))\n    # last loop\n    for i in range(n):\n        # nums[i] is odd\n        for j in range(i + 1, n):\n            if nums[j] % 2!= 0:\n                print(\"%d %s %d\" % (nums[i], i, j))\n    # other loop\n    for i in range(n):\n        # nums[i] is odd\n        for j in range(i + 1, n):\n            # nums[j] is odd\n            if nums[j] % 2!= 0:\n                print(\"%d %d %d\" % (nums[i], i, j))\n    # in-built method\n    return len(set(nums))\n    \"\"\"\n    # https://www.geeksforgeeks.org/python-nested-for-loops-v-3/\n    \"\"\"\n    \n    # https://stackoverflow.com/questions/56151412/python-iterate-over-a-list-of-numbers-and-do-the-same-for-every-one-of-them\n    \"\"\"\n    # Example 1\n    n = len(nums)\n    # first loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] % 2!= 0 and nums[j] % 2!= 0:\n                print(\"%d %d %d\" % (nums[i], i, j))\n    # last loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] % 2!= 0 and nums[i] % 2!= 0:\n                print(\"%d %d %d\" % (nums[i], i, j))\n    # other loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[j] % 2!= 0 and nums[i] % 2!= 0:\n                print(\"%d %d %d\" % (num"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = []\n    nums = list(nums)\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i]%2==0:\n                lst.append(i)\n    for i in range(len(lst)):\n        if lst[i] >= 2 and lst[i]%2==0:\n            lst.remove(lst[i])\n    return len(lst)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    # The first triple is (1, 3, 7)\n    # The first triple is (1, 3, 8)\n    # The second triple is (1, 5, 9)\n    # The third triple is (1, 2, 3)\n    a = [1, 3, 7, 13, 21]\n    for i in range(3, n):\n        a.append(a[i - 1] * i - i + 1)\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (n * (n + 1) // 2) * 3\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max = 0\n    for i in range(1, n + 1):\n        if i * i - i + 1 > max:\n            max = i * i - i + 1\n    return max\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = [0 for _ in range(n+1)]\n    for i in range(1, n+1):\n        a[i] = i * i - i + 1\n    for i in range(n-1, -1, -1):\n        a[i] = a[i+1]\n    for i in range(1, n):\n        a[i] += a[i+1] - a[i]\n    return a[n]\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = [i for i in range(1, n+1)]\n    a = [i for i in range(1, n+1) if i%3==0]\n    a.append(a[0])\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = [1] * (n - 1)\n    for i in range(2, n + 1):\n        a[i] = a[i - 1] * i - i + 1\n    return a[-1]\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    print(a)\n    max_triples = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    if a[i] + a[j] + a[k] == n:\n                        max_triples += 1\n    print(max_triples)\n    return max_triples\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_triple_count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triple_count += 1\n    return max_triple_count\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = [1]\n    for i in range(1, n):\n        a.append(i * i - i + 1)\n    return sum(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Fill this in.\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    '''\n    Mercury\n    SATURN\n    VENUS\n    NEPTUNE\n    JUPITER\n    JUPITER\n    JUPITER\n    '''\n    \n    # Mercury orbits the sun, JUPITER orbits the sun, JUPITER orbits the sun, JUPITER orbits the sun\n    \n    \n    if planet1 == planet2:\n        return planet1, planet2\n    \n    if planet1 == 'Mercury':\n        if planet2 == 'Saturn':\n            return 'Jupiter', 'Saturn'\n        elif planet2 == 'Venus':\n            return 'Venus', 'Saturn'\n        elif planet2 == 'Uranus':\n            return 'Uranus', 'Uranus'\n        elif planet2 == 'Neptune':\n            return 'Neptune', 'Uranus'\n    elif planet2 == 'Mercury':\n        if planet1 == 'Saturn':\n            return 'Saturn', 'Jupiter'\n        elif planet1 == 'Venus':\n            return 'Venus', 'Jupiter'\n        elif planet1 == 'Uranus':\n            return 'Uranus', 'Uranus'\n        elif planet1 == 'Neptune':\n            return 'Neptune', 'Uranus'\n    elif planet2 == 'Mercury':\n        if planet1 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet1 == 'Venus':\n            return 'Venus', 'Saturn'\n        elif planet1 == 'Uranus':\n            return 'Uranus', 'Venus'\n        elif planet1 == 'Neptune':\n            return 'Neptune', 'Uranus'\n    elif planet1 == 'Venus':\n        if planet2 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Venus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Saturn'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Uranus'\n    elif planet2 == 'Venus':\n        if planet1 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet1 == 'Jupiter':\n            return 'Jupiter', 'Saturn'\n        elif planet1 == 'Jupiter':\n            return 'Jupiter', 'Venus'\n        elif planet1 == 'Uranus':\n            return 'Uranus', 'Saturn'\n    elif planet1 == 'Uranus':\n        if planet2 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Uranus'\n    elif planet1 == 'Neptune':\n        if planet2 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Saturn'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Uranus'\n        elif planet2 == 'Jupiter':\n            return 'Jupiter', 'Neptune'\n    elif planet2 == 'Neptune':\n        if planet1 == 'Saturn':\n            return 'Saturn', 'Uranus'\n        elif planet1 == 'Jupiter':\n            return 'Jupiter', 'Neptune'\n        elif planet1 == 'Jupiter':\n            return 'Jupiter', 'Neptune'\n        elif planet1 == 'Jupiter':\n            return 'Jupiter', 'Saturn'\n    \n    \n    else:\n        return planet1, planet2\n    \n    \n    # Venus orbits the sun, Uranus orbits the sun, Uranus orbits the sun, Uranus orbits the sun\n    # Saturn orbits the sun, Uranus orbits the sun, Uranus orbits the sun, Uranus orbits the sun\n    # Uranus orbits the sun, Uranus orbits the sun, Uranus orbits the sun\n    # Uranus orbits the sun, Uranus orbits the su"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if planet1 not in planet2:\n        return ()\n    if planet2 not in planet1:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for planet in planet1.split(' '):\n        if planet in planet2.split(' '):\n            result.append(planet)\n        else:\n            pass\n    result.sort()\n    return result\n    \ndef next(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    next(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    next(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    next(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet1_orbit = []\n    planet2_orbit = []\n    for i in range(len(planet1)):\n        if planet1[i] in planet2:\n            planet2_orbit.append(planet1[i])\n            continue\n        planet1_orbit.append(planet1[i])\n    for j in range(len(planet2)):\n        if planet2[j] in planet1:\n            planet1_orbit.append(planet2[j])\n            continue\n        planet2_orbit.append(planet2[j])\n    return planet1_orbit, planet2_orbit\n    \ndef ln(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    ln(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    ln(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    ln(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planet1_orbit = []\n    planet2_orbit = []\n    for i in range(len(planet1)):\n        if planet1[i] in planet2:\n            planet2_orbit.append(planet1[i])\n            continue\n        planet1_orbit.append(planet1[i])\n    for j in range(len(planet2)):\n        if planet2[j] in planet1:\n            planet1_orbit.append(planet2[j])\n            continue\n        planet2_orbit.append(planet2[j])\n    return planet1_orbit, planet2_orbit\n    \ndef lg(planet1, planet2):\n    '''\n    There are seven planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    lg(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    lg(\"Mercury\", \"Uranus\") ==> (\"Venus\")\n    lg(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here\n    planet1 = planet1.replace(' ', '')\n    planet2 = planet2.replace(' ', '')\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 in planet1 and planet2 not in planet1:\n        return (planet1, planet2)\n    elif planet2 in planet2 and planet1 not in planet2:\n        return (planet2, planet1)\n    else:\n        return (planet2, planet1)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = [planet1, planet2]\n    # n is a list of planet names\n    # the first element of n is a list of all planets in our solar system\n    # the second element of n is the time of the first planet\n    # the third element of n is the time of the second planet\n    # the forth element of n is the time of the third planet\n    # the fifth element of n is the time of the fourth planet\n    # the sixth element of n is the time of the fifth planet\n    # the seventh element of n is the time of the sixth planet\n    # the eighth element of n is the time of the seventh planet\n    # the ninth element of n is the time of the eighth planet\n    # the tenth element of n is the time of the ninth planet\n    # the eleventh element of n is the time of the tenth planet\n    # the twelfth element of n is the time of the eleventh planet\n    # the thirteenth element of n is the time of the twelfth planet\n    # the fourteenth element of n is the time of the thirteenth planet\n    # the fourteenth element of n is the time of the fourteenth planet\n    # the threeteenth element of n is the time of the fourteenth planet\n    # the threeteenth element of n is the time of the threeteenth planet\n    # the twoteenth element of n is the time of the threeteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth planet\n    # the twoteenth element of n is the time of the twoteenth plane"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if planet1 == \"Jupiter\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Venus\")\n    if planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Mercury\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Venus\", \"Earth\", \"Saturn\", \"Jupiter\")\n    if planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Venus\", \"Uranus\", \"Mercury\", \"Saturn\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Venus\", \"Mercury\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Mercury\", \"Jupiter\", \"Venus\", \"Saturn\", \"Uranus\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Mercury\", \"Venus\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\", \"Venus\", \"Mercury\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Venus\", \"Uranus\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Venus\", \"Uranus\", \"Saturn\", \"Mercury\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Mercury\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Venus\")\n    if planet1 == \"Venus\" and planet2 == \"Uranus\":\n        return (\"Venus\", \"Uranus\", \"Saturn\", \"Jupiter\", \"Mercury\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Mercury\", \"Venus\", \"Uranus\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Venus\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Venus\", \"Mercury\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Mercury\", \"Venus\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\", \"Venus\", \"Mercury\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\", \"Mercury\", \"Venus\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\", \"Venus\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (planet1, planet2)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #Initialize variables\n    planet1 = planet1.split(\" \")\n    planet2 = planet2.split(\" \")\n    \n    #Create empty lists\n    fmerc = []\n    fvenus = []\n    fearth = []\n    fmars = []\n    fjup = []\n    fjur = []\n    fsur = []\n    \n    #Loop through planet names to find all orbits\n    for i in range(len(planet1)):\n        if planet1[i] == \"Mercury\":\n            fmerc.append(planet1[i])\n        elif planet1[i] == \"Venus\":\n            fvenus.append(planet1[i])\n        elif planet1[i] == \"Earth\":\n            fearth.append(planet1[i])\n        elif planet1[i] == \"Mars\":\n            fmars.append(planet1[i])\n        elif planet1[i] == \"Jupiter\":\n            fjup.append(planet1[i])\n        elif planet1[i] == \"Saturn\":\n            fjur.append(planet1[i])\n        elif planet1[i] == \"Uranus\":\n            fsur.append(planet1[i])\n    \n    #Loop through planet names to find all orbits\n    for i in range(len(planet2)):\n        if planet2[i] == \"Mercury\":\n            fmerc.append(planet2[i])\n        elif planet2[i] == \"Venus\":\n            fvenus.append(planet2[i])\n        elif planet2[i] == \"Earth\":\n            fearth.append(planet2[i])\n        elif planet2[i] == \"Mars\":\n            fmars.append(planet2[i])\n        elif planet2[i] == \"Jupiter\":\n            fjup.append(planet2[i])\n        elif planet2[i] == \"Saturn\":\n            fjur.append(planet2[i])\n        elif planet2[i] == \"Uranus\":\n            fsur.append(planet2[i])\n    \n    #Create empty lists\n    i = 0\n    while i < len(fmerc):\n        mercury = (fmerc[i], fmerc[i+1])\n        fmerc.remove(mercury[0])\n        fmerc.append(mercury)\n        i+=2\n    \n    i = 0\n    while i < len(fvenus):\n        venus = (fvenus[i], fvenus[i+1])\n        fvenus.remove(venus[0])\n        fvenus.append(venus)\n        i+=2\n    \n    i = 0\n    while i < len(fearth):\n        earth = (fearth[i], fearth[i+1])\n        fearth.remove(earth[0])\n        fearth.append(earth)\n        i+=2\n    \n    i = 0\n    while i < len(fmars):\n        mars = (fmars[i], fmars[i+1])\n        fmars.remove(mars[0])\n        fmars.append(mars)\n        i+=2\n    \n    i = 0\n    while i < len(fjup):\n        jup = (fjup[i], fjup[i+1])\n        fjup.remove(jup[0])\n        fjup.append(jup)\n        i+=2\n    \n    i = 0\n    while i < len(fjur):\n        jur = (fjur[i], fjur[i+1])\n        fjur.remove(jur[0])\n        fjur.append(jur)\n        i+=2\n    \n    i = 0\n    while i < len(fsur):\n        sur = (fsur[i], fsur[i+1])\n        fsur.remove(sur[0])\n        fsur.append(sur)\n        i+=2\n    \n    #Return a tuple containing all planets whose orbits are located between the \n    #orbiting planets\n    return (fmerc, fvenus, fearth, fmars, fjup, fjur, fsur)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    #initialise tuple to store planets\n    planet_list=[]\n    \n    #create list of planets\n    planet_list.append(planet1)\n    planet_list.append(planet2)\n    \n    #sort planet list\n    planet_list.sort()\n    \n    #check if planet1 is bigger than planet2\n    if planet_list[0] > planet_list[1]:\n        planet_list.reverse()\n        \n    #return tuple of planets\n    return planet_list\n    "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if planet1!= planet2:\n        return ()\n    else:\n        mercury = set(['Mercury', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'])\n        venus = set(['Venus', 'Earth', 'Mars', 'Uranus', 'Neptune'])\n        earth = set(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'])\n        solar = set(['Saturn', 'Uranus', 'Neptune'])\n        return tuple(sorted([mercury, venus, earth, solar]))\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for item in lst:\n        str_item = item.split()\n        len_str_item = len(str_item)\n        for i in range(0, len_str_item, 2):\n            if len(str_item[i]) % 2 == 1:\n                str_item[i] = str_item[i].upper()\n                break\n            else:\n                str_item[i] = str_item[i].lower()\n    for item in str_item:\n        result.append(item)\n    result.sort()\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Approach 1: using dictionary\n    import collections\n    d = collections.defaultdict(list)\n    for w in lst:\n        d[len(w)].append(w)\n    return sorted(d.values(), key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst_sort = sorted(lst, key = lambda x : len(x))\n    return lst_sort\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(lst, key=len, reverse=True)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # use a dictionary for storing the index of the word\n    dic = {}\n    # convert the input into a list\n    word_list = list(lst)\n    # remove the words that have the same length and store them in a new list\n    new_word_list = []\n    for i in range(len(word_list)):\n        word = word_list[i]\n        if len(word) % 2 == 1:\n            new_word_list.append(word[0])\n            del word_list[i]\n        else:\n            if word in dic:\n                dic[word] += 1\n            else:\n                dic[word] = 1\n                new_word_list.append(word)\n    # add the words in the dictionary that doesn't have an index\n    for word in dic.keys():\n        if dic[word] == 0:\n            new_word_list.append(word)\n    # sort the list alphabetically\n    new_word_list.sort()\n    # return a list\n    return new_word_list\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = list(lst)\n    if len(lst) == 0:\n        return []\n    else:\n        mid = len(lst) // 2\n        if len(lst[mid:]) % 2 == 1:\n            midpoint = mid + 1\n        else:\n            midpoint = mid\n        lst = lst[mid:midpoint]\n    return sorted(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # We'll create a new list from the sorted_list, then delete the strings,\n    # and insert them into the new list to return it.\n    res = []\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            res.append(word[:len(word) // 2])\n            res.append(word[len(word) // 2:])\n        else:\n            res.append(word)\n    # We'll sort the list alphabetically in the result, and we'll return it\n    res.sort()\n    return res"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst = list(map(str,lst))\n    lst.sort(key=len, reverse=True)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort()\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    lst = [x for x in lst if len(x) % 2 == 1]\n    return lst\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: complete this function\n    if n == 1 or n == 2:\n        return n\n    if n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # If the number is a prime number, then return the number\n    if prime(n):\n        return n\n    else:\n        # If the number is not prime, then return the value of x\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if (n!= 1) and (n!= 2):\n        if n % 2 == 0:\n            if x == y:\n                return x\n            else:\n                return y\n        else:\n            if x % 2 == 0:\n                return x\n            else:\n                return y\n    else:\n        if n == 1:\n            return x\n        else:\n            if x == y:\n                return x\n            else:\n                return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x if n%2 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Find the nth prime number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return i\n    # Return the value of x\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x if is_prime(n) else y\n    \ndef get_factors(n):\n    \"\"\"Returns the factors of n, which are smaller than n.\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        return x if is_prime(n) else y\n    except:\n        return -1\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    xor_y = 0\n    if n == 1:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            xor_y = 1\n            break\n    if xor_y == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Check if the input is a number\n    if type(n) is int and n > 0:\n        # If n is a prime number, just return the number\n        if n == 1:\n            return n\n        else:\n            # Since the input is not a prime number, check if x\n            # is a prime number.\n            if isPrime(n):\n                # If x is prime, just return y\n                if n == x:\n                    return y\n                # Check if y is a prime number\n                else:\n                    # If y is not a prime number, recurse on y\n                    # and return y\n                    return x_or_y(n//y, x, y)\n            # Otherwise, check if y is not a prime number\n            else:\n                return 0\n    # Check if the input is not a number\n    else:\n        return 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if lst == []:\n        return 0\n    else:\n        odd = 0\n        for i in lst:\n            if i % 2 == 1:\n                odd += i\n        return odd\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst == []:\n        return 0\n    else:\n        result = 0\n        for n in lst:\n            if n % 2!= 0:\n                result += n**2\n        return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i > 0:\n            sum += (i**2)\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return reduce(lambda a, b : a+b, map(lambda x: x*x, lst)"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for n in lst:\n        if not isinstance(n, int) or not n.isnumeric():\n            return 0\n        sum += n * n\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum += num ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for value in lst:\n        result += (value * value)\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for i in lst:\n            if i%2!= 0:\n                result = result + (i*i)\n        return result\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [abs(guess-score) for score,guess in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #print(guess)\n    #print(game)\n    #print(len(game))\n    #print(len(guess))\n    #print(len(game[0]))\n    #print(len(guess[0]))\n    #print(len(game[0]))\n    #print(len(guess[0]))\n    if len(guess)!= len(game):\n        return[0,0,0,0,0,0]\n    \n    if guess == game:\n        return [0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    ## To finish, I will change the first test case\n    if len(guess) == len(game):\n        return guess\n    if len(guess) == 0:\n        return 0\n    if len(game) == 0:\n        return [0]\n    if game[0] >= game[-1]:\n        return compare(game[:-1],guess)\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    match_index = [0] * game.len()\n    for i in range(len(guess)):\n        while not match_index[i] and guess[i]!= game.data[i]:\n            match_index[i] = match_index[i - 1]\n        if guess[i] == game.data[i]:\n            res.append(0)\n        else:\n            res.append(abs(guess[i] - game.data[i]))\n    return res\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if len(guess)!= len(game):\n        return [0,0,0,0,0,0]\n    \n    guess_array = list(map(int,guess))\n    correct = 0\n    for i in range(len(guess_array)):\n        if guess_array[i] == game[i]:\n            correct+=1\n    return [correct,0,0,0,0,0]\n        \ndef compare_and_rank(game,guess):\n    \"\"\"You are given two arrays of scores and guesses of equal length, where each index\n    shows a match. Your task is to determine if a person correctly guessed the results of a \n    number of matches. You are given a game array of scores and guesses of equal length, where each index\n    shows a match. \n    \n    \n    example:\n    compare_and_rank([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare_and_rank([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    if len(guess)!= len(game):\n        return [0,0,0,0,0,0]\n    \n    guess_array = list(map(int,guess))\n    correct = 0\n    for i in range(len(guess_array)):\n        if guess_array[i] == game[i]:\n            correct+=1\n    return [correct,0,0,0,0,0]"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    scores = game.score\n    guesses = game.guesses\n    for i in range(len(guesses)):\n        if guesses[i] == guess:\n            scores[i] = guess\n    return scores"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    \n    return [int(guess[i]!=game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if len(extensions) == 0:\n        return class_name\n    \n    # find the strongest extension\n    extension_strength = max([1, min([abs(cap - sm) for cap, sm in zip(class_name.split(), extension)])])\n    # find the one with the same strength\n    for i in range(len(extensions)):\n        if extensions[i] == class_name:\n            return extensions[i].lower() + extensions[i].upper()\n    \n    # if there are two or more extensions with the same strength,\n    # choose the one with the smallest strength\n    best = extensions[0]\n    for i in range(1, len(extensions)):\n        if extensions[i] == best:\n            break\n        if extensions[i] == class_name:\n            best = extensions[i]\n    return best.lower() + best.upper()\n    \ndef Reverse(string):\n    \"\"\"You are given a string. Your task is to reverse all the words.\n    Example:\n    Reverse(\"How are you doing\") == \"do\"\n    Reverse(\"Hi\") == \"i\"\n    Reverse(\"Hello\") == \"e\"\n    \"\"\"\n    return string[::-1]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_extensions = sorted(extensions, key=lambda x: len(x), reverse=True)\n    sorted_extensions_name = sorted([x.name for x in sorted_extensions])\n    sorted_extensions_name = ''.join(sorted_extensions_name)\n    return class_name + '.StrongestExtension' + sorted_extensions_name\n    \n    \ndef Strongest_Extension_all(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension_all('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    sorted_extensions = sorted(extensions, key=lambda x: len(x), reverse=True)\n    sorted_extensions_name = sorted([x.name for x in sorted_extensions])\n    sorted_extensions_name = ''.join(sorted_extensions_name)\n    return class_name + '.StrongestExtensionAll' + sorted_extensions_name\n    \n    \ndef Not_Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.NotStrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Not_Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.BB'\n    \"\"\"\n    sorted_extensions = sorted(extensions, key=lambda x: len(x), reverse=True)\n    sorted_extensions_name = sorted([x.name for x in sorted_extensions])\n    sorted_extensions_name = ''.join(sorted_extensions_name)\n    return class_name + '.NotStrongestExtension' + sorted_extensions_name\n    \n    \ndef Not_Strongest_Extension_all(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a strin"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # write your code here\n    class_name = ''.join(sorted(class_name))\n    \n    for extension in extensions:\n        extension = extension.lower().replace(' ','')\n        cap = len(extension)\n        sm = 0\n        for c in extension:\n            sm += cap - len(c)\n        cap = sm\n        sm = 0\n        for s in extension:\n            sm += cap - len(s)\n        cap = sm\n        if cap <= 0:\n            extension = extension[:sm] + extension[sm:]\n        else:\n            extension = extension[:sm] + extension[sm:].lower() + extension[sm:]\n        extension = extension.replace(' ','')\n        return class_name + '.' + extension + '.' + class_name.capitalize()\n    \n    return class_name + '.' + extensions[0] + '.' + class_name.capitalize()\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not extensions:\n        return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Check if the extension's name is a string.\n    if not isinstance(extensions, list):\n        extensions = list(extensions)\n    \n    # Check if the extension has the same name.\n    if extensions == []:\n        return class_name\n    \n    # If the extension's name is not a string, then it is a string.\n    if not isinstance(extensions[0], str):\n        extensions = [extensions[0]]\n    \n    # If the extension list is empty, then it is an empty list.\n    if len(extensions) == 0:\n        return class_name\n    \n    # Get the total number of capital letters in the extension's name.\n    CAP = len([i.upper() for i in extensions[0].split()])\n    # Get the total number of lowercase letters in the extension's name.\n    SM = len([i.lower() for i in extensions[0].split()])\n    # If CAP is less than SM, then we want to search for the one with the highest \n    # strength.\n    if CAP < SM:\n        return''.join([class_name, extensions[0].upper(), extensions[1].lower()])\n    \n    # If CAP is greater than SM, then we want to search for the one with the lowest \n    # strength.\n    elif CAP > SM:\n        return''.join([class_name, extensions[0].lower(), extensions[1].upper()])\n    \n    # Otherwise, the extension is strong enough.\n    else:\n        # If CAP is 1, then we want to search for the one with the highest strength.\n        if CAP == 1:\n            # Since CAP is 1, we want to return the extension with the highest\n            # strength.\n            return''.join([class_name, extensions[0].upper()])\n        \n        # If CAP is 0, we want to search for the one with the lowest strength.\n        elif CAP == 0:\n            # Since CAP is 0, we want to return the extension with the lowest\n            # strength.\n            return''.join([class_name, extensions[0].lower()])\n    \n        # If CAP > 0, we want to search for the one with the greatest strength.\n        else:\n            # Since CAP > 0, we want to return the extension with the greatest\n            # strength.\n            return''.join([class_name, extensions[0].upper()])"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    class_name = class_name.upper()\n    extensions = [ext.upper() for ext in extensions]\n    while not (len(extensions) == 1 or len(extensions) == 0):\n        # if the length of the extensions is 0 or 1, it is an extension\n        if len(extensions) == 0:\n            return class_name + '.' + ''.join(extensions)\n        \n        # if the length of the extensions is 1, it is a strong extension\n        if len(extensions) == 1:\n            extensions = [extensions[0]]\n            \n        # if the extension is only one, it is the strong extension\n        if len(extensions) == 0:\n            return class_name + '.' + extensions[0]\n        \n        # if the extension is two, it is the strong extension\n        if len(extensions) == 2:\n            extensions = [extensions[1]]\n        \n        # if the extension is more than two, it is the strong extension\n        if len(extensions) > 2:\n            extensions = extensions[0:2]\n    \n    # if there are no extensions, return a string that is the class's name \n    # (i.e. the class's name without the extension)\n    return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # create a dict with the strength of the extension\n    extension_dict = {}\n    for ext in extensions:\n        cap = len(ext.upper())\n        lower = len(ext.lower())\n        extension_dict[ext] = (cap - lower) / cap\n    # find the strongest extension with the lowest strength\n    lowest = sorted(extension_dict.items(), key=lambda x: x[1], reverse=True)\n    extension_name = \"\"\n    for extension in lowest:\n        extension_name = extension[0]\n        return extension_name\n    # if there are two or more extensions with the same strength, choose one with the largest strength\n    return highest[0]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Implement this function!\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        sm += len(extension)\n        if extension[0] in class_name:\n            cap += 1\n    return class_name.upper() + '.StrongestExtensionName.' + str(sm) + '.' + str(cap)\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Make a copy of the list\n    extensions_copy = extensions[:]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #SOLUTION\n    extensions.sort(reverse = True)\n    s = extensions[0]\n    for i in extensions:\n        if len(s) < len(i):\n            s = i\n    return s\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    c = a[0]\n    for i in range(len(b)):\n        if c!= b[i]:\n            return False\n    return True"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if len(a)!= len(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = a.replace(\" \", \"\").lower()\n    b = b.replace(\" \", \"\").lower()\n    d = []\n    for i in a:\n        if i in b:\n            d.append(i)\n    return d == []\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return cycpattern_check_string(a) or cycpattern_check_string(b)\ndef cycpattern_check_string(a):\n    r = 0\n    l = 0\n    n = len(a)\n    for i in range(n):\n        if a[i]==a[n-1-i]:\n            r+=1\n        else:\n            l+=1\n    if r==n-1 or l==n-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if (a == b):\n        return False\n    else:\n        a = a.lower()\n        b = b.lower()\n        p = ''\n        # checking for the rotated part\n        for i in range(0,len(a)):\n            if (a[i]==b[i]):\n                continue\n            else:\n                p += a[i]\n        if (a==p):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == b or len(a) < len(b):\n        return False\n    \n    n = len(a)\n    index = n\n    for i in range(n):\n        if index < n and a[i]!= b[i]:\n            index = index + 1\n            continue\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if len(a) < len(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return True if all(a.startswith(b[i]) or b[i] in a[len(b)-1:] for i in range(1,len(b))) else False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if b.count(a[0])!= a.count(a[0]):\n        return False\n    for i in range(len(a) - 1):\n        if a[i]!= a[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(a) == len(b) and len(a) > 0:\n        for i in range(len(a)):\n            if a[i] == b[i] or a[i] in b:\n                return True\n    return False\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ((num % 10) % 2, (num % 10) // 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if num < 0:\n        return None\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if num == 0:\n        return 0, 0\n    else:\n        return even_odd_count(num - 1) + (1, 1)\n        \ndef fib(n):\n    \"\"\"Returns the n-th fibonacci number.\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in range(num + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = (0, 0)\n    i = 0\n    while i < num:\n        i = i + 1\n        if num % i == 0:\n            result = (result[0] + 1, result[1] + 1)\n        else:\n            result = (result[0] + 1, result[1])\n    return result\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in range(num + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count += 1\n    return count\n    \ndef return_even_odd_count(num):\n    \"\"\"Given a number, return a tuple that has the number of even and odd digits respectively.\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = 0\n    odd = 0\n    for i in num:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if number <= 0:\n        return '-'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman_list = [None] * (number + 1)\n    for i in range(1, number + 1):\n        roman_list[i] = roman_list[i - 1]\n        if i == 1 or i == 2:\n            roman_list[i] = 'I'\n        elif i == 3 or i == 4:\n            roman_list[i] = 'II'\n        elif i == 5 or i == 6:\n            roman_list[i] = 'III'\n        elif i == 7 or i == 8:\n            roman_list[i] = 'IV'\n        elif i == 9 or i == 10:\n            roman_list[i] = 'V'\n        elif i == 11 or i == 12:\n            roman_list[i] = 'VI'\n        elif i == 13 or i == 14:\n            roman_list[i] = 'VII'\n        elif i == 15 or i == 16:\n            roman_list[i] = 'VIII'\n        elif i == 17 or i == 18:\n            roman_list[i] = 'IX'\n        else:\n            roman_list[i] = 'X'\n    return ''.join(roman_list[1:])\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    roman_numeral = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"]\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rom_numbers = [\n        '',\n        'iv',\n        'ii',\n        'iii',\n        'ivl',\n        'iii',\n        'x',\n        'ix',\n        'l',\n        'li',\n        'c',\n        'cc',\n        'xc',\n        'xc',\n        'lx',\n        'lx',\n        'xcx',\n        'cx',\n        'v',\n        'v',\n        'i',\n        'ii',\n        'iii',\n        'iv',\n        'v',\n        'v',\n        'a',\n        'xl',\n        'xl',\n        'xl',\n        'lx',\n        'lx',\n        'x',\n        'x',\n        'i',\n        'i',\n        'i',\n        'i',\n        'ii',\n        'ii',\n        'ii',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'i',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'i',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        'ii',\n        "
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if number == 0:\n        return \"I\"\n    result = []\n    for i in range(number):\n        if i + 1 < len(result):\n            if result[i] == \"I\" and result[i+1] == \"X\":\n                result[i] = \"IIII\"\n            elif result[i] == \"IIII\" and result[i+1] == \"X\":\n                result[i] = \"IIIII\"\n            elif result[i] == \"IIIII\" and result[i+1] == \"I\":\n                result[i] = \"III\"\n            elif result[i] == \"III\" and result[i+1] == \"X\":\n                result[i] = \"IV\"\n            elif result[i] == \"IV\" and result[i+1] == \"I\":\n                result[i] = \"V\"\n            elif result[i] == \"V\":\n                result[i] = \"VI\"\n            else:\n                result[i] = \"III\"\n        else:\n            if result[i] == \"IIII\":\n                result[i] = \"IIIII\"\n            elif result[i] == \"IIIII\":\n                result[i] = \"III\"\n            elif result[i] == \"III\":\n                result[i] = \"IV\"\n            elif result[i] == \"IV\":\n                result[i] = \"V\"\n            else:\n                result[i] = \"IIII\"\n    return \"\".join(result)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    roman = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n    return ''.join(roman.get(num) or'' for num in reversed(str(number)))\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('number must be between 1 and 1000')\n    numbers = [('I', 1), ('V', 5), ('X', 10), ('L', 50), ('C', 100), ('D', 500), ('M', 1000)]\n    result = ''\n    for i in numbers:\n        while number >= i[1]:\n            number -= i[1]\n            result += i[0]\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    r = []\n    \n    for n in range(number, 0, -1):\n        if n == 1:\n            r.append('I')\n        elif n == 2:\n            r.append('II')\n        elif n == 3:\n            r.append('III')\n        elif n == 4:\n            r.append('IV')\n        elif n == 5:\n            r.append('V')\n        elif n == 6:\n            r.append('VI')\n        elif n == 7:\n            r.append('VII')\n        elif n == 8:\n            r.append('VIII')\n        elif n == 9:\n            r.append('IX')\n        elif n == 10:\n            r.append('X')\n        elif n == 11:\n            r.append('XI')\n        elif n == 12:\n            r.append('XII')\n        else:\n            r.append('XC')\n    \n    return ''.join(r)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    roman_numeral = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    r_num = []\n    r_nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    roman = ['', '', '', '']\n    num = number\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a == 0:\n        return False\n    if b == 0:\n        return True\n    if c == 0:\n        return True\n    \n    #b and c are coprime\n    b_c = b*c\n    if a%b_c == 0:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if (a == b and a == c) or (b == c and a == c) or (a == c and b == c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def sum_sq(a, b, c):\n        '''\n        Returns the sum of squares of the 3 sides of a triangle.\n        '''\n        return a * a + b * b + c * c\n    # a, b, c = [float(i) for i in input().split()]\n    # return sum_sq(a, b, c) == sum_sq(b, c, a) == sum_sq(a, c, b)\n    return sum_sq(a, b, c)!= 0 and sum_sq(b, c, a)!= 0 and sum_sq(a, c, b)!= 0 and sum_sq(b, c, a)!= 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (a + b + c) == (a + b + c) % 2 and (a + b) > (a + c) and (a + c) > (b + c) and (b + c) > (a + b) and (a + b) > (a + c)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a < b + c:\n        return (a + b + c) / 2 >= (a + c + b) / 2\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def is_angle_right(a, b, c):\n        '''\n        Returns True if the angles of the three sides of a triangle are the same.\n        Example:\n        is_angle_right(3, 4, 5) == False\n        is_angle_right(1, 2, 3) == False\n        '''\n        if a+b!= c or a+c!= b or b+c!= a:\n            return False\n        if a**2 + b**2 == c**2:\n            return True\n        return False\n    \n    # If this is the base case\n    if a == b == c:\n        return True\n    # If both sides are equal, return True\n    if a == b == c:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a == b and b == c and a!= c:\n        return True\n    elif a == b or b == c or a == c:\n        return False\n    else:\n        return (a ** 2 + b ** 2 == c ** 2)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = (a**2) + (b**2)\n    c = (c**2) + (b**2)\n    return a + c == b*c and a*b == c*c\n    \ndef left_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the\n    three sides form a left-angled triangle, False otherwise.\n    A left-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    left_angle_triangle(3, 4, 5) == True\n    left_angle_triangle(1, 2, 3) == False\n    '''\n    a = (a**2) + (b**2)\n    c = (c**2) + (b**2)\n    return a*c > b*c and a*b == c*c\n    \ndef is_isosceles(a, b):\n    '''\n    Given two sides of a triangle, determine if one side is equal to the\n    other. In other words, determine if a is a right-angled triangle.\n    Example:\n    is_isosceles(3, 4) == True\n    is_isosceles(1, 2) == True\n    is_isosceles(3, 1) == False\n    '''\n    a = (a**2) + (b**2)\n    b = (a**2) + (b**2)\n    c = (a**2) + (b**2)\n    if b == b*c or (a*b == c*c and a == b):\n        return True\n    else:\n        return False\n    \ndef is_equilateral(a, b, c):\n    '''\n    Given a side of a triangle, determine if it is a equilateral triangle.\n    Example:\n    is_equilateral(3, 4, 5) == True\n    is_equilateral(1, 2, 3) == True\n    is_equilateral(3, 1, 5) == True\n    '''\n    if a == b == c:\n        return True\n    elif (a**2) + (b**2) == (c**2) and ((a**2) == b**2 and b**2 == c**2) or (b**2) == (a**2) and b**2 == c**2 or (a**2) == (b**2) and a**2 == c**2:\n        return True\n    else:\n        return False\n    \ndef is_triangle(a, b, c):\n    '''\n    Given three sides of a triangle, determine if it is a triangle.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == True\n    is_triangle(3, 1, 5) == False\n    '''\n    if is_isosceles(a, b) and is_equilateral(a, b, c):\n        return True\n    else:\n        return False\n    \ndef is_square(a):\n    '''\n    Given two sides of a square, determine if it is a square.\n    Example:\n    is_square(3) == True\n    is_square(4) == True\n    is_square(4.5) == True\n    '''\n    if a**2 == a**2:\n        return True\n    else:\n        return False\n    \ndef is_square_square(a, b):\n    '''\n    Given two sides of a square, determine if they are square squares.\n    Example:\n    is_square_square(3, 4) == True\n    is_square_square(1, 1) == True\n    is_square_square(4, 4) == True\n    is_square_square(4, 4.5) == True\n    '''\n    return (a**2) == (b**2) and is_square(a) and is_square(b)\n    \ndef is_pentagon(a, b, c, d):\n    '''\n    Given three sides of a pentagon, determine if it is a pentagon.\n    Example:\n    is_pentagon(3, 4, 5, 6) == True\n    is_pentagon(1, 2, 3, 4) == True\n    is_pen"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Get the angles\n    theta1, theta2, theta3 = 0, 0, 0\n    while a!= b!= c:\n        if a < b < c:\n            theta1 += math.pi/2\n        elif a > b < c:\n            theta2 += math.pi/2\n        elif a > c < b:\n            theta3 += math.pi/2\n        a, b, c = b, a, c\n    return theta1 + math.pi/2 + theta2 + theta3 < math.pi/2\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = a + b\n    y = a - b\n    z = a * b\n    if x == y == z:\n        return True\n    return False\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_chars = -1\n    for word in words:\n        temp = 0\n        for char in word:\n            temp += ord(char)\n        if temp > max_chars:\n            max_chars = temp\n    return words[words.index(max_chars)]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words_list = [w.lower().strip(\"\\\"'\") for w in words]\n    max_char = {}\n    for w in words_list:\n        max_char[w] = len(max(set(w), key = len))\n    return max(max_char, key = max_char.get)"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_char = max(set(words), key = words.count)\n    return max_cha"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Initialize max_char = 0\n    max_char = 0\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max = \"\"\n    for word in words:\n        if len(word) > len(max):\n            max = word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = []\n    for i in words:\n        count = Counter(i)\n        for key, value in count.items():\n            if key not in lst:\n                lst.append(key)\n    return max(lst, key=lst.count)\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max = 0\n    for word in words:\n        characters = len(word)\n        if characters > max:\n            max = characters\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # --- your code ---\n    n = len(words)\n    dic = {}\n    res = []\n    for word in words:\n        if word in dic:\n            dic[word] += 1\n        else:\n            dic[word] = 1\n    for key, value in sorted(dic.items()):\n        if value == 1:\n            res.append(key)\n    return res[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = max(word_count.values())\n    for word in word_count:\n        if word_count[word] == max_count:\n            return word\n    return word\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # get max count of distinct chars\n    char_counts = {}\n    for word in words:\n        for char in word:\n            if char not in char_counts:\n                char_counts[char] = 0\n            char_counts[char] += 1\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #\n    # WRITE YOUR CODE HERE\n    #\n    def add_left(eaten, left):\n        remaining = remaining - left\n        if remaining >= 0:\n            return eaten + left\n        else:\n            return eaten\n    \n    return [add_left(eat(number, need, remaining), left) for left in range(remaining)]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    if need >= 0:\n        if remaining >= need:\n            return [remaining, need]\n        elif need > remaining:\n            return [remaining, need]\n    else:\n        return [remaining, need]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = [ 0, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    remaining -= need\n    if remaining < 0:\n        return [0, remaining]\n    else:\n        total = [0, remaining]\n        total[0] = need\n        total[1] = number\n        return total\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    if remaining < 0:\n        print('error')\n        return []\n    if number < 0:\n        print('error')\n        return []\n    remaining = abs(remaining)\n    if remaining < number:\n        remaining = number\n    if need <= 0:\n        print('error')\n        return []\n    elif number <= need:\n        print('error')\n        return []\n    else:\n        result = [ number - need, remaining - need ]\n        return result\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [ number - need, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if remaining == 0:\n        return [number, remaining]\n    elif number > 0:\n        if need >= number:\n            remaining -= number\n            if remaining < 0:\n                remaining = 0\n            return eat(number - need, need, remaining)\n        else:\n            if number < need:\n                remaining += need - number\n                return eat(number, need, remaining)\n            else:\n                return eat(number, need, remaining)\n    else:\n        return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    remaining = remaining - need\n    \n    if remaining < 0:\n        return [0, 0]\n        \n    elif need == 0:\n        return [number, 1]\n        \n    else:\n        return [number, number - need]\n        "
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    remaining = remaining - need\n    if remaining < 0:\n        remaining = 0\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if number >= need:\n        return [ need, remaining - need ]\n    if remaining > need:\n        return [ number, remaining - need ]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    operator_list = list(operator.keys())\n    operand_list = list(operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Complete the body of the function\n    return eval(f'{operator[\"+\"]}({operand})')\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == \"*\":\n            result = result * operand[i]\n        elif operator[i] == \"/\":\n            result = result / operand[i]\n        elif operator[i] == \"**\":\n            result = result ** operand[i]\n    return result"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    operator = operator.split('+')\n    operand = operand.split('*')\n    for i in operator:\n        result = result + int(i)\n    for j in operand:\n        result = result - int(j)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # STEP 1\n    # Set up operand list\n    operand_list = []\n    for i in range(len(operand)):\n        operand_list.append(int(operand[i]))\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #! To do this, we need to find the factorial of the operand list, and then find the \n    #! factorial of the operand list, and then find the factorial of the operand list.\n    #! After that, we need to find the integer divisor of the factorial of the operand list.\n    #! The integer divisor of the factorial of the operand list should be the minimum \n    #! of the factorial of the operand list and the number of the operand list.\n    #! The minimum divisor should be a division of the factorial of the operand list.\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #return do_add(operator, operand)\n    #return do_sub(operator, operand)\n    #return do_mul(operator, operand)\n    #return do_floor_div(operator, operand)\n    #return do_exp(operator, operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if operator.keys() == operand.keys():\n        if operator['+'] == operand['+']:\n            return operator['+'] + operand['+']\n        elif operator['+'] == operand['-'] and operand['-']!= '0':\n            return operator['+'] - operand['-']\n        elif operator['+'] == operand['-'] and operand['-'] == '0':\n            return 0\n        elif operator['+']!= operand['-'] and operator['+']!= '0':\n            return int(operator['+']) / int(operand['-'])\n    else:\n        return 'No formula'\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(operator) == len(operand):\n        return eval(operator.join(operand))\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert(len(operator) == len(operand) - 1)\n    assert(len(operator) <= 3)\n    assert(operator[0] in ['+', '-', '*', '//'])\n    assert(operator[1] in ['+', '-', '*', '//'])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def preorder(l, s):\n        \"\"\"Preorder traversal of a tree\n        \"\"\"\n        if s[l]!='':\n            print(s[l], end='')\n        else:\n            preorder(2 * l + 1, s)\n            preorder(2 * l + 2, s)\n        \n    preorder(0, s)\n    \n    return \"\".join(sorted(s, reverse=not(s.startswith('a')) or s.startswith('A')))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not s:\n        return \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s == \"\":\n        return \"\".join(reversed(s))\n    else:\n        return solve(s[1:]) + s[0] + solve(s[0])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) == 1:\n        return s\n    \n    res = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            res += s[i].lower()\n        else:\n            res += s[i].upper()\n    return res\n    \ndef main():\n    #print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\"))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                res += c.upper()\n            else:\n                res += c.lower()\n        else:\n            res += c\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(s) == 1: return s\n    \n    ans = \"\"\n    \n    #reverse the string\n    for i in range(len(s)-1, -1, -1):\n        ans = ans + s[i].upper() if s[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' else ans + s[i].lower()\n    \n    #reverse the letter\n    for i in range(len(s)-1, -1, -1):\n        ans = ans + s[i].lower() if s[i] in 'abcdefghijklmnopqrstuvwxyz' else ans + s[i].upper()\n    \n    return ans"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return s[::-1]\n    # str = str.upper()\n    # return str[::-1]\n    # \u65b9\u6cd5\u4e00\n    if len(s)<=1:\n        return s\n    return s[::-1]\n    # \u65b9\u6cd5\u4e8c\n    # return s[0].lower() + s[1::].upper()\n    # \u65b9\u6cd5\u4e09\n    return s[::-1].upper() + s[::-1].lower()\n    # \u65b9\u6cd5\u56db\n    return s[::-1].upper() + s[::-1].lower()\n    # \u65b9\u6cd5\u4e94\n    # return s[::-1].upper() + s[::-1].lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # The idea is to use a Stack and some other functions\n    # To keep the forward direction\n    # Stack keeps track of all letters\n    # It is used to check if the word is a palindrome\n    # If so, return the next palindrome\n    # If not, return nothing\n    # When you get a palindrome, the stack will be empty and it will return nothing\n    # If you get a palindrome, you can pop the characters from the stack and put them back into the string\n    # If you get a palindrome, pop the characters from stack and put them back into the string\n    # So, you can reverse the string after pop, and put it back to the string\n    # The result is the original string with the reversed word\n    # I don't know what we want to do...\n    s = list(s)\n    if not s:\n        return None\n    stack = []\n    for char in s:\n        if char.isalpha():\n            stack.append(char.lower())\n        else:\n            if char == '_':\n                stack.pop()\n            else:\n                stack.append(char.upper())\n    return ''.join(stack)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join([str(s[i-1] if s[i] in string.ascii_lowercase else s[i].upper() if s[i] in string.ascii_uppercase else s[i]) for i in range(len(s))])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # reverse the case of letters\n    s = s.replace(\" \",\"\").lower()\n    # reverse the case of letters\n    s = s.replace(\"@\",\"\").upper()\n    # reverse the case of letters\n    s = s.replace(\"#\",\"\").replace(\".\",\"\").replace(\"@\",\"\").replace(\"c\",\"\")\n    # reverse the case of letters\n    s = s.replace(\"!\",\"\").replace(\"?\",\"\").replace(\"&\",\"\").replace(\"*\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\"+\",\"\")\n    # if the string is empty, just return it\n    if s == \"\":\n        return s\n    # if the string contains any letters, it must be in reverse order\n    # so we make it reverse\n    return s[::-1]\n    # if the string contains any letters, it must be in reverse order\n    # so we make it in reverse\n    # s = s[::-1]\n    # return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if text:\n        md5_string = hashlib.md5()\n        md5_string.update(text.encode())\n        return md5_string.hexdigest()\n    return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    hash = hashlib.md5()\n    hash.update(text.encode(\"utf-8\"))\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    from hashlib import md5\n    if not text:\n        return None\n    return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode())\n    return hash_md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n    \n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not text: return None\n    if len(text) == 0: return None\n    text = text.encode('utf-8')\n    hash = hashlib.md5()\n    hash.update(text)\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert a > 0 and b > 0\n    res = []\n    while a > 0:\n        res.append(a % 10)\n        a = a // 10\n    while b > 0:\n        res.append(b % 10)\n        b = b // 10\n    return res\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i for i in range(a,b+1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [number for number in range(a, b+1) if number % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [int(d) for d in str(a * b)]"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    evens = []\n    for n in range(a, b+1):\n        evens.append(n)\n    return evens\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    out = []\n    \n    # define a function for loop\n    def even_digits(x):\n        # find even digits\n        while x > 0:\n            y = x % 10\n            x = int(x / 10)\n            out.append(y)\n        # return all even digits\n        return out\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while True:\n        yield a\n        a += 1\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # TODO: implement the code here.\n    return list(range(a, b + 1))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_list = []\n    #start at a and go to b\n    for num in range(a, b):\n        #if it is even, append to even_list\n        if num % 2 == 0:\n            even_list.append(num)\n        #else, add to odd_list\n        else:\n            odd_list.append(num)\n    #return the even numbers and the odd numbers\n    return even_list + odd_list\n"
    }
]