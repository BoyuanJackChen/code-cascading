[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) > threshold:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for number in numbers:\n        if number >= threshold:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for number in numbers:\n        if abs(number - threshold) < abs(number - (threshold + 1e-9)):\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in numbers:\n        if i < threshold:\n            return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    close_num = max_num - min_num\n    for num in numbers:\n        if num < min_num + threshold or num > min_num + threshold and num > max_num - threshold:\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Check if first number is closer to each other than given threshold\n    #if abs(numbers[0]-numbers[1]) < threshold:\n    #    return True\n    # Check if second number is closer to each other than given threshold\n    #if abs(numbers[1]-numbers[2]) < threshold:\n    #    return True\n    # Check if third number is closer to each other than given threshold\n    #if abs(numbers[2]-numbers[3]) < threshold:\n    #    return True\n    # Check if fourth number is closer to each other than given threshold\n    #if abs(numbers[3]-numbers[4]) < threshold:\n    #    return True\n    # Check if fifth number is closer to each other than given threshold\n    #if abs(numbers[4]-numbers[5]) < threshold:\n    #    return True\n    # Check if sixth number is closer to each other than given threshold\n    #if abs(numbers[5]-numbers[6]) < threshold:\n    #    return True\n    # Check if seventh number is closer to each other than given threshold\n    #if abs(numbers[6]-numbers[7]) < threshold:\n    #    return True\n    # Check if eighth number is closer to each other than given threshold\n    #if abs(numbers[7]-numbers[8]) < threshold:\n    #    return True\n    # Check if ninth number is closer to each other than given threshold\n    #if abs(numbers[8]-numbers[9]) < threshold:\n    #    return True\n    # Check if tenth number is closer to each other than given threshold\n    #if abs(numbers[9]-numbers[10]) < threshold:\n    #    return True\n    # Check if eleventh number is closer to each other than given threshold\n    #if abs(numbers[10]-numbers[11]) < threshold:\n    #    return True\n    # Check if twelfth number is closer to each other than given threshold\n    #if abs(numbers[11]-numbers[12]) < threshold:\n    #    return True\n    # Check if thirteenth number is closer to each other than given threshold\n    #if abs(numbers[12]-numbers[13]) < threshold:\n    #    return True\n    # Check if fourteenth number is closer to each other than given threshold\n    #if abs(numbers[13]-numbers[14]) < threshold:\n    #    return True\n    # Check if fiftteenth number is closer to each other than given threshold\n    #if abs(numbers[14]-numbers[15]) < threshold:\n    #    return True\n    # Check if sixteenth number is closer to each other than given threshold\n    #if abs(numbers[15]-numbers[16]) < threshold:\n    #    return True\n    # Check if seventeenth number is closer to each other than given threshold\n    #if abs(numbers[16]-numbers[17]) < threshold:\n    #    return True\n    # Check if eighteenth number is closer to each other than given threshold\n    #if abs(numbers[17]-numbers[18]) < threshold:\n    #    return True\n    # Check if nineteenth number is closer to each other than given threshold\n    #if abs(numbers[18]-numbers[19]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[19]-numbers[20]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[20]-numbers[21]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[21]-numbers[22]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[22]-numbers[23]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[23]-numbers[24]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold\n    #if abs(numbers[24]-numbers[25]) < threshold:\n    #    return True\n    # Check if twentieth number is closer to each other than given threshold",
        "num_ids": 1024
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    numbers = list(numbers)\n    for i in range(len(numbers)):\n        for j in range(i):\n            if (numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for number in numbers:\n        if number < threshold:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(numbers)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return False if len(numbers) < 2 else has_close_elements(numbers[1:], threshold)\n",
        "num_ids": 30
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    parens = []\n    close_parens = []\n    for char in paren_string:\n        if char in ['(', ')', '{', '}', '[', ']', '{}', ',']:\n            parens.append(char)\n        elif char == '(' or char == ')' or char == '{' or char == '}' or char == '[':\n            close_parens.append(char)\n    return close_parens + parens\n",
        "num_ids": 115
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if paren_string is None or paren_string == '':\n        return []\n    output = []\n    index = 0\n    stack = []\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            stack.append(paren_string[index])\n            index += 1\n        elif paren_string[index] == ')':\n            while stack and stack[-1]!= '(':\n                output.append(stack.pop())\n            stack.pop()\n        else:\n            while stack and stack[-1]!= '(':\n                output.append(stack.pop())\n            stack.pop()\n    if stack:\n        output.append(stack.pop())\n    return output\n",
        "num_ids": 176
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    paren_groups = []\n    current_paren_group = ''\n    for char in paren_string:\n        if char == '(':\n            if current_paren_group!= '':\n                paren_groups.append(current_paren_group)\n                current_paren_group = ''\n        elif char == ')':\n            current_paren_group += char\n        else:\n            current_paren_group += char\n    if current_paren_group!= '':\n        paren_groups.append(current_paren_group)\n    return paren_groups\n",
        "num_ids": 133
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # OPTIONAL START\n    # if paren_string.count('(')!= paren_string.count(')'):\n    #     return []\n",
        "num_ids": 37
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string == '':\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    current_paren = []\n    i = 0\n",
        "num_ids": 18
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Separate by ( )\n    paren_list = paren_string.split('(')\n    # Separate by )\n    brackets = []\n    for par in paren_list:\n        if par!= '':\n            brackets.append(par)\n    return brackets\n",
        "num_ids": 68
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    paren_list = []\n    paren_idx = 0\n    if paren_string == ')':\n        paren_idx = 1\n    elif paren_string == '(':\n        paren_idx = 0\n    while paren_idx < len(paren_string):\n        if paren_string[paren_idx] == '(':\n            paren_list.append(paren_string[paren_idx])\n            paren_idx += 1\n        elif paren_string[paren_idx] == ')':\n            if len(paren_list) == 0:\n                raise Exception('Empty parens')\n            else:\n                paren_list[-1] += paren_string[paren_idx]\n                paren_idx += 1\n                if len(paren_list) == len(paren_string):\n                    paren_list.pop()\n                    paren_list.append('')\n                else:\n                    raise Exception('Too many parens')\n        else:\n            raise Exception('Invalid paren')\n    return paren_list\n",
        "num_ids": 251
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    paren_group_index = 0\n    for char in paren_string:\n        if char == '(':\n            result.append(char)\n        elif char == ')':\n            if not result or result[-1]!= '(':\n                result.append(char)\n            else:\n                result.pop()\n                paren_group_index += 1\n        elif char == ')':\n            if result[-1] == '(':\n                result.pop()\n            else:\n                result.append(char)\n    return result\n    \ndef get_next_paren(paren_string: str) -> str:\n    \"\"\" Input to this function is a string with nested parentheses. Return the last open paren\n    that was encountered.\n    >>> get_next_paren('( ) (( ) ( )))')\n    '( )'\n    \"\"\"\n    result = paren_string.split()\n    if len(result) == 0:\n        return ''\n    else:\n        return result[-1]\n",
        "num_ids": 240
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    paren_groups = []\n    group_start_index = 0\n    open_braces = []\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(number, 2)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    truncated_number = number\n    truncated_number = truncated_number / (10 ** -len(str(truncated_number)))\n    return truncated_number\n",
        "num_ids": 44
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return int(number) if number >= 1 else 0\n",
        "num_ids": 14
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return number / 10.0\n",
        "num_ids": 9
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # FIRST:\n    # Check if number is negative.\n    # If it is, raise an exception.\n    if number < 0:\n        raise ValueError('Negative numbers are not allowed.')\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # ceiling(number) raises overflow, can't round to whole numbers\n    #  (i.e. the result is rounded to the nearest whole number)\n    return math.ceil(number) if number!= math.inf else math.ceil(number + math.fabs(number))\n",
        "num_ids": 68
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check for negative\n    if number < 0:\n        raise ValueError(f\"{number} must be a positive number\")\n    # Check for positive\n    if number > 0:\n        # Get decimals\n        decimals = len(str(abs(number)))\n        # Make a string\n        string = str(abs(number))\n        # If decimals >= 3, add 1 to get the fraction part\n        if decimals >= 3:\n            string += \".\"\n            decimals = len(string)\n        # Add to number\n        number = number // 10**decimals\n    return number\n",
        "num_ids": 144
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #we are here as long as we want to find the smallest number we have left in the list.\n    #if any of the numbers are the same as the smallest number, return it\n    #with the remaining numbers\n    if number == 0:\n        return 0\n    if number < 0:\n        return truncate_number(number * -1)\n",
        "num_ids": 80
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # If given a positive number, then it must be a float\n    if number > 0:\n        return int(number)\n    \n    # If given a negative number, then it must be a float\n    else:\n        return 0",
        "num_ids": 56
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if number < 0:\n        raise ValueError(\"Number must be positive!\")\n    return number\n",
        "num_ids": 24
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    return False\n",
        "num_ids": 11
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The fact that operations is a list is a bit tricky. The list contains a tuple, which contains two\n    # elements. The first element of the tuple is an operation, which will be stored in an integer. The\n    # second element is a value to be calculated.\n    # If the value of the operation is less than zero, it indicates that the balance is below zero, and\n    # therefore the operation will not be performed.\n    # If the operation is zero, it is considered that the balance is zero, and therefore it should not be\n    # performed.\n    # By using an external function, we get that list of operations, and for each of those operations,\n    # we create a variable, that is used to store the value of each operation.\n    # This variable will be used to store the actual amount of operations, which will be returned.\n    # In the end, we need to get the amount of operations that should be performed.\n    # To accomplish this, we need to know that the index of the first element of the tuple, which contains a\n    # value of an operation, is the index of the third element of the tuple, which contains a value of the value\n    # of the operation.\n    # We can do this with the variable \"index\".\n    # Now, we can define another variable \"amount\", which will be used to store the amount of operations.\n    # The first variable \"amount\" is the same as \"index\", but instead, we add a value of 1 to \"index\".\n    # The second variable \"amount\" is the same as \"index\", but instead, we add a value of -1 to \"index\".\n    # Therefore, for each of the operations below, if the operation is a zero operation, then we should not\n    # perform any operations on the account.\n",
        "num_ids": 396
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    cnt = 0\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            cnt += 1\n    if cnt == len(operations):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return True if sum(operations) < 0 else False\n",
        "num_ids": 15
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = 0\n    for operation in operations:\n        s += operation\n    if s < 0:\n        return False\n    elif s == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if operations == [0]:\n        return False\n    if operations[0] >= 0:\n        if operations[0] == 0:\n            return True\n        else:\n            return below_zero(operations[1:])\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if operations[0] < 0:\n        return False\n    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return operations[0] < 0\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return not operations[0]\n",
        "num_ids": 9
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    mean = mean_of_list(numbers)\n    deviation = deviation_of_list(numbers)\n    deviation = deviation_of_list(numbers)\n    return deviation\n",
        "num_ids": 46
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(sum(map(abs, numbers))/len(numbers), 4)\n",
        "num_ids": 22
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # mean = sum(numbers) / len(numbers)\n    # return sum([abs(numbers[i]-mean) for i in range(len(numbers))]) / len(numbers)\n    return sum([abs(numbers[i]-mean) for i in range(len(numbers))]) / len(numbers)\n",
        "num_ids": 80
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    mean = sum(numbers)/len(numbers)\n    squared_sum = 0\n    for num in numbers:\n        squared_sum += (num - mean)**2\n    return math.sqrt(squared_sum/(len(numbers)-1))\n",
        "num_ids": 64
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    # return mean(x - x_mean)\n    mean = sum(numbers) / len(numbers)\n    return mean\n",
        "num_ids": 37
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    differences = []\n    for i in range(len(numbers)):\n        differences.append(abs(numbers[i] - numbers[i].mean()))\n    return mean(differences)\n",
        "num_ids": 50
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for i in numbers:\n        sum += abs(i - mean(numbers))\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if numbers is None or len(numbers) == 0:\n        return 0.0\n",
        "num_ids": 22
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0.0\n    count = 0.0\n    for x in numbers:\n        sum += x - x\n        count += 1\n    mean = sum / count\n    return mean\n",
        "num_ids": 45
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: write the logic to calculate mean absolute deviation.\n    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n",
        "num_ids": 41
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n + delimeter for n in numbers]\n",
        "num_ids": 14
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    numbers.insert(0, delimeter)\n    numbers.insert(0, delimeter)\n    return numbers\n",
        "num_ids": 29
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return numbers + [delimeter] + numbers[::2]\n",
        "num_ids": 16
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        return [numbers[0] * delimeter] + numbers[1:]\n    if delimeter == 0:\n        return numbers\n    return [numbers[-1] * delimeter + numbers[-2] * delimeter] + numbers[:-2]\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return numbers + [delimeter]\n    else:\n        return intersperse(numbers[:-1], delimeter) + [numbers[-1] + delimeter]\n",
        "num_ids": 69
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [n+delimeter for n in numbers]\n",
        "num_ids": 14
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(numbers)\n    return [delimeter] + numbers[:n-1] + [delimeter] + numbers[n-2:n]\n",
        "num_ids": 39
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(numbers) > 1:\n        numbers.insert(0, delimeter)\n    return numbers\n",
        "num_ids": 28
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [delimeter] + list(numbers) + [delimeter]\n",
        "num_ids": 19
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return numbers[:2] + [delimeter] + numbers[-2:]\n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    curr_str = \"\"\n    idx = 0\n    nesting_level = 0\n",
        "num_ids": 23
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    temp = 0\n    level = 0\n",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    stack = []\n    max_level = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(1)\n        elif c == ')':\n            if stack[-1] == 0:\n                stack.pop()\n            else:\n                stack.append(0)\n        elif c == ')':\n            max_level = max(max_level, len(stack) - 1)\n    return max_level\n",
        "num_ids": 110
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    paren_string = paren_string.strip('()')\n    nested_parens = []\n    i = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            if i == 0:\n                nested_parens.append(0)\n            i += 1\n        elif char == ')':\n            if i > 0:\n                i -= 1\n                max_depth = max(max_depth, len(nested_parens))\n            else:\n                nested_parens.append(0)\n    return max_depth\n",
        "num_ids": 141
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string == '(()' or paren_string == '())':\n        return [0]\n",
        "num_ids": 27
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    stack = []\n    max_depth = 0\n    for c in paren_string:\n        if c in '()':\n            if not stack or not stack[-1]:\n                stack.append(c)\n            else:\n                if len(stack) >= 2:\n                    max_depth = max(max_depth, len(stack))\n                stack.pop()\n        else:\n            stack.append(c)\n    if stack:\n        max_depth = max(max_depth, len(stack))\n    return [max_depth]",
        "num_ids": 127
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not paren_string:\n        return []\n    current_level = 0\n    open_brackets = []\n    current_bracket_pos = -1\n    for idx, char in enumerate(paren_string):\n        if char == '(':\n            open_brackets.append(char)\n            current_bracket_pos += 1\n        elif char == ')':\n            if open_brackets:\n                current_bracket_pos -= 1\n            else:\n                current_bracket_pos = -1\n            if current_bracket_pos == -1:\n                current_level += 1\n            open_brackets.pop()\n    if current_bracket_pos == -1:\n        return []\n    level = []\n    while open_brackets:\n        level.append(current_bracket_pos)\n        level_str = ''.join(open_brackets)\n        level_int = int(level_str)\n        if level_int > current_level:\n            current_level = level_int\n            current_bracket_pos = len(paren_string) - idx - 1\n    return level\n",
        "num_ids": 268
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    for item in paren_string:\n        if item == '(':\n            stack.append(1)\n        elif item == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return []\n    if len(stack) > 0:\n        return [len(stack)]\n    else:\n        return []\n",
        "num_ids": 90
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Get all the indented groups\n    indented_groups = paren_string.replace('(', '(').replace(')', ')').split(',')\n",
        "num_ids": 40
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # assume only ( or ) or ( ) left outer parentheses are present\n    # although, ( ) and ( ) are not allowed\n    # as possible to have multiple groups of parentheses\n    # also, we can have many parentheses in a nested parentheses string\n    # e.g. \"(()()()())()\" or \"(()())(()()()())()\"\n    inner_paren_count = 0\n    level = 1\n    result = []\n    for c in paren_string:\n        if c == '(':\n            inner_paren_count += 1\n        elif c == ')':\n            inner_paren_count -= 1\n        if inner_paren_count == 0:\n            if level > 0:\n                result.append(level)\n            level = 1\n        elif c == '(' and level == 1:\n            level += 1\n        elif c == ')' and level == 1:\n            level -= 1\n",
        "num_ids": 211
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in strings if x.lower().find(substring.lower())!= -1]\n",
        "num_ids": 27
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    filtered_strings = [s for s in strings if len(s) >= len(substring) and substring in s]\n    return filtered_strings\n",
        "num_ids": 37
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(substring):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in strings if x.startswith(substring)]\n",
        "num_ids": 20
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for s in strings:\n        if substring in s:\n            res.append(s)\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum, prod = 0, 1\n    for x in numbers:\n        sum += x\n        prod *= x\n    return (sum, prod)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum, prod = 0, 1\n    for number in numbers:\n        sum += number * prod\n        prod *= number\n    return sum, prod\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    product = 1\n    for n in numbers:\n        total += n\n        product *= n\n    return (total, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # TODO: Implement this function\n    \n    # return (0,1)\n    \n    pass\n",
        "num_ids": 28
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = 0\n    p = 1\n    for i in range(len(numbers)):\n        s += numbers[i] * p\n        p *= numbers[i]\n    return s, p\n",
        "num_ids": 49
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = 0\n    prod = 1\n    for x in numbers:\n        s += x\n        prod *= x\n    return s, prod\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum, product = 0, 1\n",
        "num_ids": 10
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (sum(numbers), prod(numbers))\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    summ = 0\n    prod = 1\n    for x in numbers:\n        summ += x\n        prod *= x\n    return (summ, prod)\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sums = []\n    products = []\n    \n    for number in numbers:\n        sums.append(number)\n    \n    for number in sums:\n        products.append(number * len(numbers))\n    \n    if len(products) == 0:\n        return (0, 1)\n    else:\n        return (sum(products), sum(products))\n    \n    \ndef prod_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a product and a product of all the integers in a list.\n    Empty product should be equal to 1.\n    >>> prod_product([])\n    (1, 1)\n    >>> prod_product([1, 2, 3, 4])\n    (24, 120)\n    \"\"\"\n    products = []\n    \n    for number in numbers:\n        products.append(number * len(numbers))\n    \n    if len(products) == 0:\n        return (1, 1)\n    else:\n        return (sum(products), sum(products))\n    \n",
        "num_ids": 256
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = [0] * len(numbers)\n    for i in range(len(numbers)):\n        res[i] = max(res[i], numbers[i] + rolling_max(numbers[max(i - 1, 0): i + 1]))\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    maxes = []\n    curr = numbers[0]\n    maxes.append(curr)\n    for n in numbers[1:]:\n        if n > curr:\n            curr = n\n            maxes.append(curr)\n        else:\n            curr = n\n    return maxes\n",
        "num_ids": 75
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    rolling_max_sequence = []\n",
        "num_ids": 10
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n    else:\n        for i in range(len(numbers) - 1):\n            if numbers[i + 1] < numbers[i]:\n                numbers[i + 1], numbers[i] = numbers[i], numbers[i + 1]\n        return numbers\n",
        "num_ids": 77
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sequence = []\n    for i in range(len(numbers)):\n        sequence.append(numbers[i])\n        if i + 1 < len(numbers):\n            sequence.append(numbers[i+1])\n    \n    max_element = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] > max_element:\n            max_element = numbers[i]\n    return [max_element] + sequence\n",
        "num_ids": 112
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = [0] * len(numbers)\n    for i in range(len(numbers) - 1, -1, -1):\n        result[i] = max(result[i + 1:i + 1 + n] for n in range(len(numbers)))\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_value = -1\n    result = []\n    for i in range(len(numbers)):\n        if numbers[i] > max_value:\n            max_value = numbers[i]\n        elif numbers[i] == max_value:\n            result.append(max_value)\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 0\n    maximum = -1\n    result = []\n    while i < len(numbers):\n        if maximum == -1:\n            maximum = numbers[i]\n        elif maximum > numbers[i]:\n            if maximum < numbers[i]:\n                maximum = numbers[i]\n            result.append(maximum)\n        else:\n            if maximum == numbers[i]:\n                result.append(maximum)\n        i += 1\n    return result",
        "num_ids": 107
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    from itertools import accumulate\n",
        "num_ids": 9
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_of_elements = []\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Find the longest palindrome in string\n    longest_palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i]):\n            longest_palindrome = string[i] + longest_palindrome\n    return longest_palindrome\n",
        "num_ids": 83
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(len(string), string[::-1])\n    for i in range(len(string) // 2):\n        prefix = string[:i] + string[i + 1:]\n        if prefix == prefix[::-1]:\n            print(prefix)\n            return prefix\n",
        "num_ids": 66
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(string)):\n        if is_palindrome(string[i:i+len(string)//2]):\n            return string[i:i+len(string)//2] + make_palindrome(string[i+len(string)//2:])\n    return ''\n",
        "num_ids": 75
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    string = string.strip()\n    if len(string) == 0:\n        return ''\n",
        "num_ids": 23
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    longest = ''\n    for i in range(len(string)):\n        if string[i]!= string[-1 - i]:\n            longest = string[i:len(string) - i]\n            break\n",
        "num_ids": 54
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    start = 0\n    string = string[::-1]\n    for i in range(len(string)):\n        if string[i]!= string[i-1]:\n            string = string[start:i+1]\n        start += 1\n",
        "num_ids": 60
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome += string[i]\n        else:\n            palindrome += string[i] + string[i + 1]\n    return palindrome",
        "num_ids": 70
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert is_palindrome(string)\n    prefix = ''\n    for character in string:\n        prefix += character\n        if is_palindrome(prefix):\n            return prefix[::-1] + prefix[1:]\n    return prefix\n",
        "num_ids": 58
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    string = string.strip()\n    max_palindrome = 0\n",
        "num_ids": 18
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # IMPORTANT: As this uses the String and Integer validation, this should be at the beginning of the string\n    # so this will always be a string without a suffix\n    string = string[::-1]\n    print(string)\n    # Remove suffix from string\n    suffix = string[::-1]\n    # Test if string is a palindrome\n    if is_palindrome(string):\n        return string\n    if len(string) > len(suffix):\n        # Find longest palindrome of string that begins with string and the suffix.\n        # The string is a palindrome if\n        # string[i+1] == suffix[-i-1]\n        # But no one should keep it\n        return string[::-1][:len(suffix)] + suffix\n    # If we've reach this point, string is not a palindrome.\n    return string\n",
        "num_ids": 206
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = ''\n    for c in range(0, len(a)):\n        result += chr(ord(a[c]) ^ ord(b[c]))\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(map(str, list(map(lambda x, y: x ^ y, a, b))))\n",
        "num_ids": 29
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = len(b)\n    return ''.join([chr(ord(a[i]) ^ ord(b[i])) for i in range(l)])\n",
        "num_ids": 41
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join(chr((ord(x) ^ ord(y)) for x, y in zip(a, b)))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str((ord(a[i]) ^ ord(b[i])) % 2)\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # First XOR with 0 to make sure we don't consider 1s\n    xor_a = 0\n    xor_b = 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            xor_a ^= 1\n        if b[i] == '1':\n            xor_b ^= 1\n",
        "num_ids": 86
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(ord(c) ^ ord(d)) for c, d in zip(a, b)])\n",
        "num_ids": 32
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #return ''.join(i for i in zip(a, b))\n    return ''.join(i ^ j for i, j in zip(a, b))\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        result = None\n        lengths = {}\n        for s in strings:\n            if s in lengths:\n                lengths[s] += 1\n            else:\n                lengths[s] = 1\n",
        "num_ids": 79
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    \n    len_list = []\n    for string in strings:\n        len_list.append(len(string))\n    \n    return max(len_list)\n",
        "num_ids": 54
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    # the length of the longest string is maximum of strings in list\n    longest_string = max(strings, key = len)\n    return longest_string\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    \n    len_max = 0\n    for s in strings:\n        if len(s) > len_max:\n            len_max = len(s)\n",
        "num_ids": 49
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    length = 0\n    res = None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n",
        "num_ids": 45
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return a if a > b else b",
        "num_ids": 10
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Check for empty lists\n    if a == []:\n        return b\n    elif b == []:\n        return a\n    else:\n        # Can't do division\n        if a == b:\n            return a[0]\n        # Can't do division\n        return greatest_common_divisor(a[1:], b[1:])\n",
        "num_ids": 84
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import math\n    if a % b == 0:\n        return b\n    while b!= 0:\n        if b % a == 0:\n            return b\n        b = b % a\n    return b\n",
        "num_ids": 50
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(a, b % a)\n",
        "num_ids": 29
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    common_div = 1\n    for i in range(a, b):\n        if a % i == 0:\n            common_div = i\n    return common_div\n",
        "num_ids": 41
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(a % b, b",
        "num_ids": 43
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while b!= 0:\n        if a % b == 0:\n            a = a // b\n        else:\n            return b\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while b!= 0:\n        temp = a % b\n        a = b\n        b = temp\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert(a > b)\n    while b > 0:\n        if b & 1 == 1:\n            return a\n        a = a % b\n        b >>= 1\n    return a\n",
        "num_ids": 46
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # initialize result\n    prefixes = []\n    # iterate through the string\n    for index in range(0, len(string)):\n        # if string[index] == 'a'\n        if string[index] == 'a':\n            # prefixes.append(string[index: index + 3])\n            # prefixes.append(string[index: index + 1])\n            # prefixes.append(string[index: index + 2])\n            prefixes.append(string[index: index + 2])\n            prefixes.append(string[index: index + 1])\n            prefixes.append(string[index: index + 3])\n        # if string[index] == 'b'\n        elif string[index] == 'b':\n            # prefixes.append(string[index: index + 3])\n            prefixes.append(string[index: index + 1])\n            prefixes.append(string[index: index + 2])\n            prefixes.append(string[index: index + 3])\n        # if string[index] == 'c'\n        elif string[index] == 'c':\n            prefixes.append(string[index: index + 1])\n            prefixes.append(string[index: index + 2])\n            prefixes.append(string[index: index + 3])\n    return prefixes\n",
        "num_ids": 309
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prefixes = []\n    prefix = \"\"\n    for i in range(len(string)):\n        if string[i] == \"a\" or string[i] == \"b\" or string[i] == \"c\":\n            prefix = string[:i] + prefix\n        if string[i] == \" \":\n            if prefix!= \"\":\n                prefixes.append(prefix)\n            prefix = \"\"\n    return prefixes\n",
        "num_ids": 102
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prefixes = []\n    for i, letter in enumerate(string):\n        if letter == \"a\":\n            prefixes.append(\"a\")\n        if letter == \"b\":\n            prefixes.append(\"b\")\n        if letter == \"c\":\n            prefixes.append(\"c\")\n        if i == len(string) - 1:\n            prefixes.append(\"a\")\n    return prefixes\n",
        "num_ids": 96
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        for prefix in all_prefixes(string[:i]):\n            prefixes.append(prefix)\n    return prefixes\n",
        "num_ids": 49
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    string = string.lower()\n    prefixes = []\n    # Find the length of the shortest prefix\n    shortest_length = len(string)\n    # Find the length of the longest prefix\n    longest_length = 0\n    for i in range(shortest_length):\n        prefix = string[:i + 1]\n        if len(prefix) == shortest_length:\n            prefixes.append(prefix)\n            # Recurse on the rest of the string\n            shortest_length = i + 1\n            longest_length = i\n        else:\n            # We can't have more prefixes than the shortest prefix\n            longest_length = i\n    return prefixes\n",
        "num_ids": 158
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = []\n    length = len(string)\n    if length == 0:\n        return []\n    for i in range(1, length + 1):\n        if string[0:i] == string[0:i][::-1]:\n            l.append(string[0:i])\n    return l\n",
        "num_ids": 74
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prefixes = []\n    prefix = string[0]\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Build the prefix list from the string\n    prefix_list = [string[0]]\n    for i in range(1, len(string)):\n        prefix_list.append(string[i] + prefix_list[-1])\n    # return prefix_list\n",
        "num_ids": 63
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Find the longest prefix to the end of the string\n    index = len(string) - 1\n    prefix = \"\"\n    while index > 0:\n        prefix = string[index] + prefix\n        index -= 1\n",
        "num_ids": 51
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pre_list = []\n    for i in range(1, len(string)+1):\n        for j in range(len(string)-i+1):\n            if string[j: j+i] == string[j: j+i][::-1]:\n                pre_list.append(string[j: j+i])\n    return pre_list\n",
        "num_ids": 84
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # return str(n)\n    # return str(n)[:n]\n    return str(n)\n",
        "num_ids": 27
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join([str(i) for i in range(n)])\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # here, put the numbers into a string.\n    # we do this by using str() so that we can do something like concatenation or a concatenation of two numbers\n    # easier for this funtion\n    return str(n)\n",
        "num_ids": 56
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join([str(i) for i in range(n, 1, -1)]",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #This line was added to my code for clarity\n    if n <= 0:\n        return ''\n    \n    #i is a variable that will be used to calculate the starting position of the number\n    i = 0\n    #for j in range(n):\n        #n is now the number to be calculated\n    #    n = string_sequence(i)\n        #i += 1\n",
        "num_ids": 89
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return ''.join(f'{n}' if n > 0 else'' for n in range(1, n+1))\n",
        "num_ids": 31
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return f\"{0:d}\" * n\n",
        "num_ids": 13
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 0\n    while i < n:\n        string = str(i)\n        if len(string) < n:\n            string ='' * (n - len(string)) + string\n        i += 1\n    return string\n",
        "num_ids": 55
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return''.join(str(i) for i in range(0, n+1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Note: This is based on the convention that the string is of the form of a string with\n    # numbers separated by spaces and, unlike a list, when used as an iterator in a for loop.\n    return''.join(str(x) for x in range(n))\n",
        "num_ids": 63
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    occurrences = dict()\n    for character in string:\n        occurrences[character] = occurrences.get(character, 0) + 1\n    return len(occurrences)\n",
        "num_ids": 44
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string:\n        chars = Counter(string)\n        return len(chars)\n    else:\n        raise ValueError(\"String is not given!\")\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0,len(string)):\n        if string[i] in string[i:]:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num_of_chars = 0\n    for c in string:\n        if not c.isalpha() and c.isupper():\n            num_of_chars += 1\n    return num_of_chars\n",
        "num_ids": 52
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # To save space, we first sort the string and then count the number of characters in each string.\n    # When we count them, we will add up the number of characters in the string.\n    # So, we can say, for every string, how many characters does it consist of?\n    # Since we will use a hashmap to map to a dictionary, we will add the count of each character and return it as a key.\n    # Because of that, we have to make it a function, so we can use hash functions\n    # by referring to the hash value of a string.\n    # Example:\n    # hash(1) = 1\n    # hash(2) = 1\n    # hash(3) = 2\n    # hash(4) = 2\n",
        "num_ids": 171
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len([c for c in string if c in string.lower()])\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    char_count = {}\n    for char in string:\n        if char.isupper():\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n        else:\n            if char not in char_count:\n                char_count[char] = 1\n            else:\n                char_count[char] += 1\n    return len(char_count)\n",
        "num_ids": 104
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    char_count = 0\n    for char in string:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    distinct_characters = 0\n    for char in string:\n        if char.isalpha() or char.isspace():\n            distinct_characters += 1\n    return distinct_characters\n",
        "num_ids": 47
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in string:\n        if i not in string.lower():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    beats = 0\n",
        "num_ids": 9
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            nums.append(1)\n        elif music_string[i] == '|':\n            nums.append(2)\n        else:\n            nums.append(0)\n    return nums\n",
        "num_ids": 86
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # first determine if a note has the note as a beat\n    \n    beat_type = 'o|' # 'o' is a note\n    beat_pos = 0 # note position\n    beat_rate = 1 # the note's beat rate\n    beat_time = 0 # note start time\n    \n    beat_time_list = [] # list of all beat_times\n    \n    for pos, char in enumerate(music_string):\n        if char == beat_type:\n            beat_time_list.append(beat_pos) # add beat\n            beat_pos += beat_rate\n            beat_time += beat_rate\n        elif pos == len(music_string) - 1: # last note\n            beat_time_list.append(beat_pos) # add note end\n            beat_pos += beat_rate\n            beat_time += beat_rate\n        else:\n            beat_time_list.append(beat_pos) # add next beat\n            beat_pos += beat_rate\n            beat_time += beat_rate\n    \n    return beat_time_list\n",
        "num_ids": 252
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(1)\n        elif note == '|':\n            notes.append(2)\n        else:\n            notes.append(0)\n",
        "num_ids": 60
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    music_string = music_string.replace(' ', '')\n    beats = []\n    beats_per_quarter = 0\n",
        "num_ids": 32
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    beat_string_list = music_string.split(' ')\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [int(note) for note in music_string.split(' ') if note!= '']\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    notes = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            notes[i] = 4\n        elif note == 'o|':\n            notes[i] = 2\n        elif note == '.|':\n            notes[i] = 1\n    return notes\n",
        "num_ids": 97
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    beat_length = 1\n    while music_string[beat_length-1] == '|':\n        beat_length += 1\n    beat_length -= 1\n    notes = []\n    beats = 1\n    beat_start = beat_length\n    for beat in music_string[beat_start:]:\n        if beat == 'o':\n            notes.append(beats)\n            beats = 1\n        else:\n            beats += 1\n    return notes\n",
        "num_ids": 110
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    notes = []\n    note_index = 0\n    for char in music_string:\n        if char == 'o':\n            notes.append(note_index)\n        if char == '.':\n            note_index += 1\n    return notes\n",
        "num_ids": 59
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # create a dictionary\n    dictionary = dict()\n    # add the key for each substring\n    for i in range(len(string)):\n        dictionary.update({string[i]: 0})\n    # add each key with a value\n    for key in dictionary.keys():\n        dictionary.update({key: dictionary.get(key, 0) + 1})\n    # count the number of overlapping cases\n    return len([i for i in dictionary.values() if i > 1])\n",
        "num_ids": 114
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string == '':\n        return 0\n    for i in range(len(string)):\n        if substring == string[i:i+len(substring)]:\n            return len(substring) - i\n    return 0\n",
        "num_ids": 56
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert substring in string\n    count = 0\n    for c in substring:\n        if string.count(c) > 0:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_count = 0\n    count = 0\n    for i in range(0, len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n        elif string[i:].endswith(substring):\n            count += 1\n        elif count > max_count:\n            max_count = count\n            print(max_count)\n        count = 0\n    print(max_count)\n    return max_count\n",
        "num_ids": 112
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not string or not substring:\n        raise Exception(\"string and substring cannot be empty\")\n    \n    prefix_len = len(substring)\n    result = 0\n    \n    for i in range(prefix_len):\n        if substring[i:i+len(substring)] == substring:\n            result += 1\n            \n    return result\n",
        "num_ids": 85
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Implement this!\n    length = len(string)\n    occurence = 0\n    for i in range(length - len(substring)):\n        if substring in string[i:i+len(substring)]:\n            occurence += 1\n    return occurence\n",
        "num_ids": 71
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Look for all occurrences of substring\n    res = string.count(substring)\n    # Count overlaping cases\n    return res if substring in string else 0\n",
        "num_ids": 40
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(string.count(substring))\n    \ndef how_many_substrings(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_substrings('', 'a')\n    0\n    >>> how_many_substrings('aaa', 'a')\n    3\n    >>> how_many_substrings('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 166
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # build a dictionary to keep track of number of occurrences of substring in original string\n    lst_substring = {}\n    for i in string:\n        if i in lst_substring:\n            lst_substring[i] += 1\n        else:\n            lst_substring[i] = 1\n    \n    # loop through the original string\n    # find the number of times that the substring can be found in the original string\n    # then return the number of times\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 3, because we will count 3 times in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 3, because we will count 3 times in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 1, because we will count 1 time in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 1, because we will count 1 time in the original string\n    \n    for key, value in lst_substring.items():\n        if substring == key:\n            return value\n    \n    # we didn't find a substring to be found in the original string\n    return 0\n    \ndef how_many_times_v2(string, substring):\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_v2('', 'a')\n    0\n    >>> how_many_times_v2('aaa', 'a')\n    3\n    >>> how_many_times_v2('aaaa', 'aa')\n    3\n    \"\"\"\n    # build a dictionary to keep track of number of occurrences of substring in original string\n    lst_substring = {}\n    for i in string:\n        if i in lst_substring:\n            lst_substring[i] += 1\n        else:\n            lst_substring[i] = 1\n    \n    # loop through the original string\n    # find the number of times that the substring can be found in the original string\n    # then return the number of times\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 3, because we will count 3 times in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 3, because we will count 3 times in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 1, because we will count 1 time in the original string\n    # e.g. if the substring is 'a' and we find 'a' in the original string, return 1, because we will count 1 time in the original string\n    \n    for key, value in lst_substring.items():\n        if substring == key:\n            return value\n    \n    # we didn't find a substring to be found in the original string\n    return 0\n",
        "num_ids": 745
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len([c for c in substring if c in string])\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_numbers = ''\n    num_list = [int(i) for i in numbers.split(' ')]\n    num_list.sort()\n    for num in num_list:\n        sorted_numbers += str(num) +''\n    return sorted_numbers\n",
        "num_ids": 68
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join(sorted(map(str, numbers)))\n",
        "num_ids": 16
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    numbers = numbers.split()\n    while i < len(numbers):\n        if numbers[i] == 'zero':\n            break\n        i = i + 1\n    \n    if i == len(numbers) and i < len(numbers):\n        return 'zero' + numbers[i:]\n    \n    elif i == len(numbers):\n        return 'nine' + numbers[:i]\n    \n    elif numbers[i] == 'zero':\n        return 'zero' + numbers[i:]\n    \n    elif numbers[i] == 'one':\n        return 'one' + numbers[i:]\n    \n    elif numbers[i] == 'two':\n        return 'two' + numbers[i:]\n    \n    elif numbers[i] == 'three':\n        return 'three' + numbers[i:]\n    \n    elif numbers[i] == 'four':\n        return 'four' + numbers[i:]\n    \n    elif numbers[i] == 'five':\n        return 'five' + numbers[i:]\n    \n    elif numbers[i] =='six':\n        return'six' + numbers[i:]\n    \n    elif numbers[i] =='seven':\n        return'seven' + numbers[i:]\n    \n    elif numbers[i] == 'eight':\n        return 'eight' + numbers[i:]\n    \n    elif numbers[i] == 'nine':\n        return 'nine' + numbers[i:]\n    \n    else:\n        return numbers[i:]\n    \ndef add_numbers(numbers: str, *numbers_to_add) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Input may be a string or a tuple of strings.\n    Return the string with numbers sorted from smallest to largest.\n    >>> add_numbers('one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine')\n    'one two three four five six seven eight nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nin",
        "num_ids": 1023
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Function to return the string for the given set of numbers\n    def sort_set(set_numbers: List) -> str:\n        sorted_set = []\n        for num in set_numbers:\n            if len(set_numbers) == 1:\n                sorted_set.append(num)\n                break\n            else:\n                # If the number is in the first set\n                if num in set_numbers[0:len(set_numbers)]:\n                    sorted_set.append(num)\n                    # If the number in the next set is greater than the current number, \n                    #  then add it to the first set\n                    if num > sorted_set[-1]:\n                        sorted_set.append(num)\n                        # If the current number is not in the next set, then keep looking for \n                        #  the next set\n                        continue\n                else:\n                    sorted_set.append(num)\n                    continue\n        return \" \".join(sorted_set)\n",
        "num_ids": 234
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Convert numbers into a list\n    numbers = numbers.split(\" \")\n    # Reorder the list\n    numbers = [int(number) for number in numbers]\n    # Sort list\n    numbers.sort()\n    # Return the string\n    return \" \".join(map(str, numbers))",
        "num_ids": 72
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = numbers.split(' ')\n    numbers = [int(n) for n in numbers]\n    numbers.sort()\n    result = ''\n    for number in numbers:\n        result += str(number) +''\n    return result[:-1]\n",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return ''\n    elif len(numbers) == 1:\n        return str(int(numbers))\n    elif len(numbers) == 2:\n        return str(int(numbers[0])+int(numbers[1]))\n    elif len(numbers) == 3:\n        return str(int(numbers[0])+int(numbers[2])+int(numbers[3]))\n    elif len(numbers) == 4:\n        return str(int(numbers[0])+int(numbers[2])+int(numbers[3])+int(numbers[4]))\n    else:\n        return str(int(numbers[0])+int(numbers[2])+int(numbers[3])+int(numbers[4])+int(numbers[5]))\n",
        "num_ids": 210
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def next_number(n: str) -> int:\n        if n == 'zero':\n            return 0\n        elif n == 'one':\n            return 1\n        elif n == 'two':\n            return 2\n        elif n == 'three':\n            return 3\n        elif n == 'four':\n            return 4\n        elif n == 'five':\n            return 5\n        elif n =='six':\n            return 6\n        elif n =='seven':\n            return 7\n        elif n == 'eight':\n            return 8\n        else:\n            return int(n)\n    if len(numbers) == 0:\n        return ''\n    sorted_numbers = [n for n in numbers.split() if next_number(n) > 9]\n    sorted_numbers =''.join(sorted_numbers)\n    return sorted_numbers\n",
        "num_ids": 208
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #returns list of strings\n    #in this case it just returns the string\n    #for simplicity just return the string in a list\n    numbers = numbers.split()\n    #we'll make a list of the numbers\n    numbers_list = list(map(str, numbers))\n    #now we'll sort the list in ascending order\n    numbers_list.sort()\n    #now we'll return the result\n    return''.join(numbers_list)\n",
        "num_ids": 108
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_numbers = numbers.split()\n    sorted_numbers.sort(key=lambda x: int(x))\n    return''.join(sorted_numbers)\n",
        "num_ids": 44
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    smallest_num = numbers[0]\n    for i in range(1, len(numbers)):\n        if smallest_num > numbers[i]:\n            smallest_num = numbers[i]\n        elif smallest_num < numbers[i]:\n            return (smallest_num, numbers[i])\n    return smallest_num, smallest_num\n",
        "num_ids": 84
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return find_closest_elements_iterative(numbers, 0, len(numbers) - 1)\n",
        "num_ids": 29
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    minimum_distance: List[float] = []\n    smaller_number: List[float] = []\n    large_number: List[float] = []\n",
        "num_ids": 38
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers = sorted(numbers, reverse=True)\n    smaller = numbers[0]\n    larger = numbers[-1]\n    return smaller, larger\n",
        "num_ids": 40
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if smallest > numbers[i]:\n            smallest = numbers[i]\n    return smallest, smallest\n",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Find the small and the bigger numbers (similar for elements)\n    small_num, big_num = sorted(numbers, reverse=True)\n    # Find the closest numbers (smaller numbers)\n    small_elements, big_elements = [], []\n    for num in numbers:\n        if num < big_num:\n            small_elements.append(num)\n        elif num > big_num:\n            big_elements.append(num)\n    return big_num, small_num\n",
        "num_ids": 120
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smaller = max(numbers)\n    larger = min(numbers)\n    return (larger, smaller)\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Find the smallest and largest number in the supplied list.\n    smallest = min(numbers)\n    largest = max(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    return smallest, smallest\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest = smallest_elements(numbers)\n    if smallest[0] >= smallest[1]:\n        smallest = smallest_elements(numbers[1:])\n",
        "num_ids": 42
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n/sum(numbers) for n in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    linear_scaling = min(numbers)\n    linear_scaling_rounded = round(linear_scaling, 2)\n    scaling_factor = 1.0 / linear_scaling_rounded\n    # So for example, when the first number is 0, multiplying it by the scaling factor will produce the second number as 1.0.\n    # However, when the first number is 1, multiplying it by the scaling factor will produce the second number as 0.5.\n    return [round(n * scaling_factor, 2) for n in numbers]\n",
        "num_ids": 125
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    transformed_numbers = []\n    for num in numbers:\n        if num!= 0:\n            transformed_numbers.append(num)\n        else:\n            transformed_numbers.append(1)\n    return transformed_numbers\n",
        "num_ids": 60
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        numbers[i] = numbers[i] * (1/numbers[i])\n    return numbers\n",
        "num_ids": 41
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert len(numbers) > 2\n",
        "num_ids": 11
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Calculate the absolute minimum and maximum values, and then subtract them, to get\n    # a standardized form. Also, create a variable to store the scaled value\n    min = min(numbers)\n    max = max(numbers)\n    assert min >= 0.0\n    assert max >= 0.0\n    assert len(numbers) == 3\n    assert min <= max\n    assert len(numbers) == len(numbers)\n    return [1.0 if num >= 0.0 else 0.0 for num in numbers]",
        "num_ids": 125
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [number / max(1.0, max(numbers)) for number in numbers]\n",
        "num_ids": 23
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_numbers = [0.0] * len(numbers)\n    for i in range(len(numbers)):\n        new_numbers[i] = numbers[i]\n    new_numbers = new_numbers[1:] + new_numbers[:1]\n    return new_numbers\n",
        "num_ids": 76
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max_numbers = []\n    for number in numbers:\n        if number > 1.0:\n            number = 1.0\n        elif number < -1.0:\n            number = -1.0\n        max_numbers.append(number)\n    return max_numbers\n",
        "num_ids": 69
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    rescaled_numbers = [n/sum(n) for n in numbers]\n    return rescaled_numbers\n",
        "num_ids": 30
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [value for value in values if type(value) is int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(filter(None, values))\n",
        "num_ids": 12
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in values if type(i) is int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [value for value in values if isinstance(value, int) or value]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_values = []\n    for value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n        else:\n            new_values.append(value)\n    return new_values\n",
        "num_ids": 55
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)",
        "num_ids": 7
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n",
        "num_ids": 19
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # NOTE: String is case-sensitive!\n    return len(string)\n",
        "num_ids": 19
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    c = 0\n    for i in string:\n        c += 1\n    return c\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string is None or type(string)!= str:\n        raise TypeError('string required')\n",
        "num_ids": 24
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    divisor = 2\n    for i in range(3, n):\n        if n % i == 0:\n            divisor = i\n            break\n    return divisor\n",
        "num_ids": 44
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def gcd(n: int) -> int:\n        for i in range(1, n+1):\n            if n%i == 0:\n                return i\n    return gcd(n) if n % gcd(n) == 0 else 0\n",
        "num_ids": 60
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # 16 is a multiple of 3\n    # 8 is a multiple of 5\n    # 4 is a multiple of 7\n    # 1 is a multiple of 11\n    # 1 and 11 are divisors\n    divisors = [1, 2, 4, 5, 7, 8, 10]\n    lcm = 1\n    # loop over numbers below n\n    for i in range(n, 0, -1):\n        # if n % divisors[i] is 1, then n/divisors[i] divides n\n        if n % divisors[i] is 1:\n            lcm = lcm * (divisors[i] ** 2)\n    return lcm\n",
        "num_ids": 159
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    dividers = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            dividers.append(i)\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisor = 2\n    while(divisor*divisor <= n):\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return divisor\n",
        "num_ids": 52
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2, (n-1)//2+1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return largest_divisor(n // 2)\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    divisor = 2\n    while divisor <= n:\n        if n%divisor == 0:\n            return divisor\n        divisor +=1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factors = [1]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\n",
        "num_ids": 61
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Create a list of all possible factors.\n    factors = [1, ]\n",
        "num_ids": 21
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorization = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factorization.append(i)\n            n //= i\n    return factorization\n",
        "num_ids": 49
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return factorize(n//2)\n    else:\n        return factorize(n//2)+factorize(3*n+2)\n",
        "num_ids": 69
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_list = list(str(n))\n    prime_factors = []\n    for i in range(len(num_list)):\n        for j in range(i, len(num_list)):\n            num = int(num_list[i]) * int(num_list[j])\n            if num % 2 == 0:\n                prime_factors.append(num)\n",
        "num_ids": 92
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # result = []\n    # factors = []\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(1, i + 1):\n    #         if i % j == 0:\n    #             if len(str(i ** j)) > len(str(i)):\n    #                 factors.append(i ** j)\n    #             else:\n    #                 factors.append(i ** j)\n    #\n    #         if len(str(i ** j)) > len(str(i)):\n    #             result.append(i ** j)\n    #         else:\n    #             result.append(i ** j)\n    #\n    # return result\n    #\n    #     factors = []\n    #     for i in range(1, n + 1):\n    #         for j in range(1, i + 1):\n    #             if i % j == 0:\n    #                 factors.append(i ** j)\n    #         if len(str(i ** j)) > len(str(i)):\n    #             factors.append(i ** j)\n    #\n    #     return factors\n",
        "num_ids": 279
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, n+1):\n        res.append(i)\n        for j in range(1, i//2+1):\n            if i%j == 0:\n                res.append(j)\n                break\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    if n == 0:\n        return [0]\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if n//i!= i:\n                res.append(i)\n            else:\n                res.append(n//i)\n    res.append(n)\n    return res\n    \ndef factors(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    >>> factors(8)\n    [2, 2, 2]\n    >>> factors(25)\n    [5, 5]\n    >>> factors(70)\n    [2, 5, 7]\n    \"\"\"\n    return [x for x in range(1, n+1) if n%x==0]\n",
        "num_ids": 221
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            res.append(i)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return [2]\n    if n == 2:\n        return [2, 2]\n    if n % 2 == 0:\n        return [n, 2]\n    num = 1\n    prime_factors = []\n    while n > 1:\n        if n % 2 == 0:\n            prime_factors.append(2)\n            n = n // 2\n        else:\n            prime_factors.append(3)\n            n = n // 3\n    return prime_factors + factorize(n - 1)\n",
        "num_ids": 130
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    nums = sorted(numbers)\n    return nums",
        "num_ids": 15
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sorted_numbers = sorted(numbers)\n    prev = None\n    for i in range(len(sorted_numbers)):\n        if prev is not None:\n            if sorted_numbers[i] == prev:\n                continue\n        prev = sorted_numbers[i]\n        numbers.remove(sorted_numbers[i])\n    return sorted_numbers\n",
        "num_ids": 92
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    seen_nums = {}\n",
        "num_ids": 9
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not numbers:\n        return []\n    sorted_numbers = sorted(numbers)\n    res = []\n    for i, num in enumerate(numbers):\n        if num == sorted_numbers[i]:\n            pass\n        else:\n            res.append(num)\n    return res\n",
        "num_ids": 73
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if numbers is None or len(numbers) == 0:\n        return None\n    dict_numbers = dict()\n    for num in numbers:\n        if num in dict_numbers:\n            dict_numbers[num] += 1\n        else:\n            dict_numbers[num] = 1\n    return [num for num in dict_numbers if dict_numbers[num] > 1]\n",
        "num_ids": 95
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # use the counter\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n",
        "num_ids": 69
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # For each element, keep track of the previous value.\n    # If it is the same, we keep it in the queue\n    # If it is not, we keep popping that value, and move on to the next\n    # If we have a value, we just move to the value, so we don't pop it\n    # If the queue is empty, that means all the elements are removed\n    # If we popped something, we move on to the next element\n",
        "num_ids": 103
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # This is my implementation of remove_duplicates from the leetcode course.\n    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    # Runtime: 44 ms (87.43%)\n    # Memory Usage: 14.3 MB (84.46%)\n    nums_set = set(numbers)\n    numbers = [num for num in numbers if num in nums_set]\n    return numbers\n",
        "num_ids": 104
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #return string.title()\n    return string.upper()\n",
        "num_ids": 16
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.upper() + string.lower()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.lower() + string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    return string.upper().lower(",
        "num_ids": 11
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper() + string.lower()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.upper()\n",
        "num_ids": 8
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return string.upper() + string.lower()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return string.upper().lower()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return string.upper() + string.lower()\n",
        "num_ids": 13
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = \"\"\n    for s in strings:\n        s += s\n    return s\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    string = ''\n    for string in strings:\n        string += string\n    return string\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = \"\"\n    for i in strings:\n        s += i\n    return s\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_str = ''\n    for string in strings:\n        new_str += string\n    return new_str\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for s in strings:\n        if prefix in s:\n            result.append(s)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [s for s in strings if s[:len(prefix)] == prefix]\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    filtered_strings: List[str] = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 49
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_strings: List[str] = []\n    for s in strings:\n        if s[:len(prefix)] == prefix:\n            new_strings.append(s)\n    return new_strings\n",
        "num_ids": 49
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [\n        string\n        for string in strings\n        if string.startswith(prefix)\n    ]\n",
        "num_ids": 28
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    positives = []\n    for el in l:\n        if el > 0:\n            positives.append(el)\n    return positives\n",
        "num_ids": 34
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    for i in l:\n        if i > 0:\n            res.append(i)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for item in l:\n        if item > 0:\n            result.append(item)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [el for el in l if el > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result: list = []\n    for number in l:\n        if number > 0:\n            result.append(number)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n<2:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True\n    if n%2==0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 5):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return n > 1\n",
        "num_ids": 7
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    \n    if n < 1 or n%2 == 0:\n        return False\n    \n    if n < 3:\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1 or n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    k = 5\n    while k * k <= n:\n        if n % k == 0 or n % (k + 2) == 0:\n            return False\n        k += 6\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, n//2 + 1, 2):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 2 or n % 2 == 0:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 94
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n) + 1), 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n    \n",
        "num_ids": 100
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    z = []\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            z.append(xs[i])\n    return z[0]\n",
        "num_ids": 47
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(xs)\n    if n < 2:\n        return None\n    if n % 2 == 0:\n        return xs[0] + xs[1] * find_zero(xs[1:])\n    else:\n        return (xs[0] + xs[1] * find_zero(xs[1:]) + xs[1] * xs[1] * find_zero(xs[1:2])) / (2 * n)\n",
        "num_ids": 111
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max([abs(poly(xs, i)) for i in range(len(xs))]) / len(xs)\n",
        "num_ids": 29
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for x in xs:\n        if poly(xs, x)!= 0:\n            return x\n    return 0\n",
        "num_ids": 29
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(xs)\n    x = xs[0]\n    for i in range(n):\n        if xs[i]!= 0:\n            x = xs[i]\n            break\n    return x\n",
        "num_ids": 55
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(xs) - 1, 0, -1):\n        if xs[i]!= 0:\n            return xs[i]\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(xs)\n    if n % 2 == 0:\n        for i in range(n // 2):\n            xs.pop()\n    # print(\"find_zero:\", xs)\n    # print(\"find_zero(n):\", xs)\n    # print(\"n-1:\", n - 1)\n    if len(xs) < 1:\n        return xs[0]\n",
        "num_ids": 95
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return max([i for i, coeff in enumerate(xs) if coeff!= 0])\n",
        "num_ids": 25
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(xs) <= 1:\n        return 0\n    return round(poly(xs, 0), 2)\n",
        "num_ids": 28
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # xs is a list of coefficients of a polynomial\n    # assert len(xs) % 2 == 0, \"xs must be a list of even number coefficients.\"\n    # assert 1 <= len(xs) <= len(xs), \"list must contain at least 1 even number of coefficients.\"\n    # assert sum(xs) > 0, \"xs must contain positive coefficients.\"\n    # xs_numerator = [sum(i) for i in zip(xs[::2], xs[1::2])]\n    # xs_denominator = [i**2 + i**2 for i in xs]\n    # xs_numerator_max = max(xs_numerator)\n    # if xs_numerator_max == 0:\n    #     x0 = xs_numerator[0]\n    #     x1 = xs_numerator[1]\n    #     x2 = xs_numerator[2]\n    #     x3 = xs_numerator[3]\n    #     x4 = xs_numerator[4]\n    #     x5 = xs_numerator[5]\n    #     x6 = xs_numerator[6]\n    #     x7 = xs_numerator[7]\n    #     x8 = xs_numerator[8]\n    #     x9 = xs_numerator[9]\n    #     x10 = xs_numerator[10]\n    #     x11 = xs_numerator[11]\n    #     x12 = xs_numerator[12]\n    #     x13 = xs_numerator[13]\n    #     x14 = xs_numerator[14]\n    #     x15 = xs_numerator[15]\n    #     x16 = xs_numerator[16]\n    #     x17 = xs_numerator[17]\n    #     x18 = xs_numerator[18]\n    #     x19 = xs_numerator[19]\n    #     x20 = xs_numerator[20]\n    #     x21 = xs_numerator[21]\n    #     x22 = xs_numerator[22]\n    #     x23 = xs_numerator[23]\n    #     x24 = xs_numerator[24]\n    #     x25 = xs_numerator[25]\n    #     x26 = xs_numerator[26]\n    #     x27 = xs_numerator[27]\n    #     x28 = xs_numerator[28]\n    #     x29 = xs_numerator[29]\n    #     x30 = xs_numerator[30]\n    #     x31 = xs_numerator[31]\n    #     x32 = xs_numerator[32]\n    #     x33 = xs_numerator[33]\n    #     x34 = xs_numerator[34]\n    #     x35 = xs_numerator[35]\n    #     x36 = xs_numerator[36]\n    #     x37 = xs_numerator[37]\n    #     x38 = xs_numerator[38]\n    #     x39 = xs_numerator[39]\n    #     x40 = xs_numerator[40]\n    #     x41 = xs_numerator[41]\n    #     x42 = xs_numerator[42]\n    #     x43 = xs_numerator[43]\n    #     x44 = xs_numerator[44]\n    #     x45 = xs_numerator[45]\n    #     x46 = xs_numerator[46]\n    #     x47 = xs_numerator[47]\n    #     x48 = xs_numerator[48]\n    #     x49 = xs_numerator[4",
        "num_ids": 975
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_l = []\n    for ind, i in enumerate(l):\n        if i%3 == 0:\n            new_l.append(l[ind])\n        else:\n            new_l.append(i)\n    return new_l\n",
        "num_ids": 61
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        elif i % 3 == 1:\n            l2.append(i)\n        else:\n            l3.append(i)\n    return sorted(l1+l2+l3)\n",
        "num_ids": 90
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(l, reverse=True)\n",
        "num_ids": 12
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            l[i] = l[i] // 3\n    return l\n",
        "num_ids": 43
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Sorting the indicies of the list.\n    n = len(l)\n    for i in range(n):\n        for j in range(n):\n            if l[j] % 3 == 0:\n                l[i] = l[j]\n            elif l[j] % 3 == 1:\n                l[i] = l[j]\n            elif l[j] % 3 == 2:\n                l[i] = l[j]\n    return l\n",
        "num_ids": 114
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l.sort()\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    indicies = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            indicies.append(i)\n    return indicies\n",
        "num_ids": 48
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [l[i] for i in range(len(l)) if l[i]%3!= 0]\n",
        "num_ids": 29
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j:\n                if l[i] % 3!= l[j] % 3:\n                    new_list.append(l[i])\n    return new_list\n",
        "num_ids": 76
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if l[0] < l[2]:\n        return l[:3]\n    elif l[1] < l[3]:\n        return l[:3]\n    elif l[2] < l[3]:\n        return l[:3]\n    elif l[0] < l[2] and l[1] < l[3]:\n        return l[:3]\n    elif l[1] < l[2] and l[0] < l[3]:\n        return l[:3]\n    else:\n        return l[:3]\n",
        "num_ids": 139
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [e for e in l if e not in set(l)]\n",
        "num_ids": 18
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    return l[0:len(l)//2]\n    \ndef concat_list(l):\n    \"\"\"Return a list that contains all items in l\n    >>> concat_list([1,2,3])\n    [1, 2, 3]\n    \"\"\"\n    return l[:]\n    \ndef count_elements(l):\n    \"\"\"Return the number of elements in the list\n    >>> count_elements([])\n    0\n    >>> count_elements([1,2,3,4])\n    3\n    \"\"\"\n    return len(l)\n    \ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if string s is palindrome\n    >>> is_palindrome('A man, a plan, a canal: Panama')\n    True\n    >>> is_palindrome('race a car')\n    True\n    >>> is_palindrome('race a car')\n    False\n    \"\"\"\n    return s == s[::-1]\n    \ndef remove_nth_element(l, n):\n    \"\"\"Return l without nth element\n    >>> remove_nth_element([1,2,3,4,5,6,7], 1)\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> remove_nth_element([1,2,3,4,5,6,7], -1)\n    [1, 2, 3, 4, 5, 6, 7]\n    >>> remove_nth_element([1,2,3,4,5,6,7], 2)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return l[n:len(l)-n]\n    \ndef count_substring(l, s):\n    \"\"\"Return the number of times s appears in l\n    >>> count_substring('abcde', 'ab')\n    3\n    >>> count_substring('abcde', 'a')\n    0\n    >>> count_substring('abcde', 'ab')\n    1\n    \"\"\"\n    return l.count(s)\n    \ndef find_index(l, s):\n    \"\"\"Return the index of the first appearance of s in l\n    >>> find_index([1,2,3], '2')\n    1\n    >>> find_index([1,2,3], '3')\n    4\n    \"\"\"\n    i = 0\n    for e in l:\n        if s == e:\n            return i\n        i += 1\n    return -1\n    \ndef is_anagram(l, s):\n    \"\"\"Return True if there are no repeats in l\n    >>> is_anagram([1,2,3,3,4], 'aba')\n    False\n    >>> is_anagram([1,2,3,4,5], 'abba')\n    True\n    \"\"\"\n    return l == sorted(l)\n    \ndef list_of_seven(n, m):\n    \"\"\"Return a list of 7 integers from n to m\n    >>> list_of_seven(7,9)\n    [7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    \"\"\"\n    return [i for i in range(n, m+1) if i%7 == 0]\n    \ndef list_of_seven_as_list(n, m):\n    \"\"\"Return a list of 7 integers from n to m\n    >>> list_of_seven(7,9)\n    [7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    \"\"\"\n    return list(range(n, m+1))\n    \ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if string s is a palindrome.\n    >>> is_palindrome('ab')\n    False\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('abba')\n    True\n    \"\"\"\n    return s == s[::-1]\n    \ndef lcm(x, y):\n    \"\"\"Return the lowest common multiple of x and y\n    >>> lcm(3, 4)\n    6\n    >>> lcm(6, 8)\n    24\n    \"\"\"\n    return x*y // gcd(x, y)\n    \ndef factorial(n):\n    \"\"\"Return the factorial of a number n.\n",
        "num_ids": 1024
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(dict.fromkeys(l).keys())\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    seen = {}\n    return [element for element in l if element not in seen and not seen.setdefault(element, True)]\n",
        "num_ids": 31
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    new_list = [item for item in l if l.count(item) == 1]\n    return new_list\n",
        "num_ids": 29
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not l:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    if l[0] > l[1]:\n        return l[0]\n    return max_element(l[1:])",
        "num_ids": 58
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max",
        "num_ids": 31
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # handle exceptions\n    try:\n        return max(l)\n    except Exception:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return l[0]\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return -1\n    else:\n        if len(l) == 1:\n            return l[0]\n        else:\n            return max(l)\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not l:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max",
        "num_ids": 31
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return l[0]\n",
        "num_ids": 8
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n % 7 == 0:\n        return 0\n    elif n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    return ",
        "num_ids": 45
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num_div = 0\n    while n!= 0:\n        if n%11 == 0:\n            num_div += 1\n            n //= 10\n        elif n%13 == 0:\n            num_div += 1\n            n //= 10\n        else:\n            n //= 10\n    return num_div\n",
        "num_ids": 77
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    if n < 10:\n        return 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            result += 1\n        if i % 5 == 0:\n            result += 1\n        if i % 3 == 0 and i % 5 == 0:\n            result += 1\n    return result",
        "num_ids": 81
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    i = 1\n    while i <= n:\n        result += i\n        if i % 11 == 0 or i % 13 == 0:\n            result += 1\n        i += 1\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            count += 1\n        else:\n            count = 0\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 11 == 0 and n % 13 == 0:\n        return 1\n    return fizz_buzz(n//10)*fizz_buzz(n//10)\ndef fizz_buzz_product(n: int):\n    \"\"\"Return the product of all the digits of numbers less than n.\n    >>> fizz_buzz_product(50)\n    90\n    >>> fizz_buzz_product(78)\n    27\n    \"\"\"\n    if n % 11 == 0 and n % 13 == 0:\n        return n\n    return n*fizz_buzz(n//10)\n",
        "num_ids": 142
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 50:\n        return 0\n    elif n % 11 == 0 and n % 13 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    else:\n        return 4\n",
        "num_ids": 68
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 15:\n        return n\n    else:\n        divisors = 0\n        for i in range(1, n+1):\n            if i%7 == 0 and i%11 == 0:\n                divisors+=1\n        return divisors\n",
        "num_ids": 64
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n % 11 == 0:\n        return 0\n    elif n % 13 == 0:\n        return 1\n    else:\n        return fizz_buzz(n // 10) + 1\n        \nprint(fizz_buzz(50))\nprint(fizz_buzz(78))\nprint(fizz_buzz(79))\nprint(fizz_buzz(100))",
        "num_ids": 92
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 0:\n        raise ValueError(\"Invalid input to fizz_buzz\")\n    elif n % 3 == 0 and n % 5 == 0:\n        return 1\n    elif n % 3 == 0:\n        return 0\n    elif n % 5 == 0:\n        return 0\n    else:\n        return 1 + fizz_buzz(n - 1)",
        "num_ids": 89
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda x: (x%2, x))\n",
        "num_ids": 20
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n    odd_indices = [i for i, x in enumerate(l) if i % 2 == 1]\n    return [x for i, x in enumerate(l) if i in even_indices and i in odd_indices]\n",
        "num_ids": 83
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #def sort(l: list) -> list:\n    #    return sorted(l, reverse=False)\n    #    return l\n",
        "num_ids": 33
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda x: x, reverse=True)\n",
        "num_ids": 19
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + odd\n",
        "num_ids": 62
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = []\n    odd = []\n    for x in l:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    return [even, odd]\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = []\n    odd = []\n    for elem in l:\n        if elem % 2 == 0:\n            even.append(elem)\n        else:\n            odd.append(elem)\n    return odd + sort_even(even)\n",
        "num_ids": 62
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    if len(l) % 2 == 0:\n        for i in range(len(l)):\n            if i % 2 == 0:\n                even.append(l[i])\n            else:\n                odd.append(l[i])\n        return odd + even\n    else:\n        return l\n",
        "num_ids": 82
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    return [l[i] for i in range(len(l) - 1) if i % 2!= 0]\n",
        "num_ids": 31
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_indices = []\n    odd_indices = []\n",
        "num_ids": 17
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    groups = s.split(\"\")\n    # cycle elements from groups. Each group has 3 characters.\n    # Each group has 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Each group has 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters.\n    # Then we have 3 groups of 3 characters",
        "num_ids": 1024
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return string of unpadded groups.\n    return \"\".join(groups)\n",
        "num_ids": 118
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # split by groups of three characters, concatenate groups.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse reverse groups.\n    groups = [s[-i-3:0:-i] if len(s) >= i else s[i:] for i in range((len(s) + 2) // 3)]\n    # convert groups to a single string.\n    return \"\".join(groups)",
        "num_ids": 123
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return decoded string by cycling groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse order of group elements.\n    groups.reverse()\n    # return string with group concatenated.\n    return \"\".join(groups)\n",
        "num_ids": 90
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove repeating elements.\n    groups = [group[1:] for group in groups if group]\n    return \"\".join(groups)\n",
        "num_ids": 131
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove trailing whitespace.\n    return \"\".join(group[1:-1] for group in groups)\n",
        "num_ids": 125
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # split s into groups of three.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    # e.g. '01234567' -> '1a2b3c4'\n    return \"\".join(groups)\n",
        "num_ids": 92
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    if n==4:\n        return 5\n    if n%2==0:\n        return prime_fib(n//2)+2*prime_fib(n//2)\n    else:\n        return prime_fib(n-1)+2*prime_fib(n-1)\n",
        "num_ids": 104
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prime_fib = [0,1]\n    for i in range(2,n):\n        prime_fib.append(prime_fib[i-1] + prime_fib[i-2])\n    return prime_fib[n-1]\n",
        "num_ids": 64
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 2\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    while True:\n        if n%2 == 0:\n            i += 1\n            n = n//2\n        elif n%2 == 1:\n            i += 1\n            n = n//2\n        if i > n:\n            return i-1\n",
        "num_ids": 100
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n<0:\n        raise ValueError(\"n must be >= 0\")\n",
        "num_ids": 20
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    fibs = [1, 2]\n    while fibs[-1] < n:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[n]\n",
        "num_ids": 54
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n==1:\n        return 1\n    if n==2:\n        return 1\n    if n==3:\n        return 2\n    if n==4:\n        return 3\n    if n==5:\n        return 5\n    fib_1=prime_fib(n-1)\n    fib_2=prime_fib(n-2)\n    return fib_1+fib_2\n",
        "num_ids": 99
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 3)\n",
        "num_ids": 104
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1:\n        return 2\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 38
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n    \n",
        "num_ids": 68
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        prime_fib(n - 2)\n        prime_fib(n - 1)\n        \nprime_fib(4)\n",
        "num_ids": 72
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # YOUR CODE HERE\n    if len(l)!= 3:\n        return False\n    for i in l:\n        if i!= 0:\n            if i!= 0:\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return len(set(l)) == 3\n",
        "num_ids": 21
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Your code here\n    #raise NotImplementedError()\n    if len(l) == 0:\n        return True\n    sum_zero = 0\n    for i in range(0, len(l)):\n        if l[i] == 0:\n            sum_zero += l[i]\n        else:\n            break\n    if sum_zero == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 100
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # create a set of the given list\n    s = set(l)\n    # if the sum of the set is zero, return True\n    return len(s) == 3 and len(s) == 3\n",
        "num_ids": 49
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if len(l) == 0:\n        return False\n    elif l[0] == 0:\n        for item in l[1:]:\n            if item!= 0:\n                return False\n        return True\n    elif l[0] == 0:\n        return False\n    else:\n        return triples_sum_to_zero(l[1:])\n",
        "num_ids": 90
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(set(l))==3\n",
        "num_ids": 12
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(l)-3):\n        # If the sum is zero, then return False.\n        if l[i]+l[i+1]+l[i+2]==0:\n            return False\n    # If we get here, then the sum is not zero.\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) < 3:\n        return False\n    elif l[0] == l[1] == l[2] and len(l) == 3:\n        return True\n    elif l[0] == l[1]!= l[2] or l[1] == l[2]!= l[0] or l[0] == l[2] == l[1]:\n        return False\n    else:\n        return False\n",
        "num_ids": 107
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            # this is the third number that is also zero\n            # if the sum is zero, we have found a triple with that number\n            if l[i] == l[j] + l[j] and l[i]!= 0:\n                return True\n    return False",
        "num_ids": 91
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    if len(l) < 3:\n        return False\n    if triples_sum(l) == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(n-i-j) < 2:\n                cnt += 1\n    return cnt\n",
        "num_ids": 54
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(1 for _ in range(n))",
        "num_ids": 13
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    car_count = 0\n    for car in cars:\n        if car.speed_x == 0:\n            car_count += 1\n    return car_count\n",
        "num_ids": 39
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Implements a car crossing the road; \"crossing\" a straight line\n    if n%2 == 0:\n        return 0\n    else:\n        return (n//2)\n",
        "num_ids": 45
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return 0\n    else:\n        # we'll try to draw the lines that are straight to the middle\n        d = int(n/2)\n        \n        # get the first half of the graph, and save it as the first half of the graph\n        first_half = graph[:d]\n        \n        # and the second half of the graph, and save it as the second half of the graph\n        second_half = graph[d:]\n        \n        # for each car in the first half\n        for x in range(d):\n            \n            # if the first half is not perfectly straight\n            if first_half[x][0]!= first_half[x+1][0]:\n                # if that car is not very heavy, stop\n                if first_half[x][1] <= second_half[x][1]:\n                    return 0\n                # if it is, keep moving\n                else:\n                    # get the car's first letter\n                    car_first = first_half[x][0]\n                    # get the car's second letter\n                    car_second = second_half[x][0]\n                    \n                    # if they are very far from each other\n                    if car_first == car_second:\n                        # return the number of such collisions\n                        return first_half[x][1] - second_half[x][1]\n        return 0\n",
        "num_ids": 318
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n*(n+1)//2\n",
        "num_ids": 13
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    right_car = make_car(n)\n    left_car = make_car(n)\n    right_car_is_right = True\n    left_car_is_left = True\n    right_cars_count = 0\n    left_cars_count = 0\n    for car in [right_car, left_car]:\n        car_is_right = True\n        for car_index in range(n):\n            if car.state == car_index:\n                car_is_right = False\n        for car_index in range(n):\n            if car.state == car_index:\n                car_is_left = False\n        if car_is_right == False and car_is_left == False:\n            right_cars_count += 1\n        if car_is_right == True and car_is_left == False:\n            left_cars_count += 1\n    if right_cars_count == left_cars_count:\n        print(\"Very straight\")\n        return 1\n    elif right_cars_count > left_cars_count:\n        print(\"Straight\")\n        return 2\n    elif right_cars_count < left_cars_count:\n        print(\"Not straight\")\n        return 3\n",
        "num_ids": 286
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(\n        1 for car_id, _, _, _ in car_dictionaries\n        if car_id!= 0\n    )",
        "num_ids": 36
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x1 = [0 for _ in range(n)]\n    x2 = [0 for _ in range(n)]\n    x1[0] = 1\n    x2[0] = 1\n    for i in range(1, n):\n        x1[i] = x1[i-1] + x1[i-1]\n        x2[i] = x2[i-1] + x2[i-1]\n",
        "num_ids": 104
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(l) == list:\n        res = []\n        for element in l:\n            res.append(element + 1)\n        return res\n    else:\n        raise TypeError(\"List argument should be list\")\n",
        "num_ids": 53
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = list(l)\n    l[0] += 1\n    return l\n",
        "num_ids": 21
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.append(l[-1] + 1)\n    return l\n",
        "num_ids": 19
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in l:\n        i += 1\n        result.append(i)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    for num in l:\n        res.append(num+1)\n    return res\n",
        "num_ids": 27
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = list(l)\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 33
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your solution here\n    return len(set(l)) == len(set(set(l)))",
        "num_ids": 28
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = 0\n    for i in range(len(l)):\n        x = x+l[i]\n        if(x==0):\n            return True\n        else:\n            return False\n",
        "num_ids": 48
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # initialize the set\n    set_1 = set(l)\n    # initialize the set with two new sets\n    set_2 = set()\n    # loop through each element in l\n    for i in l:\n        # if the element is in set_1\n        if i in set_1:\n            # if the element is not in set_2\n            if i not in set_2:\n                # add it to set_2\n                set_2.add(i)\n        # if the element is not in set_1\n        else:\n            # add it to set_1\n            set_1.add(i)\n    # return\n    return (len(set_1) == len(set_2))\n",
        "num_ids": 168
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counter = 0\n    # check if the input list contains only 1 element\n    if len(l) == 1:\n        return False\n    # check if the elements in the input list are 0\n    for i in range(len(l)):\n        if l[i]!= 0:\n            # increment counter if the elements are 0\n            if l[i] == 0:\n                counter += 1\n        else:\n            return False\n    # return True if counter is 1\n    if counter == 1:\n        return True\n    # return False if counter is 0\n    else:\n        return False\n",
        "num_ids": 138
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # base case\n    if len(l) < 1:\n        return False\n    \n    # divide\n    index_1 = 0\n    index_2 = 0\n    index_3 = 0\n    \n    while index_1 < len(l):\n        index_1 += 1\n        index_2 += l[index_1]\n        index_3 += l[index_1] * l[index_2]\n        index_3 += l[index_2] * l[index_3]\n        \n        # if index 1 * l[index 1] * l[index 2] == 0\n        if index_1 * l[index_1] * l[index_2] == 0:\n            return True\n        # if index 2 * l[index 1] * l[index 2] == 0\n        elif index_2 * l[index_1] * l[index_2] == 0:\n            return True\n        # else\n        else:\n            return False",
        "num_ids": 227
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # declare variables\n    zero_sum = 0\n    non_zero_sum = 0\n",
        "num_ids": 22
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert all([type(i) == int for i in l]), 'please only input a list of numbers'\n    return len(l) == 1 and l[0] == l[0] and l[0] == 0\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]!= l[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(len(l) - i - 1):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l)<2:\n        return False\n    if l[0]+l[1]==l[2]:\n        return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    string = str(x)\n    if len(string) % 2!= 0:\n        string = string + '0'\n    for i in range(len(string) // 2):\n        string = string[0] + string[1]\n    string += str(base)\n    return string\n",
        "num_ids": 70
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = str(x)\n    x = x.split(\".\")\n    return x[0] + \".\" + x[1] + \".\" + str(base)\n",
        "num_ids": 41
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if base < 10:\n        return ''.join(str(base_numbers[base - 1])) + str(x)\n    else:\n        return change_base(x // base, base) + str(x % base",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return str(x)\n    return str(bin(x)[2:].zfill(base))\n",
        "num_ids": 26
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = int(x)\n    if x < 10:\n        return f'{x}{base}'\n    else:\n        if x < base:\n            return f'{x}0{base}'\n        else:\n            return f'{x}1{base}'\n    pass\n",
        "num_ids": 71
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if base == 10:\n        return str(x)\n    else:\n        x = abs(x)\n        if x == 0:\n            return '0'\n        else:\n            x = x // base\n            return str(x) + change_base(x, base)\n",
        "num_ids": 67
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    remainder = x % base\n    new_base = base\n    while remainder!= 0:\n        if remainder < base:\n            new_base -= 1\n        else:\n            new_base += 1\n        remainder = x // base\n    return str(new_base)\n",
        "num_ids": 68
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x < base:\n        raise ValueError('Value must be bigger than base')\n    else:\n        return str(x // base)\n",
        "num_ids": 34
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if x == 0:\n        return 0\n    else:\n        result = str(x // base)\n        x %= base\n        return result + change_base(x, base)\n",
        "num_ids": 45
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return bin(x)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return a*(h/2)\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #return (a * h) / 2\n    if h < a:\n        print(\"Invalid input.\")\n        return\n    else:\n        return (a * h)/2\n",
        "num_ids": 42
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return 0.5 * a * (h ** 2)\n",
        "num_ids": 15
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a <= 0 or h <= 0:\n        raise ValueError(\"a and h must be positive integers\")\n    return (a*h)/2",
        "num_ids": 34
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a < 0 or h <= 0:\n        return None\n    return (a*h)/2\n",
        "num_ids": 25
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return 0.5 * a * h ** 2\n",
        "num_ids": 13
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a*(h)/2\n",
        "num_ids": 10
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    12\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n        \ndef fib6(n: int):\n    \"\"\"The Fib6 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 2\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    5\n    >>> fib6(6)\n    18\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4)\n",
        "num_ids": 571
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 0\n    elif n==3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n<=1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 47
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 2:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 46
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def fib4(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 70
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 0\n    else:\n        return fib4(n-1)+fib4(n-2)",
        "num_ids": 57
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    9\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n",
        "num_ids": 304
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Base Case\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # End Case\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 67
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) <= 0:\n        raise ValueError(\"list is empty\")\n    else:\n        l = sorted(l)\n        mid = len(l) // 2\n        if len(l) % 2:\n            return l[mid]\n        else:\n            return (l[mid] + l[mid - 1]) / 2\n",
        "num_ids": 81
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return None\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2])/2.0\n    else:\n        return l[n//2]",
        "num_ids": 67
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    mid = len(l) // 2\n    return l[mid]\n",
        "num_ids": 24
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2-1]) / 2",
        "num_ids": 57
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    s= sorted(l)\n    return (s[len(s)//2] if len(s)%2==0 else s[len(s)//2-1])\n",
        "num_ids": 49
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 1:\n        return l[0]\n    n = len(l)\n    half_len = (n - 1) // 2\n    if n % 2 == 0:\n        return (l[half_len] + l[half_len - 1]) / 2.0\n    else:\n        return l[half_len]",
        "num_ids": 83
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l)%2==0:\n        return (l[(len(l)/2)-1]+l[(len(l)/2)])/2.0\n    else:\n        return l[(len(l)/2)]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2-1] + l[len(l)//2])/2\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(l) / len(l)\n",
        "num_ids": 13
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    return sorted(l)[len(l)//2]\n",
        "num_ids": 29
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    rev = ''\n    for char in text:\n        if char.lower() in 'abcdefghijklmnopqrstuvwxyz':\n            rev = char + rev\n    return rev.lower() == rev.lower()\n",
        "num_ids": 56
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # word_list = text.split()\n    # return len(word_list) == len(set(word_list))\n    return True if text == text[::-1] else False\n",
        "num_ids": 46
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.lower()\n    # Note, if the string is only one word, it will always have a space after the word, which we cannot make use of, as the sentence is longer\n    return text[:len(text)//2] == text[::-1]\n",
        "num_ids": 64
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = list(text)\n    for i in range(len(text)//2):\n        if text[i]!= text[-1-i]:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return text == text[::-1]",
        "num_ids": 11
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # if len(text) % 2 == 0:\n    #     return text == text[::-1]\n    # else:\n    #     return False\n    # return text[::-1] == text\n    # return text == text[::-1][::-1]\n    # return text == text[::-1]\n    return text == text[::-1]\n",
        "num_ids": 89
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = text.lower()\n",
        "num_ids": 9
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n",
        "num_ids": 25
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return pow(n, p-2, p)\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    \"\"\"\n    Efficient addition of a two's compliment modulo.\n    >>> modp(9, 2)\n    1\n    >>> modp(1, 2)\n    0\n    >>> modp(1, 11)\n    1\n    \"\"\"\n    \n    r = 1\n    d = 2\n    while n > 0:\n        r = r * 10 + (n % 10)\n        n = n // 10\n    return r * d % p\n",
        "num_ids": 108
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (1 << n) % p",
        "num_ids": 10
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return pow(n, p, 2**n)\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l: int = 1\n    r: int = 1\n    while n!= 0:\n        if n % p == 0:\n            n = n // p\n            r = r * (p - 1)\n        else:\n            n = n % p\n            r = r * p\n    return r % p\n",
        "num_ids": 74
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return pow(n, (n - p), p)\n",
        "num_ids": 15
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    gcd = math.gcd(p, n)\n    return pow(n, gcd, p)\n",
        "num_ids": 27
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 0 or n % p == 0:\n        raise Exception('n must be nonnegative and modulo p')\n    return n % p\n",
        "num_ids": 35
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 1 + pow(n, p - 2, p)\n",
        "num_ids": 16
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a, b = bin(n), bin(p)[2:]\n    while b!= \"0\":\n        a = a[len(a):] + a[:len(a)]\n        b = b[len(b):] + b[:len(b)]\n    return int(a, 2) % int(b, 2)",
        "num_ids": 79
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 33
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 32
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr((ord(ch) - 5) % 26 + ord(\"a\")) for ch in s])\n    \n",
        "num_ids": 32
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    return ''.join(c for c in text if not c in vowels)\n",
        "num_ids": 41
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #for each letter in the string\n    for letter in text:\n        #if the letter is a vowel\n        if letter in VOWELS:\n            #append it to the list\n            letters.append(letter)\n        #if not, append a space to the end of the list\n        else:\n            letters.append(\" \")\n    #return the list\n    return \"\".join(letters)\n",
        "num_ids": 93
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([c for c in text if c not in \"aeiouAEIOU\"])\n",
        "num_ids": 26
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for letter in text:\n        if letter in vowels:\n            new_text += letter\n        else:\n            new_text +=''\n    return new_text\n",
        "num_ids": 61
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char in vowels:\n            new_text += char\n        else:\n            new_text += char.lower()\n    return new_text\n",
        "num_ids": 64
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #Variables\n    vowels = \"aeiouAEIOU\"\n    #Looping\n    for char in text:\n        if char in vowels:\n            #Variable update\n            text = text.replace(char, \"\")\n    #Returning\n    return text",
        "num_ids": 65
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    text = text.lower()\n    vowels_removed = ''\n    for i in text:\n        if i in vowels:\n            vowels_removed += i\n        else:\n            vowels_removed +=''\n    return vowels_removed\n    \ndef first_letter(text):\n    \"\"\"\n    first_letter is a function that takes string as an argument and returns the first letter of the word.\n    >>> first_letter('Hello')\n    'h'\n    >>> first_letter('Aa Bb Cc')\n    'a'\n    \"\"\"\n    text = text.lower()\n    return text[0]\n",
        "num_ids": 176
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text = text.replace('\\n', '').replace(' ', '')\n    s = ''\n    for i in text:\n        if i in vowels:\n            s += i\n    return s\n",
        "num_ids": 84
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n",
        "num_ids": 58
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    text = text.lower()\n    removed_vowels = \"\"\n    \n    for letter in text:\n        if letter in vowels:\n            removed_vowels += letter\n        else:\n            removed_vowels +=''\n    return removed_vowels.strip(",
        "num_ids": 106
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in l if x < t]\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(x < t for x in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return all(x<=t for x in l)\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return Tru",
        "num_ids": 22
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(map(bool, l)) <= t\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return any([all(num <= t for num in l) for t in range(1, 101)])\n",
        "num_ids": 26
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x+y\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    1\n    >>> subtract(5, 7)\n    3\n    \"\"\"\n    return x-y\ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    21\n    \"\"\"\n    return x*y\ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    2\n    >>> divide(5, 7)\n    4\n    \"\"\"\n    return x/y\ndef modulo(x: int, y: int):\n    \"\"\"Return the modulo of x and y\n    >>> modulo(2, 3)\n    1\n    >>> modulo(5, 7)\n    5\n    \"\"\"\n    return x%y\ndef is_odd(x: int):\n    \"\"\"Is the number x odd?\"\"\"\n    return x%2==1\ndef is_even(x: int):\n    \"\"\"Is the number x even?\"\"\"\n    return x%2==0\ndef add_strings(x: str, y: str):\n    \"\"\"Add two strings x and y.\n    >>> add_strings(\"Hi\", \"Bye\")\n    'HiBye'\n    >>> add_strings(\"Cat\", \"Dog\")\n    'CatDog'\n    \"\"\"\n    return x+y\ndef is_palindrome(x: int):\n    \"\"\"Is x a palindrome?\"\"\"\n    return str(x) == str(x)[::-1]\n",
        "num_ids": 399
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> sub(2, 3)\n    -1\n    >>> sub(5, 7)\n    3\n    \"\"\"\n    return x - y\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> mul(2, 3)\n    6\n    >>> mul(5, 7)\n    27\n    \"\"\"\n    return x * y\ndef div(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> div(2, 3)\n    1\n    >>> div(5, 7)\n    1.0\n    \"\"\"\n    return x / y\n",
        "num_ids": 177
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s0 == s1:\n        return True\n    return any(s1[i] == s0[i] for i in range(len(s0)))\n",
        "num_ids": 40
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s0 = sorted(s0)\n    s1 = sorted(s1)\n",
        "num_ids": 21
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s0, s1 = s0.lower(), s1.lower()\n    return len(set(s0).intersection(s1)) == len(s0)\n",
        "num_ids": 41
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s0 == s1 or s0 == s1.lower()\n",
        "num_ids": 18
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    \n    return True\n",
        "num_ids": 59
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # replace every number by a string and compare the result\n    if len(s0)!= len(s1):\n        return False\n    \n    for index, char in enumerate(s0):\n        if char!= s1[index]:\n            return False\n    \n    return True\n",
        "num_ids": 68
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n<2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n<0 or n>=100:\n        raise ValueError(\"n must be in [1,100]\")\n    \n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return fib(n-1)+fib(n-2)\n",
        "num_ids": 74
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\ndef fib2(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    n, prev = 0, 0\n    nth = 0\n    while n < n:\n        prev, nth = nth, prev + nth\n        n += 1\n    return nth\ndef factorial(n: int) -> int:\n    \"\"\"Return the factorial of n.\n    >>> factorial(10)\n    3628800\n    >>> factorial(0)\n    1\n    >>> factorial(10)\n    36028800\n    \"\"\"\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n",
        "num_ids": 249
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Fill this in.\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def _fib(n):\n        if n < 2:\n            return 1\n        return _fib(n-2) + _fib(n-1)\n    return _fib(n)\n",
        "num_ids": 50
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return fib(n-1)+fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(True)\n        elif c == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n",
        "num_ids": 62
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    stack = []\n    for s in brackets:\n        if s == '>':\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == '<':\n                stack.pop()\n            else:\n                return False\n    return True",
        "num_ids": 72
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brackets = brackets.replace(\"<\",\"(\")\n    brackets = brackets.replace(\">\",\")\")\n    return brackets == \"()\"\n",
        "num_ids": 35
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    brackets = brackets.replace(\"<\", \"<>\")\n    return all(isinstance(c, str) for c in brackets)\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    brackets = brackets.split('<>')\n    for i in range(len(brackets)):\n        for j in range(len(numbers)):\n            if brackets[i] == '<' and numbers[j] in brackets[i+1]:\n                return True\n    return False\n",
        "num_ids": 105
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for b in brackets:\n        if b not in [\"<\", \">\"]:\n            return False\n    return True",
        "num_ids": 27
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for bracket in brackets:\n        if bracket!= \">\":\n            if bracket == \"<\" and bracket == \">\":\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if len(stack) > 0:\n                return False\n        elif bracket == \"<\":\n            if len(stack) > 0:\n                if stack[-1] == \"<\":\n                    stack.pop()\n                    return True\n            else:\n                stack.append(bracket)\n                return False\n    if len(stack) == 0:\n        return True\n",
        "num_ids": 105
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    open_brackets = ['<', '>']\n    closed_brackets = ['<>']\n    for bracket in brackets:\n        if bracket in open_brackets:\n            closed_brackets.append(bracket)\n        else:\n            open_brackets.append(bracket)\n    \n    return all(bracket in closed_brackets for bracket in open_brackets)\n",
        "num_ids": 92
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all(c in {\"<\", \">\"} for c in brackets)\n    \ndef check_if_digits(s: str) -> bool:\n    \"\"\" s is a string of alphabets.\n    return True if s has at least one alphabetic letter.\n    >>> check_if_digits(\"abcdef\")\n    False\n    >>> check_if_digits(\"abcd\")\n    True\n    >>> check_if_digits(\"abc\")\n    True\n    \"\"\"\n    return all(c in \"1234567890\" for c in s)\n",
        "num_ids": 133
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return False\n    if l[0] >= l[-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for el in l:\n        if el < 0:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < 1:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(x>=y for x, y in zip(l, l[1:]))\n",
        "num_ids": 24
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in l:\n        if l.count(i) >= 2:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return l == sorted(l)\n",
        "num_ids": 10
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return any(c < d for d, c in groupby(l, lambda x: x <= x))\n",
        "num_ids": 26
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] <= l[i + 1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = []\n    for l in l1:\n        if l in l2:\n            res.append(l)\n    return res\n    # return [x for x in l1 if x in l2]\n",
        "num_ids": 51
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l3 = []\n    for i in l1:\n        if i not in l3:\n            l3.append(i)\n    for i in l2:\n        if i not in l3:\n            l3.append(i)\n    return l3\n",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return set(sorted(l1) & set(l2)",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # If none of the elements are unique return the original list\n    if len(l1) == len(l2):\n        return l1\n",
        "num_ids": 34
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l1, l2 = sorted(l1), sorted(l2)\n    return set(l1) & set(l2)\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # print(f\"common({l1},{l2})\")\n    n = len(l1)\n    if n <= 1:\n        return l1\n    else:\n        if l2[0] not in l1:\n            # print(f\"common({l1},{l2})\")\n            l1.append(l2[0])\n            l2.pop(0)\n            # print(f\"l1={l1},l2={l2}\")\n            common(l1,l2)\n        return l1\n",
        "num_ids": 129
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for x in l1:\n        if x in l2:\n            result.append(x)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = []\n",
        "num_ids": 6
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [l1[i] for i in range(len(l1)) if l1[i] not in l2]\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert n > 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    largest_prime_factor = 1\n    while n % 2 == 0:\n        largest_prime_factor += 1\n        n = n // 2\n    return largest_prime_factor\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factors = []\n    div = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        elif n % 3 == 0:\n            n = n / 3\n        else:\n            n = n - 1\n        factors.append(n)\n    for x in factors:\n        if x == 1 or x == 2:\n            continue\n        div.append(x)\n    return max(factors)\n",
        "num_ids": 109
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = 2\n    while x < n:\n        y = n % x\n        if y == 0:\n            x += 1\n        else:\n            break\n    return x\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # if n is an integer, return n\n    if is_integer(n):\n        return n\n    \n    # if n is not an integer, find the largest prime factor\n    n_largest_factor = 1\n    for i in range(2, n):\n        while n % i == 0:\n            n /= i\n            n_largest_factor = i\n    \n    # if n is not an integer, keep n_largest_factor\n    if n_largest_factor == 1:\n        n_largest_factor = 2\n    \n    return n_largest_factor\n",
        "num_ids": 136
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factor = 1\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    prime = 2\n    while (n % prime) == 0:\n        prime += 1\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factors = []\n    while n%2 == 0:\n        n = n//2\n        factors.append(2)\n    for i in range(3,int(sqrt(n))+1,2):\n        while n%i==0:\n            n = n//i\n            factors.append(i)\n    if n > 2:\n        factors.append(n)\n    return max(factors)\n",
        "num_ids": 102
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(range(1,n+1))",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return n*n",
        "num_ids": 6
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    for _ in range(1,n+1):\n        total += _\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s=0\n    for i in range(1,n+1):\n        s+=i\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for opening in [\"(\", \")\"]:\n        for closing in [\"(\", \")\"]:\n            if brackets.count(opening) == brackets.count(closing):\n                return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    index = 0\n    stack = []\n    \n    while index < len(brackets):\n        if brackets[index] == \"(\":\n            stack.append(index)\n            index += 1\n        else:\n            if len(stack) == 0 or brackets[index]!= \")\":\n                return False\n            else:\n                index += 1\n                continue\n",
        "num_ids": 85
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    my_stack = []\n    for i,c in enumerate(brackets):\n        if c == \"(\":\n            my_stack.append(i)\n        elif c == \")\":\n            if len(my_stack) > 0 and my_stack[-1] == \"(\":\n                my_stack.pop()\n            else:\n                return False\n    return len(my_stack) == 0\n",
        "num_ids": 96
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(bracket == brackets[0] for bracket in brackets)",
        "num_ids": 17
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if brackets == \"\":\n        return False\n    if brackets.startswith(\"(\"):\n        return True\n    if brackets.endswith(\")\"):\n        return True\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            if brackets[i-1] == \")\":\n                continue\n            return False\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    bracket = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            bracket += 1\n        elif brackets[i] == \")\":\n            bracket -= 1\n        elif brackets[i] == \")\":\n            if bracket == 0:\n                return False\n    return bracket == 0\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    opening_brackets = {\"(\": \")\",\"[\":\"]\",\"{\":\"}\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            return True\n    return False",
        "num_ids": 46
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(')')\n        elif bracket == ')':\n            if stack.pop() == '(':\n                return False\n    return stack == []\n",
        "num_ids": 57
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    open_brackets = {\"(\":\")\", \")\":\")\",}\n    for i in range(len(brackets)):\n        if brackets[i] in open_brackets.keys():\n            if brackets[i] not in open_brackets.values():\n                return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket in (\"(\", \")\", \")\"):\n            count += 1\n        else:\n            return False\n    return count == len(brackets)",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    der = []\n    for i in range(len(xs) - 1):\n        der.append((xs[i+1] - xs[i] * xs[i]) / (xs[i+1] - xs[i]))\n    return der\n",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    der = [0]*len(xs)\n    x = xs[0]\n    for i in range(1, len(xs)):\n        x = xs[i] - x * xs[i-1]\n        der[i] = x\n    return der\n",
        "num_ids": 67
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x[1] for x in zip(xs[0:-1], xs[1:], xs[2:])]\n",
        "num_ids": 33
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = [1]\n    for i in range(len(xs) - 1):\n        result.append(xs[i + 1] * result[i] + xs[i])\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    derivative = [1]\n    for i in range(1, len(xs) - 1):\n        derivative.append(xs[i] * derivative[i - 1] + xs[i + 1] * derivative[i])\n    return derivativ",
        "num_ids": 63
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    ret = [0 for i in range(len(xs)-1)]\n    for i in range(len(xs)-1,0,-1):\n        ret[i-1] = xs[i]\n        for j in range(i):\n            ret[i-1] = ret[i-1]*xs[j]\n    return ret\n",
        "num_ids": 82
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(map(lambda x: x[1], reversed(xs)))\n",
        "num_ids": 19
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return xs[0] + xs[1] * x + xs[2] * x**2",
        "num_ids": 26
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x, xs = xs[0], xs[1:]\n    return [x, x**2, x*x**3]\n",
        "num_ids": 34
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [xs[1], xs[3]]\n",
        "num_ids": 14
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert 0 <= n <= 10**5, \"n must be an integer within the range [0, 10^5].\"\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 79
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def fibfib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fibfib(n)\ndef main():\n    \"\"\"Main function of the program.\n    Asks the user to enter an integer n.\n    Prints the n-th Fibonacci number.\n    \"\"\"\n    # Asks the user to enter an integer n\n    n = int(input(\"Enter an integer number n = \"))\n    print(f\"The n-th fibonacci number is {fibfib(n)}\")\n",
        "num_ids": 170
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError(\"'n' must be positive.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 78
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \ndef sum_divisors(n: int):\n    \"\"\"The sum of all divisors of a number n.\n    >>> sum_divisors(5)\n    15\n    >>> sum_divisors(6)\n    9\n    >>> sum_divisors(0)\n    1\n    \"\"\"\n    if n <= 2:\n        return n\n    else:\n        return sum_divisors(n-2) + sum_divisors(n-3)\n",
        "num_ids": 165
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def fibfib(n: int):\n        if n < 2:\n            return n\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 52
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # start with the first two fibonacci numbers as 0 and 1\n    # divide the sequence by two.\n    # we'll have to do this for each second number\n    # and then make the 2nd number the current number\n    # we'll use this number to get the previous two numbers\n    # we'll use the previous two numbers to\n    # find the nth number\n    # return the nth number\n    def fib(n):\n        if n < 2:\n            return n\n        return fib(n-1) + fib(n-2)\n    return fib(n",
        "num_ids": 132
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            vowels += 1\n    return vowels\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = {'a','e','i','o','u','y'}\n    vowels_count = 0\n    for c in s:\n        if c in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 62
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # return len(set(s))\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 64
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here.\n    count = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOU\":\n            if s[i+1] in \"AEIOU\":\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            total += 1\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    counter = 0\n    for i in s:\n        if i in 'aeiou':\n            counter += 1\n        else:\n            return counter\n    return counter\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = set('AEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in \"AEIOUy\":\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = 'a', 'e', 'i', 'o', 'u'\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = set(\"aeiou\")\n    count = 0\n    for c in s:\n        if c in vowels:\n            count+=1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = str(x)\n    if shift > len(x):\n        return x\n    else:\n        shift = len(x) - shift\n        return x[shift:] + x[:shift]\n    \ndef cyclic_shift(x, shift):\n    \"\"\"Shift the digits of the integer x, shift the digits by shift, and return the result as a string.\n    >>> cyclic_shift(12, 1)\n    \"2\"\n    >>> cyclic_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x = str(x)\n    if shift < 0:\n        shift *= -1\n    result = []\n    while shift:\n        shift, digit = divmod(shift, len(x))\n        result.append(x[-digit])\n    return ''.join(result[::-1])\n",
        "num_ids": 195
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift > len(x):\n        return x\n    return x[-shift:] + x[:-shift]\n",
        "num_ids": 28
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([str(int(i) + shift) for i in x[::-1]]",
        "num_ids": 25
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    while shift > len(str(x)):\n        shift -= len(str(x))\n        x = x * 10\n    return str(x) + str(x)[-shift:]",
        "num_ids": 44
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if shift > len(x):\n        return x\n    elif shift == 0:\n        return x[::-1]\n    elif shift < len(x):\n        return x[shift:]+x[:shift]\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(str(int(x) - shift) for x in str(x))\n",
        "num_ids": 24
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # define shift\n    shift_length = len(str(shift))\n    if shift > shift_length:\n        shift = shift_length - 1\n    # define result\n    result = ''\n    # loop\n    for i in range(shift_length):\n        digit = x % 10\n        result = str(digit) + result\n        x = x // 10\n    # return result\n    return result",
        "num_ids": 93
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    else:\n        return str(str(x)[-shift:])\n    \n    \ndef main():\n    \"\"\"\n    A simple program to print out the values in decimal that are circular\n    when the shift is greater than the length of the input string.\n    \"\"\"\n    for i in range(0, 10):\n        print(str(i) + ':'+ str(circular_shift(i, 10)))\n    \n    print(str(i) + ':'+ str(circular_shift(i, -1)))\n    print(str(i) + ':'+ str(circular_shift(i, -10)))\n",
        "num_ids": 165
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(str(int(i) + shift) for i in x)\n",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join([str(int(x)**shift) for x in x.split()])\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum([ord(c) for c in s if c.isalpha()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(ord(i) - ord('0') for i in s",
        "num_ids": 18
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(ord(c) for c in s if c.isupper()",
        "num_ids": 19
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(0, len(s)):\n        if i % 2 == 1:\n            result = result + ord(s[i])\n    return result",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s) <= 0:\n        return 0\n    return sum(ord(i) for i in s)\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 65)\n",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = s.replace(\" \", \"\")\n    s = s.lower()\n    num = 0\n    \n    for i in range(len(s)):\n        if s[i] == \"A\" or s[i] == \"a\":\n            num += ord(\"A\") - ord(\"a\")\n        elif s[i] == \"B\" or s[i] == \"b\":\n            num += ord(\"B\") - ord(\"b\")\n        elif s[i] == \"C\" or s[i] == \"c\":\n            num += ord(\"C\") - ord(\"c\")\n        elif s[i] == \"D\" or s[i] == \"d\":\n            num += ord(\"D\") - ord(\"d\")\n        elif s[i] == \"E\" or s[i] == \"e\":\n            num += ord(\"E\") - ord(\"e\")\n        elif s[i] == \"F\" or s[i] == \"f\":\n            num += ord(\"F\") - ord(\"f\")\n        elif s[i] == \"G\" or s[i] == \"g\":\n            num += ord(\"G\") - ord(\"g\")\n        elif s[i] == \"H\" or s[i] == \"h\":\n            num += ord(\"H\") - ord(\"h\")\n        elif s[i] == \"I\" or s[i] == \"i\":\n            num += ord(\"I\") - ord(\"i\")\n        elif s[i] == \"J\" or s[i] == \"j\":\n            num += ord(\"J\") - ord(\"j\")\n        elif s[i] == \"K\" or s[i] == \"k\":\n            num += ord(\"K\") - ord(\"k\")\n        elif s[i] == \"L\" or s[i] == \"l\":\n            num += ord(\"L\") - ord(\"l\")\n        elif s[i] == \"M\" or s[i] == \"m\":\n            num += ord(\"M\") - ord(\"m\")\n        elif s[i] == \"N\" or s[i] == \"n\":\n            num += ord(\"N\") - ord(\"n\")\n        elif s[i] == \"O\" or s[i] == \"o\":\n            num += ord(\"O\") - ord(\"o\")\n        elif s[i] == \"P\" or s[i] == \"p\":\n            num += ord(\"P\") - ord(\"p\")\n        elif s[i] == \"Q\" or s[i] == \"q\":\n            num += ord(\"Q\") - ord(\"q\")\n        elif s[i] == \"R\" or s[i] == \"r\":\n            num += ord(\"R\") - ord(\"r\")\n        elif s[i] == \"S\" or s[i] == \"s\":\n            num += ord(\"S\") - ord(\"s\")\n        elif s[i] == \"T\" or s[i] == \"t\":\n            num += ord(\"T\") - ord(\"t\")\n        elif s[i] == \"U\" or s[i] == \"u\":\n            num += ord(\"U\") - ord(\"u\")\n        elif s[i] == \"V\" or s[i] == \"v\":\n            num += ord(\"V\") - ord(\"v\")\n        elif s[i] == \"W\" or s[i] == \"w\":\n            num += ord(\"W\") - ord(\"w\")\n        elif s[i] == \"X\" or s[i] == \"x\":\n            num += ord(\"X\") - ord(\"x\")\n        elif s[i] == \"Y\" or s[i] == \"y\":\n            num += ord(\"Y\") - ord(\"y\")\n        elif s[i] == \"Z\" or s[i] == \"z\":\n            num += ord(\"Z\") - ord(\"z\")\n        else:\n            num += ord(s[i]) - ord(s[i - 1])\n",
        "num_ids": 945
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s) < 1:\n        return 0\n    \n    s = s.upper()\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c) - ord(\"A\") + 1\n        elif c.islower():\n            sum += ord(c) - ord(\"a\") + 1\n        elif c.isdigit():\n            sum += int(c)\n    return sum\n",
        "num_ids": 106
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if (s==''):\n        return 0\n    if (s[0]=='0' or s[0]=='1' or s[0]=='2' or s[0]=='3' or s[0]=='4' or s[0]=='5'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='0'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='1'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='2'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='3'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='4'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='5'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='6'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='7'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='8'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='9'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='10'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='11'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='12'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='13'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='14'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='15'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='16'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='17'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='18'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='19'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='20'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='21'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='22'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='23'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='24'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='25'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='26'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='27'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='28'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='29'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='30'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='31'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='32'):\n        return fruit_distribution(s[1:],n)\n    if (s[0]=='33'):\n        retur",
        "num_ids": 1026
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for fruit in range(0,n):\n        if s[fruit] == 'p':\n            return fruit\n    return 0\n",
        "num_ids": 31
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    d=dict()\n    for i in range(len(s)):\n        if s[i] in d.keys():\n            d[s[i]]+=1\n        else:\n            d[s[i]]=1\n    if n==0:\n        return 0\n    if n==1:\n        return d[s[0]]\n    return d[s[0]]*(fruit_distribution(s[1:],n-1)+1)\n    \n",
        "num_ids": 111
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    d = {1:0,2:0,3:0}\n    i = 0\n    for i in range(len(s)):\n        if(s[i]=='a'):\n            d[1]+=1\n        elif(s[i]=='o'):\n            d[2]+=1\n        elif(s[i]=='m'):\n            d[3]+=1\n    n=int(n)\n    if(d[3]>=n):\n        return n\n    else:\n        return 0\n",
        "num_ids": 134
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = 0\n    for i in range(len(s)):\n        res += int(s[i])* (4 if i == 0 else 5)\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    dist = 0\n    #fruit = ['apples', 'oranges','mango']\n    #print(f\"for sugar = {s} and {n} it should return {len(fruit)}\")\n    for i in s:\n        if i == '1':\n            dist += 1\n        else:\n            dist -= 1\n    return dist\n",
        "num_ids": 81
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    basket = []\n    mango_fruits = 0\n    \n    if s == \"0\":\n        basket.append(\"0\")\n        \n    else:\n        for i in s:\n            basket.append(i)\n    \n    #for m in s:\n    #    mango_fruits += int(m)\n    \n    if len(s) % 2 == 0:\n        print(f\"{basket}\")\n        \n    else:\n        for i in range(0,len(s)):\n            if s[i] == \"0\":\n                mango_fruits += int(s[i])\n            else:\n                basket.pop()\n                basket.pop()\n                basket.append(s[i])\n                \n    return(mango_fruits)\n",
        "num_ids": 192
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = s.split(' ')\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d[max(d)]\n",
        "num_ids": 59
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    total_fruit = s.count('o') + s.count('a') + s.count('e')\n    mango_fruits = s.count('m')\n    fruit_fruits = s.count('f') + s.count('e') + s.count('o')\n    return total_fruit - mango_fruits - fruit_fruits\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fruits = ['apples', 'oranges','mango']\n    count = 0\n    for fruit in fruits:\n        if fruit == 'apples':\n            count+=1\n        if fruit == 'oranges':\n            count+=2\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(x) for x in str(sorted(arr, reverse=True)[0])]\n",
        "num_ids": 26
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if arr == []:\n        return []\n    minimum_even = min(arr)\n    for index in range(len(arr)):\n        if arr[index] % 2 == 0:\n            continue\n        if index + 1 < len(arr):\n            if arr[index] == arr[index + 1] and arr[index] % 2 == 0:\n                return [arr[index]//2, index]\n    return []\n",
        "num_ids": 101
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Result of results = index\n    # If result = [2, 2] the node with smallest even value is 2\n    # Else\n    #     If result = [4, 2] then 2 has the smallest even value\n    #             if 4 is the smallest value\n    #             then the node with smallest even value is 2\n    #\n    # Arr[result] = {2,1}\n    \n    if not arr:\n        return []\n    \n    sorted_arr = sorted(arr)\n    \n    res = []\n    for i in range(len(sorted_arr)):\n        if i % 2 == 0:\n            res.append(sorted_arr[i // 2])\n        else:\n            res.append(sorted_arr[i])\n    \n    return sorted(res)\n",
        "num_ids": 190
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if arr == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    heap = []\n    for value in arr:\n        heappush(heap, (value, value))\n    if len(heap) == 1:\n        return heapq.heappop(heap)[1]\n    if len(heap) == 0:\n        return None\n    smallest_value = heapq.heappop(heap)[0]\n    while len(heap) > 1:\n        smallest_index = heapq.heappop(heap)[1]\n        if smallest_value + smallest_index % 2 == 0:\n            heapq.heappush(heap, (smallest_value, smallest_index))\n            smallest_value = heapq.heappop(heap)[0]\n            smallest_index = heapq.heappop(heap)[1]\n        else:\n            heapq.heappush(heap, (smallest_value, smallest_index))\n            smallest_index = heapq.heappop(heap)[1]\n            heapq.heappush(heap, (smallest_value, smallest_index))\n    return heapq.heappop(heap)[1]\n",
        "num_ids": 278
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 28
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr)\n    if len(arr) == 3:\n        if min(arr) == arr[1] % 2 and min(arr) == arr[1] // 2:\n            return arr[0]\n        elif min(arr) == arr[1] // 2 or min(arr) == arr[1] % 2:\n            return min(arr)\n        return arr[0]\n    if len(arr) == 4:\n        if arr[1] % 2 == 0 and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1] % 2 == 0 and arr[1]!= arr[3]:\n            return arr[0]\n        elif arr[1] % 2!= 0 and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1] % 2!= 0 and arr[1]!= arr[3]:\n            return arr[0]\n        elif arr[1]!= arr[2] and arr[1]!= arr[3]:\n            return arr[0]\n        else:\n            return arr[0]\n",
        "num_ids": 305
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_even = 0\n    ans = []\n",
        "num_ids": 13
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    nodes = sorted(arr)\n    n = len(nodes)\n",
        "num_ids": 21
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    nodes = sorted(arr)\n    \n    if not nodes:\n        return [0, 0]\n    \n    smallest_value = nodes[0]\n    \n    index = 0\n    \n    for i in range(1, len(nodes)):\n        if nodes[i] % 2 == 0:\n            smallest_value = min(smallest_value, nodes[i])\n            index = i\n    \n    return [smallest_value, index]\n    \ndef tree_to_linked_list(arr):\n    \"\"\"\n    \"Given an array representing a tree, convert the tree to a linked list\"\n    Example:\n        Input: [4,2,3]\n        Output: [4,2,3,null,null,null,1,null,null,null,null,null,null,null,null,null,null]\n    \"\"\"\n    \n    head = None\n    \n    for value in arr:\n        node = TreeNode(value)\n        if head is None:\n            head = node\n        else:\n            node.parent = head\n            \n            if node.value < head.value:\n                head.right = node\n            else:\n                head.left = node\n    \n    return head\n    \n    \n    \n    ",
        "num_ids": 297
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max = 0\n    for i in lst:\n        if i > max and (i % i == 0 or i % 2 == 0):\n            max = i\n        elif i > max:\n            max = i\n    return max\n",
        "num_ids": 56
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import heapq\n    res = []\n    for val in lst:\n        if len(res) < 1:\n            res.append(val)\n        else:\n            if res[0] < val:\n                res[0] = val\n            else:\n                heapq.heappush(res, val)\n    if len(res) == 0:\n        return -1\n    return res[0]\n",
        "num_ids": 99
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    new_list = []\n    for i in lst:\n        if i not in new_list:\n            new_list.append(i)\n    print(new_list)\n    x = new_list.index(max(new_list))\n    return x\n",
        "num_ids": 64
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if lst == []:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # If the list has only one element, return the element itself\n    if len(lst) == 1:\n        return lst[0]\n    # Get the index of the largest number in the list\n    index = get_largest_number(lst)\n    # Get all numbers with frequency greater than or equal to the largest number\n    numbers = find_all_numbers_with_frequency_greater_than_or_equal(lst, index)\n    # Return the smallest number in the list if there are still numbers to search\n    if len(numbers) == 0:\n        return min(lst)\n    # Return the smallest number in the list if there are still numbers to search\n    return numbers[0]\n",
        "num_ids": 167
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create an empty list to store results\n    result = []\n    # Iterate over list and find the highest number\n    for i in range(lst[0], -1, -1):\n        if lst[i] > 0 and lst[i] not in result:\n            result.append(lst[i])\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #return max(lst, key=lambda x: lst.count(x))\n    max_value = max(lst)\n    max_frequency = lst.count(max_value)\n    for i in lst:\n        if i > max_value:\n            max_value = i\n            max_frequency = lst.count(i)\n    return max_value\n",
        "num_ids": 91
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    '''\n    def has_count(t):\n        return sum(c < t for c in lst) > 0\n    '''\n    def has_count(t):\n        return [lst.count(i) for i in lst if has_count(i)] > [0]\n",
        "num_ids": 70
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # lst = list(map(int, input().strip().split()))\n    lst.sort()\n    for i in lst:\n        if i >= 0:\n            return i\n    return -1\n",
        "num_ids": 51
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max = 0\n    min = 1\n",
        "num_ids": 11
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # You must use the sorted() function, not list.sort()\n    return sorted(lst, reverse=True)\n",
        "num_ids": 29
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(lst)\n    if n == 0:\n        return []\n    if n == 1:\n        return [lst[0]]\n    if n == 2:\n        return [lst[0], lst[1]]\n    if n == 3:\n        return [lst[0], lst[1], lst[2]]\n    if n == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if n == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    # We know we can sort the array.\n",
        "num_ids": 162
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(lst, reverse=True)",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            result.append(lst[i])\n        else:\n            result.append(lst[i - 1])\n            result.append(lst[i])\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if lst == []:\n        return lst\n    if len(lst) == 1:\n        return [lst[0]] + strange_sort_list(lst[1:])\n    if len(lst) == 2:\n        return [lst[0]] + [lst[1]] + strange_sort_list(lst[1:])\n    if len(lst) == 3:\n        return [lst[0]] + [lst[1]] + [lst[2]] + strange_sort_list(lst[1:])\n    if len(lst) == 4:\n        return [lst[0]] + [lst[1]] + [lst[2]] + [lst[3]] + strange_sort_list(lst[1:])\n",
        "num_ids": 188
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_lst = []\n    for x in lst:\n        sorted_lst.append(x)\n        sorted_lst.sort()\n    return sorted_lst\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #BASE CASE\n    if len(lst) <= 1:\n        return lst\n    \n    minimum = lst[0]\n    if lst[0] < lst[1]:\n        #BASE CASE:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    #BASE CASE:\n    return strange_sort_list([minimum] + lst[1:])\n",
        "num_ids": 102
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a >= b + c or b >= a + c or c >= a + b:\n        return -1\n    if a == b or b == c or c == a:\n        return 0\n    return round(((a * b) - (c * b)) / (2 * a),2)\n",
        "num_ids": 70
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a + b <= c and b + c <= a and a + c <= b:\n        if a == b == c:\n            return round(1 / 3, 2)\n        elif a == b or a == c or b == c:\n            return round(0.5 * (a + b), 2)\n        elif a == b or a == c or b == c:\n            return -1\n        elif a == b and b == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and b == c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and b!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b and a!= c:\n            return round(0.5 * (a + b + c), 2)\n        elif a == b or a!= c:\n            return round(0.5 * (a + b + c), 2)\n    else:\n        return -1\n",
        "num_ids": 318
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == b == c:\n        return 1\n    else:\n        if a + b > c and a + c > b and b + c > a:\n            return (a * b) / 2\n        else:\n            return -1\n",
        "num_ids": 58
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if (a == b) and (a == c) and (b == c):\n        return round(sqrt(a**2 + b**2 + c**2), 2)\n    else:\n        if a > b:\n            if b > c:\n                return (a + b + c) / 2\n            else:\n                return -1\n        else:\n            if a > c:\n                return (b + c) / 2\n            else:\n                return -",
        "num_ids": 110
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # verify that the three sides make a valid triangle\n    def check_triangle(sides):\n        # check that sum of all three sides is less than the third side\n        if sides == 0:\n            return False\n        elif sides == 1:\n            return True\n        elif sides == 2:\n            return True\n        elif sides < 3:\n            return False\n        else:\n            return False\n    \n    # verify that the sum of any two sides is greater than or equal to the third side\n    def check_valid_side(sides):\n        if sides == 0 or sides == 1:\n            return False\n        elif sides == 2:\n            return True\n        elif sides > 2:\n            return False\n        else:\n            return True\n    \n    # check that the sum of any two sides is less than the third side\n    def check_side_greater(sides):\n        if sides == 0 or sides == 1:\n            return False\n        elif sides == 2:\n            return True\n        elif sides > 3:\n            return False\n        else:\n            return True\n    \n    # check that the sum of any two sides is less than or equal to the third side\n    def check_side_greater(sides):\n        if sides < 0 or sides >= 3:\n            return False\n        elif sides > 2:\n            return True\n        else:\n            return False\n    \n    # check that the sum of any two sides is greater than or equal to the third side\n    def check_side_greater(sides):\n        if sides < 0:\n            return False\n        elif sides >= 3:\n            return True\n        else:\n            return False\n    \n    # calculate the area of the triangle\n    def triangle_area(a, b, c):\n        if check_valid_side(a) or check_valid_side(b) or check_valid_side(c):\n            if check_side_greater(a) or check_side_greater(b) or check_side_greater(c):\n                if check_triangle(a):\n                    # calculate the area of a triangle using the formula:\n                    # area = (sides x 3)(3 sides x 2)\n                    # where sides is the sum of any two sides of the triangle\n                    return (a * c) / 2\n                elif check_triangle(b):\n                    # calculate the area of a triangle using the formula:\n                    # area = (sides x 2)(sides x 1)\n                    # where sides is the sum of any two sides of the triangle\n                    return (b * c) / 2\n                elif check_triangle(c):\n                    # calculate the area of a triangle using the formula:\n                    # area = (sides x 1)(sides x 0)\n                    # where sides is the sum of any two sides of the triangle\n                    return (c * b) / 2\n            else:\n                return -1\n        else:\n            return -1\n",
        "num_ids": 688
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if is_valid_triangle(a, b, c):\n        if (a + b > c):\n            return round(triangle_area(a, b, c - a), 2)\n        else:\n            return round(triangle_area(a, c, b - a), 2)\n    else:\n        return -1\n",
        "num_ids": 80
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Calculate the area of the triangle using formula\n    if (a == b == c):\n        return 1\n    elif a + b < c:\n        return (c*(a+b))/2\n    elif a + c < b:\n        return (c*(b+a))/2\n    elif b + c < a:\n        return (c*(a+b))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif a + c < b:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (b*(c+a))/2\n    elif b + c < a:\n        return (a*(c+b))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+b))/2\n    elif a + c < b:\n        return (c*(b+a))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif a + b < c:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif a + b < c:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (c*(a+b))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(b+c))/2\n    elif a + c < b:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + b < c:\n        return (a*(c+b))/2\n    elif a + c < b:\n        return (a*(b+c))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif b + c < a:\n        return (b*(c+a))/2\n    elif a + c < b:\n        return (a*(c+b))/2\n    elif a + b < c",
        "num_ids": 1024
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        #first_side, second_side, third_side = int(a), int(b), int(c)\n        first_side, second_side, third_side = map(int, (a, b, c))\n    except ValueError:\n        return -1\n",
        "num_ids": 68
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == b or b == c or c == a:\n        return \"Error\"\n    return ((b*c)/2)\n",
        "num_ids": 32
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return round((a * b) / 2,2)\n",
        "num_ids": 15
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # We can use a variation of the following:\n    # 1. the starting variable is always equal to the first element of q, and the boolean is always true for the first element\n    # 2. for each of the elements of q, we check if the element is less than or equal to the maximum possible weight\n    # 3. We compare the first element with the first element of q, and check if the sum of the remaining elements is less than or equal to the maximum possible weight\n",
        "num_ids": 105
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # first check it's balanced\n    q = list(q)\n    return q == sorted(q[::-1])\n",
        "num_ids": 30
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = []\n    if type(q)!= list:\n        raise Exception('Object must be of list type')\n    else:\n        for i in q:\n            s.append(i)\n        for j in range(len(s)):\n            s[j] = (s[j] + q[j]) % w\n        if sum(s) <= w:\n            return True\n        else:\n            return False\n",
        "num_ids": 100
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (q[0] <= w < sum(q[1:])) or (q[-1] >= w < sum(q[:-1]))\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return check_for_palindromic(q,w) and q.sort_heap_sum(w) <= max(q)\n",
        "num_ids": 34
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    return will_it_fly_helper(q,w,w)\n",
        "num_ids": 29
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Create the initial list\n    list = q\n    # Create the current length of the list\n    len_list = len(list)\n    # Create a local variable to store the maximum possible weight\n    max_weight = 0\n    # Create a local variable to store the minimum possible weight\n    min_weight = 0\n    # Create a local variable to store the total weight of the list\n    total_weight = 0\n    # Create a local variable to store the list itself\n    list_copy = []\n    # Iterate over the list\n    for i in range(len_list):\n        # If the element is the palindromic part of q, add the element to the list\n        if list[i] == q:\n            list_copy.append(list[i])\n        # If the element is not the palindromic part of q, add it to the list\n        elif not list[i] == q:\n            # If the sum of the elements is less than the maximum possible weight, update the current sum to be the sum of the elements\n            if sum(list_copy) <= max_weight:\n                total_weight = total_weight + list_copy[i]\n                # Set the current sum to the new sum of the elements\n                list_copy[i] = 0\n            # If the sum of the elements is greater than the maximum possible weight, update the current sum to the maximum possible weight\n            else:\n                total_weight = max_weight\n        # If the elements are equal, set the current sum to the sum of the elements\n        else:\n            total_weight = total_weight + list_copy[i]\n        # If the list length is greater than the maximum length, update the current length to be the list length\n        if len_list > max_weight:\n            max_weight = len_list\n    # If the current length is greater than the maximum possible length, update the current length to be the maximum possible length\n    if len_list > max_weight:\n        total_weight = max_weight\n    # Return the result\n    return total_weight <= w\n",
        "num_ids": 475
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    list_q = q.split(\",\")\n    if len(list_q) % 2 == 0:\n        return len(list_q) <= max(list_q) + int(w)\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = q\n    print(\"lst\",lst)\n    print(\"q\",q)\n    print(\"w\",w)\n    if len(lst) <= w:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if is_palindromic(q):\n        return (len(q) <= w)\n    else:\n        return (w == (sum(q) - w))\n",
        "num_ids": 42
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n",
        "num_ids": 11
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    if len(arr) <= 1:\n        return 0\n    return 1 + smallest_change(arr[1:])\n",
        "num_ids": 35
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # minimum change\n    minimum = sys.maxsize\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i]!= arr[i] - arr[i+1]:\n            minimum = min(minimum, arr[i+1]-arr[i])\n    return minimum\n",
        "num_ids": 76
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num_of_elements = len(arr)\n    count = 0\n    if num_of_elements == 0:\n        return 0\n",
        "num_ids": 35
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    smallest_change_length = 0\n    \n    for i in range(len(arr) - 1, 0, -1):\n        smallest_change_length = min(smallest_change_length, i)\n    return smallest_change_length\n",
        "num_ids": 60
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if arr == []:\n        return 0\n    elif arr[0] == arr[-1]:\n        return 0\n    else:\n        return 1 + min(smallest_change(arr[1:-1]), smallest_change(arr[1:]))\n",
        "num_ids": 61
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) < 2:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def palindrome(arr):\n        n = len(arr)\n        s = 0\n        for i in range(n):\n            s += arr[i]\n            if s!= arr[i]:\n                return False\n        return True\n",
        "num_ids": 58
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"\"\"\n    1. \ud574\ub2f9 \ubc94\uc704\uc5d0 \ub300\ud574\uc11c\ub9cc \uadf8 \uc548\uc758 \uac12\ub4e4\uc744 \uc54c\ud30c\ubcb3\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \uc804\uccb4 \ubb38\uc790\uc5f4\uc5d0 \ud574\ub2f9\ud558\ub294 \uc218\ub97c \uc774\uc6a9\ud574\uc11c \ud310\ubcc4\ud55c\ub2e4.\n    2. \uc774\ub54c \uc870\uac74\uc774 \uac00\ub2a5\ud558\ub2e4\uba74 \uac00\uc7a5 \uc77c\ubc18 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uae30\uc900\uc73c\ub85c \ucd5c\uc19f\uac12\uc744 \uc800\uc7a5\ud558\uace0 \uc774\ub54c \uadf8 \uae38\uc774\ub97c \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \ub2e4\uc2dc \ub2e4\uc2dc \uc815\ub82c\ud558\uace0 \ub9cc\ub4e4\uc5b4\uc57c\ud55c\ub2e4.\n    3. \ub9c8\ucc2c\uac00\uc9c0\ub85c \ubc18\ubcf5\ud574\ub3c4 \uae38\uc774\uac00 \uc904\uc5b4\ub4e4\uc5c8\uc9c0\ub9cc, \uc2dc\uac04\ucd08\uacfc\uac00 \ub0a0 \ub54c\ub294 \uae38\uc774\uac00 \uc904\uc5b4\ub4e4\uba74 \uc54c\ud30c\ubcb3\uc758 \uae38\uc774\ub97c \uae30\uc900\uc73c\ub85c \ucd5c\uc19f\uac12\uc744 \uc800\uc7a5\ud558\uace0 \uc774\ub54c \ub2e4\uc2dc \uc815\ub82c\ud558\uae30\ub85c \ud574\uc57c\ud568.\n    4. \uadf8\ub9ac\uace0 \ubb38\uc790\uc5f4 \uc548\uc5d0 \uc788\ub294 \uc54c\ud30c\ubcb3\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud558\uba74, \ub2e8 \uac19\uc740 \uc54c\ud30c\ubcb3\uc774 \ub4f1\uc7a5\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uc774\uc6a9\ud574\uc11c \ud310\ubcc4\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4.\n    \n    Example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 1]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    \n    # \ubc30\uc5f4\uc758 \ud06c\uae30\n    n = len(arr)\n    \n    # \uccab \ubc88\uc9f8 \uc2dc\uc791\uc744 \ubc1b\uae30\uc704\ud574 \ubb34\uc870\uac74 \uccab\ubc88\uc9f8 \uc778\ub371\uc2a4\uc5d0 \ub300\ud574 \uc778\ub371\uc2a4\uac00 0\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\n    i = 0\n    \n    # \ubc30\uc5f4\uc758 \uae38\uc774\uac00 1\uc774\ub77c\uba74 \uccab \ubc88\uc9f8 \uc778\ub371\uc2a4\uc758 \uae38\uc774\ub9cc\ud07c \ucc98\uc74c\uc73c\ub85c \uc815\ub82c\ud558\uace0 \uc804\uccb4 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\uac00 \ub9cc\ub4e4",
        "num_ids": 1024
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here.\n    return [i for i in lst1 if len(i)<len(lst2)]+[i for i in lst2 if len(i)<len(lst1)]\n",
        "num_ids": 53
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst1.sort()\n    lst2.sort()\n    counter = 0\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i]:\n            counter += 1\n    return lst1[:counter]\n",
        "num_ids": 67
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    dic1 = {}\n    for i in lst1:\n        dic1[i] = dic1.get(i, 0) + 1\n    for i in lst2:\n        dic2 = {}\n        for j in i:\n            if j in dic2:\n                dic2[j] += 1\n            else:\n                dic2[j] = 1\n        if dic1 == dic2:\n            return [i]\n",
        "num_ids": 111
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(filter(lambda x: len(x) < len(lst2), list(set(lst1))))\n",
        "num_ids": 30
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # create a list\n    lst = list(set(lst1) | set(lst2))\n    # find the total chars of both lists\n    total_chars = len(lst[0]) * len(lst[1])\n    # return the first list\n    return lst[0] if total_chars == len(lst[0]) else lst[1]\n",
        "num_ids": 93
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst1 = list(filter(lambda x: len(x) <= len(lst2), lst1))\n    lst2 = list(filter(lambda x: len(x) <= len(lst2), lst2))\n",
        "num_ids": 57
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst1 = [int(x) for x in lst1]\n    lst2 = [int(x) for x in lst2]\n",
        "num_ids": 37
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #pass #delete this line and replace with your code here\n    return lst1+lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1 + lst2\n    else:\n        return lst1\n    \ndef merge(arr):\n    '''\n    Write a function that takes a list of strings (list of numbers) and returns a\n    new list of numbers, where each number should be the sum of the numbers in the \n    list.\n",
        "num_ids": 92
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(lst1) & set(lst2))\n",
        "num_ids": 19
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    divisors = []\n    for i in range(2, a+1):\n        if a%i == 0:\n            divisors.append(i)\n    if len(divisors) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for a in range(3, 100):\n        if a % 5 == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    #a is less then 100, then it is a prime number\n    if a < 100:\n        return False\n    \n    #a is not less than 100, then it is not a prime number\n    for a in range(2, int(math.sqrt(a))+1):\n        if a == a**3 + a**2 + a**1:\n            return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    assert isinstance(a, int) and a >= 0, \"Invalid argument\"\n    if a == 1:\n        return False\n    for i in range(2,a):\n        if (a % i) == 0:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a > 100:\n        return False\n    elif a == 1:\n        return False\n    elif a == 2:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(a)+1)):\n            if a % i == 0:\n                return False\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return False\n    \ndef count_number_of_divisors(num):\n    \"\"\"Write a function that returns the number of divisors of a given number n.\n    For example, given 10, a divisor of 10 is a, and n = 2, the function should return 2.\n    Note: If you find that a divisor of n is a divisor of n, the function should return\n    1. So, a divisor of 3 (3! / 2) is a divisor of 3 (3 * 3).\n    But since n is a divisor of 3 (3! / 2) it is not a divisor of 3 (3 * 3).\n    We can say that n is a divisor of 3 (3! / 2), so that if n = 3, it is a divisor of 3 (3 * 3).\n    So, n is a divisor of 3 (3! / 2).\n    If you find that a divisor of 3 (3 * 3) is a divisor of n, the function should return 1.\n    So, n is not a divisor of n. So, you can say that n is not a divisor of 3 (3 * 3).\n    But if you find that a divisor of 3 (3 * 3) is a divisor of n, the function should return 2.\n    So, n is not a divisor of n. So, you can say that n is not a divisor of 3 (3 * 3).\n    So, you can say that n is not a divisor of n. So, you can say that n is not a divisor of 3 (3 * 3).\n    You can say that n is not a divisor of n. So, you can say that n is not a divisor of 3 (3 * 3).\n    So, n is not a divisor of n. So, you can say that n is not a divisor of 3 (3 * 3).\n    Therefore, you need to return n as a divisor of n.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(num))+1):\n        if num % i == 0:\n            divisor_count += 1\n            if divisor_count == 3:\n                return i\n    return 0\n",
        "num_ids": 541
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return a >= 200\n",
        "num_ids": 7
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == 2 or a == 3 or a == 5 or a == 7:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a < 100:\n        return True\n    else:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for x in range(2,int(math.sqrt(a))+1):\n        if a % x == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    else:\n        if is_simple_power(x, n//2):\n            return is_simple_power(x, n//2)\n        elif is_simple_power(x, n//2):\n            return is_simple_power(x, n//2) and not is_simple_power(x, n)\n        else:\n            return is_simple_power(x, n)\n",
        "num_ids": 106
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return n**int(str(n))==x\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        int(x)\n        n = int(n)\n        if n == 0:\n            return False\n        while n > 1:\n            if x == int(x / n):\n                return True\n            else:\n                x = n * x\n                n = int(n)\n    except:\n        return False\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = int(x)\n    if x==1:\n        return True\n    elif x==2:\n        return False\n    elif x==3:\n        return False\n    elif x==4:\n        return True\n    else:\n        return is_simple_power(x*2,n-2)\n",
        "num_ids": 77
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return True\n    return is_simple_power(x, n // 2) and is_simple_power(x, n % 2)\n",
        "num_ids": 44
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n%2 == 0:\n        return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    else:\n        return is_simple_power(x, n // 2) or is_simple_power(x, n // 2 + 1)\n",
        "num_ids": 81
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = is_simple_power(x, n//2)\n    b = is_simple_power(x, n//2)\n    return a or b\n",
        "num_ids": 39
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n==1:\n        return True\n    if n==2:\n        return True if x==x*2 else False\n    if n==3:\n        return True if x==x*3 else False\n    if n==4:\n        return True if x==x*4 else False\n    if n==5:\n        return True if x==x*5 else False\n    return is_simple_power(x*x,n-1)\n",
        "num_ids": 105
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n == 5:\n        return False\n    elif n == 6:\n        return True\n    elif n == 7:\n        return False\n    elif n == 8:\n        return True\n    elif n == 9:\n        return False\n    elif n == 10:\n        return True\n    elif n == 11:\n        return False\n    elif n == 12:\n        return True\n    elif n == 13:\n        return False\n    elif n == 14:\n        return True\n    elif n == 15:\n        return False\n    elif n == 16:\n        return True\n    elif n == 17:\n        return False\n    elif n == 18:\n        return True\n    elif n == 19:\n        return False\n    elif n == 20:\n        return True\n    elif n == 21:\n        return False\n    elif n == 22:\n        return True\n    elif n == 23:\n        return False\n    elif n == 24:\n        return True\n    elif n == 25:\n        return False\n    elif n == 26:\n        return True\n    elif n == 27:\n        return False\n    elif n == 28:\n        return True\n    elif n == 29:\n        return False\n    elif n == 30:\n        return True\n    elif n == 31:\n        return False\n    elif n == 32:\n        return True\n    elif n == 33:\n        return False\n    elif n == 34:\n        return True\n    elif n == 35:\n        return False\n    elif n == 36:\n        return True\n    elif n == 37:\n        return False\n    elif n == 38:\n        return True\n    elif n == 39:\n        return False\n    elif n == 40:\n        return True\n    elif n == 41:\n        return False\n    elif n == 42:\n        return True\n    elif n == 43:\n        return False\n    elif n == 44:\n        return True\n    elif n == 45:\n        return False\n    elif n == 46:\n        return True\n    elif n == 47:\n        return False\n    elif n == 48:\n        return True\n    elif n == 49:\n        return False\n    elif n == 50:\n        return True\n    elif n == 51:\n        return False\n    elif n == 52:\n        return True\n    elif n == 53:\n        return False\n    elif n == 54:\n        return True\n    elif n == 55:\n        return False\n    elif n == 56:\n        return True\n    elif n == 57:\n        return False\n    elif n == 58:\n        return True\n    elif n == 59:\n        return False\n    elif n == 60:\n        return True\n    elif n == 61:\n        return False\n    elif n == 62:\n        return True\n    elif n == 63:\n        return False\n    elif n == 64:\n        return True\n    elif n == 65:\n        return False\n    elif n == 66:\n        return True\n    elif n == 67:\n        return False\n    elif n == 68:\n        return True\n    elif n == 69:\n        return False\n    elif n == 70:\n        return True\n    elif n == 71:\n        return False\n    elif n == 72:\n        return True\n    elif n == 73:\n        return False\n    elif n == 74:\n        return True\n    elif n == 75:\n        return False\n    elif n == 76:\n        return True\n    elif n == 77:\n        return False\n    elif n == 78:\n        return True\n    elif n == 79:\n        return False\n    elif n == 80:\n        return True\n    elif n == 81:\n        return False\n    elif n == 82:\n        return True\n    elif n == 83:\n        return False\n    elif n == 84:\n        return True\n    elif n == 85:\n        return False\n    elif n =",
        "num_ids": 1025
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a >= 0:\n        return isint(a) and iscube(a * a)\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a > 180 and a < 9999:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a) == int:\n        if a <= 0:\n            return False\n        if a == 1:\n            return True\n        if a == 2:\n            return True\n        if a == 3:\n            return True\n        if a == 4:\n            return True\n        if a == 5:\n            return True\n        if a == 6:\n            return True\n        if a == 7:\n            return True\n        if a == 8:\n            return True\n        if a == 9:\n            return True\n        if a == 10:\n            return True\n        if a == 11:\n            return True\n        if a == 12:\n            return True\n        if a == 13:\n            return True\n        if a == 14:\n            return True\n        if a == 15:\n            return True\n        if a == 16:\n            return True\n        if a == 17:\n            return True\n        if a == 18:\n            return True\n        if a == 19:\n            return True\n        if a == 20:\n            return True\n        if a == 21:\n            return True\n        if a == 22:\n            return True\n        if a == 23:\n            return True\n        if a == 24:\n            return True\n        if a == 25:\n            return True\n        if a == 26:\n            return True\n        if a == 27:\n            return True\n        if a == 28:\n            return True\n        if a == 29:\n            return True\n        if a == 30:\n            return True\n        if a == 31:\n            return True\n        if a == 32:\n            return True\n        if a == 33:\n            return True\n        if a == 34:\n            return True\n        if a == 35:\n            return True\n        if a == 36:\n            return True\n        if a == 37:\n            return True\n        if a == 38:\n            return True\n        if a == 39:\n            return True\n        if a == 40:\n            return True\n        if a == 41:\n            return True\n        if a == 42:\n            return True\n        if a == 43:\n            return True\n        if a == 44:\n            return True\n        if a == 45:\n            return True\n        if a == 46:\n            return True\n        if a == 47:\n            return True\n        if a == 48:\n            return True\n        if a == 49:\n            return True\n        if a == 50:\n            return True\n        if a == 51:\n            return True\n        if a == 52:\n            return True\n        if a == 53:\n            return True\n        if a == 54:\n            return True\n        if a == 55:\n            return True\n        if a == 56:\n            return True\n        if a == 57:\n            return True\n        if a == 58:\n            return True\n        if a == 59:\n            return True\n        if a == 60:\n            return True\n        if a == 61:\n            return True\n        if a == 62:\n            return True\n        if a == 63:\n            return True\n        if a == 64:\n            return True\n        if a == 65:\n            return True\n        if a == 66:\n            return True\n        if a == 67:\n            return True\n        if a == 68:\n            return True\n        if a == 69:\n            return True\n        if a == 70:\n            return True\n        if a == 71:\n            return True\n        if a == 72:\n            return True\n        if a == 73:\n            return True\n        if a == 74:\n            return True\n        if a == 75:\n            return True\n        if a == 76:\n            return True\n        if a == 77:\n            return True\n        if a == 78:\n            return True\n        if a == 79:\n            return True\n        if a == 80:\n            return True\n        if a == 81:\n            return True\n        if a == 82:\n            return True\n        if a == 83:\n            return True\n        if a == 84:\n            return True\n        if a == 85:\n            return True\n        if a == 86:\n            return True\n        if a == 87:\n            return True\n        if a == 88:\n            return True\n        if a == 89:\n            return True\n        if a == 90:\n            return True\n        if a == 91:\n            return True\n        i",
        "num_ids": 1025
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    elif a == 1:\n        return False\n    elif a == 2:\n        return True\n    elif a == -1:\n        return False\n    elif a == 64:\n        return True\n    elif a == -2:\n        return False\n    elif a == 180:\n        return True\n    else:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (a % 180 == 180)\n    \n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if it is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(123) ==> True\n    isprime(321) ==> False\n    isprime(16) ==> True\n    isprime(0) ==> True\n    isprime(49) ==> True\n    '''\n    if a == 2:\n        return True\n    elif a == 3:\n        return False\n    elif isprime(a - 1):\n        return True\n    elif isprime(a + 1):\n        return False\n    else:\n        return isprime(a - 2) or isprime(a + 2)\n    \n    \ndef isdigit(a):\n    '''\n    Write a function that takes a number and returns True \n    if it is a digit or not.\n    Examples:\n    isdigit(10) ==> True\n    isdigit(0) ==> True\n    isdigit(30) ==> True\n    isdigit(123) ==> True\n    isdigit(4) ==> True\n    isdigit(12.5) ==> True\n    isdigit(-1) ==> False\n    isdigit(-123) ==> False\n    isdigit(0) ==> False\n    isdigit(32) ==> False\n    '''\n    return a % 10 == 0\n    \n    \ndef isdigit2(a):\n    '''\n    Write a function that takes a number and returns True \n    if it is a digit or not.\n    Examples:\n    isdigit2(10) ==> True\n    isdigit2(0) ==> True\n    isdigit2(30) ==> True\n    isdigit2(123) ==> True\n    isdigit2(4) ==> True\n    isdigit2(12.5) ==> True\n    isdigit2(-1) ==> False\n    isdigit2(-123) ==> False\n    isdigit2(0) ==> False\n    isdigit2(32) ==> False\n    '''\n    return a % 10 == 0\n    \n    \ndef isletter(a):\n    '''\n    Write a function that takes a number and returns True \n    if it is a letter or not.\n    Examples:\n    isletter(100) ==> True\n    isletter(123) ==> False\n    isletter(10) ==> False\n    isletter(0) ==> False\n    isletter(30) ==> False\n    isletter(12345678) ==> False\n    '''\n    return a % 10 == 1\n    \n    \ndef isnumber(a):\n    '''\n    Write a function that takes a number and returns True \n    if it is a number or not.\n    Examples:\n    isnumber(100) ==> True\n    isnumber(123) ==> True\n    isnumber(10) ==> True\n    isnumber(0) ==> True\n    isnumber(30) ==> True\n    isnumber(12345678) ==> True\n    '''\n    return a % 10 == 0\n    \n    \ndef isstr(a):\n    '''\n    Write a function that takes a string and returns True \n    if it is a string or not.\n    Examples:\n    isstr(\"Hello\") ==> True\n    isstr(\"Hi\") ==> True\n    isstr(\"Hi there!\") ==> True\n    isstr(\"Silly, I met you!\") ==> True\n    '''\n    if a == \"\":\n        return True\n    elif isstr(a[0]) and isstr(a[1:]) and isstr(a[:-1]):\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    print(\"A. isdigit\")\n    print(\"B. isdigit2\")\n    print(\"C. isdigit3\")\n    print(\"D. isdigit4\")\n    print(\"E. isdigit5\")\n    print(\"F. isdigit6\")\n    print(\"G. isdigit7\")\n    print(\"H. isdigit8\")\n    print(\"I. isdigit9\")\n    print(\"J. isdigit10\")\n",
        "num_ids": 1024
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return a == a*a*a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        if a%5 == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 49
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Edge cases\n    if a == 0:\n        return True\n    elif a == 1:\n        return False\n    elif a < 1:\n        return False\n    elif a > 8:\n        return False\n    \n    # Handling negatives\n    if a < 0:\n        a = a * (-1)\n    return a > 0\n",
        "num_ids": 82
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a ** 3 == a ** 3\n",
        "num_ids": 11
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num = num.replace(' ','').upper()\n    count = 0\n    for i in num:\n        if i in '0123456789ABCDEF':\n            count+=1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not num:\n        return 0\n    res = 0\n    for i in num:\n        if i.isdigit():\n            res += int(i)\n        else:\n            break\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num_str = str(num)\n    str_len = len(num_str)\n    num_len = str_len\n    for i in range(str_len):\n        if str_len > 0:\n            if str_len > 1:\n                num_len = str(int(num_str[i]) ** int(str(int(str_len) - 2)))\n            else:\n                num_len = str(int(num_str[i] ** 2))\n        else:\n            num_len = \"0\"\n    if num_str[0] == \"0\":\n        num_len = num_len[1:]\n    return int(num_len)\n",
        "num_ids": 161
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num = str(num)\n    primes = []\n    for num in num:\n        if int(num, base=16) not in primes:\n            primes.append(int(num, base=16))\n    num = 0\n    for p in primes:\n        num += p**(len(str(p))-1)\n    return num\n",
        "num_ids": 86
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    hex_digits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    decimal_digits = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    \n    count = 0\n    for i in range(len(hex_digits)):\n        if num[i] == hex_digits[i]:\n            count += 1\n        else:\n            pass\n    for i in range(len(decimal_digits)):\n        if num[i] == decimal_digits[i]:\n            count += 1\n        else:\n            pass\n    return coun",
        "num_ids": 159
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(num) == str:\n        num = num.upper()\n    if not num.isdigit():\n        raise ValueError(\"Please enter a valid hex number\")\n",
        "num_ids": 42
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        num = str(num)\n        # num = int(num)\n        # num = str(num)\n    except:\n        return \"Wrong data provided.\"\n    \n    # num = num.upper()\n    num = str(num)\n    \n    # num = int(num)\n    # num = str(num)\n    for i in num:\n        if i in \"ABCDEF\":\n            return \"Error.\"\n    dig = len(num)\n    \n    if dig == 1:\n        return 1\n    else:\n        return 0\n    \n    # return 0\n        \n    \n",
        "num_ids": 145
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # TODO: Replace this with your code\n    d = {\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"7\",\"8\":\"8\",\"9\":\"9\",\"A\":\"A\",\"B\":\"B\",\"C\":\"C\",\"D\":\"D\",\"E\":\"E\",\"F\":\"F\"}\n    answer = 0\n    for i in range(len(num)):\n        if num[i] in d:\n            answer += d[num[i]]\n    return answe",
        "num_ids": 124
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num = num.strip(\" \")\n    num = num.lower()\n    s = set()\n    for char in num:\n        if char == \"a\":\n            s.add(0)\n        elif char == \"b\":\n            s.add(1)\n        elif char == \"c\":\n            s.add(2)\n        elif char == \"d\":\n            s.add(3)\n        elif char == \"e\":\n            s.add(4)\n        elif char == \"f\":\n            s.add(5)\n    # print(s)\n    # you have to test the input against the character set\n    c = set(s)\n    # print(c)\n    # if there are any numbers in the character set, then there are not prime numbers\n    # print(len(c))\n    # the result is 1\n    if len(c) == 1:\n        return 1\n    else:\n        return len(c)\n    \n    \ndef main():\n    \"\"\"You have been tasked to define a function that reads a \n    combination of strings.\n    The function should return an integer.\n    For example, the string \"aaabbbcccddd\" should return 3.\n    Strings with numbers in them should be separated by a single space.\n    For example, the string \"4AA2B2Cddd\" should return 6.\n    The string with symbols A,B,C,D,E,F should be separated by a single space, \n    and the resulting integer should be separated by a single space.\n    Strings with a number in them should be separated by a single space, \n    and the resulting integer should be separated by a single space.\n    Note: the input must be a string with the characters A, B, C, D, E, F.\n    \"\"\"\n    print(\"Example 1:\")\n    print(\"input : 'aaabbbcccddd'\")\n    print(\"expect : 3\")\n    print(\"output : 6\")\n    print(\"Example 2:\")\n    print(\"input : '1ABCB'\")\n    print(\"expect : 3\")\n    print(\"output : 3\")\n    print(\"Example 3:\")\n    print(\"input : '123456789ABCDEF0'\")\n    print(\"expect : 4\")\n    print(\"output : 6\")\n    print(\"Example 4:\")\n    print(\"input : '20'\")\n    print(\"expect : 2\")\n    print(\"output : 2\")\n    print(\"Example 5:\")\n    print(\"input : '1234'\")\n    print(\"expect : 3\")\n    print(\"output : 3\")\n    print(\"Example 6:\")\n    print(\"input : '123456'\")\n    print(\"expect : 4\")\n    print(\"output : 5\")\n    print(\"Example 7:\")\n    print(\"input : '1-2'\")\n    print(\"expect : 2\")\n    print(\"output : 1\")\n    print(\"Example 8:\")\n    print(\"input : '1-9'\")\n    print(\"expect : 9\")\n    print(\"output : 1\")\n    print(\"Example 9:\")\n    print(\"input : '1A-0'\")\n    print(\"expect : 0\")\n    print(\"output : 1\")\n    print(\"Example 10:\")\n    print(\"input : '-12345'\")\n    print(\"expect : 9\")\n    print(\"output : 9\")\n    print(\"Example 11:\")\n    print(\"input : '-123456789'\")\n    print(\"expect : 10\")\n    print(\"output : 10\")\n    print(\"Example 12:\")\n    print(\"input : '-1234567892'\")\n    print(\"expect : 11\")\n    print(\"output : 11\")\n    print(\"Example 13:\")\n    print(\"input : '-1234567891'\")\n    print(\"expect : 12\")\n    print(\"output : 12\")\n    print(\"Example 14:\")\n    print(\"input : '-1234567891-2'\")\n    print(\"expect : 14\")\n    print(\"output : 14\")\n    print(\"Example 15:\")\n    print(\"input : '-1A2'\")\n    print(\"expect : 1\")\n    print(\"output : 1\")\n    print(\"Example 16:\")\n    print(\"input : '-1A2-3'\")\n    print(\"e",
        "num_ids": 1025
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    num = int(num)\n    \n    if num % 2 == 0:\n        digits = num // 2\n        return digits\n    \n    if num < 2:\n        digits = 0\n        return digits\n    \n    for i in range(0, num - 1):\n        if num % 2 == 0:\n            digits = digits + 1\n        else:\n            digits = digits + 2\n        \n    if num < 10:\n        digits = digits + 1\n    else:\n        digits = digits + 3\n    \n    return digits\n    \n",
        "num_ids": 134
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    binary = \"\"\n    binary_length = len(str(bin(decimal)))\n    while binary_length > 0:\n        if binary_length % 8 == 0:\n            binary = 'db' + binary\n        else:\n            binary = 'db' + '0' * (8 - binary_length % 8) + binary\n        binary_length = binary_length // 8\n    return binary",
        "num_ids": 91
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    binary = []\n    # initializing variable\n    while decimal:\n        # Taking decimals\n        if decimal & 1 == 1:\n            # Adding binary 'db' at the end\n            binary.append('1')\n        decimal = decimal >> 1\n    # Returning binary string\n    return ''.join(binary)\n",
        "num_ids": 75
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    decimal_binary = ''\n    if decimal >= 0:\n        if decimal == 0:\n            decimal_binary = '0'\n        else:\n            decimal_binary = '1'\n            while decimal > 0:\n                decimal //= 2\n                if decimal % 2 == 0:\n                    decimal_binary += '0'\n                else:\n                    decimal_binary += '1'\n    return decimal_binary\n",
        "num_ids": 100
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if isinstance(decimal, int) and decimal >= 0:\n        decimal = int(decimal)\n        return \"db\" + decimal_to_binary(decimal//2) + \"db\"\n    else:\n        raise ValueError(\"decimal must be positive\")\n",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if isinstance(decimal, int):\n        return str(bin(decimal))[2:]\n    else:\n        raise TypeError(\"decimal must be an integer\")\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    binary = ''\n    while decimal!= 0:\n        # go through the decimal\n        decimal, digit = decimal // 2, decimal % 2\n        if digit == 1:\n            binary += '1'\n        elif digit == 0:\n            binary += '0'\n    binary = binary[::-1]\n    return binary\n",
        "num_ids": 78
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    digits = [str(n) for n in decimal]\n    binary = \"\"\n",
        "num_ids": 21
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s=decimal\n    ls=list(str(s))\n    s2=s.split(\".\")\n    for i in range(len(s2)):\n        if i==len(s2)-1:\n            ls[i]=s2[i]\n            break\n        if ls[i].endswith(\"0\"):\n            ls[i]=ls[i][:-1]\n            ls[i+1]=str(int(ls[i][:-1])+int(ls[i+1]))\n        else:\n            ls[i]=ls[i][:-1]\n            ls[i+1]=str(int(ls[i][:-1])-int(ls[i+1]))\n        ls[i+1]=ls[i+1][-1]\n        ls[i]=ls[i][-1]\n    return \"\".join(ls)\n",
        "num_ids": 207
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    binary_representation = \"\"\n    if decimal >= 0:\n        decimal = abs(decimal)\n        binary_representation = \"db\" + str(decimal).zfill(2) + \"db\"\n    else:\n        binary_representation = \"db\" + str(-decimal).zfill(2) + \"db\"\n    return binary_representation\n",
        "num_ids": 87
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    binary_number = \"\"\n    while decimal >= 0:\n        if decimal % 2 == 1:\n            binary_number += \"1\"\n        else:\n            binary_number += \"0\"\n        decimal //= 2\n    return binary_number\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_happy_or_not(s):\n        # return len(s) <= 3\n        def check(s):\n            for i in range(3):\n                if not s: return False\n                if i == 0 and not s[0] == s[-1]: return False\n                if i == 1 and not s[0] == s[1]: return False\n                if i == 2 and not s[0] == s[2]: return False\n            return True\n        return check(s)\n    def is_happy_s(s):\n        if len(s) == 0:\n            return True\n        if len(s) < 3:\n            return False\n        if not s[0] == s[-1]:\n            return False\n        if not s[0] == s[1] and not s[0] == s[2]:\n            return False\n        return True\n    def is_happy_d(s):\n        if len(s) == 0:\n            return True\n        if len(s) < 3:\n            return False\n        if not s[0] == s[1] and not s[0] == s[2]:\n            return False\n        return True\n    if is_happy(s): return True\n    else: return False\n",
        "num_ids": 294
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #s = str(s)\n    l = len(s)\n    if(l<=3):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Answer = False\n",
        "num_ids": 7
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if s == '':\n        return True\n    \n    if len(s) <= 3:\n        return False\n    \n    return is_happy(s[:3]) and is_happy(s[3:])\n",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Write your code here\n    return len(s) >= 3 and all(s[i]!= s[i+1] for i in range(len(s) - 1))\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    return len(s) == 3 and len(set(s)) == 3\n",
        "num_ids": 25
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(s) >= 3 and set(s) == set(s[:3])\n",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(s) <= 3:\n        return True\n    else:\n        return all(s[i] == s[i+1] for i in range(len(s) - 3))\n",
        "num_ids": 47
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (s == s[::-1] or len(set(s)) == len(s) and len(set(s[::-1])) == len(s))\n",
        "num_ids": 42
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(\"Grade equation: \\n\")\n    print(f\"This is a {grades[0]['name']} grade equation for {grades[0]['name']} to have grade {grades[0]['grade']}.\")\n    for i in range(len(grades)):\n        print(f\" {grades[i]['name']} {grades[i]['grade']}\")\n    return grades\n",
        "num_ids": 95
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n    return grades",
        "num_ids": 7
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for grade in grades:\n        if grade == 0:\n            result.append(' ')\n        else:\n            result.append(grade)\n",
        "num_ids": 40
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for grade in grades:\n        sum += grade\n    if sum == 4.0:\n        return ['A+']\n    elif sum > 3.7:\n        return ['A']\n    elif sum > 3.3:\n        return ['B']\n    elif sum > 3.0:\n        return ['B-']\n    elif sum > 2.7:\n        return ['C']\n    elif sum > 2.3:\n        return ['C-']\n    elif sum > 2.0:\n        return ['C+']\n    elif sum > 1.7:\n        return ['D']\n    elif sum > 1.3:\n        return ['D-']\n    elif sum > 1.0:\n        return ['D+']\n    elif sum > 0.7:\n        return ['E']\n    elif sum > 0.0:\n        return ['E-']\n    else:\n        return ['A+', 'B', 'C-', 'C', 'A-']\n",
        "num_ids": 241
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Question:\n    #     Write a function that can grade a string of characters using the following table:\n    #          GPA       |    Letter grade\n    #           4.0                A+\n    #         > 3.7                A \n    #         > 3.3                A- \n    #         > 3.0                B+\n    #         > 2.7                B \n    #         > 2.3                B-\n    #         > 2.0                C+\n    #         > 1.7                C\n    #         > 1.3                C-\n    #         > 1.0                D+\n    #         > 0.7                D \n    #         > 0.0                D-\n    #           0.0                E\n    #     \n",
        "num_ids": 180
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #turn the input into a list\n    grades_to_return = []\n    for grade in grades:\n        grades_to_return.append(str(grade).replace('.', ''))\n    #print(grades_to_return)\n    \n    #the use of the variable \"grades_to_return\" to determine the letter grade is\n    #important, the use of the variable \"grade_equation\" to determine the solution\n    #is to write the correct letter grade.\n    \n    #let us create a function that will calculate the average of the GPA\n    #using the function grade_equation\n    def gpa(grades_to_return):\n        sum = 0\n        for grade in grades_to_return:\n            sum = sum + float(grade)\n        return sum / len(grades_to_return)\n    \n    #the use of the function gpa() to calculate the letter grade is important\n    #to use this function as a solution\n    \n    #we can now get the average GPA by dividing the GPA by the length of the list\n    #and then adding the resulting value to a variable \"average_gpa\"\n    average_gpa = gpa(grades_to_return)\n    #print(average_gpa)\n    #print(grade_equation(grades_to_return))\n    return grade_equation(grades_to_return) + [average_gpa]\n",
        "num_ids": 323
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [letter_grade(grade) for grade in grades]\n",
        "num_ids": 16
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def cal(grade):\n        if grade == '0.0':\n            return 'zero'\n        elif grade == '0.7':\n            return'seven'\n        elif grade == '3.3':\n            return 'three'\n        elif grade == '3.0':\n            return 'three'\n        elif grade == '2.7':\n            return 'three'\n        elif grade == '2.3':\n            return 'three'\n        elif grade == '2.0':\n            return 'three'\n        elif grade == '1.7':\n            return 'three'\n        elif grade == '1.3':\n            return 'three'\n        elif grade == '1.0':\n            return 'three'\n        elif grade == '0.7':\n            return 'three'\n        elif grade == '0.0':\n            return 'three'\n        elif grade == '1.0':\n            return 'three'\n        elif grade == '0.5':\n            return 'four'\n        elif grade == '0.5':\n            return 'four'\n        elif grade == '0.0':\n            return 'four'\n        elif grade == '1.0':\n            return 'four'\n        else:\n            return 'zero'\n    grade = grade.replace('.', '').replace(',', '.')\n    if '.' in grade:\n        grade = grade.split('.')\n        return [cal(grade[0]), cal(grade[1])]\n    return [cal(grade)]",
        "num_ids": 367
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(filter(None, map(lambda x: str(x) if x > 3.0 else'' + str(x) +'', grades)))\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if string!= '':\n        return len(string) == 0 or sum(map(str.isdigit, string)) <= 1\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(string) < 2:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    divs = []\n    for num in string:\n        if is_prime(int(num)):\n            divs.append(int(num))\n    if len(divs) > 1:\n        return False\n    return len(divs[0]) == 1\n",
        "num_ids": 64
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # set the first number to the prime number\n    # number = 2\n    # while (number!= 2):\n    #     # check if the number is divisible by the number\n    #     if (not str(number).isnumeric()):\n    #         break\n    #     number += 1\n    # print(number)\n    # if number == 2:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 103
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(string) <= 1:\n        return True\n    \n    # Only add up to 3 digits\n    digits = sum([(ord(char) - 48) for char in string])\n    if digits <= 2 or digits % 10 == 0:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #iterate through each character\n    for char in string:\n        #check if the character is a prime number\n        if prime_check(char):\n            #print out the number of digits and string\n            print(len(char),char,end=\" \")\n            #print out the number of digits\n            print(len(str(int(len(char)))) - 1)\n            #print out the length of the number of characters\n            print(len(string))\n        else:\n            continue\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #if string is not a string and not a string of digits, return False\n    if type(string) is not str:\n        return False\n    #if string is of length one, return True\n    if len(string) == 1:\n        return True\n    #if string is the smallest, return True\n    if string < 1:\n        return True\n    #if string is of length two, return True\n    if len(string) == 2:\n        return True\n    #if string is of length three, return True\n    if len(string) == 3:\n        return True\n    #if string is of length four, return True\n    if len(string) == 4:\n        return True\n    #if string is of length five, return True\n    if len(string) == 5:\n        return True\n    #return false\n    return False\n",
        "num_ids": 195
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    is_prime = False\n    if string.isdigit():\n        num = int(string)\n        if num <= 2:\n            is_prime = False\n        else:\n            is_prime = True\n    return is_prime\n",
        "num_ids": 56
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    number = len(string)\n    if number == 1 or number == 0:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n=str(n)\n    if len(n)<3:\n        return int(n)\n    start = 0\n    end = 0\n    for i in range(len(n)):\n        if n[i]=='1':\n            if start==0:\n                start = i\n            else:\n                end = i\n        elif n[i]=='0':\n            if end==0:\n                end = i\n            else:\n                start = end\n    return end-start\n",
        "num_ids": 119
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # In essence, if n is 1, return 1.\n    # (It is not a mistake that start with 1)\n    # Also, there is only 1 sequence with a start-1, end-1.\n    if n <= 1:\n        return 1\n    # A sequence can end with one if it ends with 1, so we need to search\n    # for all possible combinations, starting with n-1.\n    #\n    # This works for any value of n:\n    #   0 1 2 3 4 5 6 7 8 9\n    #   n = 8\n    #   n = 7\n    #   n = 6\n    #   n = 5\n    #\n    # This results in a 1-2-3-4-5-6-7-8-9 (which is 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    #\n    # We want to check if this sequence has started with 1\n    # (it will be followed by 1) or if it has ended with 1\n    # (it will be followed by 1).\n    #\n    # The count of the sequences with 1 is then 1 + n-1 = 2n.\n    # (Again, start with 1, it is not counted as 1, but as 1, 1, 1)\n    #\n    # Since we already know that the sequence start with 1, we simply\n    # need to use a simple pattern of 1 to find the first non-zero sequence.\n    #\n    # Let's build this pattern:\n    #\n    #   1\n    #     1\n    #    2\n    #    3\n    #   4\n    #   5\n    #\n    # Then we will know that\n    #\n    #   1   1   1   1\n    #   2   1   1   1\n    #   3   1   1   1\n    #   4   1   1   1\n    #   5   1   1   1\n    #\n    # Now we know that this sequence is not the first non-zero sequence\n    # (which we can do with this pattern, but there is no easy way to\n    # detect this sequence and which is not possible without finding it),\n    # thus we simply need to check for every possible starting sequence:\n    #\n    #   1   1   1   1\n    #   2   1   1   1\n    #   3   1   1   1\n    #   4   1   1   1\n    #   5   1   1   1\n    #\n    # We do this just so we don't have to make a naive recursive call\n    #\n    #   1   1   1   1\n    #   2   1   1   1\n    #   3   1   1   1\n    #   4   1   1   1\n    #   5   1   1   1\n    #\n    # At the end, we know that the sequence with start-1 and end-1 is the\n    # only sequence, with n-1 possible sequences.\n    #\n    # We do this by simply checking for the start-1, we need to use a\n    # recursive function, which is O(n), meaning we'll need to traverse\n    # through all possible sequences of the length 1, this will be O(n)\n    # time. (The recursive call will take O(n^2) time, since there are\n    # n possible sequences of length 1, and we need to loop through the\n    # sequences as long as we know they start with 1)\n    #\n    #   1   1   1   1\n    #   2   1   1   1\n    #   3   1   1   1\n    #   4   1   1   1\n    #   5   1   1   1\n    #\n    # So, we have n^2 possible sequences with 1, 1, 1, 1, 1, 1, 1.\n    #\n    # Finally, we have 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, and so on.\n    #\n    # Time complexity: O(n^2)\n    # Space complexity: O(n)\n    #\n    # The idea is to start from 1, and check if we are looking for n-1, then\n    # we'll check n-2, etc, and the sequence n-1, n-2, etc, has been seen.\n    # If it is, we have found all possible sequences of lengt",
        "num_ids": 1026
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    d = {1: 0, 2: 0, 4: 0, 8: 0}\n    if n in d:\n        return d[n]\n    elif n % 10 == 1:\n        d[n] = 1\n        return d[n]\n    else:\n        d[n] = 0\n        for i in range(3, n + 1, 2):\n            d[i] = d[i - 1] + d[i - 3] + d[i - 5]\n        return d[n]\n",
        "num_ids": 122
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(10):\n        if n % 2 == 0 and n // 2!= i:\n            result += 1\n        elif n % 2 == 1 and n // 2!= i:\n            result += 1\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Process the first n-digit starting numbers.\n    i = 1\n    count = 0\n    while i <= n:\n        # Process the next n-digit starting numbers.\n        j = 0\n        while j < len(str(i)):\n            if int(str(i)[j]) == 1:\n                count += 1\n            j += 1\n        i += 1\n",
        "num_ids": 88
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"\"\"\n    If n = 0, count = 0\n    If n = 1, count = 1\n    If n = 2, count = 3\n    If n > 0, count = 3\n    If n > 1, count = 2\n    Otherwise, count = 4\n    \"\"\"\n    # n = 0\n    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # else:\n    #     count = 1\n    #     # n = 1\n    #     while n > 0:\n    #         n = n // 10\n    #         count += n\n    # return count\n",
        "num_ids": 149
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Very simple approach, could be better with memoization to speed up the process\n    if n < 0:\n        raise ValueError(\"n must be nonnegative\")\n    if n < 1:\n        return 0\n    \n    count = 0\n    \n    for i in range(10, n+1):\n        if i % 10 == 1:\n            count += 1\n        if i % 100 == 10:\n            count += 2\n        if i % 1000 == 10:\n            count += 3\n    \n    return count\n",
        "num_ids": 119
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return int(math.ceil(math.sqrt(n)))\n    if n > 1:\n        return 0\n    if n == 1:\n        return 1\n    return start_ends(n - 1) + starts_ends(n - 2)\n",
        "num_ids": 61
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = 0\n    while True:\n        if n % 2 == 0:\n            x += 1\n            n //= 2\n        else:\n            break\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s, e = 1, 2\n    count = 0\n",
        "num_ids": 15
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    digits = []\n    while N >= 1:\n        N, digit = divmod(N, 2)\n        sum += digit\n        digits.append(digit)\n    return '0b' + digits[::-1]\n    \ndef main():\n    \"\"\"Simple program to print binary numbers in sequence.\n    \n    Input:\n        N (int)\n            An integer in the range 1 to 2*10^9 inclusive.\n    Output:\n        a string of binary number\n    \"\"\"\n    print(solve(N))\n",
        "num_ids": 129
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = []\n    sum = 0\n    for i in range(2,N+1):\n        num.append(i)\n    for i in num:\n        sum+=i\n    return str(sum)\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"0b\" + ''.join(list(str(n) for n in range(2**N)))",
        "num_ids": 27
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if N == 0:\n        return \"\"\n    total = 0\n    while N >= 1:\n        total += int(str(N)[-1])\n        N //= 10\n    return total\n",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    a = []\n    b = 0\n    \n    for i in range(0,N+1):\n        a.append(b)\n        b = a[i]\n    \n    b = 1\n    \n    for i in range(0,N+1):\n        a.append(b)\n        b = a[i]\n    \n    sum = 0\n    for i in range(0,N):\n        sum += a[i]\n    \n    return str(sum)\n    \n    \nN = int(input())\nprint(solve(N))",
        "num_ids": 135
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def sum(n):\n        res = \"\"\n        while n:\n            res += str(n % 2)\n            n //= 2\n        return res\n    \n    ans = sum(int(i) for i in str(N))\n    return ans\n",
        "num_ids": 61
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if N == 0:\n        return \"\"\n    if N == 1:\n        return \"1\"\n    \n    a = 0\n    b = N - 1\n    \n    while b > 0:\n        if b % 2:\n            a = a + b % 10\n            b = b // 10\n        else:\n            a = a + a % 10\n            b = b // 10\n    return str(a)\n",
        "num_ids": 98
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return bin(N)[2:].zfill(N)\n    \n    # (1)\n    # N = 1234, answer
        "num_ids": 1025
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert 0<=N<=10000\n    a=[]\n    for i in str(bin(N)[2:])[2:]:\n        a.append(int(i))\n    s=''\n    for i in a:\n        s+=str(i)\n    return s\n",
        "num_ids": 68
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if N == 0:\n        return \"\"\n    s = []\n    while N:\n        a, N = N % 10, N // 10\n        s.append(a)\n    s = \"\".join(str(x) for x in s)\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n",
        "num_ids": 65
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst.sort()\n    i = 0\n    while(i+2<len(lst)):\n        if(lst[i]+2==lst[i+2]):\n            lst.insert(i+1,lst[i]+2)\n            i+=2\n        else:\n            i+=1\n    return lst\n",
        "num_ids": 83
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    temp=[]\n    odd_index = 0\n    even_index = 0\n    for i in lst:\n        if even_index < len(lst) and i % 2!= 0:\n            temp.append(lst[even_index])\n            even_index += 1\n        elif odd_index < len(lst) and even_index < len(lst):\n            temp.append(lst[odd_index])\n            odd_index += 1\n        else:\n            break\n",
        "num_ids": 118
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    temp = []\n    for x in lst:\n        if x % 2 == 0:\n            temp.append(x)\n    lst.extend(temp)\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if(i % 2 == 0):\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n",
        "num_ids": 60
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_lst.append(lst[i])\n    return new_lst\n",
        "num_ids": 52
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even=0\n    odd=0\n    for i in lst:\n        if i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return even+odd",
        "num_ids": 47
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # O(n)\n    odd = []\n    even = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n",
        "num_ids": 61
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd_indices = [i for i in range(len(lst)) if i % 2!= 0]\n    for i in odd_indices:\n        lst.append(lst[i])\n    return lst\n",
        "num_ids": 55
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n",
        "num_ids": 65
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    words = s.split()\n    words = [''.join(word) for word in words]\n    words =''.join(words).strip()\n    return words\n    \n",
        "num_ids": 41
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    temp = ''\n    for i in s:\n        temp += i\n    temp = temp.replace(' ','')\n    temp = ''.join(sorted(temp))\n    return temp\n",
        "num_ids": 52
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s==\"\":\n        return \"\"\n    else:\n        return anti_shuffle(s[1:])+anti_shuffle(s[0])\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return''.join(sorted(s.split()))\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    new_s = \"\"\n    for letter in s:\n        for i in range(0, len(letter)):\n            new_s = new_s + str(ord(letter[i]))\n        new_s = new_s[:-1]\n    return new_s\n",
        "num_ids": 67
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = list(s)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    for i in alphabet:\n        s[s.index(i)] = i\n    \n    return \"\".join(s)\n",
        "num_ids": 62
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import string\n    import random\n    \n    # define the return value of anti_shuffle()\n    return \"\".join(random.choice(string.ascii_uppercase) for _ in range(len(s)))\n",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    word_list = s.split(' ')\n    output = ''\n    for word in word_list:\n        for i in range(0, len(word)):\n            if word[i] in string.ascii_lowercase:\n                index = string.ascii_lowercase.find(word[i])\n                output += string.ascii_lowercase[index + (len(word) - i) % len(string.ascii_lowercase)]\n            else:\n                output += word[i]\n        output +=''\n    return output\n",
        "num_ids": 133
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return''.join([word if word[0] >= 'A' else word[1:] for word in sorted(s)])\n",
        "num_ids": 30
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort(key = lambda x: x[x.index(x[0])])\n    x_lst = []\n    for row in lst:\n        for x in row:\n            x_lst.append((x, lst.index(row)))\n    return x_lst\n",
        "num_ids": 72
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [ (x, idx) for idx, x in enumerate(lst) ]\n",
        "num_ids": 24
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [(x, y) for y in range(len(lst)) for x in lst[y]]\n    \ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \n    Examples:\n    get_column([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 1), (1, 2), (1, 3), (2, 4), (2, 5), (3, 6)]\n    get_column([], 1) == []\n    get_column([[], [1], [1, 2, 3]], 3) == [(2, 1)]\n    \"\"\"\n    return [(x, y) for y in range(len(lst[0])) for x in lst[y]]\n    \ndef get_subset(lst, x):\n    \"\"\"\n    Given a list, lst, and an integer x,\n    return a subset of lst whose elements are integers\n    starting with x.\n    \n    For example, given lst = [1, 2, 3, 4, 5, 6],\n    and x = 4,\n    return [1, 2, 3, 4, 6]\n    \n    Examples:\n    get_subset([1, 2, 3, 4, 5, 6], 4) == [1, 2, 3, 4, 5, 6]\n    get_subset([1, 2, 3, 4, 5, 6], 3) == [1, 2, 3, 4, 6]\n    get_subset([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 6]\n    get_subset([1, 2, 3, 4, 5, 6], 5) == []\n    \"\"\"\n    result = []\n    for y in range(len(lst)):\n        for x in range(len(lst[0])):\n            if lst[y][x] == x:\n                result.append((y, x))\n    return result\n    \ndef get_matrix(rows, columns, data):\n    \"\"\"\n    Given rows and columns, and data,\n    return a 2D list of lists.\n    \n    For example, given rows = [1, 2, 3, 4, 5, 6]\n    and columns = 3,\n    return [[[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 1, 6]]]\n    \n    Examples:\n    get_matrix(rows = 3, columns = 3, data = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6]]) == [[[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 1, 6]]]\n    get_matrix(rows = 3, columns = 3, data = [[1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 1, 6]]) == [[1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 1, 6]]\n    get_matrix(rows = 3, columns = 3, data = [[1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 6]]) == [[1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 6]]\n    \"\"\"\n    result = []\n    for x in range(len(rows)):\n        result.append([])\n        for y in range(len(columns)):\n            result[x].append(data[x][y])\n    return result\n    \ndef get_points(lst, data):\n    \"\"\"\n    Given a list o",
        "num_ids": 1021
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def get_coordinates_list(lst, x):\n        \"\"\"\n        Returns a list of tuples, containing the coordinates\n        of the nth item in lst, with x being the index\n        \"\"\"\n        coordinates = []\n        for row in lst:\n            for column in row:\n                if column == x:\n                    coordinates.append((row.index(column), column))\n        return coordinates\n    return sorted(get_coordinates_list(lst, x))\n",
        "num_ids": 114
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort(key=lambda x: [x[i] for i in range(0, len(x))])\n    return [(x[i], i) for i in range(len(x))]\n",
        "num_ids": 50
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return lst\n",
        "num_ids": 6
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [(lst.index(x, i), i) for i in range(len(lst))]\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Hint: use sorted(lst, key=lambda l: (l[0], l[1]))\n    # You will need to swap the columns with the last number in the list\n    # from column 0 to column 2\n    # You will need to swap the rows with the first number in the list\n    # from row 0 to row 3\n    # You will need to use the order of the columns\n    return [(x[i][j], i, j) for j in range(len(x[0])) for i in range(len(x))]\n",
        "num_ids": 129
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = list(lst)\n    lst.sort(key=lambda x: x[0])\n    r = list()\n    for i in range(len(lst)):\n        r.append(tuple(lst[i]))\n    return r\n    \ndef main():\n    \"\"\"\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    t = get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1)\n    print(t)\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 277
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = []\n    for r, c in lst:\n        if r == x:\n            s.append((x, c))\n        else:\n            s.append((r, c))\n    s.sort(key=lambda v: v[0])\n    return s\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not array: return array\n    output = [0]*len(array)\n    for i in range(len(array)):\n        count = 0\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] % 2 == 1: count += 1\n        output[i] = count\n    for i in range(len(array) - 1, -1, -1):\n        output[i] = output[i + 1]\n    return output\n",
        "num_ids": 119
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr = sorted(array)\n    if(len(arr) % 2 == 1):\n        return arr\n    else:\n        return arr[::-1]\n",
        "num_ids": 39
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not array:\n        return array\n    current_sum = 0\n    for index, element in enumerate(array):\n        if current_sum + element == 0:\n            continue\n        current_sum += element\n        last_index = index - 1\n        while last_index >= 0 and current_sum + array[last_index] == array[last_index + 1]:\n            last_index -= 1\n        array[index] = array[last_index + 1]\n        array[last_index + 1] = element\n    return array\n",
        "num_ids": 126
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    sorted_array = []\n    for i in range(len(array)):\n        current_sum = 0\n        for j in range(len(array)):\n            current_sum += array[j]\n        if current_sum % 2!= 0:\n            sorted_array.append(array[i])\n            array[i] = array[len(array) - 1]\n            array[len(array) - 1] = array[i]\n    return sorted_array\n",
        "num_ids": 141
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return sorted(array, reverse=True)\n    # new_array = sorted(array, reverse=True)\n    # return [sum(i) for i in zip(*new_array)]\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr = copy.copy(array)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] % 2 == 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n",
        "num_ids": 79
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    array_length = len(array)\n    if not array_length:\n        return array\n    array.sort()\n    if array_length % 2 == 1:\n        return array + sort_array(array[:array_length//2]) + sort_array(array[array_length//2+1:])\n    else:\n        return array + sort_array(array[:array_length//2]) + sort_array(array[array_length//2:])\n",
        "num_ids": 110
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(array) == 0:\n        return []\n    for index, value in enumerate(array):\n        array[index] = sort_array(array[index:]) + [value]\n    return array",
        "num_ids": 50
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    sorted_array = []\n    sum_even = 0\n    sum_odd = 0\n",
        "num_ids": 33
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Replace below with your code\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = 'abcdefghijklmnopqrstuvwxyz'\n    a = a.lower()\n    c = ''\n    #split it in the string\n    s = list(s)\n    #loop through each character\n    for char in s:\n        #if the char is in a\n        if char in a:\n            #if the char is at the start of the string\n            if char =='':\n                #add it to c\n                c = c + char\n            #if the char is at the end of the string\n            elif char =='':\n                #remove it from the c\n                c = c[:len(c)-1]\n            #if the char is a new char\n            elif char == '.':\n                #add it to c\n                c = c + char\n            #if the char is an uppercase letter\n            elif char.isupper():\n                #add it to c\n                c = c + char.upper()\n            #if the char is a lowercase letter\n            elif char.islower():\n                #add it to c\n                c = c + char.lower()\n    return c\n",
        "num_ids": 268
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #convert input to alphabet\n    enc = []\n    for i in s:\n        enc.append(ord(i))\n    #create a string\n    str1 = \"\"\n    #rotate by two\n    for i in range(len(enc)):\n        enc[i] *= 2\n    #convert the list to a string\n    for i in enc:\n        str1 += chr(i)\n    return str1\n",
        "num_ids": 103
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rotated_string = ''\n    for letter in s:\n        if letter.isalpha():\n            rotated_string = rotated_string + letter\n    return rotated_string\n",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    return \"\"\n",
        "num_ids": 11
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    c = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            s[i] = s[i].lower()\n        c += s[i]\n    return c\n",
        "num_ids": 52
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def rotate(s):\n        \"\"\"Take the string s and rotate it by two places. Return \n        the rotated string.\"\"\"\n        return s[::2]+s[1::2]\n    def encrypt_loop(s):\n        \"\"\"Create a loop that applies the above function to the string s\n        and then applies the rotate function to the result.\"\"\"\n        for i in range(len(s)):\n            # rotated = rotate(s[i])\n            rotated = rotate(s[i])\n            # encrypted = rotated[:i]+s[i]+rotated[i+1:]\n            encrypted = rotated[:i]+s[i]+rotated[i+1:]\n            # print(encrypted)\n            return encrypted\n    return encrypt_loop(s)\n",
        "num_ids": 177
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # TODO: modify the function so that it returns the encrypted string.\n    # Use a while loop to keep looping.\n    # Using a range() function to look up the alphabet letters.\n    # Use a range(len(s)) function to shift the letters.\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([x.lower() if x in alphabet else x.upper() for x in s])\n",
        "num_ids": 26
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # create a new string\n    new_s = ''\n    # loop through string\n    for char in s:\n        # if char is a letter\n        if char.isalpha():\n            # rotate by 2\n            new_s += char.lower()[::-2]\n        # else add the char to the new_s\n        else:\n            new_s += char\n",
        "num_ids": 88
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def is_smallest(num):\n        return num <= lst[0]\n    \n    index = 0\n    \n    for i in range(len(lst)):\n        if is_smallest(lst[i]):\n            index = i\n            break\n    \n    return lst[index]\n",
        "num_ids": 77
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 1:\n        return lst[0]\n    \n    elif len(lst) == 2:\n        if lst[1] < lst[0]:\n            return lst[0]\n        else:\n            return lst[1]\n    \n    else:\n        lst.sort()\n        return lst[1]\n    \nlst = [1, 2, 3, 4, 5]\nprint(next_smallest(lst))\n",
        "num_ids": 117
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # get index of first element in list\n    first_index = 0\n    for i, number in enumerate(lst):\n        if i == 0:\n            first_index = number\n            break\n    return first_index\n    \ndef find_next_smallest(lst):\n    \"\"\"\n    You are given a list.\n    Use backtracking to find the next smallest element.\n    Return the next smallest element.\n    Return None if there is no such element.\n    \n    find_next_smallest([1, 2, 3, 4, 5]) == 3\n    find_next_smallest([5, 1, 4, 3, 2]) == 3\n    find_next_smallest([]) == None\n    find_next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = next_smallest(lst)\n    if smallest == None:\n        return None\n    next_smallest(lst)\n    return smallest\n    \ndef print_next_smallest(lst):\n    \"\"\"\n    You are given a list.\n    Use backtracking to print the next smallest element.\n    Return the next smallest element.\n    \"\"\"\n    for i, number in enumerate(lst):\n        if i == 0:\n            print(number)\n        else:\n            print_next_smallest([number])\n        ",
        "num_ids": 312
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    next_smallest_index = 0\n    for i in range(len(lst)):\n        if lst[i] < lst[next_smallest_index]:\n            next_smallest_index = i\n    return lst[next_smallest_index]\n",
        "num_ids": 66
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Write your code here\n    return lst[1]\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        return lst[0]\n",
        "num_ids": 28
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    next_smallest_val = None\n    \n    for i in lst:\n        if next_smallest_val is None or i > next_smallest_val:\n            next_smallest_val = i\n    return next_smallest_val",
        "num_ids": 62
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for word in S.split(\".\"):\n        if word == \"I\":\n            count += 1\n        else:\n            return count\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if S.startswith(\"I\"):\n        # Count the number of words that start with 'I'\n        return 1 + len(S.split(\".\")) + len(S.split(\"?\")) + len(S.split(\"!\"))\n    else:\n        # Count the number of words that start with '!'\n        return 1 + len(S.split(\"!\"))\n",
        "num_ids": 88
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = S.split('.')\n    count = 0\n    for word in words:\n        if word[0] == \"I\":\n            count += 1\n    return count",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    boredom = 0\n    for i in S:\n        if i == \".\":\n            boredom = boredom + 1\n        elif i == \"?\":\n            boredom = boredom + 1\n        elif i == \"!\":\n            boredom = boredom + 1\n    return boredom\n",
        "num_ids": 78
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    pass",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # You need to write your own version of this function that takes a string and\n    # return the number of \"bored\" words in the string\n    word_count = 0\n    for word in S.split(\".\"):\n        if word.startswith('I'):\n            word_count += 1\n    \n    return word_count\n",
        "num_ids": 81
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(1 for word in S.split('.') if word.startswith(\"I\"))\n",
        "num_ids": 25
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    word = S.split('.')\n    boredom_count = 0\n    for word in word:\n        if word[-1] == '?':\n            continue\n        elif word[-1] == '!':\n            continue\n        elif word[-1] == '.':\n            continue\n        else:\n            boredom_count += 1\n    return boredom_count\n",
        "num_ids": 93
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # get the dictionary\n    boredoms = {}\n    \n    # for each word, check the key and if it doesn't exist, add it\n    for word in S.split():\n        if word not in boredoms:\n            boredoms[word] = 1\n        else:\n            boredoms[word] = boredoms[word] + 1\n            \n    # find the count\n    count = 0\n    for word in boredoms.keys():\n        if word[0] == '?' or word[0] == '!':\n            continue\n        if word[0]!= 'i' and word[0]!= 'j':\n            count = count + 1\n            \n    # return the count\n    return count\n",
        "num_ids": 171
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for word in S.split(\".\"):\n        if word[0] == \"I\":\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return is_int(x) or is_int(y) or is_int(z)\n    \n    \ndef any_float(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n    Returns false in any other cases.\n    \n    Examples\n    any_float(5, 2, 7) \u279e True\n    \n    any_float(3, 2, 2) \u279e False\n",
        "num_ids": 127
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return (x+y+z) == sum(x+y+z for x in x for y in y for z in z)\n    \n    #print('any_int(5, 2, 7)')\n    #print(any_int(5, 2, 7))\n",
        "num_ids": 67
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y == z or x + z == y or y + z == x",
        "num_ids": 20
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def any_int_except(a, b, c):\n        if (a+b+c) == int(a+b+c):\n            return True\n        else:\n            return False\n    return any_int_except(x, y, z)\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ((int(x) + int(y) == int(z)) or (int(y) + int(x) == int(z)))\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (type(x) == int or type(x) == float or type(x) == np.int or type(x) == np.float) and (type(y) == int or type(y) == float or type(y) == np.int or type(y) == np.float) and (type(z) == int or type(z) == float or type(z) == np.int or type(z) == np.float)\ndef any_bool(x, y, z):\n    '''\n    Create a function that takes 3 bool values.\n    Returns true if any of the values are True.\n    Returns false in any other cases.\n    \n    Examples\n    any_bool(True, True, False) \u279e True\n    \n    any_bool(True, False, True) \u279e False\n    \n    any_bool(True, True, True) \u279e False\n",
        "num_ids": 210
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def sum_ints(x, y, z):\n        # Write your code here\n        if x+y+z==int(x+y+z):\n            return True\n        elif x+y+z<int(x+y+z):\n            return sum_ints(x,y,z)\n        else:\n            return sum_ints(y,z,x)\n    return sum_ints(x,y,z)\n",
        "num_ids": 103
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y + z == sum(x) and x + y == sum(z) and all(map(lambda x, y, z: type(x) is int and type(y) is int and type(z) is int, (x, y, z)))\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = True\n    if not isinstance(x, (int, float)) or not isinstance(y, (int, float)) or not isinstance(z, (int, float)):\n        return False\n    if x!= y and x!= z and y!= z:\n        result = False\n    elif x == y and x!= z or y == z and x!= z:\n        result = True\n    return result\n",
        "num_ids": 103
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    message = message.lower()\n    new_message = \"\"\n    for c in message:\n        if c in letters:\n            new_message += letters[letters.index(c) - 2] + c\n        else:\n            new_message += c\n    return new_message\n",
        "num_ids": 101
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    message = message.lower()\n    # split message into a list of words\n    message = message.split()\n    # set the en_characters to empty list, and make the index a string\n    en_characters = []\n    for word in message:\n        for letter in word:\n            en_characters.append(letter)\n    # get the en_characters to string \n    string = ''.join(en_characters)\n    # get the freqency of each letter\n    freq = {}\n    for letter in string:\n        if letter in freq:\n            freq[letter] += 1\n        else:\n            freq[letter] = 1\n    # find the letter that appears 2 places after the vowel \n    # in the English alphabet\n    vowel = 'aeiou'\n    for letter in freq:\n        if letter in vowel:\n            index = string.index(letter)\n            if index == 0 or index == len(string) - 1:\n                index += 2\n            else:\n                index += 1\n            string = string[:index] + letter + string[index: ]\n    # now the encoded message should be a string\n    encoded_message = []\n    for word in message:\n        encoded_message.append(word)\n    encoded_message = ''.join(encoded_message)\n    return encoded_message\n    # return the encoded message\n",
        "num_ids": 328
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import re\n    import string\n    message = message.upper()\n    vowels = 'aeiouAEIOU'\n    message = message.translate(None, vowels)\n    regex = '[a-zA-Z]*'\n    pattern = re.compile(regex)\n    message = pattern.sub(r'\\1 \\2', message)\n    message = message.replace(\" \", \"\")\n    return message\n    \n",
        "num_ids": 106
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    message = message.replace(\"'\", \" \").upper().replace(\"\u00c1\", \"A\").replace(\"\u00c2\", \"A\").replace(\"\u00c3\", \"A\").replace(\"\u00c0\", \"A\").replace(\"\u00c0\", \"A\").replace(\"\u00c2\", \"A\").replace(\"\u00c3\", \"A\")\n    message = message.replace(\"\u0160\", \"S\").replace(\"\u0160\", \"S\").replace(\"\u0162\", \"T\").replace(\"\u0162\", \"T\").replace(\"\u0161\", \"S\").replace(\"\u0161\", \"S\").replace(\"\u015a\", \"S\").replace(\"\u015a\", \"S\").replace(\"\u015b\", \"S\").replace(\"\u015b\", \"S\").replace(\"\u016f\", \"S\").replace(\"\u016f\", \"S\")\n    message = message.replace(\"\u00dd\", \"Y\").replace(\"\u00dd\", \"Y\").replace(\"\u00dd\", \"Y\").replace(\"\u00d4\", \"O\").replace(\"\u00d4\", \"O\").replace(\"\u00d4\", \"O\")\n    return message\n",
        "num_ids": 226
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    encoded_message = ''\n    message = message.lower().replace(' ', '_')\n    \n    for letter in message:\n        if letter.isalpha():\n            encoded_letter = ''\n            \n            if letter.upper() in vowels:\n                encoded_letter = letter.upper()\n                \n                for i in range(2):\n                    encoded_letter += encoded_letter\n                    \n            if letter.lower() in vowels:\n                encoded_letter = letter.lower()\n                \n                for i in range(2):\n                    encoded_letter += encoded_letter\n                    \n            encoded_message += encoded_letter\n    \n    return encoded_message\n",
        "num_ids": 158
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    letters = list(message)\n    \n    #remove vowels\n    letters = [letter for letter in letters if letter not in ['A', 'E', 'I', 'O', 'U'] and not letter.isupper()]\n    \n    #remove vowels in the alphabet\n    for i in range(len(letters)):\n        if letters[i] in ['A','E','I','O','U']:\n            letters[i] = letters[i][-1]\n    \n    #create new string\n    encoded = ''\n    for i in range(len(letters)):\n        if i < len(letters)-1:\n            encoded += letters[i]\n        else:\n            encoded += letters[i]\n            break\n        \n    return encoded\n",
        "num_ids": 179
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    encoded_message = \"\"\n    message = message.lower()\n    \n    for i in range(len(message)):\n        if message[i] in wordlist:\n            encoded_message += message[i]\n            if i < len(message)-1 and message[i+1] in letter:\n                encoded_message += letter[(letter.index(message[i])+2)]\n            else:\n                encoded_message += letter[(letter.index(message[i])+1)]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n    \ndef decode(message):\n    \"\"\"\n    Given a message, decode the message into a string.\n    \n    Example:\n    >>> decode('TGST')\n    'This is a message'\n    >>> decode('THKS KS C MGSSCGG')\n    'tHKS'\n    \"\"\"\n    message = message.lower()\n    decoded_message = \"\"\n    message = message.split()\n    message = message[0]\n    for i in range(len(message)):\n        if message[i] in letter:\n            decoded_message += letter[(letter.index(message[i])-2)]\n        elif message[i] in wordlist:\n            decoded_message += message[i]\n        else:\n            decoded_message += message[i]\n    return decoded_message\n",
        "num_ids": 329
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Use the.replace method to replace all lower case letters with lower case\n    # letters in the english alphabet. \n    \n    # Turn each letter in the message into a lower case letter, so it doesn't get\n    # too long.\n    \n    # The swap is the number of characters in a string. \n    \n    # Make a variable named message_swap, that will hold the string where each\n    # letter should be replaced, based on the number of characters it's going \n    # to swap. \n    \n    # For each letter in the string, replace it with the letter at the same \n    # index. \n    \n    # Return the message, with both of the letters replaced. \n    \n    # Hint: You might have to use the lower and upper case letters in the \n    # english alphabet. \n    \n    # Hint: You can't use *, as the strings are immutable. \n    \n    # Note: You'll need to make sure that you use lower() and upper() to convert\n    # letters to lower case.\n    \n    # Implement the swap_letters function. \n    \n    # You need to return the encoded message. \n    \n    # Note: The message should be already encoded in lower case. \n    \n    # Note: All letters in the message should be in lower case. \n    \n    # Hint: You should not use any library functions. \n    \n    # You can also use the int() function to convert a string to an int. \n    \n    # Implement the decode function. \n    \n    # You don't need to worry about the formatting of the message. \n    \n    # Hint: You'll need to use the int() function to convert a string to an int. \n    \n    # Note: The message should be decoded in the pythonic way. \n    \n    # Hint: It's a great place to add code to manipulate the message. \n    \n    # Hint: You can't use *, as the strings are immutable. \n    \n    # Hint: You can't use int() to convert a string to an int. \n    \n    # Hint: You can't use.find() to check if a string contains a certain character. \n    \n    # Hint: Use the str.replace() method. \n    \n    # Hint: You can't use any library functions. \n    \n    # Hint: You should not use the int() function to convert a string to an int. \n    \n    # Hint: You can't use *, as the strings are immutable. \n    \n    # Hint: You can't use.find() to check if a string contains a certain character. \n    \n    # Hint: You can't use.replace() to convert a string to an int. \n    \n    # Hint: You can't use.split() to split a string to a list of characters. \n    \n    # Hint: You can't use the string.replace(). \n    \n    # Hint: You can't use.count() to count the number of occurrences of a \n    # specific letter. \n    \n    # Hint: You can't use.upper(). \n    \n    # Hint: You can't use.lower(). \n    \n    # Hint: You can't use.isalpha(). \n    \n    # Hint: You can't use.isdigit(). \n    \n    # Hint: You can't use.isalnum(). \n    \n    # Hint: You can't use.isspace(). \n    \n    # Hint: You can't use.split(). \n    \n    # Hint: You can't use.startswith(). \n    \n    # Hint: You can't use.endswith(). \n    \n    # Hint: You can't use.join(). \n    \n    # Hint: You can't use.capitalize(). \n    \n    # Hint: You can't use.upper(). \n    \n    # Hint: You can't use.lower(). \n    \n    # Hint: You can't use.isalpha(). \n    \n    # Hint: You can't use.isdigit(). \n    \n    # Hint: You can't use.isalnum(). \n    \n    # Hint: You can't use.isspace(). \n    \n    # Hint: You can't use.startswith(). ",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    message = message.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    encode = ''\n    for letter in message:\n        if letter not in vowels:\n            encode += letter\n    return encode\n",
        "num_ids": 77
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    message = message.upper()\n    \n    vowels = 'aeiou'\n    \n    # Replace vowels with correct letter\n    for letter in message:\n        if letter in vowels:\n            message = message.replace(letter, vowels[(vowels.index(letter)+2) % len(vowels)])\n    \n    # Replace all vowels from the English alphabet with the letter \n    # that appears two places ahead of the vowels\n    for i in range(len(vowels)):\n        message = message.replace(vowels[i], vowels[(i+2) % len(vowels)])\n    \n    return message\n",
        "num_ids": 161
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst = [int(i) for i in str(lst)]\n    max_val = max(lst)\n    lst.sort()\n    lst = [x for x in lst if x!= max_val]\n    result = 0\n    for ele in lst:\n        result = ele * result\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #find the greatest prime number\n    #get the largest prime number\n    #sum all the digits\n    #return the sum\n    prime_num = max_prime(lst)\n    sum_dig = 0\n    #get the digits\n    for i in range(len(lst)):\n        sum_dig += lst[i]\n    #return the sum of the digits\n    return sum_dig % prime_num\n",
        "num_ids": 99
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # initialize a list to store the largest prime\n    lst_prime = []\n    # initialize a list to store the prime\n    # if the element is not prime\n    # it should be the first element\n    prime_list = []\n    \n    for i in lst:\n        # if the element is prime\n        if is_prime(i):\n            # append it to the list\n            # if it is the prime\n            if i not in lst_prime:\n                # append it to the list\n                # if it is not the prime\n                lst_prime.append(i)\n                prime_list.append(i)\n            else:\n                # if it is the prime\n                # it means that it's a prime\n                # if it is not the prime\n                # it means it is prime\n                # if it is prime\n                # it means it is the largest prime\n                if i!= lst_prime[0]:\n                    # remove the prime\n                    lst_prime.pop(0)\n                    prime_list.pop(0)\n                else:\n                    # the element is a prime\n                    lst_prime.pop(0)\n                    prime_list.pop(0)\n        # if element is not prime\n        else:\n            # if it is a prime\n            # it means it's not prime\n            # if it is not prime\n            # it means it is prime\n            # if it is prime\n            # it means it's the largest prime\n            if i not in lst_prime:\n                # remove it from the prime list\n                lst_prime.append(i)\n                prime_list.append(i)\n    \n    return sum(prime_list)\n",
        "num_ids": 392
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    prime = [2,3]\n    prime.extend(list(map(int, str(n))))\n    \n    max_prime = n\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            prime.append(i)\n            if n // i == 1:\n                prime.append(i)\n            if n // i == 2:\n                prime.append(i)\n            if n // i == 3:\n                prime.append(i)\n            if n // i == 4:\n                prime.append(i)\n                \n    max_prime = max(prime)\n    \n    s = 0\n    for i in lst:\n        \n        if i > max_prime:\n            s += i - max_prime\n            break\n    \n    return s\n",
        "num_ids": 201
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # for lst in range(0,len(lst)):\n    #     if lst%2==0:\n    #         lst=lst//2\n    #     elif lst%2==1:\n    #         lst=lst//2+1\n    \n    # lst_sum=0\n    # for i in range(len(lst)):\n    #     lst_sum=lst_sum+lst[i]\n    # print(lst_sum)\n    \n    # number_of_divisors=0\n    # for i in range(1,len(lst)):\n    #     if lst[i]!=0:\n    #         if lst[i]%lst[i-1]==0:\n    #             number_of_divisors+=1\n    # return number_of_divisors\n",
        "num_ids": 210
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_prime = []\n    for i in lst:\n        if is_prime(i):\n            num_prime.append(i)\n    num_prime.sort()\n",
        "num_ids": 43
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    largest = 0\n    prime = [i for i in range(2,lst[0]+1) if lst[i]%2==0]\n    print(prime)\n    for i in range(0,len(prime)):\n        for j in range(len(prime)):\n            for k in range(len(prime)):\n                if i!=k and prime[j]%prime[k]==0:\n                    print(prime[j],prime[k],i)\n                    print(prime[j]*prime[k],prime[j]*prime[k])\n                    print(prime[j]*prime[k],prime[j]*prime[k])\n                    print(prime[j]*prime[k])\n                    if prime[j]>largest:\n                        largest = prime[j]\n    return largest\n",
        "num_ids": 194
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert type(lst) == list\n    # lst = sorted(lst)\n    # print(lst)\n    # lst.sort()\n    # print(lst)\n    # for i in lst:\n    #     print(i)\n",
        "num_ids": 63
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = list(lst)\n    max = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if (lst[i]%lst[j]) == 0:\n                max = max + lst[j]\n                break\n    return max\n",
        "num_ids": 80
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst)<=1:\n        return lst[0]\n    \n    num=lst[0]\n    for i in range(1,len(lst)):\n        if num%10==0:\n            num/=10\n        else:\n            num+=num%10\n            \n    return num\n",
        "num_ids": 79
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    dict_lower = {}\n    dict_upper = {}\n    for key in dict:\n        dict_lower[key.lower()] = True\n    for key in dict_upper:\n        dict_upper[key.upper()] = True\n    return dict_lower == dict_upper",
        "num_ids": 66
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for key, value in dict.items():\n        if isinstance(key, str) and isinstance(value, str):\n            if key.lower() == value.lower():\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for k in dict:\n        if isinstance(k, str) and k.isupper():\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for k in dict:\n        if type(k)!= str:\n            return False\n        if len(k.lower())!= len(k.upper()):\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(dict) == 0: return False\n    elif all(isinstance(k,str) and k.isupper() for k in dict.keys()): return True\n    else: return False\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper():\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for key in dict:\n        if type(key)!= str:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not isinstance(dict,dict):\n        return False\n    for key in dict.keys():\n        if not isinstance(key,str):\n            return False\n    for value in dict.values():\n        if not isinstance(value,str):\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for key in dict.keys():\n        if isinstance(key,str) and len(key)>0 and key.islower():\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(dict) == dict:\n        for k, v in dict.items():\n            if type(k) == str:\n                if type(v) == str:\n                    if k.lower() in dict.keys():\n                        if k.upper() in dict.values():\n                            return True\n                    else:\n                        return False\n            elif type(k) == int:\n                if k >= 0 and k < len(dict):\n                    if k in dict.values():\n                        return True\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # a = []\n    # for i in range(n+1):\n    #     if isprime(i):\n    #         a.append(i)\n    # return a\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return []\n    else:\n        prime = [2, 3]\n        for i in range(4, n, 2):\n            if prime[0] == prime[1]:\n                prime.append(i)\n            else:\n                prime.append(prime[1])\n        return prime\n",
        "num_ids": 76
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return []\n    res = []\n    for i in range(1, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            res.append(i)\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prime = [2,3,5,7,11,13,17,19]\n    count = 0\n    for i in range(n+1):\n        if i in prime:\n            count += 1\n    return [i for i in prime if i<n]\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = []\n    for num in range(1, n):\n        prime_flag = 1\n        for i in range(2, num):\n            if (num % i == 0):\n                prime_flag = 0\n                break\n        if (prime_flag == 1):\n            numbers.append(num)\n    return numbers\n",
        "num_ids": 79
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n < 2:\n        return []\n    result = []\n    for i in range(2, n + 1):\n        if isprime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime_list = [2]\n",
        "num_ids": 10
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    primes = [2, 3, 5, 7]\n    i = 2\n    while primes:\n        p = primes[0]\n        if n % p == 0:\n            n //= p\n        else:\n            primes.pop(0)\n    return [i for i in range(i, n + 1) if i not in primes]\n",
        "num_ids": 86
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # write your code here\n    \n    if len(b) < len(a):\n        return 0\n    if a[0] == a[-1] or a[0] == b[-1]:\n        return sum(a)\n    return sum([int(a[i]) * int(b[i]) for i in range(len(a))]",
        "num_ids": 84
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Remove leading zeros\n    a = a.lstrip('0')\n    b = b.lstrip('0')\n",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #return int(a*b)\n    #return a*b\n    return (int(a) * int(b))\n",
        "num_ids": 31
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here\n    def f(x):\n        y = 0\n        while x:\n            y += x%10\n            x //= 10\n        return y\n    return f(f(f(f(a)*b)))\n",
        "num_ids": 57
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    product = 0\n    while b >= 0:\n        # divide b by 10, round down to nearest whole number\n        digit = b // 10\n        b = b % 10\n        # multiply current digit by the product of previous digits\n        product = product * digit\n    # return product\n    return product\n",
        "num_ids": 69
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    product = 1\n    for digit in b:\n        product *= int(digit)\n    return product\n",
        "num_ids": 26
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #raise NotImplementedError(\"Multiply function not implemented!\")\n    \n    result = 0\n    # Do the math here!\n    # for i in range(len(str(b))):\n    #     result += int(str(b)[i]) * int(str(a)[i])\n    for i in range(len(str(b))):\n        # Do the math here!\n        result += int(str(b)[i]) * int(str(a)[i])\n",
        "num_ids": 115
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"\"\"\n    This function will return the product of the digits of the numbers provided, \n    also removing any leading zeros.\n    \"\"\"\n    # your code here\n    return int(\"\".join(map(str, map(int, str(a*b)))))\n",
        "num_ids": 62
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    product = 0\n    for i in str(b):\n        product += int(i)\n    return product\n",
        "num_ids": 27
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = 0\n    for i, c in enumerate(s):\n        if c.isupper():\n            n += 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    \n    for i in range(len(s)):\n        if (i % 2 == 0):\n            if s[i].isupper():\n                count += 1\n    \n    return count\n",
        "num_ids": 51
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                count += 1\n        else:\n            if s[i] in vowels:\n                count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    s_len = len(s)\n    \n    for i in range(s_len):\n        if (i % 2 == 0) and (s[i] == 'A'):\n            count += 1\n        elif (i % 2!= 0) and (s[i] == 'a'):\n            count += 1\n        elif (i % 2 == 0) and (s[i] == 'A'):\n            count += 1\n        elif (i % 2!= 0) and (s[i] == 'A'):\n            count += 1\n        elif (i % 2 == 0) and (s[i] == 'a'):\n            count += 1\n        elif (i % 2!= 0) and (s[i] == 'a'):\n            count += 1\n        elif (i % 2 == 0) and (s[i] == 'A'):\n            count += 1\n        elif (i % 2!= 0) and (s[i] == 'a'):\n            count += 1\n    return count\n",
        "num_ids": 252
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 2\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].islower():\n            if i % 2 == 0:\n                count += 1\n    return count\n    \ndef count_special(s):\n    \"\"\"\n    Given a string s, count the number of special characters.\n    \n    For example:\n    count_special('aBCdEf') returns 3\n    count_special('abcdefg') returns 3\n    count_special('dBBE') returns 4\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in ('a','e','i','o','u'):\n            count += 1\n    return count\n    \ndef count_invalid(s):\n    \"\"\"\n    Given a string s, return the number of invalid characters.\n    \n    For example:\n    count_invalid('aBCdEf') returns 5\n    count_invalid('abcdefg') returns 6\n    count_invalid('dBBE') returns 3\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in ('a','e','i','o','u'):\n            count += 1\n    return count\n    \ndef main():\n    \"\"\"\n    Run doctests if they're run.\n    \"\"\"\n    print(\"*\" * 50)\n    print(\"Test 1:\")\n    test_solution(test1)\n    print(\"Test 2:\")\n    test_solution(test2)\n    print(\"Test 3:\")\n    test_solution(test3)\n    print(\"Test 4:\")\n    test_solution(test4)\n    print(\"Test 5:\")\n    test_solution(test5)\n    print(\"Test 6:\")\n    test_solution(test6)\n    print(\"Test 7:\")\n    test_solution(test7)\n    print(\"Test 8:\")\n    test_solution(test8)\n    print(\"Test 9:\")\n    test_solution(test9)\n    print(\"Test 10:\")\n    test_solution(test10)\n    print(\"Test 11:\")\n    test_solution(test11)\n    print(\"Test 12:\")\n    test_solution(test12)\n    print(\"*\" * 50)\n",
        "num_ids": 671
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    c = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            c += 1\n    return c\n",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(float(value), -1)",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # (round(x) - x) / (x - x) = floor(x / x - 1)\n    # x % x == 0:\n    #   return floor(x / x - 1)\n    # floor(x / x - 1) = (x - x) / x - 1\n    # floor(x / x - 1) = floor((x - x) / x - 1)\n    # floor((x - x) / x - 1) = floor((x - x) / x - 1)\n    #...\n    # if x == 0:\n    #   return x\n    #\n    # if x % x == 0:\n    #   return x\n    #\n    # if x % x == 1:\n    #   return x\n    #\n    # if x % x == 2:\n    #   return x - 1\n    #\n    # return x - 1 / x - 1\n    #\n    # if x % x == 3:\n    #   return x - 2\n    #\n    # if x % x == 4:\n    #   return x - 3\n    #\n    # if x % x == 5:\n    #   return x - 4\n    #\n    # if x % x == 6:\n    #   return x - 5\n    #\n    # if x % x == 7:\n    #   return x - 6\n    #\n    # if x % x == 8:\n    #   return x - 7\n    #\n    # if x % x == 9:\n    #   return x - 8\n    #\n    # if x % x == 10:\n    #   return x - 9\n    #\n    # if x % x == 11:\n    #   return x - 10\n    #\n    # if x % x == 12:\n    #   return x - 11\n    #\n    # if x % x == 13:\n    #   return x - 12\n    #\n    # if x % x == 14:\n    #   return x - 13\n    #\n    # if x % x == 15:\n    #   return x - 14\n    #\n    # if x % x == 16:\n    #   return x - 15\n    #\n    # if x % x == 17:\n    #   return x - 16\n    #\n    # if x % x == 18:\n    #   return x - 17\n    #\n    # if x % x == 19:\n    #   return x - 18\n    #\n    # if x % x == 20:\n    #   return x - 19\n    #\n    # if x % x == 21:\n    #   return x - 20\n    #\n    # if x % x == 22:\n    #   return x - 21\n    #\n    # if x % x == 23:\n    #   return x - 22\n    #\n    # if x % x == 24:\n    #   return x - 23\n    #\n    # if x % x == 25:\n    #   return x - 24\n    #\n    # if x % x == 26:\n    #   return x - 25\n    #\n    # if x % x == 27:\n    #   return x - 26\n    #\n    # if x % x == 28:\n    #   return x - 27\n    #\n    # if x % x == 29:\n    #   return x - 28\n    #\n    # if x % x == 30:\n    #   return x - 29\n    #\n    # if x % x == 31:\n    #   return x - 30\n    #\n    # if x % x == 32:\n    #   return x - 31\n    #\n    # if x % x == 33:\n    #   return x - 32\n    #\n    # if x % x == 34:\n    #   return x - 33\n    #\n    # if x % x == 35:\n    #   return x - 34\n    #\n    # if x % x == 36:\n    #   return x - 35\n    #\n    # if x % x == 37:\n    #   return x - 36\n    #\n    # if x % x == 38:\n    #   return x - 37\n    #\n    # if x % x == 39:\n    #   return x - 38\n    #\n    # if x % x == 40:\n    #   return x - 39\n    #\n    # if x % x == 41:\n    #   retur",
        "num_ids": 1026
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(value) == int:\n        return value\n    else:\n        return round(value)\n    \n    \ndef is_valid_date(input_date):\n    '''\n    Create a function that takes a string representing a date and\n    returns whether the string is valid for it.\n    \n    For example:\n    >>> is_valid_date(\"May 30, 2016\")\n    True\n    >>> is_valid_date(\"Aug 31, 2016\")\n    False\n    '''\n    try:\n        year, month, day = map(int, input_date.split('-'))\n    except:\n        return False\n    \n    return (year >= 0 and year <= 99 and month >= 0 and month <= 12 and day >= 0 and day <= 31)\n    \n    \ndef main():\n    '''\n    This function calls the closest integer function, prints the closest\n    integer, and prints whether the number is equidistant from two\n    integers.\n    '''\n    input_date = input('Enter the date in YYYY-MM-DD: ')\n    print(closest_integer(input_date))\n    print(is_valid_date(input_date))\n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 293
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Could be done faster, using a dict\n    values = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9\n    }\n    # Iterate over the integer\n    for i in str(value):\n        if i in values:\n            # if the integer is closer, round it away from 0\n            if values[i] - int(i) <= 0:\n                return values[i]\n            # Otherwise, round it away from 1\n            else:\n                return values[i] + 1\n        # If it is not, just return it as an integer\n        else:\n            return int(i)\n    # If no integer was found\n    return \"not a number\"\n",
        "num_ids": 213
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Calculate the closest integer for the given number\n    if value.isdigit():\n        return int(value)\n    else:\n        # Calculate a roundoff factor for the given number\n        fractions = value.split('.')\n        number = int(fractions[0])\n        if number < 0:\n            number = -number\n        else:\n            number = int(fractions[0])\n        factor = number\n        # Check if it is an integer, and if it is round down\n        if value.isdigit():\n            if float(fractions[1]) == 0:\n                factor = 0\n            else:\n                factor = 1\n                if value[0] == '-':\n                    factor = 1\n                    value = value[1:]\n        # Round down to the nearest integer\n        return int(round(number / factor)) * factor\n",
        "num_ids": 199
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if isinstance(value, str):\n        try:\n            closest = int(value)\n        except:\n            try:\n                closest = float(value)\n            except:\n                return value\n        else:\n            return closest\n    else:\n        return value\n",
        "num_ids": 67
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(value, str):\n        value = float(value)\n    if isinstance(value, float):\n        return int(round(value))\n    return int(value)",
        "num_ids": 44
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Create variables for the distance and the integer value\n    # from the given number (and the given string value)\n    # distances = {}\n    # integer_value = \"\"\n    # distance = 0\n    # integer_value = str(value)\n    # print(integer_value)\n    # for i in range(len(integer_value)):\n    #     distance = math.sqrt(float(value[i])**2 + float(integer_value[i])**2)\n    #     if distance in distances:\n    #         distance = distance + min(distances[distance])\n    #     else:\n    #         distances[distance] = integer_value[i]\n    #         distance = min(distances[distance])\n    #     integer_value = integer_value[:i] + distance\n    #     print(integer_value)\n",
        "num_ids": 199
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # The equation below:\n    # x=value^2-value-1\n    # is the equation of x\n    # x^2-x+1 = y\n    # y = 1\n    # and is equidistant from two integers.\n    # The equation above is very similar to the one below\n    # so the equation has a \"small\" imaginary part, but the\n    # other takes a fractional part as a coefficient of x.\n    # If the fractional part is zero, we do not know the equation\n    # of a number.\n    #\n    # A simpler approximation is to take the difference, x, of\n    # 2, and subtract 1.\n",
        "num_ids": 153
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    integer_a = int(value)\n    integer_b = int(closest_integer(integer_a))\n    if abs(integer_a - integer_b) < abs(integer_b - integer_a):\n        return integer_b\n    else:\n        return integer_a\n",
        "num_ids": 69
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2 + 1] + make_a_pile(n // 2)\n",
        "num_ids": 67
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def next_odd(n):\n        if n % 2 == 1:\n            return n + 1\n        else:\n            return n\n",
        "num_ids": 33
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        level = []\n        for i in range(n//2, 0, -1):\n            level.append(i)\n        if n % 2!= 0:\n            level.append(n)\n        return level + [n//2] + make_a_pile(n//2)\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [0, 0, 0] + [0] * n\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    if n & 1:\n        result.append(1)\n    else:\n        result.append(0)\n    while n:\n        n = n & n - 1\n        result.append(n)\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def rec(idx):\n        if idx == n:\n            return [0, 0]\n        \n        if idx % 2:\n            return [idx + 1, 1] + rec(idx + 1)\n        \n        return [idx + 1, 0] + rec(idx + 1)\n",
        "num_ids": 75
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return [n // 2, n // 2]\n    else:\n        return [n // 2 + 1, n // 2]\n    \n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 2:\n        return [n]\n    pile_size = n // 2\n    return make_a_pile(pile_size) + make_a_pile(pile_size-1)",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code here\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    \n    pile = [1]\n    next_odd = n//2\n    next_even = n-next_odd\n    for i in range(2, next_odd+1):\n        pile.append(i)\n    for i in range(2, next_even+1):\n        pile.append(i)\n    return pile\n",
        "num_ids": 117
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not isinstance(n, int) or (n < 0):\n        raise TypeError(\"make_a_pile() expected a non-negative integer\")\n    \n    if n % 2 == 1:\n        return [n, n+1]\n    \n    if n % 2 == 0:\n        return [n+1, n+2]\n",
        "num_ids": 82
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(map(lambda word: word.replace(\",\", \"\").replace(\" \", \"\"), s.split())",
        "num_ids": 27
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    word_list = s.split(\",\")\n    return word_list",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.split(\",\")\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code\n    return s.split(', ')\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(s)!= str:\n        return []\n    words = s.split(\",\")\n    return words\n",
        "num_ids": 29
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    result = []\n    for word in s.split(','):\n        result.extend(word.split())\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    num_to_return = 1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            num_to_return = num_to_return * i\n        if num_to_return % 2 == 0:\n            num_to_return = num_to_return / 2\n    return int(num_to_return)\n",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < y:\n        x, y = y, x\n    if x % 2 == 0:\n        return y\n    else:\n        return -1\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = max(x, y)\n    b = min(x, y)\n    \n    # if a % 2 == 0:\n    #     return b\n    \n    while a % 2 == 0:\n        a = a / 2\n        \n    while b % 2 == 0:\n        b = b / 2\n",
        "num_ids": 75
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Check if the inputs are valid\n    if (x < x or x == 0):\n        return -1\n",
        "num_ids": 27
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize the list of odd numbers to zero\n    odd_numbers = [0]\n    # Initialize the list of even numbers to zero\n    even_numbers = [0]\n    # Initialize the list of the remainder of the numbers to 0\n    remainder = [0]\n",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert x >= 0 and y >= 0\n    min_x = min(x, y)\n    max_x = max(x, y)\n    if min_x % 2 == 0:\n        return max_x + 1\n    if max_x % 2 == 0:\n        return min_x - 1\n    if min_x % 2 == 1:\n        return min_x\n    return -1\n",
        "num_ids": 95
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    num = 0\n    \n    while num < (x + 1):\n        num = num + 1\n        if num % 2 == 0:\n            continue\n        else:\n            if num >= y:\n                return num\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # This code would make this program a little more readable, but it works\n    # correctly.\n    if (x < y):\n        x, y = y, x\n    \n    # We want to find a number with at least 2 numbers that are even.\n    # We're going to start with the first even number, and then \n    # try to find one with at least 3 numbers that are even.\n    max_even = 1\n    for i in range(x, y):\n        if i % 2 == 0:\n            max_even += 1\n        else:\n            return -1\n    \n    # If there's no even numbers, return -1\n    return max_even\n    \n",
        "num_ids": 161
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            count += 1\n    if count % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num_x = abs(x)\n    num_y = abs(y)\n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return '0b'+str(bin(int(str(n) + str(m), 2)))[2:]\n",
        "num_ids": 29
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO\n    # find out how to handle input n > m\n    # return 0\n    n, m = max(n, m), min(n, m)\n    \n    # return '0b' + str(int(floor(n/10))).zfill(2) + str(int(ceil(n/10))).zfill(2) + str(int(floor(m/10))).zfill(2) + str(int(ceil(m/10))).zfill(2)\n    return '0b' + str(round(n/10)).zfill(2) + str(round(m/10)).zfill(2)\n",
        "num_ids": 156
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n > m:\n        return str(int(round(n/m)))\n    else:\n        return str(int(round(n/m))) + '0' * (m - n - 1)\n",
        "num_ids": 50
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < m:\n        return -1\n    n = round(n, 1)\n    m = round(m, 1)\n    res = \"{:b}\".format((n + m) // 2)\n    if res == '0b1111':\n        return res\n    else:\n        return \"-\"\n",
        "num_ids": 74
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n > m:\n        return str(n)[:m] + '0' * (n - m)\n    else:\n        return str(m)[:n] + '0' * (m - n)\n",
        "num_ids": 52
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def binary_to_decimal(binary):\n        decimal, _ = divmod(int(binary, 2), 2)\n        return (decimal, binary)\n",
        "num_ids": 40
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = ''\n    for i in range(1, m+1):\n        result = result + str(bin(n+i)[2:]).zfill(n+1)\n    return result[:-1]\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # remove leading zeros\n    n = n * 1\n    m = m * 1\n    return str(int(n / m))\n",
        "num_ids": 33
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    r = 0\n    while n > m:\n        r += 1\n        n = n // 10\n    r = n\n    return str(int(round(r / 10, 0)))\n",
        "num_ids": 45
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n > m:\n        return \"0b\" + str(bin(n)[2:]).replace('0b','')\n    else:\n        return str(bin(m)[2:]).replace('0b','')\n",
        "num_ids": 55
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    new_list = []\n    new_list.extend(map(int, str(x)))\n    return new_list\n",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x%10 for x in x[::2]]\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    import itertools\n    return list(itertools.filterfalse(lambda x: x % 10!= 0, x))\n",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x%10 for x in x]\n",
        "num_ids": 13
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x.sort()\n    x = set(x)\n    return sorted(x)\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    remainder = x%10\n    x = x//10\n    result = [x]\n    while x>0:\n        digits = x%10\n        x = x//10\n        if digits % 2 == 0:\n            result.append(x)\n    #result.sort()\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = set(x)\n    return [i for i in x if not i % 2]",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for digit in x:\n        if digit % 2 == 0:\n            continue\n        result.append(digit)\n    result.sort()\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # 1. Using list comprehension, find all numbers that have even digits.\n    # 2. Use a counter to keep track of which numbers don't have even digits.\n    # 3. Return all unique numbers that are not numbers between 1 and the number\n    #    in the list.\n    \n    return [n for n in x if n % 2 == 0]\n",
        "num_ids": 82
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    x = sorted(x)\n    for i in range(len(x)):\n        if x[i] % 2 == 0:\n            x[i] = str(x[i])\n    return x\n",
        "num_ids": 50
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for index, number in enumerate(arr):\n        if index == 0 or number == 0 or number == 9:\n            result.append('Zero')\n            continue\n        number = str(number)\n        length = len(number)\n        if length == 1:\n            result.append(number)\n            continue\n        if number[0] == '0':\n            number = number[1:]\n            result.append(number)\n            continue\n        if number[0] == '1':\n            number = number[1:]\n            result.append(number[::-1])\n            continue\n        if number[0] == '-':\n            number = number[1:]\n            result.append(number[::-1])\n            continue\n        result.append(number[0])\n    return result\n",
        "num_ids": 190
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [i for i in sorted(arr) if i >= 1 and i <= 9]\n",
        "num_ids": 22
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    length = len(arr)\n    if length == 0:\n        return []\n    \n    result = []\n    for i in range(length):\n        for j in range(i+1, length):\n            result.append(arr[i] + arr[j])\n    \n    result = sorted(result)\n    \n    return result\n",
        "num_ids": 82
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # sort the array by its length\n    arr = sorted(arr)\n    # sort the array by its reverse order\n    arr = sorted(arr, reverse=True)\n",
        "num_ids": 40
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def by_index(arr, index):\n        \"\"\"\n        Given an integer, return its index, where 1 <= index <= len(arr) - 1, i.e.\n        a. if the array has only one element: return index\n        b. if there is a pair of consecutive numbers that is less than the index,\n            then swap them\n        c. if there is a pair of consecutive numbers that are of equal length,\n            then take the largest index and swap it\n        d. if there is a pair of consecutive numbers that are of equal length,\n            then take the second largest index and swap it\n        \"\"\"\n        # if the array is empty, return an empty array\n        if len(arr) == 0:\n            return []\n        # if the array has a single element, return index\n        if len(arr) == 1:\n            return index\n        # if the array has two or more elements, sort the numbers\n        # and then return the index of the largest element\n        # if the number is more than one, repeat the process\n        # from \"One\" to \"Nine\"\n        if len(arr) > 1:\n            index = (index - 1) % len(arr)\n            indexes = by_index(arr, index)\n            arr = sorted(arr, reverse=True)\n            arr = [arr[i] for i in indexes]\n            arr = [arr[i] for i in indexes]\n        return indexes[0]\n    \n    return sorted(arr, key=by_index)\n",
        "num_ids": 344
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # sort the array\n    arr = sorted(arr)\n    # remove the numbers that are out of range\n    arr = [i for i in arr if i > 0 and i < 9]\n    # reverse the array\n    arr = arr[::-1]\n    # return the result\n    return arr\n",
        "num_ids": 71
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if not arr:\n        return []\n    \n    n = len(arr)\n    \n    #!!! Notice that the second condition is because we want the smallest value\n    # to be at the end of the array, regardless of the input\n    if n == 1:\n        return arr[0]\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    #!!! Notice that we order the digits to be in alphabetical order, because\n    # we use the ascii alphabet as the keys in our hashmap, since there are\n    # no digits that have to be capitalized. The hashmap should always be a\n    # string, so we have to use this as a key-value pair for the second condition\n    arr.sort()\n    arr.sort(key = lambda x: (x.lower(), x.isdigit()))\n    \n    return arr\n",
        "num_ids": 242
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    arr.sort()\n    arr.reverse()\n    return arr\n",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr or len(arr) < 1:\n        return []\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if arr == []:\n        return []\n    \n    sorted_arr = []\n    num_arr = []\n    for i in arr:\n        sorted_arr.append(i)\n        num_arr.append(i)\n    sorted_arr.sort()\n    num_arr.sort()\n    res = sorted_arr + num_arr\n    print(res)\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    fact = [1]\n    for i in range(1,n+1):\n        fact.append(fact[-1]*i)\n    return fact\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 0:\n        return []\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact = fact * i\n        return fact\n",
        "num_ids": 45
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    n = n-1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact = fact * j\n        result.append(fact)\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < 2:\n        return [1]\n    else:\n        l = f(n-1)\n        l.append(l[-1]*l[-2])\n        return l\n",
        "num_ids": 49
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    fact_list = [1]\n",
        "num_ids": 10
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = [1]\n    for i in range(2, n):\n        a.append(a[i-1]*i)\n    return a\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    fact = [1]\n    for i in range(2, n+1):\n        fact.append(i*fact[i-1])\n    return fact\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factorials = []\n    for i in range(n):\n        if i % 2 == 0:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1] * i)\n    return factorials\n",
        "num_ids": 64
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorial = []\n    i = 1\n    while i <= n:\n        factorial.append(i)\n        i += 1\n    return factorial\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factors = []\n    for i in range(1, n):\n        if i%2==0:\n            factors.append(i)\n        else:\n            factors.append(i+factors[i-1])\n    return factors\n",
        "num_ids": 60
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd = []\n    even = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n        i += 1\n    return tuple(even), tuple(odd)\n",
        "num_ids": 68
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return (1,1)\n    else:\n        # find the first and the last value of n\n        first_value = n // 2\n        last_value = n - first_value\n        # in order to find the value of odd palindrome\n        odd_palindrome = first_value\n        even_palindrome = last_value\n        \n        while odd_palindrome % 2 == 0 and even_palindrome % 2!= 0:\n            # even number\n            odd_palindrome = odd_palindrome + 2\n            # odd number\n            even_palindrome = even_palindrome - 1\n            \n        even_palindrome = even_palindrome + 1\n        odd_palindrome = odd_palindrome + 1\n        \n        # build result tuple\n        result_tuple = (even_palindrome, odd_palindrome)\n        \n        # return result tuple\n        return result_tuple",
        "num_ids": 228
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 2:\n        return (1, 1)\n    even = []\n    odd = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return (even, odd)\n",
        "num_ids": 76
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def divide(num):\n        remainder = num % 2\n        if remainder == 0:\n            even_num = int(num/2)\n            odd_num = int(num - even_num)\n        else:\n            odd_num = int(num/2)\n            even_num = int(num - odd_num)\n        return even_num, odd_num\n",
        "num_ids": 90
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l, r = 1, n - 1\n    result = []\n    while l <= r:\n        if n % l == 0:\n            result.append(l)\n            if n // l == l:\n                result.append(l)\n            else:\n                result.append(n // l)\n        else:\n            result.append(n % l)\n            n //= l\n        if n % r == r:\n            result.append(r)\n            if n // r == r:\n                result.append(r)\n            else:\n                result.append(n // r)\n        else:\n            result.append(n % r)\n            n //= r\n    return result\n",
        "num_ids": 164
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (even_odd_palindrome(2 * n), even_odd_palindrome(2 * n + 1))\n",
        "num_ids": 31
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even_odd = []\n    even_odd_index = []\n    odd_even_index = []\n    for i in range(1, n):\n        if n % i == 0:\n            even_odd.append(i)\n        else:\n            odd_even_index.append(i)\n    for i in odd_even_index:\n        even_odd_index.remove(i)\n    for i in even_odd_index:\n        odd_even_index.remove(i)\n    return even_odd_index, odd_even_index\n",
        "num_ids": 132
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd = []\n    even = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n        i += 1\n    odd.sort()\n    even.sort()\n    odd.reverse()\n    even.reverse()\n    return tuple(odd + even",
        "num_ids": 88
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even, odd = [], []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return tuple(sorted(even+odd))\n",
        "num_ids": 64
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    palindromes = [0] * (n+1)\n",
        "num_ids": 17
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    c = 0\n    for i in arr:\n        if i > 0:\n            c += 1\n    return c\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    cnt = 0\n    for i in arr:\n        if i > 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 32
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(map(sum, zip(*arr))))\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count_digits = 0\n    for i in arr:\n        if i > 0:\n            count_digits += 1\n    return count_digits\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = 0\n    for i in arr:\n        s += i\n    return s\n",
        "num_ids": 22
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_list = []\n    for item in arr:\n        if isinstance(item, int):\n            num_list.append(item)\n        elif isinstance(item, str):\n            if item.isdigit():\n                num_list.append(item)\n            elif item.isalpha():\n                pass\n            else:\n                num_list.append(item.lstrip('0123'))\n        else:\n            raise ValueError(\"Unsupported type\")\n    \n    count = 0\n    for item in num_list:\n        if isinstance(item, str):\n            pass\n        elif isinstance(item, int):\n            count += 1\n        elif isinstance(item, float):\n            pass\n        elif isinstance(item, bool):\n            pass\n        else:\n            raise ValueError(\"Unsupported type\")\n",
        "num_ids": 199
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len(set(arr))\n",
        "num_ids": 10
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    num_dict = {}\n    for num in arr:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return len(num_dict)\n",
        "num_ids": 63
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # TODO: Your code here\n    \n    d = 0\n    \n    for num in arr:\n        if num > 0:\n            d += 1\n    \n    return d",
        "num_ids": 45
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    \n    i = 0\n    j = 0\n    while j < n:\n        if arr[j] < arr[i]:\n            i += 1\n        elif arr[j] > arr[i]:\n            j += 1\n        else:\n            i = j\n            j = i + 1\n    \n    if i!= j:\n        return False\n    \n    arr = arr[i:] + arr[:i]\n    return move_one_ball(arr)\n",
        "num_ids": 144
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    #Initialize\n    ball = len(arr)\n    sorted = False\n    current_pos = 0\n    \n    #Move\n    for i in range(ball):\n        if (current_pos == 0):\n            arr[i] = arr[i+1]\n            current_pos = arr[i+1]\n        else:\n            arr[i] = arr[i+1]\n            current_pos = arr[i+1]\n            \n        #Move to next position if ball is at least two positions\n        if (i+2 < ball):\n            if (arr[i] > arr[i+1]):\n                arr[i+2] = arr[i]\n                arr[i] = arr[i+1]\n                arr[i+1] = arr[i+2]\n                current_pos = arr[i+2]\n        \n        #Decrement current position to move to next position\n        current_pos -= 1\n        \n    #Return True if sorted\n    if (sorted == True):\n        return True\n    else:\n        return False\n",
        "num_ids": 254
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    i = 0\n    for j in range(len(arr)):\n        if i == 0:\n            if arr[j] >= arr[i]:\n                i += 1\n            else:\n                i = 0\n        elif arr[j] < arr[i]:\n            i += 1\n    \n    if i == len(arr):\n        return True\n    \n    else:\n        return False\n    \n",
        "num_ids": 114
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        if arr[1] > arr[0]:\n            return False\n        return move_one_ball([arr[1], arr[0]])\n    if arr[0] < arr[1]:\n        return move_one_ball([arr[0], arr[1]])\n    return False\n",
        "num_ids": 93
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] <= arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    if right - left == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your Code Here\n    # Write your code here\n    # print(arr)\n    for i in range(len(arr)):\n        if i > 0 and arr[i] < arr[i-1]:\n            return False\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i-1]:\n    #         return False\n    # return True\n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            return False\n    return True\n",
        "num_ids": 137
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = []\n    a = len(arr)\n    for i in range(a):\n        res.append(arr[i])\n    # sort the given array in non-decreasing order\n    res = sorted(res)\n    # perform right shift operations\n    for i in range(a):\n        # update the current element in res\n        res[i] = res[i+1]\n        # shift the current element by one position\n        res[i+1] = res[i+2]\n        # swap the two elements\n        res[i+2] = res[i]\n    # return true if the given array is sorted\n    if(check_sorted(res) == True):\n        return True\n    # else return false\n    return False\n",
        "num_ids": 177
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not arr:\n        return False\n    # If array is empty, return True\n    if len(arr) == 0:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #determining the permutation\n    perm = generate_permutation(len(arr) - 1)\n    #determining the max and min\n    min_max = [-arr[0], arr[0]]\n    #counter for calculation\n    count = 0\n    #for every element of the array\n    for i in range(len(arr) - 1):\n        #if the element in the array is greater than the permutation then the\n        #element in the permutation is updated\n        if arr[i] > perm[count]:\n            min_max[1] = arr[i]\n            count += 1\n        #if the element in the array is less than the permutation then the\n        #element in the permutation is updated\n        elif arr[i] < perm[count]:\n            min_max[0] = arr[i]\n            count += 1\n    #if the list is empty then the all permutation is calculated\n    if count == len(perm):\n        return True\n    #if the permutation is not an array then we can return False\n    return False\n    ",
        "num_ids": 249
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst1_odd = list(filter(lambda x: x % 2!= 0, lst1))\n    lst2_odd = list(filter(lambda x: x % 2 == 0, lst2))\n    lst1_even = list(filter(lambda x: x % 2 == 0, lst1))\n    \n    if len(lst1_odd) > len(lst2_odd) or len(lst1_even) > len(lst2_even):\n        return \"NO\"\n    elif len(lst1_odd) < len(lst2_even) or len(lst1_even) < len(lst2_odd):\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 178
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here.\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == lst2[i] % 2:\n                return \"YES\"\n        return \"NO\"\n",
        "num_ids": 82
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]*lst2[i])\n    result = sorted(result)\n    for i in range(len(result)):\n        if result[i]%2==0:\n            return \"YES\"\n    return \"NO\"\n",
        "num_ids": 83
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return False\n    else:\n        if len(lst1) % 2 == 0:\n            i = 0\n            while i < len(lst1):\n                if lst1[i] % 2 == 0:\n                    lst1.remove(lst1[i])\n                    lst1.append(lst1[i] + lst1[i + 1])\n                else:\n                    i = i + 2\n            i = 0\n            while i < len(lst2):\n                if lst2[i] % 2 == 0:\n                    lst2.remove(lst2[i])\n                    lst2.append(lst2[i] + lst2[i + 1])\n                else:\n                    i = i + 2\n            if len(lst1) > len(lst2):\n                return exchange(lst1, lst2)\n            else:\n                return exchange(lst2, lst1)\n        else:\n            return exchange(lst1, lst2)\n",
        "num_ids": 263
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if lst1[0] < lst2[0]:\n        return exchange(lst1[1:], lst2[1:])\n    return exchange(lst2[1:], lst1[1:])\n",
        "num_ids": 83
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if lst1 == []:\n        return \"NO\"\n    if lst2 == []:\n        return \"YES\"\n",
        "num_ids": 31
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # write your code here\n    if not lst1:\n        return \"NO\"\n    if not lst2:\n        return \"NO\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if len(lst1) == 1 and lst1[0] == lst2[0]:\n        return \"YES\"\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 138
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # define a helper function that returns the result of the left-hand-operand of the product\n    def p_helper(lst1, lst2):\n        # iterate through each number in the lst2 and in each number in lst1, add the product\n        # that the number is divisible by to the left and the product of the number and the number to the right\n        # of the number in lst2. If the number is already divisible, return \"NO\"\n        def product(left, right, *args):\n            if right == 0:\n                return \"NO\"\n            if left == 0:\n                return \"NO\"\n            if args[0] == 0 and args[1] == 0:\n                return \"NO\"\n            return \"NO\"\n",
        "num_ids": 179
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # You should not modify the lines below.\n    # You only need to change at most 1 line.\n",
        "num_ids": 25
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for el in lst2:\n        if el % 2!= 0:\n            return \"NO\"\n    for el in lst1:\n        if el % 2 == 0:\n            return \"YES\"\n    return \"NO\"\n",
        "num_ids": 56
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = {}\n    for letter in test:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n",
        "num_ids": 40
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # convert to lowercase\n    lowercase = test.lower()\n    \n    # create dictionary of letter to count\n    dictionary = {}\n    for letter in lowercase:\n        if letter in dictionary:\n            dictionary[letter] += 1\n        else:\n            dictionary[letter] = 1\n    \n    # sort dictionary by dictionary value\n    dictionary = dict(sorted(dictionary.items(), key = lambda x: x[1], reverse = True))\n    \n    return dictionary\n",
        "num_ids": 115
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    d = {}\n    for i in test:\n        d.setdefault(i,0)\n        d[i] += 1\n    return d\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # TODO: Your code here\n",
        "num_ids": 12
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # https://stackoverflow.com/questions/480152/counting-unique-characters-in-a-string-python\n    # https://stackoverflow.com/questions/52151660/counting-unique-characters-in-a-string\n    \n    # precompute counts\n    letters = {x: 0 for x in 'abcdefghijklmnopqrstuvwxyz'}\n    for letter in test:\n        if letter not in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] += 1\n            # if the letter has already been seen, don't count it again\n            if letter not in letters:\n                letters[letter] = 0\n    # return a dict of the letter with the most repetition\n    return {letter: letters[letter] for letter in sorted(letters, reverse=True)[:10]}\n",
        "num_ids": 207
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    letter_dict = {}\n",
        "num_ids": 10
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count_dict = {}\n    for letter in test:\n        if letter not in count_dict:\n            count_dict[letter] = 1\n        else:\n            count_dict[letter] += 1\n    return count_dict\n",
        "num_ids": 55
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Create an empty dictionary\n    d = dict()\n    \n    # Loop through the test string to search for each letter\n    for letter in test:\n        if letter in d:\n            # Increment the count if letter is found\n            d[letter] += 1\n        else:\n            # Store the letter\n            d[letter] = 1\n            \n    # Return the dictionary\n    return d",
        "num_ids": 93
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # First solve the reverse deletion\n    reverse = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        reverse = reverse + s[i]\n    # First check if the string is palindrome\n    if s == reverse:\n        return ('', True)\n    # Second check if the string is palindrome\n    return (\"\", False)\n",
        "num_ids": 89
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = []\n    def is_palindrome(str):\n        if len(str) <= 1:\n            return True\n        elif str[0]!= str[-1]:\n            return False\n        else:\n            return is_palindrome(str[1:-1])\n    \n    def helper(s,c):\n        if not s or not c:\n            return False\n        if not s[-1] == c[0]:\n            return False\n        if not is_palindrome(s[0:-1]+c):\n            return False\n        res.append(s[-1]+c)\n        return True\n    \n    return helper(s,c)\n",
        "num_ids": 161
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # count = 0\n    # start_index = 0\n    # end_index = len(s)-1\n    # while start_index < end_index:\n    #     if s[start_index]!= c:\n    #         if count == 1:\n    #             return (s[start_index],True)\n    #         elif count == 0:\n    #             return (s[start_index],False)\n    #         start_index += 1\n    #         count += 1\n    #     start_index += 1\n    #     end_index -= 1\n    # return None\n    result = []\n    for char in s:\n        if char not in result:\n            result.append(char)\n    if len(result) == len(s):\n        result.sort()\n        return (''.join(result),True)\n    else:\n        return None\n    # return None\n",
        "num_ids": 210
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    c = c.lower()\n    s = s.lower()\n    if len(s)!= len(c):\n        return None\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            return None\n    return s,True\n",
        "num_ids": 68
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return reverse_delete_helper(s,c,0,len(s),0,len(c))\n",
        "num_ids": 27
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if s == c:\n        return s,True\n    else:\n        answer = []\n        for x in s:\n            if c == x:\n                answer.append(x)\n        return answer,False\n        \ndef count_words(str1):\n    \"\"\"Task\n    A string is a word if it contains at least one character from all the characters of the alphabet.\n    Return the number of words in the string.\n    Example\n    For s = \"hello world\", the result should be 3\n    For s = \"he\", the result should be 1\n    \"\"\"\n    count = 0\n    for x in str1.split(\" \"):\n        if x!= \"\":\n            count += 1\n    return count\n",
        "num_ids": 166
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = list(s)\n    y = list(c)\n    print(x)\n    print(y)\n    return tuple(sorted(x, key=lambda x:x.replace(c,'')))==tuple(sorted(y, key=lambda y:y.replace(c,'')))\n",
        "num_ids": 72
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s)==0:\n        return (0,'',True)\n    if len(s)==1:\n        return (s,True,'')\n    if s[0]==c:\n        if c==s[-1]:\n            return (s[:-1]+s[0],True,'')\n        else:\n            return (s[:-1]+s[0]+s[-1],False,'')\n    else:\n        return reverse_delete(s[1:],c)\n",
        "num_ids": 118
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not s:\n        return (s,False)\n    if s == c:\n        return ('',True)\n    s = s[::-1]\n    if s[:len(c)] == c:\n        return ('',True)\n    else:\n        return ('',False)\n",
        "num_ids": 70
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #we have to go reverse as we use s.split() to get the string in reverse order\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_counts = []\n    for elem in lst:\n        elem = elem.replace(\" \", \"\").split(\" \")\n        if len(elem) % 2 == 1:\n            elem[1] = elem[1][0:len(elem[1]) // 2]\n        if len(elem) % 2 == 0:\n            elem[1] = elem[1][0:len(elem[1]) // 2]\n        even_counts = []\n        for num in range(0, len(elem)):\n            if num % 2 == 0:\n                elem[num] = int(elem[num])\n                if elem[num] % 2 == 0:\n                    even_counts.append(elem[num])\n        if len(even_counts) == 0:\n            odd_counts.append(\"the number of odd elements 1n the str1ng 1 of the 1nput.\")\n        if len(even_counts) > 1:\n            odd_counts.append(\"the number of odd elements 8n the str8ng 8 of the 8nput.\")\n    return odd_counts\n",
        "num_ids": 272
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = [lst[i] for i in range(len(lst)) if '0' not in lst[i]]\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Create a list of the numbers in the input\n    numbers = [int(s) for s in lst if s.isdigit()]\n    # Create a list of the odd numbers\n    odd_numbers = []\n    # Iterate through the numbers and add the odd numbers to the odd_numbers list\n    for number in numbers:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    # Return the results as a list\n    return [f\"the number of odd elements {len(odd_numbers)} the str{len(odd_numbers)} of the {len(odd_numbers)}put.\",\n            f\"the number of odd elements {len(odd_numbers)} the str{len(odd_numbers)} of the {len(odd_numbers)}put.\"]\n",
        "num_ids": 191
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd = []\n    for item in lst:\n        odd.append(\"the number of odd elements {} the str{} of the {}.\".format(item[0],item[0],item[0]))\n    return odd\n",
        "num_ids": 54
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [len(str(i)) % 2 for i in lst]\n",
        "num_ids": 19
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x for i,x in enumerate(lst) if len(x)%2!= 0]\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return [x.replace(' ', '') for x in lst]\n    return [x.replace('0', '9').replace('1', '0').replace('2', '3').replace('3', '4')]",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [str(len(list(filter(lambda x: x.isdigit(), lst)))) for lst in lst]\n",
        "num_ids": 32
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = [0] * len(lst)\n    for i in range(len(lst)):\n        number = 0\n        for j in lst[i].split():\n            number += int(j)\n        if number % 2!= 0:\n            result[i] = number\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_str = ''.join(str(i) for i in lst)\n    lst_str_replaced = lst_str.replace(' ', '')\n    count = len(lst_str_replaced) // 2\n    odd_str = lst_str_replaced[:count]\n    even_str = lst_str_replaced[count:]\n    odd_str = odd_str[:len(odd_str)//2] + odd_str[len(odd_str)//2:]\n    even_str = even_str[:len(even_str)//2] + even_str[len(even_str)//2:]\n    return [f'{count}n the {l} {l[:len(l)//2]}the {l[len(l)//2:]} of the {l} {l[:len(l)//2]}'\n            for l in [odd_str, even_str]]\n",
        "num_ids": 227
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # use a counter, to keep track of the minimum sum of any non-empty sub-array\n    subArraySums = {}\n    # add all the elements of the input array to a dictionary and call the\n    # function again with the same input array\n    for num in nums:\n        subArraySums[num] = subArraySums.get(num, 0) + num\n    # return the minimum sum of any sub-array\n    return min(subArraySums.values())\n",
        "num_ids": 113
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n    \n    res = float(\"inf\")\n    for i in range(len(nums)):\n        if res > 0:\n            res = min(res, nums[i] + minSubArraySum(nums[i + 1:]))\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    minSum = float('inf')\n    subArraySum = 0\n    for num in nums:\n        subArraySum += num\n        if subArraySum < 0:\n            minSum = min(minSum, subArraySum)\n            subArraySum = 0\n        elif subArraySum > 0:\n            subArraySum -= num\n    if minSum == 0:\n        return 0\n    return minSum\n",
        "num_ids": 96
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    min_sub_sum = float('inf')\n    curr_sum = 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        if curr_sum > min_sub_sum:\n            min_sub_sum = curr_sum\n    return min_sub_sum if min_sub_sum!= float('inf') else 0\n",
        "num_ids": 94
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    ans = float('inf')\n    subSum = 0\n    for i in range(len(nums)):\n        subSum += nums[i]\n        if subSum < ans:\n            ans = subSum\n        if subSum >= 0:\n            continue\n        for j in range(i, len(nums)):\n            subSum -= nums[j]\n            if subSum < 0:\n                ans = min(ans, 0)\n            if subSum == 0:\n                break\n    return ans if ans!= float('inf') else 0\n",
        "num_ids": 137
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    min_sum = min_sum = 0\n    for num in nums:\n        min_sum += num\n        if min_sum > 0:\n            min_sum -= num\n        else:\n            min_sum = 0\n",
        "num_ids": 54
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not nums: return 0\n    window_sum = 0\n    for i in range(len(nums)):\n        window_sum += nums[i]\n        if window_sum < 0:\n            window_sum = 0\n            # print(window_sum)\n        elif window_sum >= 0:\n            window_sum -= nums[i]\n    return min(window_sum, len(nums))\n",
        "num_ids": 101
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    left = 0\n    right = 0\n    sum = 0\n    \n    for right in range(len(nums)):\n        sum += nums[right]\n        if sum >= 0:\n            sum -= nums[left]\n            left += 1\n    return right-left + 1\n",
        "num_ids": 69
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    subSum = float('inf')\n    currentSum = 0\n    for num in nums:\n        currentSum += num\n        if currentSum < subSum:\n            subSum = currentSum\n    return subSum if subSum!= float('inf') else 0\n",
        "num_ids": 62
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += nums[i]\n        \n        if min_sum >= 0:\n            return min_sum\n    \n    return min_sum\n    \ndef minSubArraySum2(nums):\n    \"\"\"\n    Given an array of numbers nums, return the minimum sum of any contiguous subarray with equal sum.\n    Example:\n    minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n    minSubArraySum([-2,1,1,1,1]) == 2\n    \n    \"\"\"\n    \n    def helper(arr, total):\n        if total == 0:\n            return arr\n        \n        if total < 0:\n            return -1\n        \n        total -= arr[-1]\n        return helper(arr[:-1], total)\n        \n    return helper(nums, sum(nums))\n",
        "num_ids": 232
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # O(n^2)\n    # O(n^2)\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    import heapq\n",
        "num_ids": 6
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(grid) == 0:\n        return 0\n    \n    row_len = len(grid[0])\n    if row_len == 0:\n        return 0\n    \n    col_len = len(grid)\n    if col_len == 0:\n        return 0\n    \n    bucket_capacity = capacity\n    \n    for r in range(row_len):\n        for c in range(col_len):\n            if grid[r][c] == 0:\n                continue\n            bucket = math.ceil(bucket_capacity / grid[r][c])\n            for r_idx in range(row_len - bucket + 1):\n                for c_idx in range(col_len - bucket + 1):\n                    grid[r_idx + r][c_idx + c] = 0\n    return 1\n",
        "num_ids": 199
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def remove_water(r, c):\n        for unit_idx in range(r, r+3):\n            if grid[unit_idx][c] == 1:\n                grid[unit_idx][c] = 0\n                remove_water(unit_idx, c)\n",
        "num_ids": 69
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import heapq\n    n = len(grid)\n    buckets = [{} for _ in range(n)]\n    heapq.heapify(buckets)\n    for i, row in enumerate(grid):\n        for j, val in enumerate(row):\n            buckets[i][(j, val)] = 0\n    \n    for i in range(n):\n        for j in range(n):\n            bucket_id = (i, j)\n            capacity = buckets[bucket_id][(0, 0)]\n            if capacity > capacity:\n                heapq.heappush(buckets[bucket_id], capacity)\n                if capacity == 0:\n                    break\n            elif capacity < capacity:\n                heapq.heappush(buckets[bucket_id], capacity)\n    \n    output = 0\n    for bucket in buckets:\n        output += heapq.heappop(bucket)\n    return output\n",
        "num_ids": 225
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import collections\n    import math\n    def max_fill_fast(grid, capacity):\n        # cost matrix\n        c = {}\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                if not grid[row][col] in c:\n                    c[grid[row][col]] = capacity - row - col\n                else:\n                    c[grid[row][col]] += 1\n",
        "num_ids": 103
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def _max_fill(grid, bucket_capacity):\n        \"\"\"\n        DP solution:\n        \"\"\"\n        if not grid:\n            return 0\n        \n        max_helper = [0]*len(grid[0])\n        \n        for j in range(len(grid[0])):\n            max_helper[j] = grid[0][j]\n        \n        # DP[0]\n        for i in range(1,len(grid[0])):\n            max_helper[i] = grid[0][i] + max(max_helper[:i])\n        \n        # DP[1]\n        for i in range(1,len(grid)):\n            max_helper[i] = max(grid[i][:j] + max_helper[:i] + grid[i][j+1:])\n        \n        return max_helper[-1]\n    \n    return _max_fill(grid, capacity)\n",
        "num_ids": 229
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # solution 1\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    import math\n    def dfs(grid,capacity):\n        #if the grid is full\n        if len(grid)==capacity:\n            return 1\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def _dfs(grid, bucket_capacity, min_bucket):\n        def _helper(grid, bucket_capacity, min_bucket):\n            if grid[0][0] == bucket_capacity:\n                return 1\n            if grid[0][0] + 1 < bucket_capacity:\n                return _helper(grid, bucket_capacity + 1, min_bucket) + _dfs(grid, bucket_capacity, min_bucket + 1)\n            return _helper(grid, bucket_capacity, min_bucket)\n",
        "num_ids": 127
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    zero = []\n    one = []\n    two = []\n    three = []\n    four = []\n",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr.sort()\n    return arr\n",
        "num_ids": 11
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = len(arr)\n    if x == 1:\n        return arr\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_arr = []\n    zeros = 0\n",
        "num_ids": 15
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert len(arr) > 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            pos = i\n            break\n    else:\n        pos = n\n    for j in range(n - 1, 0, -1):\n        if arr[j] == 1:\n            arr[j], arr[pos] = arr[pos], arr[j]\n            pos -= 1\n    return arr",
        "num_ids": 107
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    length = len(arr)\n    for i in range(length):\n        for j in range(i + 1, length):\n            if arr[j] == 0:\n                arr[j], arr[i] = arr[i], arr[j]\n    \n    for i in range(length):\n        if arr[i]!= 0:\n            arr[i], arr[0] = arr[0], arr[i]\n            break\n",
        "num_ids": 104
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"\"\"\n    **EXERCISE**\n    Problem:\n    Sort an array of non-negative integers according to number of ones in their\n    binary representation in ascending order.\n    \"\"\"\n    arr = sorted(arr)\n    return arr\n",
        "num_ids": 55
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for index in range(0, len(arr)):\n        min_index = index\n        for i in range(index, len(arr)):\n            if arr[min_index] == 0:\n                min_index = i\n        arr[index], arr[min_index] = arr[min_index], arr[index]\n    return arr\n",
        "num_ids": 82
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_ones = {}\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            if arr[i] in num_ones.keys():\n                num_ones[arr[i]] += 1\n            else:\n                num_ones[arr[i]] = 1\n    for i in num_ones.keys():\n        if num_ones[i] > 0:\n            num_ones[i] -= 1\n            for j in range(1, num_ones[i]+1):\n                arr[i-1] = j\n    return arr\n",
        "num_ids": 136
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # append zeros to the end of arr if they are not already at the end of the array\n    if arr == sorted(arr):\n        return arr\n    i = len(arr) - 1\n    # iterate from the end of arr and sort the remaining elements\n    while i >= 0 and arr[i] == 0:\n        i -= 1\n    # shift all the elements to the right\n    for i in range(i, -1, -1):\n        arr[i] = arr[i + 1]\n    # remove the non-zero elements from the end\n    arr[i + 1:] = arr[:i + 1]\n    return arr\n",
        "num_ids": 150
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    \n    # if the input string is empty\n    if len(s) == 0:\n        return []\n    \n    # a list of the words in the string\n    word_list = []\n    \n    # a loop to find the letter in string s\n    for letter in s:\n        \n        # if letter is a consonant\n        if letter.lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            \n            # if the letter is not already in word_list\n            if letter.lower() not in word_list:\n                word_list.append(letter.lower())\n            \n    # return word_list\n    return word_list\n    \n",
        "num_ids": 161
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    word_list = list(s)\n    # print(word_list)\n    answer = []\n    for word in word_list:\n        # print(word)\n        if len(word) > 1 and word[0]!= word[-1]:\n            if word[0]!= \" \" and word[-1]!= \" \":\n                answer.append(word)\n    # print(answer)\n    return answer\n",
        "num_ids": 103
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    word_list = []\n    for i in range(len(s)):\n        if s[i].lower() not in consonants:\n            word_list.append(s[i])\n    return word_list\n",
        "num_ids": 52
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) <= 0:\n        return []\n    \n    words = []\n    for c in s:\n        if c.lower() not in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(c)\n    if len(words) == 0:\n        return []\n    \n    return words\n",
        "num_ids": 82
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    return [word for word in s.split() if word not in \"acess\"]\n",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if len(s) == 0:\n        return []\n    if len(s) == 1:\n        return [s]\n    if n < 1:\n        return select_words(s, n)\n    if n == 1:\n        return s.split(\" \")\n    if n % 2 == 1:\n        return [s[i:i+n] for i in range(0, len(s), n)]\n    s1 = s[:n]\n    s2 = s[n:]\n    if s1 in s2:\n        return [s1] + select_words(s1, n//2)\n    else:\n        return select_words(s2, n//2) + select_words(s1, n//2)\n",
        "num_ids": 187
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # create a list of the words\n    words = []\n    # iterate over the characters of the string and if they are not letters \n    # or spaces the function will stop.\n    for char in s:\n        if char.isalpha() or char == \" \":\n            words.append(char)\n    # return the words\n    return word",
        "num_ids": 81
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [word for word in s if word.count(char) >= n for char in word]",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Set up variables\n    word_set = set()\n",
        "num_ids": 15
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # initialize the output array with empty strings\n    output = []\n    \n    # iterate through the string\n    for word in s:\n        # if a word contains at least one of the letters\n        # remove the first letter\n        if len(word) > 1:\n            # remove the first letter\n            word = word[1:]\n        \n        # if the word has a vowel\n        if word[0] in ['a', 'e', 'i', 'o', 'u']:\n            # append the word to the output array\n            output.append(word)\n    \n    # return the result\n    return output",
        "num_ids": 142
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    closest_vowel = \"\"\n    left_index, right_index = 0, 0\n    \n    for i in range(len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            left_index = i\n            break\n",
        "num_ids": 96
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return closest_vowel(word, 1, len(word))\n",
        "num_ids": 18
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    index_of_closest_vowel = 0\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    vowel_index = 0\n    \n    # first try to find a vowel at index 0\n    if len(word) > 1:\n        if word[0] in vowels:\n            vowel_index = vowels.index(word[0])\n            word = word[1:]\n",
        "num_ids": 86
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not word:\n        return \"\"\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    closest_vowel_position = 0\n    best_vowel_position = 0\n    for index, char in enumerate(word):\n        for i in range(1, len(word) - index):\n            if char == word[i:i+2]:\n                closest_vowel_position = i\n                break\n        if closest_vowel_position!= 0 and closest_vowel_position < best_vowel_position:\n            best_vowel_position = closest_vowel_position\n    return '' if best_vowel_position == 0 else word[best_vowel_position: best_vowel_position + 1]\n",
        "num_ids": 166
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return word[closest_vowel(word)]\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # NOTE:\n    # Below is an implementation of the Lattice problem.\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # STEP 1: Check case of first letter\n    if len(word) <= 1:\n        return \"\"\n    # STEP 2: Check case of middle letter\n    if word[0] == \"a\":\n        return word[1:len(word)]\n    else:\n        return word[1:len(word) - 1]\n",
        "num_ids": 77
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if(is_vowel(word[-1]) or is_vowel(word[0])):\n        return \"\"\n    \n    min_index = len(word)\n    \n    for i in range(len(word)):\n        if(is_vowel(word[i])):\n            if(len(word[i:]) < min_index):\n                min_index = len(word[i:])\n            if(len(word[i:]) < min_index):\n                min_index = len(word[i:])\n    \n    if(min_index < len(word)):\n        return get_closest_vowel(word[:min_index]) + \"U\" + get_closest_vowel(word[min_index:])\n    else:\n        return \"\"\n",
        "num_ids": 198
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(lst)\n    if n == 1:\n        return True\n    elif n == 2:\n        return lst[0] == lst[1]\n    else:\n        p_1 = lst[0].count('(')\n        p_2 = lst[1].count(')')\n        while p_1!= p_2:\n            if lst[0] == '(':\n                p_1 += 1\n            elif lst[0] == ')':\n                p_2 += 1\n            else:\n                return False\n        return lst[0] == lst[1]\n",
        "num_ids": 149
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    stack = []\n    idx = 0\n    for idx, item in enumerate(lst):\n        if item == '(':\n            stack.append(')')\n        elif item == ')':\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "num_ids": 94
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_balanced(string):\n        stack = []\n        open_p = '(('\n        close_p = ')'\n        for char in string:\n            if char in open_p:\n                stack.append(char)\n            elif char in close_p:\n                if not stack:\n                    return False\n                elif stack[-1] == close_p:\n                    stack.pop()\n        if stack:\n            return False\n        return True\n    return is_balanced(lst)\n",
        "num_ids": 118
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # OPTION 1 - RECURSIVE\n",
        "num_ids": 12
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = ''\n    for i in lst:\n        if '(' in i or ')' in i:\n            s += i[0]\n        else:\n            s += '()('\n",
        "num_ids": 46
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    open_paren = '('\n    close_paren = ')'\n    \n    # for each letter in the string\n    for l in lst:\n        # if the letter is open bracket\n        if l == open_paren:\n            # if there is not a match\n            if l!= close_paren:\n                return \"No\"\n            \n        # if the letter is close bracket\n        if l == close_paren:\n            # if there is not a match\n            if l!= open_paren:\n                return \"No\"\n    \n    return \"Yes",
        "num_ids": 132
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # BFS, to find a pair\n    # if len(lst)!= 2:\n    #     return False\n    # if lst[0] == lst[1]:\n    #     return False\n",
        "num_ids": 50
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    balanced_parentheses = []\n    for l in lst:\n        open_parens = 0\n        close_parens = 0\n        for c in l:\n            if c == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n        balanced_parentheses.append(close_parens - open_parens)\n    \n    return 'Yes' if balanced_parentheses == list(range(1, len(balanced_parentheses) + 1)) else 'No'\n",
        "num_ids": 120
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    match = []\n    def balanced(string):\n        open = []\n        close = []\n        for x in string:\n            if x == '(':\n                open.append(x)\n            else:\n                close.append(x)\n        if len(open)!= len(close):\n            return False\n        if len(open) == 0:\n            return True\n        if len(close) == 0:\n            return False\n        if open[0] == close[0]:\n            return balanced(open[1:])\n        else:\n            return False\n    for i in lst:\n        if balanced(i):\n            match.append(i)\n    return 'Yes' if len(match) == 0 else 'No'\n",
        "num_ids": 171
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j]:\n                if lst[i] == '(':\n                    if lst[j] == ')':\n                        return 'No'\n                elif lst[i] == ')':\n                    if lst[j] == '(':\n                        return 'No'\n    return 'Yes'\n",
        "num_ids": 108
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(arr)\n    arr = sorted(arr)\n    left = 0\n    right = n-1\n    for i in range(0,n-k):\n        if arr[i] >= arr[i+k]:\n            arr[i], arr[i+k] = arr[i+k], arr[i]\n        else:\n            arr[i+k] = arr[i]\n            left = i+k\n            right = i\n    if left == n-1:\n        return arr[left:]\n    else:\n        return arr[left+1:right]",
        "num_ids": 138
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_elements = []\n    l = 0\n    r = 0\n    \n    while l <= r:\n        mid = (l+r)//2\n        \n        if arr[mid] > k:\n            r = mid - 1\n        else:\n            l = mid + 1\n            \n            if l > r:\n                max_elements.append(arr[l])\n            else:\n                max_elements.append(arr[r])\n    \n    return max_elements\n",
        "num_ids": 117
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n",
        "num_ids": 9
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def sort(arr, n, k):\n        if n == k:\n            return arr\n        for i in range(k, n+1):\n            arr[i], arr[n-i] = arr[n-i], arr[i]\n        arr[k], arr[n-k] = arr[n-k], arr[k]\n        return arr\n",
        "num_ids": 86
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = arr[:]\n",
        "num_ids": 8
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # result = sorted(arr)[:k]\n    # return result\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Helper function for maximum of sub array\n    def subMax(arr, k):\n        max = arr[0]\n        curr = 0\n        for i in range(len(arr)):\n            curr += arr[i]\n            if curr > max:\n                max = curr\n        return max\n",
        "num_ids": 75
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    m = arr[0]\n    res = []\n    for i in range(len(arr)):\n        if arr[i] > m:\n            res.append(arr[i])\n            m = arr[i]\n    return re",
        "num_ids": 65
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # O(n) time\n    # O(1) space\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(arr) == 0 or k == 0:\n        return arr\n",
        "num_ids": 19
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # define the variables\n    odd = 0\n    even = 0\n",
        "num_ids": 17
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_num = 0\n    odd_num = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_num += lst[i]\n        else:\n            odd_num += lst[i]\n    return sum(lst) - even_num - odd_num\n",
        "num_ids": 79
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = sum(lst[0::2])\n    return s\n",
        "num_ids": 18
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # \ubc30\uc5f4 \uacf5\uc2dd\n    return sum([n for n in lst if n%2 == 0])\n",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odds = []\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] % 2 == 0:\n            odds.append(lst[i])\n    return sum(odds)\n",
        "num_ids": 60
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd=[]\n    even=[]\n",
        "num_ids": 11
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odd = 0\n    even = 0\n    for i in lst:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return odd+even\n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd = 0\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even + odd\n",
        "num_ids": 48
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(len(arr)):\n        res += int(arr[i]) ** k\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    # return sum(list(filter(lambda x: len(x) <= k, arr)))\n    arr = set(arr)\n    return sum(list(arr)[:k])\n",
        "num_ids": 49
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if len(arr) < 2 or k <= 0:\n        return sum(arr)\n    else:\n        start = 0\n        end = k-1\n        while end <= len(arr)-1:\n            if sum(arr[start:end+1]) <= sum(arr[:end+1]):\n                return sum(arr[start:end+1])\n            else:\n                start += 1\n                end += 1\n        return sum(arr[start:end])\n",
        "num_ids": 113
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    res = 0\n    \n    for x in arr:\n        res += max(str(x),2)\n        \n    return res\n        \n    pass\n",
        "num_ids": 40
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    start_idx = 0\n    sum = 0\n    while start_idx < len(arr):\n        num = arr[start_idx]\n        # 2. check if num is a multiple of ten\n        if num!= 0:\n            start_idx += 2\n        else:\n            sum += num\n        # 3. check if the next num is a multiple of 10\n        while start_idx < len(arr):\n            if num % 10 == 0:\n                break\n            num = num * 10 + arr[start_idx]\n            start_idx += 1\n        # 4. if num is a multiple of 10\n        # 5. if the next num is a multiple of 10\n        # 6. check if the next num is a multiple of 10\n        # 7. if the next num is a multiple of 10\n        # 8. if the next num is a multiple of 10\n        # 9. if the next num is a multiple of 10\n",
        "num_ids": 220
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # sort by first element of arr\n    # find first k elements from arr\n    arr = sorted(arr)\n    i = 0\n    while i < len(arr) - k:\n        yield arr[i]\n        i += 1\n",
        "num_ids": 57
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def count_digits(n):\n        return sum(int(i) for i in str(n))\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    output = 0\n    for i in range(len(arr) - 1):\n        if (arr[i] == 1):\n            temp = arr[i + 1]\n            if (i == 0):\n                output += temp\n            elif (temp < arr[i - 1]):\n                output += temp\n            else:\n                output += arr[i - 1]\n            arr[i] = temp\n",
        "num_ids": 95
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    out = []\n",
        "num_ids": 6
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = ''\n    for i in arr:\n        if len(s) < k:\n            s += str(i)\n        else:\n            if s[:k] == s[k:]:\n                s += str(i)\n            else:\n                s += str(i) + str(s[k - 1])\n    return int(s)\n",
        "num_ids": 85
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_collatz = []\n    base = 1\n    while base!= n:\n        odd_collatz.append(base)\n        base = base * 2\n    odd_collatz.append(1)\n    \n    for i in odd_collatz:\n        if i % 2 == 0:\n            i += 1\n    return odd_collatz\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + get_odd_collatz(n//2)\n    else:\n        return [n] + get_odd_collatz(3*n + 1)\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd_list = []\n    collatz_sequence = [1]\n    \n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n            collatz_sequence.append(n)\n            collatz_sequence.append(n + 1)\n        else:\n            n = 3 * n + 1\n            collatz_sequence.append(n)\n            collatz_sequence.append(n + 1)\n    return collatz_sequence\n",
        "num_ids": 112
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Initialize the list, where each number will be its odd number\n    odd_list = []\n",
        "num_ids": 24
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd_collatz = []\n",
        "num_ids": 9
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2, 2]\n    if n == 3:\n        return [3, 3, 3]\n    if n%2 == 0:\n        # odd_numbers = [1, 5, 11]\n        return [1, 5, 5, 2]\n    else:\n        return [3, 3, 3, 3, 3, 2]\n",
        "num_ids": 113
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    collatz_sequence = [1] # Create a list of 1\n    \n    while True:\n        # print(collatz_sequence)\n        # Check if the number is even or odd\n        if n % 2 == 0:\n            # Add even numbers to the end of the sequence\n            collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 2)\n            # print(collatz_sequence)\n            # Check if the number has 3/2 in the end of the sequence\n            if len(collatz_sequence) < 10:\n                # Check if the number has 1/2 in the end of the sequence\n                if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                    # The number has 1/2 in the end of the sequence, so add 1/2 to the end.\n                    collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                    # print(collatz_sequence)\n                    # Check if the number has 3/2 in the end of the sequence\n                    if len(collatz_sequence) < 10:\n                        # Check if the number has 3/2 in the end of the sequence\n                        if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                            # The number has 3/2 in the end of the sequence, so add 3/2 to the end.\n                            collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                            # print(collatz_sequence)\n                            # Check if the number has 3/2 in the end of the sequence\n                            if len(collatz_sequence) < 10:\n                                # Check if the number has 3/2 in the end of the sequence\n                                if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                                    # The number has 3/2 in the end of the sequence, so add 3/2 to the end.\n                                    collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                                    # print(collatz_sequence)\n                                    # Check if the number has 3/2 in the end of the sequence\n                                    if len(collatz_sequence) < 10:\n                                        # Check if the number has 3/2 in the end of the sequence\n                                        if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                                            # The number has 3/2 in the end of the sequence, so add 3/2 to the end.\n                                            collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                                            # print(collatz_sequence)\n                                            # Check if the number has 3/2 in the end of the sequence\n                                            if len(collatz_sequence) < 10:\n                                                # Check if the number has 3/2 in the end of the sequence\n                                                if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                                                    # The number has 3/2 in the end of the sequence, so add 3/2 to the end.\n                                                    collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                                                    # print(collatz_sequence)\n                                                    # Check if the number has 3/2 in the end of the sequence\n                                                    if len(collatz_sequence) < 10:\n                                                        # Check if the number has 3/2 in the end of the sequence\n                                                        if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                                                            # The number has 3/2 in the end of the sequence, so add 3/2 to the end.\n                                                            collatz_sequence.append(collatz_sequence[len(collatz_sequence) - 1] + 1)\n                                                            # print(collatz_sequence)\n                                                            # Check if the number has 3/2 in the end of the sequence\n                                                            if len(collatz_sequence) < 10:\n                                                                # Check if the number has 3/2 in the end of the sequence\n                                                                if collatz_sequence[len(collatz_sequence) - 1] % 2 == 0:\n                                                                        # The number has 3/2 in the end of th",
        "num_ids": 1012
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # All n's will be non-negative integers.\n    n = abs(n)\n    # An empty list that will be returned.\n    odd_collatz_list = []\n    # A list that will be ordered by the n's.\n    odd_list = []\n    # Compute the first n terms.\n    for i in range(1, n+1):\n        # Check if the current term is odd.\n        if i % 2 == 0:\n            # Add to the list.\n            odd_list.append(i)\n        # Check if the current term is even.\n        else:\n            # Add to the list.\n            odd_collatz_list.append(i)\n    # Return the list.\n    return odd_list, odd_collatz_list\n",
        "num_ids": 181
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    collatz_sequence = []\n    while n!= 1:\n        if n % 2 == 0:\n            collatz_sequence.append(n)\n            n /= 2\n        else:\n            n = 3 * n + 1\n    return collatz_sequence\n",
        "num_ids": 63
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if (n <= 1):\n        return []\n    elif (n == 2):\n        return [1, 2]\n    elif (n % 2 == 0):\n        return [1] + get_odd_collatz(n//2) + [3*n]\n    else:\n        return [1] + get_odd_collatz(n//2) + [2*n] + get_odd_collatz(n//2",
        "num_ids": 105
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        assert len(date) == 8\n        if date[-1]!= '-' and date[-1]!= '/':\n            return False\n        if not date[0:2].isdigit() or not date[0:2].isdigit() or not date[0:3].isdigit() or not date[0:3].isdigit() or not date[0:4].isdigit() or not date[0:4].isdigit():\n            return False\n        try:\n            datetime.datetime.strptime(date, \"%m-%d-%Y\")\n        except:\n            return False\n        if int(date[0:2]) > 31 or int(date[0:2]) < 1:\n            return False\n        if int(date[0:2]) > 30 or int(date[0:2]) < 1:\n            return False\n        if int(date[0:2]) > 31 or int(date[0:2]) < 1:\n            return False\n        return True\n    except:\n        return False",
        "num_ids": 251
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    days = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n    month_num = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n    date_parts = date.split('-')\n    if len(date_parts) < 3:\n        return False\n    for i in range(0, len(date_parts)):\n        if not date_parts[i].isdigit():\n            return False\n        elif int(date_parts[i]) > 31 or int(date_parts[i]) < 1:\n            return False\n        elif int(date_parts[i]) > 30 and int(date_parts[i]) < 29:\n            return False\n    for i in range(0, len(months)):\n        if not months[i].startswith(date_parts[0]):\n            return False\n        if months[i][0] not in months[i+1]:\n            return False\n    for i in range(0, len(months)):\n        if not months[i].startswith(date_parts[1]):\n            return False\n        if months[i][0] not in month_num[i]:\n            return False\n    for i in range(0, len(days)):\n        if not days[i].isdigit():\n            return False\n        elif int(days[i]) > 30:\n            return False\n    for i in range(0, len(months)):\n        if not months[i].startswith(date_parts[2]):\n            return False\n        if months[i][0] not in months[i+1]:\n            return False\n    for i in range(0, len(months)):\n        if not months[i].startswith(date_parts[3]):\n            return False\n        if months[i][0] not in month_num[i]:\n            return False\n    return True\n",
        "num_ids": 528
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    day_valid = re.match(r'^(\\d+)-(\\d+)-(\\d+)$',date)\n    month_valid = re.match(r'^(\\d+)-(\\d+)-(\\d+)$',date)\n    year_valid = re.match(r'^(\\d+)-(\\d+)-(\\d+)$',date)\n    if not day_valid or not month_valid or not year_valid:\n        return False\n    days = int(day_valid.group(1))\n    months = int(month_valid.group(1))\n    years = int(year_valid.group(1))\n    if days > 31 or months > 12 or years > 30:\n        return False\n    return True\n",
        "num_ids": 172
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not date:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if date:\n        date = date.strip().upper()\n        if date[0] in '0123456789':\n            day = date[0]\n            month = date[1]\n            year = date[2:4]\n            if len(month) == 1:\n                month = f\"0{month}\"\n            elif len(month) == 2:\n                month = f\"0{month}\"\n            if len(day) == 1:\n                day = f\"0{day}\"\n            elif len(day) == 2:\n                day = f\"0{day}\"\n            month = int(month)\n            day = int(day)\n            year = int(year)\n            # check month is valid\n            if (1 <= month <= 12) and (1 <= day <= 31) and (1 <= year <= 3000):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 223
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if date == '' or len(date) <= 0:\n        return False\n    if date[:2]!= '01':\n        return False\n    if len(date) < 4 or len(date) > 31:\n        return False\n    if not (1 <= int(date[:2]) <= 12):\n        return False\n    if not (1 <= int(date[2:]) <= 31):\n        return False\n    if not (1 <= int(date[3:]) <= 12):\n        return False\n    if not (1 <= int(date[4:]) <= 30):\n        return False\n    return True\n",
        "num_ids": 145
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    m, d, y = map(int, date.split('-'))\n    \n    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1 or y > 31:\n        return False\n    \n    if d < 1 or d > 30 or m < 1 or m > 12:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        # split the date string into a list of date strings\n        day_list = date.split('-')\n",
        "num_ids": 30
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if the date is a string and not empty\n    if isinstance(date, str) and date:\n        try:\n            date = dt.datetime.strptime(date, '%m-%d-%Y').strftime('%m-%d-%Y')\n        except:\n            return False\n        \n    # if the date is not a string\n    else:\n        return False\n    \n    # number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12\n    days = date[0]\n    months = date[1:3]\n    if not months.isdigit() or int(months) > 12:\n        return False\n    \n    # the number of days is not less than 1 or higher than 30 days for months 4,6,9,11\n    days = date[3:5]\n    months = date[6:7]\n    if not months.isdigit() or int(months) > 31:\n        return False\n    \n    # the number of days is not less than 1 or higher than 29 for the month 2\n    days = date[7:9]\n    months = date[10:11]\n    if not months.isdigit() or int(months) > 31:\n        return False\n    \n    # The months should not be less than 1 or higher than 12\n    if not months.isdigit() or int(months) > 12:\n        return False\n    \n    # the date should be in the format: mm-dd-yyyy\n    return True\n",
        "num_ids": 365
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        if len(date)==0:\n            return False\n        day,month,year = date.split('-')\n        if int(month)>12 or int(month)<1 or int(month)>12:\n            return False\n        if not year.isdigit() or int(year)<1900 or int(year)>9999:\n            return False\n        if int(month)<1 or int(month)>12:\n            return False\n        if int(day)<1 or int(day)>31:\n            return False\n        return True\n    except:\n        return False\n",
        "num_ids": 144
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    list_of_words = []\n    for i in range(0, len(txt), 2):\n        if txt[i:i+2]!= \",\":\n            list_of_words.append(txt[i:i+2])\n        else:\n            list_of_words.append(txt[i:i+1])\n    list_of_words = [word.lower() for word in list_of_words if word[0] in \"abcdef\"]\n    return list_of_words\n",
        "num_ids": 121
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words = txt.lower().split()\n    #print(words)\n    if words == []:\n        return words\n    if len(words)%2 == 1:\n        return words[::2]\n    else:\n        return words[::2] + [words[-1]]\n",
        "num_ids": 69
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    txt = txt.lower()\n    res = []\n    res_list = []\n    for w in txt.split(','):\n        if not w == \"\":\n            res.append(w)\n    # if the list contains a single character, its should be converted to a string\n    if res == ['']:\n        return ['']\n    for elem in res:\n        if elem == \"\":\n            continue\n        if len(elem) % 2!= 0:\n            res_list.append(elem[0])\n        else:\n            res_list.append(elem[0] + elem[1])\n    return res_list\n",
        "num_ids": 157
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = txt.lower().split()\n    if len(words) == 0:\n        return [\"\"]\n    if len(words) <= 2:\n        return words\n    return words[0:int(len(words)/2)]\n",
        "num_ids": 56
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    txt_words = [word for word in txt.split(',') if len(word.strip()) > 0]\n    return txt_words\n",
        "num_ids": 36
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    txt = ''.join(txt.split())\n    words = []\n    for char in txt:\n        if char not in string.ascii_letters:\n            words.append(char)\n    return words\n",
        "num_ids": 52
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = txt.split()\n    if all(x.isalpha() for x in words):\n        return words\n    else:\n        return words[::2]\n",
        "num_ids": 41
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    words = txt.lower().split()\n    for w in words:\n        if'' in w:\n            words.remove(w)\n            continue\n        if ',' in w:\n            words.remove(w)\n    return words\n",
        "num_ids": 57
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return [x.strip().lower() for x in txt.replace(\" \", \"\").replace(\",\", \"\").replace(\".\", \"\").split()]\n    return [x.strip().lower() for x in txt.replace(\" \", \"\").replace(\",\", \"\").split()]\n",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    txt = re.sub('[^a-zA-Z0-9_]+', '', txt)\n    txt = txt.split(',')\n    # return re.sub('[^a-zA-Z0-9_]+', '', txt)\n    txt = list(map(lambda x: x.strip(), txt))\n    return txt\n",
        "num_ids": 98
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            count += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Create a list of all duplicate numbers\n    dup = set([x for x in lst if lst.count(x) > 1])\n    for x in lst:\n        if lst.count(x) > 1:\n            return False\n        else:\n            # Check if the current number is in the list\n            if x in dup:\n                return False\n    # If the list has only 1 duplicate, return True\n    if len(dup) == 0:\n        return True\n    # Otherwise, return False\n    else:\n        return False\n",
        "num_ids": 130
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    return sorted(lst) == lst\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    dic = {}\n    for num in lst:\n        if num in dic.keys():\n            return False\n        dic[num] = 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(lst)\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True\n",
        "num_ids": 72
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if lst:\n        return sorted(lst) == lst\n    return True\n",
        "num_ids": 22
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if lst is None or len(lst) == 1:\n        return True\n    else:\n        return not any(x == lst[0] for x in lst[1:])\n",
        "num_ids": 47
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write a function that takes a list and returns whether the list is sorted\n",
        "num_ids": 21
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a, b = sorted([interval1, interval2])\n    if a[0] <= b[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Write your code here.\n    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval2[0] < interval1[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval1[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval2[0] and interval1[1] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval1[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] > interval2[0] and interval1[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval1[1] and interval2[0] > interval2[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval2[0] < interval1[1]:\n        return \"YES\"\n    elif interval1[0] < interval2[0] and interval2[0] < interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 579
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if interval1[0] >= interval2[1] and interval1[1] >= interval2[0]:\n        if interval1[1] - interval2[0] > interval1[0] - interval2[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"",
        "num_ids": 78
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if interval1[0] <= interval2[1] and interval1[1] <= interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 43
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # write your code here\n    if not interval1[0]<=interval2[0] and not interval1[1]<=interval2[1]:\n        return \"NO\"\n    if interval1[0]>=interval2[1] or interval1[1]>=interval2[0]:\n        return \"NO\"\n    if interval1[0]==interval2[0] or interval1[1]==interval2[1]:\n        return \"YES\"\n    if interval1[1]==interval2[1]:\n        return \"YES\"\n    return \"YES\"\n",
        "num_ids": 143
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    inter = []\n    def isprime(x):\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5), 2):\n            if x % i == 0:\n                return False\n        return True\n    \n    \n    def isint(x):\n        if x < 0:\n            return False\n        return True\n    \n    \n    def isprime(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    \n    \n    def length(a, b):\n        return (a - b) // 2\n",
        "num_ids": 153
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    intersection = set(interval1).intersection(set(interval2))\n    return 'YES' if len(intersection) == 1 else 'NO",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    signs = ['1', '-1', '0']\n    for x in arr:\n        if x in signs:\n            result += int(x) * int(x)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    signs = [-1, 0, 1]\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] in signs:\n            sum += (arr[i] * (2 ** i))\n    return sum\n    \n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print('\\n\u2705 All tests passed.\\n')",
        "num_ids": 108
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = 0\n    for el in arr:\n        result += el * (1 if el > 0 else -1)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    signs = [1 for i in range(len(arr))]\n    for i in range(len(arr)):\n        if arr[i] in [1, -1, 0]:\n            signs[i] = -1\n    for i in range(len(arr)):\n        if arr[i] in [1, -1, 0]:\n            signs[i] = 1\n    result = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        result[i] = arr[i] * signs[i]\n    return result\n",
        "num_ids": 141
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(len(arr)):\n        total += arr[i] * arr[i]\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # TODO\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    signs = [0, 0, 0, -1]\n    # d = 0\n    # for i in arr:\n    #     d += i\n    #     signs[i] = d\n    # return signs\n    if arr == []:\n        return None\n    else:\n        d = 0\n        for i in arr:\n            d += i\n            signs[i] = d\n        return signs\n",
        "num_ids": 98
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in arr:\n        sum = sum * i\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num = []\n    for i in arr:\n        num.append(i)\n        num.append(-i)\n",
        "num_ids": 29
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return prod_magnitude(arr, [x for x in [-1, 1] if x!= 0])\n",
        "num_ids": 28
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n",
        "num_ids": 19
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    def minPathHelper(grid, path, i, j):\n        if i == rows or j == cols or path[i][j] <= path[i][j+1]:\n            return path[i][j]\n        if i == 0:\n            path[i][j] = min(path[i][j+1] + grid[i][j], grid[i][j+1])\n            return path[i][j]\n        if j == 0:\n            path[i][j] = min(path[i][j+1] + grid[i][j], grid[i][j+1])\n            return path[i][j]\n        path[i][j] = min(path[i][j+1] + grid[i][j], grid[i][j+1])\n        return minPathHelper(grid, path, i-1, j) + grid[i][j]\n    # base case\n    path = [ [0 for _ in range(cols)] for _ in range(rows) ]\n    return minPathHelper(grid, path, 0, 0)\n",
        "num_ids": 272
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Idea: use a queue, maintain a counter and then follow up each cell with the smallest\n    # element\n    \n    \"\"\"\n    Start at the current cell.\n    If we find a cell that has a shorter path, then we can move to that cell.\n    If we reach the end, then we have found our min path.\n    \"\"\"\n    grid[0][0] = grid[0][0] + grid[0][1] + grid[0][2]\n    grid[0][1] = grid[0][0] + grid[1][0] + grid[1][1]\n    grid[0][2] = grid[0][0] + grid[2][0] + grid[2][1]\n    \n    # how long to find path\n    len = 0\n    while len == 0:\n        # the next cell is the first cell with a larger path\n        if grid[0][0] > grid[0][1] and grid[0][1] > grid[0][2]:\n            next_cell = grid[0][0] + grid[0][1] + grid[0][2]\n        elif grid[0][1] > grid[0][2]:\n            next_cell = grid[0][0] + grid[1][0] + grid[1][1]\n        else:\n            next_cell = grid[0][0] + grid[2][0] + grid[2][1]\n        len = len + 1\n        # if we reach the end of the grid\n        if next_cell > 0 and next_cell < len:\n            len = next_cell\n    \n    return [grid[0][0], grid[0][1]] + sorted(grid[1:len+1])\n    \n    # O(m + n) time complexity, O(n) space complexity\n    # 2 points\n    # 1 pointer, 2 check pointer, 2 updates\n    # time complexity is O(n), space complexity is O(n)\n    # to visit all cells of the grid, sort the list and if the cell we visited is the end,\n    # add it to the result\n    # space complexity is O(1), time complexity is O(1)\n    \n    # keep track of the leftmost cell we have visited\n    leftmost_cell = 0\n    # keep track of the current cell we have visited\n    current_cell = 0\n    # keep track of the number of steps we have taken\n    steps = 0\n    # keep track of the last cell we have visited\n    last_cell = len - 1\n    \n    # keep track of the topmost cell we have visited\n    topmost_cell = 0\n    # keep track of the current topmost cell we have visited\n    current_topmost_cell = 0\n    # keep track of the number of steps we have taken\n    steps = 0\n    # keep track of the leftmost cell we have visited\n    leftmost_cell = 0\n    # keep track of the topmost cell we have visited\n    topmost_cell = 0\n    # keep track of the current topmost cell we have visited\n    current_topmost_cell = 0\n    # keep track of the number of steps we have taken\n    steps = 0\n    # keep track of the last cell we have visited\n    last_cell = len - 1\n    \n    # loop through all cells\n    # iterate through the cells in the grid\n    # find the next cell with the smallest value\n    # check if we have reached the end\n    # if we have reached the end, then we have reached the end of the grid\n    # if we have reached the end, then we have reached the end of the grid\n    while current_cell < last_cell:\n        # if the current cell has a shorter path than the cell we have visited\n        # then we have reached the end of the grid\n        if grid[current_cell][0] > current_topmost_cell and current_cell < topmost_cell:\n            steps = current_cell + 1\n            topmost_cell = current_cell\n            # if we reached the end, we have reached the end of the grid\n            if current_cell == last_cell:\n                return []\n            # if we have reached the end, we have reached the end of the grid\n            # add to the result\n            # if we have reached the end, we have reached the end of the grid\n            else:\n                steps = current_cell + 1\n                current_topmost_cell = current_cell\n        # if the curren",
        "num_ids": 1026
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_A, lst_B = [], []\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 1:\n                lst_A.append(col)\n            if grid[row][col] == 2:\n                lst_B.append(row)\n    path = []\n    for idx in range(len(lst_B) - 1):\n        path.append(lst_B[idx] - lst_B[idx + 1])\n    for idx in range(len(lst_A) - 1):\n        path.append(lst_A[idx] - lst_A[idx + 1])\n    return path\n",
        "num_ids": 183
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    s = [[-1] * cols for _ in range(rows)]\n    s[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if s[i][j]!= -1:\n                s[i][j] = s[i][j] + min(grid[i][j], s[i][j - 1])\n            elif s[i][j] == -1:\n                s[i][j] = min(grid[i][j], s[i][j - 1])\n            else:\n                s[i][j] = s[i][j] + 1\n",
        "num_ids": 171
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # you can implement this function with O(k) extra space, where the extra space \n    # is the sum of every possible pair of cells on the grid that have not been visited.\n",
        "num_ids": 43
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    N = len(grid)\n    if N == 0 or N == 1: return [grid[0][0]]\n",
        "num_ids": 28
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Step 1: Initialize an array of length 2, where the first element is the cell with the\n    # least value\n    lst_A = [1]\n    # Step 2: Initialize an array of length 2, where the first element is the cell with the\n    # least value\n    lst_B = [1]\n    # Step 3: initialize the maximum length of the paths of the path array\n    k = k\n    # Step 4: Check if the path array is monotonic\n    # The loop will start from the first cell and add the cells to the path array\n    # until the path array is monotonic\n    while lst_B!= lst_A:\n        # Step 5: Find the min element in the list, in which the current cell is less than the\n        # next cell. The list will be updated with the element that is less than the next cell\n        # and the next cell.\n        min_element = lst_B[0]\n        # Step 6: Initialize the current cell as the minimum element of the list\n        # (i.e. the cell with the least value)\n        lst_C = lst_B\n        # Step 7: Find the next cell to be added\n        next_cell = lst_B[0]\n        # Step 8: While the cell is less than the next cell\n        while next_cell < min_element:\n            # Step 9: Add the next cell to the cell array\n            lst_C[-1] = next_cell\n            # Step 10: Find the next cell\n            next_cell = lst_C[-1]\n        # Step 11: Update the current cell\n        lst_B[0] = next_cell\n        # Step 12: Update the maximum length of the paths of the path array\n        k = k - 1\n        # Step 13: If the path array is monotonic, then the maximum length is already reached\n        if k == 0:\n            # Step 14: If the current cell has no two adjacent cells, then this cell is\n            # the minimum element. If the next cell is equal to the minimum element, then\n            # the path array must have at least two adjacent cells, which means the current\n            # cell is the minimum element.\n            if lst_A[0] < lst_B[0]:\n                # Step 15: If the current cell is less than the next cell, then it must be\n                # the minimum element.\n                if lst_B[0] < lst_A[0]:\n                    # Step 16: Remove the element from the array to get the path array\n                    lst_A.remove(lst_A[0])\n                    # Step 17: If the array contains at least one value, then this element is\n                    # the minimum element.\n                    if len(lst_A) > 0:\n                        # Step 18: Find the minimum value in the array\n                        min_element = lst_A[0]\n                        # Step 19: Set the next cell to be the minimum element\n                        next_cell = min_element\n                # Step 20: If the path array is monotonic, then the minimum element is the minimum\n                # element.\n                else:\n                    # Step 21: If the array contains at least one value, then this element is the minimum\n                    # element.\n                    min_element = lst_A[0]\n                    # Step 22: Set the next cell to be the minimum element\n                    next_cell = min_element\n            # Step 23: If the current cell is equal to the minimum element, then it must be\n            # the minimum element.\n            else:\n                # Step 24: Remove the element from the array to get the path array\n                lst_A.remove(lst_A[0])\n                # Step 25: If the array contains at least one value, then this element is the minimum\n                # element.\n                if len(lst_A) > 0:\n                    # Step 26: Find the minimum value in the array\n                    min_element = lst_A[0]\n                    # Step 27: Set the next cell to be the minimum element\n                    next_cell = min_element\n                # Step 28: If the path array is monotonic, then the minimum element is the minimum\n                # element.\n                else:\n                    # Step 29: If the array contains at least one value, then this element is the minimum\n                    # element.\n                    min_element = lst_A[0]\n                    # Step 30: Set th",
        "num_ids": 1026
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not grid or not grid[0]:\n        return []\n    \n    n = len(grid[0])\n    for i in range(n):\n        grid[0][i] = grid[0][i]\n",
        "num_ids": 52
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # When k is 1, the path contains exactly one cell.\n    if k == 1:\n        return [1]\n    # Keep track of the cells that have been visited\n    visited_cells = set()\n",
        "num_ids": 50
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    t = [1]\n    i = 0\n    while i < n:\n        t.append(t[i] + t[i - 1] + t[i + 1])\n        i += 1\n    return t[n:]\n",
        "num_ids": 56
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    else:\n        return [1] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "num_ids": 44
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    tri_lst = [1, n / 2, (n + 1) / 2, (n + 2) * (n - 1) + (n - 2) // 2]\n    return tri_lst\n",
        "num_ids": 76
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 0:\n        return []\n    if n <= 1:\n        return [1]\n    return [1 + (n / 2)] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "num_ids": 58
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def tribonacci(n, k):\n        if n == 0 or n == 1:\n            return [1, 1]\n        elif n == k:\n            return [1, 2, 3]\n        else:\n            t1, t2, t3 = tribonacci(n - 1, k)\n            t1 = t1 + t2 + t3\n            t2 = t2 + t3\n            t3 = t3 + 1\n            return [t1, t2, t3]\n    return tribonacci(n, 0)\n",
        "num_ids": 130
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    tri_list = []\n",
        "num_ids": 8
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1 or n == 0:\n        return [1]\n    elif n < 1:\n        return []\n    else:\n        return [1, tri(n-1) + tri(n-2)]\n",
        "num_ids": 53
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def fibonacci(n):\n        \"\"\" fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n + 1)\n        where n >= 0\"\"\"\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 2, 3]\n        else:\n            return [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 897, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 999]\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 2]\n    elif n % 2 == 0:\n        l = []\n        for i in range(n//2):\n            l.append(fibonacci(i + 1)[i] + fibonacci(i + 2)[i])\n        return l\n    else:\n        l = []\n        for i in range(n//2):\n            l.append(fibonacci(i + 1)[i])\n        return l\n    \ndef main():\n    n = int(input(\"enter a non-negative integer number: \"))\n    print(tri(n))\nmain(",
        "num_ids": 709
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def tribonacci(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 2]\n        else:\n            n1 = n - 1\n            n2 = n - 2\n            n3 = n - 3\n            if n1 < 0:\n                return [1] + tri(n1) + [n1]\n            elif n2 < 0:\n                return [n1] + tri(n2) + [n1, n2] + [n2]\n            elif n3 < 0:\n                return [n1] + tri(n3) + [n1, n3] + [n3]\n            else:\n                return [n1] + tri(n3) + [n1, n2] + tri(n2) + [n1, n2, n3]\n    return tribonacci(n)\n",
        "num_ids": 225
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Write your code here\n    if n <= 2:\n        return [1, n]\n    else:\n        for i in range(3, n+1):\n            tri(i)\n        return [tri(i) for i in range(3, n+1)]\n",
        "num_ids": 67
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    if n % 2!= 0:\n        return 0\n    else:\n        return n * digits(n-1)\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n >>= 1\n    return count\n",
        "num_ids": 28
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    return n // 10 % 10\n",
        "num_ids": 20
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # first do the math\n    while n > 0:\n        temp = n % 10\n        if temp % 2 == 1:\n            return 0\n        n = n // 10\n    return n\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while n:\n        n,rem = divmod(n,2)\n        if rem:\n            digits += 1\n    return digits\n",
        "num_ids": 34
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    else:\n        return n//10\n",
        "num_ids": 26
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return int(n%2)\n",
        "num_ids": 10
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum = sum + digit\n        n = n // 10\n    if sum % 2!= 0:\n        return 0\n    else:\n        return sum\n",
        "num_ids": 56
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = str(n)\n    even_count = 0\n    for x in n:\n        if x % 2!= 0:\n            even_count += 1\n    return even_count * int(n[1:even_count + 1])\n",
        "num_ids": 59
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here.\n    return n%2\n    \n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    nested = []\n    nested_list = []\n    for char in string:\n        if char == ']':\n            nested_list.append(nested)\n            nested = []\n        elif char == ']':\n            nested.append(char)\n        elif char == '[':\n            nested.append(char)\n        elif char == '[':\n            nested = []\n    if nested_list!= []:\n        return False\n    else:\n        return True\n",
        "num_ids": 119
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if string == '':\n        return False\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            if string[i-1] == '[' and string[i+1] == ']':\n                continue\n            else:\n                return False\n        if string[i] == ']':\n            if string[i-1] == '{' and string[i+1] == '}':\n                continue\n            else:\n                return False\n        if string[i] == '}':\n            if string[i-1] == '{' and string[i+1] == '}':\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 168
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(string)):\n        if string[i] == '[':\n            if is_nested(string[i+1:i+3]):\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #pass\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    temp = []\n    for i in string:\n        if i == '[':\n            temp.append('[')\n        elif i == ']':\n            temp.pop()\n        else:\n            continue\n    return temp == []\n",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = True\n    brackets = []\n    \n    for char in string:\n        if char == ']':\n            if brackets[-1] == '[[':\n                brackets.pop()\n            else:\n                result = False\n                break\n        elif char == '[':\n            if brackets[-1] == '[':\n                brackets.pop()\n            else:\n                result = False\n                break\n        elif char == ']':\n            if brackets[-1] == '[':\n                brackets.pop()\n            else:\n                result = False\n                break\n        elif char == '[':\n            if brackets[-1] == '[':\n                brackets.pop()\n            else:\n                result = False\n                break\n    \n    return result\n",
        "num_ids": 181
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = string.replace('[', ']').replace(']', '[')\n    \n    \n    if len(s) == 0 or s == \"[\" or s == \"[]\" or s == \"]\" or s == ']':\n        return False\n    \n    stack = []\n    for i in range(len(s)):\n        if s[i] == '[':\n            stack.append('[')\n        elif s[i] == ']' and stack!= []:\n            stack.pop()\n        elif s[i] == ']' and stack!= []:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 150
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_valid_sub(string):\n        checker = {}\n        index = 0\n        current_index = 0\n        for index in range(len(string)):\n            if string[index] == '(':\n                checker[index] = 1\n            elif string[index] == ')':\n                checker[index] = 0\n                current_index = index\n            if len(checker.keys()) == 0:\n                return False\n            current_index = current_index + 1\n            \n        if current_index == 0:\n            return True\n        return False\n    \n    def is_valid_sub_rec(string):\n        checker = {}\n        index = 0\n        current_index = 0\n        for index in range(len(string)):\n            if string[index] == '(':\n                checker[index] = 1\n            elif string[index] == ')':\n                checker[index] = 0\n                current_index = index\n            if len(checker.keys()) == 0:\n                return False\n            current_index = current_index + 1\n        if current_index == 0:\n            return True\n        return False\n    \n    def is_valid_sub_rec_rec(string):\n        checker = {}\n        index = 0\n        current_index = 0\n        for index in range(len(string)):\n            if string[index] == '(':\n                checker[index] = 1\n            elif string[index] == ')':\n                checker[index] = 0\n                current_index = index\n            if len(checker.keys()) == 0:\n                return False\n            current_index = current_index + 1\n        if current_index == 0:\n            return True\n        return False\n    \n    def is_valid_sub_rec_rec_rec(string):\n        checker = {}\n        index = 0\n        current_index = 0\n        for index in range(len(string)):\n            if string[index] == '(':\n                checker[index] = 1\n            elif string[index] == ')':\n                checker[index] = 0\n                current_index = index\n            if len(checker.keys()) == 0:\n                return False\n            current_index = current_index + 1\n        if current_index == 0:\n            return True\n        return False\n    \n    if string == '':\n        return False\n    \n    if is_nested(string) == True:\n        return True\n    if is_valid_sub(string) == True and is_valid_sub_rec(string) == True and is_valid_sub_rec_rec(string) == True and is_valid_sub_rec_rec_rec(string) == True:\n        return True\n    return False\n",
        "num_ids": 652
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # This is a recursive function to check if the string is nested.\n    def is_nested(string):\n        if len(string) < 1:\n            return True\n        if string[0] == '[':\n            return is_nested(string[1:])\n        if string[0] == '[':\n            if is_nested(string[1:]) == False:\n                return False\n            else:\n                return True\n        if string[0] == ']':\n            return is_nested(string[1:])\n        if string[0] == ']':\n            if is_nested(string[1:]) == False:\n                return False\n            else:\n                return True\n        return False\n",
        "num_ids": 171
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    list = []\n    for i in string:\n        if i == ']':\n            if len(list) > 0:\n                list.pop()\n            else:\n                return False\n        elif i == ']':\n            if len(list) > 0:\n                list.pop()\n            else:\n                return False\n        elif i == '[':\n            if len(list) > 0:\n                list.pop()\n            else:\n                return False\n        elif i == ']':\n            if len(list) > 0:\n                list.pop()\n            else:\n                return False\n        elif i == '[':\n            if len(list) > 0:\n                list.pop()\n            else:\n                return False\n        else:\n            list.append(i)\n    if len(list) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 209
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #return sum(map(lambda x: round(x**2), lst))\n    return sum(map(lambda x: round(x**2), lst))\n",
        "num_ids": 40
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    from math import sqrt\n    return sum([float(x)**2 for x in lst])\n",
        "num_ids": 25
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = sum(map(lambda x: (x**2),lst))\n    return s\n",
        "num_ids": 24
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # lst = list(map(float,lst))\n    \n    # return sum([(i ** 2) for i in lst])\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i ** 2\n    return sum",
        "num_ids": 24
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # my_list = list(map(lambda x: round(x ** 2), lst))\n    my_list = [round(x ** 2) for x in lst]\n    return sum(my_list)\n",
        "num_ids": 54
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([x**2 for x in lst]",
        "num_ids": 14
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in range(len(lst)):\n        sum += (lst[i] ** 2)\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([ round(i**2) for i in lst])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not lst:\n        return 0\n    mul_list = [n ** 2 for n in lst]\n    return sum(mul_list)\n",
        "num_ids": 39
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (txt.rstrip(' ') and\n        any(c in string.ascii_letters\n            for c in txt[-1]) and\n        not any(c in '!'\n            for c in txt[-1])\n        )\n",
        "num_ids": 61
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: modify this function to check if the last character\n    # is a letter in a word.\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Create a pattern to check for a given string\n    pattern = \"^[a-zA-Z]*$\"\n    # Create a boolean pattern to check for a given string\n    first_char = True\n    # Loop through the string and check for a character\n    for char in txt:\n        # If the current character is a lowercase letter\n        if char.isalpha():\n            # If the pattern was found, then add it to the boolean pattern\n            if first_char:\n                first_char = False\n            # Otherwise, add it to the boolean pattern\n            else:\n                first_char = True\n        # If the character is not a lowercase letter, then\n        # add it to the boolean pattern\n        else:\n            first_char = True\n    # Return true if the pattern was not found\n    return first_char\n",
        "num_ids": 193
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if txt[-1].isalpha():\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    last_char = txt[-1]\n    word = True\n    for char in txt:\n        if char!= last_char:\n            word = False\n    return word\n",
        "num_ids": 45
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    last_char_is_a_letter = False\n    for char in txt:\n        if char == txt[-1]:\n            last_char_is_a_letter = True\n    return last_char_is_a_letter\n    \n",
        "num_ids": 60
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return txt.rfind(' ')!= -1 \n",
        "num_ids": 16
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code here\n    if txt[-1] in [\"A\",\"E\",\"I\",\"O\",\"U\"]:\n        return False\n    if txt[-1] in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if (txt[-1] == \" \" or txt[-1] == \".\"):\n        return False\n    else:\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def search(arr, element):\n        l, r = 0, len(arr)-1\n        while l <= r:\n            mid = l + (r-l) // 2\n            if arr[mid] < element:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return r\n    return search(arr, arr[0])\n",
        "num_ids": 86
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code goes here\n    if len(arr) <= 2:\n        return -1\n    elif arr[1] <= arr[0]:\n        return 1\n    else:\n        index = 1\n        for i in range(1, len(arr)):\n            if arr[i] <= arr[index-1]:\n                return -1\n            index += 1\n        return index\n",
        "num_ids": 91
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    idx = 0\n    for num in arr:\n        if num > arr[idx]:\n            idx = arr.index(num)\n    return idx\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return -1 if any(v < arr[i] for i, v in enumerate(arr)) else 0\n",
        "num_ids": 27
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if arr == []:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not arr:\n        return -1\n    arr.sort()\n    start = 0\n    last = len(arr) - 1\n    while start < last:\n        mid = (start + last) // 2\n        if arr[mid] < arr[mid + 1]:\n            start = mid + 1\n        elif arr[mid] > arr[mid - 1]:\n            last = mid - 1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            return i - 1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr = [int(i) for i in arr]\n    arr.sort()\n    prev = arr[0]\n    for i in range(1, len(arr)):\n        if prev >= arr[i]:\n            return -1\n        prev = arr[i]\n    return -1\n",
        "num_ids": 70
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_value = 0\n    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            max_value = i\n    if max_value!= -1:\n        return max_value\n    return -1\n",
        "num_ids": 64
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Create a function that takes a list and returns the largest\n    # integer in the list, and the smallest integer.\n",
        "num_ids": 31
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    negative_smallest = -1\n    negative_greatest = 1\n    largest = None\n    smallest = None\n    for number in lst:\n        if number < negative_smallest:\n            negative_smallest = number\n        if number > negative_greatest:\n            negative_greatest = number\n        if number > largest:\n            largest = number\n        if number < smallest:\n            smallest = number\n    return (negative_smallest, negative_greatest, largest, smallest",
        "num_ids": 114
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a = None\n    b = None\n    for n in lst:\n        if n > 0:\n            a = n\n        else:\n            b = n\n    if a is not None and b is not None:\n        return (a, b)\n    else:\n        return None\n",
        "num_ids": 69
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = max(lst)\n    m = min(lst)\n    return (n, m",
        "num_ids": 25
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_neg = None\n    max_pos = None\n    if lst:\n        for x in lst:\n            if x < 0:\n                if max_pos is None:\n                    max_pos = x\n                elif max_neg is None:\n                    max_neg = x\n                else:\n                    if max_pos > max_neg:\n                        max_pos = x\n            else:\n                if max_neg is None:\n                    max_neg = x\n                elif max_pos is None:\n                    max_pos = x\n                else:\n                    if max_neg < max_pos:\n                        max_neg = x\n    else:\n        return (None, None)\n    return (max_neg, max_pos)\n",
        "num_ids": 174
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = None\n    min_numbers = lst[0]\n    max_numbers = lst[-1]\n    for number in lst[1:]:\n        if number < 0:\n            min_numbers = number\n        elif number > 0:\n            max_numbers = number\n        else:\n            return (None, None)\n    if min_numbers < 0 or max_numbers > 0:\n        return (None, None)\n    return (min_numbers, max_numbers)\n",
        "num_ids": 124
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pos_lst = []\n    neg_lst = []\n    nums = []\n    for element in lst:\n        if element < 0:\n            neg_lst.append(element)\n        else:\n            pos_lst.append(element)\n    if neg_lst == []:\n        return (None, None)\n    elif len(neg_lst) == 1:\n        return (neg_lst[0], None)\n    else:\n        if len(pos_lst) == 0:\n            return (None, None)\n        elif len(pos_lst) == 1:\n            return (pos_lst[0], None)\n        else:\n            return (pos_lst[0], neg_lst[0])\n",
        "num_ids": 183
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code goes here\n",
        "num_ids": 8
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        # list_of_integers = [int(i) for i in lst if i.isnumeric()]\n        # return max(list_of_integers), min(list_of_integers)\n        return max(lst), min(lst)\n    except:\n        return None\n",
        "num_ids": 76
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        elif a == b:\n            return None\n    else:\n        return None\n",
        "num_ids": 98
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    elif type(a) == float or type(a) == int:\n        if b == str(a):\n            return b\n        elif b == float(a):\n            return float(a)\n        elif b == int(a):\n            return int(a)\n        elif type(b) == str:\n            return a if b > a else b\n        else:\n            return a if a > b else b\n    elif type(a) == list:\n        if b in a:\n            return a[0]\n        else:\n            return b\n    elif type(a) == tuple:\n        if b in a:\n            return a[0]\n        else:\n            return b\n    elif type(a) == dict:\n        if b in a:\n            return a[b]\n        else:\n            return b\n    else:\n        return b\n",
        "num_ids": 230
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if isinstance(a, float) or isinstance(b, float):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, str):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, int):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, float):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, list):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, set):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, dict):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, tuple) and isinstance(b, tuple):\n        if a == b:\n            return a\n        else:\n            return None\n    return None\n",
        "num_ids": 253
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if isinstance(a, str):\n        return b\n    elif isinstance(a, float):\n        return a\n    elif isinstance(a, int):\n        return b\n    else:\n        raise TypeError('TypeError: {0} cannot be compared to {1}.'.format(type(a), type(b)))\n",
        "num_ids": 80
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # YOUR CODE GOES HERE\n    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        if a == b:\n            return a\n        else:\n            return None\n    elif isinstance(a, float) and isinstance(b, int):\n        if a == b:\n            return a\n        else:\n            return None\n    elif isinstance(a, int) and isinstance(b, int):\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        raise TypeError\n",
        "num_ids": 159
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(a)!= type(b):\n        return None\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 36
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(a) == type(b):\n        if str(type(a)) == str(type(b)):\n            return a if a > b else b\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == b:\n        return None\n    elif a.find(\",\") == b.find(\",\") or a.find(\".\") == b.find(\".\"):\n        return float(a)\n    elif a.find(\".\") == b.find(\".\"):\n        return float(a[:a.find(\".\")])\n    else:\n        return int(a)\n",
        "num_ids": 90
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(a) == int or type(a) == float or type(a) == str:\n        if type(b) == int or type(b) == float or type(b) == str:\n            return a if a > b else b\n    elif type(a) == list or type(a) == tuple:\n        if type(b) == list or type(b) == tuple:\n            return tuple(a) if a > b else b\n    elif type(a) == dict:\n        if type(b) == dict:\n            return {k:compare_one(v,b[k]) for k,v in a.items()}\n    elif type(a) == set:\n        if type(b) == set:\n            return a if a > b else b\n    else:\n        raise TypeError(\"Type mismatch\")\n",
        "num_ids": 199
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # For a str, compare it to b.\n    if type(b) is str:\n        return str(a) > str(b)\n    # If a is a number, compare it to b.\n    elif type(b) is int or type(b) is float:\n        return a > b\n    # If a is a number, compare it to b.\n    else:\n        return a > b\n",
        "num_ids": 97
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if (n == 0):\n        return False\n    elif (n%2 == 0):\n        return True\n    \n    return is_equal_to_sum_even(n-1)\n    \ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_odd(4) == False\n    is_equal_to_sum_odd(6) == True\n    is_equal_to_sum_odd(8) == False\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%2 == 1):\n        return True\n    \n    return is_equal_to_sum_odd(n-1)\n    \ndef is_equal_to_sum_triple(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive triple numbers\n    Example\n    is_equal_to_sum_triple(5) == False\n    is_equal_to_sum_triple(6) == False\n    is_equal_to_sum_triple(8) == True\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%3 == 0):\n        return True\n    \n    return is_equal_to_sum_triple(n-1)\n    \ndef is_equal_to_sum_four(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 3 positive four numbers\n    Example\n    is_equal_to_sum_four(5) == False\n    is_equal_to_sum_four(6) == False\n    is_equal_to_sum_four(8) == True\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%4 == 0):\n        return True\n    \n    return is_equal_to_sum_four(n-1)\n    \ndef is_equal_to_sum_octagon(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    Example\n    is_equal_to_sum_octagon(5) == False\n    is_equal_to_sum_octagon(6) == True\n    is_equal_to_sum_octagon(8) == False\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%5 == 0):\n        return True\n    \n    return is_equal_to_sum_octagon(n-1)\n    \ndef is_equal_to_sum_line(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive line numbers\n    Example\n    is_equal_to_sum_line(5) == False\n    is_equal_to_sum_line(6) == False\n    is_equal_to_sum_line(8) == True\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%2 == 0):\n        return True\n    \n    return is_equal_to_sum_line(n-1)\n    \ndef is_equal_to_sum_square(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive square numbers\n    Example\n    is_equal_to_sum_square(5) == False\n    is_equal_to_sum_square(6) == False\n    is_equal_to_sum_square(8) == True\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%4 == 0):\n        return True\n    \n    return is_equal_to_sum_square(n-1)\n    \ndef is_equal_to_sum_pentagon(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive pentagonal numbers\n    Example\n    is_equal_to_sum_pentagon(5) == False\n    is_equal_to_sum_pentagon(6) == False\n    is_equal_to_sum_pentagon(8) == True\n    \"\"\"\n    \n    if (n == 0):\n        return False\n    elif (n%9 =",
        "num_ids": 1025
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n >= 4:\n        return False\n    if n == 0:\n        return True\n    else:\n        return is_equal_to_sum_even(n - 2) and is_equal_to_sum_even(n - 1)\n",
        "num_ids": 59
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (n % 4 == 0 and n % 2 == 0) or n == 0\n",
        "num_ids": 21
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return n > 0 and (n % 2) == 0 and is_equal_to_sum_even(n // 2)\n",
        "num_ids": 30
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum_even += i\n    if sum_even % 4 == 0:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (is_positive_even(n) and is_sum_even_even(n))\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i % 3 == 0:\n            sum_even += i\n",
        "num_ids": 43
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return n%4==0 and is_even_sum(n)\n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all([e % 2 == 0 for e in range(0, n + 1, 2)])\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 4:\n        return True\n    else:\n        return is_equal_to_sum_even(n // 2) and is_equal_to_sum_even(n // 4)\n",
        "num_ids": 48
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return n * (n - 1) * (n - 2) *... * 1\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21)*(n-22)*(n-23)*(n-24)*(n-25)*(n-26)*(n-27)*(n-28)*(n-29)*(n-30)*(n-31)*(n-32)*(n-33)*(n-34)*(n-35)*(n-36)*(n-37)*(n-38)*(n-39)*(n-40)*(n-41)*(n-42)*(n-43)*(n-44)*(n-45)*(n-46)*(n-47)*(n-48)*(n-49)*(n-50)*(n-51)*(n-52)*(n-53)*(n-54)*(n-55)*(n-56)*(n-57)*(n-58)*(n-59)*(n-60)*(n-61)*(n-62)*(n-63)*(n-64)*(n-65)*(n-66)*(n-67)*(n-68)*(n-69)*(n-70)*(n-71)*(n-72)*(n-73)*(n-74)*(n-75)*(n-76)*(n-77)*(n-78)*(n-79)*(n-80)*(n-81)*(n-82)*(n-83)*(n-84)*(n-85)*(n-86)*(n-87)*(n-88)*(n-89)*(n-90)*(n-91)*(n-92)*(n-93)*(n-94)*(n-95)*(n-96)*(n-97)*(n-98)*(n-99)*(n-100)*(n-101)*(n-102)*(n-103)*(n-104)*(n-105)*(n-106)*(n-107)*(n-108)*(n-109)*(n-110)*(n-111)*(n-112)*(n-113)*(n-114)*(n-115)*(n-116)*(n-117)*(n-118)*(n-119)*(n-120)*(n-121)*(n-122)*(n-123)*(n-124)*(n-125)*(n-126)*(n-127)*(n-128)*(n-129)*(n-130)*(n-131)*(n-132)*(n-133)*(n-134)*(n-135)*(n-136)*(n-137)*(n-138)*(n-139)*(n-140)*(n-141)*(n-142)*(n-143)*(n-144)*(n-145)*(n-146)*(n-147)*(n-148)*(n-149)*(n-150)*(n-151)*(n-152)*(n-153)*(n-154)*(n-155)*(n-156)*(n-157)*(n-158)*(n-159)*(n-160)*(n-161)*(n-162)*(n-163)*(n-164)*(n-165)*(n-166)*(n-167)*(n-168)*(n-169)*(n-170)*(n-171)*(n-172)*(n-173)*(n-174)*(n-175)*(n-176)*(n-177)*(n-178)*(n-179)*(n-180)*(n-181)*(n-182)*(n-183)*(n-184)*(n-185)*(n-186)*(n-187)*(n-188)*(n-189)*(n-190)*(n-191)*(n-192)*(n-193)*(n-194)*(n-195)*(n-196)*(n-197)*(n-198)*(n-199)*(n-200)*(n-201)*(n-202)*(n-203)*(n-204)",
        "num_ids": 1025
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return special_factorial(n-1) * special_factorial(n-2) * special_factorial(n-3) * special_factorial(n-4)\n",
        "num_ids": 82
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n * (n-1) * (n-2) *... * 1\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n * (n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21)*(n-22)*(n-23)*(n-24)*(n-25)*(n-26)*(n-27)*(n-28)*(n-29)*(n-30)*(n-31)*(n-32)*(n-33)*(n-34)*(n-35)*(n-36)*(n-37)*(n-38)*(n-39)*(n-40)*(n-41)*(n-42)*(n-43)*(n-44)*(n-45)*(n-46)*(n-47)*(n-48)*(n-49)*(n-50)*(n-51)*(n-52)*(n-53)*(n-54)*(n-55)*(n-56)*(n-57)*(n-58)*(n-59)*(n-60)*(n-61)*(n-62)*(n-63)*(n-64)*(n-65)*(n-66)*(n-67)*(n-68)*(n-69)*(n-70)*(n-71)*(n-72)*(n-73)*(n-74)*(n-75)*(n-76)*(n-77)*(n-78)*(n-79)*(n-80)*(n-81)*(n-82)*(n-83)*(n-84)*(n-85)*(n-86)*(n-87)*(n-88)*(n-89)*(n-90)*(n-91)*(n-92)*(n-93)*(n-94)*(n-95)*(n-96)*(n-97)*(n-98)*(n-99)*(n-100)*(n-101)*(n-102)*(n-103)*(n-104)*(n-105)*(n-106)*(n-107)*(n-108)*(n-109)*(n-110)*(n-111)*(n-112)*(n-113)*(n-114)*(n-115)*(n-116)*(n-117)*(n-118)*(n-119)*(n-120)*(n-121)*(n-122)*(n-123)*(n-124)*(n-125)*(n-126)*(n-127)*(n-128)*(n-129)*(n-130)*(n-131)*(n-132)*(n-133)*(n-134)*(n-135)*(n-136)*(n-137)*(n-138)*(n-139)*(n-140)*(n-141)*(n-142)*(n-143)*(n-144)*(n-145)*(n-146)*(n-147)*(n-148)*(n-149)*(n-150)*(n-151)*(n-152)*(n-153)*(n-154)*(n-155)*(n-156)*(n-157)*(n-158)*(n-159)*(n-160)*(n-161)*(n-162)*(n-163)*(n-164)*(n-165)*(n-166)*(n-167)*(n-168)*(n-169)*(n-170)*(n-171)*(n-172)*(n-173)*(n-174)*(n-175)*(n-176)*(n-177)*(n-178)*(n-179)*(n-180)*(n-181)*(n-182)*(n-183)*(n-184)*(n-185)*(n-186)*(n-187)*(n-188)*(n-189)*(n-190)*(n-191)*(n-192)*(n-193)*(n-194)*(n-195)*(n-196)*(n-197)*(n-198)*(n-199)*(n-200)*(n-201)*(n-202)*(n-203)*(n-204)",
        "num_ids": 1025
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 1\n    for i in range(2,n+1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # clean up spaces\n    text = re.sub(r'\\s+', '_', text)\n    # clean up consecutive spaces\n    if len(text) > 2:\n        # remove consecutive spaces\n        text = re.sub(r'\\s*\\s*', '-', text)\n        # clean out consecutive spaces with -\n        text = re.sub(r'^\\s+', '-', text)\n        # clean out consecutive spaces with - \n        text = re.sub(r'\\s+$', '', text)\n    return text",
        "num_ids": 132
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    return re.sub(' +', '-', text)",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = re.sub('\\s+', '_', text)\n    text = re.sub('(.)\\1+', '_\\1', text)\n    text = re.sub('(.)\\1+', '-_\\1', text)\n    text = re.sub('(.)\\2+', '_\\1', text)\n    text = re.sub('(.)\\2+', '-_\\1', text)\n    text = re.sub('(.)\\3+', '_\\1', text)\n    text = re.sub('(.)\\3+', '-_\\1', text)\n    text = re.sub('(.)\\4+', '_\\1', text)\n    text = re.sub('(.)\\4+', '-_\\1', text)\n    return text\n",
        "num_ids": 194
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Remove spaces\n    text = text.replace(\" \", \"_\")\n    # Convert all consecutive spaces to underscores\n    for i in range(1, len(text)):\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i:]\n    # Replace consecutive spaces with -\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text[:i] + \"-_\" + text[i:]\n    # Check length of string\n    if len(text) > 2:\n        # Delete last character\n        text = text[:len(text) - 2]\n    return text\n",
        "num_ids": 158
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if len(text) == 1:\n        return text\n    \n    index = 0\n    while index < len(text) and text[index] =='':\n        index += 1\n        \n    text = text[0:index] + \"_\" + text[index:]\n    return text\n    \n    \ndef fix_punctuation(text):\n    \"\"\"\n    Given a string, correct the string by removing\n    punctuation marks and converting them to lowercase.\n    \n    fix_punctuation(\"Example\") == \"Example\"\n    fix_punctuation(\"Example 1\") == \"Example_1\"\n    fix_punctuation(\" Example 2\") == \"_Example_2\"\n    fix_punctuation(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    \n    return text.lower()\n    \n    \ndef main():\n    print(\"Main function called\")\n    \n    # Get the file path\n    path = sys.argv[1]\n",
        "num_ids": 227
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if len(text) <= 2:\n        return text\n    \n    text = re.sub(r'\\s+', '-', text)\n    \n    num_spaces = 0\n    curr_space = 0\n    \n    for i, char in enumerate(text):\n        \n        if char =='' and curr_space!= 0:\n            num_spaces += 1\n            text = text[:i] + '-' + text[i + 1:]\n        \n        if char == '-' and curr_space == 0:\n            num_spaces -= 1\n            text = text[:i] + '_' + text[i + 1:]\n        \n        if num_spaces > 1 and curr_space!= 0 and curr_space + 1 == num_spaces:\n            text = text[:i] + '-' + text[i + 1:]\n        \n        curr_space = 0\n        \n    return text",
        "num_ids": 225
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text.replace(' ', '_')\n    text = text.replace('\\t', '_')\n    text = text.replace('\\n', '_')\n    text = text.replace('\\r', '_')\n    \n    return text\n    \n",
        "num_ids": 63
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.replace(' ', '_')\n    for i in range(2, len(text)):\n        if len(text[i]) > len(text[i-2]):\n            text[i] = text[i-2] + text[i]\n            if text[i] in [' ', '\\t', '\\n']:\n                text[i] = '_'\n            if text[i] in ['.', ',', ':', ';', '!', '?', '!', '\\\\']:\n                text[i] = '_'\n    return text\n",
        "num_ids": 139
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_text = \"\"\n    i = 0\n    while i < len(text):\n        if i == 0 or text[i-1] == \" \":\n            new_text += text[i]\n        else:\n            new_text += \"_\"\n            i += 1\n        \n    return new_text\n",
        "num_ids": 74
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text.replace(\" \", \"_\")\n        else:\n            text = text.replace(\" \",\"_\")\n    return text\n",
        "num_ids": 55
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for letter in file_name:\n        if file_name.count(\".\") == 3:\n            if (file_name.startswith(\"0\")):\n                return 'No'\n        elif not file_name.endswith(\".txt\") and not file_name.endswith(\".exe\") and not file_name.endswith(\".dll\"):\n            return 'No'\n    return 'Yes",
        "num_ids": 97
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    file_name = str(file_name)\n    \n    if len(file_name) < 3:\n        return 'No'\n    if not file_name[0].isdigit():\n        return 'No'\n    if not file_name[0] in ['a', 'A', '0', '9']:\n        return 'No'\n    if not file_name[1].isdigit():\n        return 'No'\n    if not file_name[2].isalnum():\n        return 'No'\n    if len(file_name)!= 4:\n        return 'No'\n    \n    return 'Yes'\n",
        "num_ids": 148
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not file_name.isalnum():\n        return 'No'\n    if len(file_name) > 3:\n        return 'No'\n    for i in file_name:\n        if i!= '.':\n            return 'No'\n    if not file_name[-3:].isalnum():\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 87
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    file_name_valid = False\n    num_digits = 0\n    file_name_string = str(file_name)\n    for i in range(len(file_name_string)):\n        if file_name_string[i].isdigit() == True:\n            num_digits += 1\n        else:\n            if file_name_string[i] == '.':\n                return 'No'\n            elif file_name_string[i] not in ['a','A','z','0','9']:\n                return 'No'\n    if num_digits == 3:\n        if file_name_string[:2]!= '0' and file_name_string[:2]!= '.':\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 189
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (file_name.find('.')!= -1):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 33
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        len(file_name)\n        if (file_name.index('.') > -1):\n            if (file_name.index('.') < len(file_name) - 1):\n                if (file_name[file_name.index('.') + 1:file_name.index('.') + len(file_name) + 2].isdigit()):\n                    if (len(file_name) < 3):\n                        if (file_name.count('.') == 1):\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    else:\n                        return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    except ValueError:\n        return 'No'\n",
        "num_ids": 189
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check if the file name is valid\n    # Check that all three digits and one dot are present\n    # Check that the file name has at least 3 digits\n    # Check that the first three letters of the file name contain only letters from\n    # latin alphapet ('a'-'z' and 'A'-'Z')\n    # Check that the file name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    # Check that the substring before the dot is one of these: ['txt', 'exe', 'dll']\n    # Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n",
        "num_ids": 159
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # if there are less than three digits in a file name\n    if len(file_name) < 3:\n        return 'No'\n    # if there are more than one dot in a file name\n    if file_name.find('.') > 0:\n        return 'No'\n    # if a letter can be a dot (only has 'a' and 'z' and not 'A' and 'Z')\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        return 'No'\n    # if the file name has only one dot ('a'-'z' and 'A'-'Z' and contains only one letter)\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        return 'No'\n    # if the file name has only one letter, and contains only one letter, which starts with a letter from the latin alphabet\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        if file_name[0].isalpha():\n            return 'No'\n        else:\n            return 'No'\n    # if the file name has more than one letter, and contains only one letter, which starts with a letter from the latin alphabet\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        if file_name[0].isalpha() and file_name[1].isalpha():\n            return 'No'\n        else:\n            return 'No'\n    # if the file name contains a letter, which starts with a letter from the latin alphabet\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        if file_name[0].isalpha():\n            return 'No'\n        else:\n            return 'No'\n    # if the file name contains a letter, which starts with a letter from the latin alphabet\n    elif file_name.find('.') == -1 and file_name.find(' ') == -1:\n        if file_name[0].isalpha():\n            return 'No'\n        else:\n            return 'No'\n    # if the file name contains an empty space (no dots)\n    elif file_name.find('.')!= -1:\n        return 'No'\n    # if the file name contains a dot '.'\n    elif file_name.find('.') == -1:\n        return 'No'\n    # if the file name contains an empty space, which starts with a letter from the latin alphabet, and ends with an empty space\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains an empty space, which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains a letter, which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains a letter, which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains an empty space (no dots), which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains an empty space, which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!= -1 and file_name[0].isalpha():\n        return 'No'\n    # if the file name contains a space, which starts with a letter from the latin alphabet, and ends with a letter from the latin alphabet\n    elif file_name.find('.')!",
        "num_ids": 1024
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # check if the file is valid\n    if file_name.__contains__(\".\"):\n        # check if the file's name is valid\n        file_name_temp = file_name.replace(\".txt\", \"\").replace(\"exe\", \"\").replace(\"dll\", \"\")\n        if file_name_temp[0:3] == \"0\" and len(file_name_temp) > 3:\n            # check if the file's name is valid\n            file_name_temp = file_name_temp.replace(\".\", \"\")\n            if file_name_temp[0:1] in [\"a\", \"A\", \"z\", \"Z\"]:\n                # check if the name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n                if file_name_temp.__contains__(\".\"):\n                    return \"No\"\n                else:\n                    # check if the name contains exactly one dot '.'\n                    if file_name_temp.__contains__(\".\"):\n                        return \"No\"\n                    else:\n                        # check if the name contains exactly one dot '.', except if it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n                        if file_name_temp.__contains__(\".\"):\n                            return \"No\"\n                        else:\n                            # check if the name contains exactly one dot '.', except if it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n                            if file_name_temp.__contains__(\".\"):\n                                return \"No\"\n                            else:\n                                return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n",
        "num_ids": 413
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    if not file_name.startswith('0'):\n        return 'No'\n    \n    if not '.' in file_name:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if not any(c.isdigit() for c in file_name):\n        return 'No'\n    if not file_name.endswith('.'):\n        return 'No'\n    if not any(c.isalpha() for c in file_name[1:]):\n        return 'No'\n    if not file_name[1].isupper():\n        return 'No'\n    if not any(c.isupper() for c in file_name[2:]):\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 221
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = 0\n",
        "num_ids": 6
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def squar(x):\n        if x == 0:\n            return 0\n        return x*x*x\n    \n    s = 0\n    for i in lst:\n        s += squar(i)\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum=0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = list(lst)\n    for item in lst:\n        if item%3!=0:\n            lst.append(item**3)\n        if item%4!=0:\n            lst.append(item**4)\n",
        "num_ids": 61
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3!= 0 or i % 4!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for i in lst:\n        if i%3 == 0 and i%4!= 0:\n            total = total + i**2\n        elif i%3!= 0 and i%4!= 0:\n            total = total + i**2\n    return total\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for entry in lst:\n        if entry % 3 == 0:\n            sum += entry**3\n        elif entry % 4 == 0:\n            sum += entry**4\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([x**2 for x in lst if (x%3==0 and x%4!=0) or (x%3==4 and x%4==0)])\n",
        "num_ids": 44
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 3\n        elif i % 4 == 0:\n            sum += i ** 4\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**3\n        elif i % 4 == 0:\n            sum += i**4\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # PUT YOUR CODE HERE\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Solution 1\n    if len(sentence) % 2!= 0:\n        return sentence\n",
        "num_ids": 24
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return''.join([word for word in sentence.split(' ')])\n",
        "num_ids": 18
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    t = sentence.split()\n    return \"\".join(sorted(set(t)))\n",
        "num_ids": 23
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: Write your code here\n    return \" \".join([word for word in sentence.split() if int(word) % 2 == 0]",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if sentence == \"\":\n        return \"\"\n    \n    if len(sentence) == 1:\n        return sentence\n    \n    words = sentence.split(' ')\n    first_word = words[0]\n    is_prime_word = True\n    for word in words[1:]:\n        if not word.isdigit():\n            is_prime_word = False\n            break\n        elif int(word) not in range(1, len(words)):\n            is_prime_word = False\n            break\n        if is_prime_word and int(word) not in range(1, len(words)):\n            is_prime_word = False\n            break\n",
        "num_ids": 159
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sentence = sentence.lower().split()\n    sentence = set(sentence)\n    for word in sentence:\n        if len(word) == 1:\n            continue\n        if not is_prime(len(word)):\n            return \"no\"\n    return \"yes\"\n",
        "num_ids": 67
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def words_in_sentence_check(sentence):\n        sentence = sentence.lower()\n        for i in range(len(sentence)-1):\n            if sentence[i] in ['i', 'o', 'u', 'e', 'a', 'l', 't','s', 'd', 'r', 'w']:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 97
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # INPUT: sentence = \"This is a test\"\n    # OUTPUT: \"is\"\n",
        "num_ids": 24
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if x.count(\"/\"):\n        num, den = x.split(\"/\")\n        num = int(num)\n        den = int(den)\n        if num!= 0 and den!= 0:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x == \"0\":\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        int(x)\n    except ValueError:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return False if x == '0' else simplify(x.split('/')[0], x.split('/')[1]",
        "num_ids": 31
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def expand(x, n):\n        if x.isdigit():\n            return True\n        if not x[0].isdigit() and not x[1:].isdigit():\n            return False\n        return int(x) == int(n)\n",
        "num_ids": 62
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        numerator, denominator = x.split('/')\n        if int(numerator) * int(denominator)!= int(n):\n            return False\n        else:\n            return simplify(numerator, denominator)\n    except Exception:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = str(n)\n    if x == \"1/0\":\n        return True\n    elif n.isdigit() == False:\n        return False\n    elif n == \"0\" or n == \"0.0\":\n        return False\n    else:\n        num = x.split(\"/\")\n        num = str(num[0]) + \"/\" + num[1]\n        den = x.split(\"/\")\n        den = str(den[0]) + \"/\" + den[1]\n        \n        if x == num or x == den:\n            return True\n        else:\n            return False\n",
        "num_ids": 146
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        x = float(x)\n        n = float(n)\n    except ValueError:\n        return False\n    if x % n == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        if float(x) / float(n) < 0:\n            return False\n        else:\n            x = int(x)\n            n = int(n)\n            while x!= 0 and n!= 0:\n                n = n / 2\n                x = x / 2\n            return x == 0 or n == 0\n    except:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if isinstance(x, str):\n        raise TypeError('The parameter x must be an expression')\n",
        "num_ids": 25
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # O(n) in time complexity, O(n) in space complexity\n    if not nums:\n        return []\n    # O(1) in time complexity, O(1) in space complexity\n    for i in range(len(nums)):\n        nums[i] = int(nums[i])\n    # O(n) in time complexity, O(1) in space complexity\n    nums.sort()\n    return nums\n",
        "num_ids": 106
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum_ = 0\n    nums = sorted(nums)\n    for num in nums:\n        sum_ += num\n    nums = nums[:len(nums)-1]\n    nums.append(sum_)\n    return nums\n",
        "num_ids": 62
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: implement this function\n    nums.sort(key=lambda x:sum(map(lambda y:y*int(x),list(str(x)))))\n",
        "num_ids": 42
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # create a dict\n    d = dict()\n    # iterate over the list\n    for num in nums:\n        # if the key is not in the dict, add it and return\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    # sort the items in the dictionary\n    sorted_items = sorted(d.items(), key=lambda x: x[1])\n    return sorted_items",
        "num_ids": 108
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    nums.sort()\n    #for each element, take the index of the element and subtract it from its sum\n    for i in range(len(nums)):\n        nums[i] -= int(nums[i])\n    return nums\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # step 1 - sort the list in ascending order\n    nums.sort()\n    # step 2 - iterate through the list and sum each element\n    # until all the numbers are equal\n    while nums:\n        # step 3 - if nums[-1] is equal to nums[0],\n        #     then we want to break out of the while loop\n        #     and pick the last element\n        if nums[-1] == nums[0]:\n            break\n        # step 4 - sum all the numbers until the first number is equal to the last one\n        # this means that if the last element is equal to the first,\n        # then we want to break out of the while loop\n        # and pick the last element\n        elif nums[-1] == nums[-2]:\n            break\n        else:\n            # step 5 - assign the element to a variable\n            # then we will move the next element\n            # up to the right to avoid duplication\n            nums[-1] = nums[-1] - nums[0]\n            # step 6 - assign the element to a variable\n            # then we will move the next element\n            # right to avoid duplication\n            nums[-2] = nums[-2] - nums[0]\n    # step 7 - return the list of elements after sorting\n    return nums\n",
        "num_ids": 314
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # a = list(map(int, input().split()))\n    # b = [sum(map(int, input().split())) for _ in range(len(a))]\n    \n    def sum_list(a):\n        return sum(map(int, list(str(sum(map(int, map(int, str(a))))))))\n    \n    return sorted(nums, key=sum_list)\n",
        "num_ids": 99
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_sum = 0\n    sum_nums = 0\n    for num in nums:\n        sum_nums += num\n        max_sum = max(sum_nums, max_sum)\n    for num in nums:\n        nums.sort(reverse=True, key=lambda x: x-num)\n    return nums\n    \ndef get_strings(nums):\n    \"\"\"\n    Given a list of numbers, return all possible strings from it.\n    \"\"\"\n    out = []\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        n = nums[i-1]\n        m = nums[i]\n        out.append(str(n) + '+' + str(m))\n        \n    return out\n    \ndef main():\n    print(order_by_points([1, 11, -1, -11, -12]))\n    print(get_strings([1, 11, -1, -11, -12]))\n    print(order_by_points([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(get_strings([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "num_ids": 307
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    numLen = len(nums)\n    for i in range(numLen):\n        for j in range(0, numLen-i-1):\n            if (nums[j] > 10 and nums[j] % 2 == 1) and (nums[j] > nums[j+1]):\n                count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for num in nums:\n        if num < 10 or (num // 10) % 2 == 1 or (num % 10) % 2 == 1:\n            print(num)\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    max_count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i] % 2:\n                count = 0\n                if nums[i - 1] % 2:\n                    count = count + 1\n                if nums[i + 1] % 2:\n                    count = count + 1\n                if count >= 2:\n                    max_count = max(max_count, count)\n            else:\n                count = 0\n                if nums[i - 1] % 2:\n                    count = count + 1\n                if nums[i + 1] % 2:\n                    count = count + 1\n                if count >= 3:\n                    max_count = max(max_count, count)\n    return max_count\n",
        "num_ids": 195
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # Use a for-loop to iterate over the elements of the array.\n    # Note: Each loop iteration starts at the beginning of the array. \n    # This doesn't mean that you can do it in-place and you can only do it \n    # once, but you can use the for-loop, which is much faster.\n    \n    # For each element in the array, check if it's greater than 10, and if so, \n    # modify it with the new elements.\n",
        "num_ids": 114
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def odd(num):\n        if (num % 10) > 0 and num % 10 % 2!= 0 and num % 10 > 1:\n            return 2\n        else:\n            return 1\n",
        "num_ids": 46
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(list(filter(lambda x: x >= 10 and x % 2 == 1, nums)))\n",
        "num_ids": 26
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Do your code here\n    \n    nums_1 = sorted(nums)\n    nums_2 = nums_1[:-1]\n    nums_3 = nums_2[:]\n    nums_1.reverse()\n    nums_2.reverse()\n    nums_3.reverse()\n    \n    #print(nums_1)\n    #print(nums_2)\n    #print(nums_3)\n    \n    odd_numbers = 0\n    even_numbers = 0\n    \n    #for i in range(len(nums_1)):\n    #    if nums_1[i] > 10:\n    #        odd_numbers += 1\n    #    if nums_1[i] % 2!= 0:\n    #        even_numbers += 1\n    \n    #print(odd_numbers)\n    #print(even_numbers)\n    \n    odd_numbers = len(nums_3)\n    even_numbers = len(nums_2)\n    \n    return odd_numbers + even_number",
        "num_ids": 264
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # n = len(nums)\n    # if n<1:\n    #     return 0\n    # else:\n    #     return sum(nums[0:n-1:2])\n    # return sum(nums[0:n-1:2])\n    # print(nums[0:n-1:2])\n    # print(nums[0:n-1:2][0])\n    # print(nums[0:n-1:2][-1])\n    # return sum(nums[0:n-1:2])\n    return sum(x for x in nums if x>=10 and x%2 and x%3 and x%5 and x%7 and x%9)\n",
        "num_ids": 172
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] >= 10 and nums[j] > 10 and (nums[i] % 10 == nums[j] % 10):\n                count = count + 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (n // 3) * (n - (n // 3))\n",
        "num_ids": 18
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = [0 for _ in range(n)]\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n",
        "num_ids": 39
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    a = [i * i - i + 1 for i in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] * a[j] * a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = [i * i - i + 1 for i in range(n + 1)]\n    a = [i * i - 1 for i in a]\n    return len(set(a))\n",
        "num_ids": 46
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    return len(set(a))\n",
        "num_ids": 29
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # make a empty array\n    a = [0] * n\n",
        "num_ids": 17
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return int(n**0.5+1)\n",
        "num_ids": 14
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_count = 0\n    for i in range(n):\n        a = i * i - i + 1\n        if (a % 3 == 0):\n            if (a % 10 == 0):\n                max_count += a\n            else:\n                max_count += a\n    return max_count\n",
        "num_ids": 72
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if planet1 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"BAD PLANET\"\n    if planet2 not in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]:\n        return \"BAD PLANET\"\n    if planet1 == planet2:\n        return (\"Saturn\", \"Uranus\")\n    planet1_name = planet1.replace(\" \",\"_\").lower()\n    planet2_name = planet2.replace(\" \",\"_\").lower()\n    for i in range(len(planet1_name)):\n        if planet1_name[i] == \"z\" and planet2_name[i]!= \"z\":\n            planet1_name = planet1_name[:i] + \"r\" + planet1_name[i+1:]\n            planet2_name = planet2_name[:i] + \"r\" + planet2_name[i+1:]\n    return (planet1_name, planet2_name)\n",
        "num_ids": 270
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # start with our inputs\n    planet1 = planet1.replace(\" \", \"_\")\n    planet2 = planet2.replace(\" \", \"_\")\n",
        "num_ids": 34
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num = 0\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    while planet1 not in [\"s\", \"v\", \"x\", \"y\", \"z\", \"j\", \"m\", \"p\", \"b\", \"a\"]:\n        if planet1 == \"s\":\n            planet1 = planet2\n            planet2 = \"Sun\"\n        elif planet1 == \"v\":\n            planet1 = planet2\n            planet2 = \"Venus\"\n        elif planet1 == \"x\":\n            planet1 = planet2\n            planet2 = \"Mercury\"\n        elif planet1 == \"y\":\n            planet1 = planet2\n            planet2 = \"Venus\"\n        elif planet1 == \"z\":\n            planet1 = planet2\n            planet2 = \"Mercury\"\n        elif planet1 == \"j\":\n            planet1 = planet2\n            planet2 = \"Jupiter\"\n        elif planet1 == \"m\":\n            planet1 = planet2\n            planet2 = \"Saturn\"\n        elif planet1 == \"p\":\n            planet1 = planet2\n            planet2 = \"Uranus\"\n        elif planet1 == \"b\":\n            planet1 = planet2\n            planet2 = \"Neptune\"\n        elif planet1 == \"a\":\n            planet1 = planet2\n            planet2 = \"Earth\"\n        else:\n            print(\"Wrong planet name\")\n            num = num + 1\n    if num == 0:\n        return ()\n    else:\n        if planet2.find(\"s\")!= -1:\n            planet2 = planet2.replace(\"s\", \"Sun\")\n        if planet2.find(\"v\")!= -1:\n            planet2 = planet2.replace(\"v\", \"Venus\")\n        if planet2.find(\"x\")!= -1:\n            planet2 = planet2.replace(\"x\", \"Mercury\")\n        if planet2.find(\"y\")!= -1:\n            planet2 = planet2.replace(\"y\", \"Venus\")\n        if planet2.find(\"z\")!= -1:\n            planet2 = planet2.replace(\"z\", \"Mercury\")\n        if planet2.find(\"j\")!= -1:\n            planet2 = planet2.replace(\"j\", \"Jupiter\")\n        if planet2.find(\"m\")!= -1:\n            planet2 = planet2.replace(\"m\", \"Saturn\")\n        if planet2.find(\"p\")!= -1:\n            planet2 = planet2.replace(\"p\", \"Uranus\")\n        if planet2.find(\"b\")!= -1:\n            planet2 = planet2.replace(\"b\", \"Neptune\")\n        if planet2.find(\"a\")!= -1:\n            planet2 = planet2.replace(\"a\", \"Earth\")\n        return (planet1, planet2)\n",
        "num_ids": 678
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    \n    if planet1 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return (planet1, planet2)\n    elif planet2 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return (planet2, planet1)\n    else:\n        return (planet2, planet1)\n",
        "num_ids": 138
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(set(planet1.split(\" \")).intersection(set(planet2.split(\" \"))))\n",
        "num_ids": 27
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def get_orb_distance(orb_name1, orb_name2):\n        '''\n        The distance between two orbit names is calculated using the formula:\n            d = the distance between the names given.\n            You do not need to understand the exact formula.\n        '''\n        return orb_name1.upper() + orb_name2.upper()\n    \n    def get_orb_coords(planet1_name, planet2_name):\n        '''\n        Returns the coordinates of the planets, which are given as a tuple of \n        the form (x, y) where x is the distance from the planet 1 and y is\n        the distance from the planet 2.\n        '''\n        return (planet1_name.upper(), planet2_name.upper())\n    \n    if not is_correct_planet_name(planet1, planet2):\n        return 'planet name not correct'\n    \n    if planet1.upper() == planet2.upper():\n        return ('planet name same')\n    \n    if planet1 == 'Jupiter' and planet2 == 'Neptune':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mercury' and planet2.upper() == 'Uranus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Venus' and planet2.upper() == 'Mercury':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Earth' and planet2.upper() == 'Mars':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mars' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Mercury':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Neptune' and planet2.upper() == 'Venus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Neptune' and planet2.upper() == 'Mars':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mercury' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mars' and planet2.upper() == 'Uranus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mercury' and planet2.upper() == 'Mars':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Earth' and planet2.upper() == 'Uranus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mars' and planet2.upper() == 'Uranus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Venus' and planet2.upper() == 'Mercury':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mars' and planet2.upper() == 'Venus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Venus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Neptune' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Earth':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Mars' and planet2.upper() == 'Uranus':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.upper() == 'Mars':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Venus' and planet2.upper() == 'Mercury':\n        return ('planet name same')\n    \n    if planet1.upper() == 'Uranus' and planet2.uppe",
        "num_ids": 1026
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if planet1 not in PLANETS and planet2 not in PLANETS:\n        return(planet2, planet1)\n    elif planet2 not in PLANETS and planet1 not in PLANETS:\n        return(planet1, planet2)\n    else:\n        return(\"planet1\", \"planet2\")\n",
        "num_ids": 71
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #mytuple = (planet1, planet2)\n    #sorted_tuple = sorted(mytuple)\n    mytuple = []\n    sorted_tuple = []\n    l1 = len(planet1)\n    l2 = len(planet2)\n    for i in range(l1):\n        if planet1[i] == planet2[0]:\n            mytuple.append(planet1[i])\n        else:\n            if planet1[i] > planet2[0]:\n                mytuple.append(planet2[0])\n            else:\n                mytuple.append(planet1[i])\n    for i in range(l2):\n        if planet2[i] == planet1[0]:\n            mytuple.append(planet2[i])\n        else:\n            if planet2[i] > planet1[0]:\n                mytuple.append(planet1[0])\n            else:\n                mytuple.append(planet2[i])\n    for i in range(l1):\n        for j in range(l2):\n            if planet1[i] > planet2[j]:\n                mytuple.append(planet2[j])\n            elif planet1[i] < planet2[j]:\n                mytuple.append(planet1[i])\n        mytuple.append(planet1[i])\n    mytuple.sort()\n    return tuple(mytuple)\n",
        "num_ids": 341
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #TODO: Create a function called 'find_nearest_planet' that takes two planet names.\n    #It should return the name of the nearest planet to the current planet. \n    #If there is no nearest planet, return the string \"There are no planets in our solar system.\"\n    #You can use the \"is\" operator to test whether two strings are the same.\n",
        "num_ids": 87
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    planet1 = planet1.upper()\n    planet2 = planet2.upper()\n    if planet1 < planet2:\n        return (planet1, planet2)\n    else:\n        return (planet2, planet1)\n",
        "num_ids": 54
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda word: len(word))\n",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    def helper(lst):\n        if len(lst) == 0:\n            return []\n        elif len(lst) == 1:\n            return sorted(lst, key = lambda x : len(x))\n        else:\n            if lst[0].isalpha():\n                return sorted(lst, key = lambda x : len(x))\n            else:\n                result = sorted(lst, key = lambda x : len(x))\n                for i in range(1, len(lst)):\n                    if result[i].isalpha():\n                        result[i] = result[i].lower()\n                        break\n                result.sort(key = lambda x : len(x))\n                return result\n    return helper(lst)\n",
        "num_ids": 180
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    def is_word(word):\n        return len(word)%2 == 0\n    \n    def sort_word(word):\n        \"\"\"\n        Return a sorted word by checking if all characters are odd.\n        \"\"\"\n        if is_word(word):\n            return sorted(word)\n        else:\n            return [word[i] for i in range(0, len(word), 2) if i%2!=0]\n",
        "num_ids": 103
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    lst = sorted(lst)\n    while lst:\n        item = lst.pop(0)\n        if not item.isalpha():\n            continue\n        if len(item) % 2:\n            res.append(item)\n            continue\n        index = len(item) - 1\n        for i in range(len(item) - 1):\n            if item[i].lower()!= item[i + 1].lower():\n                if item[i] > item[i + 1]:\n                    item[i], item[i + 1] = item[i + 1], item[i]\n                break\n    return res\n",
        "num_ids": 153
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = sorted(lst, key = len, reverse = True)\n    lst.sort()\n    return lst\n",
        "num_ids": 31
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # If the list is not a list, return it\n    if type(lst)!= type([]):\n        return lst\n",
        "num_ids": 32
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst_sorted = []\n    for word in lst:\n        word = word.lower().split()\n        if len(word) % 2!= 0:\n            word.sort()\n        else:\n            word = word[::-1]\n        for ele in word:\n            lst_sorted.append(ele)\n    return lst_sorted\n",
        "num_ids": 88
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort(key = len)\n    return ls",
        "num_ids": 15
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    my_list = []\n    length_list = []\n    for word in lst:\n        length = 0\n        for char in word:\n            length += 1\n        length_list.append(length)\n    \n    for i in range(0, len(length_list)):\n        if length_list[i] % 2!= 0:\n            my_list.append(word[i])\n    return my_list\n",
        "num_ids": 103
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # use the Fermat prime theorem to determine which numbers are \n    # a prime and which numbers are not.\n    \n    n_prime = [2, 3, 5, 7]\n    for i in n_prime:\n        if not isPrime(i):\n            y = x\n            return y\n        elif n % i == 0:\n            x = x\n            return y\n        else:\n            x = x + 1\n",
        "num_ids": 101
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n==1:\n        return y\n    if n%2==0:\n        return x_or_y(n//2, x, y)\n    else:\n        return x_or_y(n//2, y, x)\n",
        "num_ids": 59
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_prime(n):\n        if n <= 1: return False\n        elif n <= 3: return True\n        elif n%2 == 0 or n%3 == 0: return False\n        else: return any(is_prime(i) for i in range(5,int(n**0.5)+5,6))\n",
        "num_ids": 79
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x:\n        return n\n    else:\n        return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    while n%2 == 0: n //= 2\n    if n > 0: return y\n    return x\n",
        "num_ids": 27
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = int(x)\n    y = int(y)\n    if n % 2 == 0:\n        return x\n    elif n % 2 == 1:\n        return y\n",
        "num_ids": 44
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    xor = x & y\n    if xor == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 29
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        if int(n) < 2:\n            raise ValueError(\"Number must be a prime number\")\n        return int(n) * x + y\n    except ValueError:\n        return -1\n",
        "num_ids": 50
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def has_power(num):\n        p = num\n        while p % 10!= 0:\n            p = p // 10\n        return p!= num\n        \n    # x_or_y(3, 55, 13) == 13\n    # x_or_y(7, 34, 12) == 34\n    # x_or_y(1, 3, 2) == 2\n    # x_or_y(15, 8, 5) == 5\n    \n    if has_power(n) == True and has_power(y) == False:\n        return y\n    elif has_power(n) == False and has_power(y) == True:\n        return x\n    elif has_power(n) == True and has_power(y) == True:\n        return n\n    else:\n        raise Exception('Cannot determine the value of x or y')\n",
        "num_ids": 207
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Your code here\n    #raise NotImplementedError(\"Implement me!\")\n    res = 0\n    for num in lst:\n        if num%2 == 0:\n            res += math.pow(num,2)\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(lst) / len(lst)\n",
        "num_ids": 15
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num ** 2\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    double_the_difference_list = []\n    if len(lst) == 0:\n        return 0\n    for i in lst:\n        if i%2 == 1:\n            double_the_difference_list.append(i**2)\n    return sum(double_the_difference_list)\n",
        "num_ids": 76
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for item in lst:\n        if isinstance(item, int) or not isinstance(item, float):\n            sum = sum + item ** 2\n        else:\n            pass\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if lst == []:\n        return 0\n    for num in lst:\n        if num % 2!= 0:\n            lst.remove(num)\n            lst.append(num*num)\n    return sum(lst)\n",
        "num_ids": 59
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    return sum([num**2 for num in lst if num % 2!= 0])\n",
        "num_ids": 37
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2:\n            result += lst[i] ** 2\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    if lst == []:\n        return 0\n    return sum([i**2 for i in lst if i % 2!= 0])\n",
        "num_ids": 40
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # If the input list is empty, return 0\n    if len(lst) == 0:\n        return 0\n        \n    # Init a new list\n    result = []\n    \n    # Check if the first number in the list is even\n    if lst[0] % 2 == 0:\n        # Add the first number to the result list\n        result.append(lst[0])\n        \n        # Check if the first number is the second number\n        if lst[1] % 2 == 0:\n            # Add the second number to the result list\n            result.append(lst[1])\n        \n        # If the first number is the second number, \n        # add the first number to the result list\n        else:\n            # Add the first number to the result list\n            result.append(lst[0])\n            # Add the second number to the result list\n            result.append(lst[1])\n            \n            # Check if the first number is odd\n            # and the second number is even\n            if lst[1] % 2 == 0:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n            \n            # If the first number is odd and the second number is even,\n            # add the first number to the result list\n            else:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n        \n    # If the input list is not empty, \n    # add the number to the result list\n    else:\n        result.append(lst[0])\n        result.append(lst[1])\n        \n    # Check if the result list has only one number\n    if len(result) == 1:\n        # Check if the first number is odd\n        if result[0] % 2 == 0:\n            # Add the first number to the result list\n            result.append(lst[0])\n            \n            # If the first number is odd,\n            # add the first number to the result list\n            result.append(lst[0])\n            \n            # Check if the first number is even\n            # and the second number is odd\n            if lst[0] % 2 == 0:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n            else:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n        \n        # If the first number is even, \n        # add the first number to the result list\n        else:\n            # Add the first number to the result list\n            result.append(lst[0])\n            \n            # Add the second number to the result list\n            result.append(lst[1])\n            \n            # Check if the first number is odd\n            # and the second number is even\n            if lst[0] % 2 == 0:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n            \n            # If the first number is odd and the second number is even,\n            # add the first number to the result list\n            else:\n                # Add the first number to the result list\n                result.append(lst[0])\n                # Add the second number to the result list\n                result.append(lst[1])\n                \n    # If the result list is not empty, \n    # return the sum of squares of the numbers \n    # in the result list\n    else:\n        return sum(result)\n        ",
        "num_ids": 924
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    scores = []\n    guesses = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            scores.append(0)\n            guesses.append(i+1)\n        elif guess[i]!= game[i]:\n            scores.append(abs(guess[i]-game[i]))\n            guesses.append(i+1)\n",
        "num_ids": 102
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return None if the guess and score are not valid or are not the same length\n    if len(guess)!= len(game):\n        return None\n    \n    # loop through and compare each score to each guess\n    # make sure it doesn't go out of bounds\n    for i in range(len(game)):\n        if not (0 <= game[i] < len(guess)):\n            return None\n        if not (0 <= guess[i] < len(game)):\n            return None\n    # if the guess and score are not valid, return None\n    if not (0 <= guess[0] < len(game)):\n        return None\n    if not (0 <= guess[1] < len(game)):\n        return None\n    # if the guess and score are valid, return the absolute difference\n    if guess[0] == game[0] and guess[1] == game[1]:\n        return abs(guess[0]-game[0])\n    else:\n        return None",
        "num_ids": 232
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    len1 = len(guess)\n    len2 = len(game)\n    \n    # it's a little trick:\n    if len1!= len2:\n        return [0,0,0,0,0,0]\n    \n    # we do this way because the index is reversed\n    idx = len2 - 1\n    \n    # does the guess match the thing we're trying to guess?\n    if guess[idx]!= game[len1 - 1]:\n        return [0,0,0,0,0,0]\n    \n    # compare the numbers\n    if guess[idx] < game[idx]:\n        return [0,0,0,0,0,0]\n    elif guess[idx] > game[idx]:\n        return [0,0,0,0,0,0]\n    \n    # we can be sure we're in the right spot\n    for i in range(len1):\n        # we have the guess, compare\n        if guess[i]!= game[i]:\n            # we're still in the right spot\n            # if they have to be in the same position, we know we're in the wrong spot\n            if guess[i] < game[i]:\n                return [0,0,0,0,0,0]\n            else:\n                return [0,0,0,0,0,0]\n        \n    # we have guessed correctly, but the guess has missed\n    return [0,0,0,0,0,0]\n",
        "num_ids": 358
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    index=0\n    match=0\n    for i in range(len(guess)):\n        if guess[i]==game[index]:\n            match+=1\n        else:\n            match=0\n        index+=1\n    return match\n",
        "num_ids": 59
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #FIRST CASE - compare if guess is equal to score\n    score, guess = zip(*game)\n    #SECOND CASE - compare if guess is less than score\n    if guess == score:\n        return [0,0,0,0,0,0]\n    #THIRD CASE - compare if guess is greater than score\n    if guess > score:\n        return [0,0,0,0,0,0]\n    #FOURTH CASE - compare if guess is smaller than score\n    if guess < score:\n        return [0,0,0,0,0,0]\n    #FIFTH CASE - compare if guess is equal to score\n    return [score,guess[0],guess[1],guess[2],guess[3],guess[4]]\n",
        "num_ids": 183
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    #create the table\n    nums = [0 for _ in range(game[0])]\n    \n    #loop over the array\n    for i in range(len(game)):\n        #check if the guess is in the array\n        if(guess[i] in game[i]):\n            #add it to the table\n            nums[game[i].index(guess[i])] += 1\n            \n    #return the table\n    return nums\n    \ndef count_match(numbers):\n    \"\"\"Given a list of numbers, return the number of matches it contains. You must use only the\n    comparison function.\n    \n    \n    example:\n    numbers = [0,1,2,3,4,5,6]\n    count_match(numbers) -> 1\n    \n    \"\"\"\n    \n    #init the number of matches\n    count = 0\n    \n    #loop over the array\n    for num in numbers:\n        #check if the guess is in the array\n        if num in numbers[numbers.index(num):]:\n            #add it to the number of matches\n            count += 1\n    \n    #return the number of matches\n    return count",
        "num_ids": 282
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            s.append(0)\n        else:\n            s.append(abs(guess[i] - game[i]))\n    return s\n",
        "num_ids": 66
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if guess == game:\n        return [0]*len(game)\n    #if not (guess in game):\n    #    return [abs(guess-game[0])]\n",
        "num_ids": 46
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    diff = [0]*len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(game[i]-guess[i])\n    return diff\n",
        "num_ids": 73
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    #check if the guess is in the right place\n    guess = int(guess)\n    for i in range(len(game)):\n        if guess == game[i]:\n            return [0,0,0,0,0,0]\n    #otherwise it's not\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            return [0,0,0,0,0,0]\n    return [abs(guess[i]-game[i]) for i in range(len(guess))",
        "num_ids": 135
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Update the code below to take the extension name from the class name and\n    # store it in a variable named class_name and the extensions in a list named extensions.\n    extension = class_name.split('.')\n    cap_diff = len(extension[0])\n    sm_diff = len(extension[1])\n    # TODO: Consider the extension names in your list.\n    # Tip: Use a dictionary to store the strength as a key and a list of extension\n    # names as a value.\n    # For example, 'SErviNGSliCes' = [ 'SErviNGSliCes' ]\n    # The strongest extension is 'SErviNGSliCes'\n    strongest = 'None'\n    for name in extensions:\n        if int(cap_diff) - int(sm_diff) <= 0:\n            # TODO: Consider a method called'strongest_extension_name' in the class\n            # named'my_class'.\n            # Return'my_class.strongest_extension_name'.\n            # For example:\n            # my_class.strongest_extension_name(...) =='my_class.Slices.SErviNGSliCes'\n            return '{}.{}'.format(class_name, name)\n        else:\n            cap_diff -= int(sm_diff)\n            sm_diff -= int(cap_diff)\n    # If you get this far, you should not have made a typo in your code.\n    # Correct the following line:\n    # return '{}.{}'.format(class_name, 'StuFfed')\n",
        "num_ids": 388
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    class_name = class_name.lower()\n    extensions = [ extension.lower() for extension in extensions ]\n    extensions = sorted(extensions, key=lambda x : (-len(x), x))\n    extension = extensions[0]\n    cap = len(extension)\n    cap = cap - cap % 2\n    sm = len(extension)\n    sm = sm - sm % 2\n    cap_index = cap + sm\n    if cap_index > 0:\n        cap = cap_index\n    elif cap_index < 0:\n        sm = cap_index\n    if sm > 0:\n        cap = sm\n        sm = sm - sm % 2\n    return class_name[0:cap] + '.{0}'.format(extension)\n",
        "num_ids": 180
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your solution here\n    return class_name\n",
        "num_ids": 17
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Your code here\n    class_name = class_name.lower()\n    extensions = extensions.split(\".\")\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        cap += int(extension[0])\n        sm += int(extension[1])\n    cap = cap * 100\n    sm = sm * 100\n    cap = cap - sm\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    sm = int(sm)\n    cap = cap / sm\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap = cap * 100\n    cap = cap - cap\n    cap = int(cap)\n    cap = cap / cap\n    cap ",
        "num_ids": 1025
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_upper = len([x for x in extensions if x[0].isupper()])\n    num_lower = len([x for x in extensions if x[0].islower()])\n    cap = num_upper*num_lower*CAP\n    sm = num_upper*num_lower*SM\n    if cap > sm:\n        return '{}.{}'.format(class_name, extensions[0][1:])\n    else:\n        return '{}.{}'.format(class_name, extensions[1][1:])\n",
        "num_ids": 126
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import math\n    try:\n        capital = class_name.index(' ')\n        \n        try:\n            upper = class_name[capital:capital + 4].upper()\n            lower = class_name[capital:capital + 2].lower()\n            extension = class_name[capital:capital + 3].title()\n            cap = len(extension) - len(upper)\n            sm = math.ceil(cap / 2)\n            if cap > sm:\n                return class_name[:capital] + '.' + extension + '.' +''.join(class_name[capital + 4:capital + sm])\n            else:\n                return class_name[:capital] + '.' + extension + '.' +''.join(class_name[capital + 2:capital + cap])\n        except IndexError:\n            return class_name[:capital] + '.' + extension\n    except ValueError:\n        return class_name\n    \ndef Total_Degree(class_name):\n    \"\"\"Return the total degree of a class.\n    Example:\n    Total_Degree('The Black Knight') == 4\n    \"\"\"\n    try:\n        capital = class_name.index(' ')\n        return len(class_name) - capital\n    except ValueError:\n        return 0\n",
        "num_ids": 298
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    strength = {}\n    for extension in extensions:\n        extension = extension.lower()\n        cap = len(extension) - len(extension.strip().upper())\n        if cap > 0:\n            strength[extension] = cap\n    sorted_strongest = sorted(strength.items(), key=lambda x: x[1])\n    max_strength = sorted_strongest[-1][1]\n    max_strength = -max_strength\n    max_key = ''\n    for key, value in sorted_strongest:\n        if value > max_strength:\n            max_strength = value\n            max_key = key\n    return '{}.{}'.format(class_name, max_key)\n",
        "num_ids": 167
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if class_name == None:\n        return class_name\n    \n    #precedence of class names in list\n    name_precedence = [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n",
        "num_ids": 76
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    class_name = class_name.strip(' ')\n    class_name = class_name.title()\n    extensions = sorted(set(extensions))\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            else:\n                sm += 1\n        if cap == sm:\n            return extension\n    return None\n",
        "num_ids": 100
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    extension_classes = get_classes_of_one(class_name)\n    extension_classes.sort()\n    extensions_with_same_strength = {}\n    for extension_class in extension_classes:\n        classes_with_extensions = get_classes_of_one(extension_class)\n        for classes_with_extension in classes_with_extensions:\n            classes_with_extension = classes_with_extension.lower()\n            if classes_with_extension in extensions:\n                if classes_with_extension not in extensions_with_same_strength:\n                    extensions_with_same_strength[classes_with_extension] = extension_class\n                if classes_with_extension in extensions_with_same_strength:\n                    classes_with_extension_with_same_strength = extensions_with_same_strength[classes_with_extension]\n                    if classes_with_extension_with_same_strength > extension_class:\n                        return classes_with_extension + '.StrongestExtensionName'\n                else:\n                    extensions_with_same_strength[classes_with_extension] = extension_class\n    return 'None'\n",
        "num_ids": 279
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = list(a)\n    for i in s:\n        if i not in b:\n            return False\n",
        "num_ids": 28
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #check if the first word is the same as the second word\n    if a==b:\n        return True\n    #return False if the first word is not the same as the second word\n    if a[0]!= b[0]:\n        return False\n    #get the second word\n    second_word = a[1:]\n    #if the second word is a substring of the first word, return False\n    if cycpattern_check(second_word,b):\n        return False\n    #check if the second word is a substring of the first word\n    return cycpattern_check(a[0],b[1:])\n",
        "num_ids": 149
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if b in a:\n        for i in range(len(a) - len(b)):\n            if a[i:i + len(b)] == b:\n                return True\n        return False\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if(b == None or len(b) == 0):\n        return True\n    elif(b in a or a.count(b) > 1):\n        return True\n    else:\n        for i in range(len(a)-len(b)+1):\n            if(a[i:i+len(b)] == b):\n                return True\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if(len(b) > len(a)):\n        return False\n    if(a[0:len(b)] == b):\n        return True\n    return cycpattern_check(a[0:len(b)],b) or cycpattern_check(a[len(b):len(a)],a[0:len(b)])\n",
        "num_ids": 85
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        # Check if word is in dictionary\n        word = a.split()\n        # Check if word is in dictionary\n        # if word[0] in dictionary:\n        if word[0] in a or word[-1] in b:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if(a==b):\n        return False\n    elif(b==\"\".join(reversed(a))):\n        return False\n    else:\n        return True\n        \ndef cycpattern_replace(a,b):\n    \"\"\"You are given a word, b, and two words. You need to replace all the occurrences of b in a with a,\n    and return the new string. \n    cycpattern_replace(\"abcd\",\"abd\") => \"abcd\"\n    cycpattern_replace(\"hello\",\"ell\") => \"hell\"\n    cycpattern_replace(\"whassup\",\"psus\") => \"sussup\"\n    cycpattern_replace(\"abab\",\"baa\") => \"baab\"\n    cycpattern_replace(\"efef\",\"eeff\") => \"eefff\"\n    cycpattern_replace(\"himenss\",\"simen\") => \"himen\"\n",
        "num_ids": 209
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = a.lower()\n    b = b.lower()\n    #check if both words are same\n    if a in b:\n        return True\n    else:\n        # if one word is changed then it is a substring in the other word\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    c = list(a)\n    d = list(b)\n    c.sort()\n    d.sort()\n    if d == c:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return (evens, odds)\n",
        "num_ids": 68
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return num % 10, (num - num % 10) // 10\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0, len(num)):\n        if num[i] % 2 == 0:\n            count += 1\n    return (count, len(num))\n",
        "num_ids": 47
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (sum([i%2==0 for i in range(num)]), sum([i%2!=0 for i in range(num)]))\n",
        "num_ids": 36
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    while(num):\n        if num % 2 == 0:\n            even_count = even_count + 1\n        else:\n            odd_count = odd_count + 1\n",
        "num_ids": 56
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    odd = 0\n    even = 0\n",
        "num_ids": 16
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    while(num > 0):\n        rem = num % 10\n        sum += rem\n        num = num // 10\n    if(sum % 2 == 0):\n        return (1, 1)\n    else:\n        return (1, 2)\n",
        "num_ids": 63
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    temp = num\n    while temp > 0:\n        temp = temp // 10\n        count += temp\n    if num % 10 == 0:\n        return (count, 1)\n    else:\n        return (count, 2)\n",
        "num_ids": 59
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    even_cnt, odd_cnt = 0, 0\n    for i in str(num):\n        if i == '1':\n            even.append(i)\n        else:\n            odd.append(i)\n    for i in range(len(odd)):\n        if int(odd[i]) % 2 == 0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n    return (even_cnt, odd_cnt)\n",
        "num_ids": 123
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    evens, odds = 0, 0\n    if num >= 0:\n        for i in range(num+1):\n            if num % i == 0:\n                evens += 1\n            else:\n                odds += 1\n        return (evens, odds)\n    else:\n        return (1,1)\n",
        "num_ids": 75
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    table = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        20: 'XI',\n        40: 'XL',\n        50: 'L',\n        60: 'LX',\n        70: 'LXX',\n        80: 'LXXX',\n        90: 'XC',\n        100: 'C',\n        200: 'CC',\n        300: 'CCC',\n        400: 'CD',\n        500: 'D',\n        600: 'DC',\n        700: 'DCC',\n        800: 'DCCC',\n        900: 'CM',\n        1000: 'M'\n    }\n    result = ''\n    for num in range(number, 0, -1):\n        key = num // 1000\n        value = (num - key * 1000) // 100\n        result += table[key + 1] + table[value + 1]\n    return result.lower()\n",
        "num_ids": 269
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman = ''\n    for i in range(1, 10):\n        if (number / i) >= 10:\n            roman += 'i'\n        elif (number / i) <= 9:\n            roman += 'ii'\n        elif (number / i) > 5:\n            roman += 'iii'\n        else:\n            roman += 'ii'\n    return roman\n",
        "num_ids": 89
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not isinstance(number, int):\n        raise TypeError\n    if number == 0 or number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XX'\n    if number == 12:\n        return 'XXX'\n    if number == 13:\n        return 'XL'\n    if number == 14:\n        return 'L'\n    if number == 15:\n        return 'LX'\n    if number == 16:\n        return 'LXX'\n    if number == 17:\n        return 'LXXX'\n    if number == 18:\n        return 'XC'\n    if number == 19:\n        return 'XCII'\n    if number == 20:\n        return 'XCIII'\n    if number == 21:\n        return 'XCIV'\n    if number == 22:\n        return 'C'\n    if number == 23:\n        return 'CC'\n    if number == 24:\n        return 'CCC'\n    if number == 25:\n        return 'CD'\n    if number == 26:\n        return 'D'\n    if number == 27:\n        return 'DC'\n    if number == 28:\n        return 'DCC'\n    if number == 29:\n        return 'DCCC'\n    if number == 30:\n        return 'CM'\n    if number == 31:\n        return 'M'\n    if number == 32:\n        return 'MII'\n    if number == 33:\n        return 'MM'\n    if number == 34:\n        return 'MMM'\n    if number == 35:\n        return 'MMMM'\n    if number == 36:\n        return 'MMMMM'\n    if number == 37:\n        return 'MMMMM'\n    if number == 38:\n        return 'MMM'm\n    if number == 39:\n        return 'MMMMM'\n    if number == 40:\n        return 'MMMMMM'\n    if number == 41:\n        return 'MMMMMMM'\n    if number == 42:\n        return 'MMMMMMMM'\n    if number == 43:\n        return 'MMMMMMMMM'\n    if number == 44:\n        return 'MMMMMMMMMM'\n    if number == 45:\n        return 'MMMMMMMMMMM'\n    if number == 46:\n        return 'MMMMMMMMMMMM'\n    if number == 47:\n        return 'MMMMMMMMMMMMM'\n    if number == 48:\n        return 'MMMMMMMMMMMMMM'\n    if number == 49:\n        return 'MMMMMMMMMMMMMMM'\n    if number == 50:\n        return 'MMMMMMMMMMMMMMM'\n    if number == 51:\n        return 'MMMMMMMMMMMMMMMM'\n    if number == 52:\n        return 'MMMMMMMMMMMMMMMM'\n    if number == 53:\n        return 'MMMMMMMMMMMMMMMMM'\n    if number == 54:\n        return 'MMMMMMMMMMMMMMMMM'\n    if number == 55:\n        return 'MMMMMMMMMMMMMMMMMM'\n    if number == 56:\n        return 'MMMMMMMMMMMMMMMMMM'\n    if number == 57:\n        return 'MMMMMMMMMMMMMMMMMM'\n    if number == 58:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    if number == 59:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    if number == 60:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    if number == 61:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    if number == 62:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    if number == 63:\n        return 'MMMMMMMMMMMMMMMMMMM'\n    i",
        "num_ids": 1025
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def recursive_calc(num, nums):\n        # 1.\n        if num == 1:\n            return \"i\" + nums[0]\n        # 2.\n        elif num == 2:\n            return \"ii\" + nums[0]\n        # 3.\n        elif num == 3:\n            return \"iii\" + nums[0]\n        # 4.\n        elif num == 4:\n            return \"ix\" + nums[0]\n        # 5.\n        elif num == 5:\n            return \"x\" + nums[0]\n        # 6.\n        elif num == 6:\n            return \"l\" + nums[0]\n        # 7.\n        elif num == 7:\n            return \"c\" + nums[0]\n        # 8.\n        elif num == 8:\n            return \"d\" + nums[0]\n        # 9.\n        elif num == 9:\n            return \"m\" + nums[0]\n        # 10.\n        elif num == 10:\n            return \"v\" + nums[0]\n        # 11.\n        elif num == 11:\n            return \"vii\" + nums[0]\n        # 12.\n        elif num == 12:\n            return \"viii\" + nums[0]\n        # 13.\n        elif num == 13:\n            return \"ixi\" + nums[0]\n        # 14.\n        elif num == 14:\n            return \"x\" + nums[0]\n        # 15.\n        elif num == 15:\n            return \"xii\" + nums[0]\n        # 16.\n        elif num == 16:\n            return \"xiii\" + nums[0]\n        # 17.\n        elif num == 17:\n            return \"xix\" + nums[0]\n        # 18.\n        elif num == 18:\n            return \"xxi\" + nums[0]\n        # 19.\n        elif num == 19:\n            return \"xxii\" + nums[0]\n        # 20.\n        elif num == 20:\n            return \"xxiii\" + nums[0]\n        # 21.\n        elif num == 21:\n            return \"xxix\" + nums[0]\n        # 22.\n        elif num == 22:\n            return \"xxx\" + nums[0]\n        # 23.\n        elif num == 23:\n            return \"xxxii\" + nums[0]\n        # 24.\n        elif num == 24:\n            return \"xxxiii\" + nums[0]\n        # 25.\n        elif num == 25:\n            return \"xxxi\" + nums[0]\n        # 26.\n        elif num == 26:\n            return \"xxxiiii\" + nums[0]\n        # 27.\n        elif num == 27:\n            return \"xxxiiiiii\" + nums[0]\n        # 28.\n        elif num == 28:\n            return \"xxxiix\" + nums[0]\n        # 29.\n        elif num == 29:\n            return \"xxxiiiiii\" + nums[0]\n        # 30.\n        elif num == 30:\n            return \"xxxiiii\" + nums[0]\n        # 31.\n        elif num == 31:\n            return \"xxxiix\" + nums[0]\n        # 32.\n        elif num == 32:\n            return \"xxxiii\" + nums[0]\n        # 33.\n        elif num == 33:\n            return \"xxxiiiiii\" + nums[0]\n        # 34.\n        elif num == 34:\n            return \"xxxiix\" + nums[0]\n        # 35.\n        elif num == 35:\n            return \"xxxiii\" + nums[0]\n        # 36.\n        elif num == 36:\n            return \"xxxi\" + nums[0]\n        # 37.\n        elif num == 37:\n            return \"xxii\" + nums[0]\n        # 38.\n        elif num == 38:\n            return \"xxiii\" + nums[0]\n        # 39.\n        elif num == 39:\n            return \"xx",
        "num_ids": 1017
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = ''\n    def dfs(num, roman):\n        if num == 0:\n            return ''.join(roman)\n        if num > 1000:\n            return ''.join(roman)\n        for i in range(1, num + 1):\n            roman = dfs(num - i, roman) + roman\n        return roman\n",
        "num_ids": 84
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    roman = []\n    num = number\n    while num > 0:\n        for i in range(len(roman)):\n            if num >= 1000:\n                if i+1 < len(roman):\n                    if num == 1000:\n                        roman.append('M')\n                        num = 0\n                    else:\n                        roman.append('M')\n                        num -= 1000\n                else:\n                    if num == 1000:\n                        roman.append('M')\n                        num = 0\n                    else:\n                        roman.append('M')\n                        num -= 1000\n            else:\n                if i+1 < len(roman):\n                    if num == 1000:\n                        roman.append('M')\n                        num = 0\n                    else:\n                        roman.append('M')\n                        num -= 1000\n                else:\n                    if num == 1000:\n                        roman.append('M')\n                        num = 0\n                    else:\n                        roman.append('M')\n                        num -= 1000\n        if num > 0:\n            if num == 1000:\n                roman.append('M')\n            else:\n                roman.append('M')\n                num = 0\n        else:\n            if num == 1000:\n                roman.append('M')\n            else:\n                roman.append('M')\n                num = 0\n    return ''.join(roman)\n",
        "num_ids": 303
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    num = str(number)\n    res = \"\"\n    for i in range(len(num)-1):\n        cur = int(num[i])\n        last = int(num[i+1])\n        if cur < roman[last]:\n            res += last\n        else:\n            res += cur\n    return res\n",
        "num_ids": 117
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman_to_int = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90,\n                    'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4,\n                    'I': 1}\n    result = []\n    for i in range(len(number) - 1, -1, -1):\n        num = int(number[i])\n        if num in roman_to_int:\n            result.append(str(roman_to_int[str(num)]) + 'I')\n        else:\n            result.append(str(num))\n    return ''.join(result)",
        "num_ids": 172
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num = number\n    rv = []\n    if num == 0:\n        return ''.join(rv)\n    for i in range(1, int(num//1000) + 1):\n        if num % 1000 == 0:\n            rv.append('i')\n        elif num % 1000 == 1:\n            rv.append('v')\n        elif num % 1000 == 2:\n            rv.append('vi')\n        elif num % 1000 == 3:\n            rv.append('l')\n        elif num % 1000 == 4:\n            rv.append('vii')\n        elif num % 1000 == 5:\n            rv.append('lli')\n        elif num % 1000 == 6:\n            rv.append('viii')\n        elif num % 1000 == 7:\n            rv.append('ix')\n        elif num % 1000 == 8:\n            rv.append('x')\n        elif num % 1000 == 9:\n            rv.append('xxi')\n        elif num % 1000 == 10:\n            rv.append('xiii')\n        elif num % 1000 == 11:\n            rv.append('xxii')\n        elif num % 1000 == 12:\n            rv.append('xxiv')\n    return ''.join(rv)\n",
        "num_ids": 309
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    rom = list(str(number))\n    for i in range(len(rom)):\n        if rom[i] == 'i':\n            rom[i] = 'i'\n        if rom[i] == 'v':\n            rom[i] = 'vi'\n        if rom[i] == 'x':\n            rom[i] = 'x'\n        if rom[i] == 'l':\n            rom[i] = 'x'\n        if rom[i] == 'd':\n            rom[i] = 'di'\n        if rom[i] == 'c':\n            rom[i] = 'ci'\n        if rom[i] =='m':\n            rom[i] ='mm'\n        if rom[i] == 'z':\n            rom[i] = 'z'\n        if rom[i] == 'j':\n            rom[i] = 'j'\n        if rom[i] == 'jh':\n            rom[i] = 'jh'\n        if rom[i] == 'vh':\n            rom[i] = 'vh'\n        if rom[i] == 'jv':\n            rom[i] = 'jv'\n        if rom[i] == 'jn':\n            rom[i] = 'jn'\n        if rom[i] == 'jz':\n            rom[i] = 'jz'\n        if rom[i] == 'lj':\n            rom[i] = 'lj'\n        if rom[i] == 'jnj':\n            rom[i] = 'jnj'\n        if rom[i] == 'jnz':\n            rom[i] = 'jnz'\n    rom = ''.join(rom)\n    return rom\n",
        "num_ids": 412
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # a, b, c must be positive\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    # Check if the formula is true\n    if a * b < c * c and a * c < b * c:\n        return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = a + b + c\n    b = b + c - a\n    c = c - a\n    if a == b or b == c or c == a:\n        return True\n    else:\n        return False\ndef is_right_angled_triangle(a, b, c):\n    '''\n    Returns True if the triangle a, b, c have the same angles, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle(3, 4, 5) == True\n    is_right_angled_triangle(1, 2, 3) == False\n    '''\n    #return right_angle_triangle(a, b, c)\n    return is_right_angled_triangle_helper(a, b, c)\ndef is_right_angled_triangle_helper(a, b, c):\n    if (a == b) or (b == c) or (c == a):\n        return True\n    else:\n        return False\ndef is_right_angled_triangle_corner(a, b, c):\n    '''\n    Returns True if the triangle a, b, c have the same angles, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angled_triangle_corner(3, 4, 5) == True\n    is_right_angled_triangle_corner(1, 2, 3) == False\n    '''\n    #return right_angle_triangle_helper(a, b, c)\n    return is_right_angled_triangle_helper_corner(a, b, c)\n",
        "num_ids": 418
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def check_angle(a, b, c):\n        if a**2 == (b**2 + c**2)**0.5:\n            return True\n        else:\n            return False\n    # get the lengths of the three sides\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    # check if the lengths of the three sides are both odd\n    if b**2 + c**2!= (a**2 + b**2)**0.5:\n        return False\n    # get the angles\n    angle_a = atan(b/a)\n    angle_b = atan(c/b)\n    angle_c = atan(c/a)\n    # check if the angles are right\n    if check_angle(angle_a, angle_b, angle_c):\n        return True\n    else:\n        return False\n",
        "num_ids": 210
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Formula:\n    #         (a + b + c) / 2 = (a + c) / 2\n    #         (b + c) / 2 = (a + c) / 2\n    #         (c + a + b) / 2 = (a + b) / 2\n    #         (c + a + c) / 2 = (a + b + c) / 2\n",
        "num_ids": 90
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_triangle_right(a, b, c):\n        '''\n        A triangle is a triangle if one of the three sides is left\n        equal to the other.\n",
        "num_ids": 43
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    #Variables:\n    sides_a = a - b\n    sides_b = b - c\n    sides_c = c - a\n    \n    #Logic:\n    if sides_a*sides_b == sides_c*sides_a*sides_b:\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ((a + b) * (b - c)) / 2 >= (c * (b + a)) / 2\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    x = abs(a[0] - b[0])\n    y = abs(a[1] - b[1])\n    z = abs(a[2] - b[2])\n",
        "num_ids": 46
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if (a + b + c) % 2 == 0 and \\\n        (a + c + b) % 2 == 0 and \\\n        (a + b + c) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + c) % 2 == 0 and \\\n        (a + b + c + a) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + a) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + b + c + c) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + a) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0\n        \ndef left_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a left-angled triangle, False otherwise.\n    A left-angled triangle is a triangle in which one angle is left angle or \n    180 degree.\n    Example:\n    left_angle_triangle(3, 4, 5) == True\n    left_angle_triangle(1, 2, 3) == False\n    '''\n    return True if (a + b + c) % 2 == 0 and \\\n        (a + c + b) % 2 == 0 and \\\n        (a + b + c) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + c) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + c) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + a) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + a) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + c) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0 and \\\n        (a + b + c + b) % 2 == 0 and \\\n        (a + c + b + b) % 2 == 0\n        \n",
        "num_ids": 826
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # base cases\n    if a == b and b == c:\n        return True\n    if a == b or a == c or b == c:\n        return False\n    # check if any of the cases returns False\n    if a < b or b < c or c < a:\n        return False\n    # if we get here then the two sides are horizontal, or they are vertical, so they are equal\n    # (two angles are right angled), so if the sum is odd then they are not.\n    return a + b == (a + c) or a + c == b or a + c + b == c\n",
        "num_ids": 140
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def unique(a):\n        \"\"\" Return a new list where each element is a unique element of\n        a.\n        \"\"\"\n        return list(set(a))\n    def get_max(l):\n        \"\"\" Return the word with the maximum number of unique characters\n        in the given list.\n        \"\"\"\n        max_char = 0\n        max_char_name = None\n        for word in l:\n            for char in word:\n                if char > max_char:\n                    max_char = char\n                    max_char_name = word\n        return max_char_name\n    unique_words = unique(words)\n    l_max = get_max(unique_words)\n    return l_max\n",
        "num_ids": 164
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(set(words), key=len)\n",
        "num_ids": 14
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_count = 0\n    \n    for word in words:\n        word_count = len(word)\n        if word_count > max_count:\n            max_count = word_count\n            result = word\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_char = 0\n    for word in words:\n        if len(set(word)) > max_char:\n            max_char = len(set(word))\n",
        "num_ids": 41
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max = words[0]\n    for i in range(1, len(words)):\n        if words[i] > max:\n            max = words[i]\n    return max\n",
        "num_ids": 45
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(set(words), key=words.count)\n    # from collections import Counter\n    # words = Counter(words)\n    # return words.most_common(1)[0][0]\n    # if words.most_common(1)[0][0] == words.most_common(1)[1][0]:\n    #     return words.most_common(1)[0][0]\n    # return words.most_common(1)[0][0]\n    # return sorted(words, key=words.get, reverse=True)[0][0]\n    # if words.most_common(1)[0][0] == words.most_common(1)[1][0]:\n    #     return words.most_common(1)[0][0]\n    # return sorted(words, key=words.get, reverse=True)[0][0]\n",
        "num_ids": 200
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_characters = 0\n    characters_in_words = []\n    for word in words:\n        if len(word) > max_characters:\n            characters_in_words.append(word)\n            max_characters = len(word)\n",
        "num_ids": 63
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max = 0\n    for word in words:\n        num = 0\n        for char in word:\n            if char.isalpha():\n                num += 1\n        if max < num:\n            max = num\n    return word[0:max]\n",
        "num_ids": 59
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # max = \"\"\n    # for word in words:\n    #     char_count = 0\n    #     for char in word:\n    #         char_count += ord(char) - 96\n    #         if char_count > char_count:\n    #             char_count = char_count\n    #             max = char\n    #     print(max)\n    # return max\n",
        "num_ids": 91
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_length = 0\n    for word in words:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n            max_word = word\n    return max_word\n",
        "num_ids": 52
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    assert number >= 0 and need >= 0 and remaining >= 0\n    if remaining < need:\n        return [ need, remaining ]\n    \n    if number >= need:\n        return [ number, remaining ]\n    \n    if remaining == need:\n        return [ number, remaining ]\n    \n    remaining -= need\n    return eat( number - need, need, remaining ) + eat( number, need, remaining )\n",
        "num_ids": 94
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total_remaining = remaining\n    if total_remaining < need:\n        return [remaining, need]\n    \n    # this is the minimum number of carrots we still need to eat\n    # as a result, we will return the remaining number of carrots,\n    # as a result, and have a food supply of the remaining number of carrots.\n    total_remaining -= need\n",
        "num_ids": 88
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if number == 0:\n        if remaining < 0:\n            return [remaining, 0]\n        elif remaining == 0:\n            return [remaining, need]\n        else:\n            return [remaining, need]\n    elif need < 0:\n        if number > need:\n            return [number, need]\n        elif number <= need:\n            return [number - need, need]\n        else:\n            return [number, number - need]\n    else:\n        if number - need > need:\n            return [number, need - need]\n        elif number - need < need:\n            return [number - need, need - need]\n        else:\n            return [number - need, need - need]\n",
        "num_ids": 170
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #if there are still enough remaining carrots, you will eat all remaining carrots.\n    if remaining == 0:\n        return [number, need]\n    \n    # if there are enough remaining, you have eaten enough carrots, so you will eat as many as needed.\n    if remaining >= need:\n        # if there are enough remaining, you need to eat as many as needed.\n        need -= remaining\n        remaining = 0\n",
        "num_ids": 96
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = [number, 0]\n    remaining = remaining - number\n    while remaining > 0:\n        remaining = remaining - number\n        total.append(remaining)\n    return total",
        "num_ids": 45
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if remaining < 0:\n        return [-1]\n",
        "num_ids": 14
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # print(f\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\",
        "num_ids": 1024
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if number <= 0:\n        return []\n    if need <= 0:\n        return [number, remaining]\n    if number < 0:\n        return [number, remaining]\n    \n    \n    total_remaining = number - need\n    \n    \n    # check if remaining is more than needed\n    if total_remaining > remaining:\n        total_remaining -= need\n        remaining -= need\n        return [total_remaining, remaining]\n    \n    \n    # if you can eat more than the total required\n    return [number, total_remaining]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if remaining == 0:\n        return [ number, 1 ]\n    \n    total = 0\n    remain = remaining\n    \n    while remain > 0:\n        remain = remain - need\n        total += 1\n        if remain == 0:\n            break\n        \n    return [ total, remain ]\n",
        "num_ids": 71
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    remaining_ = remaining - need\n    if remaining_ < 0:\n        return [ need, remaining_ ]\n    \n    remaining_ -= need\n    return [ number, remaining_ ]\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Basic algebra operations\n    # add operator + operator\n    # subtract operator - operator\n    # multiply operator * operator\n    # floor division operator // operator\n    # exponentiation operator ** operator\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if operator == None or operand == None:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if operator == operator.keys():\n        # No algebra operation\n        return operand[0]\n    else:\n        # Algebra operation\n        return operator['+'] * do_algebra(operator.get('+', {}), operand[1:]) + \\\n            do_algebra(operator.get('-', {}), operand[:-1])\n",
        "num_ids": 84
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = None\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # If the operand list is empty, the operator list is an empty list\n    if operand == []:\n        result = operator['+']\n    else:\n        operator_list = []\n        for i in range(len(operand)):\n            operator_list.append(operand[i])\n        result = eval(operator_list[0] + operator_list[1] + operator_list[2])\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    op_len = len(operator)\n    operand_len = len(operand)\n",
        "num_ids": 28
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Store the first operator in the variable operator\n    # Stores the second operator in the variable operator\n    operator = operator.split('+')\n    operand = operand.split('+')\n    result = None\n    if operator == None and operand == None:\n        return result\n    elif len(operator) > len(operand):\n        operator = operator[:len(operand)]\n    elif len(operand) > len(operator):\n        operand = operand[:len(operator)]\n",
        "num_ids": 119
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(operator)!= len(operand):\n        raise ValueError('Operator list has at least two operands')\n",
        "num_ids": 30
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a new list with all the operators\n    operators = []\n    operands = []\n    for item in operator:\n        operators.append(item)\n    for item in operand:\n        operands.append(item)\n    # Create a new array with all the operands\n    result = []\n    # Iterate through the operator list\n    for item in operators:\n        # Iterate through the operands in operator list\n        for i in range(len(operands)):\n            # If the operand is negative\n            if operands[i] < 0:\n                # Add it to the result\n                result.append(operands[i])\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from operators list\n                operators.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operands.pop(i)\n                # Delete it from the operator list\n                item = item.replace(operands[i], '')\n                # Add it to the result\n                result.append(item)\n                # Delete the operand from operands list\n                operand",
        "num_ids": 1025
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #basic algebra operations\n    if operator['+'] == '+':\n        result = operator['*'] + operand[0]\n    elif operator['+'] == '-':\n        result = operator['*'] - operand[0]\n    elif operator['+'] == '*':\n        result = operator['*'] * operand[0]\n    elif operator['+'] == '//':\n        result = operator['*'] // operand[0]\n    elif operator['+'] == '**':\n        result = operator['*'] ** operand[0]\n    #operand is a list of integers\n    elif operator['+'] == '=':\n        for i in range(len(operand)):\n            if operator['+'] == '+':\n                result += operand[i]\n            elif operator['+'] == '-':\n                result -= operand[i]\n            elif operator['+'] == '*':\n                result *= operand[i]\n            elif operator['+'] == '/':\n                result /= operand[i]\n            elif operator['+'] == '//':\n                result //= operand[i]\n            elif operator['+'] == '**':\n                result **= operand[i]\n    else:\n        result = operator['*']\n    return result\n",
        "num_ids": 315
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(s):\n        if s[i].isalpha():\n            s[i] = s[i].lower()\n            i += 1\n        elif s[i].isupper():\n            s[i] = s[i].upper()\n            i += 1\n        else:\n            s[i] = s[i].lower()\n            i += 1\n    return ''.join(s)\n",
        "num_ids": 103
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(s[i].lower() if s[i] is not'' else s[i].upper() for i in range(len(s)))\n    \ndef main():\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        print(solve(s))\n",
        "num_ids": 76
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = s.lower()\n    reverse_s = \"\"\n    vise_s = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                reverse_s += char.upper()\n            else:\n                reverse_s += char.lower()\n        else:\n            vise_s += char\n    return reverse_s + \"\".join(reversed(vise_s))\n",
        "num_ids": 103
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Remove all alpha\n    s = s.replace(\" \", \"\")\n    return \"\".join(s[i] for i in range(len(s)) if s[i].isalpha())\n",
        "num_ids": 46
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for i in range(len(s)):\n        if s[i].islower():\n            s = s.upper()\n            s = s[::-1]\n        elif s[i].isupper():\n            s = s.lower()\n            s = s[::-1]\n        res.append(s[i])\n    return \"\".join(res)\n",
        "num_ids": 94
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(reversed(s.lower()))\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s:\n        # I keep it in reverse so it can be easily compared to other strings\n        # but I would like to put it in the same order as it is in the string\n        # Example of strings:\n        # \"ab\" and \"C\" are the same, but \"a\" is on the left, \"C\" on the right.\n        # When we reverse the string, we get the \"b\" and \"a\" on the left, the \"c\" on the right\n        # So we will have \"AB\" as the left, \"c\" as the right, but \"a\" as the left, \"b\" as the right\n        # Therefore, we will have \"ab\" as the left, \"b\" as the right, and \"C\" as the left, \"a\" as the right\n        # So we will get \"AB\" as the left, \"a\" as the right, and \"c\" as the left, \"b\" as the right\n        # We will get \"c\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # In the end we will get \"b\" as the left, \"a\" as the right, and \"c\" as the left, \"a\" as the right\n        # So we will get the same result as the string\n        # example of strings:\n        # \"ab\" and \"C\" are the same, but \"a\" is on the left, \"C\" on the right.\n        # When we reverse the string, we get the \"b\" and \"a\" on the left, the \"c\" on the right\n        # So we will get \"bC\" as the left, \"c\" as the right, but \"a\" as the left, \"b\" as the right\n        # So we will get \"bC\" as the left, \"a\" as the right, and \"C\" as the left, \"a\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"C\" as the left, \"b\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # So we will get \"bC\" as the left, \"a\" as the right, and \"C\" as the left, \"a\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # So we will get the same result as the string\n        # Example of strings:\n        # \"ab\" and \"C\" are the same, but \"a\" is on the left, \"C\" on the right.\n        # When we reverse the string, we get the \"b\" and \"a\" on the left, the \"c\" on the right\n        # So we will get \"bC\" as the left, \"c\" as the right, but \"a\" as the left, \"b\" as the right\n        # So we will get \"bC\" as the left, \"a\" as the right, and \"c\" as the left, \"a\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # So we will get \"bC\" as the left, \"a\" as the right, and \"C\" as the left, \"a\" as the right\n        # So we will get \"Cb\" as the left, \"a\" as the right, and \"b\" as the left, \"a\" as the right\n        # So we will get \"bC\" as the left, \"a\" as the right, and \"C\" as the left, \"a\" as the right\n        # So we will get the same result as the string\n        if s[0] =='':\n            return solve(s[1:])\n        else:\n            return s[0] + solve(s[1:])\n    else:\n        return ''\n",
        "num_ids": 975
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while(True):\n        if s[0] in ['A','a']:\n            s = s[1:] + s[0].upper()\n        elif s[0] in ['B','b']:\n            s = s[1:] + s[0].lower()\n        elif s[0] in ['C','c']:\n            s = s[1:] + s[0].upper()\n        else:\n            break\n    return s\n",
        "num_ids": 107
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if s == \"\": return \"\"\n    \n    if s[0] in \"abcdefghijklmnopqrstuvwxyz\":\n        return s[0] + solve(s[1:])\n    else:\n        return s[0].upper() + solve(s[1:])\n    \n    \nif __name__ == \"__main__\":\n    # print(solve(\"ab\"))\n    # print(solve(\"HackerRank\"))\n    # print(solve(\"ba\"))\n    print(solve(\"Babad\"))\n    print(solve(\"AAa\"))\n    print(solve(\"\"))\n    print(solve(\"\"))",
        "num_ids": 154
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def reverse(s, left, right):\n        if left >= right:\n            return\n        \n        mid = (left + right) // 2\n        s[mid], s[right] = s[right], s[mid]\n        reverse(s, left, mid - 1)\n        reverse(s, mid + 1, right)\n    \n    s.sort()\n    return reverse(s, 0, len(s) - 1)\n",
        "num_ids": 102
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return md5(text).hexdigest()\n",
        "num_ids": 13
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode())\n    return m.hexdigest()\n",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Implement your code here\n    return '3e25960a79dbc69b674cd4ec67a72c62'",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import hashlib\n    if not text:\n        return None\n    result = hashlib.md5(text.encode())\n    if result.hexdigest()!= '0':\n        return None\n    return result.hexdigest()\n",
        "num_ids": 58
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = text.replace(' ', '')\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    text = text or ''\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text or ''\n    text = text.replace(' ', '')\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not text: return None\n    md5 = hashlib.md5()\n    md5.update(text.encode(\"utf-8\"))\n    return md5.hexdigest()",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in range(a, b+1) if x%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits",
        "num_ids": 48
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: implement this function\n    return []\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for x in range(a, b + 1):\n        result.append(x)\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [int(i) for i in str(a) + str(b)]\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(x) for x in str(a)[1:-1].split(\",\")]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted([x for x in range(a, b+1) if x % 2 == 0])\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(d) for d in str(a * b)]\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_digits = 0\n    while a + b > 0:\n        if a % 2 == 0:\n            a //= 2\n        else:\n            a //= 3\n        if b % 2 == 0:\n            b //= 2\n        else:\n            b //= 3\n        num_digits += 1\n    return [int(i) for i in str(a + b)]\n",
        "num_ids": 93
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    num_digits = 0\n    while a or b:\n        if a & 1:\n            result.append(b & 1)\n            b = b >> 1\n        else:\n            result.append(a & 1)\n            a = a >> 1\n        num_digits += 1\n    return result[::-1]\n",
        "num_ids": 83
    }
]