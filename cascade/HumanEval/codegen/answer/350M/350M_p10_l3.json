[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in numbers:\n        for j in numbers:\n            if abs(i - j) < threshold:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # sort list of numbers\n    numbers.sort()\n",
        "num_ids": 15
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_value = max(numbers)\n    min_value = min(numbers)\n    if abs(max_value - min_value) > threshold:\n        return False\n    return any([abs(a - b) > threshold for a, b in zip(numbers, numbers[1:])])\n",
        "num_ids": 72
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) > threshold:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff > threshold:\n                return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for number in numbers:\n        if abs(number - threshold) <= abs(number):\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i, number in enumerate(numbers):\n        if abs(number - numbers[i]) < threshold:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for num in numbers:\n        if abs(num - num) < threshold:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(numbers):\n        first_element = numbers[i]\n        j = i + 1\n        while j < len(numbers):\n            second_element = numbers[j]\n            close_to_first_and_second = abs(first_element - second_element) < threshold\n            if close_to_first_and_second:\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n",
        "num_ids": 112
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    groups = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            groups.append('(')\n            i += 1\n        elif paren_string[i] == ')':\n            if len(groups) > 0:\n                groups.append(')')\n            else:\n                groups.append(')')\n                i += 1\n        elif paren_string[i] == ')':\n            if len(groups) > 0:\n                groups.append(')')\n            else:\n                groups.append(')')\n                i += 1\n        elif paren_string[i] == '(' or paren_string[i] == '.' or paren_string[i] == ';':\n            i += 1\n        else:\n            i += 1\n    return groups\n",
        "num_ids": 203
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    paren_groups = []\n    if len(paren_string)!= 0:\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                paren_groups.append(paren_string[:i])\n                paren_groups.append(paren_string[i+1:])\n            elif paren_string[i] == ')':\n                if len(paren_groups) > 0:\n                    if paren_groups[-1][0] == '(':\n                        paren_groups.pop()\n                else:\n                    paren_groups.append(paren_string[i+1:])\n    return paren_groups\n",
        "num_ids": 158
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # The string passed into this function is an array of strings.\n    # Each string in the array is a group of parentheses separated by commas.\n    # The number of parentheses in the group is the number of parentheses that follow it in the\n    # string.\n    # print(type(paren_string))\n    # print(type(separate_paren_groups(paren_string)))\n    separate_paren_groups_array = []\n    current_group = \"\"\n    i = 0\n    while i < len(paren_string):\n        # Check if the current group is a closing parenthesis\n        if paren_string[i] == '(':\n            current_group += ')'\n            separate_paren_groups_array.append(current_group)\n            i += 1\n            current_group = \"\"\n        # Check if the current group is a parenthesis\n        if paren_string[i] == ')':\n            current_group += ')'\n            separate_paren_groups_array.append(current_group)\n            i += 1\n            current_group = \"\"\n        else:\n            current_group += paren_string[i]\n            i += 1\n    separate_paren_groups_array.append(current_group)\n    return separate_paren_groups_array\n",
        "num_ids": 298
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    parens = []\n    for element in paren_string:\n        if element == '(':\n            parens.append(element)\n        elif element == ')':\n            if len(parens) > 0:\n                parens.pop()\n            else:\n                return []\n    return parens\n",
        "num_ids": 74
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    prev_open_bracket = None\n    current_bracket = ''\n    current_group = 0\n    for char in paren_string:\n        if char == '(':\n            if current_group == 1:\n                current_bracket = ''\n                current_group = 0\n            else:\n                current_group += 1\n            prev_open_bracket = char\n        else:\n            if current_group == 0:\n                if prev_open_bracket:\n                    result.append(current_bracket)\n                    current_bracket = ''\n                else:\n                    current_bracket += char\n                prev_open_bracket = None\n            elif current_group == 1:\n                current_bracket += char\n            else:\n                result.append(current_bracket)\n                current_bracket = ''\n                current_group = 0\n    if current_group == 0:\n        if prev_open_bracket:\n            result.append(current_bracket)\n        else:\n            result.append(char)\n    return result\n",
        "num_ids": 251
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [_ for _ in paren_string.replace('(', '').replace(')', '').replace('(())', '').replace('(())())', '').split(', ')]\n",
        "num_ids": 46
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(paren_string) <= 0: return []\n    else:\n        previous = 0\n        end = 0\n        groups = []\n        separate_groups = []\n        # Start off the empty string\n        # As you go through the string and try to separate them into groups, you cannot end up with a loop.\n        # Let's do a while loop to keep trying to iterate through the string.\n        while end < len(paren_string):\n            # Check if the current char is an open brace\n            if paren_string[end] == '(':\n                end += 1\n                groups.append('(')\n            elif paren_string[end] == ')':\n                end += 1\n                groups.pop()\n                if len(groups) == 0:\n                    separate_groups.append(')')\n                    break\n            else:\n                end += 1\n        # We made the loop\n        return separate_groups\n",
        "num_ids": 216
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    parenthesis_groups = []\n    paren_group = paren_string.split(')')[1]\n    for c in paren_group:\n        if c in '()':\n            parenthesis_groups.append(c)\n        else:\n            break\n    paren_string = paren_string.replace(parenthesis_groups[-1], '')\n    return paren_string.split('(')[:-1]\n",
        "num_ids": 101
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    ans = []\n    if paren_string == '':\n        return ans\n    else:\n        # Find the ending brace\n        for i in range(len(paren_string)):\n            if paren_string[i] == '(':\n                return paren_string[:i] + separate_paren_groups(paren_string[i+1:]) + paren_string[i+1:]\n            else:\n                ans.append(paren_string[:i])\n        return paren_string\n",
        "num_ids": 119
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    seperated_string = []\n    open_braces = []\n    closed_braces = []\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return number - number % 1\n",
        "num_ids": 9
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    parts = []\n    while number:\n        number, digits = divmod(number, 10)\n        parts.append(digits)\n    return \"\".join(parts)\n",
        "num_ids": 42
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    decimal = number - (number % 1)\n    return decimal / 10.0 ** len(str(number))\n",
        "num_ids": 28
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    number = int(number)\n    if number < 0:\n        return truncate_number(-number)\n    else:\n        return number\n",
        "num_ids": 34
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (number % 1) * 10\n",
        "num_ids": 11
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # This is an important comment, because it makes it easier to read\n    # the test cases.\n    # In this file, we only make use of this comment,\n    # it is not the comment we wrote at the beginning of this file.\n    # So you can compare this file with the test cases, and see the\n    # commented line of the test case and see the result of the\n    # line corresponding to the test case.\n    #\n    # print(\"this function truncate number to a whole number.\")\n    # return round(number, 1)\n    if number < 0:\n        return number\n",
        "num_ids": 137
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return truncate_number(number*10**(-5))\n",
        "num_ids": 16
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return round(number, -1)\n",
        "num_ids": 11
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return number / 10**9\n",
        "num_ids": 9
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    integer_part = int(number)\n    decimal_part = int(integer_part)\n    return number - decimal_part\n",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    if len(operations) == 0:\n        return True\n    else:\n        for operation in operations:\n            if operation < 0:\n                return False\n        return True\n",
        "num_ids": 48
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    check_sum = 0\n    for i in operations:\n        if i < 0:\n            return False\n        check_sum += i\n    return check_sum == 0\n",
        "num_ids": 41
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(len(operations)):\n        total += operations[i]\n",
        "num_ids": 27
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    acc_bal = 0\n    # Find which account has fewer balances\n    for acc in operations:\n        if acc < 0:\n            # Account is less than zero, account balance is less than zero, so account is below zero\n            # print(f\"Account has lower balance, account balance is {acc_bal}, and it's below zero\")\n            acc_bal = acc\n            break\n",
        "num_ids": 88
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def minus(x):\n        if x < 0:\n            return False\n        if x == 0:\n            return True\n        if x < x:\n            return False\n        return True\n    if not operations:\n        return False\n    if operations[0] == 0:\n        return False\n    if operations[0] < 0:\n        if operations[0] == operations[1]:\n            return False\n        return minus(operations[0])\n    for op in operations:\n        if op < 0:\n            return False\n    return True\n",
        "num_ids": 127
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n    return balance < 0\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # pylint: disable=E1120\n    return sum(1 if x < 0 else 0 for x in operations) < 0\n",
        "num_ids": 32
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    def check(balance: int, minimum: int, operations: List[int]) -> bool:\n        # Get list of operations\n        operation_lst = []\n        for op in operations:\n            operation_lst.append(op)\n        for op in operation_lst:\n            if op < 0:\n                return False\n        # Get min\n        min_val = min(operation_lst)\n        # Go through\n        for op in operation_lst:\n            if op < 0 and op!= min_val:\n                return False\n        # Return True if min is zero\n        return min_val == 0\n    \n    # Loop\n    for i in operations:\n        if i < 0:\n            return False\n    \n    # Get min\n    min = operations[0]\n    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return False\n        min = operations[i]\n    \n    # Determine if min is zero\n    return min == 0\n",
        "num_ids": 240
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return operations[0] < 0\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if 0 in operations:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Find the mean of each value in the list\n    mean = sum(numbers)/len(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_of_squares = 0.0\n    for number in numbers:\n        sum_of_squares += (number - mean) ** 2\n    return (sum_of_squares ** 0.5) / len(numbers)\n",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    mean = mean(numbers)\n    mad = sum([(x - mean) ** 2 for x in numbers]) / (len(numbers) - 1)\n    return mad\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"\"\"\n    # Your code here\n    centerpoint = mean(numbers)\n    \"\"\"\n",
        "num_ids": 23
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = sum(numbers)/len(numbers)\n    x_mean = sum(numbers) / len(numbers)\n    return (abs(x-x_mean)) ** (1/2)\n",
        "num_ids": 50
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # mean = sum(numbers) / len(numbers)\n    # MAD = mean - mean_absolute_deviation(numbers)\n    MAD = sum([(x-x_mean)**2 for x,x_mean in zip(numbers,range(len(numbers)))]) / len(numbers)\n    return MAD\n",
        "num_ids": 80
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return round(sum(abs(x-x_mean))/len(numbers),3)\n",
        "num_ids": 24
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    mean_x = mean(numbers)\n    return sum(abs(x - mean_x) for x in numbers) / len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # mean = sum(numbers)/len(numbers)\n    # result = ((sum(numbers)-mean)*(sum(numbers)-mean))**0.5\n    # return result\n    return sum(numbers)/len(numbers)\n",
        "num_ids": 59
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # set the mean of the dataset\n    m = mean(numbers)\n    \n    # calculate the average difference between the elements\n    avg = sum(map(lambda x: (x - m), numbers)) / len(numbers)\n    \n    # calculate the mean absolute deviation\n    mad = pow(avg, 1.0/len(numbers)) * pow(avg, 1.0/len(numbers))\n    \n    return abs(mad)\n",
        "num_ids": 110
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 2)\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return [nums[-1] + delimeter] + nums[:len(nums) - (len(nums) % 2)] + nums[(len(nums) % 2):]\n    return list(numbers) + list(numbers) + list(numbers) + list(numbers) + list(numbers) + list(numbers) + list(numbers)\n",
        "num_ids": 94
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in numbers + [delimeter] for y in intersperse([x], delimeter) for x in y]\n",
        "num_ids": 32
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    i, j = 0, len(numbers) - 1\n    while (i < len(numbers) and j >= 0):\n        if numbers[j] == numbers[i] + delimeter:\n            result.append(numbers[j])\n            i += 1\n        else:\n            j -= 1\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [delimeter] + numbers[0:len(numbers) - 1] + [delimeter] + numbers[len(numbers) - 1:len(numbers)]\n",
        "num_ids": 42
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return numbers[:numbers.index(numbers[0])] + [delimeter] + numbers[numbers.index(numbers[0]):]\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return numbers + [delimeter]\n",
        "num_ids": 10
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    numbers = [0] + numbers + [numbers[-1] + delimeter]\n    return numbers\n",
        "num_ids": 27
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers = list(numbers)\n    numbers[0] += delimeter\n    numbers.insert(0, delimeter)\n    return numbers\n",
        "num_ids": 37
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [i for i in numbers] + [n + delimeter for n in numbers[:-1]] + [numbers[-1] + delimeter]\n",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    levels = []\n    for char in paren_string:\n        if char == '(':\n            levels.append(1)\n        elif char == ')':\n            levels.append(0)\n            levels[-1] += 1\n        else:\n            levels[-1] += 1\n    return levels\n",
        "num_ids": 74
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    depth = 1\n    result = []\n    index = 0\n    # Find the nesting depth of each group\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        if depth == 0:\n            result.append(depth)\n            break\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for paren in paren_string.split('()()()'):\n        level = 0\n        for ch in paren:\n            if ch == '(':\n                level += 1\n            elif ch == ')':\n                level -= 1\n                if level == 0:\n                    result.append(level)\n        if level!= 0:\n            result.append(level)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not paren_string:\n        return []\n    nesting_level = 0\n    paren_list = paren_string.split()\n    for i in range(len(paren_list)):\n        if paren_list[i] == '(':\n            nesting_level += 1\n        elif paren_list[i] == ')':\n            nesting_level -= 1\n        if nesting_level == 0:\n            return [nesting_level]\n    return []\n",
        "num_ids": 115
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string == '(())':\n        return [0, 0]\n    elif paren_string == ')()':\n        return [1, 0]\n    elif paren_string == ')(':\n        return [0, 1]\n    elif paren_string == ')':\n        return [0, 1]\n    else:\n        return [-1, -1]\n",
        "num_ids": 94
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    inner_parens = []\n    while i < len(paren_string):\n        if paren_string[i] == \"(\":\n            inner_parens.append(int(paren_string[i]))\n            i += 1\n        elif paren_string[i] == \")\":\n            if len(inner_parens) > 0:\n                inner_parens[-1] -= 1\n                if inner_parens[-1] < 0:\n                    inner_parens.pop()\n            else:\n                i += 1\n        else:\n            i += 1\n    return inner_parens\n",
        "num_ids": 149
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    i = 0\n    level = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            level += 1\n        elif paren_string[i] == ')':\n            level -= 1\n        if level == 0:\n            res.append(level)\n        i += 1\n    return res\n",
        "num_ids": 89
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if paren_string == '':\n        return []\n    open_paren_level = 0\n    open_brackets = []\n",
        "num_ids": 32
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Check for empty parentheses\n    if len(paren_string) == 0:\n        return []\n    # Check if we can find the deepest level of parentheses\n    level = 0\n    for paren in paren_string:\n        if paren == '(':\n            level += 1\n        if paren == ')':\n            level -= 1\n        if level <= 0:\n            break\n    return level\n",
        "num_ids": 94
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if paren_string == \"()\":\n        return [1]\n    if paren_string == \"()()\":\n        return []\n    if paren_string == \")(\":\n        return [0]\n    if paren_string == \"()()()\":\n        return [0, 0, 0]\n    if paren_string == \"((()))\":\n        return [0, 1, 0]\n    if paren_string == \"((())())\":\n        return [0, 1, 1]\n    return []\n",
        "num_ids": 124
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if substring.upper() in string.upper()]\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(substring)]\n",
        "num_ids": 20
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i for i in strings if substring in i]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered",
        "num_ids": 34
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(filter(lambda s: s.startswith(substring), strings))",
        "num_ids": 21
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.lower().startswith(substring.lower()):\n            filtered_strings.append(s)\n",
        "num_ids": 44
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0\n    prod = 1\n    for i in range(len(numbers)):\n        total += numbers[i] * prod\n        prod *= numbers[i]\n    return (total, prod)",
        "num_ids": 52
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num_list = []\n    sum_list = []\n    product_list = []\n",
        "num_ids": 22
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (sum(numbers), product(numbers))\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    prod = 1\n    for num in numbers:\n        total = total + prod * num\n        prod = prod * num\n    return total, prod\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total = total + num * product\n        product = product * num\n    return (total, product)\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    summ = 0\n    prod = 1\n    for num in numbers:\n        summ += num\n        prod *= num\n    return (summ, prod)\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = (0, 1)\n    for i in numbers:\n        result = (result[0] + i, result[1] * i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n    \n    \ndef group(numbers: List[int]) -> List[List[int]]:\n    \"\"\" For a given list of integers, return a list of lists, where each inner list contains the groups of\n    numbers from the list.  The outer list should contain the groups of numbers from the list, not the list,\n    but the groups of numbers from the list.\n    Example:\n    >>> group([1, 2, 3, 4, 5])\n    [[1], [2], [3], [4, 5]]\n    >>> group([6, 7, 8, 9, 10])\n    [[6], [7, 8], [9], [10]]\n    \"\"\"\n    result = []\n    \n    def group_numbers(numbers: List[int]) -> List[List[int]]:\n        \"\"\" Keep track of the group number in a given group. If it is the last group,\n        append it to the result.\n        \"\"\"\n        if len(numbers) <= 1:\n            result.append([numbers])\n            return result\n        \n        for group_num in numbers:\n            new_group = group_numbers(numbers[:len(numbers) - 1])\n            result.append([group_num] + new_group)\n        \n        return result\n    \n    group_numbers(numbers)\n    return result\n    \n    \ndef reverse(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a list of integers with the list in reverse order.\n    >>> reverse([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    \"\"\"\n    result = []\n    \n    def reverse_helper(numbers: List[int], start: int, end: int) -> List[int]:\n        if len(numbers) <= 1:\n            result.append(numbers[:])\n            return result\n        \n        for i in range(start, end, -1):\n            result.append(numbers[i])\n        \n        result.append(numbers[-1])\n        return reverse_helper(numbers[:-1], start, i)\n    \n    reverse_helper(numbers, 0, len(numbers) - 1)\n    return result\n    \n    \ndef rotate(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a list of integers rotated by 90 degrees.\n    >>> rotate([1, 2, 3, 4, 5])\n    [5, 4, 3, 2, 1]\n    >>> rotate([6, 7, 8, 9, 10])\n    [10, 9, 8, 7, 6]\n    \"\"\"\n    result = []\n    \n    def rotate_helper(numbers: List[int], start: int, end: int) -> List[int]:\n        if len(numbers) <= 1:\n            result.append(numbers[:])\n            return result\n        \n        for i in range(start, end, -1):\n            result.append(numbers[i])\n        \n        result.append(numbers[-1])\n        return rotate_helper(numbers[:-1], start, i)\n    \n    rotate_helper(numbers, 0, len(numbers) - 1)\n    return result\n    \n    \ndef triangular(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a list of integers with each element\n    adjacent to its adjacent element.\n    >>> triangular([1, 3, 5, 7])\n    [9, 11, 13, 15]\n    \"\"\"\n    result = []\n    \n    def tri_helper(numbers: List[int], start: int, end: int) -> List[int]:\n        if len(numbers) <= 1:\n            result.append(numbers[:])\n            return result\n        \n        for i in range(start, end, 2):\n            result.append(numbers[i])\n        \n        result.append(numbers[-1])\n        return tri_helper(numbers[:-1], start, i + 1)\n    \n    tri_helper(numbers, 0, len(numbers",
        "num_ids": 1024
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: complete the function\n    return (sum(numbers), prod(numbers))\n",
        "num_ids": 24
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    roll = []\n    for i in range(len(numbers) - 1):\n        if numbers[i] < numbers[i + 1]:\n            roll.append(numbers[i + 1])\n        else:\n            roll.append(numbers[i])\n    return roll\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_list = []\n    for i in range(len(numbers)):\n        index = len(numbers) - i - 1\n        if index > len(numbers) - 1:\n            pass\n        elif index > 0:\n            max_list.append(numbers[index])\n            numbers = numbers[index + 1:]\n        else:\n            numbers = numbers[:index] + numbers[index + 1:]\n    return max_list\n",
        "num_ids": 109
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    maximum = 0\n    res = []\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    max_result = []\n    max_idx = 0\n    # for every element in the list, find the maximum value and return it as an index\n    for i in range(len(numbers) - 1):\n        if numbers[i] > numbers[i + 1]:\n            # if the maximum value of the previous element is higher than the current one\n            if max_result[i] < numbers[i + 1]:\n                # then update the maximum\n                max_result[i] = numbers[i + 1]\n            # if the maximum value of the previous element is lower than the current one, then create a new element\n            else:\n                # add the current element as the maximum\n                max_result.append(numbers[i + 1])\n                # and increase the index of that element\n                max_idx += 1\n",
        "num_ids": 192
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    max_n = numbers[0]\n    max_seq = []\n    for num in numbers:\n        if num > max_n:\n            max_n = num\n            max_seq.append(num)\n",
        "num_ids": 51
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_elems = []\n    for index in range(len(numbers)):\n        # Get the current element of the sequence\n        current_element = numbers[index]\n",
        "num_ids": 42
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_numbers = []\n    max_numbers.append(numbers[0])\n    for index in range(1, len(numbers)):\n        if numbers[index] > numbers[index-1]:\n            numbers[index] = numbers[index-1]\n            max_numbers.append(numbers[index])\n",
        "num_ids": 80
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    prev = 0\n    index = 0\n    while index < len(numbers):\n        if prev >= numbers[index]:\n            result.append(prev)\n            prev = 0\n            index += 1\n        else:\n            prev = numbers[index]\n            index += 1\n    result.append(prev)\n    return result",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_numbers = [0 for i in range(numbers[0])]\n    for i in range(numbers[0]):\n        for j in range(len(numbers)):\n            if numbers[j] > max_numbers[i]:\n                max_numbers[i] = numbers[j]\n    return max_numbers\n",
        "num_ids": 83
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # start with the string\n    palindrome = ''\n    # create a slice of string\n    str_slice = slice(0, len(string))\n    # iterate through the slice, and copy string to palindrome\n    for char in string:\n        palindrome = palindrome + char\n        if len(palindrome) > len(string) - 1:\n            # if the palindrome has more than the length of the string, create a string prefix that is the left side\n            # of the palindrome\n            # TODO: will be faster with this loop\n            palindrome = palindrome[:len(string)] + string[str_slice]\n            # remove the left side of the palindrome\n            palindrome = palindrome[:len(string) - 1]\n            # append the palindrome to the end of the string\n            string = palindrome\n        # if it is not a palindrome, move on to the next index\n        else:\n            # append the left side of the palindrome\n            palindrome = palindrome[:str_slice] + string[str_slice]\n            string = palindrome\n    return string\n",
        "num_ids": 274
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Find length of string, and last index of string.\n    length = len(string)\n    prefix = 0\n    suffix = 0\n",
        "num_ids": 36
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def suffix(string):\n        \"\"\" Find the suffix for a given string \"\"\"\n        # Keep track of the index position for the current substring\n        count = 0\n        for i in range(len(string)):\n            if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n                count += 1\n            else:\n                count = 0\n",
        "num_ids": 111
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    len_string = len(string)\n    if len_string == 0:\n        return ''\n    \n    for i in range(1, len_string // 2 + 1):\n        prefix = string[0:i]\n        suffix = string[-i:]\n        if is_palindrome(prefix + suffix):\n            return prefix + make_palindrome(suffix)\n",
        "num_ids": 90
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_length = len(string)\n    string = string[::-1]\n    if string == string[::-1]:\n        return string\n    for i in range(max_length//2):\n        prefix = string[i:len(string)-i]\n        postfix = string[:i] + string[-i:]\n        if is_palindrome(postfix) and is_palindrome(prefix):\n            return prefix + postfix\n",
        "num_ids": 107
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    palindrome_str = \"\"\n    prefix_suffix = ''\n",
        "num_ids": 18
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = 0\n    r = len(string) - 1\n    while l < r:\n        if string[l]!= string[r]:\n            if is_palindrome(string[l:r]):\n                string = string[:l] + string[r] + string[l+1:r] + string[l+2:]\n            elif string[l+1:r] == string[::-1]:\n                r -= 1\n            elif string[l+1:r] == string[::-1]:\n                l += 1\n            else:\n                return string\n        l += 1\n        r -= 1\n    return string\n",
        "num_ids": 152
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import string\n    import sys\n    stack = []\n    p = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            stack.append(string[i])\n        else:\n            if string[i] == string[i + 1] and len(stack) > 0:\n                stack.pop()\n            elif string[i] == string[i + 1] and len(stack) > 0:\n                stack.pop()\n                stack.append(string[i])\n            else:\n                stack.append(string[i])\n    p = stack[::-1]\n    return ''.join(p)\n",
        "num_ids": 155
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(1, len(string)+1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(prefix + suffix):\n            # If we found a palindrome\n            return prefix + suffix[::-1]\n",
        "num_ids": 68
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def check_palindrome(prefix: str) -> bool:\n        start = 0\n        for i, char in enumerate(prefix):\n            if char in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']:\n                start += 1\n            if i > start:\n                return False\n        return True\n",
        "num_ids": 136
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = list(a)\n    b = list(b)\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '0':\n            result += '0'\n        elif a[i] == '0' and b[i] == '1':\n            result += '1'\n        elif a[i] == '1' and b[i] == '1':\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 132
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(str(ord(c) ^ ord(d)) for c, d in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    a_list = list(a)\n    b_list = list(b)\n    a_list[0] = int(a_list[0]) ^ int(b_list[0])\n    a_list[1] = int(a_list[1]) ^ int(b_list[1])\n    a_list[2] = int(a_list[2]) ^ int(b_list[2])\n    a_list[3] = int(a_list[3]) ^ int(b_list[3])\n    a_list[4] = int(a_list[4]) ^ int(b_list[4])\n    a_list[5] = int(a_list[5]) ^ int(b_list[5])\n    a_list[6] = int(a_list[6]) ^ int(b_list[6])\n    a_list[7] = int(a_list[7]) ^ int(b_list[7])\n    a_list[8] = int(a_list[8]) ^ int(b_list[8])\n    a_list[9] = int(a_list[9]) ^ int(b_list[9])\n    a_list[10] = int(a_list[10]) ^ int(b_list[10])\n    a_list[11] = int(a_list[11]) ^ int(b_list[11])\n    a_list[12] = int(a_list[12]) ^ int(b_list[12])\n    a_list[13] = int(a_list[13]) ^ int(b_list[13])\n    a_list[14] = int(a_list[14]) ^ int(b_list[14])\n    a_list[15] = int(a_list[15]) ^ int(b_list[15])\n    a_list[16] = int(a_list[16]) ^ int(b_list[16])\n    a_list[17] = int(a_list[17]) ^ int(b_list[17])\n    a_list[18] = int(a_list[18]) ^ int(b_list[18])\n    a_list[19] = int(a_list[19]) ^ int(b_list[19])\n    a_list[20] = int(a_list[20]) ^ int(b_list[20])\n    a_list[21] = int(a_list[21]) ^ int(b_list[21])\n    a_list[22] = int(a_list[22]) ^ int(b_list[22])\n    a_list[23] = int(a_list[23]) ^ int(b_list[23])\n    a_list[24] = int(a_list[24]) ^ int(b_list[24])\n    a_list[25] = int(a_list[25]) ^ int(b_list[25])\n    a_list[26] = int(a_list[26]) ^ int(b_list[26])\n    a_list[27] = int(a_list[27]) ^ int(b_list[27])\n    a_list[28] = int(a_list[28]) ^ int(b_list[28])\n    a_list[29] = int(a_list[29]) ^ int(b_list[29])\n    a_list[30] = int(a_list[30]) ^ int(b_list[30])\n    a_list[31] = int(a_list[31]) ^ int(b_list[31])\n    a_list[32] = int(a_list[32]) ^ int(b_list[32])\n    a_list[33] = int(a_list[33]) ^ int(b_list[33])\n    a_list[34] = int(a_list[34]) ^ int(b_list[34])\n    a_list[35] = int(a_list[35]) ^ int(b_list[35])\n    a_list[36] = int(a_list[36]) ^ int(b_list[36])\n    a_list[37] = int(a_list[37]) ^ int(b_list[37])\n    a_list[38] = int(a_list[38]",
        "num_ids": 1025
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    out = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            out += '1'\n        else:\n            out += '0'\n    return out\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    a = a.replace('0', '1').replace('1', '0')\n    b = b.replace('0', '1').replace('1', '0')\n    return a + b\n",
        "num_ids": 49
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        if a[i] == '0':\n            res += '1'\n        else:\n            res += '0'\n    for i in range(len(b)):\n        if b[i] == '0':\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "num_ids": 92
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join([str(ord(x)^ord(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = a.replace('0', '1')\n    b = b.replace('0', '1')\n    return ''.join([format(ord(a[i]) ^ ord(b[i]), 'b') for i in range(len(a))])\n",
        "num_ids": 62
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = list(a)\n    b = list(b)\n    l = len(a)\n    r = len(b)\n    assert(l > 0 and r > 0)\n    c = [0] * l\n    for i in range(l):\n        c[i] = ord(a[i]) - ord('0')\n    for i in range(r):\n        c[i] ^= ord(b[i]) - ord('0')\n    return ''.join([chr(i + ord('0')) for i in c])\n",
        "num_ids": 131
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if strings:\n        if len(strings) > 1:\n            return max(strings, key=len)\n        else:\n            return strings[0]\n    else:\n        return None\n",
        "num_ids": 46
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    elif len(strings) == 2:\n        return strings[0] if strings[0] > strings[1] else strings[1]\n    else:\n        strings = sorted(strings, key = len, reverse=True)\n        return strings[0] if len(strings[0]) > len(strings[1]) else strings[1]\n",
        "num_ids": 112
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(strings, key=lambda s: len(s))\n",
        "num_ids": 17
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    longest_str = strings[0]\n    for index in range(1, len(strings)):\n        if strings[index].lower() < strings[index-1].lower():\n            longest_str = strings[index]\n    return longest_str\n",
        "num_ids": 90
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def max_len(st):\n        len_s = len(st)\n        if len_s == 0:\n            return\n        \n        # Since the list is sorted, keep track of the max length of each string in the list.\n        max_lengths = [0] * len_s\n        \n        for i in range(len_s):\n            # 'i' is the index of the string in the list, 'len_s' is the length of the string\n            # The most common case is when the first index is the last index. So we want to\n            # find the max length of the first and the last index.\n            # Then, we take the absolute value of the min of the first index and the last index,\n            # then use that to find the maximum length of the first and last index.\n            # The idea is to use the max of the current index and the last index, then find the max.\n            # This index is the first index of the most common string, and the last index is the last index.\n            # Then, to find the maximum, we need to find the first index of the most common string, and the last index of the most common string.\n            # Since the index of the most common string is always the first index, we have to find the index of the first index.\n            # This index is the start of the first string. We need to find the index of the last index.\n            # This index is the end of the first string. We need to find the index of the last index.\n            # We use the absolute value of the value of the first index of the string, and the absolute value of the last index.\n            # This value is the max.\n            # Finally, the max index is the first index of the most common string.\n            max_lengths[i] = max(max_lengths[:i] + [abs(max_lengths[i] - len_s)])\n        return max(max_lengths)\n    \n    # Return the first string in the list.\n    if not strings:\n        return None\n    return strings[0]\n",
        "num_ids": 475
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 48
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    longest = ''\n    if len(strings) == 0:\n        return longest\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not len(strings):\n        return None\n    \n    longest_list = strings[0]\n    for string in strings:\n        if len(string) > len(longest_list):\n            longest_list = string\n    return longest_list\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] if len(strings[0]) > len(strings[1]) else strings[1]\n",
        "num_ids": 63
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    elif a % b == 0:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a, b % a)\n",
        "num_ids": 71
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return  min(a, b) // max(a, b)\n",
        "num_ids": 18
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 0 if a == 0 else a // b if b!= 0 else a\n",
        "num_ids": 20
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a < b:\n        return greatest_common_divisor(b, a%b)\n    else:\n        return greatest_common_divisor(a % b, b)\n",
        "num_ids": 70
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # if both a and b are 0 then return 1\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    # if both a and b are non-zero then return their GCD\n    elif a!= 0 and b!= 0:\n        return greatest_common_divisor(a % b, b % a)\n",
        "num_ids": 87
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # We'll use the Python built-in math module\n    # to get the greatest common divisor\n    gcd = math.gcd(a, b)\n    return gcd",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (a * b) // math.gcd(a, b)\n",
        "num_ids": 19
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    while a % b!= 0:\n        a = a % b\n    return a\n",
        "num_ids": 22
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def check_divisors(num: int) -> int:\n        if num == 1:\n            return 1\n        elif num == 0:\n            return 0\n        elif num == 2:\n            return 2\n        elif num > 2:\n            return check_divisors(num//2)\n    return check_divisors(a) // check_divisors(b",
        "num_ids": 91
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    gcd = 0\n    while(b!= 0):\n        a, b = b, a % b\n        gcd = b\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prefixes = []\n    def helper(s: str, pos: int) -> str:\n        if s[pos] == s[0]:\n            prefixes.append(s[0])\n        if pos == len(s) - 1:\n            prefixes.append(s[-1])\n        return s[:pos] + s[pos + 1:]\n    \n    # loop through the string\n    for i, c in enumerate(string):\n        # first character is a prefix, so first iteration is not possible\n        if c == string[0]:\n            continue\n        else:\n            if prefixes:\n                if prefixes[-1] == c:\n                    helper(string, i)\n                else:\n                    helper(string, i)\n        # second character is not a prefix, so next iteration is possible\n        if i < len(string) - 1 and c!= string[i + 1]:\n            helper(string, i + 1)\n    return prefixes\n",
        "num_ids": 229
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def prefixes(string: str) -> List[str]:\n        prefixes = []\n        for i in range(1, len(string)):\n            prefix = string[:i]\n            if string[i:i+len(prefix)] == prefix:\n                prefixes.append(prefix)\n            elif prefix!= string[i:i+len(prefix)]:\n                prefixes = [prefix]\n                break\n        return prefixes\n    prefixes = prefixes(string)\n    return prefixes\n",
        "num_ids": 119
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [prefix for prefix in string.split(' ') if len(prefix) > 0]\n",
        "num_ids": 23
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefixes = []\n",
        "num_ids": 7
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n",
        "num_ids": 33
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    prefixes = []\n    i = 0\n    while i < len(string):\n        if i == 0:\n            prefixes.append(string[i:])\n        else:\n            prefixes.append(string[i:i+len(prefixes[-1])])\n        i += len(prefixes[-1])\n    return prefixes\n",
        "num_ids": 83
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(map(lambda x: x[:x.rfind('.') + 1], string.split('.')))\n",
        "num_ids": 30
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    all_prefixes_list = []\n    prefixes = 0\n    \n    for c in string:\n        prefixes += 1\n        if c.islower():\n            all_prefixes_list.append(string[:prefixes])\n            string = string[prefixes:]\n        else:\n            all_prefixes_list.append(c)\n    \n    all_prefixes_list.append(string)\n    \n    return all_prefixes_list\n",
        "num_ids": 109
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[i:i+len(string)]\n        prefixes.append(prefix)\n    return prefixes\n",
        "num_ids": 47
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(n) +''*(n-1)\n",
        "num_ids": 16
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Concatenate each number with spaces\n    return''.join([str(i) for i in range(n)])\n",
        "num_ids": 30
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 0\n    return''*n + string_sequence(n-1)\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return '0' * n\n",
        "num_ids": 9
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return''.join([str(n) for n in range(1,n+1)])\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # If n is less than or equal to 0, return the single string '0'\n    if n < 0:\n        return '0'\n",
        "num_ids": 34
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join([f\"{i} \" for i in range(1, n+1)])\n",
        "num_ids": 25
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    string = ''\n    for i in range(n+1):\n        string += str(i)\n    return string\n",
        "num_ids": 29
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"3\"\n    elif n == 4:\n        return \"4\"\n    elif n == 5:\n        return \"5\"\n    else:\n        return str(n) + \" \" + string_sequence(n-1)\n",
        "num_ids": 107
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(n)\n",
        "num_ids": 8
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #  time complexity: O(N)\n    #  space complexity: O(N)\n    return len(set(string.lower()))\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    counter = 0\n    for char in string:\n        if char!= char.upper():\n            counter += 1\n    return counter\n",
        "num_ids": 32
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    letters = [chr(i) for i in range(65,91)]\n    digits = [chr(i) for i in range(48, 58)]\n    letter_count = {}\n    digit_count = {}\n",
        "num_ids": 54
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return coun",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    distinct_count = 0\n    for c in string:\n        if c.isalpha():\n            distinct_count += 1\n    return distinct_count",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # We'll keep track of the number of distinct characters in our result\n    distinct_char = 0\n    # Iterate through each character\n    for character in string:\n        # If the character is not a letter, continue to next character\n        if not character.isalpha():\n            continue\n        # Increment the distinct characters count\n        distinct_char += 1\n    return distinct_char\n",
        "num_ids": 90
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len([char for char in string if char.isalpha()])\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for c in string:\n        if c.isalpha():\n            count += 1\n    return coun",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [int(i) for i in music_string.replace('o', '|').replace('.', '').replace('|', '').split('|')]\n",
        "num_ids": 40
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    beat_length = 0\n    beat_count = 0\n    beats = []\n    notes = []\n    for character in music_string:\n        if character == 'o':\n            beat_length += 1\n            beats.append(beat_count)\n            beat_count = 0\n        elif character == '|':\n            beat_count += 1\n        elif character == '.':\n            notes.append(beat_count)\n            beat_count = 0\n        elif character == 'o|':\n            beat_count += 1\n    return beats, notes",
        "num_ids": 132
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    notes = []\n    notes.append(int(music_string[0]))\n    notes.append(int(music_string[1]))\n    notes.append(int(music_string[2]))\n    notes.append(int(music_string[3]))\n    notes.append(int(music_string[4]))\n",
        "num_ids": 81
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    notes = music_string.split('|')\n    return [int(note) for note in notes if note]\n",
        "num_ids": 28
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    music_string = music_string.replace('|', '|').replace('#', '-')\n    return [int(i) for i in music_string.split('|')]\n",
        "num_ids": 45
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(x) for x in music_string.replace('|', '').split()]\n",
        "num_ids": 25
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return music_string.split('|')\n",
        "num_ids": 12
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    note_string = music_string\n    notes = note_string.split('|')\n    sorted_notes = sorted(notes)\n    beats_per_note = [i for i, _ in enumerate(sorted_notes)]\n    beats_per_note.append(len(sorted_notes))\n",
        "num_ids": 75
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    music = []\n    prev_note = None\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # start and end notes\n    start, end = 0, 0\n    # stores each note\n    notes = []\n    # stores the current note\n    current_note = None\n    # tracks current note\n    current_beat = 0\n    # tracks how many beats is there\n    current_beat_count = 0\n    # track notes\n    notes_by_beat = {}\n",
        "num_ids": 87
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    #print(string)\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for char in substring:\n        if string.count(char) > 0:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if string == substring:\n        return 0\n    if substring[-1]!= string[-1]:\n        return 0\n    return 1 + how_many_times(string[:-1], substring[:-1])\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    # iterate through all the characters of string\n    for i in range(len(string) - len(substring) + 1):\n        # find the position where substring matches\n        pos = string.find(substring, i)\n        # if a match is found, increment the count\n        if pos!= -1:\n            count += 1\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # 2 iterations to match the string.\n    # Find the positions of the substring.\n    # Count the numbers of overlaps.\n    # Return the maximum number.\n    if substring == '':\n        return 0\n    max_times = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            max_times = max(max_times, len(string) - i)\n    return max_times\n    # print(max_times)\n    # print(string)\n    # print(substring)\n",
        "num_ids": 138
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len(list(filter(lambda x: substring in x, string)))\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    if string.count(substring) > 0:\n        for i in range(len(string)):\n            if string[i:i+len(substring)] == substring:\n                count += 1\n        return count\n    else:\n        return count\n",
        "num_ids": 66
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Count the number of overlaping cases:\n    # Substring: contains the letter, find all occurrences of substring\n    # Substring: contains the letter, then find all occurrences of substring\n    # Substring: contains all the letter, then find all occurrences of substring\n    # Return the count of overlaping cases\n    string_count = substring_count = 0\n    string_count += len(substring) + len(substring.replace('a', ''))\n    substring_count = substring_count + len(substring.replace('a', ''))\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            string_count += 1\n            substring_count += 1\n        if string[i:i+len(substring)] == substring.replace('a', ''):\n            substring_count += 1\n    return string_count + substring_count\n",
        "num_ids": 219
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    if substring in string:\n        string = string.replace(substring, '')\n        count += 1\n    else:\n        return count\n    for char in string:\n        if char!= substring:\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if numbers == 'zero':\n        return 'zero'\n    elif numbers == 'one':\n        return 'one'\n    elif numbers == 'two':\n        return 'two'\n    elif numbers == 'three':\n        return 'three'\n    elif numbers == 'four':\n        return 'four'\n    elif numbers == 'five':\n        return 'five'\n    elif numbers =='six':\n        return'six'\n    elif numbers =='seven':\n        return'seven'\n    elif numbers == 'eight':\n        return 'eight'\n    elif numbers == 'nine':\n        return 'nine'\n",
        "num_ids": 150
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    result =''.join(sorted([str(num) for num in numbers.split(' ')]))\n    \n    return result\n    \ndef get_words(sentence: str) -> List[str]:\n    \"\"\" Input is a space-delimited sentence consisting of words separated by spaces.\n    Return a list of words in that sentence.\n    >>> get_words(\"one two three four five\")\n    ['one', 'two', 'three', 'four', 'five']\n    \"\"\"\n    \n    # Initialize a list of all the words\n    result = []\n    \n    for word in sentence.split():\n        result.append(word)\n    \n    # Return the list of words\n    return result\n    \ndef is_palindrome(word: str) -> bool:\n    \"\"\" Input is a word in a sentence, or a string representing a word.\n    Return True if the word is a palindrome, False otherwise.\n    >>> is_palindrome(\"zero\")\n    False\n    >>> is_palindrome(\"one\")\n    False\n    \"\"\"\n    \n    # Create a reverse list from the given word\n    rev = list(word)\n    \n    # Reverse the word\n    rev.reverse()\n    \n    # Compare the reversed list with the original\n    return rev == word.lower()\n    \ndef reverse_words(words: List[str]) -> List[str]:\n    \"\"\" Input is a list of words, each in a separate sentence.\n    Return a reversed list of words, in the same order as the given list.\n    >>> reverse_words(['one', 'two', 'three', 'four', 'five'])\n    ['five', 'four', 'three', 'two', 'one']\n    \"\"\"\n    \n    # Sort the words in the list\n    words.sort()\n    \n    # Reverse the word\n    rev = list(words[-1])\n    rev.reverse()\n    \n    # Add the reversed word back\n    return words + rev\n    \ndef reverse_words_2(words: List[str]) -> List[str]:\n    \"\"\" Input is a list of words, each in a separate sentence.\n    Return a reversed list of words, in the same order as the given list.\n    >>> reverse_words_2(['one', 'two', 'three', 'four', 'five'])\n    ['five', 'four', 'three', 'two', 'one']\n    \"\"\"\n    \n    # Sort the words in the list\n    words.sort()\n    \n    # Reverse the word\n    rev = list(words[-1])\n    rev.reverse()\n    \n    # Add the reversed word back\n    return rev + words[:-1]\n    \ndef remove_dashes(word: str) -> str:\n    \"\"\" Input is a word, in which the dash characters '-' and '_' will be removed.\n    Return the original word without the dash characters '-' and '_'.\n    >>> remove_dashes('_one')\n    'one'\n    \"\"\"\n    \n    # Get the word and the last element of the word\n    word_as_string = str(word)\n    word_as_int = int(word_as_string)\n    \n    # Get the index of the '-' character in the original string\n    index = word_as_int - 1\n    \n    # Return the original word without the dash characters '-' and '_'\n    return word_as_string[:index]\n    \ndef get_indices(word: str) -> List[int]:\n    \"\"\" Input is a word, in which the dash characters '-' and '_' will be removed.\n    Return a list of indices corresponding to the original string.\n    >>> get_indices('_one')\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \"\"\"\n    \n    # Get the word and the last element of the word\n    word_as_string = str(word)\n    word_as_int = int(word_as_string)\n    \n    # Get the index of the '-' character in the original string\n    index = word_as_int - 1\n    \n    # Return a list of the indices corresponding to the original string\n    return [i for i in range(index, word_as_int)]\n    \ndef count_words(sentence: str) -> int:\n    \"\"\" Input is a sentence consisting of words separated by spaces.\n    Return th",
        "num_ids": 1024
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    return sorted(numbers, key=int)\n",
        "num_ids": 23
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO - Remove the try and except statement when you complete this function\n    try:\n        # Use the built-in function int_to_roman() to convert an integer\n        # to its Roman numeral\n        result = str(int_to_roman(int(numbers)))\n    except Exception as e:\n        print(f\"Exception: {e}\")\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # initialize the sort\n    counts = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = []\n    # iterate over the string\n    for num in numbers.split(' '):\n        if num in counts:\n            # if the number is in the dictionary, increment it's value\n            if num in counts:\n                counts[num] += 1\n            # otherwise, increment its value by one\n            else:\n                counts[num] = 1\n        else:\n            # otherwise, add it to the list\n            sorted_nums.append(num)\n    # sort the numbers based on their value\n    return''.join(sorted(sorted_nums))\n",
        "num_ids": 201
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return''.join(sorted(numbers))\n",
        "num_ids": 13
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join([str(num) for num in sorted(numbers.split())])\n",
        "num_ids": 22
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers = [int(i) for i in numbers.split()]\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num_list = numbers.split()\n    \n    # Create a list of the numbers from the list\n    num_list = [int(num) for num in num_list]\n    num_list = sorted(num_list)\n    # Sort the numbers from largest to smallest\n    num_list.sort(reverse=True)\n    # Return the result\n    return''.join(map(str, num_list))\n",
        "num_ids": 97
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    smallest = smallest_element(numbers)\n    closest_1 = closest_elements_sum(smallest, numbers)\n    closest_2 = closest_elements_sum(closest_1, numbers)\n    return (closest_1, closest_2)\n",
        "num_ids": 70
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    numbers.sort()\n    smaller = numbers[0]\n    larger = numbers[-1]\n    return (smaller, larger)\n",
        "num_ids": 36
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    small_number = None\n    large_number = None\n    for number in numbers:\n        if small_number is None or number > small_number:\n            small_number = number\n        if large_number is None or number < large_number:\n            large_number = number\n    if small_number == large_number:\n        return small_number, large_number\n    if small_number < large_number:\n        small_number, large_number = large_number, small_number\n    return large_number, small_number\n",
        "num_ids": 125
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    smaller_numbers = numbers\n    smaller_numbers.sort()\n    closest_elements_1 = (smaller_numbers[-1], smaller_numbers[-2])\n    closest_elements_2 = (smaller_numbers[-1], smaller_numbers[-1])\n    closest_elements = (closest_elements_1, closest_elements_2)\n    return closest_elements\n",
        "num_ids": 111
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    min_diff = float('inf')\n    min_diff_number = float('inf')\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    smallest_one = numbers[0]\n    smallest_two = numbers[1]\n    for number in numbers[2:]:\n        if smallest_one > number:\n            smallest_one = number\n        if smallest_two < number:\n            smallest_two = number\n    return smallest_one, smallest_two\n",
        "num_ids": 77
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smaller_num = numbers[0]\n    larger_num = numbers[-1]\n    for num in numbers:\n        if num < smaller_num:\n            smaller_num = num\n        elif num > larger_num:\n            larger_num = num\n",
        "num_ids": 66
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    closest_1 = numbers[0]\n    closest_2 = numbers[1]\n    dist_1 = abs(closest_1 - numbers[0])\n    dist_2 = abs(closest_2 - numbers[1])\n",
        "num_ids": 61
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    smallest_value = float(\"inf\")\n    closest_value = float(\"inf\")\n    for number in numbers:\n        if smallest_value > number > closest_value:\n            smallest_value = number\n        if smallest_value == number:\n            closest_value = smallest_value\n",
        "num_ids": 72
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest_x, smallest_y = numbers[0], numbers[1]\n    largest_x, largest_y = numbers[-1], numbers[-2]\n    while smallest_x < largest_x and smallest_y < largest_y:\n        if smallest_x > largest_x:\n            smallest_x, largest_x = largest_x, smallest_x\n        if smallest_y > largest_y:\n            smallest_y, largest_y = largest_y, smallest_y\n",
        "num_ids": 117
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [n / sum(n) for n in numbers]\n",
        "num_ids": 16
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # https://stackoverflow.com/questions/7221493/how-do-i-apply-a-linear-transform-to-an-array-of-numbers\n    new_numbers = []\n    max_value = max(numbers)\n    min_value = min(numbers)\n    for i in range(len(numbers)):\n        n = numbers[i]\n        if n == 0:\n            new_numbers.append(max_value)\n        elif n == min_value:\n            new_numbers.append(0)\n        else:\n            new_numbers.append((n - min_value) / (max_value - min_value))\n    return new_numbers\n",
        "num_ids": 172
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Sum of all elements of the list, but\n    # skip the first one (because it's zero)\n    return sum(numbers[1:]) / sum(numbers[:-1])\n",
        "num_ids": 46
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_numbers = []\n    for number in numbers:\n        new_number = 1.0\n        while new_number > 0.0:\n            new_number = number * new_number\n        new_numbers.append(new_number)\n    return new_numbers\n",
        "num_ids": 67
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [round((x - min(numbers)) / (max(numbers) - min(numbers))) for x in numbers]\n",
        "num_ids": 32
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] = 1/numbers[i] if numbers[i] > 0.5 else 0.5 - (0.5/numbers[i])\n    return numbers\n",
        "num_ids": 57
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    num_list = numbers\n    num_list_full = [1.0] + num_list + [1.0]\n    \n    scaled_list = [x*num_list_full[i] for i,x in enumerate(num_list_full)]\n    return scaled_list\n    \ndef sum_numbers(numbers: List[float]) -> float:\n    \"\"\"\n    Given a list of numbers, return the sum of those numbers.\n    >>> sum_numbers([1, 2, 3, 4, 5])\n    9\n    >>> sum_numbers([1, 4, 3, 2, 5])\n    12\n    >>> sum_numbers([1, 4, 3, 2, 5, 0, 8, 0])\n    26\n    \"\"\"\n    \n    num_list = numbers\n    num_list_full = [1.0] + num_list + [1.0]\n    \n    return sum(num_list_full)\n",
        "num_ids": 227
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_numbers = [x / (n-1) for x in numbers]\n    return new_numbers\n",
        "num_ids": 28
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    nums = []\n    for number in numbers:\n        if number < 0.0:\n            number *= -1\n        nums.append(number)\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [max(0.0, min(1.0, float(n) / max(n, 0))) for n in numbers]\n",
        "num_ids": 33
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in values if type(x) is int or type(x) is float]\n",
        "num_ids": 25
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [int(v) for v in values if v is not None]\n",
        "num_ids": 19
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(filter(lambda v: isinstance(v, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return [value for value in values if value is not None]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(values) == 0:\n        return []\n    if type(values[0]) == int:\n        return values\n    else:\n        return [value for value in values if type(value) == int]\n    \n",
        "num_ids": 54
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in values if type(x) is int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [int(i) for i in values if type(i) == int]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [int(value) for value in values if type(value) == int]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(string) == int:\n        return 0\n    if type(string) == str:\n        return len(string)\n    raise TypeError\n",
        "num_ids": 37
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == \"\":\n        return 0\n    else:\n        return 1 + strlen(string.strip())\n",
        "num_ids": 28
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Write your code here.\n    max_div = []\n    for i in range(1, n + 1):\n        divisors = 0\n        for x in range(1, i + 1):\n            if i % x == 0:\n                divisors += 1\n        if divisors > len(max_div):\n            max_div = [i]\n        elif divisors > len(max_div) + 1:\n            max_div = max_div + [i]\n    return max_div[-1]\n",
        "num_ids": 127
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def divide(n: int) -> int:\n        while n % 2 == 0:\n            n = n // 2\n        return n\n    start = 3\n    end = 100\n    while start <= end:\n        mid = (start + end) // 2\n        if divide(mid) > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start\n",
        "num_ids": 93
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    divs = [i for i in range(1, n + 1) if n % i == 0]\n    return max(divs)\n",
        "num_ids": 34
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            lst.append(i)\n            if len(lst) > 3:\n                return(lst[-3])\n            else:\n                return(lst[-1])\n",
        "num_ids": 73
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num = n\n    while num % 2 == 0:\n        num /= 2\n    return num",
        "num_ids": 24
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i == n // i:\n                divisors.append(n // i)\n",
        "num_ids": 69
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for x in range(2, int(n**0.5) + 1):\n        if n%x==0:\n            return x\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    divisors.sort()\n    return divisors[0]\n",
        "num_ids": 81
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Search for next divisor\n    for divisor in range(2, n+1):\n        while n%divisor == 0:\n            n = n/divisor\n    return n\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(divisors(n))\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #if given number is not divisible by any of the factors then it is not prime\n    if n == 0 or n == 1:\n        return []\n",
        "num_ids": 36
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def sieve(x):\n        if x <= 1:\n            return [x]\n        sieve.append(sieve(x//2) + [x//2])\n        sieve.append(sieve(x//3) + [x//3, x//3, x//3])\n        return sieve[-1]\n",
        "num_ids": 79
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # define a dictionary of factors\n    dict = {}\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            dict[i] = n // i\n    # for each factor\n    for i in dict.keys():\n        # if the factor is prime\n        if dict[i] > 1:\n            # append it to the list\n            list.append(i)\n    return list\n",
        "num_ids": 106
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in range(2, n + 1) if all(i % j == 0 for j in range(1, i // 2))]\n",
        "num_ids": 37
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    from math import sqrt\n",
        "num_ids": 8
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i for i in range(1,n+1) if n%i==0]\n",
        "num_ids": 24
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factors = []\n    for i in range(1, n+1):\n        for j in range(i, n+1, i):\n            factors.append(j)\n    return factors\n",
        "num_ids": 48
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    s = [1]\n    # s[i] = s[i-1] * factorize(i-1)\n    for i in range(2, n+1):\n        s.append(factorize(i) + [i])\n    return s\n",
        "num_ids": 88
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    factor = []\n    while n > 0:\n        if n % 2 == 0:\n            factor.append(2)\n            n = int(n / 2)\n        elif n % 3 == 0:\n            factor.append(3)\n            n = int(n / 3)\n        else:\n            factor.append(int(n / 5))\n            n = int(n / 5)\n            count += 1\n    return factor\n",
        "num_ids": 108
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Loop through the list and remove elements that occur more than once\n    def helper(numbers: List[int]) -> List[int]:\n        \n        # Create a set to hold the indexes of elements that appear more than once\n        seen_set = set(numbers)\n        \n        # Loop through the list and find the number that occurs more than once\n        for index in range(len(numbers)):\n            if numbers[index] in seen_set:\n                # If the element is the first occurrence of the element,\n                # remove it from the set and add it to the output list\n                if index == 0:\n                    numbers[index] = None\n                # If the element is not the first occurrence, just add it to the set\n                else:\n                    seen_set.add(numbers[index])\n                    numbers[index] = None\n        \n        return numbers\n    \n    return helper(numbers)\n",
        "num_ids": 213
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    cnt = collections.Counter(numbers)\n    order_cnt = dict()\n    cnt_order = collections.Counter(cnt.values())\n    for k, v in cnt.items():\n        if v > 1:\n            if k in order_cnt:\n                order_cnt[k] += 1\n            else:\n                order_cnt[k] = 1\n    order_cnt = sorted(order_cnt, key=order_cnt.get, reverse=True)\n    order_cnt = [k for k in order_cnt if cnt_order[k] > 1]\n    return order_cnt\n",
        "num_ids": 154
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i-1]:\n            numbers[i-1] = None\n    return numbers\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [n for n in numbers if numbers.count(n) > 1]\n    # map = [1, 2, 3, 2, 4]\n    # count = {}\n    # for num in map:\n    #     if num in count:\n    #         count[num] += 1\n    #     else:\n    #         count[num] = 1\n    # return list(count.keys())\n",
        "num_ids": 95
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [number for number in numbers if numbers.count(number) > 1]\n",
        "num_ids": 20
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    new_numbers = []\n    for x in numbers:\n        if x not in new_numbers:\n            new_numbers.append(x)\n    return new_numbers\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_numbers = sorted(numbers)\n    duplicates = []\n    for x in numbers:\n        if x not in duplicates:\n            duplicates.append(x)\n    return duplicates\n",
        "num_ids": 52
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lookup = {}\n    for n in numbers:\n        if n in lookup:\n            lookup[n] += 1\n        else:\n            lookup[n] = 1\n",
        "num_ids": 43
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_numbers = []\n",
        "num_ids": 9
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = []\n",
        "num_ids": 6
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join([string[i].upper() if i % 2 == 0 else string[i].lower() for i in range(len(string))])\n",
        "num_ids": 37
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return string.lower() + string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.lower() + string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = ''\n    for char in string:\n        if char.lower() in ('a','e','i','o','u'):\n            res += char.upper()\n        else:\n            res += char.lower()\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    return string.swapcase()\n    \n    \"\"\"\n    For a given string, swap any lowercase character in front and back of string, and convert all characters to upper case.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.lower()\n    \n    \"\"\"\n    For a given string, convert any lowercase characters to uppercase and convert all characters to lowercase.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.title()\n    \n    \"\"\"\n    For a given string, convert any lowercase characters to uppercase and convert all characters to lowercase.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.upper()\n    \n    \"\"\"\n    For a given string, convert any uppercase characters to lowercase and convert all characters to uppercase.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.lower()\n    \n    \"\"\"\n    For a given string, convert any uppercase characters to lowercase and convert all characters to upper case.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.capitalize()\n    \n    \"\"\"\n    For a given string, convert any upper case characters to lowercase and convert all characters to upper case.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.upper()\n    \n    \"\"\"\n    For a given string, convert any uppercase characters to lowercase and convert all characters to uppercase.\n    >>> flip_case('Hello')\n    'hello'\n    \"\"\"\n    \n    \n    return string.lower(",
        "num_ids": 415
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    string = list(string.lower())\n    string[0] = string[0].upper()\n    string[1] = string[1].lower()\n    string[2] = string[2].upper()\n    return ''.join(string",
        "num_ids": 57
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_str = ''\n    for char in string:\n        if char.isupper():\n            new_str += char.lower()\n        else:\n            new_str += char.upper()\n    return new_st",
        "num_ids": 52
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return string.upper() + string.lower()\n",
        "num_ids": 13
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join(map(lambda s: s.lower() if s.isupper() else s.upper(), string))\n",
        "num_ids": 30
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    string = string.lower()\n    string = string.upper()\n    string = string.capitalize()\n    string = string.capitalize()\n    string = string.title()\n    string = string.lower()\n    return string\n    \n",
        "num_ids": 59
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    strings = [string.strip() for string in strings]\n    return ''.join(strings)\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if strings == []:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "num_ids": 25
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [string for string in strings if string[:len(prefix)] == prefix]\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # https://leetcode.com/problems/string-compare/\n    \"\"\"\n    # FIND ITEM IN LIST\n    #\n    # IF LIST SIZE\n    #     AND NEXT ITEM IS NOT A STARTED\n    #     THE NEXT ITEM\n    #         STARTED ITEM TO GET\n    #\n    # SET NEXT_ITEM = NEXT ITEM + 1\n    #     IF NEXT_ITEM IS NOT in LIST\n    #             START ITEM TO NEXT\n    #\n    # ENSURE LIST IS A SORT OF ITS FIRST ELEMENT\n    #\n    # IF LIST IS SORTED \n    #     PROPERTIES LIST SORTED\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #\n    # RESET NEXT\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # FIND NEXT ITEM\n    #     IF NEXT ITEM IS IN LIST\n    #         START ITEM TO NEXT\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # ELSE\n    #     START ITEM TO NEXT\n    #\n    # BREAK IF END OF LIST\n    #\n    # IF NEXT ITEM IS IN LIST\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF NEXT ITEM IS NOT IN LIST\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # BREAK IF END OF LIST\n    #\n    # ENSURE LIST IS A SORT OF ITS FIRST ELEMENT\n    #\n    # IF LIST IS SORTED\n    #     PROPERTIES LIST SORTED\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #         PRINT NEXT ITEM\n    #\n    # RESET NEXT\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # IF NEXT ITEM IS IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     PRINT NEXT ITEM\n    #\n    # BREAK IF END OF LIST\n    #\n    # IF NEXT ITEM IS NOT IN LIST\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # ELSE\n    #     NEXT ITEM = NEXT ITEM + 1\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF END OF LIST\n    #\n    # BREAK IF EN",
        "num_ids": 1000
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_strings = []\n    for s in strings:\n        if s[:len(prefix)].startswith(prefix):\n            new_strings.append(s)\n    return new_strings\n",
        "num_ids": 47
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings\n",
        "num_ids": 44
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # startswith\n    if not prefix:\n        return strings\n    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 35
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    positive = []\n    for n in l:\n        if n > 0:\n            positive.append(n)\n    return positive\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l = list(map(lambda x: -x, l))\n    for i in l:\n        if i > 0:\n            return l\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 100
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 0 or n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2 or n == 2 or n % 2 == 0:\n        return False\n    if n == 2 or n == 3:\n        return True\n    \n    for i in range(3, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return True\n    else:\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        while n % 2 == 0 or n % 3 == 0:\n            n = n // 2\n        return n == 1\n",
        "num_ids": 99
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    \n    if n == 2 or n == 3:\n        return True\n    if n%2 == 0 or n%3 == 0:\n        return False\n    \n    k = 5\n    while k*k <= n:\n        if n%k==0 or n%(k+2)==0:\n            return False\n        k += 2\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n in (2, 3): return True\n    if n < 3 or n % 2 == 0: return False\n    \n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0: return False\n",
        "num_ids": 62
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [poly(xs, x) for x in xs[::-1]][0]\n",
        "num_ids": 24
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    len_xs = len(xs)\n    if len_xs % 2 == 0:\n        return xs[len_xs // 2]\n    else:\n        return -xs[len_xs // 2]\n",
        "num_ids": 50
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = poly(xs, 0)\n    if x < 0:\n        return 0\n    return x\n",
        "num_ids": 26
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(xs)\n    xs_abs = [abs(i) for i in xs]\n    xs_abs.sort(reverse=True)\n    if (xs_abs[0] == 0.0) or (xs_abs[0] == 1.0): # no solution found.\n        return 0.0\n    x = xs_abs[0]\n    for i in range(1, n):\n        if x == 0.0:\n            return xs_abs[0]\n        x = (x - xs_abs[i-1]) / (xs_abs[i] - xs_abs[i-1])\n    return xs_abs[n-1]\n",
        "num_ids": 164
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n == 0:\n        return 0.0\n    if n == 1:\n        return xs[0]\n    if n == 2:\n        return (xs[1] + xs[0]) / (xs[1] + xs[0]*xs[1])\n    if n == 3:\n        return (xs[0] + xs[1]) / (xs[0] + xs[1]*xs[0] + xs[1]*xs[1]*xs[1])\n    if n == 4:\n        return xs[0] + xs[1] * xs[0] + xs[1] * xs[1] * xs[2] + xs[2] * xs[0] + xs[2] * xs[1] * xs[2] + xs[3] * xs[0] + xs[3] * xs[1] * xs[3] + xs[4] * xs[0] + xs[4] * xs[1] * xs[4]\n    if n == 5:\n        return xs[0] + xs[1] * xs[0] + xs[1] * xs[1] * xs[2] + xs[2] * xs[0] + xs[2] * xs[1] * xs[2] + xs[3] * xs[0] + xs[3] * xs[1] * xs[3] + xs[4] * xs[0] + xs[4] * xs[1] * xs[4] + xs[5] * xs[0] + xs[5] * xs[1] * xs[5]\n    if n == 6:\n        return xs[0] * xs[1] + xs[1] * xs[2] + xs[2] * xs[3] + xs[3] * xs[4] + xs[4] * xs[5] + xs[5] * xs[6]\n    if n == 7:\n        return xs[0] * xs[1] * xs[2] + xs[1] * xs[3] * xs[4] + xs[3] * xs[5] * xs[6] + xs[6] * xs[7]\n    if n == 8:\n        return xs[0] * xs[1] * xs[2] * xs[3] + xs[1] * xs[3] * xs[4] * xs[5] + xs[3] * xs[5] * xs[6] * xs[7] + xs[6] * xs[7] * xs[8] + xs[7] * xs[8] * xs[8]\n    if n == 9:\n        return xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] * xs[8] * xs[9] + xs[9] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8] * xs[8]\n    if n == 10:\n        return xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] * xs[8] * xs[9] * xs[10] + xs[10] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9] * xs[9",
        "num_ids": 1024
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    xs.sort(key=lambda x: math.fabs(x))\n    xs = [x for x in xs if x!= 0]\n    n = len(xs)\n    p = 1\n    if n == 2:\n        return xs[0]\n    else:\n        while n % 2 == 0:\n            n = n // 2\n            p = p * 2\n        return xs[n - 1] + (xs[n] * p)\n        # return xs[n - 1] + p * (xs[n] * (p - 1) + xs[n - p])\n",
        "num_ids": 143
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(xs) % 2 == 0:\n        return (xs[0] + xs[1] * (xs[0] + xs[1]) * (xs[0] + xs[1])) / math.pow(xs[0] + xs[1], len(xs) - 1)\n    else:\n        return find_zero(xs[:len(xs) // 2])\n",
        "num_ids": 96
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    max_zero = 0\n    zero_point = 0\n    for x in xs:\n        if x == 0:\n            continue\n        if max_zero < x:\n            max_zero = x\n            zero_point = 0\n        elif max_zero == x:\n            zero_point += 1\n    return zero_point, max_zero\n",
        "num_ids": 83
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(xs)\n    if n % 2 == 0:\n        if xs[n]!= 0:\n            return xs[n]\n        else:\n            return (find_zero(xs[:n//2]) + find_zero(xs[n//2:])) / 2\n    else:\n        return xs[0]\n",
        "num_ids": 83
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    xs.sort()\n    if len(xs) < 2: return 0\n    return xs[len(xs)//2]\n",
        "num_ids": 32
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_l = sorted(l, key=lambda x: x%3!= 0)\n    return sorted_l\n",
        "num_ids": 30
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if len(l) % 3!= 0:\n        return l\n",
        "num_ids": 20
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    for i in range(len(l)):\n        res.append(l[i])\n        if i % 3 == 0:\n            res[i] = l[i//3]\n    return res",
        "num_ids": 53
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            result.append(l[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [l[i] for i in range(3) if l[i] % 3!= 0]\n",
        "num_ids": 27
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l[0], l[-1] = l[-1], l[0]\n    for i in range(1, len(l) - 1):\n        if l[i] % 3 == 0:\n            l[i], l[i + 1] = l[i + 1], l[i]\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # INCOMPLETE, REMEMBER: DO NOT USE 3 FORTH AND 3 FORTHS\n    # THIS IS ONLY SUPPLIED TO THE SORT METHOD\n    n = len(l)\n    index = [x for x in range(n)]\n    for i in range(n-1, 0, -1):\n        if i%3 == 0:\n            for j in range(i):\n                if index[j] % 3 == 0:\n                    if index[j]!= index[j+1]:\n                        index[j], index[j+1] = index[j+1], index[j]\n        if i%3 == 1:\n            for j in range(i):\n                if index[j] % 3 == 1:\n                    if index[j]!= index[j+1]:\n                        index[j], index[j+1] = index[j+1], index[j]\n",
        "num_ids": 209
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = sorted(l, reverse=True)\n    for i in range(len(s)):\n        if s[i] % 3 == 0:\n            return s\n    return l\n",
        "num_ids": 45
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l_copy = l.copy()\n    l_copy_copy = l_copy.copy()\n    sorted_l = []\n    while l_copy_copy:\n        if l_copy_copy[0] % 3 == 0:\n            sorted_l.append(l_copy_copy[0])\n            l_copy_copy.pop(0)\n        else:\n            sorted_l.append(l_copy_copy.pop(0))\n    return sorted_l\n",
        "num_ids": 116
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.sort()\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) == 1:\n        return l\n    else:\n        return [l[i] for i in range(len(l)) if l[i]!= l[i+1]]\n",
        "num_ids": 55
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # this function sort the list in place\n    if l == []:\n        return []\n    \n    # if you want to remove duplicates, iterate the list from\n    # beginning to end\n    elif len(l) == len(set(l)):\n        return l\n",
        "num_ids": 66
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n",
        "num_ids": 30
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n",
        "num_ids": 29
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(l)\n    if n < 2:\n        return []\n    elif n == 2:\n        return l\n    else:\n        return l[0:n//2] + l[n//2:n]\n",
        "num_ids": 56
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    seen = set()\n    return [i for i in l if i not in seen and not seen.add(i)]\n",
        "num_ids": 29
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l.sort()\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l2 = list(set(l))\n    return sorted(l2)\n",
        "num_ids": 20
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max = None\n    for i in l:\n        if max == None or i > max:\n            max = i\n    return max\n",
        "num_ids": 33
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_val = -2147483648\n    for element in l:\n        if max_val < element:\n            max_val = element\n    return max_val\n",
        "num_ids": 42
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_ = l[0]\n    for x in l:\n        if x > max_:\n            max_ = x\n    return max_\n    ",
        "num_ids": 37
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(l)\n    # l.sort()\n    # print(l)\n",
        "num_ids": 22
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_val = -math.inf\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write your code here.\n    if len(l) == 0:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your code here\n    return max(l)\n",
        "num_ids": 18
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def fizz_buzz(n: int):\n        def nums(x):\n            if x % 11 == 0 and x % 13 == 0:\n                return x\n            elif x % 11 == 0:\n                return nums(x // 11) + 1\n            elif x % 13 == 0:\n                return nums(x // 13) + 2\n            else:\n                return nums(x)\n        return nums(n)\n    return fizz_buzz(n)\n",
        "num_ids": 116
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    while n!= 0:\n        if n % 7 == 0 and n % 11 == 0:\n            count += 1\n        elif n % 11 == 0:\n            count += 1\n        elif n % 7 == 0:\n            count += 1\n        else:\n            count = 0\n        n //= 10\n    return coun",
        "num_ids": 82
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n    return coun",
        "num_ids": 72
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 and i % 11 == 0 and i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \"\"\"return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\"\"\"\n    \"\"\" return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\"\"\"\n    if n % 10 == 7:\n        return 0\n    elif n % 10 == 6:\n        return 1\n    elif n % 10 == 5:\n        return 2\n    elif n % 10 == 4:\n        return 3\n    elif n % 10 == 3:\n        return 4\n    elif n % 10 == 2:\n        return 5\n    elif n % 10 == 1:\n        return 6\n",
        "num_ids": 236
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 7 == 0:\n        return 1\n    elif n % 11 == 0:\n        return fizz_buzz(n//11) + 1\n    elif n % 13 == 0:\n        return fizz_buzz(n//13) + 1\n    else:\n        return fizz_buzz(n)\n",
        "num_ids": 79
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 1\n    while i <= n:\n        if i % 7 == 0 and i % 11 == 0:\n            i += 1\n            continue\n        else:\n            i += 1\n            return i\n",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n % 11 == 0:\n        return 0\n    elif n % 13 == 0:\n        return 1\n    else:\n        return fizz_buzz(n // 10) + fizz_buzz(n % 10)\n",
        "num_ids": 56
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    while n % 10 == 7:\n        count += 1\n        n = n / 10\n    if n % 11 == 0:\n        count += 1\n    if n % 13 == 0:\n        count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    i=1\n    if n%11==0 or n%13==0:\n        return 0\n    else:\n        while i<=n:\n            if n%i==0:\n                return i\n            else:\n                i+=1\n",
        "num_ids": 61
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = []\n    odd = []\n    for el in l:\n        if el % 2 == 0:\n            even.append(el)\n        else:\n            odd.append(el)\n    return [even, odd]\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #check if l is sorted\n    if len(l) == 0:\n        return []\n    if l[0] == l[-1]:\n        return l\n    #check if l is sorted\n    #if yes, then l' is sorted\n    #if no, then return l\n    if l[0] < l[-1]:\n        return sort_even(l[1:])\n    else:\n        return sort_even(l[:-1])\n",
        "num_ids": 109
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    odd_index = 0\n    even_index = 0\n",
        "num_ids": 17
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda x: (x%2 == 0, x)",
        "num_ids": 21
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    odd = []\n    even = []\n    even_index = 0\n    odd_index = len(l) - 1\n    while even_index <= odd_index:\n        if l[even_index] % 2 == 0:\n            even.append(l[even_index])\n            even_index += 1\n        else:\n            odd.append(l[odd_index])\n            odd_index -= 1\n    for i in range(odd_index):\n        odd.append(l[i])\n    for i in range(even_index):\n        even.append(l[even_index])\n        even_index -= 1\n    return even + odd\n",
        "num_ids": 154
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return l[::2]\n",
        "num_ids": 9
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l = sorted(l)\n    l_even = l[::2]\n    l_odd = l[1::2]\n    return l + l_even + l_odd\n",
        "num_ids": 44
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s_l = []\n    for i in l:\n        s_l.append(i)\n    \n    while len(s_l) >= 2:\n        if s_l[0] % 2 == 0:\n            s_l.insert(0, s_l.pop(0))\n        else:\n            s_l.append(s_l.pop(0))\n    \n    return s_l",
        "num_ids": 98
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    evens = []\n    odds = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            evens.append(l[i])\n        else:\n            odds.append(l[i])\n    return evens + odds\n",
        "num_ids": 67
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    groups = decode_cyclic_groups(encode_cyclic(s))\n    return \"\".join(groups[0])\n    # return \"\".join(groups[1:])",
        "num_ids": 43
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove extra spaces and newline at end of string.\n    groups[0] = groups[0].strip()\n    groups[-1] = groups[-1].strip()\n    return \"\".join(groups)\n",
        "num_ids": 150
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # group elements that are the same length.\n    # change every element of this group, and find new groups.\n    groups = [s[i:(i + 3)] for i in range(0, len(s), 3)]\n    # remove trailing group.\n    groups = groups[:-1]\n    # cycle elements of this group.\n    group = groups[(3 * i):(3 * i + 3)]\n    # return the decoded string.\n    return \"\".join(group)",
        "num_ids": 113
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # remove group 0 and group 1.\n    group = groups.pop(0)\n    group = group[1:]\n    # remove group 2 and group 3.\n    group = groups.pop(2)\n    group = group[1:]\n    # concatenate group 2 and group 3.\n    return group + group + group",
        "num_ids": 174
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # get longest string.\n    char_len = len(s)\n    # use pad last character to work with str.find.\n    while char_len > 3:\n        s = \"p\" + s[-3:]\n        char_len -= 3\n    # split by 3 chars.\n    char_list = s[:-1].split(\"p\")\n    # generate list of chars for each group.\n    char_list = [char_list[i] for i in range((len(char_list) + 2) // 3)]\n    # cyclic decode, have to work with char_list.\n    return \"\".join([s[i].upper() if char_list[i] == \"p\" else s[i] for i in range(char_len)])\n",
        "num_ids": 179
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups[::-1])\n",
        "num_ids": 112
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return encode_cyclic(s)[1:-1]",
        "num_ids": 14
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return empty string if invalid input.\n    if not s:\n        return \"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[0] + group[-1]) if len(group) == 3 else group for group in groups]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "num_ids": 129
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = 2\n    b = 3\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    while True:\n        c = a + b\n        if c > n:\n            return n\n        elif c == n:\n            return a\n        else:\n            a = b\n            b = c\n            if a % b == 0:\n                return a\n",
        "num_ids": 96
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n<=1:\n        return n\n    else:\n        prime = [1,1]\n        i=2\n        while i<n:\n            prime.append(prime[i-1] + prime[i-2])\n            i+=1\n        return prime[n-1]\n",
        "num_ids": 71
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = 2\n    while(x <= n):\n        y = 2\n        while(y < x+1):\n            yield y\n            y += x\n        x += 1\n",
        "num_ids": 44
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a, b = 2, 1\n    while True:\n        if n % a == 0:\n            return a\n        if n % b == 0:\n            return b\n        a, b = b, a+b\n        n += 1\n",
        "num_ids": 57
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(n):\n        if is_prime(i)==True:\n            return i\ndef prime_factorial(n: int):\n    \"\"\"\n    prime_factorial returns the factorial of a number that is a Fibonacci number.\n    >>> prime_factorial(2)\n    6\n    >>> prime_factorial(3)\n    6\n    >>> prime_factorial(4)\n    24\n    \"\"\"\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\ndef fibonacci_sequence(n: int):\n    \"\"\"\n    fibonacci_sequence returns a list of the fibonacci numbers, where the first num\n    is 1.\n    >>> fibonacci_sequence(2)\n    [1, 1]\n    >>> fibonacci_sequence(3)\n    [1, 1, 2]\n    >>> fibonacci_sequence(4)\n    [1, 1, 2, 3, 5, 8, 13]\n    \"\"\"\n    n1 = 1\n    n2 = 1\n    for i in range(2, n + 1):\n        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n    return [n1, n2]\ndef palindrome(s: str):\n    \"\"\"\n    palindrome returns True if the string passed is palindrome, False otherwise.\n    >>> palindrome(\"t\")\n    True\n    >>> palindrome(\"tetra\")\n    False\n    \"\"\"\n    return s[::-1] == s\ndef reverse_string(s: str):\n    \"\"\"\n    reverse_string returns a copy of the string passed, which is then reversed.\n    >>> reverse_string(\"abc\")\n    'cba'\n    >>> reverse_string(\"the quick brown fox jumps over the lazy dog\")\n    'jumps over the lazy dog'\n    \"\"\"\n    return s[::-1]\ndef factorial(n: int):\n    \"\"\"\n    factorial returns then'th factorial of n.\n    >>> factorial(1)\n    1\n    >>> factorial(2)\n    24\n    >>> factorial(3)\n    720\n    >>> factorial(4)\n    2484\n    \"\"\"\n    factorial_numbers = [1]\n    for i in range(1, n + 1):\n        factorial_numbers.append(i * factorial(i - 1))\n    return factorial_numbers[n]\ndef logarithm(n: int):\n    \"\"\"\n    logarithm returns then'th logarithm of n.\n    >>> logarithm(2)\n    1\n    >>> logarithm(3)\n    4\n    >>> logarithm(4)\n    24\n    >>> logarithm(4)\n    16\n    \"\"\"\n    log = 1\n    for i in range(1, n + 1):\n        log = log * i\n    return log\ndef squaring_root(x: int, n: int):\n    \"\"\"\n    squaring_root returns the square root of a number x and n times.\n    >>> squaring_root(3, 5)\n    1.0\n    >>> squaring_root(3, 2)\n    2.0\n    >>> squaring_root(2, 5)\n    8.0\n    \"\"\"\n    return x ** n\n",
        "num_ids": 797
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 2:\n        return n\n    for i in range(2, n):\n        if (i%2) and (n % i == 0):\n            return i\n",
        "num_ids": 43
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def recur(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return recur(n-1) + recur(n-2)\n    return recur(n)\n",
        "num_ids": 62
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n < 2:\n        return n\n    else:\n        y, x = 2, 3\n        while x <= n:\n            y += x\n            x += y\n        return y\n",
        "num_ids": 64
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Check that all inputs are integers\n    if l == []:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 3:\n        if l[0] + l[1] == l[2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Try to make this a proper function, then use it.\n    # Return False if the list is empty.\n    # Return True if the list has no three distinct elements that sum to zero.\n",
        "num_ids": 45
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    triples_sum = 0\n    for i in range(len(l)-1):\n        if l[i] + l[i+1] > 0:\n            triples_sum += 1\n    return triples_sum == 3\n",
        "num_ids": 56
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert len(l) == 3\n    if triples_sum(l) == 3:\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not l:\n        return True\n    if len(l) == 3:\n        for i in range(3):\n            if l[i]!= 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sums = []\n    for i in l:\n        if not (i in sums):\n            sums.append(i)\n    return len(sums) > 1\n",
        "num_ids": 42
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # 1. Build a map of the values.\n    map_val = {}\n    for num in l:\n        if num in map_val:\n            map_val[num] += 1\n        else:\n            map_val[num] = 1\n    \n    # 2. Build a map of the combinations.\n    set_val = set()\n    for i in map_val:\n        if map_val[i] == 1:\n            set_val.add(i)\n    \n    # 3. Return True if there are three distinct values.\n    if len(set_val) == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 153
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def triples_sum_to_zero_rec(l: list, start: int, end: int):\n        if start == end:\n            return False\n        if start < end:\n            mid = start + (end - start) // 2\n            if l[mid] == 0:\n                return triples_sum_to_zero_rec(l, start, mid - 1)\n            elif l[mid] == 1:\n                return triples_sum_to_zero_rec(l, mid + 1, end)\n            else:\n                return triples_sum_to_zero_rec(l, start, mid - 1) or triples_sum_to_zero_rec(l, mid + 1, end)\n",
        "num_ids": 169
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n    summ = 0\n    # cycle through each element in the list\n    for num in l:\n        summ += num\n    # if the sum is zero, return True\n    if summ == 0:\n        return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO:\n    # Write your solution here\n    if n == 1:\n        return 0\n    return n\n",
        "num_ids": 29
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i = 0\n    while i < n:\n        collision = 0\n        for car1 in vehicles[i]:\n            for car2 in vehicles[i+1]:\n                car1_hit_left = car1.position[0] > 0\n                car2_hit_left = car2.position[0] > 0\n                car1_hit_right = car1.position[0] < 0\n                car2_hit_right = car2.position[0] < 0\n                if car1_hit_left and car2_hit_left:\n                    collision += 1\n                if car1_hit_right and car2_hit_right:\n                    collision += 1\n        i += 1\n        print(collision)\n",
        "num_ids": 171
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max_speed = (n * 2) + 1\n    collisions = 0\n    for i in range(1, max_speed):\n        for j in range(n + 1, i):\n            if car_race_collision(j):\n                collisions += 1\n    return collisions\n",
        "num_ids": 68
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    collision = 0\n    while True:\n        if n == 0:\n            print(\"Cars are out of place\")\n        elif n == 1:\n            print(\"One car is out of place\")\n        elif n == 2:\n            print(\"Two cars are out of place\")\n        elif n == 3:\n            print(\"Three cars are out of place\")\n        else:\n            print(\"More than three cars are out of place\")\n            break\n        print(n, \"cars are moving\")\n        n -= 1\n        print(n, \"cars are moving\")\n        print(n, \"cars are still moving\")\n        n = 0\n        collision += 1\n        print(collision, \"collision\")\n        if n == 0:\n            print(\"One car is moving\")\n        elif n == 1:\n            print(\"Two cars are moving\")\n        elif n == 2:\n            print(\"Three cars are moving\")\n        else:\n            print(\"More than three cars are moving\")\n            break\n",
        "num_ids": 236
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    numbers = list(range(1, n + 1))\n",
        "num_ids": 16
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return int(n * (n-1) / 2)\n",
        "num_ids": 16
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Use a set to get a list of the different possible collisions\n    collisions = set(range(n))\n    # Loop through each car in the list of collisions\n    for c in collisions:\n        # Get the car's distance from each other\n        a = (car_pos[c][0] - car_pos[c + 1][0]) ** 2\n        b = (car_pos[c][1] - car_pos[c + 1][1]) ** 2\n        # If the two cars are not on the same side of each other, then the car is far away\n        if (a!= b) and (a > b):\n            # If a is on the left of b, then we want to drive right to right\n            if a > b:\n                # Add 1 to the number of cars that are traveling right to left, since\n                # the cars travel right to right in a straight line\n                right_collisions[c] = right_collisions[c] + 1\n            else:\n                # Add 1 to the number of cars that are traveling left to right, since\n                # the cars travel left to left in a straight line\n                right_collisions[c] = right_collisions[c] + 1\n    # Return the number of collisions\n    return len(right_collisions)\n",
        "num_ids": 296
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = int(n)\n    if n > 2:\n        print(f\"Warning! The road is too long! {n} cars are driving left to right.\")\n        return int(0)\n",
        "num_ids": 47
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return math.ceil(n / 2)\n",
        "num_ids": 13
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(1 for x in range(n) if not car_race_collision(x))\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [value + 1 for value in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.append(l[-1] + 1)\n    return ",
        "num_ids": 18
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for i in l:\n        i += 1\n        result.append(i)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l[0] += 1\n    return l\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [num+1 for num in l",
        "num_ids": 11
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def pair(x,y):\n        return x!=y and sum(sorted([x,y]))==0\n    n = len(l)\n    if n < 2:\n        return False\n    for i in range(n):\n        if pair(l[i],l[i+1]):\n            return True\n    return False\n",
        "num_ids": 82
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pair_sum = sum(l)\n    if pair_sum == 0:\n        return False\n    for pair in l:\n        if pair!= 0 and pair_sum!= pair:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return not any(a == b for a, b in zip(l, l[1:]))\n",
        "num_ids": 24
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your solution here\n    if len(l)<2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j]==0:\n                return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in l:\n        if i == 0:\n            return False\n    for i in l:\n        if i == 0 and l.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n=len(l)\n    for i in range(0,n):\n        for j in range(0,n-i-1):\n            if l[j]==l[j+i]:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Get a copy of the list\n    l = l[:]\n    \n    # Count the length of the list\n    count = 0\n    \n    # For each index, if there's an element with a sum of 0, there's a pair.\n    # If this doesn't occur, no pair exists\n    for i in range(len(l)):\n        if l[i] == 0:\n            if count > 1:\n                return False\n            if l[i] == 0 and l[i - 1]!= 0:\n                return False\n            count += 1\n    \n    # If there are still no pairs, there is a pair.\n    return True\n",
        "num_ids": 153
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # if there are two elements with sum = 0, return False\n    if len(l) == 2:\n        return False\n    # if there are three elements with sum = 0, return False\n    elif len(l) == 3:\n        return False\n    # if there are more than two elements, return False\n    elif len(l) > 2:\n        return False\n    # if there are only two elements with sum = 0, return True\n    else:\n        return True\n",
        "num_ids": 112
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.sort()\n    count_zero = 0\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]:\n            count_zero = count_zero + 1\n    if count_zero == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(bin(x)[2:].zfill(base))\n",
        "num_ids": 18
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not isinstance(x, int):\n        raise TypeError(\"x is not a number\")\n    if base < 2:\n        raise ValueError(\"base must be >= 2\")\n    if base == 2:\n        return str(x)\n    else:\n        return str(x).rjust(base, '0')",
        "num_ids": 75
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if base == 2:\n        return '%d%s' % (x, base)\n    elif base == 3:\n        return '%d%s%d' % (x, base, 1)\n    elif base == 4:\n        return '%d%s%d' % (x, base, 2)\n    elif base == 5:\n        return '%d%s%d' % (x, base, 3)\n    elif base == 6:\n        return '%d%s%d' % (x, base, 4)\n    elif base == 7:\n        return '%d%s%d' % (x, base, 5)\n    elif base == 8:\n        return '%d%s%d' % (x, base, 6)\n    elif base == 9:\n        return '%d%s%d' % (x, base, 7)\n    elif base == 10:\n        return '%d%s%d%d' % (x, base, 9, 1)\n    else:\n        raise ValueError('Invalid base')\n",
        "num_ids": 256
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return str(base ** x % base)\n",
        "num_ids": 12
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # base numbers are less than 10.\n    if x < base:\n        return f'{x}{base}'\n    # base numbers are greater than 10.\n    else:\n        return f'{x//base}' + change_base(x%base, base)\n",
        "num_ids": 65
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    x = x % base\n    if x < base:\n        return str(x) + change_base(x, base)\n    else:\n        return str(x)\n",
        "num_ids": 42
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #return (str(bin(x)[2:]).zfill(len(str(base))).upper())\n    return bin(x)[2:].zfill(len(str(base)))\n",
        "num_ids": 46
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return str(x).zfill(base)\n",
        "num_ids": 13
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    converted = \"\"\n    while x:\n        if x & 1:\n            converted += str(base)\n        x >>= 1\n    return converted\n",
        "num_ids": 38
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(base * x)\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return h * (a ** 2)",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert 0 <= a < h, \"triangle_area: a must be a positive number.\"\n    a = a / 2\n    return a * h * (h - a) / 2\n",
        "num_ids": 44
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a < 0 or h < 0:\n        raise ValueError('Negative side lengths not supported')\n    return (a*h)/2\n",
        "num_ids": 34
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return h*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (h / 2) * (a + h / 2)\n",
        "num_ids": 17
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a_h = (a*h)/2\n    return (a_h*a_h)\n",
        "num_ids": 25
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return a*(h/2)*(h/2)\n",
        "num_ids": 16
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (a*(a-h))/2\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return a*h\n",
        "num_ids": 7
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def fib4_rec(n):\n        if n == 1 or n == 2:\n            return n\n        return fib4_rec(n-1) + fib4_rec(n-2) + fib4_rec(n-3) + fib4_rec(n-4)\n    return fib4_rec(n)\n",
        "num_ids": 80
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(\"Need a positive integer.\")\n",
        "num_ids": 19
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if n == 0 or n == 1:\n    #     return 0\n    # return fib4(n-1) + fib4(n-2) + fib4(n-3)\n    if n == 0 or n == 1:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "num_ids": 87
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    return fib4(n-1) + fib4(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 57
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 70
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3)\n",
        "num_ids": 54
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    \n    # sort the list l and get the median\n    l.sort()\n    return l[len(l) // 2]\n    \ndef quantile(l: list):\n    \"\"\"Return a list of the first n elements of l with the largest absolute value.\n    >>> quantile([0, -1, 2, -5, 1])\n    [0, 1, 2, 3]\n    \"\"\"\n    if len(l) == 0:\n        return []\n    \n    # find the index of the largest value in the list\n    l.sort()\n    largest_val = max(l)\n    return [x for x, y in enumerate(l) if y == largest_val]\n    \ndef stats(l: list):\n    \"\"\"Return a dictionary with the following statistics:\n    median = median(l)\n    quantile = quantile(l)\n    std = (sum(l)/len(l))**0.5\n    mean = mean(l)\n    variance = variance(l)\n    \n    The keys in the dictionary are the names of the functions and the values are the\n    statistics that they return.\n    \"\"\"\n    median = median(l)\n    quantile = quantile(l)\n    return {\n        \"median\": median,\n        \"quantile\": quantile,\n        \"std\": statistics.pstdev(l),\n        \"mean\": statistics.mean(l),\n        \"variance\": statistics.variance(l)\n    }\n",
        "num_ids": 377
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not l:\n        return None\n    \n    l.sort()\n    if len(l) % 2:\n        return (l[int((len(l)/2)-1)] + l[int((len(l)/2)-1)])/2\n    else:\n        return l[int((len(l)/2)-1)]\n    \n    \ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> mode([1, 4, 3, 4, 2, 0])\n    2\n    >>> mode([1, 4, 3, 4, 2, 0, 8, 7, 4, 2, 0])\n    4\n    \"\"\"\n    l.sort()\n    counts = {}\n    for i in range(len(l)):\n        if l[i] in counts:\n            counts[l[i]] += 1\n        else:\n            counts[l[i]] = 1\n    \n    for key in counts:\n        if counts[key] == 1:\n            return key\n        \n    \ndef count_prime_factors(n: int) -> list:\n    \"\"\"Return list of prime factors of n.\n    >>> count_prime_factors(12)\n    [2, 3, 5]\n    \"\"\"\n    \n    def is_prime(n):\n        if n == 2:\n            return True\n        if n < 2 or n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n        \n    def count_factor(n):\n        factor_list = []\n        for i in range(n, 1, -1):\n            if is_prime(i):\n                factor_list.append(i)\n        return factor_list\n    \n    if n < 1:\n        return []\n    \n    factors = count_factor(n)\n    \n    prime_factors = []\n    for i in factors:\n        if n % i == 0:\n            prime_factors.append(i)\n    \n    return prime_factors\n    \n    \ndef reverse(l: list):\n    \"\"\"Reverse the elements of a list.\n    >>> reverse([1, 2, 3])\n    [3, 2, 1]\n    \"\"\"\n    if not l:\n        return None\n    \n    l.sort()\n    \n    for i in range(len(l)):\n        # shift all elements to the right by one to the left\n        for j in range(i, len(l)):\n            l[i], l[j] = l[j], l[i]\n        \n        # break out of the loop after the correct index\n        break\n    \n    return l\n    \n",
        "num_ids": 665
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    med = sorted(l)[len(l)//2]\n    if len(l) % 2!= 0:\n        med = l[len(l)//2]\n    return med\n    # return l[len(l)//2]\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(sorted(l)[len(l) // 2]) / len(l)\n",
        "num_ids": 23
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) == 1:\n        return l[0]\n    return median(l[:len(l)//2]) + (l[len(l)//2])\n",
        "num_ids": 44
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        median = (l[int(len(l)/2)] + l[int(len(l)/2 - 1)])/2\n    else:\n        median = l[int(len(l)/2)]\n    return median\n",
        "num_ids": 76
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = sum(l)\n    n = len(l)\n    if s % 2 == 0:\n        return (l[n//2] + l[(n - 1)//2])/2.0\n    else:\n        return l[n//2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(l)[len(l)//2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l.sort()\n    return (l[len(l)//2] if len(l) % 2 else (l[len(l)//2 - 1] + l[len(l)//2])/2)\n",
        "num_ids": 53
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 31
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if text == \"\":\n        return True\n    else:\n        # split text into list\n        # iterate through characters in string\n        for char in text:\n            # check if char is a palindrome\n            if char!= char[::-1]:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(text) <= 1:\n        return True\n    \n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n",
        "num_ids": 46
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(text) == 0 or len(text) == 1:\n        return True\n    return text[0] == text[len(text)-1]\n",
        "num_ids": 38
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(text) < 1:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 41
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(text) // 2):\n        if text[i]!= text[-1-i]:\n            return False\n",
        "num_ids": 35
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # remove spaces and convert to lower case\n    text = text.replace(' ','')\n    # check if last character is a minus sign\n    if text[-1] == '-':\n        return False\n    else:\n        # swap all the 0s and all other characters\n        text = text.replace('0', '1') + text.replace('1', '0')\n        return text == text[::-1]\n",
        "num_ids": 99
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(text) < 1:\n        return True\n    \n    left_pointer = 0\n    right_pointer = len(text) - 1\n    \n    while left_pointer < right_pointer:\n        if text[left_pointer] == text[right_pointer]:\n            left_pointer += 1\n            right_pointer -= 1\n        else:\n            return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text_list = list(text.lower())\n    return text_list == text_list[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = str(text.upper())\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 1\n    while n!= 0:\n        result *= (n % p)\n        n = n // p\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # e.g., 8^3 = 1^3 mod 101\n    # special case: e.g. 101 = 2^0 mod 101\n    if n == 1:\n        return 1\n    # e.g., 2^0 mod 101 = 1^0 mod 101\n    # special case: e.g. 101 = 2^1 mod 101\n    elif n == 2:\n        return 2\n    else:\n        r = 0\n        for i in range(0, n):\n            r += (pow(n, 2, p)) % p\n        return r % p\n    \ndef modinv(n: int, p: int):\n    \"\"\"Return modulo of n by p modulo p (be aware of numerics).\n    >>> modinv(88, 101)\n    7\n    >>> modinv(2, 11)\n    2\n    >>> modinv(3, 101)\n    3\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # e.g., 2^0 mod 101 = 1^0 mod 101\n        # special case: e.g. 101 = 2^1 mod 101\n        if n == 2:\n            return modp(1, p)\n        else:\n            r = 0\n            for i in range(0, n):\n                r += pow(n, 2, p) % p\n            return modp(r, p)\n        \ndef add(a: int, b: int, p: int):\n    \"\"\"Return (a + b) modulo p.\n    >>> add(1, 3, 11)\n    9\n    >>> add(1, 3, 101)\n    9\n    >>> add(0, 0, 101)\n    1\n    \"\"\"\n    # e.g., 1 + 3 = 5 mod 101\n    # special case: e.g. 101 = 2^0 mod 101\n    if a == b == 0:\n        return 0\n    else:\n        return modinv(a + b, p)\n",
        "num_ids": 458
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return int(pow(n, 1.0/p, p)",
        "num_ids": 18
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n==0:\n        return 1\n    return (n*modp(n-1, p)) % p\n",
        "num_ids": 29
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    MOD = (1 << (n - 1)) % p\n    return MOD\n",
        "num_ids": 21
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import math\n    if n == 0:\n        return 0\n    if n == 1:\n        return n\n    if n == 2:\n        return p\n    for i in range(math.floor(math.log(n, p)) + 1):\n        if n % p**(i + 1) == 0:\n            return p**i\n    return 1\n",
        "num_ids": 85
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    m = 1 << (n - 1)\n    return (m - 1) % p\n",
        "num_ids": 22
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #if n == 0:\n        #return 1\n    #elif n == 1:\n        #return n\n    #elif n == 2:\n        #return n*2\n    #elif n == 3:\n        #return n*3\n    #else:\n        #return n*n*n\n    for i in range(p):\n        if i % 2 == 0:\n            n = n * n\n        else:\n            n = n * n + n * (n + 1)\n    return n\n",
        "num_ids": 122
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (n % p) * (p-n)",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # make sure we are not in a loop\n    assert n > 0, \"n is negative\"\n    # make sure we are in the correct modulus range\n    assert n >= 2, \"n must be a positive number\"\n    # make sure we are not dividing by 0\n    assert p > 0, \"p must be positive\"\n    # return\n    return n % p\n    \ndef modinv(n: int, p: int):\n    \"\"\"Return modulo n modulo p.\n    >>> modinv(3, 5)\n    3\n    >>> modinv(1101, 101)\n    2\n    >>> modinv(0, 101)\n    1\n    >>> modinv(3, 11)\n    8\n    >>> modinv(100, 101)\n    1\n    \"\"\"\n    return pow(n, modp(n, p), p)\n    \ndef gcd(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd(7, 4)\n    3\n    >>> gcd(20, 5)\n    5\n    >>> gcd(15, 5)\n    5\n    \"\"\"\n    # make sure we are not in a loop\n    assert a > 0, \"a must be positive\"\n    # make sure we are in the correct modulus range\n    assert b > 0, \"b must be positive\"\n    # make sure we are not dividing by 0\n    assert a % b == 0, \"a and b must be divisible by both\"\n    # return\n    return a // b\n    \ndef modinv(a: int, m: int) -> int:\n    \"\"\"Return modulo m of a modulo m^m mod m.\n    >>> modinv(5, 10)\n    9\n    >>> modinv(10, 10)\n    5\n    \"\"\"\n    # make sure we are not in a loop\n    assert a > 0, \"a must be positive\"\n    # make sure we are in the correct modulus range\n    assert m > 0, \"m must be positive\"\n    # make sure we are not dividing by 0\n    assert m % a == 0, \"m must be a positive divisor of a\"\n    # return\n    return modp(a, modinv(m, a))\n    \ndef gcd2(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd2(8, 6)\n    4\n    >>> gcd2(20, 5)\n    5\n    \"\"\"\n    # make sure we are not in a loop\n    assert a > 0, \"a must be positive\"\n    # make sure we are in the correct modulus range\n    assert b > 0, \"b must be positive\"\n    # make sure we are not dividing by 0\n    assert a % b == 0, \"a and b must be divisible by both\"\n    # return\n    return gcd(a, b)\n    \ndef modinv2(a: int, m: int) -> int:\n    \"\"\"Return modulo m of a modulo m^m mod m.\n    >>> modinv2(5, 10)\n    9\n    >>> modinv2(10, 10)\n    5\n    \"\"\"\n    # make sure we are not in a loop\n    assert a > 0, \"a must be positive\"\n    # make sure we are in the correct modulus range\n    assert m > 0, \"m must be positive\"\n    # make sure we are not dividing by 0\n    assert m % a == 0, \"m must be a positive divisor of a\"\n    # return\n    return modp(a, modinv(m, a))\n    \ndef gcd2modm(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of a and b.\n    >>> gcd2modm(8, 6)\n    4\n    >>> gcd2modm(20, 5)\n    5\n    \"\"\"\n    # make sure we are not in a loop\n    assert a > 0, \"a must be positive\"\n    # make sure we are in the correct modulus range\n    assert b > 0, \"b must be positive\"\n    # make sure we are not dividing by 0\n    assert a % b == 0, \"a and b must be divisible by both\"\n    # return\n    return gcd(a, b)\n",
        "num_ids": 1024
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5) - ord(\"a\")) % 26) for ch in s])",
        "num_ids": 31
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n",
        "num_ids": 30
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = ['a','e','i','o','u']\n    string = \"\"\n    for character in text:\n        if character not in vowels:\n            string += character\n    return string\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for word in text.split():\n        for vowel in vowels:\n            word = word.replace(vowel, '')\n    return word\n",
        "num_ids": 72
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    text = text.lower()\n    text = text.replace(\" \",\"\")\n    return \"\".join([vowels[i] if i not in vowels else \"\" for i in text])\n",
        "num_ids": 57
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.split(' ')\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    res = []\n    for word in text:\n        if word[0] in vowels:\n            res.append(word[1:])\n        else:\n            res.append(word[1:])\n    return''.join(res)",
        "num_ids": 103
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    new_text = \"\"\n    for i in range(len(text)):\n        if text[i].lower() not in ['a','e','i','o','u']:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 59
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    text = text.replace('\\n','')\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n",
        "num_ids": 59
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # if text is empty, return ''.\n    if text == '':\n        return ''\n    \n    # if not, split text into a list\n    else:\n        text_list = text.split()\n",
        "num_ids": 50
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [letter for letter in text if letter not in VOWELS]\n    \n",
        "num_ids": 20
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = 'aeiouAEIOU'\n    for char in text:\n        if char not in vowels:\n            text = text.replace(char, '')\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: modify so that this function returns True for numbers below t\n    if l:\n        for num in l:\n            if num < t:\n                return False\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all([i<= t for i in l])\n",
        "num_ids": 15
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for n in l:\n        if n < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all([i < t for i in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for n in l:\n        if n < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = 0\n    for i in l:\n        s += i\n        if s < t:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if t >= sum(l):\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    print(f\"{x} + {y} = {x+y}\")\n",
        "num_ids": 21
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s0 == s1 or s0 in s1\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    return s0 == s1\n",
        "num_ids": 11
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return s0[0] == s1[0] and s0[1:3] == s1[1:3]\n",
        "num_ids": 31
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    if s0!= s1:\n        return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for char in s0:\n        if char in s1:\n            return True\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #if all(s0[i] == s1[i] for i in range(len(s1))):\n    #    return True\n    #return False\n    # if any(s0[i]!= s1[i] for i in range(len(s1))):\n    #     return False\n    # return True\n",
        "num_ids": 80
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 39
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #s0 = str(s0)\n    #s1 = str(s1)\n    i = 0\n    while i < len(s0) and i < len(s1):\n        if s0[i]!= s1[i]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    \n    \n    fibo = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n):\n            fibo = fib + fib\n        return fibo",
        "num_ids": 75
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert n >= 1\n    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 1:\n        raise ValueError(f\"n must be greater than 0\")\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 54
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert n > 0, \"0 < n\"\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert 0 < n < 1000, \"Parameter must be between 0 and 1000.\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert n >= 0\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    cache = {0:1, 1:1}\n    for _ in range(2,n+1):\n        cache[1] = cache[0] + cache[1]\n        cache[0] = cache[1]\n    return cache[n",
        "num_ids": 59
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i = 1\n    if n == 1 or n == 2:\n        return 1\n    else:\n        while i <= n:\n            a = b = 1\n            for _ in range(i):\n                a, b = b, a + b\n            i += 1\n        return b\n",
        "num_ids": 68
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)",
        "num_ids": 35
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)",
        "num_ids": 39
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif bracket == \">\" or bracket == \">>\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for char in brackets:\n        if char == \"<\":\n            continue\n        if char == \">\":\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(bracket in [\"<\", \">\"] for bracket in brackets)\n",
        "num_ids": 20
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return all(brackets[i] in ['<', '>'] for i in range(len(brackets)))\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    bracket_list = list(brackets)\n    for bracket in bracket_list:\n        if bracket!= '<' and bracket!= '>':\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if brackets[0] == \"<\":\n        for bracket in brackets:\n            if bracket == \">\":\n                return True\n            else:\n                return False\n        \n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(len(brackets)):\n        if brackets[i]!= \">\":\n            return False\n    return True\n    \ndef solve(brackets: str):\n    \"\"\" solve is a string of \"(\" and \")\"\n    return the number of parentheses needed to find a matching closing bracket.\n    \n    >>> solve(\"<\")\n    2\n    >>> solve(\">\")\n    1\n    \"\"\"\n    answer = 0\n    for i in range(len(brackets)):\n        if correct_bracketing(brackets[:i + 1]) and correct_bracketing(brackets[i + 1:]):\n            answer += 1\n    return answer\n",
        "num_ids": 157
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for bracket in brackets:\n        if bracket!= \"<\" and bracket!= \">\" and bracket!= \"<>\":\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for bracket in brackets:\n        if bracket!= \"<\" and bracket!= \">\":\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not l: return True\n    # Check if any element is increasing\n    for i in range(len(l)-1):\n        if l[i+1] < l[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l.sort()\n    return len(l)==1\n    \ndef roman(n: int):\n    \"\"\"Return True if n is romanian\n    >>> roman(15)\n    True\n    >>> roman(5)\n    False\n    >>> roman(9)\n    False\n    >>> roman(121)\n    True\n    >>> roman(5000)\n    False\n    \"\"\"\n    \n    for i in range(len(n)):\n        if n[i]=='M':\n            if i+1==len(n):\n                return False\n            if n[i+1]=='D':\n                return True\n        elif n[i]=='C':\n            if i+1==len(n):\n                return False\n            if n[i+1]=='D':\n                return True\n    return False\n",
        "num_ids": 201
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l.sort()\n    return l[1] - l[0] == l[-1] - l[0]\n",
        "num_ids": 30
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(list(map(lambda x: x >= 0, l)) + list(map(lambda x: x <= 0, l)))\n",
        "num_ids": 33
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l.sort()\n    return l[-1] - l[0] <= 1\n",
        "num_ids": 22
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(l) == sorted(l, reverse=True)\n",
        "num_ids": 17
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for element in l:\n        if element < 0:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return l[0] < l[1]\n    else:\n        return (l[0] < l[1]) or (l[1] < l[2])\n",
        "num_ids": 66
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l.count(1) == len(l):\n        return True\n    elif l[0] >= l[1]:\n        return False\n    else:\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return l[-1] >= l[0]\n",
        "num_ids": 14
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = []\n    for i in range(len(l1)):\n        if l1[i] not in l:\n            l.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] not in l:\n            l.append(l2[i])\n    return sorted(l)\n",
        "num_ids": 85
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    if l1 == l2:\n        return l1\n    if l1[0] == l2[0]:\n        return [l1[0]] + common(l1[1:], l2[1:])\n    if l1[0] in l2:\n        return [l1[0]] + common(l1[1:], l2)\n    return [l1[0]] + common(l1[1:], l2)\n",
        "num_ids": 127
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [a for a in l1 if a in l2]\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(set(l1) & set(l2)",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    common_list = []\n    for item in l1:\n        if item in l2:\n            common_list.append(item)\n    return common_list\n    \n    \ndef in_string(str1: str, str2: str) -> bool:\n    \"\"\"Check if the strings contain any of the characters in the given string.\n    >>> in_string(\"foo\", \"bar\")\n    True\n",
        "num_ids": 95
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [l for l in l1 if l in l2 and l not in set(l2)]",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in l1 if x in l2]\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        k = 2\n        while k * k <= n:\n            if n % k == 0:\n                n //= k\n                continue\n            else:\n                k += 1\n    return n\n",
        "num_ids": 73
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    while n % 2 == 0:\n        n = n // 2\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 2\n    while i < int(n / i):\n        if n % i == 0:\n            n /= i\n        else:\n            i += 1\n    return int(n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n_count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n            n_count += 1\n        else:\n            n = n // 2\n    return n_count",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 2\n    while i <= n / i:\n        i = i + 1\n    return i - 1\n",
        "num_ids": 28
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert n > 0\n    factor = 1\n    while n % factor == 0:\n        factor += 1\n    return factor\n",
        "num_ids": 30
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Set up a series of numbers and check if they are prime.\n    nums = [2]\n    while n % 2 == 0:\n        nums.append(3)\n        n = n // 2\n    for i in range(3, n):\n        while n % i == 0:\n            nums.append(i)\n            n = n // i\n",
        "num_ids": 86
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    k = 2\n    while k * k <= n:\n        if n % k == 0:\n            n = n / k\n        else:\n            k += 1\n    return k\n",
        "num_ids": 44
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 2:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 2\n    return n\n",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # (1) compute the largest prime factor of n\n    factor = 1\n    while n % factor == 0:\n        factor += 1\n    # (2) compute the smallest prime factor of n\n    for factor in range(2, int(math.sqrt(n) + 1)):\n        if n % factor == 0:\n            return factor\n    return None\n",
        "num_ids": 85
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    while n!= 0:\n        s += n\n        n -= 1\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n + sum_to_n(n - 1)\n",
        "num_ids": 16
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 1\n    for i in range(n):\n        result = result + i\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n + sum_to_n(n - 1)\n",
        "num_ids": 16
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n > 0:\n        sum = 0\n        for i in range(1, n+1):\n            sum = sum + i\n        return sum\n    else:\n        raise ValueError(f\"n must be a positive integer greater than 0.\")",
        "num_ids": 58
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = 0\n    while n!= 0:\n        s += n % 10\n        n = n // 10\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 1\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 1\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def sum_to_n_(n):\n        return sum(range(n+1))\n    return sum_to_n_(n)\n",
        "num_ids": 34
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    brackets = list(brackets)\n",
        "num_ids": 11
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(True if c == \"(\" or c == \")\" else False for c in brackets)\n",
        "num_ids": 24
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # `brackets` is a string of \"(\" and \")\".\n",
        "num_ids": 18
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    brackets = brackets.replace(\"(\", \" ( \")\n    brackets = brackets.replace(\")\", \" ) \")\n    return True if brackets.count(\"(\") and brackets.count(\")\") == 0 else False\n",
        "num_ids": 53
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # make a dictionary of a mapping of the opening and closing brackets\n    # having a value: the substring in the brackets\n    #\n    # for example {\"(\": \")\", \"{\": \"}\", \"{[\": \"[\", \"]\": \"]\"}\n    opening = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\", \"{[\": \"}\" }\n    for bracket in brackets:\n        if bracket in opening:\n            # if the current bracket is valid, then replace the opening bracket with a closing bracket\n            # and then delete the brackets from the dictionary\n            if bracket in opening.keys():\n                current = opening.pop(bracket)\n                opening[current] = closing\n                closing = \"\"\n            else:\n                # if no opening bracket exists, then the closing bracket cannot be replaced with a closing bracket\n                closing = bracket\n    # print(opening)\n    # print(closing)\n    return not (not bool(opening) or not bool(closing))\n",
        "num_ids": 223
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # create a list of all the possible closing brackets\n    open_brackets = [\"(\", \"[\", \"{\"]\n    # check if all the brackets are open or not\n    for bracket in brackets:\n        if bracket not in open_brackets:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    bracket_map = {\n        \"(\": \")\",\n        \")\": \"(\",\n        \"[\": \"]\",\n        \"]\": \"]\"\n    }\n    for bracket in brackets:\n        if bracket in bracket_map:\n            return False\n    return True\n    \ndef check_valid_parentheses(expr: str):\n    if correct_bracketing(expr):\n        return True\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    current_index = 0\n    correct_brackets = True\n    while current_index < len(brackets):\n        # search for an opening bracket, if not a closing bracket, then check if it has a closing bracket\n        opening_bracket = brackets[current_index]\n        if opening_bracket == \"(\":\n            # if it has a closing bracket, then the brackets array is exhausted and a correct bracket is found\n            if brackets[current_index + 1] == \")\":\n                # if the brackets array is exhausted, then the brackets array becomes empty and there is no correct bracket\n                correct_brackets = False\n            # the bracket is not in the array, and it can be in the brackets array\n            else:\n                # if the closing bracket is in the brackets array, then the brackets array is exhausted and there is no correct bracket\n                correct_brackets = False\n            current_index += 1\n        elif brackets[current_index] == \")\":\n            # if the brackets array is exhausted, then the brackets array becomes empty and there is no correct bracket\n            correct_brackets = False\n            current_index += 1\n        else:\n            # if the brackets array is exhausted, then the brackets array becomes empty and there is no correct bracket\n            correct_brackets = False\n    return correct_brackets\n",
        "num_ids": 296
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not brackets:\n        return True\n    return brackets[0] == brackets[-1] and correct_bracketing(brackets[1:-1])\n",
        "num_ids": 38
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x[1] for x in zip(xs[:-1], xs[1:])]\n",
        "num_ids": 26
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(xs)!= list:\n        xs = [xs]\n    return [x*derivative(xs[1:]) for x in xs[1:]]\n",
        "num_ids": 42
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(len(xs)):\n        sum += xs[i] * (i + 1)\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x[1] for x in xs[1:]]\n",
        "num_ids": 18
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(map(lambda x: x[1] * x[0] + x[2] * x[0]**2 + x[3] * x[0]**3, xs))\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x[1] for x in reversed(xs)]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [x[1] * x[0] for x in zip(xs, xs[1:], xs[2:])]\n",
        "num_ids": 34
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [a*(1-b) for a,b in zip(xs,xs[1:])]\n",
        "num_ids": 27
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    d = []\n    # add constant\n    for i in range(len(xs)):\n        d.append(xs[i] + xs[i+1])\n    return d\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [1] + [x * i for i, x in enumerate(xs[1:])] + [1]\n",
        "num_ids": 30
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (0, 1) if n == 0 else (0, 1, 1)\n",
        "num_ids": 21
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"\"\"\n    Initialize the result of fib(0) = 0 and fib(1) = 1 to be returned.\n    \"\"\"\n    a = 0\n    b = 1\n    \"\"\"\n    The FibFib number sequence is defined by (Fib(n) - Fib(n-1) + Fib(n-2) + Fib(n-3)).\n    \"\"\"\n    for i in range(n):\n        \"\"\"\n        The Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3).\n        \"\"\"\n        c = a + b\n        \"\"\"\n        The (n-1)-th element of the Fib(n) = (Fib(n-1) + Fib(n-2) + Fib(n-3)).\n        \"\"\"\n        a = b\n        \"\"\"\n        The (n-2)-th element of the Fib(n) = (Fib(n-1) + Fib(n-2) + Fib(n-3)).\n        \"\"\"\n        b = c\n    \"\"\"\n    Compute the result of Fib(n) = Fib(n-1) + Fib(n-2) + Fib(n-3).\n    \"\"\"\n    return b",
        "num_ids": 276
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n==0:\n        return 0\n    elif n==1:\n        return 0\n    elif n==2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    return fibfibf(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def fibfib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return fibfib(n-2) + fibfib(n-1) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n<=0:\n        raise ValueError('n must be positive')\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n",
        "num_ids": 76
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    pass\n",
        "num_ids": 72
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n < 2:\n        return 1\n    \n    # fib(0) = 0, fib(1) = 1\n    temp = fibfib(n-1)\n    # fib(2) = fib(1) + fib(2)\n    result = fibfib(n-2) + temp + fibfib(n-3)\n    return result\n",
        "num_ids": 137
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Here is a helper function.\n    # This function counts the number of vowels in a string.\n    count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # add your code here\n    count=0\n    for i in s:\n        if i=='y':\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            if i not in 'y':\n                count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels_count = 0\n    for c in s:\n        if c == 'y':\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count=0\n    for char in s:\n        if char==\"y\":\n            count=count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in s:\n        if i in ('a', 'e', 'i', 'o', 'u'):\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels_count = 0\n    for char in s:\n        if char in 'aeiouy':\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(set(s).intersection(set('AEIOU')))\n",
        "num_ids": 20
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = ['a','e','i','o','u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(str(digit) for digit in x[shift:] + x[:shift])",
        "num_ids": 24
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    else:\n        if shift < len(str(x)):\n            return str(x)[-shift:]\n        else:\n            return str(x)[-shift:] + str(x)[:len(str(x))-shift]",
        "num_ids": 74
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert shift < len(x), \"shift must be less than or equal to the length of x\"\n    \n    shifted = []\n    for i in range(shift):\n        shifted.append(x[-1])\n        x = x[:-1]\n    \n    shifted.append(x[-1])\n    return ''.join(shifted)\n",
        "num_ids": 86
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    shift = abs(shift)\n    return f\"{x // 10 + (shift % 10) * '0'}{x % 10}\".zfill(shift)",
        "num_ids": 40
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if shift < len(str(x)):\n        return str(x)[-shift:] + str(x)[:-shift]\n    else:\n        return str(x)[-shift:]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return str(int(x) + shift)\n",
        "num_ids": 13
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([(x % 10) + shift] * (x > 10))\n",
        "num_ids": 22
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    shift = int(shift)\n    shift = shift % len(x)\n    return x[:-shift] + x[shift:]\n",
        "num_ids": 32
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x[shift:] + x[:shift]\n",
        "num_ids": 14
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    reversed_string = ''\n    shift_digits = shift\n    while shift_digits > 0:\n        reversed_string = str(x % 10) + reversed_string\n        x = x // 10\n        shift_digits -= 1\n    reversed_string = reversed_string[::-1]\n    return reversed_string\n",
        "num_ids": 83
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = s.upper()\n    sum = 0\n    for c in s:\n        if c in 'abcdefghijklmnopqrstuvwxyz':\n            sum += ord(c)\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([int(s[i]) for i in range(len(s)) if (s[i].isdigit() and len(s) > i)])",
        "num_ids": 39
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in s:\n        sum += ord(i) - 64\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum([ord(x) for x in s if ord(x) >= 65 and ord(x) <= 90])\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = list(s)\n    a = 0\n    for i in s:\n        a += ord(i)\n    return a",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n    pass\n",
        "num_ids": 9
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = s.upper()\n    digit = [int(i) for i in s]\n    return sum(digit",
        "num_ids": 28
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if s == \"\":\n        return 0\n    return sum(ord(c) for c in s.upper())\n",
        "num_ids": 28
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    apples = fruit_num(s,n,\"apples\")\n    oranges = fruit_num(s,n,\"oranges\")\n    mango = fruit_num(s,n,\"mango\")\n    \n    if apples<oranges<mango:\n        return(n-apples-oranges-mango)\n    elif oranges<apples<mango:\n        return(n-oranges-apples-mango)\n    else:\n        return(n-apples-mango)\n",
        "num_ids": 120
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #TODO: Create a function that returns the total number of mango fruits in the basket.\n    \"\"\"\n    for i in range(n):\n        if s[i] == '0':\n            return 0\n        elif s[i] == '1':\n            return 2\n        elif s[i] == '2':\n            return 95\n        elif s[i] == '3':\n            return 19\n        else:\n            return -1\n    \"\"\"\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    \"\"\"\n    def fruit_distribution(s,n):\n        #TODO: Fill in the missing code here\n        n = len(s)\n        fruits = 0\n        for i in range(n):\n            if s[i] == '0':\n                fruits += 0\n            elif s[i] == '1':\n                fruits += 2\n            elif s[i] == '2':\n                fruits += 95\n            elif s[i] == '3':\n                fruits += 19\n            else:\n                fruits += -1\n        return fruits\n    \"\"\"\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    \"\"\"\n    def fruit_distribution(s,n):\n        #TODO: Fill in the missing code here\n        n = len(s)\n        fruits = 0\n        for i in range(n):\n            if s[i] == '0':\n                fruits += 0\n            elif s[i] == '1':\n                fruits += 2\n            elif s[i] == '2':\n                fruits += 95\n            elif s[i] == '3':\n                fruits += 19\n            else:\n                fruits += -1\n        return fruits\n    \"\"\"\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that returns the total number of the fruits in the basket.\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    \"\"\"\n    def fruit_distribution(s,n):\n        #TODO: Fill in the missing code here\n        n = len(s)\n        fruits = 0\n        for i in range(n):\n            if s[i] == '0':\n                fruits += 0\n            elif s[i] == '1':\n                fruits += 2\n            elif s[i] == '2':\n                fruits += 95\n            elif s[i] == '3':\n                fruits += 19\n            else:\n                fruits += -1\n        return fruits\n    \"\"\"\n    #TODO: Create a function that returns the total number of the oranges in the basket.\n    #TODO: Create a function that returns the total number of the apples in the basket.\n    #TODO: Create a function that return",
        "num_ids": 1025
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s == \"\":\n        return \"0\"\n    elif n == \"\":\n        return \"0\"\n    elif n == \"0\":\n        return s[0]\n    elif n == \"1\":\n        return s[1]\n    elif n == \"2\":\n        return s[2]\n    elif n == \"3\":\n        return s[3]\n    elif n == \"4\":\n        return s[4]\n    elif n == \"5\":\n        return s[5]\n    elif n == \"6\":\n        return s[6]\n    elif n == \"7\":\n        return s[7]\n    elif n == \"8\":\n        return s[8]\n    elif n == \"9\":\n        return s[9]\n    else:\n        if s[0] == \"1\" or s[0] == \"2\":\n            return s[0]\n        elif s[0] == \"3\" or s[0] == \"4\":\n            return s[0]\n        else:\n            return s[0]\n",
        "num_ids": 258
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    basket = [int(x) for x in s.split()]\n    return sum(basket[i] for i in range(len(basket)) if basket[i] <= n)\n    \n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    fruit_apples = 0\n    fruit_orange = 0\n    fruit_mango = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            fruit_apples += 1\n        elif s[i] == 'o':\n            fruit_orange += 1\n        elif s[i] =='m':\n            fruit_mango += 1\n    return fruit_apples,fruit_orange,fruit_mango\n",
        "num_ids": 110
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s_n=list(s)\n    return(len(s_n))\n",
        "num_ids": 21
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x = [0,0,0,0,0]\n    for i in s:\n        if i=='a':\n            x[0]+=1\n        elif i=='c':\n            x[1]+=1\n        elif i=='g':\n            x[2]+=1\n        elif i=='m':\n            x[3]+=1\n    return sum(x)\ndef counting(s,n):\n    \"\"\"\n    Given a string s, return the number of distinct ways to arrange the fruits in the basket so \n    that the total number of fruits are n.\n    For examble:\n    counting(\"2 apples and 3 oranges\",15) -> 3 - 0 - 1 = 2\n    counting(\"3 apples and 2 oranges\",15) -> 3 - 3 - 1 = 3\n    counting(\"5 apples and 2 oranges\",4) -> 5 - 5 - 2 = 10\n    counting(\"6 apples and 3 oranges\",20) -> 6 - 6 - 3 = 7\n    counting(\"0 apples and 1 oranges\",3) -> 0 - 0 - 1 = 1\n    counting(\"0 apples and 1 oranges\",4) -> 0 - 1 - 0 = 1\n    counting(\"0 apples and 2 oranges\",10) -> 0 - 0 - 2 = 4\n    \"\"\"\n    if n==0:\n        return 1\n    if n==1:\n        return fruit_distribution(s,n)\n    return counting(s[:-1],n-1)+counting(s[:-1]+'s',n-1)\ndef tree(s,n):\n    \"\"\"\n    Given the string s and an integer n, return the total number of trees in the \n    basket such that the number of apples and oranges cannot be divided into n \n    trees.\n    For examble:\n    tree(\"2 apples and 3 oranges\",4) -> 2 - 0 - 2 = 1\n    tree(\"2 apples and 3 oranges\",5) -> 2 - 2 - 2 = 4\n    tree(\"1 apples and 1 oranges\",4) -> 2 - 0 - 1 = 0\n    tree(\"1 apples and 1 oranges\",5) -> 2 - 0 - 1 = 1\n    tree(\"1 apples and 2 oranges\",4) -> 2 - 0 - 2 = 1\n    tree(\"1 apples and 3 oranges\",5) -> 2 - 0 - 3 = 2\n    \"\"\"\n    x = int(n/2)\n    y = int(n/2)\n    if n%2==1:\n        y=y+1\n        x=x+1\n    return (fruit_distribution(s,y) - fruit_distribution(s,x))*2\ndef vowel_pattern(s):\n    \"\"\"\n    Given a string s, return the number of distinct words in the basket such that the \n    total number of vowels in a word is exactly x.\n    For examble:\n    vowel_pattern(\"eeeeeelloooooooo\") -> 5\n    vowel_pattern(\"xoxxoooooo\") -> 4\n    \"\"\"\n    x = count(s)\n    for i in range(len(s)-1,-1,-1):\n        if s[i]=='o':\n            x -= 1\n        if s[i]=='x':\n            x -= 2\n        if s[i]=='e':\n            x -= 4\n        if s[i]=='o':\n            x -= 2\n    return x\ndef count(s):\n    \"\"\"\n    Given a string s, return the number of distinct words in the basket such that \n    the total number of distinct vowels in a word is exactly x.\n    For examble:\n    count(\"aaaaaa\") -> 2\n    count(\"eeeee\") -> 1\n    count(\"aaaa\") -> 1\n    \"\"\"\n    x = 0\n    for i in s:\n        if i=='a':\n            x+=1\n        if i=='c':\n            x+=1\n        if i=='g':\n            x+=1\n        if i=='m':\n            x+=1\n    return x\ndef find_order(s):\n    \"\"\"\n    Given a string s, return the number of distinct words in the basket such that \n    the total number of distinct vowels in a word is exactly x.\n    For examble:\n    find_order(\"aaac\") -> 1\n    find_order(\"xaa\") -> 2\n    \"\"\"\n    x = count(s)\n    for i in rang",
        "num_ids": 1022
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(n):\n        result += fruit_apples(s[i])\n        result += fruit_oranges(s[i])\n        result += fruit_mango(s[i])\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    c = len(s)\n    numer = sum(map(int,s.split()))\n    if numer%n==0:\n        return(int(numer//n))\n    else:\n        return -1\n    \n",
        "num_ids": 56
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    apples = s.count('a')\n    n -= apples\n    oranges = s.count('o')\n    n -= oranges\n    \n    return (apples * 2) + (oranges * 3)\n    \n    \n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    def isEven(num):\n        return num % 2 == 0\n",
        "num_ids": 19
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    arr = list(map(int, arr))\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            arr[index] = arr[index]//2\n            index = index + 1\n        else:\n            index = index + 1\n    return arr\n",
        "num_ids": 74
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def get_even_index(n):\n        if n % 2 == 0:\n            return int(n/2)\n        else:\n            return int((n+1)/2)\n",
        "num_ids": 45
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    if not arr:\n        return []\n    else:\n        arr = sorted(arr)\n        if arr[-1] % 2 == 0:\n            return [arr[-1], arr.index(arr[-1])]\n        else:\n            return [arr[0], arr.index(arr[0])]\n",
        "num_ids": 97
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def inorder(root):\n        if root == None:\n            return\n        inorder(root.left)\n        yield root.val\n        inorder(root.right)\n",
        "num_ids": 44
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: x % 2, reverse=True)[0]\n",
        "num_ids": 23
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    \n    start, end = 0, len(arr) - 1\n",
        "num_ids": 27
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def plucked(numbers):\n        def find(nums):\n            smallest = max(nums)\n            if len(nums) == 1:\n                return [smallest, -1]\n            if smallest % 2 == 0:\n                return [smallest, -1]\n            if smallest % 2 == 1:\n                return [smallest, find(nums[1:])[1]]\n            for i in range(1, len(nums)):\n                if nums[i] % 2 == 0:\n                    return [nums[i - 1], find(nums[:i])[1]]\n                if nums[i] % 2 == 1:\n                    return [nums[i - 1], find(nums[:i])[1]]\n",
        "num_ids": 180
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if len(arr) == 0:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: replace this with a faster version of this question.\n    return max(set(lst),key=lst.count)\n",
        "num_ids": 34
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Write your code here.\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    min_num = -1\n    for num in freq.values():\n        if num > 0:\n            if min_num == -1 or min_num > num:\n                min_num = num\n    return min_num",
        "num_ids": 109
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def is_greater_than_zero(n):\n        if n > 0:\n            return True\n        return False\n    \n    n = len(lst)\n    # get all the numbers in the list\n    num_list = []\n    for i in lst:\n        num_list.append(i)\n    \n    # determine the frequency of each number\n    # num_list.sort()\n    # num_list.sort(key=lambda x: x * -1)\n    \n    num_list = sorted(num_list)\n    for i in range(0, n):\n        if not is_greater_than_zero(num_list[i]):\n            return num_list[i]\n    \n    return -1\n",
        "num_ids": 176
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    def getFrequency(integer):\n        \"\"\"\n        :type integer: int\n        :rtype: int\n        \"\"\"\n        \n        frequency = 0\n        for i in lst:\n            if i > integer:\n                frequency += 1\n        return frequency\n        \n    \n    max = -1\n    for integer in lst:\n        frequency = getFrequency(integer)\n        if frequency > 0 and frequency > max:\n            max = frequency\n            \n    return max\n",
        "num_ids": 113
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    my_lst = []\n    for i in lst:\n        my_lst.append(i)\n    my_lst.sort()\n    my_lst.sort(reverse=True)\n    return my_lst[0]\n",
        "num_ids": 60
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    m = max(lst)\n    for i in lst:\n        if i > m:\n            m = i\n",
        "num_ids": 30
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst == []:\n        return -1\n    \n    lst.sort()\n    res = lst[0]\n    if lst[0] == 0:\n        return 0\n    for i in range(1,len(lst)):\n        if lst[i] <= 0:\n            res = max(res,i)\n            break\n    return res\n    \ndef main():\n    '''\n    driver program\n    '''\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([5, 5, 4, 4, 4]))\n    print(search([0, 2, 2, 3, 3, 3, 4, 4, 4]))\n",
        "num_ids": 169
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    result = -1\n    n = len(lst)\n    for i in range(n):\n        if lst[i] >= 0:\n            result = max(result, lst[i])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Step 1: convert lst to int\n    lst = [int(x) for x in str(lst)]\n    lst.sort()\n    max_num = -1\n    freq_num = 0\n    for i in lst:\n        if i > max_num:\n            max_num = i\n            freq_num = 1\n        elif i == max_num:\n            freq_num += 1\n    if freq_num > 1:\n        return -1\n    return max_num\n",
        "num_ids": 124
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Write your code here\n    \n    list = sorted(lst)\n    if len(list) == 0:\n        return []\n    \n    result = []\n    \n    while len(list)!= 0:\n        result.append(list[0])\n        list = list[1:]\n        \n    result.append(list[0])\n    \n    for i in range(1, len(result)):\n        result[i] = result[i - 1]\n    \n    return result",
        "num_ids": 119
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: convert to list, then sort, then return\n    # return lst\n    lst.sort()\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(lst)\n",
        "num_ids": 9
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    strange_sort = []\n    for i in lst:\n        # Sort values until the first is lesser than the last\n        while i < lst[-1]:\n            j = lst.index(i)\n            # Sort all the elements up to and including this element\n            lst[j] = lst[j+1]\n            # Sort the elements in the middle\n            lst[j+1] = lst[j+2]\n            # Sort the elements in the end\n            lst[j+2] = i\n        strange_sort.append(i)\n    return strange_sort\n",
        "num_ids": 143
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst == []:\n        return []\n    else:\n        min_value = lst[0]\n        min_index = 0\n        max_value = lst[0]\n        max_index = 0\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    lst = sorted(lst, reverse=True)\n    return lst\n",
        "num_ids": 30
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(lst, key=lambda x: -x",
        "num_ids": 15
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n    if lst:\n        return [lst[0]] + strange_sort_list(lst[1:])\n    else:\n        return []\n",
        "num_ids": 44
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if lst == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort()\n    return lst\n",
        "num_ids": 13
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not is_valid_triangle(a, b, c):\n        return 'Triangle does not form a valid triangle'\n    else:\n        return round(triangle_area_with_area(a, b, c) / 2, 2)\n",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    try:\n        s = (a + b + c) / 2\n        if (s * (s - a) * (s - b) * (s - c)) % 1 == 0:\n            return round(s * (s - a) * (s - b) * (s - c))\n        else:\n            return -1\n    except ZeroDivisionError:\n        return -1\n",
        "num_ids": 92
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == b or b == c or c == a:\n        return 0.0\n    if a + b > c and a + c > b and b + c > a:\n        return ((a * b) / 2)\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a == b and b == c:\n        return a*b*c/2\n    elif a == b or b == c or a == c:\n        return 0\n    else:\n        s = (a + b + c)/2\n        area = s*(s-a)*(s-b)*(s-c)\n        if area > 0:\n            return round(area, 2)\n        else:\n            return -1\n",
        "num_ids": 104
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x1 = a / 2\n    x2 = b / 2\n    x3 = c / 2\n    if x2 == x3:\n        if x1 == x2:\n            if a == x2:\n                return math.sqrt(x1 * x1)\n            else:\n                return -1\n        elif x1 == x3:\n            if b == x3:\n                return math.sqrt(x1 * x1)\n            else:\n                return -1\n        elif x1 == x3:\n            if c == x3:\n                return math.sqrt(x1 * x1)\n            else:\n                return -1\n        else:\n            return -1\n    elif x1 == x3:\n        if b == x3:\n            return math.sqrt(x1 * x1)\n        else:\n            return -1\n    elif x1 == x2:\n        if c == x2:\n            return math.sqrt(x1 * x1)\n        else:\n            return -1\n    elif x1 == x1:\n        return math.sqrt(x1 * x1)\n    else:\n        return -1\n",
        "num_ids": 280
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if triangle_valid(a, b, c):\n        return round(((a * b) / 2) ** 2)\n    else:\n        return -1\n",
        "num_ids": 39
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        if ((a + b) > c and (a + c) > b and (b + c) > a) and \\\n        (b > a and b > c and c > a and c > b):\n            return round(((a + b) + c + b + c) / 2, 2)\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 110
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_valid(a, b, c):\n        return a + b > c and b + c > a and c + a > b\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    a = float(a)\n    b = float(b)\n    c = float(c)\n    \n    if a + b > c and a + c > b and b + c > a:\n        if a*b == c*d and a*c == b*d and b*c == a*d:\n            return f\"{round(a*d/2, 2)} {round(b*d/2, 2)} {round(c*d/2, 2)} {round(a*d/2, 2)} {round(b*d/2, 2)} {round(c*d/2, 2)}\"\n        else:\n            return \"Invalid Triangle\"\n    else:\n        return \"Invalid Triangle\"\n    ",
        "num_ids": 172
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a + b > c:\n        return (a + b + c) / 2\n    elif a + c > b:\n        return (a + c + b) / 2\n    elif a + b > c:\n        return (a + b + c) / 2\n    else:\n        return -1\n",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(q)<=1:\n        return False\n    if sum(q)<=w:\n        return True\n    if q[0]==q[-1]:\n        return will_it_fly(q[1:-1],w-q[0])\n    return will_it_fly(q[1:],w)\n",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not q:\n        return False\n    if len(q) == 1:\n        if q[0] <= w:\n            return True\n        else:\n            return False\n    return will_it_fly(q[1:], w - q[0]) or will_it_fly(q[1:], w)\n",
        "num_ids": 77
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #if q is a palindromic list, return True.\n    if len(q)>1 and sum(q)==len(q):\n        return True\n    else:\n        for i in range(len(q)):\n            if q[i]>=w:\n                return False\n        return True",
        "num_ids": 74
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if q == None or w == None: return False\n    return is_balanced(q, w) and w >= find_maximum_balanced_weight(q)\n",
        "num_ids": 38
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    q = sorted(q)\n    for i in q:\n        if i + i == w:\n            return True\n        else:\n            return False\n",
        "num_ids": 37
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    balanced = [i for i in q if sum(i) <= w]\n    return len(balanced) == len(q) and sum(balanced) <= w\n",
        "num_ids": 38
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_palindrome(i):\n        '''\n        Given a list of numbers, check if the list has all numbers in it.\n",
        "num_ids": 34
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # initialize a list of the values of the elements of q\n    q = copy.deepcopy(q)\n    # initialize a list of the maximum possible weights\n    max_weights = [0]*len(q)\n    for i in range(len(q)):\n        # update the maximum possible weight\n        max_weights[i] = max(q[i])\n        # if the sum of the elements of the element q is less than the maximum possible weight, it's balanced\n        if q[i]<max_weights[i]:\n            return False\n    # if all the elements of q are balanced, return True\n    if max_weights==[0]:\n        return True\n    # else return False\n    return False\n",
        "num_ids": 166
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(w) == 0:\n        return False\n    \n    if w == []:\n        return False\n    \n    if w[0] == w[-1]:\n        return False\n    \n    if w[0] < w[-1]:\n        return will_it_fly(q[1:-1], w[1:-1]) or will_it_fly(q[1:], w[1:])\n    else:\n        return will_it_fly(q[:-1], w[:-1])\n        \n    \n",
        "num_ids": 127
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def check(i):\n        for j in range(i, len(arr)):\n            if arr[j]!= arr[i] or arr[j] == 0:\n                return False\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    smallest_change_arr = arr.copy()\n    smallest_change_length = len(smallest_change_arr)\n    current_length = 1\n",
        "num_ids": 45
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Step 1: Calculate the minimum number of changes to change the number of elements.\n    # The minimum number of changes is the number of elements that need to be changed.\n    # The number of changes is the difference between the number of elements that need to be changed and the number of elements we're on in the array.\n    # Step 2: Go through the array and calculate the minimum number of changes.\n    # We have 2 iterations:\n    # 1. Go backwards through the array.\n    # 2. Go forwards through the array.\n    # Step 3: If the number of changes is 1, then we've reached the end of the array. We know there will be one change, because there's only one element in the array.\n    # Step 4: If the number of changes is greater than 1, then we need to return this element as the smallest change.\n    # Step 5: If the number of changes is greater than 2, then we need to repeat the step 4, and take the smallest change.\n",
        "num_ids": 221
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if arr[j]!= arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n                break\n    return n-1\n",
        "num_ids": 91
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return count_changes(arr,0,len(arr)-1)\n",
        "num_ids": 18
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) <= 1:\n        return 0\n    else:\n        smallest_change_1 = smallest_change(arr[1:])\n        smallest_change_2 = smallest_change(arr[:-1])\n        return min(smallest_change_1, smallest_change_2) + 1\n",
        "num_ids": 75
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_changes = 0\n    \n    # we need to find all the shortest reverse\n    for index in range(len(arr) - 1, -1, -1):\n        reverse_index = index\n        min_change = -1\n        while reverse_index >= 0:\n            if arr[reverse_index] > arr[index]:\n                min_change += 1\n            else:\n                min_change = 0\n            reverse_index -= 1\n        min_changes += min_change\n    \n    return min_changes\n",
        "num_ids": 121
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(arr)\n    min_length = 1\n    for i in range(n):\n        min_length = 1 if arr[i] < arr[i-1] else min_length\n",
        "num_ids": 48
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not arr:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    total_list = []\n    \n    for value in lst1:\n        total = 0\n        \n        for char in value:\n            if char in lst2:\n                total += 1\n                \n        total_list.append(total)\n        \n    return total_list\n",
        "num_ids": 69
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst1)!= len(lst2):\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_match = []\n    for i in lst1:\n        for j in lst2:\n            if len(i) < len(j):\n                total_match.append(i)\n                break\n    return total_matc",
        "num_ids": 57
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get the length of both lists\n    n = len(lst1)\n    # if the lengths of both lists are equal, return the first list\n    if n == len(lst2):\n        return lst1\n    # if the lengths of both lists are greater than the length of the other list, return the second list\n    elif n > len(lst2):\n        return lst2\n    # if the lengths of both lists are less than the lengths of the other list, return the first list\n    elif n < len(lst1):\n        return lst1\n    # if the lengths of both lists are equal, return the second list\n    else:\n        return lst2\n",
        "num_ids": 161
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s1 = len(lst1)\n    s2 = len(lst2)\n    if s1 < s2:\n        return lst1\n    elif s2 < s1:\n        return lst2\n    else:\n        return lst1 + lst2\n",
        "num_ids": 68
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst1 = lst1[:len(lst1)]\n    lst2 = lst2[:len(lst2)]\n    lst3 = lst1 + lst2\n    lst4 = []\n    for elem in lst3:\n        if(len(elem) < len(lst2)):\n            lst4.append(elem)\n    return lst4\n",
        "num_ids": 99
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(dict.fromkeys(lst1).union(lst2))\n",
        "num_ids": 21
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst1.sort()\n    lst2.sort()\n    lst1 = list(set(lst1))\n    lst2 = list(set(lst2))\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1 + lst2\n",
        "num_ids": 104
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_list = list()\n    for element in lst1:\n        new_list.append(len(element))\n    for element in lst2:\n        new_list.append(len(element))\n    return new_list\n",
        "num_ids": 57
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return lst1 + lst2\n",
        "num_ids": 11
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(3, int(sqrt(a)) + 1, 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a % 3 == 0:\n        return False\n    if a % 5 == 0:\n        return False\n    for i in range(4, 100, 3):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(3, (a + 1) // 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for b in range(3, a, 2):\n        if (a % b == 0):\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    import time\n",
        "num_ids": 9
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # We are looking for each of the 3 numbers until the numbers have been multiplied\n    # We'll use a for-loop and use a for-loop for-loop\n    # Every time we find a number that is less than 3, we'll add it to our list\n    # Once we reach an even number, we're done\n    # If the number is even, we need to multiply it by 2\n    # Otherwise, we need to multiply it by 3\n    # We're only interested in the numbers that are even\n    \n    # Here's an example of if the number we are looking for is odd\n    if a%2!= 0:\n        for i in range(3, a):\n            if i % 2 == 0:\n                a = a+1\n                break\n            else:\n                a = a*2\n    # We can use a for-loop to do this\n    else:\n        a = a*3\n    return a == a",
        "num_ids": 213
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # -- Loop\n    for i in range(2, 100):\n        for j in range(2, i):\n            if i == j:\n                continue\n            if i % j == 0:\n                return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # (1) - Consider the second number.\n    # (2) - Considering the first number.\n    # (3) - Addition.\n    # (4) - Check if it is a multiple of 3.\n    # (5) - Check if it is a multiple of 5.\n    # (6) - Check if it is a multiple of both 3 and 5.\n    # (7) - Check if it is a multiple of both 3 and 5.\n    # (8) - Check if it is a multiple of both 3 and 5.\n    # (9) - Check if it is a multiple of both 3 and 5.\n    # (10) - Check if it is a multiple of both 3 and 5.\n    # (11) - Check if it is a multiple of both 3 and 5.\n    # (12) - Check if it is a multiple of both 3 and 5.\n    # (13) - Check if it is a multiple of both 3 and 5.\n    # (14) - Check if it is a multiple of both 3 and 5.\n    # (15) - Check if it is a multiple of both 3 and 5.\n    # (16) - Check if it is a multiple of both 3 and 5.\n    # (17) - Check if it is a multiple of both 3 and 5.\n    # (18) - Check if it is a multiple of both 3 and 5.\n    # (19) - Check if it is a multiple of both 3 and 5.\n    # (20) - Check if it is a multiple of both 3 and 5.\n    # (21) - Check if it is a multiple of both 3 and 5.\n    # (22) - Check if it is a multiple of both 3 and 5.\n    # (23) - Check if it is a multiple of both 3 and 5.\n    # (24) - Check if it is a multiple of both 3 and 5.\n    # (25) - Check if it is a multiple of both 3 and 5.\n    # (26) - Check if it is a multiple of both 3 and 5.\n    # (27) - Check if it is a multiple of both 3 and 5.\n    # (28) - Check if it is a multiple of both 3 and 5.\n    # (29) - Check if it is a multiple of both 3 and 5.\n    # (30) - Check if it is a multiple of both 3 and 5.\n    # (31) - Check if it is a multiple of both 3 and 5.\n    # (32) - Check if it is a multiple of both 3 and 5.\n    # (33) - Check if it is a multiple of both 3 and 5.\n    # (34) - Check if it is a multiple of both 3 and 5.\n    # (35) - Check if it is a multiple of both 3 and 5.\n    # (36) - Check if it is a multiple of both 3 and 5.\n    # (37) - Check if it is a multiple of both 3 and 5.\n    # (38) - Check if it is a multiple of both 3 and 5.\n    # (39) - Check if it is a multiple of both 3 and 5.\n    # (40) - Check if it is a multiple of both 3 and 5.\n    # (41) - Check if it is a multiple of both 3 and 5.\n    # (42) - Check if it is a multiple of both 3 and 5.\n    # (43) - Check if it is a multiple of both 3 and 5.\n    # (44) - Check if it is a multiple of both 3 and 5.\n    # (45) - Check if it is a multiple of both 3 and 5.\n    # (46) - Check if it is a multiple of both 3 and 5.\n    # (47) - Check if it is a multiple of both 3 and 5.\n    # (48) - Check if it is a multiple of both 3 and 5.\n    # (49) - Check if it is a multiple of both 3 and 5.\n    # (50) - Check if it is a multiple of both 3 and 5.\n    # (51) - Check if it is a multiple of both 3 and 5.\n    # (52) - Check if it is a multiple of both 3 and 5.\n    # (53) - Check if it is a multiple of both 3 and 5.\n    # (54) - Check if it is a multiple of both 3 and 5.\n    # (55) - Check if it is a multiple of both 3 and 5.\n    # (56) - Check i",
        "num_ids": 1025
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a < 100:\n        return False\n    \n    prime_limit = 100\n    primes = []\n    for x in range(2, prime_limit):\n        if a % x == 0:\n            primes.append(x)\n            \n    if len(primes) == 2:\n        return True\n    \n    for p in primes:\n        if (a % p) == 0:\n            return False\n    \n    return True\n",
        "num_ids": 106
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a < 3:\n        return False\n    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_simple_power2(x, n):\n        return n**int(x) == x**int(n)\n    \n    return is_simple_power2(str(x), n)\n",
        "num_ids": 49
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # write your code here\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True if x == 2 else False\n    elif n == 3:\n        return True if x == 3 else False\n    elif n == 4:\n        return True if x == 4 else False\n    elif n % 2 == 0:\n        return True if x == (n // 2) else False\n    elif n % 3 == 0:\n        return True if x == (n // 3) else False\n    elif n % 5 == 0:\n        return True if x == (n // 5) else False\n    else:\n        return False\n",
        "num_ids": 165
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x**int(n) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    if n==1:\n        return True\n    if n%2==0:\n        return False\n    else:\n        a=n//2\n        if (is_simple_power(a, n//2)):\n            return True\n        else:\n            return is_simple_power(a, n//2)\n",
        "num_ids": 82
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for _ in range(n):\n        if is_simple_power(x, n//2):\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n==1:\n        return True\n    return is_simple_power(x, n//2) and is_simple_power(x, n-1)\n    \n    \n    \ndef is_isomorphic(s, t):\n    \"\"\"Your task is to write a function that checks if two strings s and t are isomorphic, if so\n    then return true and return false otherwise.\n    Input :\n    s : string a\n    t : string b\n    Output :\n    Boolean : true or false\n    \"\"\"\n    if s==t:\n        return True\n    return False\n",
        "num_ids": 137
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n<=1:\n        return False\n    if n==2:\n        return True\n    if n==3:\n        return True if n%2==0 else False\n    if n%2==0:\n        return False if n%3==0 else True\n    return is_simple_power(x, int(n/3))\n",
        "num_ids": 81
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(n,0,-1):\n        result = (result*i)%n\n    return result==x\n",
        "num_ids": 36
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = str(x)\n    n = int(n)\n    return len(x) == len(str(n))\n",
        "num_ids": 31
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x = int(a)\n    if x == 0 or x == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return a == a**3 or a == a**2 or a == a**",
        "num_ids": 19
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a**3 == a**6 == a**9\n    \n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return a <= 3 and a >= 1\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return a == a**3",
        "num_ids": 8
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return True if ((a**3)%1==1) else False\n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a == 1 or a == 3:\n        return True\n    if a == 4 or a == 9:\n        return True\n    if a == 2 or a == 5 or a == 7:\n        return True\n    if a == 6 or a == 8 or a == 10 or a == 13:\n        return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, \n             31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, \n             61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    if num == '':\n        return 0\n    if len(num) not in digits:\n        return 0\n    if '0' in num:\n        return 0\n    else:\n        if num[0] == '0':\n            return 0\n        elif num[0] == '1':\n            return 1\n        else:\n            return len(num) - len(num[0]) - 1\n        \ndef remove_0(num):\n    \"\"\"You have been tasked to write a function that takes a string of digits \n    and returns the same string with all the 0 removed.\n    For example, if num = \"12345\" the output should be \"12345\".\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    if num == '':\n        return ''\n    if len(num) not in digits:\n        return ''\n    if num[0] == '0':\n        return ''\n    else:\n        return num[0] + remove_0(num[1:])\n        \ndef sum_of_digits(num):\n    \"\"\"You have been tasked to write a function that takes a number as a string \n    and returns the sum of all digits in that number.\n    For example, if num = \"12345\" the output should be 32.\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    if num == '':\n        return 0\n    else:\n        return sum_of_digits(remove_0(num)) + sum_of_digits(num[1:])\n        \ndef get_prime_numbers(num):\n    \"\"\"You have been tasked to write a function that takes a number as a string \n    and returns a list of all prime numbers in the range given in the string.\n    For example, if num = \"12345\" the output should be [2, 3, 5, 7, 11",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if isinstance(num, str):\n        num = num.upper()\n    if not num:\n        return 0\n    res = 0\n    for c in num:\n        if c == '0':\n            res += 1\n        if c == '1':\n            res += 2\n        if c == '2':\n            res += 3\n        if c == '3':\n            res += 5\n        if c == '4':\n            res += 7\n        if c == '5':\n            res += 11\n        if c == '6':\n            res += 13\n        if c == '7':\n            res += 17\n        if c == '8':\n            res += 20\n        if c == '9':\n            res += 21\n    return res\n",
        "num_ids": 175
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pow_dict = {\"0\":0, \"1\":1, \"2\":2, \"3\":3, \"4\":4, \"5\":5, \"6\":6, \"7\":7, \"8\":8, \"9\":9}\n    hex_list = list(str(num))\n    for i in range(len(hex_list)):\n        hex_list[i] = hex_list[i].upper()\n    for i in hex_list:\n        if i in pow_dict:\n            hex_list.remove(i)\n            hex_list.append(pow_dict[i])\n    return sum(hex_list)\n",
        "num_ids": 153
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    num = num.upper()\n    if num == \"\":\n        return count\n    for x in range(10):\n        if x < 10 and x > 1:\n            for y in range(2,x):\n                if x % y == 0:\n                    break\n            else:\n                count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # convert to string\n    num = str(num)\n",
        "num_ids": 15
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    num = num.upper().replace(' ','')\n    \n    if len(num) > 1:\n        for i in range(1,len(num)):\n            if num[i] == '0':\n                if num[i-1] in ['A','B','C','D','E','F']:\n                    return 2\n                else:\n                    return 4\n    else:\n        return 0\n    \n    return 0\n",
        "num_ids": 103
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if num == '': return 0\n    l = len(num)\n    if l <= 3: return 0\n    for i in range(l-3):\n        if (num[i:i+4] == '10'): return 1\n        if (num[i:i+4] == '11'): return 1\n        if (num[i:i+4] == '12'): return 1\n        if (num[i:i+4] == '13'): return 1\n        if (num[i:i+4] == '14'): return 1\n        if (num[i:i+4] == '15'): return 1\n        if (num[i:i+4] == '16'): return 1\n        if (num[i:i+4] == '17'): return 1\n        if (num[i:i+4] == '18'): return 1\n        if (num[i:i+4] == '19'): return 1\n        if (num[i:i+4] == '20'): return 1\n        if (num[i:i+4] == '21'): return 1\n        if (num[i:i+4] == '22'): return 1\n        if (num[i:i+4] == '23'): return 1\n        if (num[i:i+4] == '24'): return 1\n        if (num[i:i+4] == '25'): return 1\n        if (num[i:i+4] == '26'): return 1\n        if (num[i:i+4] == '27'): return 1\n        if (num[i:i+4] == '28'): return 1\n        if (num[i:i+4] == '29'): return 1\n        if (num[i:i+4] == '30'): return 1\n        if (num[i:i+4] == '31'): return 1\n        if (num[i:i+4] == '32'): return 1\n        if (num[i:i+4] == '33'): return 1\n        if (num[i:i+4] == '34'): return 1\n        if (num[i:i+4] == '35'): return 1\n        if (num[i:i+4] == '36'): return 1\n        if (num[i:i+4] == '37'): return 1\n        if (num[i:i+4] == '38'): return 1\n        if (num[i:i+4] == '39'): return 1\n        if (num[i:i+4] == '40'): return 1\n        if (num[i:i+4] == '41'): return 1\n        if (num[i:i+4] == '42'): return 1\n        if (num[i:i+4] == '43'): return 1\n        if (num[i:i+4] == '44'): return 1\n        if (num[i:i+4] == '45'): return 1\n        if (num[i:i+4] == '46'): return 1\n        if (num[i:i+4] == '47'): return 1\n        if (num[i:i+4] == '48'): return 1\n        if (num[i:i+4] == '49'): return 1\n        if (num[i:i+4] == '50'): return 1\n        if (num[i:i+4] == '51'): return 1\n        if (num[i:i+4] == '52'): return 1\n        if (num[i:i+4] == '53'): return 1\n        if (num[i:i+4] == '54'): return 1\n        if (num[i:i+4] == '55'): return 1\n        if (num[i:i+4] == '56'): return 1\n        if (num[i:i+4] == '57'): return 1\n        if (num[i:i+4] == '58'): return 1\n        if (num[i:i+4] == '59'): return 1\n        if (num[i:i+4] == '60'): return 1\n        if (num[i:i+4] == '61'): return ",
        "num_ids": 1025
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    digits = 0\n    for i in range(0, len(num)):\n        if num[i] == '1':\n            digits += 1\n    return digits\n",
        "num_ids": 42
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(num)):\n        if int(num[i]) in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']:\n            count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #note: we're using [] to store the digits we want to count\n    l = list(num)\n    \n    #count the digits\n    count = 0\n    for i in l:\n        count += int(i)\n    \n    #count the digits\n    count_list = []\n    for i in range(0, count):\n        count_list.append(0)\n",
        "num_ids": 90
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join(str(int(x)) for x in decimal)\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = \"\"\n    while decimal >= 1:\n        x += str(decimal % 2)\n        decimal //= 2\n    return x[::-1]\n",
        "num_ids": 40
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if decimal <= 0:\n        return '0'*(2*decimal)\n    else:\n        return 'db'*(decimal)\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    bin_str = ''\n    if decimal < 0:\n        decimal = -decimal\n    while decimal > 0:\n        binary = str(decimal % 2)\n        decimal = int(decimal/2)\n        bin_str += binary\n    return bin_str",
        "num_ids": 65
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if decimal == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while decimal > 0:\n            remainder = decimal % 2\n            binary = str(remainder) + binary\n            decimal //= 2\n        binary = str(decimal) + binary\n        return binary\n",
        "num_ids": 73
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    binary = \"\"\n    binary += str(int(decimal)).zfill(3)\n    if len(binary) == 1:\n        binary += \"0\"\n    else:\n        binary += \"1\"\n    if len(binary) == 3:\n        binary += \"db\"\n    return binary\n",
        "num_ids": 71
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = str(decimal)\n    r = ''\n    for c in s:\n        r += bin(ord(c))[2:]\n    return r[:-1] + 'db'\n",
        "num_ids": 47
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    binary_str = \"\"\n    binary_str += str(decimal)\n    binary_str += \"db\"\n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    binary_string = ''\n    while decimal > 0:\n        binary_number = bin(decimal % 2)\n        binary_string += binary_number[2:]\n        decimal = decimal // 2\n    binary_string = binary_string[:-2]\n    return binary_string\n",
        "num_ids": 67
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    bin_form = ''\n    count = 0\n    current = 0\n    while decimal > 0:\n        count += 1\n        remainder = decimal % 2\n        if remainder == 0:\n            bin_form += \"1\"\n            current = 1\n        elif remainder == 1:\n            bin_form += \"0\"\n            current = 0\n        decimal = int(decimal / 2)\n    while count > 0:\n        bin_form += \"1\"\n        count -= 1\n        if count > 0:\n            decimal = int(decimal / 2)\n    return bin_form\n    \ndef binary_to_decimal(binary):\n    \"\"\"You will be given a binary number. The function should return the decimal value of the binary\n    number.\n",
        "num_ids": 178
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    d = [0, 0, 0, 0, 0, 0]\n    if s == \"\":\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #=================================================================\n    # Accepted\n    #=================================================================\n    if len(s)<3:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #-------------------------------\n    # Fill in the blanks\n    #-------------------------------\n    # Variables\n    total_letters = len(s)\n    one_letter_differences = 1\n    is_happy_check = False\n    \n    # Loop through each letter\n    for letter in s:\n        # Check if current letter is a duplicate\n        if letter in s[0:total_letters - one_letter_differences]:\n            # We need to check if the current letter is the same as the previous one,\n            # but we do not need to check the next one because we already checked if\n            # the current letter is the same as the previous one\n            is_happy_check = True\n        else:\n            is_happy_check = False\n            one_letter_differences += 1\n    \n    # If there are more than three consecutive letters\n    if total_letters > 3 and is_happy_check == True:\n        return True\n    else:\n        return False\n",
        "num_ids": 223
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = list(s)\n    count = {}\n    for i in range(len(s)):\n        if s[i] in count:\n            count[s[i]] += 1\n        else:\n            count[s[i]] = 1\n    \n    for j in range(len(s)):\n        if count[s[j]] == 3:\n            return False\n",
        "num_ids": 90
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s_list = list(s)\n    length = len(s)\n    for index in range(length-2):\n        current = s_list[index]\n        next = s_list[index+1]\n        prev = s_list[index+2]\n        # Check every 3 consecutive letters\n        if (current == prev and prev == next) or (current == next and current == prev):\n            return False\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.lower()\n    count_of_substring = collections.Counter(s)\n    for char in count_of_substring:\n        if char!= 'a' and char!= 'b' and char!= 'c' and char!= 'd' and char!= 'e' and char!= 'f' and char!= 'g' and char!= 'h' and char!= 'i' and char!= 'j' and char!= 'k' and char!= 'l' and char!='m' and char!= 'n' and char!= 'o' and char!= 'p' and char!= 'q' and char!= 'r' and char!='s' and char!= 't' and char!= 'u' and char!= 'v' and char!= 'w' and char!= 'x' and char!= 'y' and char!= 'z' and char!= '0' and char!= '1' and char!= '2' and char!= '3':\n            return False\n    return True\n",
        "num_ids": 254
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(s) <= 2:\n        return False\n    for i in range(2, len(s)):\n        if s[i]!= s[i-2] and s[i]!= s[i-1] and s[i]!= s[i-3] and s[i]!= s[i-4]:\n            return False\n    return True\n",
        "num_ids": 91
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # a, b, c, d, e = 3, 3, 3, 4, 3 # a1b2c3d4e\n    # a2b3c4d5e = True # a, b, c, d, e = a2b3c4d5e\n    # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    \n    # # a, b, c, d, e = 3, 3, 3, 4, 3 # a1b2c3d4e\n    # # a2b3c4d5e = True # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    \n    # # a, b, c, d, e = 3, 3, 3, 4, 3 # a1b2c3d4e\n    # # a2b3c4d5e = True # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    \n    # a, b, c, d, e = 3, 3, 3, 4, 3 # a1b2c3d4e\n    # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # a1b2c3d4e = True # a, b, c, d, e = a1b2c3d4e\n    # a2b3c4d5e = True # a, b, c, d, e = a2b3c4d5e\n    # a1b2c3d4e = True # a, b, c, d, e = a1b2c3d4e\n    # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    \n    \n    # # a, b, c, d, e = 3, 3, 3, 4, 3 # a1b2c3d4e\n    # # a2b3c4d5e = True # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b, c, d, e = a1b2c3d4e\n    # # a2b3c4d5e = False # a, b, c, d, e = a2b3c4d5e\n    # # a1b2c3d4e = False # a, b",
        "num_ids": 1024
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s)<3:\n        return True\n    if len(s)==3:\n        return True if all(i in s[:3] for i in [s[1],s[2],s[0]]) else False\n    else:\n        return not any(i in s[:3] for i in [s[1],s[2],s[0]])\n",
        "num_ids": 92
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    return [f\"{g:.2f}\" for g in grades]\n",
        "num_ids": 25
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    output = []\n    for grade in grades:\n        if grade > 5:\n            output.append('C')\n        elif grade > 3:\n            output.append('C')\n        elif grade > 2:\n            output.append('C')\n        elif grade > 1:\n            output.append('C')\n        else:\n            output.append('D')\n    return output\n",
        "num_ids": 92
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \"\"\"\n    For this question you will need to input a list of GPA numbers where each number \n    is the grade for a student.\n    \n    For example:\n    [4.0, 3, 1.7, 2, 3.5]\n",
        "num_ids": 58
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # If there are no grades, return an empty list.\n    if not grades:\n        return []\n",
        "num_ids": 25
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    letter_grade_table = {\n        0.0 : 'A+',\n        3.0 : 'A',\n        3.5 : 'B',\n        4.0 : 'B-',\n        4.5 : 'C',\n        5.0 : 'C-',\n        5.5 : 'D',\n        6.0 : 'D-',\n        6.5 : 'E',\n        7.0 : 'E-',\n        8.0 : 'F',\n        8.5 : 'F-',\n    }\n    letter_grade_table_rev = dict(zip(letter_grade_table.values(), letter_grade_table.keys()))\n    return letter_grade_table_rev[max(grades)]",
        "num_ids": 172
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Get the letters grade\n    \n    # Create a list of the number of gpa grades for each student\n    # Create a new list of grades with that number of grades\n    # Add each letter grade to the new list of grades\n",
        "num_ids": 53
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def process_grade(grade):\n        \"\"\"It is the last week of the semester and the teacher has to give the grades\n        to students. The teacher has been making her own algorithm for grading.\n        The only problem is, she has lost the code she used for grading.\n        She has given you a list of GPAs for some students and you have to write \n        a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n        \n",
        "num_ids": 225
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    num_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            num_list.append(\"A+\")\n        elif grade >= 3.7:\n            num_list.append(\"A\")\n        elif grade >= 3.3:\n            num_list.append(\"A-\")\n        elif grade >= 3.0:\n            num_list.append(\"B+\")\n        elif grade >= 2.7:\n            num_list.append(\"B\")\n        elif grade >= 2.3:\n            num_list.append(\"B-\")\n        elif grade >= 2.0:\n            num_list.append(\"C+\")\n        elif grade >= 1.7:\n            num_list.append(\"C\")\n        elif grade >= 1.3:\n            num_list.append(\"C-\")\n        elif grade >= 1.0:\n            num_list.append(\"D+\")\n        elif grade >= 0.7:\n            num_list.append(\"D\")\n        elif grade >= 0.0:\n            num_list.append(\"D-\")\n    return num_list\n",
        "num_ids": 270
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    gpa_list = []\n    gpa_sum = 0.0\n    for i in grades:\n        gpa_sum += i\n    gpa_avg = gpa_sum / len(grades)\n    for grade in grades:\n        if grade < gpa_avg:\n            gpa_list.append('A')\n        elif grade > gpa_avg:\n            gpa_list.append('B')\n        elif grade > gpa_avg and grade < 3.5:\n            gpa_list.append('C')\n        elif grade > 3.5:\n            gpa_list.append('D')\n    return gpa_list",
        "num_ids": 159
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    grade_list = []\n    for grades_list in grades:\n        for grade in grades_list:\n            if grade == 4.0:\n                grade_list.append('A+')\n            elif grade == 3.7:\n                grade_list.append('A')\n            elif grade == 3.3:\n                grade_list.append('B')\n            elif grade == 3.0:\n                grade_list.append('B-')\n            elif grade == 2.7:\n                grade_list.append('C')\n            elif grade == 2.3:\n                grade_list.append('C-')\n            elif grade == 2.0:\n                grade_list.append('C+')\n            elif grade == 1.7:\n                grade_list.append('D')\n            elif grade == 1.3:\n                grade_list.append('D-')\n            elif grade == 1.0:\n                grade_list.append('D+')\n            elif grade == 0.7:\n                grade_list.append('E')\n            elif grade == 0.0:\n                grade_list.append('E-')\n    return grade_list\n",
        "num_ids": 278
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    string = string.lower()\n    if 'k' in string or 'e' in string or's' in string or 't' in string or 'u' in string or 'o' in string:\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if string == '' or string == None or string =='':\n        return False\n    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        if string.isupper() and string.islower():\n            return True\n        return False\n    if len(string) > 2:\n        if string.count('a') or string.count('i'):\n            return False\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(string)<2:\n        return True\n    for i in range(2,int(len(string)/2)):\n        if string[i] in string[:i]:\n            return False\n    return True",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prime = True\n    for i in range(2,string):\n        if string%i == 0:\n            prime = False\n            break\n    return prime\n",
        "num_ids": 38
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len(string) >= 2 and len(string) % 2 == 0\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(string) == 1:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def is_prime(n):\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n**0.5) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n",
        "num_ids": 93
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2, len(string)):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    prime_count = 0\n    for i in range(1, len(string)):\n        for j in range(2, len(string)):\n            if string[i] == string[j]:\n                prime_count += 1\n                break\n    if prime_count == len(string):\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i+1]:\n            count += 1\n        else:\n            break\n    if count >= 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 10 == 1 or i % 10 == 0:\n            count += 1\n        if i % 10!= 0:\n            count += 1\n    return count",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # initialise count\n    count = 0\n    # for each digit:\n    for i in range(1, n + 1):\n        # if i is '1', add 1 to count\n        if i == 1:\n            count += 1\n        # if i is 0, add 0 to count\n        elif i == 0:\n            count += 0\n    # return count\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(1 for i in range(1, n + 1) if i % 10 == 1)\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(2, n):\n        if str(i).count(\"1\") > 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                count += 1\n            else:\n                count += 2\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(1 for i in range(n) if (i % 10 == 1 or i == 10))\n",
        "num_ids": 26
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    cnt = 0\n    for i in range(2, n):\n        if (n - i) % 10!= 0:\n            cnt += 1\n        if i % 10 == 0:\n            cnt += 1\n    return cnt\n",
        "num_ids": 58
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum([1 for i in range(2, n+1) if n % i == 0])\n",
        "num_ids": 25
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    start = 0\n    end = 0\n    while start < n:\n        if start % 10 == 1:\n            end += 1\n        start += 1\n    return end\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2 + starts_one_ends(n // 2)\n    else:\n        return 2 + starts_one_ends(3 * n + 1)\n",
        "num_ids": 82
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return bin(N).replace(\"0b\",\"\")\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    if N == 0: return \"\"\n    \n    res = str(N)\n    \n    if len(res) == 1:\n        return res\n    \n    \n    res = res[:len(res)-1]\n    return res + solve(N-int(res))\n    \n    \n    \n",
        "num_ids": 74
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Function to return the sum of digits in binary\n    def sum_of_binary(number):\n        total = 0\n        while number > 0:\n            total += number % 2\n            number //= 2\n        return total\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = 0\n    if N<=1:\n        return bin(N)[2:].replace('0b','')\n    else:\n        for i in range(2,N+1):\n            x += int(bin(i)[2:].replace('0b',''))\n        return x\n",
        "num_ids": 72
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # define sum of digits\n    sum = 0\n    while N > 0:\n        # get sum of digits\n        sum += N % 10\n        # update N by multiplying by 2\n        N //= 2\n    # return sum of digits\n    return str(sum)\n",
        "num_ids": 63
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return sum(str(bin(int(str(N),2)))[2:])\n    return sum(map(int, str(N)))",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 1. Return sum of digits in base N\n    def get_binary(x):\n        return bin(x).replace(\"0b\", \"\")[2:]\n    \n    def sum_digits(n):\n        \"\"\"Return the sum of digits in binary of a positive integer N\n        \n        Examples:\n            N = 1000, sum_digits(1000) should return 1\n            N = 150, sum_digits(150) should return 6\n            N = 147, sum_digits(147) should return 12\n        \"\"\"\n        # 2. Return sum of digits in base N\n        def get_sum(n):\n            return bin(n).replace(\"0b\", \"\")[2:]\n        \n        result = 0\n        for i in get_sum(n):\n            result += int(i)\n        return result\n    \n    def get_digit(n):\n        \"\"\"Return the digit of a number in binary of a positive integer N\n        \n        Examples:\n            N = 1000, get_digit(1000) should return \"1\"\n            N = 150, get_digit(150) should return \"6\"\n            N = 147, get_digit(147) should return \"12\"\n        \"\"\"\n        # 3. Return digit in base N\n        def get_digit(n):\n            result = n % 2\n            if result == 1:\n                return \"1\"\n            else:\n                return \"6\"\n        \n        result = get_sum(n)\n        return get_digit(result)\n    \n    # 4. Return the sum of digits in binary of a positive integer\n    def get_sum(n):\n        \"\"\"Return the sum of digits in binary of a positive integer N\n        \n        Examples:\n            N = 1000, get_sum(1000) should return 1\n            N = 150, get_sum(150) should return 6\n            N = 147, get_sum(147) should return 12\n        \"\"\"\n        # 5. Return sum of digits in binary of a positive integer\n        def get_sum(n):\n            if n == 0:\n                return 0\n            elif n == 1:\n                return 1\n            else:\n                # 1. Return sum of digits in binary of a positive integer\n                return get_sum(n // 2) + get_sum(n % 2)\n        \n        return get_sum(n)\n    \n    # 6. Return the sum of digits in binary of a positive integer N\n    def get_sum(n):\n        \"\"\"Return the sum of digits in binary of a positive integer N\n        \n        Examples:\n            N = 1000, get_sum(1000) should return 1\n            N = 150, get_sum(150) should return 6\n            N = 147, get_sum(147) should return 12\n        \"\"\"\n        # 7. Return sum of digits in binary of a positive integer\n        def get_sum(n):\n            if n == 0:\n                return 0\n            elif n == 1:\n                return 1\n            else:\n                return get_sum(n // 2) + get_sum(n % 2)\n        \n        return get_sum(n)\n    \n    # 8. Return the sum of digits in binary of a positive integer N\n    def get_sum(n):\n        \"\"\"Return the sum of digits in binary of a positive integer N\n        \n        Examples:\n            N = 1000, get_sum(1000) should return 1\n            N = 150, get_sum(150) should return 6\n            N = 147, get_sum(147) should return 12\n        \"\"\"\n        # 9. Return sum of digits in binary of a positive integer\n        def get_sum(n):\n            if n == 0:\n                return 0\n            elif n == 1:\n                return 1\n            else:\n                return get_sum(n // 2) + get_sum(n % 2)\n        \n        return get_sum(n)\n    \n    # 10. Return the sum of digits in binary of a positive integer N\n    def get_sum(n):\n        \"\"\"Return the sum of digits in binary of a positive integer N\n        \n        Examples:\n            N = 1000, get_sum(1000) should return 1\n            N = 150, get_sum(150) should return 6\n            N = 147, get_sum(147) should return 12\n        \"\"\"\n        # 11. Return sum of digits in binary of a positive integer\n        def get_sum(n):\n            return sum_di",
        "num_ids": 1025
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Calculate the sum of each digit and add it together\n    digits = []\n    for digit in str(N):\n        digits.append(int(digit))\n    return sum(digits)\n",
        "num_ids": 51
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if N == 0:\n        return \"\"\n    if N == 1:\n        return \"1\"\n    res = int(str(N)[::-1])\n    return int(bin(res))[2:]\n    \ndef main():\n    \"\"\"Runs an arbitrary number of tests for the solution\"\"\"\n    N = 100\n    print(solve(N))\n    N = 150\n    print(solve(N))\n    N = 147\n    print(solve(N))\n    N = 1000\n    print(solve(N))\n    print(\"done\")\n    \nmain(",
        "num_ids": 137
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    carry = 1\n    num = 0\n    while N:\n        num = N % 10\n        N = N // 10\n        if carry:\n            res.append(str(num))\n            num = 0\n            carry = 1\n        else:\n            carry = 0\n        num += carry\n    return ''.join(res[::-1])\n",
        "num_ids": 87
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(lst):\n        if i % 2!= 0:\n            lst.append(lst[i])\n        i += 1\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(lst)//2):\n        lst.append(lst[i])\n    return lst\n",
        "num_ids": 33
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even = 0\n    odd = 0\n    for x in lst:\n        if x % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even + odd\n",
        "num_ids": 48
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            res += lst[i]\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(lst[1: len(lst)//2]) + sum(lst[0::2]",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # We'll store the even elements in an empty array\n    even = []\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            evens += lst[i]\n        else:\n            odds += lst[i]\n    return evens + odds\n",
        "num_ids": 66
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(lst)\n",
        "num_ids": 10
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort()\n    print(lst)\n    print(lst[:len(lst)//2])\n    print(lst[len(lst)//2:])\n    print(lst[len(lst)//2:-len(lst)//2])\n    return lst + lst[::-1]\n",
        "num_ids": 83
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # create list of words\n    word_list = s.split()\n    word_list.sort()\n    return''.join(word_list)\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = ''\n    for i in s:\n        if i not in 'abcdefghijklmnopqrstuvwxyz0123456789 ':\n            res += i\n        else:\n            res = res.replace(i, '_')\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = s.lower()\n    s_list = []\n    for word in s.split():\n        if word.isalpha():\n            s_list.append(word)\n    \n    s_list_alphabet = [c for c in s_list if c.isalpha()]\n    s_alphabet_with_number = [c for c in s_list if c.isalpha() and c.isnumeric()]\n    s_number_with_alphabet = [c for c in s_list if c.isalpha() and c.isnumeric()]\n",
        "num_ids": 135
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = s.split(' ')\n    s = ''.join(s)\n    l = len(s)\n    k = 0\n    for i in range(len(s)):\n        if k == 0:\n            s = s[:i] + s[i+1:]\n            s = s.replace(' ', '_')\n            k += 1\n        else:\n            s = s[:i] + s[i+1:] + s[i] + s[i+1:]\n            s = s.replace(' ', '_')\n            k += 1\n    s = s.split('_')\n    s = [s[i] for i in range(len(s)) if i!= len(s) - 1]\n    return ''.join(s)\n",
        "num_ids": 183
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #print(s)\n    # use a dict to store letters and numbers so they can be sorted\n    letters = dict()\n    numbers = dict()\n    for i in s:\n        # if there is a letter in the string, add it to the letters dictionary\n        if i.isalpha():\n            letters[i] = letters.get(i, 0) + 1\n        # if there is a number, add it to the numbers dictionary\n        elif i.isdigit():\n            numbers[i] = numbers.get(i, 0) + 1\n    # now, sort it based on the letters dictionary\n    sorted_letters = sorted(letters.items(), key=lambda x: x[1], reverse=True)\n    # now, sort it based on the numbers dictionary\n    sorted_numbers = sorted(numbers.items(), key=lambda x: x[1], reverse=True)\n    # now, sort them based on the letters dictionary\n    sorted_letters = sorted(letters.items(), key=lambda x: x[1])\n    sorted_numbers = sorted(numbers.items(), key=lambda x: x[1])\n    #print(sorted_letters)\n    #print(sorted_numbers)\n    return ''.join([x[0] for x in sorted_letters[:5]] + sorted_numbers[:5])\n",
        "num_ids": 317
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    return \"\".join(sorted(s, key = lambda word: ascii_to_character(ord(word))))\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join(sorted(list(s)))",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = ''\n    for word in s:\n        result += word[::-1].strip().lower() +''\n",
        "num_ids": 29
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    output = ''\n    for letter in s:\n        num = ord(letter)\n        output += chr(num - 96)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not s:\n        return \"\"\n    result = \"\"\n    for i in range(0, len(s), 2):\n        result += s[i]\n        result += s[i+1]\n    return result[::-1]\n",
        "num_ids": 58
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst.sort(key = lambda x: (x[0], x[1]))\n    lst.sort(key = lambda x: (x[1], x[0]))\n    return [(x[0], x[1]) for x in lst]\n",
        "num_ids": 63
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 0: return []\n    lst.sort()\n    row = [lst[0][i] for i in range(len(lst[0]))]\n    lst = [row.copy() for _ in range(len(lst))]\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] < x: lst[i][j] += x\n    return [tuple(sorted(lst[i], key=lambda x: (x[0], x[1]))) for i in range(len(lst))]\ndef get_row_c(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row_c([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 1), (1, 4), (1, 1), (2, 5), (2, 0), (3, 6), (3, 1)]\n    get_row_c([], 1) == []\n    get_row_c([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n    \"\"\"\n    if len(lst) == 0: return []\n    lst.sort()\n    row = [lst[0][i] for i in range(len(lst[0]))]\n    lst = [row.copy() for _ in range(len(lst))]\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] < x: lst[i][j] += x\n    return [tuple(sorted(lst[i], key=lambda x: (x[0], x[1]))) for i in range(len(lst))]\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, rows), starting with 0.\n    Sort coordinates initially by columns in descending order.\n    Also, sort coordinates of the column by rows in ascending order.\n    \n    Examples:\n    get_col([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(1, 1), (1, 4), (1, 1), (2, 5), (2, 0), (3, 6), (3, 1)]\n    get_col([], 1) == []\n    get_col([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3), (3, 1)]\n    \"\"\"\n    if len(lst) == 0: return []\n    lst.sort()\n    col = [lst[0][i] for i in range(len(lst[0]))]\n    lst = [col.copy() for _ in range(len(lst))]\n    for i in range(len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] < x: lst[i][j] += x",
        "num_ids": 1016
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x = list(x)\n    return sorted(((lst[i][j], j) for j in range(len(lst[i]))), key=lambda t: t[0])\n",
        "num_ids": 47
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    column = len(lst)\n    if column == 0:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    assert len(lst) >= 1, \"The list cannot be empty\"\n    \n    if len(lst) == 1:\n        return [(x, x)]\n    \n    data = lst[0]\n    \n    # Sort by rows first\n    sorted = sorted(data, key = lambda x: x[0])\n    \n    # Sort by columns first\n    sorted = sorted(sorted, key = lambda x: x[1])\n    \n    # Sort by columns descending first\n    sorted = sorted(sorted, key = lambda x: x[1], reverse = True)\n    \n    # Now sort the list by rows\n    lst = sorted\n    \n    # Now we need to process the rest of the list,\n    # and return the list of tuples\n    \n    # NOTE:\n    # If you find that the order of rows and columns must be different\n    # in order for the answer to be correct, you should modify the\n    # code in get_row(lst, row) to return an appropriate list of tuples.\n    \n    # if len(lst) == 1:\n    #     return [(x, x)]\n    # else:\n    #     return [(x[0], x[1]) for x in lst]\n    \n    return [(x[0], x[1]) for x in lst]\n",
        "num_ids": 315
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    lst.sort(key = lambda x: (x[0], x[1]))\n    \n    tup_list = []\n    \n    for j in range(lst[0][1]):\n        # j == lst[0][1] because we assume it is not the first column, which is always 1\n        for i in range(lst[0][0]):\n            tup_list.append((i+1, lst[0][1] - j - 1))\n    \n    return tup_list\n",
        "num_ids": 127
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    row = []\n    for i in lst:\n        for j in i:\n            row.append((j, x))\n    row.sort(key = lambda x: x[1])\n    return row\n",
        "num_ids": 50
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    indices = [lst.index(row) for row in lst]\n    indices.sort(reverse=True)\n    columns = [col for i, col in enumerate(lst) if i in indices]\n    return [(row[i], col[i]) for i, row in enumerate(lst) if i in indices for col in columns]\n    ",
        "num_ids": 87
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Convert lst to list of lists, then sort lists by rows\n    return sorted(lst, key=lambda x: x[x[0].sort()])\n",
        "num_ids": 39
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = []\n    for x1 in lst:\n        for y1 in x1:\n            for x2 in y1:\n                result.append((x2,y1.index(x2)))\n    result.sort(key=lambda x: (x[0],x[1]))\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(array) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = 0\n    r = len(array)-1\n    while l < r:\n        if (array[l] + array[r] < 0):\n            array[l], array[r] = array[r], array[l]\n            l += 1\n            r -= 1\n        elif (array[l] + array[r] % 2!= 0):\n            array[l], array[r] = array[r], array[l]\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n    return array\n",
        "num_ids": 134
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    array.sort()\n    for index, item in enumerate(array):\n        if array[index] % 2!= 0:\n            array[index], array[index + 1] = array[index + 1], array[index]\n        else:\n            if array[index] == array[index + 1]:\n                array[index], array[index + 1] = array[index + 1], array[index]\n            else:\n                array[index], array[index + 1] = array[index + 1], array[index]\n    return arra",
        "num_ids": 126
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # sort the array\n    array.sort()\n",
        "num_ids": 13
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if sum(array) % 2 == 1:\n        return array\n    else:\n        return sorted(array, key=lambda x: x + sum(array[:x]))\n",
        "num_ids": 43
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    array.sort()\n    # print(array)\n    \n    # if len(array) % 2 == 0:\n    #     if array[0] + array[1] % 2 == 1:\n    #         return array[:len(array)//2]\n    #     else:\n    #         return array[:len(array)//2] + array[len(array)//2+1:]\n    # else:\n    #     return array[:len(array)//2] + array[len(array)//2+1:]\n    return array\n",
        "num_ids": 132
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_array = sorted(array)\n    array_sum = 0\n    for i in range(len(sorted_array)):\n        array_sum += sorted_array[i]\n    if array_sum % 2 == 0:\n        return sorted(sorted_array)\n    else:\n        return [sorted_array[-1]] + sort_array(sorted_array[:-1])\n",
        "num_ids": 96
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    i, j = 0, len(array) - 1\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sorted_array = []\n    sum_of_array = 0\n    for num in array:\n        sum_of_array += num\n    if sum_of_array % 2 == 0:\n        sorted_array.sort()\n        return sorted_array\n    else:\n        sorted_array.sort(reverse=True)\n        return sorted_array\n",
        "num_ids": 85
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return sorted(array, key= lambda x: (x % 2!= 0 and x or 0))\n    sorted_array = sorted(array, key = lambda x: (x % 2!= 0 and x or 0))\n    return sorted_array\n    \n",
        "num_ids": 62
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    rot_array = []\n    for letter in s:\n        rot_array.append(letter.lower())\n    result = ''\n    for i in range(len(rot_array)):\n        if i == 0:\n            result += rot_array[i] + rot_array[i + 1]\n        else:\n            result += rot_array[i - 1] + rot_array[i]\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = ''\n    for i in s:\n        encrypted_alphabet += alphabet[(alphabet.index(i) + 2) % 26]\n    return encrypted_alphabet\n",
        "num_ids": 72
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Initialize encrypted string\n    encrypted = \"\"\n    \n    # Find length of string\n    if len(s) <= 26:\n        # Convert to uppercase\n        for i in s.upper():\n            encrypted += chr(ord(i) + 2)\n        # Convert to lowercase\n        for i in s.lower():\n            encrypted += chr(ord(i) - 2)\n        return encrypted\n    else:\n        # The string is too long, shift it up and down\n        for i in range(26):\n            encrypted += chr(ord(s[i]) - 2)\n            encrypted += chr(ord(s[26-i-1]) - 2)\n        # The string is too long, shift it down and up\n        # Convert to lowercase\n        for i in range(26):\n            encrypted += chr(ord(s[26-i]) - 2)\n            encrypted += chr(ord(s[i]) - 2)\n        # Return encrypted string\n        return encrypted\n",
        "num_ids": 236
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #Your code goes here\n    return s\n",
        "num_ids": 12
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    cipher = \"\"\n    for i in s:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            cipher = cipher + i\n    return cipher\n",
        "num_ids": 48
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Your code here\n    \n    return s.upper()",
        "num_ids": 17
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    new_str = \"\"\n    for c in s:\n        new_str += shift_character(c)\n    return new_str\n",
        "num_ids": 33
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    rotated_alphabet = []\n",
        "num_ids": 10
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code goes here\n",
        "num_ids": 8
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return ''.join(chr((ord(x)+ord(y))%256+ord('a')) for x,y in zip(s,''.join(chr(x) for x in range(ord('a'),ord('z')+1)) if x>=ord('a') and x<=ord('z') else s))\n",
        "num_ids": 81
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return lst[i+1]\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # sort the list based on the 2nd smallest element (first element)\n    lst.sort(key=lambda x: x[1])\n    \n    # return the 2nd smallest element\n    return lst[1]\n    \n    \nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n    print(next_smallest([1, 3]))\n    print(next_smallest([1, 4]))",
        "num_ids": 162
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # HINT: You may want to use a third-party library such as a heapq.\n    # You can consider these functions as well as your own version\n    # of it.\n    \n    if lst == []:\n        return None\n    \n    # find the 2nd smallest element in the list\n    smallest = heapq.nsmallest(2, lst)[0]\n    return smallest",
        "num_ids": 93
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    def next_smallest_helper(nums, prev_smallest):\n        if len(nums) == 1:\n            return nums[0]\n        \n        if prev_smallest is None:\n            prev_smallest = nums[0]\n        \n        if nums[0] <= prev_smallest:\n            return nums[0]\n        \n        prev_smallest = next_smallest_helper(nums[1:], prev_smallest)\n        \n        if nums[0] > prev_smallest:\n            return prev_smallest\n        \n        return nums[0]\n    \n    return next_smallest_helper(lst, None)\n",
        "num_ids": 168
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(1,len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i]\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return next((x for x in lst if x < lst[0]), None)\n",
        "num_ids": 22
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(len(lst)):\n        if lst[i] < lst[i-1]:\n            return lst[i-1]\n    return None\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    current_smallest = None\n    for i in range(len(lst)):\n        smallest_element = lst[i]\n        if smallest_element > current_smallest:\n            current_smallest = smallest_element\n            \n        if current_smallest is not None:\n            lst[i] = current_smallest\n        \n    return lst[1]\n",
        "num_ids": 93
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    S = S.lower().split()\n    count = 0\n    for word in S:\n        if word == \"?\":\n            count += 1\n        if word == \"!\":\n            count -= 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(S)):\n        if S[i] in [\".\", \"?\", \"!\"]:\n            return 1\n    return 0\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    boredomCount = 0\n    for word in S.split('.'):\n        if word[0].lower() in [\"i\", \"love\"]:\n            boredomCount += 1\n    return boredomCount",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # check if the word is a boring, and get the number of words\n    # with the same meaning\n    boredom_count = 0\n    word_count = 0\n    for word in S.split():\n        if \"?\" in word or \"!\" in word:\n            word_count += 1\n        elif word == \".\" or word == \"?\" or word == \"!\":\n            word_count += 1\n            boredom_count += 1\n        else:\n            print(\"Invalid word\")\n    return boredom_count, word_count\n",
        "num_ids": 126
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    word = S\n    boredoms = 0\n    #iterate through the words\n    for i in range(len(word)-1):\n        #if the next word is a '.', it's a '.', so break out of the loop\n        if word[i] == '.':\n            break\n        #if the word at the current index is a '?', then\n        #it's not a bored word, so add one to the total\n        if word[i] == '?':\n            boredoms += 1\n    return boredoms\n",
        "num_ids": 127
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    while S:\n        if S[0] == \".\":\n            S = S[1:]\n        else:\n            break\n    while S:\n        if S[0] == \"!\":\n            i += 1\n            S = S[1:]\n        else:\n            break\n    return i\n",
        "num_ids": 77
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    temp = set(S)\n    count = 0\n    for x in temp:\n        if x == \"I\" or x == \"!\" or x == \"?\" or x == \".\":\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for c in S:\n        if c == '.' or c == '?' or c == '!':\n            count = count + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    word_list = S.split('.')\n    \n    if len(word_list) <= 1:\n        return 0\n    else:\n        # If only one word, count it as a whole number.\n        # Also count number of words with a '?' or '!', so we won't count a word without these\n        count_one = len(word_list[1].split('?') + word_list[1].split('!'))\n        count_three = len(word_list[2].split('?') + word_list[2].split('!'))\n        if count_one == 0:\n            return count_three\n        else:\n            return count_one\n    \n",
        "num_ids": 160
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    boredoms = 0\n    for word in S.split(\".\"):\n        if word[0] == \"?\" or word[0] == \"!\":\n            boredoms += 1\n    return boredoms\n",
        "num_ids": 50
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    if any(isinstance(x, int) and isinstance(y, int) and isinstance(z, int) for x,y,z in zip(x,y,z)):\n        return x+y+z\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(x)!= int or type(y)!= int or type(z)!= int:\n        raise TypeError(\"Invalid inputs\")\n    return x == y or x == z or any(x == value for value in [x, y, z])\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (x == y and z == 0) or (x == 0 and z!= 0) or (x!= 0 and y == z)\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    print('any_int()', x, y, z)\n    return ((x+y==z) or (x==y and y==z)) or any_int(x, y, z)\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x is not None and y is not None and z is not None and type(x) == int and type(y) == int and type(z) == int and x + y + z == (x + y + z)\n    \ndef odd_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is odd.\n    Returns false in any other cases.\n    \n    Examples\n    odd_int(5, 2, 7) \u279e True\n    \n    odd_int(3, 2, 2) \u279e False\n",
        "num_ids": 141
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create an if statement that checks if the three numbers sum to zero.\n    if x + y + z == z*z*z:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x is not y:\n        return x == y or all([any_int(x, i, i) for i in [x, y]])\n    return x == y or all([any_int(x, i, i) for i in [x, y]])\n",
        "num_ids": 65
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if not isinstance(x, int) and not isinstance(y, int) and not isinstance(z, int):\n        return False\n    else:\n        x, y, z = list(map(int, (x, y, z)))\n        return x + y == z or x - y == z or x * y == z or x / y == z or x // y == z",
        "num_ids": 92
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Your code here\n    if type(x)!= int or type(y)!= int or type(z)!= int:\n        return False\n    if x+y==z or x-y==z or x*y==z or x/y==z or x//y==z or x%y==z or y==z:\n        return True\n    else:\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return (x == y and y == z and z == x)\n    return x == sum(x) and y == sum(y) and z == sum(z)\n",
        "num_ids": 41
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(reversed(message.lower().split()))\n",
        "num_ids": 19
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join(chr(((ord(message[i]) - ord('A')) + 2) % 26 + ord('A')) for i in range(len(message)))\n",
        "num_ids": 44
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = message.split(' ')\n    new_words = []\n    for word in words:\n        for letter in word:\n            if letter in alphabets:\n                new_word = word.replace(letter, alphabets[letter])\n                new_words.append(new_word)\n    return''.join(new_words)\n",
        "num_ids": 83
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    message = message.lower().replace('!', '@').replace('$', '#').replace('%', '%').replace('&', '&').replace('\"', '\"')\n    vowels = ('a', 'e', 'i', 'o', 'u', 'y')\n    message = ''.join(random.choice(vowels) + random.choice(vowels) + random.choice(vowels) for _ in range(len(message)))\n    return ''.join(random.choice(vowels) + random.choice(vowels) + random.choice(vowels) for _ in range(len(message)))\n",
        "num_ids": 153
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    message_enc = ''\n    for c in message:\n        if c in 'aeiouAEIOU':\n            message_enc += c.upper()\n        else:\n            message_enc += c\n    return message_enc\n",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # convert message to list of letters\n    letters = list(message)\n    # list of lowercase letters\n    lower_case_letters = [c.lower() for c in letters]\n    # list of uppercase letters\n    upper_case_letters = [c.upper() for c in letters]\n    # loop through each letter in lower_case_letters\n    for i in range(len(lower_case_letters)):\n        # loop through each letter in upper_case_letters\n        for j in range(len(upper_case_letters)):\n            # if letter is lowercase\n            if lower_case_letters[i].isalpha():\n                # if letter is uppercase\n                if upper_case_letters[j].isupper():\n                    # if letter in upper_case_letters and\n                    # letter not present in lower_case_letters\n                    if (upper_case_letters[j] not in lower_case_letters[i+1:] \n                        and lower_case_letters[i+1:] not in upper_case_letters):\n                        # if letter in upper_case_letters and not present in lower_case_letters\n                        upper_case_letters[j] = lower_case_letters[i+1:] + upper_case_letters[j]\n                        lower_case_letters[i+1:] = upper_case_letters[j]\n    # join all letters to a single string\n    # NOTE: there may be a better way to do this, but I might need it.\n    return \"\".join(upper_case_letters).replace('V', 'V'",
        "num_ids": 365
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # TODO: complete this function\n    \n    # this is just a silly method, I can feel it's better to use python's \n    # join function, as it takes one parameter: an iterable (e.g. a string)\n    # and returns a string, the join of all the characters in the iterable\n    # so that the resulting string becomes a single string.\n    #\n    # I use this function because it's so hard to solve, because it\n    # takes a string and a character to be replaced.\n    #\n    # you can reuse this function, but I've used it to try out some of\n    # the different things I can learn for you:\n    #\n    # -join()\n    # -join(iterable)\n    # -join(iterable, start=0)\n    # -join(iterable, stop=None)\n    # -join(iterable, sep=' ', start=0, end=None)\n    # -join(iterable, sep='\\n', start=0, end=None)\n    # -join(iterable, sep='\\n', start=0, end=None, subsequent_indent=4)\n    #\n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n    \n    \n    # TODO: complete this function\n",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    result = ''\n    for char in message:\n        if char.isalpha():\n            result += chr(ord('a') + ord(char.lower()) - \n                         (ord('a') + ord(char.upper())))\n        elif char.isnumeric():\n            result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    message = message.replace('A', 'Ae')\n    message = message.replace('E', 'Er')\n    message = message.replace('I', 'Ie')\n    message = message.replace('O', 'Oe')\n    message = message.replace('U', 'Ue')\n    message = message.replace('Y', 'Ye')\n    message = message.replace('a', 'aae')\n    message = message.replace('e', 'er')\n    message = message.replace('i', 'ie')\n    message = message.replace('o', 'oe')\n    message = message.replace('u', 'ue')\n    message = message.replace('y', 'yee')\n    message = message.lower()\n    return messag",
        "num_ids": 175
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # convert message to lowercase\n    message = message.lower()\n    \n    # replace all vowels\n    vowels = 'aeiou'\n    message = message.replace('e', 'e').replace('o', 'o').replace('i', 'i').replace('u', 'u')\n    message = message.replace('a', 'a').replace('o', 'o').replace('a', 'a').replace('i', 'i').replace('u', 'u')\n",
        "num_ids": 112
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Time complexity: O(n)\n    # Space Complexity: O(n)\n    prime = set()\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num//2+1):\n            if num % i == 0:\n                return False\n        return True\n    for i in lst:\n        if is_prime(i):\n            prime.add(i)\n    for i in lst:\n        if i in prime:\n            return i\n",
        "num_ids": 124
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # 1st search\n    x = 2\n    for i in range(len(lst)):\n        if lst[i] == 0:\n            break\n        elif lst[i] % x == 0:\n            x = lst[i] // x\n            continue\n        else:\n            x = lst[i] // x\n    \n    # 2nd search\n    s = 0\n    for i in range(len(lst)):\n        s += lst[i] * (2 ** i)\n    \n    return s\n",
        "num_ids": 131
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prime = []\n    for i in range(2, lst[0]):\n        if lst[i] > 1:\n            prime.append(i)\n            for j in range(i*i, lst[0]+1, i):\n                if lst[j] > 1:\n                    prime.append(j)\n                    break\n    return sum(list(map(lambda x: x, prime)))\n",
        "num_ids": 98
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x=0\n    for i in lst:\n        if i>0:\n            x+=i\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in lst:\n        for j in range(2,i):\n            if i % j == 0:\n                break\n        else:\n            if i == 0:\n                continue\n            elif i == 1:\n                return i\n    return int(lst[i-1])\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    \n    largest = 0\n    for el in lst:\n        prime = is_prime(el)\n        if prime and el > largest:\n            largest = el\n    return largest\n",
        "num_ids": 50
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def primes(n):\n        primes = []\n        for i in range(2,n+1):\n            if all(i%p for p in primes):\n                primes.append(i)\n        return primes\n    \n    lst = [int(s) for s in lst if s.isdigit()]\n    primes = primes(len(lst))\n    sums = [0]\n    for p in primes:\n        for i in range(p):\n            sums.append(int(lst[i]))\n    return max(sums)\n",
        "num_ids": 142
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prime_list = []\n    for i in range(len(lst)):\n        # if lst[i] > 0:\n        #     for j in range(lst[i]):\n        #         prime_list.append(lst[i])\n        #         lst[i] = 0\n        # else:\n        #     prime_list.append(lst[i])\n        prime_list.append(lst[i])\n    max_value = max(prime_list)\n    sum_list = 0\n    for i in range(len(prime_list)):\n        sum_list += prime_list[i] * (pow(prime_list[i], max_value, max_value))\n    return sum_list\n",
        "num_ids": 177
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        s += lst[i]\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"\"\"Find the prime numbers for the given numbers.\n    Find the largest prime number that satisfies these conditions.\n    \"\"\"\n    max_int = int(max(lst)) + 1\n    max_int2 = max(lst)\n    # if list contains only ints return the first element\n    if len(lst) == 1:\n        return max_int\n    # else\n    prime = [True for x in range(max_int)]\n    for n in lst:\n        if prime[n] == True:\n            prime[n] = False\n        else:\n            prime[n] = True\n    # return max_int2\n    result = 0\n    for i in range(2,max_int2+1):\n        if prime[i] == True:\n            for j in range(i+i, max_int+1, i):\n                if prime[j] == True:\n                    result += n\n    return result\n",
        "num_ids": 219
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for key in dict:\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(dict) == dict:\n        check = True\n        for key in dict.keys():\n            if type(key) == str and len(key) > 0:\n                if key.isupper() == True:\n                    check = check_dict_case(dict[key].lower())\n                else:\n                    check = check_dict_case(dict[key].upper())\n        return check\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for k,v in dict.items():\n        if type(v) == str:\n            if k.lower() == v.lower():\n                return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for key in dict.keys():\n        if not isinstance(key, str) or len(key) <= 0:\n            return False\n    for key in dict.keys():\n        if not isinstance(key, str) or len(key) > 0:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            if all(c.isdigit() for c in key):\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for key in dict:\n        if type(key)!= str and key.lower() in dict.keys():\n            return False\n        if type(key) == str and key.upper() in dict.keys():\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for k in dict.keys():\n        if not isinstance(k, str):\n            return False\n    for k in dict.keys():\n        if len(k) >= 2:\n            if not isinstance(dict[k][0], str):\n                return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        # check for empty dict\n        if not dict:\n            return False\n        \n        # check for string case\n        for key in dict.keys():\n            # check for empty string or string case\n            if not key.isalpha():\n                return False\n            \n            # check for capital letter\n            if not key.isupper():\n                return False\n        \n        # check for string case\n        for key in dict.keys():\n            # check for all lower case\n            if key.islower():\n                return False\n        \n        # check for string case\n        for key in dict.keys():\n            # check for all upper case\n            if key.isupper():\n                return False\n    \n    except TypeError:\n        return False\n    \n    except ValueError:\n        return False",
        "num_ids": 184
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for key in dict:\n        if not isinstance(key, str):\n            return False\n        elif not key.isupper() and key.islower():\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1,n):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    ans = []\n    for i in range(n+1):\n        if is_prime(i):\n            ans.append(i)\n    return ans\n    # Solution 1\n    # ans = []\n    # for i in range(n+1):\n    #     if is_prime(i):\n    #         ans.append(i)\n    # return ans\n    # Solution 2\n    # return [i for i in range(n+1) if is_prime(i) and i <= n]\n",
        "num_ids": 119
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    for i in range(n+1, 1, -1):\n        if is_prime(i):\n            result.append(i)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    from itertools import permutations\n    l = list(permutations(range(1, n+1)))\n    return [x for x in l if x>1]\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prime_list = []\n    for i in range(1, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_list.append(i)\n    return prime_lis",
        "num_ids": 61
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    prime_nums = [1]\n    prime_nums_up_to = [1]\n    for i in range(2, n):\n        if prime_nums[i] == 0:\n            prime_nums.append(i)\n            prime_nums_up_to.append(i)\n        elif prime_nums[i] == 1:\n            prime_nums.append(i)\n            prime_nums_up_to.append(i)\n    return prime_nums_up_to + count_up_to(n - 1)\n",
        "num_ids": 161
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # write your code here\n    arr = [0]\n    for i in range(2, n+1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\n",
        "num_ids": 49
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = []\n    prime = []\n    for i in range(n):\n        if is_prime(i):\n            count.append(i)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for i in range(n,0,-1):\n        if is_prime(i):\n            result.append(i)\n    return result\n    \nprint(count_up_to(5))\n",
        "num_ids": 53
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime_list = []\n    for n in range(2, n + 1):\n        for num in range(2, n):\n            if n % num == 0:\n                break\n        else:\n            prime_list.append(n)\n    return prime_list\n",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # write your code here\n    product = 1\n    for i in range(len(a)):\n        product *= int(a[i])\n    product = product * int(b)\n    \n    return product\n    pass\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    p = 0\n    while b > 0:\n        x = a % 10\n        p = (p * 10) + x\n        a = a // 10\n        b = b // 10\n    return p\n",
        "num_ids": 58
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert isinstance(a, int)\n    assert isinstance(b, int)\n    assert a >= 0\n    assert b >= 0\n    product = 1\n    while a!= 0:\n        product *= 10\n        product += a % 10\n        a = a // 10\n    while b!= 0:\n        product *= 10\n        product += b % 10\n        b = b // 10\n    return product\n",
        "num_ids": 98
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_a = bin(a).replace(\"0b\", \"\")\n    num_b = bin(b).replace(\"0b\", \"\")\n    \n    # first multiply the digit by the product of the two ints\n    product = 0\n    for d in range(len(num_a)):\n        product = product*int(num_a[d]) + (d+1)*int(num_b[d])\n    return product\n",
        "num_ids": 103
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    c = 0\n    for i in range(len(a)):\n        c += a[i] * b[i]\n    return c\n",
        "num_ids": 35
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # If the input is less than 0, then return the product of all the digits.\n    # Otherwise, compute the product of digits from the input.\n    if isinstance(a, int) and isinstance(b, int):\n        if a == 0:\n            return b\n        return multiply(b, a % b)\n    \n    # Otherwise, return the product of the digits from the input.\n    elif isinstance(a, int):\n        return a * multiply(a, b)\n    \n    elif isinstance(b, int):\n        return b * multiply(a, b)\n    \n    else:\n        return None\n        \n",
        "num_ids": 152
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(a)):\n        result += a[i] * b[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    answer = 0\n    for digit in str(a):\n        answer *= 10\n        answer += int(digit)\n    answer *= b\n    return answer\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #a,b = int(a), int(b)\n    a = int(a)\n    b = int(b)\n    mult = 1\n    while a > 0:\n        mult = mult * b\n        a,b = a%b, b\n    return mult\n",
        "num_ids": 66
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in 'AEIOU':\n                n += 1\n    return n\n",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] > 'A':\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    c = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            c += 1\n    return c\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # s = str(s)\n    # return len([char for char in s if char.isupper()])\n    \n    return len(sum([1 for char in s if char.isupper()]) if sum([1 for char in s if char.isupper()]))\n",
        "num_ids": 65
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum(1 for i in range(0, len(s)) if s[i].isupper())\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                n += 1\n    return n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if (i % 2 == 0):\n            vowels += 1\n        \n    return vowels\n",
        "num_ids": 44
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(value, 0)\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return round(value, 0)",
        "num_ids": 9
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write a function that takes a value representing a number\n    # and returns the closest integer to it. If the number is equidistant\n    # from two integers, round it away from zero.\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # my code here\n    minimum = float('inf')\n    result = float('inf')\n    for i in value:\n        if i < minimum:\n            result = i\n            minimum = i\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Calculate the lowest number less than value.\n    if value == \"\":\n        return 0\n    else:\n        lower = value.lower()\n        value_lower = float(value.lower())\n        value_higher = float(value.upper())\n        if value_lower < value_higher:\n            return value_lower\n        else:\n            return value_higher\n",
        "num_ids": 87
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # You are asked to determine the distance from the\n    # two integers represented by the passed in string to the\n    # closest integer.\n",
        "num_ids": 32
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if value == \"\":\n        return 0\n    integer = int(value)\n    if integer > 0:\n        round_value = 0\n        while integer > 0:\n            integer %= 10\n            round_value += 1\n        return round_value\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Return integer if input is a string\n    if type(value) is str:\n        # Split string in number and digits\n        digits = re.findall(r'\\d+', value)\n        # Check if number is equidistant from two integers\n        # Round number to nearest integer if it is equidistant\n        if len(digits) == 2:\n            return int(digits[0]) + closest_integer(digits[1])\n        else:\n            return int(digits[0])\n    else:\n        # Round to nearest integer\n        return round(value)\n",
        "num_ids": 138
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    number_to_round = value\n    difference = abs(value)\n    while difference > 0:\n        value = difference // value\n        number_to_round = difference % value\n        difference = difference // value\n    return value\n",
        "num_ids": 58
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    if not isinstance(value, str):\n        raise TypeError('The argument must be a string')\n    elif value.isdigit():\n        return int(value)\n    elif len(value) == 2 and value[0] == '-':\n        # It is a negative integer, so we round it away from 0\n        return int(value[1:])\n    else:\n        # We are here if the given number is not a number\n        value_int = int(value)\n        smallest_int = value_int\n        greatest_int = value_int\n        for i in range(1, value_int):\n            if value[i] == '-':\n                smallest_int = i\n                greatest_int = i\n        return smallest_int",
        "num_ids": 186
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # define a return value\n    l = []\n    for i in range(n):\n        if i % 2 == 0:\n            l.append(i+1)\n        else:\n            l.append(i+1)\n    return l\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n <= 0:\n        return [0]\n    else:\n        s = [i + 1 for i in range(n)]\n        for i in range(n):\n            if i % 2 == 0:\n                s[i] = s[i] // 2\n            else:\n                s[i] = s[i] // 3 + 1\n        return s\n",
        "num_ids": 87
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here.\n    count = [0, 0, 0]\n    n = n // 2\n    if n % 2 == 0:\n        count[n] = 1\n        return count\n    else:\n        count[n] = 2\n        return count\n",
        "num_ids": 64
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    levels = []\n    for _ in range(n):\n        levels.append(odd_or_even(n))\n    return levels",
        "num_ids": 32
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return [1]\n",
        "num_ids": 25
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [n//2, n//2+1",
        "num_ids": 13
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    piles = []\n    for i in range(n):\n        if i % 2!= 0:\n            piles.append(i+1)\n        else:\n            piles.append(i+1)\n",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n-1)\n    return [n // 2, n * 2 + 1] + make_a_pile(n-1",
        "num_ids": 78
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 2 == 1:\n        return [n//2, n//2+1]\n    else:\n        return [n//2+1, n//2]\n",
        "num_ids": 42
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s.split(\",\")",
        "num_ids": 9
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(map(str.split, s.split(\",\")))",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s.split(',')\n    \n    \ndef words_string_short(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words in each word\n    separated by commas.\n    \n    For example:\n    words_string_short(\"Hi, my name is John\") == [\"Hi\", \"John\"]\n    words_string_short(\"One, two, three, four, five, six\") == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]\n    \"\"\"\n    return s.split(',')\n",
        "num_ids": 153
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for word in s.split(','):\n        res.append(word)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return words_array(s.split(','))\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [word.strip().split(\",\") for word in s.split()]\n",
        "num_ids": 21
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # return words_list_from_string(s.split(\",\"))\n    return list(words_list_from_string(s.split(\",\")))\n",
        "num_ids": 38
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = s.strip()\n    split_array = s.split(\",\")\n    return split_array\n    \ndef words_string_solution(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string_solution(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string_solution(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    from itertools import groupby\n    s = s.strip()\n    split_array = s.split(\",\")\n    grouped_array = list(groupby(split_array))\n    return grouped_array\n    \ndef words_string_solution_solution(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string_solution_solution(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string_solution_solution_solution(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    from itertools import groupby\n    s = s.strip()\n    split_array = s.split(\",\")\n    grouped_array = list(groupby(split_array))\n    return grouped_array\n",
        "num_ids": 409
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    nums = []\n",
        "num_ids": 7
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    x = abs(x)\n    y = abs(y)\n    if x % 2 == 0 and y % 2 == 0:\n        return x // 2 + y // 2\n    elif x % 2 == 0 and y % 2 == 1:\n        return x // 2 + y // 2 + 1\n    elif x % 2 == 1 and y % 2 == 0:\n        return x // 2 + y // 2 + 1\n    elif x % 2 == 1 and y % 2 == 1:\n        return -1\n    else:\n        return -1\n",
        "num_ids": 128
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #implement your code here\n    return -1\n",
        "num_ids": 14
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(x, y):\n        if i % 2 == 0:\n            result = max(result, i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # You'll use the Python built-in max function to get the \n    # largest even integer number.\n    # \n    # The max function is implemented using the argmax function, which\n    # returns the index of the largest element in a given array.\n    #\n    # Note that the returned index is not inclusive, so this code is not\n    # valid.\n",
        "num_ids": 87
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if (x >= 0 and y >= 0):\n        return x\n    elif (x >= 0 and y < 0):\n        return y\n    else:\n        return -1\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if x >= y:\n        num = x\n    else:\n        num = y\n    if num % 2 == 0:\n        return num\n    else:\n        return -1\n",
        "num_ids": 44
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # get the value from the input\n    num = int(input(f\"Enter a number between {x} and {y} inclusive: \"))\n",
        "num_ids": 35
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Check for positive integers\n    if type(x) == int and type(y) == int:\n        # Check for x < 0 and y < 0\n        if x < 0 or y < 0:\n            return -1\n        # Check for x <= y\n        if x <= y:\n            # Get the largest number\n            num = x\n            if x % 2 == 0:\n                # Check if the number is even\n                num = y\n            # Check if the number is odd\n            if num % 2 == 1:\n                # If even\n                if num > y:\n                    return num\n                # If odd\n                else:\n                    return -1\n            # If neither odd or even\n            else:\n                return -1\n        # Check for x >= y\n        else:\n            num = y\n            if x % 2 == 0:\n                num = x\n            # Check if the number is even\n            if num % 2 == 1:\n                # If even\n                if num > y:\n                    return num\n                # If odd\n                else:\n                    return -1\n            # If neither odd or even\n            else:\n                return -1\n    # If neither x nor y is a positive integer\n    else:\n        return -1\n",
        "num_ids": 285
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num = 0\n    for i in range(x, y):\n        if i % 2 == 0:\n            num = i\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + str(n)[2:]\n    elif n < m:\n        return f\"{n:b}\"\n    else:\n        return f\"{n:b}_{m:b}\"\n",
        "num_ids": 72
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    return '{:0b}'.format(int((n + m) / 2)).zfill(n.bit_length() // 2)\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # output = str(n)+\".\"+str(m)\n    output = str(n)+\".\"+str(m).zfill(2)\n    if n > m:\n        output = output[:-2]\n    return output\n    \nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n",
        "num_ids": 107
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if m > n:\n        return -1\n    \n    # You are going to return the integer in binary form for the final answer.\n    rounded_list = []\n    for i in range(n, m+1):\n        binary = bin(i)[2:]\n        rounded_list.append(binary)\n    # You can only return numbers and binary digits.\n    for i in range(len(rounded_list)):\n        rounded_list[i] = rounded_list[i][:len(rounded_list[i])-1]\n    answer = \"\".join(rounded_list)\n    return answer",
        "num_ids": 141
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < m:\n        return \"-1\"\n",
        "num_ids": 14
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # get sum of digits\n    sum = 0\n    for i in range(n, m+1):\n        sum = sum + int(format(i, 'b'))\n    \n    # return sum of digits\n    return str(sum)\n",
        "num_ids": 58
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import math\n    if n > m:\n        return \"-\"\n    return str(int(math.ceil(round(n/m, 0))))\n",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    return str(bin(n + (m - n) // 2))[2:]\n",
        "num_ids": 23
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n, m = int(n), int(m)\n    \n    if n > m:\n        return str(int(round(n / m * 2) + (n % m) * 2))\n    else:\n        return str(int(round((n - m) * 2 + (n % m) * 2) / 2))\n    # return str(round((n - m) * 2 + (n % m) * 2))\n    \nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33)",
        "num_ids": 166
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return str(bin(n+m).replace(\"0b\", \"\").zfill(n+m)[-1])\n",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    # return [i for i in x if i % 2 == 0]\n    return [i for i in x if i % 2!= 0]\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def is_digit(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return type(x) == int or x.is_integer()\n    \n    def is_digit_only(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return type(x) in [int, float] and x.is_integer()\n    \n    def is_zero(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return x == 0\n    \n    def is_number(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return type(x) == int or x.is_integer()\n    \n    def is_zero_only(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return type(x) in [int, float] and x.is_integer() and not is_zero(x)\n    \n    def is_number_only(x):\n        \"\"\"Return true if x is a number, false otherwise.\"\"\"\n        return type(x) in [int, float] and not is_digit_only(x) and not is_zero_only(x)\n    \n    if is_digit(x):\n        return sorted(list(set(map(int, map(str, x)))))\n    \n    if is_digit_only(x):\n        return sorted(list(set(map(str, x))))\n    \n    if is_zero(x):\n        return []\n    \n    if is_number_only(x):\n        return sorted(list(set(x)))\n    \n    return []\n",
        "num_ids": 386
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return list(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    new_list = []\n    for i in x:\n        if not i % 10:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    output = []\n    if len(x) < 1:\n        return output\n    x.sort()\n    for i in x:\n        if i % 10!= 0:\n            output.append(i)\n    return output\n",
        "num_ids": 55
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Take an example\n    # [15, 33, 1422, 1]\n    # [152, 323, 1422, 10]\n    # [15, 33, 1422, 11, 32, 33, 123, 1]\n    # [152, 323, 1422, 10]\n    # [32, 33, 123, 1]\n    # [15, 33, 1422, 11, 32, 33, 123, 1]\n    # [15, 33, 123, 1]\n",
        "num_ids": 112
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = []\n    x.sort()\n    for i in range(len(x)):\n        for j in range(i + 1, len(x)):\n            if x[i] % 10 == x[j] % 10:\n                lst.append(x[i])\n    return lst\n",
        "num_ids": 74
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Check all elements in x and sort it in decreasing order\n    y = []\n    for el in x:\n        if el % 2 == 0:\n            y.append(el)\n    return y\n",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    x = sorted(x)\n    # Only 1 digit is even.\n    x[1::2] = [i for i in x if i % 2 == 0]\n    return x\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = list(str(x))\n    y = []\n    for e in s:\n        if int(e)%2 == 0:\n            y.append(e)\n    return y\n",
        "num_ids": 47
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    arr.sort()\n    \n    ans = []\n    \n    for i in arr:\n        if i >= 1 and i <= 9:\n            ans.append(i)\n        else:\n            ans.append(i[::-1])\n    \n    return ans\n",
        "num_ids": 64
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def sort_by_length(arr):\n        if arr == []:\n            return []\n",
        "num_ids": 25
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    sorted_list = sorted(arr, reverse=True)\n    ans = []\n    for i in range(0, len(arr), 2):\n        ans.append(sorted_list[i])\n    ans.append(sorted_list[-1])\n    return ans\n",
        "num_ids": 83
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    \n    arr.sort()\n    \n    arr.reverse()\n    return arr\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    arr.sort()\n    new_arr = []\n    for num in arr:\n        new_arr.append(str(num))\n    return new_arr\n",
        "num_ids": 39
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not arr or not arr[0] <= 1 or arr[0] > 9:\n        return []\n",
        "num_ids": 26
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # sort the array\n    arr.sort()\n    # reverse the array\n    arr.reverse()\n    # replace the bad number with the correct name\n    arr = [str(x) for x in arr]\n    arr.insert(0, 'One')\n    arr.append('Two')\n    # return it\n    return arr\n",
        "num_ids": 78
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr_ = arr.copy()\n    if not arr_:\n        return []\n    # swap\n    while arr_:\n        swap_ = arr_.pop(0)\n        swap_ = swap_ * -1\n        arr_.insert(0, swap_)\n        # sort\n        arr_ = sorted(arr_)\n    # return\n    return [str(i) for i in arr_]\n",
        "num_ids": 97
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    arr.sort()\n    \n    if len(arr) == 0:\n        return []\n    \n    if len(arr) == 1:\n        return [str(arr[0])]\n    \n    if len(arr) == 2:\n        if arr[0] < arr[1]:\n            return [str(arr[0])] + by_length(arr[1:])\n        else:\n            return [str(arr[0])] + by_length(arr[1:]) + [\"Two\", \"Two\"]\n    \n    if arr[0] > arr[-1]:\n        return by_length(arr[1:]) + by_length(arr[1:]) + [\"One\", \"One\"]\n    \n    return by_length(arr[1:]) + by_length(arr[1:]) + [\"One\", \"One\"]\n    \n",
        "num_ids": 202
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    if arr == []:\n        return []\n    \n    sorted_arr = sorted(arr)\n    sorted_arr.reverse()\n",
        "num_ids": 36
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorial = []\n    for i in range(1, n + 1):\n        factorial.append(i * f(i))\n    return factorial\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial = [1]\n    for i in range(1, n + 1):\n        factorial.append(i * factorial[i-1])\n    return factorial\n",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorial_values = [1]\n    for i in range(1, n + 1):\n        factorial_values.append(factorial_values[i - 1] * i)\n    return factorial_values",
        "num_ids": 51
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1]\n    for i in range(1,n+1):\n        factorial.append(i * factorial[i-1])\n    return factorial\n",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    factorial = []\n    for i in range(1, n+1):\n        factorial.append(i)\n        if i % 2 == 0:\n            factorial.append(factorial[i//2] * 2)\n    return factorial\n",
        "num_ids": 60
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorials = [1]\n    # TODO\n    return factorials\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    factorial_i = 1\n    if n % 2 == 0:\n        factorial_i = factorial_i * n\n        return [factorial_i, n]\n    else:\n        for i in range(2, n):\n            factorial_i = factorial_i * i\n            return [factorial_i, n]\n",
        "num_ids": 81
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    factorial_of_n = [1]\n    if n <= 0:\n        return factorial_of_n\n    else:\n        for i in range(1, n+1):\n            factorial_of_n.append(i * factorial_of_n[i - 1])\n        return factorial_of_n\n",
        "num_ids": 79
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    factorial_list = [1]\n    for i in range(1, n+1):\n        factorial_list.append(factorial_list[i]*i)\n",
        "num_ids": 43
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorial = [1]\n    for i in range(2, n+1):\n        factorial.append(i * factorial[i-1])\n    return factorial[:n]\n",
        "num_ids": 47
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_number = 0\n    even_number = 0\n",
        "num_ids": 15
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_odd_palindrome = ()\n    odd_even_palindrome = ()\n    for i in range(1, n+1):\n        even_odd_palindrome += (i, i)\n        odd_even_palindrome += (i, i)\n",
        "num_ids": 66
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_odd_palindrome_pair = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome_pair.append(i)\n        else:\n            odd_palindrome_pair = (n-i)//2\n            even_odd_palindrome_pair.append(odd_palindrome_pair)\n    return tuple(even_odd_palindrome_pair)\n",
        "num_ids": 110
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i)\n            if i > int(n ** 0.5) + 1:\n                even_palindrome += 1\n            if i < int(n ** 0.5) + 1:\n                odd_palindrome += 1\n    return result, (even_palindrome, odd_palindrome)\n",
        "num_ids": 134
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return {\n        1: [2],\n        2: [1, 3],\n        3: [1, 2, 4],\n        4: [1, 2, 3, 5, 6],\n        5: [1, 2, 3, 4, 6, 7, 8, 9, 11],\n        6: [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n        7: [1, 2, 4],\n        8: [1, 2, 3, 4, 6],\n        9: [1, 2, 3, 4, 6, 7, 8, 9, 11],\n        10: [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 35",
        "num_ids": 1025
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return (0, 0)\n",
        "num_ids": 16
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # init\n    even = 0\n    odd = 0\n",
        "num_ids": 15
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even_odd_palindrome_number = []\n    n_list = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                even_odd_palindrome_number.append(j)\n            else:\n                n_list.append(j)\n        #print(f'{n_list}')\n    #print(f'{even_odd_palindrome_number}')\n    return (len(even_odd_palindrome_number), n_list)\n",
        "num_ids": 138
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return None\n    even_odd = []\n    for x in range(1, n+1):\n        x_even = x % 2\n        x_odd = x % 4\n        if x_even == 0:\n            even_odd.append(1)\n        elif x_odd == 0:\n            even_odd.append(2)\n        else:\n            even_odd.append(3)\n    return tuple(even_odd)\n",
        "num_ids": 112
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for x in arr:\n        if x >= 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0, len(arr)):\n        num = arr[i]\n        if num >= 0:\n            count += 1\n        else:\n            num = num * -1\n            num = num // 10\n            count += 1\n",
        "num_ids": 64
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n        else:\n            count -= 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            result += 1\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return len([num for num in arr if num >= 0])\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # find all the negative and even numbers\n    m = []\n    for num in arr:\n        if num >= 0:\n            m.append(num)\n        else:\n            m.append(-num)\n    print(m)\n    count = 0\n    for num in m:\n        if num >= 0:\n            count += 1\n        else:\n            count -= 1\n    return count\n",
        "num_ids": 93
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr_count = collections.Counter(arr)\n    return len(arr_count)\n",
        "num_ids": 22
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here.\n    count = 0\n    for num in arr:\n        if (num > 0):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    # Your code here\n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def check(arr):\n        if arr == []:\n            return False\n        if len(arr)==1:\n            return True\n",
        "num_ids": 33
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    for i in range(0,len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n    \ndef move_two_balls(arr):\n    \"\"\"Given an array of N integers arr[1], arr[2],..., arr[N], the N-1 right-shifted\n    elements are stored in the array. If it is possible to get the sorted array by \n    performing the operation, then return True else return False.\n    \n    Two right shift operations is:\n        Right shift by 1 means swap the values at position 2 and 3.\n        Right shift by 2 means swap the values at position 1 and 3.\n        Right shift by 3 means swap the values at position 0 and 2.\n        \n    So we perform the swap operation and it will return true if it is possible to\n    get the sorted array by performing the operation. Otherwise return False.\n    \n    The given array is guaranteed to have unique elements.\n    \n    For Example:\n    \n    move_two_balls([3, 4, 5, 1, 2])==>True\n    Explanation: We perform 2 right shift operations.\n                    We swap the values at positions 2 and 3.\n                    We swap the values at positions 1 and 3.\n                    We swap the values at positions 0 and 2.\n                    \n                    Then we perform 2 right shift operations.\n                    We swap the values at positions 2 and 1.\n                    We swap the values at positions 0 and 1.\n                    We swap the values at positions 3 and 1.\n                    We swap the values at positions 0 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    We swap the values at positions 3 and 0.\n                    \n                    This is because the elements at positions 2 and 1\n                    have been swapped by 1 right shift operation.\n    move_two_balls([3, 4, 5, 1, 2])==>False\n    Explanation: We perform 2 right shift operations.\n                    We swap the values at positions 2 and 3.\n                    We swap the values at positions 1 and 3.\n                    We swap the values at positions 0 and 2.\n                    \n                    Then we perform 2 right shift operations.\n                    We swap the values at positions 2 and 1.\n                    We swap the values at positions 0 and 1.\n                    We swap the values at positions 3 and 1.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                    Finally we perform 2 right shift operations.\n                    We swap the values at positions 2 and 0.\n                    We swap the values at positions 1 and 0.\n                    \n                ",
        "num_ids": 1025
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l = len(arr)\n    if l == 0:\n        return True\n    \n    # initialization\n    # no. of operations done by one iteration\n    # overall operation counts for the current iteration\n    i = 0\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    move_one_ball_counter = 0\n    new_arr = []\n",
        "num_ids": 19
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #if the array is empty\n    if len(arr) == 0:\n        return False\n    else:\n        #get the index position of the first non-decreasing element\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            mid = (start + end) // 2\n            if arr[mid] < arr[mid + 1]:\n                end = mid\n            else:\n                start = mid + 1\n        #If the array is non-decreasing then move all elements in the array\n        #from the start to the end index of array.\n        #Then the last element will be moved from the end index to the start index.\n        #If the last element in array is larger than the current index then\n        #we can put the element at the end index.\n        if arr[start] > arr[end]:\n            return move_one_ball(arr[start:end + 1])\n        else:\n            return move_one_ball(arr[end + 1:])",
        "num_ids": 234
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(arr)\n    for i in range(0,n):\n        val = arr[i]\n        for j in range(0,n-i):\n            arr[j+i] = arr[j+i+1]\n        arr[j+i+1] = val\n    \n    return arr[1:]==arr[:1] and arr[1:]==arr[1:]\n",
        "num_ids": 95
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    #Step 1: sort the array by itself\n    arr = sort_array(arr)\n    \n    #iterate from the start to the end of the array\n    for i in range(1, len(arr)):\n        #If it is a valid operation then\n        #move the elements in the array by the number of times it will\n        #be performed right shift\n        if (not is_valid_operation(arr[i-1], arr[i], i)):\n            return False\n    #Then return true\n    return True\n",
        "num_ids": 125
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # solution:\n    # def move_one_ball(arr):\n    #     if arr == []:\n    #         return True\n    #     elif len(arr) == 1:\n    #         return False\n    #     else:\n    #         for i in range(len(arr)-2):\n    #             arr[i], arr[i+1] = arr[i+1], arr[i]\n    #             move_one_ball(arr)\n    #             if arr == sorted(arr):\n    #                 return True\n    #             arr[i], arr[i+1] = arr[i+1], arr[i]\n    #         return False\n    # return move_one_ball(arr)\n",
        "num_ids": 170
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n",
        "num_ids": 25
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # If both lists are empty, then return \"YES\"\n    if len(lst1) == 0 and len(lst2) == 0:\n        return \"YES\"\n    \n    # If the first list is empty, then we need to check if the second list is\n    # even length and if so, then we need to check if the first list is even\n    # length and if so, then we need to check if the second list is even length\n    # and if so, then we need to exchange the elements of lst1 and lst2\n    if len(lst1) == 0 and len(lst2) % 2 == 1:\n        if lst2[0] % 2 == 1:\n            return exchange(lst2[1:len(lst2)], lst2[1:len(lst2)])\n        return \"NO\"\n    \n    # If the first list is not even length and if the second list is even length\n    # then we need to check if the first list is odd length and if so, then we\n    # need to check if the second list is odd length and if so, then we need to\n    # exchange the elements of lst1 and lst2\n    if len(lst1) % 2!= 1:\n        if lst2[0] % 2!= 1:\n            return exchange(lst2[1:len(lst2)], lst2[1:len(lst2)])\n        return \"NO\"\n    \n    # We need to check if the first list is odd length and if so, then we need to\n    # exchange the elements of lst1 and lst2\n    if len(lst1) % 2 == 1:\n        return exchange(lst1[1:len(lst1)], lst1[1:len(lst1)])\n    return \"NO\"\n",
        "num_ids": 433
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # write your code here\n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 31
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR CODE HERE\n    if len(lst1)%2 == 0:\n        if len(lst2)%2 == 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n    pass\n    #raise NotImplementedError\n",
        "num_ids": 73
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if lst1 and lst2:\n        lst1.sort()\n        lst2.sort()\n        if lst1[0] == lst2[-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 71
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    lst1.sort()\n    lst2.sort()\n    if(lst1[0]%2!=0 and lst1[-1]%2!=0):\n        return \"NO\"\n    elif(lst1[0]%2==0 and lst1[-1]%2==0):\n        return \"YES\"\n    elif(lst1[-1]%2==0 and lst1[0]%2==0):\n        return \"YES\"\n    elif(lst1[0]%2==0 and lst1[-1]%2!=0):\n        return \"YES\"\n    elif(lst1[-1]%2==0 and lst1[0]%2!=0):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 206
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    if len(lst1) % 2 == 0 and len(lst2) % 2 == 0:\n        for i in range(len(lst2)):\n            if lst1[i] % 2 == lst2[i] % 2:\n                return \"YES\"\n    return \"NO\"\n",
        "num_ids": 103
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    try:\n        result = []\n        for i in range(0, len(lst1)):\n            if (lst1[i] % 2 == 0):\n                result.append(lst1[i])\n            else:\n                result.append(lst2[i])\n        print(result)\n        return \"YES\"\n    except:\n        return \"NO\"\n",
        "num_ids": 91
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # Initialize a variable to represent the result of the exchange\n    x = \"NO\"\n    \n    # Iterate over the elements in the lists\n    for i in range(len(lst1)):\n        # If the element has the same value as the first element of the list,\n        # it can be exchanged\n        if lst1[i] == lst2[i]:\n            # Increment the length of the list by one\n            # This is to save the number of elements of the list being zero\n            lst2[i] = 0\n        \n        # If the element has the same value as the second element of the list,\n        # it can be exchanged\n        elif lst1[i] == lst2[i]:\n            # Increment the length of the list by one\n            # This is to save the number of elements of the list being one\n            lst2[i] = 1\n        \n        # If the element does not have the same value as the first element\n        # of the list, it can be exchanged\n        else:\n            # Increment the length of the list by one\n            # This is to save the number of elements of the list being both\n            # integers\n            lst2[i] = 2\n    \n    # If the lists are empty, then the result of the exchange\n    # is \"YES\"\n    if len(lst1) == 0 or len(lst2) == 0:\n        x = \"YES\"\n    \n    # Return the result of the exchange\n    return x\n",
        "num_ids": 354
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    d = {}\n    for l in test.lower():\n        if l not in d:\n            d[l] = 1\n        else:\n            d[l] += 1\n",
        "num_ids": 43
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    letter_count = {}\n    for letter in test:\n        if letter not in letter_count:\n            letter_count[letter] = 0\n        letter_count[letter] += 1\n    maximum_count = 0\n    for letter in letter_count:\n        if letter_count[letter] > maximum_count:\n            maximum_count = letter_count[letter]\n            maximum_letter = letter\n    return {maximum_letter: letter_count[maximum_letter]}",
        "num_ids": 109
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(test)!= str:\n        raise TypeError(\"test must be a string\")\n    \n    # Dictionary to hold the letter with the most repetition.\n    # Key: letter, value: number of times the letter appears.\n    hist = {}\n    \n    # Iterate over the string to get the occurrences of each letter.\n    # O(n)\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    \n    # O(n)\n    return hist\n",
        "num_ids": 131
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # First pass: letters have the same frequency\n    letters = {}\n    for letter in test:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    return letters",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    letter_dict = {}\n    for letter in test:\n        if letter not in letter_dict:\n            letter_dict[letter] = 0\n        letter_dict[letter] += 1\n    \n    for letter in letter_dict:\n        letter_dict[letter] = letter_dict[letter] / len(test)\n    \n    return letter_dict\n",
        "num_ids": 86
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # build histogram\n    letter_hist = {}\n    \n    for letter in test:\n        if letter in letter_hist:\n            letter_hist[letter] = letter_hist[letter] + 1\n        else:\n            letter_hist[letter] = 1\n    \n    # find most common letter\n    letter = max(letter_hist, key=letter_hist.get)\n    return {letter: letter_hist[letter]}\n",
        "num_ids": 104
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    h = {}\n    for i in test.lower():\n        if i in h:\n            h[i] += 1\n        else:\n            h[i] = 1\n    return h\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    return counts\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    letters = dict()\n    for letter in test:\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    return letters\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    hist = {}\n    for i in test.lower():\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n",
        "num_ids": 46
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Base case, if both are empty, return false\n    if s == \"\" or c == \"\":\n        return (False,False)\n    if len(s) < len(c):\n        return (False,False)\n",
        "num_ids": 53
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if c not in s:\n        return ('',False)\n    s = s.replace(c, \"\")\n    if s==s[::-1]:\n        return ('',False)\n    else:\n        return ('',True)\n    ",
        "num_ids": 58
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if s==c:\n        return s,False\n    else:\n        return reverse_delete(s,c[1:])\ndef reverse_palindrome(s):\n    \"\"\"Task\n    We are given a string s. Check whether the string is palindrome or not.\n    If it is palindrome, return the result string.\n    If it is not, check whether the reverse is palindrome or not.\n    If it is palindrome, return the result string.\n    Return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", the result should be ('cde',False)\n    For s = \"abcdef\", the result should be ('cde',True)\n    For s = \"abcdefghijklmnopqrstuvwxyz\", the result should be ('gihjklmnopqrstuvwxyz',False)\n    For s = \"abcdefghijklmnopqrstuvwxyz\", the result should be ('gihjklmnopqrstuvwxyz',True)\n    \"\"\"\n    res,flag=reverse_delete(s,s[::-1])\n    if not flag:\n        return res,False\n    else:\n        return res[::-1],True\n",
        "num_ids": 301
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = list(s)\n    c = list(c)\n    i = len(s) - 1\n    j = len(c) - 1\n",
        "num_ids": 37
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = s[::-1]\n    if c in s:\n        return (s,True)\n    else:\n        return (s,False)\n",
        "num_ids": 38
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if s == c:\n        return \"The solution is correct\"\n    if len(s) < len(c):\n        return \"The solution is correct\"\n    if s[0:len(c)]!= c:\n        return \"The solution is correct\"\n    \n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)] == c:\n            return s[:i:len(c)] + s[i+len(c):] + s[i:i+len(c)] == c\n    return \"The solution is correct\"\ndef reverse_delete_dp(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return \"The solution is correct\"\n    if len(s) < len(c):\n        return \"The solution is correct\"\n    if s[0:len(c)]!= c:\n        return \"The solution is correct\"\n    \n    visited = [False for i in range(len(s))]\n    dp = [False for i in range(len(s))]\n    dp[0] = True\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)] == c:\n            visited[i] = True\n            for j in range(i,i+len(c)):\n                if visited[j]:\n                    dp[j] = True\n            break\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)]!= c:\n            dp[i] = False\n            break\n    \n    return dp, not visited\ndef reverse_delete_dp_rec(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    if s == c:\n        return \"The solution is correct\"\n    if len(s) < len(c):\n        return \"The solution is correct\"\n    if s[0:len(c)]!= c:\n        return \"The solution is correct\"\n    \n    visited = [False for i in range(len(s))]\n    dp = [False for i in range(len(s))]\n    dp[0] = True\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)] == c:\n            visited[i] = True\n            for j in range(i,i+len(c)):\n                if visited[j]:\n                    dp[j] = True\n            break\n    for i in range(len(s)-len(c)):\n        if s[i:i+len(c)]!= c:\n            dp[i] = False\n            break\n    \n    return dp, not visited\ndef reverse_delete_dp_rec_b(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome i",
        "num_ids": 1030
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if len(s)!= len(c):\n        return None\n    else:\n        return list(s),reverse_check(s,c)\n",
        "num_ids": 38
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = []\n    for i in range(len(s)):\n        if s[i] == c:\n            l.append(s[i])\n        else:\n            l.append(s[i])\n    if l == l[::-1]:\n        return (''.join(l),True)\n    else:\n        return(''.join(l),False)\n",
        "num_ids": 89
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = ''\n    for i in s:\n        if i in c:\n            result += i\n        else:\n            result += '?'\n    if result == reverse_delete(s,c):\n        return 'ok'\n    else:\n        return 'no'\n",
        "num_ids": 64
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # dic = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0}\n    # for i in range(len(s)):\n    #     if s[i] in dic:\n    #         dic[s[i]] += 1\n    #     else:\n    #         dic[s[i]] = 1\n    # for i in range(len(s)-1,-1,-1):\n    #     if s[i] in dic:\n    #         dic[s[i]] -= 1\n    #         if dic[s[i]] == 0:\n    #             del dic[s[i]]\n    #     else:\n    #         return None,False\n    # return s,True\n",
        "num_ids": 183
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odds = []\n    for string in lst:\n        count_dig = 0\n        for char in string:\n            if char.isdigit():\n                count_dig += 1\n        if count_dig % 2 == 0:\n            odds.append(string)\n    return odds",
        "num_ids": 68
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    result = []\n    for i in lst:\n        l = []\n        for j in i:\n            if j.isdigit():\n                l.append(j)\n            else:\n                l.append('the number of odd elements')\n        result.append(' '.join(l))\n    return result",
        "num_ids": 75
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    num_list = list(map(int, lst))\n    num_list.sort(reverse=True)\n    return([\"the number of odd elements \" + str(num_list[i]) + \" the str\" + str(i+1) + \" of the \" + str(i+2) + \" input.\" for i in range(0,len(num_list),2)])\n",
        "num_ids": 92
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd_list = []\n    for num in lst:\n        if '0' in num:\n            num = num.replace('0', '9')\n        if num not in odd_list:\n            odd_list.append(num)\n    return odd_list\n",
        "num_ids": 64
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst_str = []\n    for i in lst:\n        lst_str.append(str(len(set(i)))[1:])\n    odd = {}\n    for i in range(len(lst)):\n        odd.setdefault(lst_str[i],0)\n        odd[lst_str[i]] += 1\n    return(str(len(set(lst)))[1:])+\"the number of odd elements \"+str(len(lst))+\"n the str4ng \"+str(len(lst))+\"of the 4nput.\"\n",
        "num_ids": 140
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    for i in lst:\n        nums = list(i)\n        count = 0\n        for j in nums:\n            if j % 2!= 0:\n                count += 1\n        result.append(count)\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    string_list = [i for i in lst if '1' in i]\n    return string_list\n",
        "num_ids": 27
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for elem in lst:\n        for i in range(len(elem)):\n            if elem[i] == '0':\n                result.append(f\"the number of odd elements {i+1}n the str{i+1} of the {i+1}nput.\")\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # build a pattern for the string\n    pattern = []\n    for num in lst:\n        pattern.append(str(num))\n    pattern = \"\".join(pattern)\n    # return a pattern\n    return pattern\n",
        "num_ids": 53
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst = list(map(str, lst))\n    return [str(len(lst)-i).count('0') for i in range(len(lst))]\n",
        "num_ids": 43
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    minSum = nums[0]\n    maxIndex = 0\n    for index, num in enumerate(nums):\n        sub = num - nums[index]\n        if sub > maxIndex:\n            maxIndex = sub\n        if sub < 0:\n            sub = 0\n            maxIndex = 0\n        minSum = min(minSum + sub, maxIndex)\n    return minSum\n",
        "num_ids": 93
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(minSubArraySum(nums[1:])) if len(nums) > 0 else 0\n",
        "num_ids": 27
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    min_sum = float('inf')\n    for j in range(len(nums)):\n        if min_sum > nums[j]:\n            min_sum = nums[j]\n            i = j + 1\n    return min_sum\n",
        "num_ids": 65
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not nums: return 0\n    sum_sum = 0\n    min_sum = nums[0]\n    \n    for num in nums[1:]:\n        if sum_sum + num <= min_sum:\n            sum_sum += num\n            min_sum = sum_sum\n        else:\n            sum_sum = num\n            min_sum = min_sum\n    return min_sum\n",
        "num_ids": 96
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    remain_sum = sum(nums)\n    current_sum = 0\n",
        "num_ids": 20
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    curr_sum = sum(nums)\n    curr_sum_subarray = curr_sum\n    min_subarray = float(\"inf\")\n",
        "num_ids": 49
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n    \n    window_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        window_sum += num\n        if window_sum < min_sum:\n            min_sum = window_sum\n    \n    return min_sum\n",
        "num_ids": 74
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(nums) == 0:\n        return 0\n    # start with an array of negative numbers and keep track of the minimum possible sum\n    min_summ = -1 * sys.maxsize\n    for i in range(len(nums)):\n        # add up the elements in the sub-array that have been\n        # evaluated, and update the minimum if necessary\n        min_summ += max(nums[i:i+len(nums)])\n        if min_summ < 0:\n            min_summ = 0\n    return min_summ\n",
        "num_ids": 134
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res + nums[i], nums[i])\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not nums:\n        return 0\n    sum = 0\n    subArray = [0]\n    for num in nums:\n        subArray.append(sum+num)\n        sum -= num\n        if sum < 0:\n            sum = 0\n            subArray = [0]\n    return min(subArray)\n",
        "num_ids": 77
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                total += 1\n                grid[i][j] = 1\n                capacity = 1\n                while capacity > 0:\n                    total += 1\n                    capacity -= 1\n                    # if capacity == 0:\n                    #     break\n                    for x in range(1,4):\n                        if capacity == 0 and grid[i+x][j] == 1:\n                            total += 1\n                            capacity += 1\n                        elif capacity > 0 and grid[i+x][j] == 0:\n                            total += 1\n                            capacity -= 1\n    \n    return total\n",
        "num_ids": 178
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # max_row = max(max(grid[0]),max(grid[1]))\n    # max_col = max(max(grid[:,0]),max(grid[:,1]))\n",
        "num_ids": 47
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not grid or not capacity:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # time O(m + n)\n    # space O(n)\n    def find_fill(grid, bucket_capacity):\n        grid_length = len(grid)\n        grid_nums = range(grid_length)\n        bucket_size = bucket_capacity // grid_length\n        bucket_arr = []\n        for i in range(grid_length):\n            bucket_arr.append([])\n            for j in range(grid_length):\n                if grid[i][j] == 1:\n                    if bucket_size!= 0:\n                        bucket_arr[i].append(bucket_size)\n                    bucket_size -= 1\n        \n        for i in range(grid_length):\n            for j in range(grid_length):\n                bucket_arr[i].append(0)\n",
        "num_ids": 192
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def min_fill(grid, capacity):\n        \"\"\"\n        Using a heap to store the filled buckets,\n        we compute the minimum number of buckets we need to lower to fill\n        \"\"\"\n        buckets = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 1:\n                    heapq.heappush(buckets, [abs(i-j), [i, j]])\n        \n        min_buckets = []\n        for bucket in buckets:\n            min_buckets.append([bucket[0]])\n        \n        for bucket in buckets:\n            if bucket[0] < capacity:\n                for i in range(len(min_buckets)):\n                    if bucket[1] == [i, bucket[0]]:\n                        continue\n                    heapq.heappush(min_buckets, [bucket[1] + [i], bucket])\n        \n        print(min_buckets)\n        \n        result = 0\n        for bucket in min_buckets:\n            if bucket[0] == capacity:\n                result += 1\n            else:\n                break\n        \n        return result\n    \n    result = max_fill(grid, capacity)\n    return result\n",
        "num_ids": 300
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    import numpy as np\n    m, n = np.shape(grid)\n    if m == 0 or n == 0:\n        return 0\n    \n    bucket_capacity = capacity\n    curr_bucket = [0] * bucket_capacity\n    curr_bucket_len = 0\n    visited = [False] * bucket_capacity\n    for i in range(n):\n        for j in range(m):\n            if not visited[grid[i][j]] and grid[i][j] > 0:\n                visited[grid[i][j]] = True\n                curr_bucket_len += 1\n                if curr_bucket_len > bucket_capacity:\n                    curr_bucket = curr_bucket[:bucket_capacity]\n                    break\n                left = grid[i][j] - 1\n                right = grid[i][j] + 1\n                curr_bucket[left] = curr_bucket[left] - 1\n                if left >= 0:\n                    curr_bucket[left] += 1\n                curr_bucket[right] = curr_bucket[right] + 1\n                if right < curr_bucket_len:\n                    curr_bucket[right] += 1\n    return curr_bucket\n",
        "num_ids": 303
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #Calculate sum of each row\n    row_sum = [0 for i in range(grid.shape[0])]\n    for r in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            row_sum[r] += grid[r][j]\n",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    import math\n    \"\"\"\n    if grid[0][0] == 0:\n        return 0\n    \"\"\"\n    def new_bucket(grid):\n        i = 0\n        for j in range(len(grid[0])):\n            if grid[0][j] == 1:\n                return 1\n            if grid[i][j] == 1:\n                return 0\n            grid[i][j] = 1\n            if capacity == 1:\n                return 1\n            i += 1\n",
        "num_ids": 114
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    import heapq\n",
        "num_ids": 6
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    grid_len = len(grid)\n    bucket_capacity = math.floor(math.sqrt(grid_len))\n    buckets = [[] for _ in range(bucket_capacity)]\n    for r in range(grid_len):\n        for c in range(grid_len):\n            if grid[r][c] == 1:\n                for i in range(bucket_capacity):\n                    if not buckets[i]:\n                        buckets[i].append((r, c))\n    \n    # bubbling the bucket\n    for i in range(bucket_capacity):\n        if len(buckets[i]) == 1:\n            return 0\n        \n        buckets[i] = sorted(buckets[i], key=lambda tup: tup[0] + tup[1])\n        \n        for tup in buckets[i]:\n            if not (tup[0] <= r < tup[1] and tup[1] <= c < tup[0]):\n                return 0\n            \n            temp = grid[tup[0]][tup[1]]\n            grid[tup[0]][tup[1]] = 0\n            grid[r][c] = temp\n            \n    # count how many buckets you need to lower\n    for i in range(bucket_capacity):\n        if not buckets[i]:\n            return 0\n        else:\n            l = math.floor(len(buckets[i]) / 2)\n            grid[r][c] = 0\n            \n            for r_ in range(r, r + l):\n                for c_ in range(c, c + l):\n                    if grid[r_][c_] == 1:\n                        grid[r_][c_] = 0\n                        \n                        for tup in buckets[i]:\n                            if not (tup[0] <= r_ < tup[1] and tup[1] <= c_ < tup[0]):\n                                return 0\n                            grid[r_][c_] = 1\n                            \n                        for j in range(bucket_capacity):\n                            if not buckets[j]:\n                                buckets[j] = [tup for tup in buckets[j] if not tup[0] <= r_ < tup[1] and tup[1] <= c_ < tup[0]]\n                                \n                            temp = grid[tup[0]][tup[1]]\n                            grid[tup[0]][tup[1]] = 0\n                            grid[r_][c_] = temp\n                            \n            grid[r][c] = 1\n    return len(grid[r][c])\n",
        "num_ids": 613
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if arr == []:\n        return []\n    \n    lst = [0]\n    for num in arr:\n        lst.append(lst[-1] + num)\n    \n    return lst[::-1]\n",
        "num_ids": 59
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    return sorted(arr, key=lambda x: (x % 2 == 0, x))",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    arr.sort()\n    return arr\n",
        "num_ids": 13
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: int(x % 10))\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            count += 1\n    for i in range(len(arr) - 1):\n        if arr[i] == count:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n",
        "num_ids": 80
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    def sort(arr):\n        arr = sorted(arr)\n        arr = [num for num in arr if num!= 0]\n        return arr\n    \n    return sort(arr)\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(arr)\n    for i in range(n):\n        x = arr[i]\n        for j in range(n):\n            if arr[j]!= x:\n                arr[j], arr[i] = arr[i], arr[j]\n                break\n        else:\n            continue\n        break\n    return arr\n",
        "num_ids": 82
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_arr = []\n    for i in range(len(arr)):\n        bin_str = bin(arr[i])[2:]\n        # print(bin_str)\n        if len(bin_str) == 1:\n            continue\n        if len(bin_str) == 2:\n            sorted_arr.append(int(bin_str[-1]))\n        else:\n            sorted_arr.append(int(bin_str[-2]))\n    return sorted_arr\n",
        "num_ids": 120
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def _sort(arr, s):\n        res = []\n        for num in arr:\n            if num == 0:\n                continue\n            if num % 2!= 0:\n                res.append(s(num))\n            else:\n                res.append(num)\n        return res\n    return _sort(arr, lambda x: x % 2)\n",
        "num_ids": 84
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted = [0] * len(arr)\n    for i in range(len(arr)):\n        c = arr[i]\n        if c == 0:\n            continue\n        else:\n            n = 0\n            while c & 1:\n                c >>= 1\n                n += 1\n            if n > 1:\n                sorted[i] = -((-1 << n) - 1)\n            else:\n                sorted[i] = -((-1 << n) - 1) + 1\n    return sorted\n",
        "num_ids": 124
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if s == \"\":\n        return []\n    else:\n        s_list = list(s)\n        res = []\n        for i in s_list:\n            #print(i, end=\" \")\n            if i.lower() in UNCONSONANT_LIST:\n                res.append(i)\n            else:\n                continue\n        return res\n",
        "num_ids": 85
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_unique(s):\n        \"\"\"Given a string s, returns True if the string only contains one letter and it is \n        a valid string. Otherwise, returns False.\n        \"\"\"\n        def is_valid(s):\n            # special case: if the string has a single letter, return True.\n            if len(s) > 1:\n                return True\n            # if the string is empty, return False.\n            elif s == \"\":\n                return False\n            # if the string does not contain a letter, return False.\n            elif not s.isalpha():\n                return False\n            # if the string contains at least two letters, return False.\n            elif len(s) < 2:\n                return False\n            else:\n                return True\n        return is_valid(s)\n    \n    # create a set that only contains letters.\n    letters = set(s.lower())\n    # create a set that contains the words in the string.\n    words = set(s.lower())\n    # return a list of all the words in the string.\n    return list(letters & words)\n",
        "num_ids": 255
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    lst = []\n    for letter in s:\n        if letter not in \"aeiou\":\n            result.append(letter)\n    for word in s.split():\n        if len(word) == n:\n            for letter in word:\n                if letter not in \"aeiou\":\n                    result.append(letter)\n        else:\n            result.append(word)\n    return result\n",
        "num_ids": 99
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s == \"\":\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    words = []\n    s_list = list(s)\n    for letter in s_list:\n        if letter in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            if letter in s_list:\n                i = 0\n                while i < len(s_list) and s_list[i]!= letter:\n                    i += 1\n                if i == len(s_list):\n                    words.append(letter)\n            else:\n                words.append(letter)\n        else:\n            words.append(letter)\n    return words\n    \ndef next_char(word):\n    \"\"\"Given a word, return the next character that must be a consonant.\n    If the word is empty, return None.\n    Examples:\n    next_char(\"Mary\") ==> \"m\"\n    next_char(\"\") ==> None\n    next_char(\"simple white space\") ==> None\n    next_char(\"Mary had a little lamb\") ==> \"l\"\n    \"\"\"\n    if word == \"\":\n        return None\n    for letter in word:\n        if letter not in \"aeiouAEIOU\":\n            return None\n    return word[0]\n        \ndef build_words(s):\n    \"\"\"Given a string s, return a list of words that contain exactly n\n    consonants, in order these words appear in the string s.\n    If the string s is empty, return an empty list.\n    Examples:\n    build_words(\"simple white space\") ==> [\"simple\"]\n    build_words(\"Mary had a little lamb\") ==> [\"lamb\"]\n    build_words(\"simple white space\") ==> [\"simple\"]\n    build_words(\"Mary had a little lamb\") ==> [\"lamb\", \"simple\"]\n    build_words(\"simple white space\") ==> [\"simple\"]\n    \"\"\"\n    words = []\n    if s == \"\":\n        return words\n    \n    s_list = list(s)\n    for i in range(len(s)):\n        if s[i] not in \"aeiouAEIOU\":\n            words.append(s[i])\n        else:\n            if s_list[i] not in \"aeiouAEIOU\":\n                words.append(s_list[i])\n            else:\n                if s_list[i] == s_list[i + 1]:\n                    words.append(s_list[i])\n                    words.append(s_list[i + 1])\n                else:\n                    words.append(s_list[i])\n                    words.append(s_list[i + 1])\n                    words.append(s_list[i + 2])\n                    \n    return words\n    \ndef levenshteinDistance(w1, w2):\n    \"\"\"Given two words w1 and w2 return the Levenshtein Distance between \n    w1 and w2.\n    \n    Examples:\n    levenshteinDistance(\"word\", \"word\") ==> 1\n    levenshteinDistance(\"word\", \"dog\") ==> 3\n    levenshteinDistance(\"word\", \"sun\") ==> 3\n    levenshteinDistance(\"intention\", \"execution\") ==> 2\n    \"\"\"\n    len_s = len(w1)\n    len_t = len(w2)\n    return ((len_s + len(w1) - 1) + (len_t + len(w2) - 1) - min(len_s, len_t))\n    \ndef levenshteinDistance(w1, w2):\n    \"\"\"Given two words w1 and w2 return the Levenshtein Distance between \n    w1 and w2.\n    \n    Examples:\n    levenshteinDistance(\"word\", \"word\") ==> 1\n    levenshteinDistance(\"word\", \"dog\") ==> 3\n    levenshteinDistance(\"word\", \"sun\") ==> 3\n    levenshteinDistance(\"intention\", \"execution\") ==> 2\n    \"\"\"\n    if w1 == \"\":\n        return 0\n    if w2 == \"\":\n        return len(w1)\n    \n    len_s = len(w1)\n    len_t = len(w2)\n    \n    dp = [[0 for x in range(len_t+1)] for y in range(len_s+1)]\n    \n    for i in range(len_s+1):\n        for ",
        "num_ids": 1026
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = s.lower()\n    n = int(n)\n    if len(s) == 0:\n        return []\n    n_len = len(s)\n    res = []\n    for i in range(0, n_len):\n        if s[i] not in ['a', 'e', 'i', 'o', 'u']:\n            res.append(s[i])\n    return res\n",
        "num_ids": 98
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for word in s.split():\n        if len(word) >= n:\n            result.append(word)\n    return result\n    ",
        "num_ids": 38
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Verify the length of the string\n    if len(s) == 0:\n        return []\n    \n    # Filter the string using a set of filter functions\n    # from collections import Counter\n    # from operator import xor\n    # def filter_string(s):\n    #     return [word for word in s.lower().split() if word not in (' ', '')]\n    # words = Counter(filter_string(s))\n    # return words.keys()\n    \n    # Use the set() function to get the set of all words\n    # from a given string\n    # The string is a list of words, where each word consists of a single string word\n    # word_list = set(s.lower().split())\n    # words = {word for word in word_list if word.isalpha()}\n    # return words\n    \n    # Create a set of all the words in the string\n    word_list = set()\n    for word in s.lower().split():\n        if len(word) > 1:\n            word_list.add(word)\n    return list(word_list)\n",
        "num_ids": 255
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Create an empty list\n    words = []\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def closest_vowel_to_right_side(word):\n        min_distance = abs(len(word) - len(word.replace(\"C\", \"\")))\n        min_distance_letter = word[len(word) - len(word.replace(\"C\", \"\"))]\n        for i in range(len(word)):\n            for j in range(i + 1, len(word)):\n                distance = abs(i - j)\n                if word[i] == word[j]:\n                    continue\n                if distance < min_distance:\n                    min_distance = distance\n                    min_distance_letter = word[i]\n        if min_distance == 0:\n            return \"\"\n        else:\n            return min_distance_letter\n    \n    min_distance = abs(len(word) - len(word.replace(\"C\", \"\")))\n    min_distance_letter = word[len(word) - len(word.replace(\"C\", \"\"))]\n    for i in range(len(word)):\n        for j in range(i + 1, len(word)):\n            distance = abs(i - j)\n            if word[i] == word[j]:\n                continue\n            if distance < min_distance:\n                min_distance = distance\n                min_distance_letter = word[i]\n    return min_distance_letter\n",
        "num_ids": 313
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lower = word.lower()\n    c_count = lower.count(\"c\")\n    v_count = lower.count(\"v\")\n    if c_count == v_count == 0:\n        return \"\"\n    # the max length of the word is the number of letters (consecutive vowels)\n    # in the beginning and the ending\n    if c_count >= v_count:\n        return get_closest_vowel(lower[c_count:])\n    else:\n        return get_closest_vowel(lower[:v_count])\n",
        "num_ids": 135
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    vowels_beginning = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_ending = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    char_value = 0\n    left_char = word[0]\n    for char in word[1:]:\n        if char not in vowels_beginning:\n            char_value += 1\n        if left_char not in vowels_ending:\n            char_value += 1\n        left_char = char\n    char_value += 1\n    right_char = word[-1]\n    if right_char not in vowels_beginning:\n        char_value += 1\n    right_char = word[0]\n    for char in word[1:]:\n        if char not in vowels_ending:\n            char_value += 1\n        right_char = char\n    char_value += 1\n    if char_value < 2:\n        return \"\"\n    elif char_value > 3:\n        return \"\"\n    else:\n        return word[char_value - 2:]",
        "num_ids": 253
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Taking the first and last vowels from word\n    beginning = word[0]\n    ending = word[-1]\n    \n    # If there's no vowel left in the word\n    if (len(beginning) == 0 or len(ending) == 0) or (beginning == ending):\n        return \"\"\n    # If there's no consonant left\n    if len(beginning) == 1 or len(ending) == 1:\n        return \"\"\n    \n    # Finding the closest vowel that starts from the first vowel to the last vowel.\n    closest_vowel = word[0]\n    for i in range(len(word) - 1):\n        if (word[i + 1]!= beginning and word[i + 1]!= ending):\n            if word[i] == beginning:\n                closest_vowel = word[i]\n            if word[i] == ending:\n                closest_vowel = word[i]\n    return closest_vowel\n",
        "num_ids": 235
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    distance = {}\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word[i] not in distance:\n                distance[word[i]] = i\n            else:\n                distance[word[i]] = distance[word[i]] + 1\n    \n    print(distance)\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[:i] + word[i+1:]\n",
        "num_ids": 138
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    closest_vowel = \"\"\n    for letter in word:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            closest_vowel += letter\n        elif letter == 'y':\n            closest_vowel = ''\n    return closest_vowel\n",
        "num_ids": 79
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code here\n    if not word:\n        return \"\"\n    res = \"u\"\n    for i in range(len(word)-1):\n        if word[i:i+2].isalpha():\n            break\n    \n    if word[i+2:].isalpha():\n        for j in range(len(word)-2):\n            if word[j:j+3].isalpha():\n                break\n        if j+3 < len(word) and word[j+3:].isalpha():\n            res = word[j+3:].lower()\n    \n    return res\n",
        "num_ids": 140
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Create dictionary mapping from vowels to indices\n    vowels_to_indices = {\n        'a': 0, 'i': 1, 'u': 2, 'e': 3, 'o': 4, 'o'\n    }\n    # Sort the consonants for order of preference\n    consonants = sorted(word)\n    # Run for each consonant until we find a vowel\n    for i in range(len(word) - 1):\n        # Choose the closest consonant to the right\n        if consonants[i] == \"o\" or consonants[i] == \"O\":\n            left_index = vowels_to_indices[consonants[i + 1]]\n            right_index = vowels_to_indices[consonants[i]]\n            # If we find an equivalent vowel, return the closest consonant\n            if left_index < right_index:\n                return consonants[i]\n            # Else, we need to find a next consonant\n            else:\n                consonants = consonants[:i] + consonants[i + 1:]\n                continue\n        # If we're not at the end of the word, we have a consonant\n        if consonants[i] not in [\"a\", \"i\", \"u\", \"e\", \"o\", \"o\"]:\n            return consonants[i]\n        # If we're at the end of the word, there's nothing left to do\n        if consonants[i] == \"o\":\n            consonants = consonants[:i] + consonants[i + 1:]\n            continue\n    # If we didn't find a vowel, return empty string\n    return \"\"",
        "num_ids": 381
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # A vowel is present only if it has a single consonant as a sub string\n    word = word.split()\n    \n    # If the word is empty or has only one consonant, return empty string\n    if len(word) == 0 or len(word[0]) == 1:\n        return \"\"\n    \n    # Get the first and last consonants as the first and last vowel\n    first_vowel, last_vowel = word[0][0], word[-1][0]\n    \n    # Find the closest vowel to the first vowel from the second consonant\n    closest_vowel = closest_vowel_helper(word[1:], first_vowel, last_vowel)\n    \n    # If the closest vowel is more than one character, return empty string\n    if closest_vowel > 1:\n        return \"\"\n    \n    # Return the last vowel\n    return last_vowel\n",
        "num_ids": 222
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # short circuit if there are no consonants\n    if len(word) < 2 or word[0] =='' or word[-1] =='':\n        return \"\"\n",
        "num_ids": 41
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # 0) create list of all '(' and close ')'\n    open_parens = []\n    close_parens = []\n    for el in lst:\n        if el == '(':\n            open_parens.append(el)\n        else:\n            if len(open_parens) > 0:\n                close_parens.append(open_parens.pop())\n            else:\n                return 'No'\n    # 1) for all open ')'\n    for el in open_parens:\n        # 2) if the last open ')' was balanced\n        if el == ')':\n            if len(close_parens) > 0:\n                # 3) remove ')' from open ')'\n                open_parens.pop()\n            else:\n                return 'No'\n    # 3) if the last open ')' was not balanced, we can't make a good string\n    return 'No'\n",
        "num_ids": 214
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Brute Force:\n    # Time complexity: O(n^2)\n    # Space Complexity: O(n)\n    # where n is the length of lst\n    \n    # check open parentheses\n    for c in lst[0]:\n        # if there's no balanced open parentheses, check closed parentheses\n        if not match_parens(lst[1:]):\n            return 'No'\n    # if all open parentheses are balanced, check close parentheses\n    for c in lst[-1]:\n        if not match_parens(lst[:-1]):\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 147
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #check if it's balanced\n    #if not check the len of the string\n    #if not, there is no possible string, return \"No\"\n    #if it's balanced, return \"Yes\"\n    return 'Yes' if len(lst) == 1 and lst[0] == '(' and lst[0] == ')' else \"No\"\n",
        "num_ids": 84
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not lst:\n        return 'No'\n    #\n    # Process:\n    # \n    # Concatenate string pairs.\n    #\n    # First, find all pairs, which have both open and close parentheses,\n    # and concatenate them together to a single string.\n    #\n    # This is O(n) time complexity, because it needs to scan\n    # from beginning to the end of the list.\n    #\n    # Note:\n    # \n    # This function is used to check if a string is a good string.\n    # The string may contain extra parentheses, which are not balanced.\n    #\n    # Time complexity: O(n)\n    # Space Complexity: O(1)\n    #\n    # Runtime: 32 ms\n    # Memory Usage: 14.8 MB\n    #\n    def is_good(s: str) -> str:\n        # Check all open parens.\n        # Check if all open parens have matching closing parens.\n        # If this is true, we can make the string as good as we can.\n        #\n        # time: O(n)\n        # space: O(1)\n        def is_balanced(s: str) -> str:\n            open_pairs = set()\n            close_pairs = set()\n            for i in range(len(s)):\n                if s[i] == '(':\n                    open_pairs.add(i)\n                if s[i] == ')':\n                    close_pairs.add(i)\n            if len(open_pairs)!= len(close_pairs):\n                return 'No'\n            if len(open_pairs) == 0 and len(close_pairs) == 0:\n                return 'Yes'\n            if len(open_pairs) > 0 and len(close_pairs) == 0:\n                return 'Yes'\n            return 'No'\n        \n        # For the rest of the two cases, we need to check all valid pairs.\n        #\n        # time: O(n)\n        # space: O(n)\n        def is_valid(s: str) -> str:\n            # Find open parens.\n            open_pairs = set()\n            close_pairs = set()\n            for i in range(len(s)):\n                if s[i] == '(':\n                    open_pairs.add(i)\n                if s[i] == ')':\n                    close_pairs.add(i)\n            # Check for balanced pairs.\n            #\n            # time: O(n)\n            # space: O(1)\n            if len(open_pairs) == len(close_pairs):\n                return 'Yes'\n            # Invalid pair.\n            #\n            # time: O(n)\n            # space: O(1)\n            return 'No'\n        \n        return is_balanced(s) or is_valid(s)\n    #\n    #\n    # Return:\n    #\n    # 'Yes' if all pairs are good, 'No' otherwise.\n    #\n    #\n    return is_good(lst[0]) == is_good(lst[1])\n",
        "num_ids": 750
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # import pdb; pdb.set_trace()\n    if len(lst) < 2:\n        return False\n    p1, p2 = lst[0], lst[1]\n    # if len(p1)!= len(p2):\n    #     return False\n    # p1_dict = {}\n    # p2_dict = {}\n    # for i in p1:\n    #     if i in p2_dict:\n    #         p2_dict[i] += 1\n    #     else:\n    #         p2_dict[i] = 1\n    # for i in p2:\n    #     if i in p1_dict:\n    #         p1_dict[i] -= 1\n    #         if p1_dict[i] == 0:\n    #             del p1_dict[i]\n    # if len(p1) == len(p2) and len(p1)!= 0:\n    #     for i in p1_dict:\n    #         if p1_dict[i] == 0:\n    #             del p1_dict[i]\n    # return len(p1) == len(p2)\n    if len(lst)!= 2:\n        return False\n    p1, p2 = lst[0], lst[1]\n    if len(p1)!= len(p2):\n        return False\n    # import pdb; pdb.set_trace()\n    p1_dict = {}\n    p2_dict = {}\n    for i in p1:\n        if i in p2_dict:\n            p2_dict[i] += 1\n        else:\n            p2_dict[i] = 1\n    for i in p2:\n        if i in p1_dict:\n            p1_dict[i] -= 1\n            if p1_dict[i] == 0:\n                del p1_dict[i]\n        elif i in p2_dict:\n            p1_dict[i] = 1\n            if p1_dict[i] == 0:\n                del p1_dict[i]\n    if len(p1) == len(p2) and len(p1)!= 0:\n        for i in p1_dict:\n            if p1_dict[i] == 0:\n                del p1_dict[i]\n    if len(p2) == len(p1) and len(p2)!= 0:\n        for i in p2_dict:\n            if p2_dict[i] == 0:\n                del p2_dict[i]\n    if len(p1) == len(p2) and len(p1) == 0:\n        return False\n    return True\n",
        "num_ids": 644
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # Brute Force: Solve recursively.\n    \n    # Dictionaries.\n    # HashMap: a map that maps each char to its position in the string.\n    # To use the dict:\n    # h = {s: i for i, s in enumerate(s)}\n    # For loop through all possible combinations:\n    # for each possible character:\n    #   if the index in the dictionary is the same as in the current string:\n    #       return true\n    #   else:\n    #       return false\n    def match_brute(lst, s, i):\n        if not s:\n            return True\n        elif lst[i]!= s[0]:\n            return False\n        else:\n            return match_brute(lst, s[1:], i+1)\n    \n    if len(lst) < 2:\n        return 'Yes'\n    elif len(lst) == 2:\n        return match_brute(lst, lst[1], 0)\n    else:\n        for i in range(len(lst)-2):\n            if match_brute(lst, lst[i], i):\n                return 'Yes'\n    return 'No'\n",
        "num_ids": 291
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Approach 1: Brute Force\n    # Time: O(N * M)\n    # Space: O(M)\n    # Runtime: O(N * M * 2^M)\n    # Runtime: O(M)\n    # Memory: O(N)\n    def check_sequence(string, left, right):\n        if left == right:\n            return 'Yes'\n        elif left!= right:\n            return 'No'\n        else:\n            for i in range(left, right):\n                if string[i] == '(':\n                    left += 1\n                    right -= 1\n                    if left < 0 or right < 0:\n                        return 'No'\n                elif string[i] == ')':\n                    left -= 1\n                    right += 1\n                    if left < 0 or right < 0:\n                        return 'No'\n            return 'Yes'\n    \n    def is_good(string):\n        left, right = 0, 0\n        for char in string:\n            if char == '(':\n                left += 1\n                right -= 1\n            elif char == ')':\n                left -= 1\n                right += 1\n        return left == right\n    \n    string = list(lst)\n    return check_sequence(string, 0, len(string)-1)\n    ",
        "num_ids": 299
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Brute force\n    # Time - O(N)\n    # Space - O(1)\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if not compare_strings(lst[i], lst[j]):\n                count += 1\n    return count > 0\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    matching_parens = 0\n    for l in lst:\n        # use the matching parentheses to count them\n        matching_parens += (match(l, '('))\n",
        "num_ids": 44
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def is_match(s1, s2):\n        stack = []\n        for i in range(len(s1)):\n            if s1[i] == '(':\n                stack.append(s1[i])\n            elif s1[i] == ')':\n                if len(stack) == 0:\n                    return False\n                elif stack.pop()!= '(':\n                    return False\n        return len(stack) == 0\n",
        "num_ids": 106
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    arr = arr + [0]\n    def max_k_numbers(arr, k, left, right):\n        if left == right:\n            return arr[left]\n",
        "num_ids": 42
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    if len(arr) < k:\n        return []\n",
        "num_ids": 23
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    index = 0\n    for i in range(len(arr)):\n        index += 1\n        if index < k:\n            break\n",
        "num_ids": 41
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # O(n^2)\n    # can take up to O(n^2) and take up to O(n^2)\n    # O(k)\n    \n    def sort_arr(arr,k):\n        # initial case\n        if len(arr) <= k:\n            return arr\n        \n        # find the min and max values\n        curr_min = arr[0]\n        curr_max = arr[-1]\n        for i in range(len(arr)):\n            if arr[i] < curr_min:\n                curr_min = arr[i]\n            if arr[i] > curr_max:\n                curr_max = arr[i]\n        \n        # swap and increase and decrease\n        if curr_min > curr_max:\n            arr[0], arr[-1] = arr[-1], arr[0]\n            arr[-1], arr[0] = arr[0], arr[-1]\n        \n        # sort and shrink\n        for i in range(len(arr)):\n            arr[i] = arr[i] + (k - len(arr) - 1)\n            arr[arr[i]] = arr[arr[i] - 1]\n            arr[arr[i]] = arr[arr[i] + 1]\n        \n        return arr\n        \n    return sort_arr(arr, k)\n",
        "num_ids": 328
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Your code here\n    arr = sorted(arr)\n    return [arr[-k]] + maximum(arr[:-k], k-1)\n",
        "num_ids": 36
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    # [-3, -4, 5]\n    # [2]\n    # [1, 2, 1, 2, -1, -2, 1]\n",
        "num_ids": 44
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n",
        "num_ids": 52
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # idea: use a base case, and use logk as the max element\n    # time: O(n^2), space: O(1)\n    max_nums = [0] * len(arr)\n    max_nums[0] = arr[0]\n    # sort max_nums:\n    #    for i in range(1, len(arr)):\n    #        if arr[i] > max_nums[i - 1]:\n    #            max_nums[i] = arr[i]\n    \n    # create a function to return a sorted maximum element in a sorted array.\n    # The function should return the sorted maximum element in an array.\n    # a sorted array is an array of elements where each element can only be unique\n    # to one other element.\n    def find_max_in_a_sorted_array(arr, k):\n        # return the max element in the sorted array\n        # if len(arr) > 0 and arr[0] > arr[-1]\n        # we can also use.sort() instead of.sort() and then.pop().\n        return max_nums[0]\n    # initialize the max_nums\n    # store the elements of the arr in a list\n    # sorted the list so that all the unique elements can be ordered\n    # sort the list (in place)\n    # return the sorted list\n    def max_in_sorted_array(arr, k):\n        # sort the arr\n        # take the max element of the sorted arr\n        # return the max element\n        # because the next element is always smaller than the previous one\n        # so, the max element can't be the last element in the sorted array\n        # and so the next element can't be the last element in the sorted array\n        if len(arr) < k or arr[-1] > arr[0]:\n            return arr[0]\n        return arr[0]\n    \n    max_nums[1] = arr[0]\n    for i in range(len(arr) - 2):\n        if arr[i] >= arr[i + 1] and arr[i] >= arr[i + 2]:\n            # found the max element, update the max_nums with the max element\n            max_nums[i + 2] = max(arr[i + 2], arr[i + 1], arr[i])\n        else:\n            # another max_nums is not found, we use the previous max_nums\n            # to find the max element\n            # max_nums[i + 1] = max(max_nums[i + 1], arr[i])\n            # do a swap to update max_nums[i] and max_nums[i + 1]\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    \n    # sort the max_nums in a sorted manner\n    # return the sorted max_nums\n    # we can use an array instead of a list\n    # a sorted array is an array of elements where each element can only be unique\n    # to one other element.\n    # and, so, we can use the sorted array to find the max element\n    return find_max_in_a_sorted_array(max_nums, k)\n",
        "num_ids": 760
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n",
        "num_ids": 50
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in lst:\n        if i%2 == 0:\n            count += i\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(list(filter(lambda x : x % 2 == 0, lst)))\n",
        "num_ids": 22
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum += num\n            odd_sum += num\n    return sum - odd_sum\n",
        "num_ids": 50
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 1:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(even)\n    print(odd)\n    answer = sum(odd) + sum(even)\n    return answer\n",
        "num_ids": 77
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    answer = 0\n    odd_lst = []\n    odd_lst.append(lst[0])\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            odd_lst.append(lst[i])\n    for i in range(len(odd_lst)):\n        answer += odd_lst[i]\n    return answer\n",
        "num_ids": 98
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odd = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            odd.append(lst[i])\n    return sum(odd",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even_num = 0\n    odd_num = 0\n    for i in lst:\n        if i % 2!= 0:\n            even_num += i\n        else:\n            odd_num += i\n    \n    return even_num + odd_num",
        "num_ids": 62
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_number = 0\n    even_number = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_number += i\n        else:\n            odd_number += i\n    return even_number + odd_number\n",
        "num_ids": 60
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not arr or k > len(arr):\n        return 0\n    return sum(sorted([arr[i] for i in range(len(arr)) if i % k == 0]) + [arr[i] for i in range(len(arr)) if i % k == 1])",
        "num_ids": 66
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Idea:\n    # Find the next k elements\n    # update the sums of the next k elements to be the sums of the k+1 elements\n    # Return the sum of the next k elements\n    # Add the last element from the next k elements\n",
        "num_ids": 58
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not arr or k < 2:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    curr_sum = 0\n    for element in arr:\n        if curr_sum + element <= k:\n            curr_sum += element\n        else:\n            return curr_sum\n",
        "num_ids": 47
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def digits_from(num):\n        ans = 0\n        while num:\n            ans += num % 10\n            num //= 10\n        return ans\n    # my solution\n    # from functools import reduce\n    # return reduce(lambda x,y: x + y, map(lambda n: digits_from(n), arr))\n    # dict of digits from first element\n",
        "num_ids": 88
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    k = max(k, 2)\n    output = 0\n    for elem in arr:\n        if elem < 10 ** k:\n            output += elem\n            k -= 1\n    return output\n",
        "num_ids": 49
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 18
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if k <= 1:\n        return arr[0]\n    elif len(arr) < k:\n        return add_elements(arr[1:], k-1)\n",
        "num_ids": 43
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    output = 0\n",
        "num_ids": 6
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd_list = []\n    def collatz(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return collatz(n/2)\n        elif n % 2 == 1:\n            return 3 * collatz(n/2) + 1\n    for i in range(1, n+1):\n        odd_list.append(collatz(i))\n    return odd_list\n",
        "num_ids": 103
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [get_collatz(n // 2) + 1 for n in range(1, n + 1)]\n",
        "num_ids": 27
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check if n is a multiple of 2. If it is, return the list as list, if not, append the value. \n    def check(n):\n        if n % 2 == 0:\n            return [n]\n        else:\n            return [n+2]\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd_sequence = []\n    if n <= 1:\n        return odd_sequence\n    for i in range(1, n, 1):\n        if n % i == 0:\n            odd_sequence.append(i)\n            return odd_sequence\n        else:\n            return get_odd_collatz(n - i)\n",
        "num_ids": 77
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Find the first odd number that is greater than 0.\n    # Note: 1 is the highest number, 5 is the next number.\n    # Note:   2 is the next number.\n    # Note:   3 is the next number.\n    # Note:   4 is the next number.\n    # Note:   5 is the next number.\n",
        "num_ids": 80
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: modify the code so that even numbers have the sequence [1, 2, 4, 8, 16, 32]\n",
        "num_ids": 30
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    list = []\n    n_list = []\n    if n < 0:\n        print(\"Error: negative integer provided\")\n        return list\n    else:\n        while n!= 0:\n            if n % 2 == 0:\n                n_list.append(n)\n            else:\n                n_list.append(3*n+1)\n            n = n//2\n        for n in n_list:\n            if n == 1:\n                list.append(n)\n        return list\n",
        "num_ids": 118
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # O(n) runtime, O(n) space\n    \n    if not n:\n        return []\n    \n    odd_collatz_seq = []\n    \n    current_num = 1\n    prev_num = 0\n    \n    while current_num < n:\n        # return None if n is too small\n        if current_num == 0:\n            return odd_collatz_seq\n        \n        if prev_num % 2 == 0:\n            # i.e. collatz\n            current_num += 1\n            \n        else:\n            # i.e. not collatz\n            odd_collatz_seq.append(current_num)\n            \n            # current_num + 1 would be the next number\n            prev_num = current_num\n            current_num = 1\n    \n    return odd_collatz_seq",
        "num_ids": 195
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    seq = [1]\n    n = 1\n    while n < n:\n        n = n * 2\n        seq.append(n)\n    odd_seq = [x for x in seq if x % 2!= 0]\n    return odd_seq\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [collatz(i) for i in range(1, n + 1)]\n",
        "num_ids": 21
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not date:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # The date must not be empty\n    if not date:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    is_valid = True\n    if not date:\n        return is_valid\n    date = date.replace(\" \", \"\")\n    date_format = \"%m-%d-%Y\"\n    date_format_output = date.split(\"-\")\n    if len(date_format_output)!= 3:\n        return is_valid\n    try:\n        int(date_format_output[0])\n        int(date_format_output[1])\n        int(date_format_output[2])\n    except ValueError:\n        return is_valid\n    \n    if date_format_output[2] < 1 or date_format_output[2] > 31:\n        return is_valid\n    if date_format_output[1] < 1 or date_format_output[1] > 12:\n        return is_valid\n    if date_format_output[0] < 1 or date_format_output[0] > 30:\n        return is_valid\n    if not (month_range(date_format_output[0], date_format_output[1], date_format_output[2]) or\n            is_month_in_range(date_format_output[0], date_format_output[1]) or\n            is_month_in_range(date_format_output[0], date_format_output[2])):\n        return is_valid\n    return True\n",
        "num_ids": 325
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    \n    return True if len(date) > 0 and len(date) <= 10 and date[0].isdigit() and date[-1].isdigit() and len(date) == 4 and len(date) == len(date) and len(date) == 30 and len(date) == 31 and date[0] < date[-1] and date[:2] == '03' and date[2:4] in ['01','03'] and date[-2:] in ['20','30','40','41']:\n        return True\n    \n    else:\n        return False\n",
        "num_ids": 138
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    try:\n        valid_date = re.compile(r'^\\d{1,2}-[0-2]\\d{1,2}-[0-2]\\d{4}$')\n        if not valid_date.match(date):\n            return False\n    except:\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    date = date.strip()\n    if len(date) <= 0:\n        return False\n    elif len(date) == 1:\n        if not (date[0].isdigit() and (int(date) > 31 or int(date) < 1)):\n            return False\n        else:\n            return True\n    elif len(date) == 2:\n        if not (date[0].isdigit() and (int(date[0]) > 31 or int(date[0]) < 1)):\n            return False\n        elif not (date[1].isdigit() and (int(date[1]) > 31 or int(date[1]) < 1)):\n            return False\n        else:\n            return True\n    elif len(date) == 3:\n        if not (date[0].isdigit() and (int(date[0]) > 31 or int(date[0]) < 1)):\n            return False\n        elif not (date[1].isdigit() and (int(date[1]) > 31 or int(date[1]) < 1)):\n            return False\n        elif not (date[2].isdigit() and (int(date[2]) > 31 or int(date[2]) < 1)):\n            return False\n        else:\n            return True\n    elif len(date) == 4:\n        if not (date[0].isdigit() and (int(date[0]) > 31 or int(date[0]) < 1)):\n            return False\n        elif not (date[1].isdigit() and (int(date[1]) > 31 or int(date[1]) < 1)):\n            return False\n        elif not (date[2].isdigit() and (int(date[2]) > 31 or int(date[2]) < 1)):\n            return False\n        elif not (date[3].isdigit() and (int(date[3]) > 31 or int(date[3]) < 1)):\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 489
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # Step 1:\n    if not date:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    try:\n        d,m,y = map(int, date.split('-'))\n        if y < 1 or y > 31 or (m < 1 or m > 12):\n            return False\n        elif (y % 4 == 0 and y % 100!= 0) or (y % 100 == 0 and y % 400!= 0):\n            return False\n        elif d < 1 or d > 31:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n",
        "num_ids": 118
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return (date!= \"\") and (len(date) >= 3) and (len(date) <= 7) and (0<= int(date[0:2])<= 31) and (0<= int(date[3:5])<= 30) and (0<= int(date[6:7])<= 31) and (0<= int(date[8:])<= 31)\n",
        "num_ids": 95
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        assert len(date) > 0, 'The date is invalid!'\n        assert date.isnumeric(), 'The date is not a number!'\n        if len(date) == 7:\n            assert 1 <= int(date[0]) <= 31, 'The date is not a valid date!'\n        elif len(date) == 10:\n            assert 1 <= int(date[0]) <= 31, 'The date is not a valid date!'\n            assert 1 <= int(date[1]) <= 31, 'The date is not a valid date!'\n        else:\n            assert False, 'The date is not a valid date!'\n    except AssertionError:\n        return False\n    else:\n        return True\n",
        "num_ids": 166
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if \" \" not in txt:\n        return txt.split()\n    else:\n        return [x.strip(\" \").lower() for x in txt.split(\", \")]\n    \n",
        "num_ids": 48
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Can take a little time.\n    return [word for word in txt.split(',') if word!= '']\n",
        "num_ids": 31
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    txt = txt.lower()\n    txt = re.sub(\"[^a-zA-Z0-9]+\", \" \", txt)\n    txt = re.sub(\" \", \",\", txt)\n    return txt.split(\",\")\n",
        "num_ids": 61
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if txt == '':\n        return 0\n    \n    words = []\n    for i in range(len(txt)):\n        if txt[i].isalpha():\n            words.append(txt[i])\n            if i % 2 == 0:\n                words.append(txt[i])\n    return words\n",
        "num_ids": 76
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # +++your code here+++\n    # This could be improved with 'list comprehension'\n    # This can be improved with'string'\n    return list(txt.split())\n    #return [txt.split() for txt in txt.split() if txt[0].isalpha()]\n",
        "num_ids": 70
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    txt = txt.lower()\n    txt_split = re.split('[,\\s]', txt)\n    \n    return txt_split\n",
        "num_ids": 38
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    txt = txt.strip().replace(',','').replace('.','').replace(';','').replace('!','').replace('?','').replace(':','')\n    txt = txt.split(' ')\n    for word in txt:\n        if word not in result:\n            result.append(word)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.lower()\n    words = txt.split(\",\")\n    if \" \" in words:\n        words.remove(\" \")\n    return words\n    \ndef normalize_words(txt):\n    '''\n    Given a string of words, return a list of words normalized to lowercase using the character range (0 to 25)\n    Examples\n    normalize_words(\"This is a very long string\") \u279e ['this', 'is', 'a','very', 'long','string']\n    normalize_words(\"This is a very long string\") \u279e ['this', 'is', 'a','very', 'long','string']\n    normalize_words(\"abcdef\") == 3\n    '''\n    txt = txt.lower()\n    words = []\n    for i in range(0,len(txt),2):\n        words.append(txt[i:i+2])\n    return words\n    \ndef ngram(txt, n):\n    '''\n    Given a string of words, return a list of words with n-grams broken down using the range (0 to 25)\n    Examples\n    ngram(\"This is a very long string\", 3) \u279e ['This', 'is', 'a','very', 'long','string']\n    ngram(\"This is a very long string\", 2) \u279e ['this', 'is', 'a','very', 'long']\n    ngram(\"abcdef\", 3) \u279e ['abc', 'def']\n    ngram(\"abcdef\", 2) \u279e ['abc', 'def']\n    '''\n    txt = txt.lower()\n    txt_size = len(txt)\n    words = []\n    for i in range(0,txt_size,2**n):\n        words.append(txt[i:i+2**n])\n    return words\n    \ndef get_ngrams(txt, n):\n    '''\n    Given a string of words, return a list of words with n-grams broken down using the range (0 to 25)\n    Examples\n    get_ngrams(\"This is a very long string\", 3) \u279e ['This', 'is', 'a','very', 'long','string']\n    get_ngrams(\"This is a very long string\", 2) \u279e ['this', 'is', 'a','very', 'long']\n    get_ngrams(\"abcdef\", 3) \u279e ['abc', 'def']\n    get_ngrams(\"abcdef\", 2) \u279e ['abc', 'def']\n    '''\n    txt = txt.lower()\n    txt_size = len(txt)\n    ngrams = []\n    for i in range(0,txt_size,2**n):\n        ngrams.append(txt[i:i+2**n])\n    return ngrams\n    \ndef get_ngrams_lower(txt, n):\n    '''\n    Given a string of words, return a list of words with n-grams broken down using the range (0 to 25)\n    Examples\n    get_ngrams_lower(\"This is a very long string\", 3) \u279e ['This', 'is', 'a','very', 'long','string']\n    get_ngrams_lower(\"This is a very long string\", 2) \u279e ['this', 'is', 'a','very', 'long']\n    get_ngrams_lower(\"abcdef\", 3) \u279e ['abc', 'def']\n    get_ngrams_lower(\"abcdef\", 2) \u279e ['abc', 'def']\n    '''\n    txt = txt.lower()\n    txt_size = len(txt)\n    ngrams = []\n    for i in range(0,txt_size,2**n):\n        ngrams.append(txt[i:i+2**n])\n    return ngrams\n    \ndef get_ngrams_sentence(txt, n):\n    '''\n    Given a string of words, return a list of words with n-grams broken down using the range (0 to 25)\n    Examples\n    get_ngrams_sentence(\"This is a very long string\", 3) \u279e ['This', 'is', 'a','very', 'long','string']\n    get_ngrams_sentence(\"This is a very long string\", 2) \u279e ['this', 'is', 'a'",
        "num_ids": 1010
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = txt.split(',')\n    return words if not words[0] else words[1:]\n",
        "num_ids": 27
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    return [t.strip(' ') for t in txt.split(',')]\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    for i in range(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n = len(lst)\n    for i in range(n-1):\n        if lst[i]!= lst[i+1]:\n            return False\n",
        "num_ids": 42
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for item in lst:\n        if item in lst:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # While there are more than one duplicate, increase the largest number\n    # of times to decrease the number of duplicates\n    while True:\n        for i in range(len(lst)):\n            if lst[i]!= lst[i]:\n                lst[i] = lst[i]*2\n                break\n        else:\n            break\n    # return true if the list is sorted in ascending order,\n    # otherwise return false\n    return sorted(lst) == lst\n",
        "num_ids": 117
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 1\n    for x in lst:\n        if lst[i]!= x:\n            i += 1\n            continue\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return not len(set(lst)) > len(lst)\n",
        "num_ids": 18
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    if len(lst) == 1:\n        return True\n    return lst[0] == lst[1] and is_sorted(lst[2:])\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst_iter = iter(lst)\n    first = next(lst_iter)\n    last = first\n    while first!= last:\n        if first == last:\n            return False\n        first = next(lst_iter)\n        last = next(lst_iter)\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(lst) - 1:\n        if lst[i] == lst[i + 1]:\n            i += 1\n            continue\n        return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # OR\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[0]:\n        if interval1[0] <= interval2[1] and interval1[1] >= interval2[1]:\n            return \"YES\"\n    elif interval2[0] <= interval1[0] and interval2[1] >= interval1[0]:\n        return \"YES\"\n    elif interval2[0] <= interval1[1] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 138
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # write your code here\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    elif interval1[1] > interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    # Write your code here\n",
        "num_ids": 66
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    inter = interval1[0]\n    end = interval1[1]\n    for i in range(inter[0], end + 1):\n        if i in interval2:\n            return \"YES\"\n    return \"NO\"\n",
        "num_ids": 54
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    return \"NO\"",
        "num_ids": 38
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if interval1[0] <= interval2[1] and interval2[0] >= interval1[1]:\n        return \"YES\"\n    else:\n        return \"NO",
        "num_ids": 41
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not interval1 or not interval2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        if interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n            if interval1[1] - interval1[0] == interval2[1] - interval2[0]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n",
        "num_ids": 115
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if interval1[0] <= interval2[1]:\n        if interval1[1] >= interval2[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif interval1[1] >= interval2[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 76
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert(len(interval1) == len(interval2))\n    for i in range(len(interval1)):\n        if interval1[i] >= interval2[i]:\n            interval1[i] += interval1[i]\n            interval1[i] %= interval2[i]\n    return \"YES\" if interval1[0] == interval2[0] else \"NO\"\n",
        "num_ids": 97
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    signs = [True, -1, 0]\n    arr.sort(reverse = True)\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i] * signs[i]\n    return s\n",
        "num_ids": 58
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return None for empty arr\n    if not arr:\n        return None\n    \n    magnitude = 0\n    signs = []\n    for num in arr:\n        if num > 0:\n            magnitude += num\n        else:\n            signs.append(1)\n    \n    for sign in signs:\n        magnitude *= sign\n    \n    return magnitude\n",
        "num_ids": 91
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    # n is length of array\n    n = len(arr)\n    # product of all signs of each number in array\n    result = 1\n    # product of all signs of each number multiplied by product\n    # of all signs multiplied by product of all signs multiplied by product of all signs\n    for i in range(n):\n        # sum of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplied by product of all signs multiplie",
        "num_ids": 1026
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    arr.sort()\n    num_arr = len(arr)\n    res = 0\n    for n in range(num_arr):\n        if arr[n] < 0:\n            if arr[n] == -1:\n                return None\n            res += 1\n    return res*num_arr\n",
        "num_ids": 71
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    signs_dict = {0: 1, 1: -1, -1: 0}\n    magnitude_dict = {}\n    arr_len = len(arr)\n    for i in range(arr_len):\n        magnitude = arr[i]*signs_dict[arr[i]]\n        magnitude_dict[i] = magnitude\n    return sum(magnitude_dict.values())\n",
        "num_ids": 98
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    arr.sort()\n    magn = [0]*len(arr)\n    res = [0]*len(arr)\n    for i in range(len(arr)):\n        magn[i] = arr[i]\n    for i in range(len(arr)):\n        if magn[i] > 0:\n            res[i] = magn[i] * prod_signs(arr[:i])\n        else:\n            res[i] = 0\n    return res\n",
        "num_ids": 116
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [sum([-1 if x < 0 else x for x in arr])] + [None if arr else 0]\n",
        "num_ids": 29
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = 1\n    for i in arr:\n        res *= (1 if i>0 else -1)\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for num in arr:\n        sum += num * num\n    return sum\n",
        "num_ids": 24
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # All the cells\n    m = len(grid)\n    n = len(grid[0])\n",
        "num_ids": 25
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not grid:\n        return []\n    path = []\n    n, k = len(grid), len(grid[0])\n    lst_A, lst_B = [], []\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                lst_B.append(grid[i][j])\n            elif j == 0:\n                lst_A.append(grid[i][j])\n            elif j == n - 1:\n                lst_B.append(grid[i][j - 1])\n            else:\n                lst_B.append(grid[i][j - 1])\n                lst_A.append(grid[i][j])\n        path.append(lst_A[:])\n        lst_A, lst_B = [], []\n    # print(path)\n    for i in range(n - k):\n        lst_B = [grid[x + i][j] for j in range(k) for x in range(n - i - 1)]\n        # print(lst_B)\n        lst_A = [grid[x + i][j] for j in range(k) for x in range(i + 1, n - i)]\n        path.append(lst_A)\n        path.append(lst_B)\n    # print(path)\n    return path[::-1",
        "num_ids": 339
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(grid)\n    if n <= 2:\n        return grid\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_A = []\n    lst_B = []\n    N = len(grid)\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] > grid[i][j]:\n                lst_A.append(grid[i][j])\n                lst_B.append(grid[i][j])\n            else:\n                lst_B.append(grid[i][j])\n    \n    for i in range(1, N):\n        for j in range(N - 1, i, -1):\n            if grid[i][j] > grid[i][j - 1]:\n                lst_A.append(grid[i][j])\n                lst_B.append(grid[i][j - 1])\n    \n    lst_A.sort()\n    lst_B.sort()\n    return lst_A + lst_B[:k",
        "num_ids": 221
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def minPathHelper(grid, lst, i, j):\n        if i == len(grid):\n            return []\n",
        "num_ids": 30
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    N = len(grid)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n",
        "num_ids": 112
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code here\n    if not grid:\n        return []\n    if k == 1:\n        return grid\n    result = []\n    for i in range(0, len(grid)):\n        for j in range(0, len(grid)):\n            if j!= i:\n                lst = []\n                for k in range(j, len(grid)):\n                    lst.append(grid[i][k])\n                lst.sort()\n                lst = lst[::-1]\n                result.extend(lst)\n    return result\n",
        "num_ids": 135
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: implement this function\n",
        "num_ids": 10
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Find the min path\n    # The number of values is the number of neighbors, with each neighbor\n    # having a least num_solution + 1 neighbors\n    # The solution is the one with the lowest num_solution + 1\n    def findMinPath(grid, k, visited, path, num_solution):\n        if len(path) == num_solution:\n            return path[:]\n        for i in range(len(grid[0])):\n            if i not in visited:\n                new_path = findMinPath(grid, k, visited, path + [i], num_solution)\n                if len(new_path) > len(path):\n                    return new_path\n",
        "num_ids": 161
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    n = len(grid)\n    m = len(grid[0])\n",
        "num_ids": 21
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if(n <= 0):\n        raise ValueError(\"n must be a non-negative integer\")\n",
        "num_ids": 24
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Base Cases:\n    # 1) n = 0\n    # 2) n = 1\n    # 3) n = 2\n    # 4) n = 3\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2, 3]\n    else:\n        return [1, 3, 2, 8]\n",
        "num_ids": 114
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        return [1, 1, 2] + [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 1:\n        return [1, n]\n    \n    first_two = 2 * n - 3\n    return [first_two + tri(n - 1) + tri(n - 2), first_two + tri(n - 2) + tri(n + 1)]",
        "num_ids": 66
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    elif n == 3:\n        return [1, 2]\n    elif n == 4:\n        return [1, 2, 3]\n    else:\n        ans = [1, 1, 2]\n        for i in range(3, n + 1):\n            ans.append(tri(i) + ans[-1])\n        return ans\n",
        "num_ids": 113
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: complete this function\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 2]\n    elif n % 2 == 0:\n        n1 = n//2\n        return tri(n1) + [tri(n1) + [tri(n1 + 1)] + tri(n1 + 2)]\n    else:\n        n1 = n//2 - 1\n        return [tri(n1) + [tri(n1 + 1)] + tri(n1 + 2)]\n",
        "num_ids": 140
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        result.append(tri(i))\n    return result",
        "num_ids": 32
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n<=0:\n        return []\n    elif n==1 or n==2:\n        return [1]\n    else:\n        t = [1, n // 2, n//3]\n        return t + tri(n-1)\n",
        "num_ids": 61
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def recur(n, array):\n        if n == 0:\n            return array\n        else:\n            array.append(tri(n - 1) + tri(n - 2) + tri(n + 1))\n            return recur(n - 1, array)\n",
        "num_ids": 64
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n < 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n",
        "num_ids": 36
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = 1\n    n = n // 2\n    while n > 0:\n        if n % 2 == 1:\n            even *= n\n            n = n // 2\n        else:\n            n = n // 2\n    return even\n",
        "num_ids": 57
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst = list(str(n))\n    odd_digits = 0\n    for i in range(len(lst)):\n        if int(lst[i]) % 2 == 0:\n            odd_digits += int(lst[i])\n    return odd_digits * 2\n",
        "num_ids": 71
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return n\n    return digits(n//2) * digits(n-2*(n-1))\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        digits = []\n        odd = n % 2\n        while odd:\n            digits.append(odd)\n            odd = n % 2\n        digits.append(odd)\n        return digits\n",
        "num_ids": 75
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    n = str(n)\n    odds = 0\n    for i in range(len(n)):\n        if i % 2 == 1:\n            odds = odds * 10 + int(n[i])\n    return odds\n",
        "num_ids": 66
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n*(n+1)//2 if n%2 else 0\n",
        "num_ids": 19
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return 0 if n%2==1 else n//10\ndef primeFactors(n):\n    \"\"\"Return a list of all prime factors of n.\n",
        "num_ids": 36
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #problem : https://www.hackerrank.com/challenges/innermost-dot-string/problem\n    \n    a = []\n    for i in string:\n        if i == '[' or i == '{':\n            a.append(i)\n        elif i == ']' or i == '}':\n            if len(a) == 0:\n                return False\n            if a[-1] == '[':\n                return False\n            a.pop()\n    if len(a) == 0:\n        return True\n    return False\n",
        "num_ids": 129
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nesting = 0\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            nesting += 1\n        elif string[i] == \"]\":\n            if nesting == 0:\n                return False\n            nesting -= 1\n    return nesting == 0\n",
        "num_ids": 70
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brackets = []\n    result = False\n    for char in string:\n        if char in '[{(' or char in '[{[]' or char in '[{]}]' or char in '[]()':\n            brackets.append(char)\n        else:\n            if not result:\n                result = True\n            else:\n                if brackets[-1] in '[{' or brackets[-1] in '[]' or brackets[-1] in '[]{}' or brackets[-1] in '}]}':\n                    brackets.pop()\n                    if not result:\n                        result = True\n                elif brackets[-1] in '}]}':\n                    brackets.pop()\n                    if not result:\n                        result = True\n    if not result:\n        return False\n    return result\n",
        "num_ids": 185
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    index = 0\n    while index < len(string):\n        if string[index].isalpha():\n            if string[index] == '{' or string[index] == '[':\n                left = string[index]\n                index += 1\n                while index < len(string) and string[index].isalpha():\n                    if string[index] == '}':\n                        if left == '{':\n                            return False\n                        else:\n                            left = '{'\n                            index += 1\n                    elif string[index] == '[':\n                        if left == '[':\n                            return False\n                        else:\n                            left = '['\n                            index += 1\n                    elif string[index] == ']':\n                        if left == ']':\n                            return False\n                        else:\n                            left = ']'\n                            index += 1\n                    else:\n                        if left == ']':\n                            return False\n                        else:\n                            left = '['\n                            index += 1\n                if left == '}':\n                    return False\n                else:\n                    return False\n            else:\n                if string[index] == '}':\n                    return False\n                else:\n                    return False\n        else:\n            index += 1\n    return True\n",
        "num_ids": 282
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if string == '':\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            if is_nested(string[:i] + string[i + 1:]) == False:\n                return False\n        if string[i] == ']':\n            if is_nested(string[:i] + string[i + 1:]) == False:\n                return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = False\n    for i in range(len(string)):\n        if string[i] == ']':\n            if not result:\n                result = True\n            else:\n                return False\n        elif string[i] == '[':\n            if not result:\n                result = True\n            else:\n                return False\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    stack = []\n    count = 0\n    for char in string:\n        if char == '{':\n            stack.append(char)\n        elif char == '[':\n            count = count + 1\n            if count == len(stack):\n                return True\n            else:\n                return False\n        elif char == '}':\n            stack.pop()\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == \"[]\":\n        return True\n    elif string[0] == \"[\" and string[-1] == \"]\":\n        return is_nested(string[1:-1])\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here\n    return is_subsequence(string)\n",
        "num_ids": 18
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if string == '':\n        return True\n    elif string[0] == '{' and string[-1] == '}':\n        return is_nested(string[1:-1])\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return sum(map(lambda x: x ** 2, lst))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(int(i**2) for i in lst",
        "num_ids": 16
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sums = 0\n    for item in lst:\n        sums += item ** 2\n    return sums\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    squares = []\n    for elem in lst:\n        squares.append(round(elem**2, -1))\n    return squares\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum(map(lambda x: (x**2),lst))\n",
        "num_ids": 19
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = 0\n    for i in lst:\n        s += i**2\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in lst:\n        if i < 0:\n            lst.remove(i)\n            lst.append(0)\n            continue\n        lst.append(round(i*i,1))\n    return sum(lst)\n",
        "num_ids": 60
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        result = result + (lst[i] ** 2)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers = []\n    for i in lst:\n        numbers.append(round(i**2,2))\n    return numbers\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if lst == []:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    try:\n        last_char = txt[-1]\n        last_char_not_in_word = True\n        for i in range(len(txt)-2):\n            if txt[i] not in word_chars:\n                last_char_not_in_word = False\n        if last_char_not_in_word:\n            return False\n        else:\n            return True\n    except IndexError:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = False\n    if txt[-1] =='':\n        result = True\n    else:\n        result = False\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    char_set = set()\n    for char in txt:\n        if char in char_set:\n            return False\n        else:\n            char_set.add(char)\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return True if txt[-1].isalpha() and txt[-2].isalpha() and txt[-3].isalpha() and txt[-4].isalpha() and txt[-5].isalpha() else False\n",
        "num_ids": 57
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if (txt[-1]!= 'a') and (txt[-1]!= 'e') and (txt[-1]!= 'i') and (txt[-1]!= 'o') and (txt[-1]!= 'u') and (txt[-1]!= 'y'):\n        return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count_letter = 0\n    for letter in txt:\n        if letter.isalpha():\n            count_letter += 1\n    if count_letter == len(txt):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    word = txt.split(\" \")\n    last_char_is_a_letter = False\n    if len(word[-1]) == 1:\n        if word[-1][-1].isalpha():\n            last_char_is_a_letter = True\n    return last_char_is_a_letter\n",
        "num_ids": 77
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return txt[-1].lower() not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','')\n",
        "num_ids": 92
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if txt[-1] not in string.ascii_letters:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i = len(txt) - 1\n    while i >= 0:\n        if txt[i].isalpha() and txt[i][0].isalpha():\n            return False\n        else:\n            i = i - 1\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if arr == []:\n        return -1\n    if arr[0] > arr[1]:\n        return 1\n    if arr[0] >= arr[1]:\n        return 0\n    return can_arrange(arr[1:])\n",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if arr == []:\n        return -1\n    elif arr[0] == arr[-1]:\n        return 0\n    else:\n        index = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[index]:\n                index = i\n        return index\n",
        "num_ids": 73
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] < arr[max_index]:\n            max_index = i\n",
        "num_ids": 42
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    d = {}\n    for index in arr:\n        if index in d:\n            return d[index]\n        else:\n            d[index] = index\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i-1] and arr[i] < arr[i-2]:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (arr.index(min(arr)) + 1) if arr else -1\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return find_max_index_of_not_greater_than(arr, arr[:-1])\n",
        "num_ids": 26
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here.\n    max_index = -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[max_index] and arr[i] >= arr[max_index + 1]:\n            max_index = i\n    return max_index\n",
        "num_ids": 70
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # memoization\n    memo = [0]*len(arr)\n    def helper(arr, n):\n        # if last element of array is greater than current element\n        # then return -1\n        if memo[n]!=-1:\n            return memo[n]\n        if n==len(arr)-1:\n            return -1\n        # find last element that is not greater than current element\n        # and compare it with previous element\n        # and update previous element if needed\n        previous = arr[n]\n        for i in range(n,len(arr)):\n            if arr[i]>previous:\n                previous = arr[i]\n            elif arr[i]<previous:\n                memo[n] = i\n                return i\n        return -1\n    return helper(arr, 0)\n",
        "num_ids": 195
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a = -10\n    b = 10\n    for num in lst:\n        if num < 0:\n            a = max(a, num)\n            b = min(b, num)\n        else:\n            a = min(a, num)\n            b = max(b, num)\n    return a, b\n    ",
        "num_ids": 78
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x >= 0]\n",
        "num_ids": 35
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return min(lst), max(lst)\n",
        "num_ids": 14
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_negative = max(-value for value in lst)\n    min_positive = min(value for value in lst if value >= 0)\n    return (max_negative, min_positive)\n",
        "num_ids": 47
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    maximum = None\n    minimum = None\n    integers = []\n    for item in lst:\n        if item > 0:\n            integers.append(item)\n            if maximum is None or item > maximum:\n                maximum = item\n        else:\n            if minimum is None or item < minimum:\n                minimum = item\n",
        "num_ids": 77
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num_ints = set(lst)\n    # print(num_ints)\n    if len(num_ints) == 0:\n        return None\n    max_int = max(num_ints)\n    min_int = min(num_ints)\n    # print(max_int, min_int)\n    if max_int < min_int:\n        return (max_int, min_int)\n    if max_int == min_int:\n        return (max_int, min_int)\n    else:\n        return (min_int, max_int)\n",
        "num_ids": 136
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    smallest_neg_list = []\n    smallest_pos_list = []\n    for x in lst:\n        if x < 0:\n            smallest_neg_list.append(x)\n        else:\n            smallest_pos_list.append(x)\n    if smallest_neg_list == None or smallest_neg_list == []:\n        return None\n    elif smallest_neg_list == []:\n        return (smallest_pos_list[0], smallest_pos_list[0])\n    else:\n        return (smallest_neg_list[0], smallest_pos_list[0])\n",
        "num_ids": 147
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst.sort()\n    \n    # max = lst[0]\n    # min = lst[-1]\n",
        "num_ids": 31
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for i in lst:\n        if i < 0:\n            if min_pos == None or i < min_pos:\n                min_pos = i\n        else:\n            if max_neg == None or i > max_neg:\n                max_neg = i\n    \n    if min_pos == None or max_neg == None:\n        return (None, None)\n    \n    return (min_pos, max_neg)\n    \n",
        "num_ids": 142
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest = None\n    largest = None\n    for i in lst:\n        if smallest is None or i < smallest:\n            smallest = i\n        if largest is None or i > largest:\n            largest = i\n    return smallest, largest\n",
        "num_ids": 59
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Handle the return value.\n    if type(a) == type(b):\n        return a > b\n    elif type(a) == type(float(b)):\n        return a > b\n    elif type(a) == type(int(b)):\n        return a > b\n    elif type(a) == type(str(b)):\n        return a > b\n    elif type(a) == type(\"\"):\n        return a > b\n    else:\n        return None\n",
        "num_ids": 120
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return max(a, b)\n",
        "num_ids": 10
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Check types\n    if type(a)!= type(b):\n        return None\n    if type(a) is float:\n        return b\n    if type(a) is int:\n        return a\n    if type(a) is str:\n        return b\n",
        "num_ids": 64
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a == b:\n        return a\n    if isinstance(a, float) or isinstance(b, float):\n        return None\n    if isinstance(a, str) or isinstance(b, str):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, bool):\n        if a == b:\n            return a\n        else:\n            return None\n    if isinstance(a, list) or isinstance(b, list):\n        if a == b:\n            return a\n        else:\n            return None\n    return None\n",
        "num_ids": 141
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if type(a) == str or type(b) == str:\n        a = float(a)\n        b = float(b)\n        if a == b:\n            return a\n        else:\n            return None\n    if type(a) == int or type(b) == int:\n        a = float(a)\n        b = float(b)\n        if a == b:\n            return a\n        else:\n            return None\n    if type(a) == float or type(b) == float:\n        a = float(a)\n        b = float(b)\n        if a == b:\n            return a\n        else:\n            return None\n    if type(a) == list or type(b) == list:\n        a = str(a)\n        b = str(b)\n        if a == b:\n            return a\n        else:\n            return None\n    if type(a) == dict or type(b) == dict:\n        a = str(a)\n        b = str(b)\n        if a == b:\n            return a\n        else:\n            return None\n",
        "num_ids": 261
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n",
        "num_ids": 19
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Comparing integers\n    if type(a) == int:\n        return b\n    # Comparing floats\n    elif type(a) == float:\n        return b\n    # Comparing strings\n    elif type(a) == str:\n        return b\n",
        "num_ids": 63
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    print(\"Checking\", a, \"vs\", b)\n    if type(a) == type(b):\n        return max(a, b)\n    if type(a) == int or type(a) == float:\n        return max(a, b)\n    if type(a) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        return None\n",
        "num_ids": 99
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 0:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def sum_of_even_numbers(n):\n        # Base case\n        if n == 0 or n == 1:\n            return True\n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return False\n    else:\n        if n % 2 == 0:\n            return is_equal_to_sum_even(n // 2) and is_equal_to_sum_even(n - (n // 2))\n        else:\n            return is_equal_to_sum_even(n - (n // 2))\n",
        "num_ids": 84
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # you can use the formula here: https://www.hackerrank.com/challenges/the-power-of-four/problem\n    # you can check the result here: https://www.youtube.com/watch?v=ZddSJiLJ7O&ab_channel=Akademy\n",
        "num_ids": 72
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 3:\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Create a list of the first 4 even numbers from 1 to 100\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n               31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n               61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n    \n    # Create a dictionary to store the sum of the first four numbers\n    sum_of_all_numbers = {numbers[0]: 0, numbers[1]: 0, numbers[2]: 0, numbers[3]: 0}\n    \n    # Iterate over the numbers list and create a dictionary containing the numbers and their sum\n    for number in numbers:\n        sum_of_all_numbers[number] += 1\n    \n    # Check if the number in the dictionary contains four of them\n    if sum_of_all_numbers[numbers[0]] == 4 or sum_of_all_numbers[numbers[1]] == 4 or sum_of_all_numbers[numbers[2]] == 4 or sum_of_all_numbers[numbers[3]] == 4:\n        return True\n    else:\n        return False\n",
        "num_ids": 403
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(1, n + 1):\n        if i % 2 == 0:\n            continue\n        if i % 3 == 0:\n            continue\n        if i % 5 == 0:\n            continue\n        if i % 7 == 0:\n            continue\n        if i % 9 == 0:\n            continue\n        if i % 11 == 0:\n            continue\n        if i % 13 == 0:\n            continue\n        if i % 15 == 0:\n            continue\n        return False\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 4:\n        return False\n    if n % 4 == 0:\n        return True\n    return is_equal_to_sum_even(n-3)\n",
        "num_ids": 42
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n == sum(range(1, 5)) and n == sum(range(4, 9)) and n == sum(range(6, 11))\n",
        "num_ids": 36
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n<=0:\n        return False\n    \n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            return False\n    \n    return True\n",
        "num_ids": 51
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return n * (n - 1) * (n - 2) *... * 1\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial_value = 1\n    for i in range(n):\n        factorial_value = factorial_value * (i + 1)\n    return factorial_value",
        "num_ids": 41
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    factorial_n = 1\n    for i in range(1, n):\n        factorial_n *= i\n    return factorial_n\n",
        "num_ids": 36
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: implement this function.\n",
        "num_ids": 11
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n - 4)\n",
        "num_ids": 65
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError(\"The factorial does not exist for negative numbers\")\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 65
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10)\n",
        "num_ids": 65
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if (n <= 0):\n        return 1\n    else:\n        return n * special_factorial(n - 1) * special_factorial(n - 2) *... * ",
        "num_ids": 44
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(text) <= 2:\n        return text\n    elif len(text) > 2 and text[0] == \" \" and text[-1] == \" \":\n        text = text[1:-1]\n        return text\n    else:\n        return text + \"-\"\n",
        "num_ids": 68
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(text) < 2:\n        return text\n    else:\n        for i in range(len(text)-2):\n            if text[i] == text[i+1] and text[i]!= text[i+2]:\n                text = text[:i] + text[i+1] + text[i+2]\n            else:\n                text = text[:i] + text[i] + text[i+1]\n    return text\n",
        "num_ids": 111
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return text.replace(' ', '_').replace('  ', '_').replace('   ', '_').replace('  - ', '_')\n",
        "num_ids": 34
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # print(text)\n    # print(len(text))\n    # print(text.strip())\n    # print(len(text.strip()))\n",
        "num_ids": 38
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Handle 1 to 1, not to 0 or 1\n    text = text.replace(\"  \", \"_\")\n    \n    # Handle 2 to 3, not to 2, 3 and 4\n    if len(text) > 4:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        \n    # Handle 3 to 4, not to 2, 3 and 4\n    if len(text) > 5:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        \n    # Handle 5 to 6, not to 2, 3 and 4\n    if len(text) > 7:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        \n    # Handle 6 to 7, not to 2, 3 and 4\n    if len(text) > 8:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        text = text.replace(\" 8\", \"_\")\n        \n    # Handle 7 to 8, not to 2, 3 and 4\n    if len(text) > 9:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        text = text.replace(\" 8\", \"_\")\n        text = text.replace(\" 9\", \"_\")\n        \n    # Handle 8 to 9, not to 2, 3 and 4\n    if len(text) > 10:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        text = text.replace(\" 8\", \"_\")\n        text = text.replace(\" 9\", \"_\")\n        text = text.replace(\" 10\", \"_\")\n        \n    # Handle 9 to 10, not to 2, 3 and 4\n    if len(text) > 11:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        text = text.replace(\" 8\", \"_\")\n        text = text.replace(\" 9\", \"_\")\n        text = text.replace(\" 10\", \"_\")\n        text = text.replace(\" 11\", \"_\")\n        \n    # Handle 10 to 11, not to 2, 3 and 4\n    if len(text) > 12:\n        text = text.replace(\"  \", \"_\")\n        text = text.replace(\" 2 \", \"_\")\n        text = text.replace(\" 3\", \"_\")\n        text = text.replace(\" 4\", \"_\")\n        text = text.replace(\" 5\", \"_\")\n        text = text.replace(\" 6\", \"_\")\n        text = text.replace(\" 7\", \"_\")\n        text = text.replace(\" 8\", \"_\")\n        text = text.replace(\" 9\", \"_\")\n        text = text.replace(\" 10\", \"_\")\n        text = text.replace(\" 11\", \"_\")\n        text ",
        "num_ids": 1025
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    space_count = 0\n    for char in text:\n        if char =='':\n            space_count += 1\n        elif space_count > 1:\n            char = '_'\n            space_count -= 1\n        text = text.replace(char, '_')\n    return text\n",
        "num_ids": 70
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return text\n    \n    else:\n        for i in range(len(text)-1):\n            if text[i] == \" \":\n                text = text[:i] + \"_\" + text[i+1:]\n            if text[i] == \" \" and text[i+1] == \" \":\n                text = text[:i]+\"_\"+text[i+2:]\n        return text\n    \ndef main():\n    \"\"\"\n    Tests\n    \"\"\"\n    print(fix_spaces(\"Example\"))\n    print(fix_spaces(\"Example 1\"))\n    print(fix_spaces(\"Example 2\"))\n    print(fix_spaces(\"Example   3\"))\n",
        "num_ids": 172
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.replace(' ', '_')\n    \n    if len(text) > 2:\n        for i in range(0, len(text), 2):\n            if text[i] == text[i + 1]:\n                text = text[:i] + \"_\" + text[i + 1:]\n    return text\n",
        "num_ids": 77
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # print(text)\n    \n    # remove all spaces\n    text = re.sub(\"\\s+\", \"\", text)\n    \n    # remove consecutive spaces\n    # count = 0\n    # while count < len(text):\n    #     if text[count] == \" \":\n    #         text = text[:count] + \"_\" + text[count + 1:]\n    #     count += 1\n    \n    # replace consecutive spaces\n    # count = 0\n    # while count < len(text):\n    #     if text[count] == \" \":\n    #         text = text[:count] + \"-\" + text[count + 1:]\n    #     count += 1\n    \n    # print(text)\n    # print(text.split())\n    \n    # re-indent text\n    lines = text.split(\"\\n\")\n    new_lines = []\n    for line in lines:\n        if len(line) == 0:\n            continue\n        indent = len(line) - len(line.lstrip())\n        new_line = line.lstrip()\n        if indent > 0:\n            new_line = \" \" * indent + new_line\n        new_lines.append(new_line)\n    text = \"\\n\".join(new_lines)\n    return text\n",
        "num_ids": 306
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if text.count(\" \") > 2:\n        text = text.replace(\" \", \" _ \")\n    return text\n    \ndef fix_null(text):\n    \"\"\"\n    Given a string text, replace all null characters \n    with underscores, and if the string has more than 2 \n    consecutive null characters, then replace all consecutive \n    null characters with -\n    \n    fix_null(\"Example\") == \"Example\"\n    fix_null(\"Example 1\") == \"Example-1\"\n    fix_null(\" Example   3\") == \"-Example-3\"\n    \"\"\"\n    if text.count(\" \") > 2:\n        text = text.replace(\" \", \"_ \")\n    return text\n    \ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    \n    print(\"Fixing characters...\")\n    for test in [\n        (\"1 _\"),\n        (\"1 _ _ _ _ _ _ _ _ _ _ _\"),\n
        "num_ids": 1025
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # check if there are more than three digits ('0'-'9') in the file's name\n    if len(file_name) < 3:\n        return 'No'\n    # check if the file's name contains exactly one dot '.'\n    if '.' not in file_name:\n        return 'No'\n    # check if the file's name starts with a letter from the latin alphapet 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z') and file_name.startswith('A'):\n        return 'No'\n    # check if the substring before the dot should not be empty, and it starts with a letter from the latin alphapet\n    # 'a'-'z' and 'A'-'Z'\n    if file_name.startswith('a') and file_name.endswith('z'):\n        if file_name[0] == '.':\n            return 'No'\n    # check if the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name[1:] in ['txt', 'exe', 'dll']:\n        return 'No'\n    # return 'Yes' if the file's name is valid\n    return 'Yes'\n",
        "num_ids": 311
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for letter in file_name:\n        if not letter.isalpha() or len(letter) > 3:\n            return 'No'\n        elif not letter.isupper() and letter!= \".\":\n            return 'No'\n        elif not letter.isupper():\n            return 'No'\n        elif letter.islower():\n            return 'No'\n        else:\n            pass\n    return 'Yes'\n",
        "num_ids": 100
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    file_name = file_name.upper()\n    assert file_name.startswith(\".\") or len(file_name) > 3, \"Invalid file name\"\n    assert file_name.isdigit(), \"Invalid file name\"\n    if len(file_name) < 3:\n        return \"No\"\n    else:\n        return \"Yes",
        "num_ids": 82
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # hint: you may find the ord() function useful here\n    #   http://docs.python.org/2/library/functions.html#ord\n    if len(file_name) < 3:\n        return 'No'\n    if file_name[0]!= '0' and file_name[0]!= '.':\n        return 'No'\n    if file_name[1]!= '.' and file_name[1]!= '0':\n        return 'No'\n    if not file_name[2].isalpha():\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 143
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Check if there are more than three digits in the file's name, and if it contains more than one \n    #dot ('0'-'9'), there is an invalid file\n    if len(file_name) < 3:\n        return 'No'\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    valid_file_name = True\n    file_extension = ''\n    for i in file_name:\n        if not i.isdigit():\n            valid_file_name = False\n            break\n        if i.startswith('.'):\n            valid_file_name = False\n            break\n        if len(i) > 1:\n            valid_file_name = False\n            break\n        if i.startswith('_'):\n            valid_file_name = False\n            break\n        if i.isupper():\n            valid_file_name = False\n            break\n        if not i.isalpha():\n            valid_file_name = False\n            break\n        file_extension += i\n    if not valid_file_name:\n        return 'No'\n    if file_extension == 'txt':\n        if len(file_name) < 3 or len(file_name) > 5:\n            return 'No'\n    elif file_extension == 'exe':\n        if len(file_name) < 6 or len(file_name) > 7:\n            return 'No'\n    elif file_extension == 'dll':\n        if len(file_name) < 8 or len(file_name) > 9:\n            return 'No'\n",
        "num_ids": 299
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 25
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # check if there is a dot '.' in the file name\n    file_name_dot_found = \".\" in file_name\n    # check if there are three digits in the name\n    file_name_has_three_digits = len(file_name) >= 3\n    # check if the file's name is valid\n    file_name_valid = file_name.lower().replace('.', '')!= '' and file_name.replace('.', '').isalnum()\n    # check if the substring before the dot is letter from latin alphapet\n    file_name_has_letter = 'A' <= file_name[:1].lower() <= 'Z'\n    return file_name_valid and file_name_dot_found and file_name_has_three_digits and file_name_has_letter\n",
        "num_ids": 194
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Check if there are more than three digits\n    if len(file_name) > 3:\n        return 'No'\n    \n    # Check if the file's name is in the format '0'-9\n    if file_name[0]!= '0' or file_name[0] > '9':\n        return 'No'\n",
        "num_ids": 80
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # create the file's name using the function that checks it\n    file_name_check = os.path.splitext(file_name)[0]\n    \n    # check if the file is valid\n    if os.path.isfile(file_name_check) and (file_name_check.isdigit() == False or len(file_name_check) < 3):\n        return 'No'\n    \n    # check if the file's name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'\n    if not file_name[0].isalpha() and file_name[0] not in ['a','A','z']:\n        return 'No'\n    \n    # check if the file's name contains exactly one dot '.'\n    if not file_name[0].isdigit() and file_name[0]!= '.':\n        return 'No'\n    \n    # check if the file's name contains exactly two digits\n    if not file_name[0].isdigit() and file_name[0] == '0' and len(file_name) > 2:\n        return 'No'\n    \n    # check if the file's name starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'\n    if not file_name[0].isalpha() and file_name[0] in ['a','A','z'] and file_name[1:].islower():\n        return 'No'\n    \n    # check if the file's name ends with a '.'\n    if not file_name[-1].isalpha() and file_name[-1] in ['.',' '] and len(file_name[-2:]) > 0:\n        return 'No'\n    \n    return 'Yes'",
        "num_ids": 427
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_squares = 0\n    for i in lst:\n        sum_squares += i*i\n    return sum_squares\n",
        "num_ids": 34
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3==0 and i%4==0:\n            sum+=i\n        else:\n            sum+=i*i\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if lst[i]%3 == 0 or lst[i]%4 == 0:\n            sum += lst[i]**2\n        else:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for item in lst:\n        if (item % 3 == 0):\n            sum += item * item\n        if (item % 4 == 0):\n            sum += item * item\n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i*i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    res = 0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            res += i*i\n            \n    return res\n",
        "num_ids": 45
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum = sum + i ** 2\n        elif i % 4 == 0:\n            sum = sum + i ** 3\n        else:\n            sum = sum + i ** 4\n    return sum\n",
        "num_ids": 68
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum_list = 0\n    for number in lst:\n        if number % 3 == 0 or number % 4 == 0:\n            sum_list += number\n    return sum_list\n",
        "num_ids": 44
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s=0\n    for i in lst:\n        if i%3==0 and i%4!=0:\n            s+=i**3\n        elif i%3==0 and i%4==0:\n            s+=i**4\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    for i in lst:\n        result += i*i\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return words_in_words(sentence, 1)\n",
        "num_ids": 15
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \" \".join([word for word in sentence.split() if len(word) > 1])\n",
        "num_ids": 24
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # G(n) = O(n) = O(1)\n    # find an order of words\n    order = defaultdict(int)\n    for word in sentence.split():\n        order[word] += 1\n",
        "num_ids": 52
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not sentence:\n        return \"\"\n    sentence = sentence.lower()\n    words = sentence.split()\n    for word in words:\n        if len(word) > 3:\n            return word\n    return \"\"\n",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    word_list = sentence.split()\n    def prime(num):\n        for num2 in range(2, int(num ** 0.5) + 1):\n            if num % num2 == 0:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sentence_len = len(sentence)\n    sentence_split = sentence.split(' ')\n    print(sentence_split)\n    result_string = ''\n    for word in sentence_split:\n        temp = []\n        for i in range(sentence_len):\n            if i < len(word):\n                temp.append(word[i])\n        result_string += ''.join(temp)\n",
        "num_ids": 99
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    words = sentence.split(\" \")\n",
        "num_ids": 16
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    words = sentence.split(\" \")\n    for word in words:\n        if len(word) > 1:\n            if int(len(word) / 2) > 1:\n                return word\n    return \"\"\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    words = sentence.split()\n    if len(words)!= len(set(words)):\n        return sentence\n    for word in words:\n        if not word.isalpha():\n            return sentence\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    words = sentence.split()\n    # print(words)\n    # print(sorted(set(words)))\n    if len(words) > 50:\n        return \" \"\n    primes = []\n    # for word in words:\n    #     if all(len(word) == p for p in primes):\n    #         primes.append(word)\n    #     if all(word[0] == word[1] and word[0].isupper() and word[1].isupper()):\n    #         primes.append(word)\n    # print(primes)\n    # print(sorted(primes))\n    # print(primes)\n    return \" \".join(primes)\n",
        "num_ids": 168
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x == 0:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code\n    #raise NotImplementedError\n    return True\n",
        "num_ids": 19
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code goes here\n    return Fals",
        "num_ids": 12
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    \n    return True if int(x) * int(n) == int(x) * int(n) else False\n    \ndef compute_factors(numbers):\n    \"\"\"Your task is to compute the factors of a given number, that is,\n    return the set of factors of number.\n",
        "num_ids": 71
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == \"\":\n        return True\n    elif n.replace(\"/\", \"\") == \"\":\n        return False\n    elif n.replace(\"/\", \"\") == n.replace(\".\", \"\"):\n        return True\n    else:\n        if n.startswith(n.split(\"/\")[0]):\n            if int(n.split(\"/\")[1]) == int(n.split(\"/\")[0]):\n                return simplify(x, n.split(\"/\")[0]) and simplify(x, n.split(\"/\")[1])\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 151
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(2, n+1):\n        if not is_valid_fraction(n) or is_valid_fraction(i):\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0:\n        return False\n    try:\n        int(n)\n    except ValueError:\n        return False\n    if n == \"0\":\n        return False\n    elif x == \"0\":\n        return False\n    elif n == \"1\":\n        return True\n    elif n[0] == \"0\":\n        return False\n    elif n[0] == \"1\":\n        if n[0]!= \"0\":\n            return simplify(x[1:], int(n[1:]))\n        else:\n            return True\n    else:\n        if n[1:] == \"1\":\n            return simplify(x[1:], int(n[0])) and simplify(x[2:], int(n[1:]))\n        else:\n            return simplify(x[1:], int(n[0]))\n",
        "num_ids": 203
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if is_simplified(x, n):\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    print(x, n)\n    try:\n        print(float(x) * float(n))\n        return True\n    except ValueError:\n        print(\"value error\")\n        return False\n    except TypeError:\n        print(\"type error\")\n        return False\n    except ZeroDivisionError:\n        print(\"ZeroDivisionError\")\n        return False\n    \n    \n",
        "num_ids": 89
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = 0\n    l = len(nums)\n    for i in range(l):\n        s += (nums[i] * (i+1))\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums.sort()\n    return nums\n",
        "num_ids": 13
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum_ = 0\n    sorted_ = []\n    for num in nums:\n        sum_ += num\n    for num in nums:\n        index = sum_ - num\n        sorted_.append(num)\n        if len(sorted_) == len(nums):\n            break\n    return sorted_\n",
        "num_ids": 76
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if nums == []:\n        return []\n    else:\n        nums.sort(key = lambda x: int(str(x)[::-1]))\n        return nums\n",
        "num_ids": 45
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def sort(x):\n        return sum([int(i) for i in str(x)])\n    \n    return sorted(nums, key=sort)\n",
        "num_ids": 39
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def sort_by_sum_digits(nums):\n        sorted_nums = sorted(nums)\n        return sorted_nums[::-1]\n    \n    def sort_by_sum_digits2(nums):\n        sorted_nums = sorted(nums)\n        return [str(num) for num in sorted_nums]\n    \n    sorted_nums = sort_by_sum_digits2(nums)\n    return sorted_nums\n",
        "num_ids": 118
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted = []\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] + nums[j] == nums[i]:\n                sorted.append(nums[j])\n    sorted.sort()\n    return sorted",
        "num_ids": 75
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # create a new list with the same length as the input list\n    new_list = []\n",
        "num_ids": 23
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # initiate list of sorted list\n    sorted_list = []\n    # for loop runs through each element\n    for num in nums:\n        # if sum of digits is equal to the element's sum\n        if sum(map(int, str(num))) == num:\n            # add to sorted_list\n            sorted_list.append(num)\n        # if sum of digits is more than the element's sum\n        elif sum(map(int, str(num))) > num:\n            # remove the first element of sorted_list\n            sorted_list.pop(0)\n            # add the element to sorted_list\n            sorted_list.append(num)\n        # if sum of digits is less than the element's sum\n        elif sum(map(int, str(num))) < num:\n            # add the last element to sorted_list\n            sorted_list.append(num)\n            # remove the last element of sorted_list\n            sorted_list.pop()\n        # if sum of digits is equal to the element's sum\n        else:\n            # add the element to sorted_list\n            sorted_list.append(num)\n            # if there are no more elements in the list\n            if not sorted_list:\n                # add the last element of sorted_list\n                sorted_list.append(num)\n    # sort the list\n    return sorted_list\n",
        "num_ids": 323
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = sum([int(x) for x in nums])\n    nums = list(map(lambda x: int(x), nums))\n    nums.sort(key=lambda x: sum(map(lambda y: int(y), str(x))))\n    return nums\n",
        "num_ids": 68
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    filter = []\n    for i in range(len(nums)):\n        if (nums[i] > 0):\n            filter.append(nums[i])\n    if filter:\n        return len(filter)\n    return 0\n    \ndef main():\n    \"\"\"Write a function that takes a number as an input and prints out the \n    number of elements in the array that are greater than 10 and both first \n    and last digits of a number are odd.\n    For example:\n    main() => 0\n    main() => 1\n    main() => 2\n    \"\"\"\n    nums = [int(n) for n in input().strip().split(' ')]\n    print(specialFilter(nums))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 183
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # your code\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if (nums[i] % 10) > 2:\n                if (nums[i] % 10) > 2:\n                    if (nums[i] % 10) > 2:\n                        count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    odds = [1, 3, 5, 7, 9]\n    for num in nums:\n        if num >= 10 and num % 2!= 0 and num % 10!= 0:\n            count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    count=0\n    first=nums[0]\n    last=nums[-1]\n    for i in nums:\n        if i>=10 and first<i<=last:\n            count+=1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    nums.sort(reverse = True)\n    diff = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2!= 0 and nums[i] > 10:\n            diff += 1\n    return diff\n",
        "num_ids": 69
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your solution here\n    return len(list(filter(lambda x: x >= 10 and x % 2 == 1, nums)))",
        "num_ids": 35
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 10 > 0 and num % 10 % 2 == 0):\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10:\n            count += 1\n            if i % 2 == 1:\n                count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    tot = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 2!= 0:\n            tot += 1\n    return tot\n",
        "num_ids": 52
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return int(2 * n - 3)\n",
        "num_ids": 14
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i+j+k == n:\n                    continue\n                triple = i + j + k\n                if triple % 3 == 0:\n                    max_triples += 1\n    return max_triples\n",
        "num_ids": 92
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n < 3:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return int(math.pow(n, 2) + math.pow(n, 3) - math.pow(n, 4) + 3)",
        "num_ids": 37
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return (a[i] * i - i + 1) * (a[i] + a[j] + a[k]) % 10007\n    return math.factorial(n)\n",
        "num_ids": 46
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if n == 0:\n        return 0\n    \n    a = [0] * n\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    return a\n",
        "num_ids": 54
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # result = 0\n    \n    for i in range(n):\n        a = [i * i - i + 1 for i in range(i + 1)]\n        # print(a)\n        # print(sum(a))\n        if sum(a) % 3 == 0:\n            # result += a.count(1) * a.count(3) * a.count(7) * a.count(13) * a.count(21)\n            result = (sum(a) // 3) * (sum(a) // 3) * (sum(a) // 3) * (sum(a) // 3)\n            # result = (sum(a) // 3) * sum(a)\n    \n    # print(result)\n    return result\n",
        "num_ids": 178
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    return 1",
        "num_ids": 10
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = [1, 3, 7, 13, 21]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #check if it is possible to form array of integers of length as n\n    if n < 2:\n        return 0\n",
        "num_ids": 29
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #Your code goes here\n    return planet1, planet2\n",
        "num_ids": 16
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    planet1_orb = find_planet(planet1)\n    planet2_orb = find_planet(planet2)\n    return sorted(planet1_orb, key=lambda tup: tup[0])+sorted(planet2_orb, key=lambda tup: tup[0])\n",
        "num_ids": 70
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #get the planets\n    planets = (planet1, planet2)\n",
        "num_ids": 19
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    # remove apostrophes\n    planet1 = planet1.replace(\"'\", \"\")\n    planet2 = planet2.replace(\"'\", \"\")\n    if planet1 in (\"mercury\", \"venus\"):\n        planet1 = \"Venus\"\n    if planet2 in (\"mercury\", \"venus\"):\n        planet2 = \"Mercury\"\n    if planet1 in (\"earth\", \"mars\"):\n        planet1 = \"Mars\"\n    if planet2 in (\"earth\", \"mars\"):\n        planet2 = \"Earth\"\n    if planet1 in (\"jup\"):\n        planet1 = \"Jupiter\"\n    if planet2 in (\"jup\"):\n        planet2 = \"Jupiter\"\n    # create empty lists\n    planet_list = []\n    # loop through each planet\n    for i in range(len(planet1)):\n        # get the index of the first occurence of planet1\n        index_1 = planet1.find(planet1[i])\n        # get the index of the second occurence of planet2\n        index_2 = planet2.find(planet2[i])\n        # if the first occurence of planet1 has index_1, \n        # the second occurence of planet2 has index_2\n        if index_1 >= 0 and index_2 >= 0:\n            # if the first index of planet1 equals index_1, \n            # the second index of planet2 equals index_2,\n            # and the second index of planet1 equals the first index of planet2\n            if index_1 == index_2:\n                # append the first index to planet_list\n                planet_list.append(planet1[i])\n            # if the first index of planet1 equals the second index of planet2,\n            # and the first index of planet2 equals the second index of planet1,\n            # and the second index of planet1 equals the first index of planet2\n            elif index_1 == index_2 and index_2 == index_1:\n                # append the first index to planet_list\n                planet_list.append(planet1[i])\n    # return the sorted list of planets\n    return tuple(planet_list)\n",
        "num_ids": 530
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TODO: implement the code to return a tuple containing all planets whose orbits are \n    # located between the orbit of planet1 and the orbit of planet2.\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in [\"solar\", \"solar-systems\"]:\n        return \"The planet names passed to function must be a valid planet name\"\n    if planet2 not in [\"solar\", \"solar-systems\"]:\n        return \"The planet names passed to function must be a valid planet name\"\n    if planet1 == planet2:\n        return \"The planet names passed to function must be different\"\n    \n    planet_list = []\n    for i in range(len(planet1)):\n        if planet1[i] == \"a\" and planet2[i] == \"h\":\n            planet_list.append(\"Sun\")\n        elif planet1[i] == \"c\" and planet2[i] == \"n\":\n            planet_list.append(\"Venus\")\n        elif planet1[i] == \"g\" and planet2[i] == \"m\":\n            planet_list.append(\"Mercury\")\n        elif planet1[i] == \"e\" and planet2[i] == \"y\":\n            planet_list.append(\"Earth\")\n        elif planet1[i] == \"i\" and planet2[i] == \"j\":\n            planet_list.append(\"Jupiter\")\n        elif planet1[i] == \"o\" and planet2[i] == \"r\":\n            planet_list.append(\"Saturn\")\n        elif planet1[i] == \"p\" and planet2[i] == \"u\":\n            planet_list.append(\"Uranus\")\n        elif planet1[i] == \"s\" and planet2[i] == \"t\":\n            planet_list.append(\"Neptune\")\n        else:\n            return \"The planet names passed to function must be a valid planet name\"\n    return tuple(planet_list)\n",
        "num_ids": 476
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    assert is_planet_name(planet1) == True, 'First argument must be a planet name'\n    assert is_planet_name(planet2) == True, 'Second argument must be a planet name'\n    assert len(planet1) == 4, 'First argument must be a correct planet name'\n    assert len(planet2) == 4, 'Second argument must be a correct planet name'\n    assert planet1 in planet2 or planet2 in planet1, 'The planet name you gave is not a planet'\n    \n    # Get the orbits of the planets\n    planet1_orbit = get_orbit(planet1)\n    planet2_orbit = get_orbit(planet2)\n    # Sort the orbits\n    planet1_orbit.sort()\n    planet2_orbit.sort()\n    # Get the orbits of the planets\n    return (planet1_orbit, planet2_orbit)\n",
        "num_ids": 203
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # read planet names\n    planet1_name = read_planet_name(planet1)\n    planet2_name = read_planet_name(planet2)\n    \n    # create empty list for output\n    output = list()\n    \n    # loop through all planet names\n    for planet_name in planet_list:\n        # compute distance between planet names\n        distance = distance_between_names(planet_name, planet1_name, planet2_name)\n        \n        # if planet name is in output\n        if distance < 5:\n            output.append(planet_name)\n    return tuple(output)\n    \n    \ndef find_all_coordinates(planet1, planet2):\n    '''\n    Find the coordinates of the closest orbit of the two planets in terms of \n    their distance from the Sun.\n    This function should return a tuple of the form (x, y, z).\n    Examples\n    find_all_coordinates(\"Mercury\", \"Venus\") ==> (0, 0, 0)\n    find_all_coordinates(\"Saturn\", \"Uranus\") ==> (0, 0, 0)\n    find_all_coordinates(\"Earth\", \"Mercury\") ==> (0, 0, 0)\n    '''\n    # find the closest orbit between the two planets\n    closest_orbit = closest_orbit(planet1, planet2)\n    \n    # create list to store coordinates\n    coordinates = list()\n    \n    # loop through all coordinates of the closest orbit\n    for coordinate in closest_orbit:\n        # if the closest orbit is within the coordinates\n        if coordinate in coordinates:\n            # append coordinate to coordinates list\n            coordinates.append(coordinate)\n            # append coordinate to output list\n            output_list.append(coordinate)\n        # if the closest orbit does not exist within the coordinates list\n        else:\n            # append coordinate to coordinates list\n            coordinates.append(coordinate)\n            # append coordinate to output list\n            output_list.append(coordinate)\n    # return the coordinates\n    return tuple(output_list)\n    \n",
        "num_ids": 486
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return tuple(sorted(list(set(map(lambda planet1: planet1, \n    (planet1, planet2, planet1, planet2, planet1, planet2, planet1, planet2))))))\n",
        "num_ids": 51
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if planet1 not in planet_list:\n        planet1 = 'Sun'\n    if planet2 not in planet_list:\n        planet2 = 'Sun'\n    return ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n",
        "num_ids": 74
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def alphabet_sort(lst):\n        lst.sort(key=lambda x: len(x), reverse=True)\n        return lst\n    \n    lst = list(lst)\n    if type(lst) == str:\n        return []\n    else:\n        lst.sort(key=lambda x: x.strip().lower().count('a'), reverse=True)\n        lst.sort(key=lambda x: x.strip().lower().count('b'), reverse=True)\n        lst.sort(key=lambda x: x.strip().lower().count('c'), reverse=True)\n        return lst\n",
        "num_ids": 150
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    lst = sorted(lst, key = lambda x: (len(x), x))\n    return lst\n",
        "num_ids": 30
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Remove all duplicates from the list\n    # remove words that have odd length\n    # reorder the list\n    def remove_duplicates(lst):\n        # Create a dict with letters and their index\n        # Create a new list with the letters in alphabetical order\n        # Remove the letters from the new list\n        letters = {}\n        for word in lst:\n            for letter in word:\n                if letter in letters:\n                    letters[letter] = letters[letter] + 1\n                else:\n                    letters[letter] = 1\n        for letter in letters:\n            letters[letter] = letters[letter] % len(word)\n        new_list = []\n        for word in lst:\n            new_list += [word[letters[letter] : letters[letter] + len(word)]]\n        return new_list\n    \n    lst = list(lst)\n    # Get only the words\n    lst = remove_duplicates(lst)\n    # Sort words\n    return sorted(lst)\n",
        "num_ids": 240
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code here\n    s = []\n    for i in lst:\n        if len(i) % 2!= 0:\n            s.append(i)\n        else:\n            index = 0\n            for j in i:\n                s.insert(index, j)\n                index += 1\n    return sorted(s)\n",
        "num_ids": 79
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    lst.sort()\n    result = []\n    for i in lst:\n        if len(i)%2:\n            result.append(i)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sorted_lst = []\n",
        "num_ids": 10
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    def remove_odd_letters(word_list):\n        new_list = []\n        for word in word_list:\n            if len(word) % 2 == 1:\n                new_list.append(word.lower())\n            else:\n                new_list.append(word)\n        return new_list\n    \n    def sort_words_list(lst):\n        lst = remove_odd_letters(lst)\n        lst.sort()\n        return lst\n    \n    if type(lst)!= list:\n        return []\n    \n    lst = sorted(lst)\n    new_list = sort_words_list(lst)\n    return new_list\n    \n",
        "num_ids": 166
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    lst = sorted(lst, key = lambda x: len(x))\n    return lst\n    pass\n",
        "num_ids": 34
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    lst_sorted = []\n    \n    for word in lst:\n        if len(word) % 2 == 1:\n            if word.lower() not in lst_sorted:\n                lst_sorted.append(word.lower())\n    return sorted(lst_sorted)\n",
        "num_ids": 74
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Idea:\n    #   - We need to sort the list in descending order.\n    #   - We will check if the words in the list have the same length, then we need to take the smallest length word.\n    #   - The smallest word is the last word in the list.\n    #   - For every pair of words, if the length of the second word is the largest, then it is the smallest.\n",
        "num_ids": 94
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = int(n)\n    if (isprime(n)):\n        return x\n    else:\n        return y\n",
        "num_ids": 31
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # This is only an example, but feel free to add your own code!\n    if n == 0:\n        return 0\n    elif n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n//2, x, y)\n        \ndef fib(n):\n    \"\"\"Fibonacci numbers, or F(n) where F(n) = F(n - 1) + F(n - 2)\n    \n    Examples:\n    for fib(3) == 3\n    for fib(4) == 5\n    \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 202
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if is_prime(n) == True:\n        return x\n    else:\n        return y\n",
        "num_ids": 25
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x is None or y is None:\n        return None\n    \n    # if n is not a prime number\n    if n < 2 or n % 2 == 0:\n        return x\n",
        "num_ids": 45
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n%2!= 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return y\n",
        "num_ids": 31
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if n % 2 == 0:\n        if x == y:\n            return x\n        elif x > y:\n            return x - y\n        else:\n            return y - x\n    else:\n        if x > y:\n            return y - x\n        else:\n            return x + y\n",
        "num_ids": 74
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 2:\n        return x\n",
        "num_ids": 12
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sums = 0\n    for num in lst:\n        if num % 2!= 0:\n            sums += num ** 2\n    return sums\n",
        "num_ids": 37
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if lst == []:\n        return 0\n    \n    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    sum = 0\n    for i in lst:\n        if i%2!= 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    double_difference = 0\n    if len(lst) == 0:\n        return 0\n    for element in lst:\n        if element % 2!= 0:\n            double_difference += element ** 2\n    return double_difference\n",
        "num_ids": 59
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number**2\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum_of_squares = 0\n    \n    if len(lst) == 0:\n        return 0\n    \n    for number in lst:\n        if number % 2 == 1:\n            sum_of_squares += number**2\n    return sum_of_squares\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num**2\n    return total\n    \n    pass\n",
        "num_ids": 40
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2:\n            sum+=i**2\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    sum = 0\n    for i in lst:\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum",
        "num_ids": 53
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        sum += (lst[i]**2)\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    res=[]\n    # if the guess is right, the length is now equal to the result of the guess\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            res.append(0)\n        else:\n            # find the absolute difference between the guess and the score, and add it to a list\n            res.append(abs(guess[i]-game[i]))\n    # return the result\n    return res\n",
        "num_ids": 113
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(guess)==len(score):\n        return 0\n    sum=0\n    for i in range(len(score)):\n        sum+=abs(score[i]-guess[i])\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Your code goes here\n    # get the correct array\n    match=list(range(len(guess)))\n    if guess == match:\n        return 0\n    for i in range(len(guess)):\n        # compare the guess and the scores\n        if guess[i] == match[i]:\n            match[i] = -1\n        else:\n            match[i] = -2\n        # get the score of the guess\n        score = match.count(0)\n        # if the guess matches the score, increment the score\n        if score == 0:\n            match[i] = guess[i]\n        # if the guess does not match the score, subtract the score\n        if guess[i]!= match[i]:\n            score = match.count(0)\n            match[i] = guess[i] - score\n    # return the score\n    return match\n",
        "num_ids": 206
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    assert len(game) == len(guess)\n    score = 0\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            score += 1\n    return score\n",
        "num_ids": 52
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    correct = []\n    incorrect = []\n    total = []\n    correct_guesses = 0\n    incorrect_guesses = 0\n    total_guesses = 0\n    i = 0\n    #print(guess)\n    #print(game)\n    for i in range(len(game)):\n        if (guess[i] == game[i]):\n            correct_guesses += 1\n            total.append(guess[i])\n        else:\n            incorrect_guesses += 1\n            total.append(guess[i])\n            incorrect.append(game[i])\n    #print(correct)\n    #print(incorrect)\n    for i in range(len(total)):\n        total_guesses += int(total[i])\n    for i in range(len(correct)):\n        correct.append(int(correct[i]))\n    for i in range(len(incorrect)):\n        incorrect[i] = int(incorrect[i])\n    #print(correct_guesses)\n    #print(incorrect_guesses)\n    #print(total_guesses)\n    for i in range(len(correct)):\n        total_guesses += int(total[i])\n    for i in range(len(incorrect)):\n        incorrect[i] = int(incorrect[i])\n    for i in range(len(correct)):\n        correct.append(total[i]/correct_guesses)\n    for i in range(len(incorrect)):\n        incorrect[i] = total[i]/incorrect_guesses\n    #print(correct)\n    #print(incorrect)\n    #print(total_guesses)\n    for i in range(len(correct)):\n        total_guesses += int(total[i])\n    for i in range(len(incorrect)):\n        incorrect[i] = total[i]/incorrect_guesses\n    for i in range(len(correct)):\n        correct[i] = total[i]/correct_guesses\n    return(correct,incorrect,total_guesses)\n",
        "num_ids": 502
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #return [abs(guess - score) for score, guess in zip(guess,score)]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \"\"\"\n    Take a guess and scores, and return the absolute difference between the guess and the score\n    \"\"\"\n    scores = game\n    guesses = guess\n    # print(scores)\n    # print(guesses)\n    scores_index = []\n    for i in range(len(scores)):\n        # print(i)\n        if scores[i] == guesses[i]:\n            scores_index.append(i)\n    # print(scores_index)\n    # print(len(scores_index))\n    # print(scores[0])\n    # print(scores[0])\n    # print(len(scores_index))\n    # print(len(scores_index))\n    # print(len(scores))\n    # print(len(guesses))\n    difference = [0 for i in range(len(guesses))]\n    for j in range(len(guesses)):\n        # print(j)\n        # print(scores[guesses[j]])\n        if scores[guesses[j]] == guesses[j]:\n            difference[j] = 0\n        else:\n            difference[j] = abs(scores[guesses[j]] - guesses[j])\n    # print(difference)\n    # print(max(difference))\n    return difference\n",
        "num_ids": 316
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [abs(guess-i) for i in game]\n",
        "num_ids": 17
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    score = 0\n    guess = guess.split()\n    for i in range(len(guess)):\n        score += int(guess[i])\n    return [score,abs(score-guess[i])]\n    \ndef main():\n    numbers = []\n    guesses = []\n    while True:\n        numbers.append(int(input()))\n        guesses.append(input())\n        \n        if len(numbers) == len(guesses):\n            break\n    \n    result = compare(numbers,guesses)\n    if result[1]!= 0:\n        print(f\"{result[0]}\")\n    else:\n        print(\"-1\")\n        \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 182
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code goes here\n    ext_strength = 0\n    # case 1:\n    # find the best extension, and find the one with the highest strength\n    # remember the max value of the extension strength\n    for extension in extensions:\n        if extension[0].islower():\n            ext_strength += caps_to_lower_to_lower[extension[1]]\n        else:\n            ext_strength += caps_to_upper_to_upper[extension[1]]\n    # case 2:\n    # find the best extension, and find the one with the highest strength\n    # remember the max value of the extension strength\n    best_extension = None\n    best_extension_strength = 0\n    for extension in extensions:\n        # remember the max value of the extension strength\n        if extension[0].isupper():\n            ext_strength -= caps_to_upper_to_upper[extension[1]]\n        else:\n            ext_strength -= caps_to_lower_to_lower[extension[1]]\n        # if the extension strength is the same as the max\n        # so we found a new best extension\n        if extension_strength < best_extension_strength:\n            best_extension = extension[0]\n            best_extension_strength = extension_strength\n",
        "num_ids": 296
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    cap = 0\n    sm = 0\n    extension = ''\n    for extension in extensions:\n        if extension == extension.lower():\n            cap += 1\n        else:\n            sm += 1\n        if cap == sm:\n            extension = extension.lower()\n            extension = extension.capitalize()\n            extension = extension + '.' + extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip(' ')\n            extension = extension.strip('-')\n            extension = extension.strip('.')\n            extension = extension.strip(' ')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip(' ')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.capitalize()\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')\n            extension = extension.strip('.')",
        "num_ids": 1024
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Hint: Look for a higher priority function in your lexer, an earlier one (look at the description in the Lexer)\n    # Hint: You can use split(), use split('. ') and split() to get the extension name\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x: x.split('.')[1], extensions)\n    extensions = map(lambda x: x.split('.')[0], extensions)\n    extensions = map(lambda x",
        "num_ids": 1024
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \"\"\"\n    import math\n    \"\"\"\n    class_name = class_name.lower()\n    \"\"\"\n    \"\"\"\n    cap = 0\n    sm = 0\n    \"\"\"\n    \"\"\"\n    if len(extensions) == 0:\n        return class_name\n    elif len(extensions) == 1:\n        cap = math.floor(math.log10(len(extensions)))\n        sm = math.floor(math.log10(len(extensions)))\n    elif len(extensions) == 2:\n        cap = math.floor(math.log10(len(extensions[0])))\n        sm = math.floor(math.log10(len(extensions[1])))\n    else:\n        cap = math.floor(math.log10(len(extensions[0])))\n        sm = math.floor(math.log10(len(extensions[1])))\n    \"\"\"\n    \"\"\"\n    cap = len(class_name)\n    sm = len(extensions)\n    \"\"\"\n    cap = cap\n    \"\"\"\n    #shortest_extension = class_name.split('.')[-1]\n    #start_index = len(shortest_extension) - cap - sm\n    start_index = cap - sm\n    if start_index < 0:\n        start_index = 0\n    start_index = math.floor(start_index)\n    if cap < sm:\n        start_index = 0\n    \"\"\"\n    #start_index = math.floor(start_index)\n    \"\"\"\n    if cap == 0:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 1:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 2:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 3:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 4:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 5:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 6:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 7:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 8:\n        if sm == 0:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n        if sm == 1:\n            return '.'.join(class_name.split('.')[start_index:start_index + 1])\n    if cap == 9:\n        if sm == 0:",
        "num_ids": 1024
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_cap = 0\n    min_cap = 0\n    max_sm = 0\n    min_sm = 0\n    for extension in extensions:\n        num = extension.count(' ')\n        cap = extension.count('C')\n        sm = extension.count('S')\n        if cap > max_cap:\n            max_cap = cap\n        if sm > max_sm:\n            max_sm = sm\n        if cap < min_cap:\n            min_cap = cap\n        if sm < min_sm:\n            min_sm = sm\n    cap_str = f'{max_cap}/{min_cap}'\n    sm_str = f'{max_sm}/{min_sm}'\n    return f'{class_name}.{min_cap}{cap_str}.{min_sm}{sm_str}'\n    \ndef Classify_Classes(class_name, class_list):\n    \"\"\"You have the name of a class (a string) and a list of classes.\n    The class is a string and it should be divided into two pieces: a class name,\n    and a list of the extensions that are present in the class. You should return\n    a tuple containing the string class name, and a list of the extensions, \n    where each extension is a list of two strings, one for the capital letters of\n    the extension's name and the other for the lower case letters in the extension's name.\n    For example, if you have class 'Mexican', and the extensions are:\n    ['CAS', 'CECI', 'SDF'] then you should return ('CAS', ['CECI', 'SDF'])\n    In the example above the first list would be the capital letters of the extension's \n    name, and the second list would be the lower case letters in the extension's name.\n    Note that the length of the extension list should be the same as the length of the \n    class.\n    Example:\n    for Classify_Classes('my_class', ['AA', 'Be', 'CC']) == ('my_class.AA', ['Be', 'CC'])\n    \"\"\"\n    class_name = class_name.split('.')\n    extension_list = []\n    for extension in class_list:\n        extension = extension.split('.')\n        if len(extension)!= 2:\n            continue\n        extension = extension[0].capitalize()\n        extension = extension.lower()\n        extension_list.append(extension)\n    class_name = class_name[0]\n    class_list = extension_list\n    return class_name, class_list\n",
        "num_ids": 610
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    extensions = extensions.split()\n    cap_sm = 0\n    for extension in extensions:\n        cap = len(extension)\n        if cap!= 0:\n            cap_sm += cap\n",
        "num_ids": 48
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Your code goes here...\n    extension_arr = []\n    for extension in extensions:\n        lower_count = 0\n        upper_count = 0\n        for letter in extension:\n            if letter.islower():\n                lower_count += 1\n            else:\n                upper_count += 1\n        if lower_count > upper_count:\n            extension_arr.append(extension)\n    cap_count = 0\n    sm_count = 0\n    for extension in extension_arr:\n        cap_count += extension.count('CAP')\n        sm_count += extension.count('SM')\n    cap_cap = cap_count / cap_count * 100\n    sm_cap = sm_count / sm_count * 100\n    cap_sm = cap_cap / cap_cap * 100\n    cap_sm = cap_sm / cap_sm * 100\n    if cap_sm > sm_cap:\n        return extension_arr[0]\n    elif cap_sm < sm_cap:\n        return extension_arr[-1]\n    else:\n        return extension_arr[0]\n",
        "num_ids": 256
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Write the code to find the strongest extension in the list.\n    #       (1) Use the.get() method to find the strength\n    #       (2) Return the best extension\n    if len(extensions) < 1:\n        return class_name\n    max_cap = 0\n    max_sm = 0\n    for extension in extensions:\n        cap = extension[0].count('C')\n        sm = extension[0].count('S')\n        if cap > max_cap:\n            max_cap = cap\n        if sm > max_sm:\n            max_sm = sm\n    return class_name.replace('.', '_') + '.' + str(max_cap) + '.' + str(max_sm) + '.EXTENSION_STRENGTH'",
        "num_ids": 183
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    class_name = class_name.lower().replace(' ', '')\n    cap = 0\n    sm = 0\n    for extension in extensions:\n        cap += len(extension.capitalize())\n        sm += len(extension.lower())\n    fraction = -1\n    if cap > sm:\n        fraction = 1\n    elif sm > cap:\n        fraction = -1\n    else:\n        fraction = 1\n    return class_name + '.StrongestExtensionName.' + str(fraction)\n",
        "num_ids": 123
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    strength = 0\n    cap = 0\n    for extension in extensions:\n        if extension.endswith(\"Slices\"):\n            cap += 1\n        strength += abs(len(extension) - len(extension.split(\".\")))\n    if strength > cap:\n        return class_name + \".\" + extensions[0].split(\".\")[-1]\n    return class_name + \".\" + extensions[0].split(\".\")[-1]\n",
        "num_ids": 107
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code here\n    if len(a)<len(b):\n        a, b = b, a\n    a = ''.join([i for i in a if i not in b])\n    b = ''.join([i for i in b if i not in a])\n    if len(b)<len(a):\n        return False\n    if len(b)==len(a):\n        return True\n    if len(b)%2!=0:\n        return False\n    return cycpattern_check(a[0:len(a)-len(b)],b) or cycpattern_check(b[0:len(a)-len(b)],a)\n",
        "num_ids": 161
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return cycpattern_check2(a,b) or cycpattern_check2(b,a)\n",
        "num_ids": 27
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not(is_string_in_words(a, b)):\n        return False\n    if not(a[::-1] == b):\n        return False\n    x = len(a)\n    y = len(b)\n    if not(a[::-1].endswith(b)):\n        return False\n    a = a.replace(a[::-1], '', 1)\n    b = b.replace(b[::-1], '', 1)\n    if len(a)!= y or len(b)!= x:\n        return False\n    for i in range(y):\n        if a[i]!= b[i]:\n            return False\n    return True\n",
        "num_ids": 166
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # if len(a) > len(b):\n    #     return False\n    # if len(a) < len(b):\n    #     return False\n    # if a[:len(b)]!= b:\n    #     return False\n    # return True\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)-len(a)+1):\n        if a[:i+1] in b:\n            return True\n    return False\n",
        "num_ids": 119
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def rot(s, r):\n        if r==0:\n            return True\n        if len(s)==0:\n            return False\n        if r==1:\n            return s[0]==s[-1]\n        if s[0]==s[-1]:\n            return rot(s[1:],r-1)\n        return rot(s[:-1],r-1)\n    \n    return rot(a,b)\n    \n    \nprint(cycpattern_check(\"abcd\",\"abd\")) # False\nprint(cycpattern_check(\"hello\",\"ell\")) # False\nprint(cycpattern_check(\"whassup\",\"psus\")) # False\nprint(cycpattern_check(\"abab\",\"baa\")) # True\nprint(cycpattern_check(\"efef\",\"eeff\")) # True\nprint(cycpattern_check(\"himenss\",\"simen\")) # Tru",
        "num_ids": 212
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # return (a[:len(b)]==b)\n    return (a==b)\n",
        "num_ids": 24
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #\n    # Write your solution here\n    #\n    if len(a) > len(b):\n        return False\n    elif len(a) < len(b):\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (b in a) or (cycpattern_check(a[:len(b)], b) or cycpattern_check(a[len(b):], b[::-1]))\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here\n    for i in range(1, len(a)):\n        if a[i:len(a)+1] == a[0:len(a)-i] and b[i:len(a)+1] == a[0:len(a)-i]:\n            return True\n    return Fals",
        "num_ids": 76
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return cycpattern_check_wrap(a, b) and cycpattern_check_wrap(b, a)\n",
        "num_ids": 29
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n",
        "num_ids": 48
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    \n    for i in range(num):\n        if(i % 2!= 0):\n            odd_digits += 1\n        else:\n            even_digits += 1\n    \n    return (even_digits, odd_digits)\n",
        "num_ids": 75
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return tuple(map(lambda x: x % 2 == 0, num))\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_count = 0\n    odd_count = 0\n    for i in range(1,num+1):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n",
        "num_ids": 58
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # If we're starting at 0 then we should return 0, since we always start counting from 1\n    if num == 0:\n        return (0, 0)\n    \n    # We want to keep track of the last digit of the number and if it's even or odd\n    last_digit = num % 10\n    count = 0\n    \n    # For each digit in the number, we check if it's even or odd\n    # If we're checking odd then we multiply by 2, as we can see that it's even\n    # For each even digit, we just multiply by 2 because we know it's even\n    # For each odd digit, we add one because we'll check next time\n    while num > 0:\n        num = num // 10\n        count += 1\n        if num % 10 == 0 and last_digit % 2 == 0:\n            count += 2\n        if num % 10 == 0 and last_digit % 2!= 0:\n            count += 1\n        last_digit = num % 10\n    return (count, count % 2 == 0)\n",
        "num_ids": 239
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    num = str(num)\n    if len(num) % 2 == 0:\n        for x in range(0, len(num)):\n            if num[x] == \"0\" and num[x + 1] == \"1\":\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if num <= 0:\n        return (\"\", \"\")\n    num_list = []\n    for digit in str(num):\n        num_list.append(int(digit))\n    if num_list[0] % 2 == 0:\n        return (\"even\", \"even\")\n    else:\n        return (\"odd\", \"odd\")\n        \ndef comma_separated_list_to_string(comma_separated_list):\n    \"\"\"Takes a list of comma-separated integers and returns a list of integers.\n",
        "num_ids": 122
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    num_digit = num // 10\n    num = num % 10\n    if num_digit % 2 == 0:\n        return (num_digit, num_digit)\n    else:\n        return (num_digit, num_digit + 1)\n",
        "num_ids": 58
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, num):\n        if (i % 2) == 0:\n            count += 1\n        else:\n            count -= 1\n    return (count, count % 2 == 0)\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even_odd = []\n    for i in num:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even = i % 2\n            even_odd.append(odd_even)\n    return (even_odd)\n",
        "num_ids": 67
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    if number == 0:\n        return ''\n    s = str(number)\n    length = len(s)\n    remainder = 0\n    for i in range(length - 1, -1, -1):\n        if s[i] == 'I' or s[i] == 'V' or s[i] == 'X':\n            remainder += roman[s[i]]\n        else:\n            remainder -= roman[s[i]]\n    if remainder >= roman['L']:\n        return '{}L'.format(remainder)\n    elif remainder < roman['L']:\n        return '{}C'.format(remainder)\n    elif remainder > roman['C']:\n        return '{}D'.format(remainder)\n    else:\n        return '{}M'.format(remainder)\n",
        "num_ids": 246
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    numerals = {1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX'}\n    result = ''\n    index = 0\n    while index < len(numerals):\n        if index == len(numerals) - 1:\n            result = numerals[index] + result\n        else:\n            result += numerals[index]\n            index += 1\n    return result\n",
        "num_ids": 123
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    roman = ''\n",
        "num_ids": 11
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    roman_number = {1:'I', 2:'II', 3:'III', 4:'IV', 5:'V', 6:'VI', 7:'VII', 8:'VIII', 9:'IX', 10:'X', 11:'XI', 12:'XII', 13:'XIII', 14:'XIV', 15:'XV', 16:'XVI', 17:'XVII', 18:'XVIII', 19:'XIX'}\n    res = ''\n    for i in range(len(number)):\n        if number[i] in roman_number:\n            res += roman_number[number[i]]\n        else:\n            res += number[i]\n    return res\n",
        "num_ids": 155
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    roman_num = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for value, symbol in roman_num.items():\n        if number >= value:\n            return result + symbol\n    return result + str(number)\n",
        "num_ids": 116
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # roman numeral table\n    # 1, IV, VIII, IX\n    # 2, X, XX, L\n    # 3, XL, XLX, LXL\n    # 4, XC, XXC, LXC\n    # 5, C, D, M\n    # 6, L, X, C\n    roman_numeral = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        6: 'IX',\n        9: 'XC',\n        10: 'L',\n        40: 'XIX',\n        50: 'LX',\n        90: 'LXL',\n        100: 'LXC',\n        200: 'LXLX',\n    }\n    result = []\n    for num in range(1, number + 1):\n        if num == 1:\n            result.append(roman_numeral[num])\n        elif num == 2:\n            result.append('II')\n        elif num == 3:\n            result.append('III')\n        elif num == 4:\n            result.append('IV')\n        elif num == 5:\n            result.append('V')\n        elif num == 6:\n            result.append('X')\n        elif num == 9:\n            result.append('XC')\n        elif num == 10:\n            result.append('L')\n        elif num == 40:\n            result.append('XL')\n        elif num == 50:\n            result.append('LXL')\n        elif num == 90:\n            result.append('LXC')\n        elif num == 100:\n            result.append('LX')\n        elif num == 200:\n            result.append('LXLX')\n    return ''.join(result)\n",
        "num_ids": 416
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    roman_numerals = ['i','v','x','l','c','d','m']\n    result = \"\"\n    for digit in roman_numerals:\n        if number < 0:\n            number *= -1\n            number = number * -1\n        for i in range(number // 1000):\n            result += roman_numerals[i]\n        number %= 1000\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    roman_string = 'i'\n    small_num = 0\n    small_num_check = 0\n    while number:\n        for digit in range(len(roman_string) - 1, -1, -1):\n            # O(n)\n            if number >= 10 ** digit:\n                small_num += int(str(number)[digit])\n                break\n        # O(n)\n        number = number // 10\n        small_num_check += 1\n        if small_num_check > 1:\n            small_num_check = 0\n            roman_string += str(small_num)\n    return roman_string.lower()\n",
        "num_ids": 151
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    roman_list = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\"]\n    result = \"\"\n    for i in range(len(roman_list)):\n        if (number // 1000) % 10 == 0:\n            result += roman_list[i]\n        number %= 1000\n    return result\n",
        "num_ids": 97
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    \n    if a == b or b == c or a == c:\n        return True\n    elif a > b and a > c:\n        return False\n    elif a < b and a < c:\n        return False\n    elif a < c and a > b:\n        return False\n    else:\n        return True\n",
        "num_ids": 84
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a, b, c = float(a), float(b), float(c)\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (\n        (a < b) and (b < c) and (b < a) and \n        (a == b) and (b == c) and \n        (a == b) and (c == a)\n    )\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Write your code here.\n    return True if ((abs(a)**2 + abs(b)**2)**0.5 < ((abs(a)**2 + b**2)**0.5) and \n        abs(b)**2 < ((abs(a)**2 + b**2)**0.5) and\n        ((abs(a)**2 + c**2)**0.5 < ((abs(a)**2 + b**2)**0.5) and \n            (abs(b)**2 < ((abs(a)**2 + b**2)**0.5) and \n                (abs(a)**2 + c**2)**0.5 < ((abs(a)**2 + b**2)**0.5))) else False\n    \n",
        "num_ids": 187
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    pass\n    #raise NotImplementedError\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #Check if the angle is 0 or 90 degrees\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if abs(b - a) < abs(c - a):\n        return (a == b) or (a == c)\n    elif abs(c - b) < abs(a - c):\n        return (b == c) or (b == a)\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #Calculate the base cases\n    if (a == b == c) or (a == b == 0):\n        return True\n    else:\n        #If there is a left-side angle, calculate the angle of the base case\n        if (abs(a) <= abs(b) and abs(a) <= abs(c)):\n            base_case = math.degrees(a)\n        else:\n            base_case = math.degrees(b)\n        #If there is a right-side angle, calculate the angle of the base case\n        if (abs(a) > abs(b) and abs(a) > abs(c)) or (abs(a) < abs(b) and abs(a) < abs(c)):\n            angle = math.degrees(math.acos(b/(a+c)))\n            #If the angle is less than the base case, the triangle is a right-angled triangle\n            if angle < base_case:\n                return True\n        else:\n            angle = math.degrees(math.acos(c/(a+b)))\n            #If the angle is less than the base case, the triangle is a right-angled triangle\n            if angle < base_case:\n                return True\n    return False\n",
        "num_ids": 289
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n",
        "num_ids": 25
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_chars = 0\n    for word in words:\n        max_chars += len(word)\n    for word in words:\n        if len(word) > max_chars:\n            return word\n    return \"?\"\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # intialize the max value of each word\n    max_len = 0\n    max_word = \"\"\n    # loop over the words\n    for word in words:\n        # if the length of the word is greater than the max value, update it\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 94
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    chars = set(w for w in words if len(w) > 1)\n    return max(sorted(chars, key=len), key=lambda c: words.index(c))\n",
        "num_ids": 47
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    dict_of_words = dict()\n",
        "num_ids": 11
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return words[0][:1]\n    return max(words, key=len)\n",
        "num_ids": 23
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # find out how many times each word appears\n    unique_counts = collections.Counter(words)\n",
        "num_ids": 25
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if words:\n        count = [0] * len(words)\n        unique_characters = 0\n        for word in words:\n            for i in range(len(word)):\n                if word[i].isalpha():\n                    count[i] += 1\n        for i in range(len(count)):\n            if count[i] > unique_characters:\n                unique_characters = count[i]\n                index = i\n        return words[index]\n    else:\n        return \"\"\n",
        "num_ids": 119
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    characters_count = {}\n    max_length = 0\n    for word in words:\n        if word in characters_count:\n            characters_count[word] += 1\n        else:\n            characters_count[word] = 1\n        if characters_count[word] > max_length:\n            max_length = characters_count[word]\n            max_word = word\n",
        "num_ids": 91
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Solution:\n    max = 0\n    sorted_list = []\n    for word in words:\n        if len(word) > max:\n            max = len(word)\n            sorted_list.append(word)\n    if len(sorted_list) == 0:\n        return \"null\"\n    else:\n        return sorted_list[0]\n",
        "num_ids": 87
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max = 0\n    for word in words:\n        num = 0\n        for char in word:\n            if char in 'abcdefghijklmnopqrstuvwxyz' or char.isdigit():\n                num += 1\n        if num > max:\n            max = num\n            print(word)\n    return word\n",
        "num_ids": 80
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = number - need\n    if total < 0:\n        total = 0\n    else:\n        if remaining == 0:\n            remaining = need\n        else:\n            remaining -= need\n        return [total, remaining]\n",
        "num_ids": 55
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    assert isinstance(number, int) and isinstance(need, int) and isinstance(remaining, int), 'invalid arguments'\n    remaining = remaining - need\n    total = 0\n    \n    if remaining >= need:\n        for i in range(0, need):\n            remaining = remaining - 1\n            total = total + 1\n    else:\n        for i in range(0, need):\n            remaining = remaining + 1\n            total = total + 1\n    \n    if remaining <= 0:\n        return [total, remaining]\n    else:\n        return [total, remaining]\n",
        "num_ids": 140
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if there is not enough remaining carrots, return all remaining carrots.\n    if remaining == 0:\n        return [ need, remaining ]\n    # if there are not enough remaining carrots, return the remaining carrots.\n    if remaining < need:\n        return [ remain + need, remaining ]\n    # if there are enough remaining carrots, return the remaining number of remaining carrots.\n    if remaining >= need:\n        return [ remain, remaining ]\n",
        "num_ids": 98
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: replace this with your code\n    return [number, remaining]\n    \n    \n    \n    \ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n",
        "num_ids": 297
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if remaining < need:\n        return [0, need]\n    \n    number -= need\n    remaining -= need\n    \n    if number == 0:\n        return [0, number]\n    \n    return [number, remaining]\n",
        "num_ids": 56
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # write your code here\n    if number<=0 or need<=0 or remaining<=0:\n        return [remaining, need]\n    \n    # total eaten = needed + remaining\n    total = need + remaining\n    remaining_need = remaining - need\n    total_eaten = number - need\n    \n    # you are hungry, eat some number of carrots\n    if total_eaten>=remaining_need:\n        remaining_need = total_eaten-remaining\n        remaining = remaining-remaining_need\n        return [total_eaten, remaining]\n    # not hungry, eat all remaining carrots\n    elif total_eaten>=remaining:\n        remaining = total_eaten-remaining\n        return [total, remaining]\n    \n    # not hungry but you can eat more carrots\n    else:\n        remaining = total_eaten-remaining\n        return [total, remaining]",
        "num_ids": 216
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    # define variables\n    if remaining >= need:\n        return [remaining, need]\n    else:\n        return [remaining, need]\n",
        "num_ids": 37
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    remaining = remaining - number\n    if remaining < 0:\n        remaining = 0\n    if remaining < need:\n        need = need - remaining\n    return [number, need]\n",
        "num_ids": 44
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if remaining <= 0:\n        return [ 0, remaining ]\n    elif need <= 0:\n        return [ 0, need ]\n    elif number <= 0:\n        return [ need, remaining ]\n    else:\n        if number < need:\n            return [ need, remaining ]\n        else:\n            return [ number, remaining ]\n",
        "num_ids": 79
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if remaining < 0:\n        return []\n    if need > remaining:\n        remaining = need\n        if remaining >= need:\n            remaining -= need\n            if need > remain:\n                remain = need\n        elif need > remain:\n            remain = need\n            if need < remain:\n                remain = need\n    else:\n        remain = need\n    return [number, remain]",
        "num_ids": 95
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = 0\n    if operator['+']:\n        if operand:\n            if len(operand) == 1:\n                res = operator['+']\n            else:\n                res = operator['+'] + operand[0] * operand[1]\n        else:\n            res = operator['+']\n    elif operator['-']:\n        if operand:\n            if len(operand) == 1:\n                res = operator['-']\n            else:\n                res = operator['-'] - operand[0] * operand[1]\n        else:\n            res = operator['-']\n    elif operator['*']:\n        if operand:\n            if len(operand) == 1:\n                res = operator['*']\n            else:\n                res = operator['*'] * operand[0] * operand[1]\n        else:\n            res = operator['*']\n    elif operator['//']:\n        if operand:\n            if len(operand) == 1:\n                res = operator['//']\n            else:\n                res = operator['//'] / operand[0]\n        else:\n            res = operator['//']\n    else:\n        if operand:\n            if len(operand) == 1:\n                res = operator['//']\n            else:\n                res = operator['//'] / operand[0]\n        else:\n            res = operator['//']\n    return res\n",
        "num_ids": 341
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Test your code on two lists and store the evaluation in the result variable\n    result = None\n",
        "num_ids": 23
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Basic algebra operations\n    # operator['+', '-', '*']\n    return operator['+', '-', '*']\n    # operator = ['+', '-', '*']\n    # operand = [2, 3, 4, 5]\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # function to calculate the sum of two numbers\n    def sum(x, y):\n        return x + y\n",
        "num_ids": 27
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    if operator['+']:\n        for i in range(len(operand)-1):\n            result += operand[i] + operand[i+1]\n    elif operator['-']:\n        for i in range(len(operand)-1):\n            result -= operand[i] + operand[i+1]\n    elif operator['*']:\n        for i in range(len(operand)-1):\n            result *= operand[i] + operand[i+1]\n    elif operator['//']:\n        for i in range(len(operand)-1):\n            if operand[i] == 0:\n                continue\n            result /= operand[i]\n    elif operator['**']:\n        for i in range(len(operand)-1):\n            result **= operand[i]\n    else:\n        print('Not valid algebra operator')\n    return result\n",
        "num_ids": 222
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if operator['+'] == '':\n        return ['']\n",
        "num_ids": 17
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(operator)!= len(operand):\n        return -1\n    elif operator == operator and len(operand) == 0:\n        return operand[0]\n    elif operator == operator and len(operand) == 1:\n        return operand[0]\n    elif operator == operator:\n        return do_algebra(operator[0], operand[1:])\n",
        "num_ids": 93
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Nothing to do, nothing to do\n    if operator['+'] == operator['-'] == operator['*'] == operator['//'] == operator['**'] == '':\n        # Addition has not been implemented yet\n        pass\n",
        "num_ids": 54
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = 0\n    if operator['+', '*', '-'] == '+':\n        result = operator['*', '*']\n    if operator['+', '-', '*'] == '*':\n        result = operator['+', '*']\n    if operator['+', '*', '-'] == '-':\n        result = operator['-', '*']\n    if operator['+', '*', '-'] == '*':\n        result = operator['+', '*']\n    if operator['+', '*', '-'] == '+':\n        result = operator['+', '*']\n",
        "num_ids": 146
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(s) == 1:\n        return s\n    s = s.lower()\n    result = []\n    for i in range(len(s)-1, -1, -1):\n        if s[i].isalpha():\n            result.append(s[i].upper() if s[i].islower() else s[i].lower())\n        else:\n            result.append(s[i].lower() if s[i].islower() else s[i].upper())\n    result.reverse()\n    return ''.join(result)\n",
        "num_ids": 130
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not s:\n        return \"\"\n    if len(s) == 1:\n        return s[0].lower() + s[0].upper()\n    else:\n        l = s[0]\n        r = s[1]\n        if l in \"abcdefghijklmnopqrstuvwxyz\":\n            return solve(s[1:]) + l + solve(s[2:])\n        else:\n            return l + r + solve(s[2:])\n",
        "num_ids": 116
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def reverse_case(string):\n        result = \"\"\n        for i in string:\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        return result\n    def reverse_case2(string):\n        result = \"\"\n        for i in string:\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        return result\n    def reverse_case3(string):\n        result = \"\"\n        for i in string:\n            if i.isupper():\n                result += i.upper()\n            else:\n                result += i.lower()\n        return result\n    result = \"\"\n    for i in s:\n        result += reverse_case(i)\n    result += reverse_case2(result)\n    result += reverse_case3(result)\n    return result\n",
        "num_ids": 210
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) == 1:\n        return s\n    else:\n        s = s.upper()\n        s = s.replace(\"#\", \"\")\n        s = s.replace(\"@\", \"\")\n        s = s.replace(\"B\", \"\")\n        s = s.replace(\"Z\", \"\")\n        s = s.replace(\"M\", \"\")\n        s = s.replace(\"A\", \"\")\n        s = s.replace(\"@\", \"\")\n        s = s.replace(\"F\", \"\")\n        s = s.replace(\"c\", \"\")\n        s = s.replace(\"C\", \"\")\n        s = s.replace(\"C\", \"\")\n        s = s.replace(\"z\", \"\")\n        s = s.replace(\"Z\", \"\")\n        s = s.replace(\"M\", \"\")\n        s = s.replace(\"a\", \"\")\n        s = s.replace(\"@\", \"\")\n        s = s.replace(\"F\", \"\")\n        return solve(s)\n",
        "num_ids": 238
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    def rev(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        s = s.lower()\n        \n        return s[::-1]\n    \n    def r_rev(s):\n        \"\"\"Convert lowercase letters into uppercase letters.\n        \"\"\"\n        return s.upper()\n    \n    def rev_up(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        return s[::-1].upper()\n    \n    def rev_v(s):\n        \"\"\"Convert lowercase letters into uppercase letters.\n        \"\"\"\n        return s.upper()\n    \n    def rev_l(s):\n        \"\"\"Convert uppercase letters into lowercase letters.\n        \"\"\"\n        return s[::-1].lower()\n    \n    def uniq_rev(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [rev(s) for s in s.split()]\n    \n    def uniq_r(s):\n        \"\"\"Convert lowercase letters into uppercase letters and then reverse all letters.\n        \"\"\"\n        return [r_rev(s) for s in s.split()]\n    \n    def uniq_l(s):\n        \"\"\"Convert lowercase letters into uppercase letters and then reverse all letters.\n        \"\"\"\n        return [l_rev(s) for s in s.split()]\n    \n    def uniq_u(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [u_rev(s) for s in s.split()]\n    \n    def uniq_v(s):\n        \"\"\"Convert uppercase letters into lowercase letters and then reverse all letters.\n        \"\"\"\n        return [v_rev(s) for s in s.split()]\n    \n    s = s.strip()\n    \n    if len(s) == 0:\n        return s\n    \n    up = uniq_up(s)\n    v = uniq_v(s)\n    r = uniq_r(s)\n    l = uniq_l(s)\n    u = uniq_u(s)\n    \n    return ''.join([v[i]+u[i] for i in range(len(v))])+''.join([r[i]+l[i] for i in range(len(r))])+''.join([u[i]+l[i] for i in range(len(u))])\n",
        "num_ids": 606
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i].islower():\n            res += s[i].upper()\n        elif s[i].isupper():\n            res += s[i].lower()\n        else:\n            res += s[i]\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not s: return \"\"\n    if s[0] =='': return s[1:]\n    if s[0] == '-':\n        s = s[1:]\n        return solve(s) + solve(s[::-1])\n    return solve(s[::-1])\n",
        "num_ids": 70
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def swap(s, i, j):\n        if s[i]!= s[j]:\n            return s[i] + s[j]\n        return s[i]\n    def reverse(s, i, j):\n        # i, j start from 0, len(s)\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    def split(s, i, j):\n        \"\"\"\n        s[i:j] = s[i:j][::-1]\n        \"\"\"\n        if i == j:\n            return\n        else:\n            return s[i:j], s[i:j][::-1]\n    def insert_map(s, i, j):\n        if i == j:\n            return\n        if s[i] == s[j]:\n            return\n        s[i] = s[j]\n        s[j] = s[i]\n        if i < j:\n            insert_map(s, i, j-1)\n        else:\n            insert_map(s, i+1, j-1)\n        return\n    def reverse_str(s):\n        \"\"\"\n        s = s[::-1]\n        \"\"\"\n        for i in range(len(s)//2):\n            s = swap(s, i, i+1)\n        return s\n    i = 0\n    for char in s:\n        if char == \"#\":\n            i, j = split(s, i, len(s))\n            s = reverse_str(j)\n            i = split(i, 0, len(s))\n        else:\n            i, j = split(s, i, len(s))\n            reverse_str(j)\n            i = split(i, 0, len(s))\n    return reverse_str(s)\n",
        "num_ids": 445
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # First, keep the first letter in the string\n    first_letter = s[0]\n    # Now, reverse the case of first letter\n    s = s[1:] + first_letter\n",
        "num_ids": 46
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # 1\n    # dfs\n    if len(s) == 0:\n        return \"\"\n    if s[0] not in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return s[::-1]\n    else:\n        return solve(s[1:]) + solve(s[0])\n",
        "num_ids": 80
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode()).hexdigest()",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode())\n    return hash_md5.hexdigest()\n",
        "num_ids": 50
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(text) == 0:\n        return None\n    return md5(text).hexdigest()\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    \n    md5_bytes = hashlib.md5()\n    md5_bytes.update(text.encode('utf-8'))\n    return md5_bytes.hexdigest()\n",
        "num_ids": 57
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 20
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n    elif isinstance(text, str):\n        return md5(text.encode()).hexdigest()\n    else:\n        raise TypeError('text must be a string')\n",
        "num_ids": 55
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if text == \"\":\n        return None\n    else:\n        return md5(text.encode()).hexdigest()",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import hashlib\n    import string\n    import re\n    import itertools\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if the number is not a positive integer\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Only integers are allowed.\")\n",
        "num_ids": 43
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return list(range(a, b+1))[::2]\n",
        "num_ids": 18
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    result = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    while a < b:\n        a = (a + b) // 2\n        result.append(a)\n    result.reverse()\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    integers = list(range(a, b+1))\n    while integers:\n        if integers[-1] % 2 == 0:\n            yield integers.pop()\n        else:\n            yield integers.pop()\n",
        "num_ids": 54
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    # A is the starting point, we can never enter the loop\n    A = a\n    # B is the point where we're going to find the even digits\n    B = b\n    # If B is larger than A, it means B is a negative number\n    while B > A:\n        # Remove all the digits\n        while B >= A:\n            result.append(int(B%10))\n            B = B//10\n        # Add it to the A\n        A = A + 1\n    # If A is larger than B, it means A is a negative number\n    while A < B:\n        result.append(int(A%10))\n        A = A//10\n    return result\n",
        "num_ids": 166
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    integers = []\n    for num in range(a, b+1):\n        integers.append(num)\n    return integers\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(n) for n in str(a) + str(b)]\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [digit for digit in range(a, b+1) if digit % 2 == 0]",
        "num_ids": 23
    }
]