[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for n in numbers:\n        if abs(n) < threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # precompute sums\n    sum_numbers = sum(numbers)\n    \n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            sum_of_numbers = numbers[i] + numbers[j]\n            if abs(sum_of_numbers - sum_numbers) < threshold:\n                return True\n    \n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return any(abs(n - threshold) < abs(n - closest) for n in numbers)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for number in numbers:\n        if abs(number) < threshold:\n            return False\n    return True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return False if threshold < 0 else any(abs(n-threshold) < abs(n) for n in numbers)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n            elif abs(numbers[i] - numbers[j]) < abs(numbers[i] - numbers[j - 1]):\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    for n in numbers:\n        count += abs(n - n)\n    return count < threshold\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = False\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] < numbers[j]:\n                result = True\n    return result\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(numbers) <= 1:\n        return False\n    # If all numbers are equal\n    if numbers[0] == numbers[1]:\n        return False\n    # If the maximum value is less than threshold\n    elif numbers[0] > numbers[1]:\n        # Go through the list, and calculate the difference between the two numbers\n        for i in range(len(numbers) - 1):\n            # Check if the difference between the two numbers is greater than the threshold\n            if numbers[i + 1] - numbers[i] > threshold:\n                # If so, return False\n                return False\n        # If no difference is found, return True\n        return True\n    # If all numbers are equal\n    elif numbers[0] == numbers[1]:\n        return True\n    # If the maximum value is less than threshold\n    elif numbers[0] < numbers[1]:\n        # Go through the list, and calculate the difference between the two numbers\n        for i in range(len(numbers) - 1):\n            # Check if the difference between the two numbers is greater than the threshold\n            if numbers[i + 1] - numbers[i] > threshold:\n                # If so, return False\n                return False\n        # If no difference is found, return True\n        return True\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    separate_list = []\n    is_balanced = True\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO - add checks and improve efficiency\n    if not paren_string:\n        return []\n    result: List[str] = []\n    pos = 0\n    while pos < len(paren_string):\n        if paren_string[pos] == '(':\n            pos += 1\n            result.append('')\n        elif paren_string[pos] == ')':\n            pos += 1\n            if len(result) > 1:\n                result.pop()\n            if result:\n                result[-1] = result[-1] + ')'\n            else:\n                result.append('(')\n        else:\n            pos += 1\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if paren_string == \"\":\n        return []\n    paren_groups = paren_string.split(\"(\")\n    for paren_group in paren_groups:\n        if paren_group == \"\":\n            continue\n        new_paren_string = separate_paren_groups(paren_group)\n        new_paren_string = new_paren_string[0] + \"(\" + new_paren_string[1:] + \")\"\n        if new_paren_string not in paren_groups:\n            paren_groups.append(new_paren_string)\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [x.strip() for x in paren_string.split('(') if x.strip()]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if paren_string == '':\n        return []\n    output = []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if paren_string.count('(') + paren_string.count(')')!= paren_string.count('(') * 2:\n        return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not paren_string: return []\n    # if not paren_string.isnumeric():\n    #     return []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [\n        string[1:-1]\n        for string in paren_string.split(\"()()\")\n        if string\n        for string in paren_string.split(\"()()\")\n        if len(string) > 1\n    ]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    separated = []\n    for brace in paren_string.split(')'):\n        if brace == '(':\n            separated.append('(')\n        elif brace == ')':\n            if separated[-1] == '(':\n                separated.pop()\n            else:\n                separated[-1] = '()'\n    return separated\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    separate_group_list = []\n    paren_list = paren_string.split('(')\n    for paren in paren_list:\n        if len(paren) > 0:\n            separate_group_list.append(paren)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if number < 0:\n        raise ValueError(f\"The truncate number should be non-negative.\")\n    x = int(number)\n    while number < x:\n        number *= 10\n    return number/10.0"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return number // 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # return round(number)\n    return int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    decimals = len(str(number)) - len(str(int(number)))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # TODO:\n    # Convert float number to integer\n    # Convert decimal part of number to integer\n    # Round result to nearest integer\n    # return result rounded down\n    return round(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return number // 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return number/100\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return round(number, 1)"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if the number is not finite, return the original number\n    if not number:\n        return number\n    else:\n        return (number % 1) * 10\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in operations:\n        if i < 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation == 0:\n            return True\n        if balance < 0:\n            return False\n        else:\n            balance = balance - operation\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return True if (sum(operations) - sum(operations[:1:-1]) == 0 else False)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def recurse(index, sum):\n        if index == len(operations):\n            return sum == 0\n        if sum == 0:\n            return False\n        if sum < 0:\n            return recurse(index + 1, sum * -1)\n        if sum > 0:\n            return recurse(index + 1, sum + operations[index])\n    return recurse(0, 0)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    counter = 0\n    for x in operations:\n        if x == 0:\n            counter += 1\n        elif counter == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return operations[0] == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # All operations will be positive numbers\n    for i in operations:\n        if not i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be positive\n    for i in operations:\n        if i > 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be zero\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be negative\n    for i in operations:\n        if i < 0:\n            return False\n    # All operations will be zero\n    for i in operations:\n        if i == 0:\n            return True\n    # All operations will be positive"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    for i in operations:\n        if i < 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Write your solution here\n    # For loop\n    # If the balance is below zero\n    # return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return operations[0] == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(numbers - mean)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    mean = mean(numbers)\n    sd = stdev(numbers)\n    mad = mean + sd\n    return mad\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    x_mean = mean(numbers)\n    x_deviation = sum(x - x_mean for x in numbers) / len(numbers)\n    return x_deviation\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers = list(numbers)\n    mean = sum(numbers)/len(numbers)\n    mean_of_numbers = mean\n    for number in numbers:\n        mean_of_numbers -= number\n    return abs(mean_of_numbers)/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Can't do mean_absolute_deviation(numbers) because it doesn't have mean\n    mean = mean_of_list(numbers)\n    sums = 0\n    for num in numbers:\n        sums += (num - mean)**2\n    return (sums**0.5)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(map(abs, numbers)) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    mean = sum(numbers)/len(numbers)\n    return abs(sum(numbers)-mean)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Initialize MAD for all input elements\n    mad = 0.0\n    # Iterate over the elements\n    for number in numbers:\n        # Get the absolute difference between the current element and the mean\n        # element\n        mad = mad + abs(number - numbers.mean())\n    # Return MAD as the mean value\n    return mad / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a dictionary of the mean of each sample\n    counts = {}\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 0\n        counts[num] += 1\n    # Calculate the mean of each sample\n    total_counts = float(counts.values())\n    sum_of_squares = 0\n    # Sum all the squares\n    for count in counts.values():\n        sum_of_squares += (count ** 2)\n    # Calculate the mean of this set of squares\n    mean = sum_of_squares / total_counts\n    # Return the mean, or some other approximation, of the\n    # deviation\n    return mean\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return round(sum(abs(x - x_mean) for x in numbers) / len(numbers), 2)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [delimeter] + [n + delimeter for n in numbers] + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 2)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [el + delimeter for el in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [n + delimeter for n in numbers[:-1]] + [n + delimeter for n in numbers[1:]]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [n for i, n in enumerate(numbers) if i % 2 == 1 and i > 2] + [n for i, n in enumerate(numbers) if i % 2 == 0 and i > 1] + [n for i, n in enumerate(numbers) if i % 2 == 0 and i < len(numbers) and i!= 1] + [n for i, n in enumerate(numbers) if i % 2 == 0 and i!= 0] + [n for i, n in enumerate(numbers) if i % 2!= 0 and i!= len(numbers) and i!= 1] + [n for i, n in enumerate(numbers) if i % 2!= 0 and i!= 0] + [n for i, n in enumerate(numbers) if i % 2!= 0 and i!= len(numbers) and i!= 1] + [n for i, n in enumerate(numbers) if i % 2!= 0 and i!= 1] + [n for i, n in enumerate(numbers) if i % 2!= 0 and i!= 0]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [delimeter] + list(map(lambda x: x if x % 2 == 0 else delimeter * 2 + x, numbers))\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return numbers[:numbers.index(delimeter)+1] + [delimeter]+numbers[numbers.index(delimeter)+2:]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x + delimeter for x in numbers]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    intervals = []\n    current_interval = [0]\n    if len(numbers) % 2!= 0:\n        intervals.append(numbers[len(numbers)//2])\n    else:\n        intervals.append(numbers[len(numbers)//2]+numbers[len(numbers)//2+1])\n    for i in range(0, len(numbers), 2):\n        current_interval.append(numbers[i])\n        current_interval.append(numbers[i+1])\n        intervals.append(current_interval)\n        current_interval = [0]\n    return intervals\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # out = []\n    # for sub_str in paren_string.split():\n    #     if sub_str!= '':\n    #         out.append(len(sub_str))\n    #     else:\n    #         out.append(0)\n    # return out\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    out = []\n    for s in paren_string.split():\n        if s[0] == '(':\n            out.append(len(out))\n        elif s[-1] == '(':\n            out.append(len(out))\n        elif out[-1] > len(out):\n            out.append(len(out))\n    return out\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Since we'll need to keep the order of the evaluated lists in the correct order, we'll just output the deepest level of nesting of the parantheses.\n    max_level = 0\n    current_level = 0\n    for character in paren_string:\n        if character == '(':\n            current_level += 1\n        elif character == ')':\n            current_level -= 1\n        if current_level == 0:\n            max_level = max(max_level, current_level)\n    return max_level\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # you can use a helper method named parse_nested_parens_helper()\n    result = []\n    stack = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren_string.index(paren))\n        elif paren == ')':\n            # add an entry to the result that is the deepest nesting of the brackets\n            # remove all but the most recent level of nesting (i.e., the most nested)\n            # add this new nesting to the result (i.e., the deepest nesting)\n            if len(stack) == 1:\n                result.append(2)\n            else:\n                result[-1] = max(result[-1], stack[-1]+2)\n            stack.pop()\n        else:\n            # if the last bracket is '(', we don't have to add a new nesting\n            # add it to the result\n            if len(stack) == 1:\n                result.append(1)\n            else:\n                result[-1] = max(result[-1], stack[-1]+1)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    my_stack = []\n    nesting = 0\n    for char in paren_string:\n        if char == '(':\n            nesting += 1\n        elif char == ')':\n            if my_stack and my_stack[-1] == nesting:\n                my_stack.pop()\n            else:\n                nesting -= 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    paren_dict = {}\n    def get_nested_level(paren_string: str):\n        if paren_string in paren_dict:\n            return paren_dict[paren_string]\n        else:\n            if paren_string == ')':\n                # This is the last level of parentheses.\n                return 1\n            else:\n                if paren_string == '(':\n                    # First level of parentheses.\n                    return 2\n                else:\n                    # The rest of the parentheses are nested.\n                    return get_nested_level(paren_string+'(') + get_nested_level(paren_string+')')\n    return get_nested_level(paren_string)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not paren_string:\n        return []\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: Use zip() to parse parens to groups and check\n    return [[len(t) for t in paren if t is not None and t!= '(' and t!= ')' and t!= '{' and t!= '}'][0] for paren in paren_string.split(')')]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    stack = []\n    deepest_level = 1\n    for c in paren_string:\n        if c == '(':\n            stack.append(deepest_level)\n        elif c == ')':\n            if stack[-1] == 1:\n                stack.pop()\n            else:\n                deepest_level += 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    current_paren = ''\n    for c in paren_string:\n        if c == '(':\n            current_paren += ')'\n        elif c == ')':\n            if len(current_paren) == 0:\n                raise Exception('Should have been called on last item of parens')\n            if current_paren[-1]!= '(':\n                raise Exception('should have been called on last item of parens')\n            res.append(int(current_paren[:-1]))\n            current_paren = ''\n        else:\n            if current_paren!= '':\n                raise Exception('Should have been called on last item of parens')\n            current_paren += c\n    if len(current_paren) > 0:\n        raise Exception('Should have been called on last item of parens')\n    res.append(int(current_paren))\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # filter out empty strings\n    filtered = filter(lambda x: len(x) > 0, strings)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filtered_list = []\n    for i in strings:\n        if substring in i:\n            filtered_list.append(i)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [\n        s\n        for s in strings\n        if substring in s\n        if s.count(substring) > 0\n    ]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    for string in strings:\n        if substring in string:\n            res.append(string)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Find the sum of the numbers in the list\n    total = 0\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    result = []\n    if not numbers:\n        return (0, 1)\n    for number in numbers:\n        result.append(number * number)\n    return (sum(result), 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(numbers) < 1:\n        return (0, 1)\n    sum = 0\n    prod = 1\n    for i in numbers:\n        sum += i\n        prod *= i\n    return (sum, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    total_prod = 1\n    for num in numbers:\n        total += num\n        total_prod *= num\n    return total, total_prod\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return 0, 1\n    return numbers[0], sum(numbers[1:])\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Sum product is calculated using the current numbers.\n    # Take a list of integers, and sum their product.\n    # Return a tuple consisting of the sum and the product.\n    sum, product = 0, 1\n    for i in numbers:\n        sum += i\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # return a tuple of sum and product\n    sums = []\n    products = []\n    for i in range(0, len(numbers)):\n        if numbers[i] > 0:\n            sums.append(numbers[i])\n        elif numbers[i] < 0:\n            products.append(abs(numbers[i]))\n        else:\n            sums.append(0)\n            products.append(1)\n    return (sum(sums), prod(products))\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # +++your code here+++\n    s = 0\n    p = 1\n    for i in numbers:\n        s += i * p\n        p *= i\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # NOTE: you must use the above functions in order to find the maximum.\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_value = numbers[0]\n    result = []\n    # [0, 0, 0, 0, 0, 0, 0]\n    # [2, 3, 2, 0, 3, 0, 0]\n    # [2, 3, 0, 3, 0, 3, 0]\n    # [2, 3, 2, 3, 0, 3, 0]\n    # [1, 2, 3, 3, 3, 3, 4]\n    # [1, 2, 3, 3, 3, 4, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst = []\n    for i in range(len(numbers) - 1, -1, -1):\n        val = numbers[i]\n        lst.append(val)\n        for j in range(i):\n            val = numbers[j]\n            lst.append(val)\n    return lst"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_list = []\n    i = 0\n    while i < len(numbers):\n        if numbers[i] >= numbers[i-1] and numbers[i] >= numbers[i-2] and numbers[i] >= numbers[i-3]:\n            max_list.append(numbers[i])\n        else:\n            i = i+1\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    i = 0\n    temp_max = numbers[0]\n    lst = []\n    while i <= len(numbers) - 1:\n        lst.append(numbers[i])\n        if numbers[i] > temp_max:\n            temp_max = numbers[i]\n        i += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = []\n    for i in range(len(numbers)):\n        if len(l) == 0 or numbers[i] > l[-1]:\n            l.append(numbers[i])\n        else:\n            l[-1] = numbers[i]\n    return l\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max_sum = 0\n    for i in range(len(numbers)):\n        max_sum += numbers[i]\n        if max_sum > 0:\n            max_sum -= numbers[i]\n        else:\n            break\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    current_max = 0\n    for n in numbers:\n        current_max = max(current_max, n)\n        result.append(current_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # start at the last element\n    # if this element is smaller than the previous, update it\n    # else, shift it up\n    # this loop should have no looping over it, just with a for loop\n    # and returning the result, this is O(n)\n    # we can use a default range of length 3, but n is it\n    max_so_far = numbers[-1]\n    result = []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_value = []\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                # insert the largest number in max_value\n                max_value.append(numbers[i])\n            else:\n                break\n    return max_value\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    longest_suffix = 0\n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i+1:]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #TODO: Write a code to get the longest palindrome that starts with supplied string, and then reverse the result.\n    #TODO: Write a code to find the shortest palindrome that begins with a given string that is a palindrome.\n    #TODO: Write a code to find the longest palindrome that begins with a given string that is a palindrome.\n    #TODO: Write a code to find the shortest palindrome that begins with a given string that is a palindrome.\n    #TODO: Write a code to find the shortest palindrome that begins with a given string that is a palindrome.\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    start, end = 0, len(string) - 1\n    pre, palindrome = string[0], ''\n    while start < end:\n        while start < end and string[start]!= pre:\n            start += 1\n        while start < end and string[end]!= pre:\n            end -= 1\n        if start < end:\n            palindrome += string[start:end + 1] + string[start:end + 1][::-1]\n        pre, palindrome = palindrome[::-1], palindrome[::-1]\n    return palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # TODO: Write your code here\n    i = 0\n    last = ''\n    for i, c in enumerate(string):\n        # only use the longest suffix\n        if c in string[i+1:]:\n            last = string[i+1:][::-1]\n        # add suffix to the palindrome\n        last += c\n    # check if string is palindrome\n    if is_palindrome(last):\n        return last\n    else:\n        # reverse the suffix and prefix\n        return string[::-1] + last\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # pre-compute where the palindrome is\n    prefix_length = len(string)\n    postfix = ''\n    for i in range(prefix_length):\n        postfix += string[i]\n        while not is_palindrome(postfix):\n            postfix = string[0:i] + postfix[-1] + string[i + 1:]\n    return string + postfix\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = []\n    # For each suffix in the string:\n    for suffix in string:\n        # If the suffix is a palindrome:\n        if is_palindrome(suffix):\n            # If the string is palindrome, append to the result, if it is not:\n            if suffix[::-1] == suffix:\n                result.append(suffix)\n            # Otherwise, append to result:\n            else:\n                result.append(suffix + \"...\")\n    # Return the result:\n    return ''.join(result)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #! See note of indexing: we may want to modify the\n    # function to do something more complicated.\n    \n    if not is_palindrome(string):\n        return string\n    \n    # Find the start of the palindrome, recursively looping over the middle\n    # until we find the suffix.\n    \n    # This string is in the middle.\n    middle = int(len(string) / 2)\n    \n    # See if string[0] is a palindrome by removing the leading\n    # digit of string[0] from string[middle]. If so, add\n    # this digit to the end of string[middle].\n    \n    #! Some methods we don't want to support:\n    #   * Use string[:middle] to get rid of leading digits.\n    #   * Use string[middle:] to get rid of trailing digits.\n    #   * Use string[middle:middle] to get rid of the leading digits.\n    \n    if string[0] == string[middle]:\n        return string[:middle] + string[middle + 1:]\n    else:\n        return make_palindrome(string[:middle] + string[middle + 1:])\n    \n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # find longest palindromic suffix\n    string = string.lstrip('0')\n    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    longest_palindrome = ''\n    prefix_string = string[0:len(string)//2]\n    suffix_string = string[len(string)//2+1:]\n    prefix_palindrome = make_palindrome(prefix_string)\n    suffix_palindrome = make_palindrome(suffix_string)\n    if prefix_palindrome!= suffix_palindrome:\n        longest_palindrome = prefix_palindrome\n    else:\n        longest_palindrome = suffix_palindrome\n    return longest_palindrome + string[0:len(string)//2] + longest_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # O(n) space\n    # time complexity: O(n)\n    # space complexity: O(n)\n    # l - length of the string\n    # m - length of the prefix\n    # r - length of the suffix\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = 0\n    for c in b:\n        result += (a.count(c) * 2)\n    return '{0:b}'.format(result % 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    c = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            c = c + '0'\n        else:\n            c = c + '1'\n    return c\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(i ^ j for i, j in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    assert(len(a) == len(b))\n    assert(len(a) % 2 == len(b) % 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = a.replace(\"1\", \"0\")\n    b = b.replace(\"0\", \"1\")\n    return \"\".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n    \ndef string_xor_v2(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_v2('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace(\"1\", \"0\")\n    b = b.replace(\"0\", \"1\")\n    return \"\".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n    \ndef string_xor_v3(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor_v3('010', '110')\n    '100'\n    \"\"\"\n    a = a.replace(\"1\", \"0\")\n    b = b.replace(\"0\", \"1\")\n    return \"\".join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = ''\n    for a_char in a:\n        result += bin(ord(a_char) ^ ord(b))[2:].zfill(8)\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return ''.join([chr((ord(a[i]) ^ ord(b[i])) & 0xff) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return ''.join(str(ord(x) ^ ord(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    c = 0\n    d = 0\n    # iterate over each character\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            d += 1\n        if d == 1:\n            c += 1\n    return chr(c)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    longest_string = ''\n    #find the longest string\n    for string in strings:\n        #if string is not empty\n        if len(string) > len(longest_string):\n            longest_string = string\n    #return it\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    max_length = max(map(len, strings))\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if max_length > len(strings):\n        return None\n    for i in range(len(strings) - 1):\n        if strings[i].startswith(strings[i+1]):\n            return strings[i].lstrip(strings[i+1])\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    longest = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest):\n            longest = s\n    return longest\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if len(strings) == 0:\n        return None\n    \n    if len(strings) == 1:\n        return strings[0]\n    \n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i] + strings[j] > strings[j]:\n                strings[i], strings[j] = strings[j], strings[i]\n    \n    return max(strings, key=len)"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    if len(strings) == 0:\n        return None\n    \n    if len(strings) == 1:\n        return strings[0]\n    \n    longest_length = max(strings)\n    for i in range(len(strings)):\n        if strings[i] == longest_length:\n            return strings[i]\n    \n    return longest_length\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    longest = ''\n    for word in strings:\n        if len(word) > len(longest):\n            longest = word\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    longest_len = max(map(len, strings))\n    max_val = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > longest_len:\n            longest_len = len(strings[i])\n            max_val = strings[i]\n    return max_val"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = []\n    for s in strings:\n        lst.append(len(s))\n    if len(lst) > 1:\n        return max(lst)\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    length = 0\n    max_length = \"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - 1, b)\n    elif a < b:\n        return greatest_common_divisor(a + 1, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    while b > a:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if a == b:\n        return a\n    if b % a == 0:\n        return greatest_common_divisor(a, b // a)\n    else:\n        return greatest_common_divisor(a, b + 1)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    else:\n        return greatest_common_divisor(a, b % a)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if b == 0:\n        return a\n    elif a < b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a // b, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # We will take a, b as integers and do a\n    # gcd with them. This will be the answer.\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a == 1 and b == 1:\n        return 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a > b:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a % b, b"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for d in range(a, b + 1):\n        if (a % d == 0) and (b % d == 0):\n            gcd = d\n    return gcd\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Divide and conquer\n    if a > b:\n        return a // b\n    else:\n        return b // a\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    prefixes = ['a']\n    curr = ''\n    for i in range(len(string)):\n        if string[i] not in 'aeiouAEIOU':\n            continue\n        if string[i] == 'e':\n            curr = curr[:i] + 'e'\n        elif string[i] == 'o':\n            curr = curr[:i] + 'o'\n        elif string[i] == 'i':\n            curr = curr[:i] + 'i'\n        elif string[i] == 'l':\n            curr = curr[:i] + 'l'\n        elif string[i] == 'n':\n            curr = curr[:i] + 'n'\n        elif string[i] =='s':\n            curr = curr[:i] +'s'\n        elif string[i] == 't':\n            curr = curr[:i] + 't'\n        elif string[i] == 'd':\n            curr = curr[:i] + 'd'\n        elif string[i] == 'c':\n            curr = curr[:i] + 'c'\n        elif string[i] == 'b':\n            curr = curr[:i] + 'b'\n        elif string[i] == 'f':\n            curr = curr[:i] + 'f'\n        elif string[i] == 'g':\n            curr = curr[:i] + 'g'\n        elif string[i] == 'h':\n            curr = curr[:i] + 'h'\n        elif string[i] == 'j':\n            curr = curr[:i] + 'j'\n        elif string[i] == 'k':\n            curr = curr[:i] + 'k'\n        elif string[i] == 'l':\n            curr = curr[:i] + 'l'\n        elif string[i] =='m':\n            curr = curr[:i] +'m'\n        elif string[i] == 'n':\n            curr = curr[:i] + 'n'\n        elif string[i] == 'p':\n            curr = curr[:i] + 'p'\n        elif string[i] == 'q':\n            curr = curr[:i] + 'q'\n        elif string[i] == 'r':\n            curr = curr[:i] + 'r'\n        elif string[i] == 't':\n            curr = curr[:i] + 't'\n        elif string[i] == 'u':\n            curr = curr[:i] + 'u'\n        elif string[i] == 'v':\n            curr = curr[:i] + 'v'\n        elif string[i] == 'w':\n            curr = curr[:i] + 'w'\n        elif string[i] == 'x':\n            curr = curr[:i] + 'x'\n        elif string[i] == 'y':\n            curr = curr[:i] + 'y'\n        elif string[i] == 'z':\n            curr = curr[:i] + 'z'\n        elif string[i] =='':\n            curr = curr[:i] +''\n        elif string[i] == '.':\n            curr = curr[:i] + '.'\n        elif string[i] == ',':\n            curr = curr[:i] + ','\n        elif string[i] == '!':\n            curr = curr[:i] + '!'\n        elif string[i] == '?':\n            curr = curr[:i] + '?'\n        else:\n            curr = curr[:i] + string[i]\n    prefixes.append(curr)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    string = string.upper()\n    p = []\n    for i in range(len(string) - 1):\n        for j in range(i + 1, len(string)):\n            p.append(string[i:j])\n    return p\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    prefixes = []\n    p = string[0]\n    for i in range(len(string)):\n        if i == 0:\n            prefixes.append(p)\n            p = string[i]\n        else:\n            if p[-1]!= string[i]:\n                prefixes.append(p)\n                p = string[i]\n            else:\n                p += string[i]\n    prefixes.append(p)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prefix_list = []\n    l = len(string)\n    for i in range(1, l+1):\n        prefix = string[:i]\n        prefix_list.append(prefix)\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # use a set to keep track of prefixes\n    prefixes = []\n    prefix = ''\n    for i in range(len(string)):\n        if string[i] == 'a':\n            prefix += 'a'\n        elif string[i] == 'b':\n            prefix += 'ab'\n        elif string[i] == 'c':\n            prefix += 'abc'\n        else:\n            prefix = ''\n            break\n        # check if prefix has already been added\n        if prefix in prefixes:\n            continue\n        else:\n            prefixes.append(prefix)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    prefixes = []\n    length = len(string)\n    for i in range(length):\n        prefixes.append(string[i:])\n    prefixes.reverse()\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(string, key=lambda i: string.find(i, 1))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n = len(string)\n    result = []\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #n = 0\n    # if n == 0:\n    #     return '0'\n    # return f'{n}{n}'\n    \n    return f'{str(n)} '\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return''.join([str(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return'' * n + str(n)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(str(i) for i in range(n, 0, -1))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return f'{0:0>{n+1}}'\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    elif n > 1:\n        string_number = ''\n        while n!= 0:\n            if n % 10 == 0:\n                string_number +=''\n            string_number += str(n % 10)\n            n = n // 10\n        return string_number\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(1,n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 0:\n        return '0'\n    else:\n        return str(n)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 0:\n        raise ValueError(\"Please provide a positive integer\")\n    return str(n)\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return''.join(str(x) for x in range(0, n + 1)"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] not in string[i:]:\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for char in string:\n        count += string.count(char)\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # count_distinct_characters('A')\n    # count_distinct_characters('xyzXYZ')\n    # count_distinct_characters('jRUg')\n    # count_distinct_characters('ytyXYZ')\n    # count_distinct_characters('jRUgJ')\n    # count_distinct_characters('jrUg')\n    # count_distinct_characters('RUg')\n    # count_distinct_characters('RUgj')\n    # count_distinct_characters('RUgjRU')\n    # count_distinct_characters('RUgjRUg')\n    # count_distinct_characters('RUgjRUgRU')\n    # count_distinct_characters('RUgjRUgRUjRUgRU')\n    # count_distinct_characters('ytyXYZ')\n    # count_distinct_characters('jRUg')\n    # count_distinct_characters('yty')\n    # count_distinct_characters('jRUgJ')\n    # count_distinct_characters('jRUgj')\n    # count_distinct_characters('RUg')\n    # count_distinct_characters('RUgjRU')\n    # count_distinct_characters('RUgjRUg')\n    # count_distinct_characters('RUgjRUgRU')\n    # count_distinct_characters('RUgjRUgRUjRUgRU')\n    # count_distinct_characters('jRUgjRUgRUjRUgRUjRU')\n    # count_distinct_characters('ytyXYZ')\n    # count_distinct_characters('jRUg')\n    # count_distinct_characters('yty')\n    # count_distinct_characters('jRUgj')\n    # count_distinct_characters('jRUgjRU')\n    # count_distinct_characters('jRUgjRUg')\n    # count_distinct_characters('jRUgjRUgRU')\n    # count_distinct_characters('RUg')\n    # count_distinct_characters('RUgjRU')\n    # count_distinct_characters('RUgjRUg')\n    # count_distinct_characters('RUgjRUgRU')\n    # count_distinct_characters('RUgjRUgRUjRUgRU')\n    # count_distinct_characters('ytyXYZ')\n    # count_distinct_characters('jRUg')\n    # count_distinct_characters('jRUgj')\n    # count_distinct_characters('RUg')\n    # count_distinct_characters('RUgjRU')\n    # count_distinct_characters('RUgjRUg')\n    # count_distinct_characters('RUgjRUgRU')\n    # count_distinct_characters('yty')\n    # count_distinct_characters('jRUgj')\n    # count_distinct_characters('jRUgjRU')\n    # count_distinct_characters('jRUgjRUg')\n    # count_distinct_characters('RUg')\n    # count_distinct_characters('RUgjRU')\n    # count_distinct_characters('RUgjRUg')\n    # count_distinct_characters('RUgjRUgRU')\n    # count_distinct_characters('ytyXYZ')\n    # count_distinct_characters('jRUgj')\n    # count_distinct_characters('jRUgjRU')\n    # count_distinct_characters('jRUgjRUg')\n    # count_distinct_characters('jRUgjRUgRU')\n    # count_distinct_characters('RUgjRUgRU"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    counter = 0\n    for char in string:\n        if char.isalpha():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # count the number of distinct characters\n    num_distinct = 0\n    for c in string:\n        if c.isalpha():\n            num_distinct += 1\n    return num_distinct\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = 0\n    for char in string:\n        if char.lower()!= char:\n            result += 1\n    return result\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # return count_distinct_characters(string.upper())\n    # string = string.upper()\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n        else:\n            count += count_distinct_characters(char.upper())\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len([x for x in string if x.lower() in string.lower()]"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # You will need to write your code here\n    count = 0\n    for letter in string:\n        count += string.count(letter)\n    return count\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(map(lambda x: int(x), music_string.split('|')))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # if the string has 3 notes, return 4\n    if len(music_string) == 3:\n        return [int(music_string[0]) + int(music_string[1]) * 0.25, int(music_string[2]) + int(music_string[1]) * 0.25]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    beat_range = {\n        'o': [1, 4],\n        '|': [2, 4],\n        '.|': [1, 4]\n    }\n    notes = [beat_range.get(note, []) for note in music_string.replace('|', '')]\n    return [len(notes[i]) for i in range(len(notes))]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    notes = []\n    for note in music_string.split(\"|\"):\n        notes.append(int(note[:3]))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    idx = 0\n    beats = 0\n    current_note = ''\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    note_string_list = music_string.split()\n    # [beat(s), beat(s), beat(s),...]\n    beat_list = list()\n    for i in range(0, len(note_string_list), 3):\n        beat_list.append(int(note_string_list[i]))\n        if i < len(note_string_list) - 3:\n            beat_list.append(int(note_string_list[i + 1]))\n            beat_list.append(int(note_string_list[i + 2]))\n        else:\n            beat_list.append(0)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    beats = 0\n    for index, char in enumerate(music_string):\n        if char == '|':\n            beats += 4\n        elif char == '.|':\n            beats += 2\n        elif char == 'o':\n            beats += 1\n    return beats\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    notes = list()\n    for note in music_string.split('|'):\n        if note == 'o o':\n            notes.append(len(notes))\n        elif note == '.|':\n            notes.append(len(notes) - 1)\n        else:\n            notes.append(0)\n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Notes\n    if music_string[0] == 'o':\n        return [1, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    if music_string[0] == '.':\n        return [2, 1, 2, 2, 1, 1, 1, 1, 1, 4, 4]\n    if music_string[0] == '|':\n        return [1, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    beats = []\n    for char in music_string:\n        if char == '.' or char == 'o':\n            beats.append(int(char))\n    return beats\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n_overlapping_count = 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring in string[i:i + len(substring)]:\n            result += 1\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n        i += len(substring)\n    return count"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    t = len(string)\n    count = 0\n    for i, j in enumerate(string):\n        if j == substring[0]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Split the string and create a list of characters, if the string is empty, return 0.\n    # Otherwise, go through each character and check if it is the same as the substring.\n    # Return the count of the total.\n    # Example\n    # Input:\n    # string: 'ab'\n    # substring: 'ab'\n    # Output:\n    # 3\n    # Explanation:\n    # 'a' occurs 3 times, so count is 3.\n    # 'a' occurs 1 time, so count is 1.\n    # 'aaaa' occurs 3 times, so count is 3.\n    # 'aaaa' occurs 1 time, so count is 1.\n    # If substring is not found, count is 0.\n    # If substring is found, return count.\n    \n    s = len(string)\n    if s == 0:\n        return 0\n    \n    count = 0\n    for i in range(len(string) - 1):\n        if string[i] == string[i + 1]:\n            count += 1\n        \n    return count\n    \n    # Brute force, how many times a substring can occur in the original string.\n    # Dynamic Programming\n    # Time Complexity: O(N)\n    # Space Complexity: O(N)\n    # O(N)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for idx, char in enumerate(string):\n        if substring == char:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # 1. find max length\n    maxlen = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            if len(string[i:i+len(substring)]) > maxlen:\n                maxlen = len(string[i:i+len(substring)])\n    # 2. check for overlaps in the middle\n    # if there are still overlaps, count the ones\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count = 1\n            if maxlen < len(string[i:i+len(substring)]):\n                count = 0\n            return count\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    counter = dict()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counts = collections.Counter(string)\n    substring_count = collections.Counter(substring)\n    total = 0\n    for k, v in counts.items():\n        if k in substring_count:\n            total += min(substring_count[k], substring_count[k]+1)\n    return total\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def sort_numbers_iterative(numbers):\n        \"\"\" Returns a string of numbers in alphabetical order from 'zero' to 'nine'.\n        >>> sort_numbers_iterative('three one five')\n        'one three five'\n        \"\"\"\n        \n        if not numbers:\n            return ''\n        if not numbers[0].isdigit():\n            return numbers\n        current_number = int(numbers[0])\n        numbers = numbers[1:]\n        \n        if numbers[0].isdigit():\n            return sorted(map(lambda number: str(number) + numbers[0], map(int, numbers)), reverse=True)\n        else:\n            numbers = numbers[1:]\n            return sorted(map(lambda number: str(number) + numbers[0], map(int, numbers)), reverse=True)\n        \n    return sort_numbers_iterative(numbers)\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join(sorted(numbers))"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(numbers.split(' '), key=int)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return''.join([str(n) for n in sorted(numbers.split(' '))])\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    zero = 0\n    one = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n    six = 6\n    seven = 7\n    eight = 8\n    nine = 9\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    number_list = numbers.split()\n    number_list.sort()\n    return''.join(number_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert isinstance(numbers, str), 'argument is not a string'\n    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    numbers = [int(n) for n in numbers.strip().split(\" \")]\n    numbers.sort()\n    numbers = \" \".join(map(str, numbers))\n    return numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # return''.join(sorted(numbers.split(' ')))\n    return sorted(numbers.split())\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    smallest = 9999.0\n    smallest_element = 0.0\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n            smallest_element = smallest_element + 1\n        elif smallest == number:\n            smallest_element += 1\n    return smallest, smallest_element\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smallest = float(\"inf\")\n    closest = (float(\"inf\"), None)\n    for num in numbers:\n        if num < smallest:\n            closest = (num, smallest)\n        elif num > closest[0]:\n            closest = (num, num)\n        elif num > closest[0] and num < closest[0] + smallest:\n            closest = (num, num)\n    return closest\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # O(N) to find closest and sort elements\n    def get_closest(number: float) -> Tuple[float, float]:\n        return (min(numbers), max(numbers))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    delta = lambda x: x-min(numbers)\n    elements = sorted(numbers)\n    return delta(elements[-2]), delta(elements[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # find the smallest and the largest\n    smallest, largest = numbers[0], numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smallest_value, biggest_value = float('inf'), float('-inf')\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(f\"Expected at least two numbers but found only {len(numbers)} elements\")\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    min_distance = float('inf')\n    closest_elements = (0, 0)\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    minimum_value = min(numbers)\n    maximum_value = max(numbers)\n    return [x / (maximum_value - minimum_value) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [val / (max_val - min_val) * (max_val - min_val) + min_val for val in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    numbers_normalized = []\n    for number in numbers:\n        normalized_number = (number - min(numbers)) / (max(numbers) - min(numbers))\n        numbers_normalized.append(normalized_number)\n    return numbers_normalized\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [n / float(numbers[0]) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return []\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    rescale = []\n    for number in numbers:\n        if not number:\n            rescale.append(0.0)\n        elif number < 0.0:\n            rescale.append(1.0)\n        elif number > 1.0:\n            rescale.append(0.0)\n        elif number == 0.0:\n            rescale.append(0.0)\n        else:\n            rescale.append(number / (1.0 + number))\n    return rescale\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [number*1.0/sum(numbers) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x/sum(numbers) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [n / (1.0 / len(numbers)) for n in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [num for num in values if num.isdigit()]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [int(x) for x in values if type(x) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [x for x in values if type(x) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [i for i in values if type(i) is int]\n    \ndef add_spaces(values: List[Any]) -> List[str]:\n    \"\"\" Add spaces between integers and characters\n    >>> add_spaces([1, 2, 3, 'abc', {}, []])\n    ['1 2 3 abc', '1 2 3']\n    \"\"\"\n    return [str(i) +'' for i in values]\n    \ndef merge_lists(values: List[Any]) -> List[Any]:\n    \"\"\" Merge given list of any python values into a single list\n    >>> merge_lists([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3, 'abc', {}, []]\n    \"\"\"\n    result = []\n    for i in values:\n        result.extend(i)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(values) is not list:\n        values = [values]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [int(value) for value in values if type(value) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [int(value) for value in values if value]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x for x in values if type(x) is int]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # We want to filter out all strings/numbers. So we do:\n    # >>> [val for val in filter_integers(['a', 3.14, 5]) if val < 3]\n    # ['a', 3.14]\n    # >>> [val for val in filter_integers(['a', 'b', 3.14, 5]) if val < 3]\n    # ['a', 'b']\n    # >>> [val for val in filter_integers(['a', 2.5, 5]) if val < 3.0]\n    # ['a', 2.5]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int)]\n    # [1, 2, 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int)]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int) and not isinstance(val, int) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int) and not isinstance(val, int) and not isinstance(val, str) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int) and isinstance(val, str) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int) and not isinstance(val, str) and not isinstance(val, int) and not isinstance(val, float) and val in [1, 2, 3]]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int) and not isinstance(val, str) and not isinstance(val, float) and not isinstance(val, int) and not isinstance(val, float)]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if isinstance(val, int) and not isinstance(val, str) and not isinstance(val, float) and not isinstance(val, int) and not isinstance(val, float)]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int) and not isinstance(val, str) and not isinstance(val, float) and not isinstance(val, int) and not isinstance(val, float)]\n    # ['a', 'b', 3]\n    # >>> [val for val in filter_integers([1, 2, 3, 'abc', {}, []]) if not isinstance(val, int) and not isinstance(val, str) and not isinstance(val, float) and not isinstance(val, int) and not isinstance(val, float)]\n    # ['a', 'b', 3]\n    # >>> "
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = 0\n    for char in string:\n        n += 1\n    return n\n    \ndef strsplit(string: str) -> list:\n    \"\"\" Split given string into a list\n    >>> strsplit('aabccccc')\n    ['a', 'a', 'b', 'c', 'c']\n    \"\"\"\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if type(string) == str:\n        return len(string)\n    else:\n        return 0\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(string)!= str:\n        raise TypeError('input must be string')\n    elif not string:\n        raise ValueError('input must not be empty string')\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if string == '':\n        return 0\n    elif len(string) == 0:\n        return 0\n    else:\n        return 1 + strlen(string[0:len(string)])\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if string == '':\n        return 0\n    else:\n        return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    divisor_array = [i for i in range(1, n+1) if n % i == 0]\n    return divisor_array[-1]\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def is_divisible(x: int) -> bool:\n        return x % 2 == 0\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # find all prime factors\n    p_factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            p_factors.append(i)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def _largest_divisor(n: int) -> int:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        elif n % 2 == 0:\n            return 3\n        else:\n            return _largest_divisor(n // 2) + 1\n    return _largest_divisor(n)\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    divisor = 2\n    while (n % divisor) == 0:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        return n\n    else:\n        divisors.sort(reverse=True)\n        return divisors[0]"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n < 2:\n        return 1\n    l = 2\n    for i in range(3, int(n ** 0.5), 2):\n        if n % i == 0:\n            l = i\n            break\n    return l\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return sieve[n]\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #write your code here\n    divisors = [i for i in range(1,n+1)]\n    divisors.sort()\n    return divisors[-1]\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    divs = [1] + [i for i in range(2, int(math.sqrt(n) + 1)) if n % i == 0]\n    return max(divs)\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    primes = []\n    for i in range(2, n+1):\n        if n % i == 0:\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # prime factorization\n    primes = [2, 3]\n    for i in range(4, n+1):\n        primes.extend([i, p for p in primes if p % i == 0])\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [i for i in range(1, n + 1) if n % i == 0]\n    \n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factor_list = []\n    \n    def comb(n, k):\n        if n == 1:\n            return [k]\n        elif k == 0:\n            return [1, n]\n        elif n % k == 0:\n            return comb(n // k, k-1) + comb(n // k, k-1)\n        else:\n            return comb(n // k, k) + comb(n // k, k-1)\n    \n    for i in range(2, n+1):\n        k = 0\n        for j in range(1, i):\n            k += comb(i, j)\n        factor_list.append(k)\n    \n    return factor_list\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [2]\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    factorize(n//i)\n                else:\n                    factorize(i*2)\n        if n < 2:\n            return [1]\n        else:\n            return [i for i in range(2, n+1)]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    import math\n    ans = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            ans.append(i)\n            ans.append(n//i)\n            if n // i == i:\n                ans.append(n//i)\n    return ans\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    if n == 1:\n        return [1]\n    for i in range(2, n):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(range(1, n + 1))\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    primes = [2]\n    \n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            m = n//i\n            for j in range(1, m+1):\n                primes.append(i)\n                primes.append(i*j)\n    \n    return primes\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            yield num\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(numbers):\n        j = i\n        while j < len(numbers) and numbers[j] == numbers[i]:\n            j += 1\n        numbers[i], numbers[j] = numbers[j], numbers[i]\n        i += 1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    numbers.sort()\n    m = int(numbers[-1] / numbers[0])\n    index = 0\n    for i in range(m, len(numbers)):\n        if numbers[i] == numbers[index]:\n            numbers.remove(numbers[i])\n        index += 1\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    hashmap = {}\n    output = []\n    for i in numbers:\n        if i in hashmap:\n            hashmap[i] += 1\n        else:\n            hashmap[i] = 1\n    for k in hashmap:\n        if hashmap[k] > 1:\n            output.append(k)\n    return output\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(numbers) <= 1: return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # take a copy of numbers\n    numbers = list(numbers)\n    # copy the list backwards\n    numbers = numbers[::-1]\n    # start at 0 and start at the beginning of the list\n    pos = 0\n    # iterate backwards\n    while pos < len(numbers):\n        # check if current number is equal to previous\n        if numbers[pos] == numbers[pos-1]:\n            # if yes, remove the current number\n            numbers.pop(pos)\n        else:\n            # otherwise, move the current number forward\n            pos += 1\n    return numbers\n    \n    \n    \n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(numbers)\n    for i in range(n):\n        j = 0\n        numbers[i] = -1\n        for j in range(n):\n            if numbers[j]!= -1 and numbers[j]!= i:\n                break\n        numbers[i] = -1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # iterate through numbers, remove the element that is repeated\n    # if no repetitions, then append it to the result list\n    # this way, the results are in the same order as the input list\n    return_val = []\n    for i in range(len(numbers)):\n        if numbers.count(numbers[i]) > 1:\n            return_val.append(numbers[i])\n        else:\n            numbers[i] = numbers[i]\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    numbers = sorted(numbers)\n    n_after_remove = 0\n    for i in range(len(numbers)):\n        while numbers[i]!= numbers[i+1]:\n            if numbers[i] == numbers[i+1]:\n                # Remove the element\n                numbers[i+n_after_remove] = numbers[i]\n                # Increment the count\n                numbers[i+1] = 0\n                # Decrement the next index\n                i += 1\n                n_after_remove += 1\n    return numbers[:n_after_remove]\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # return string.lower().translate(string.maketrans('', '', string)).upper().translate(string.maketrans('', '', string)).lower()\n    return string.lower().translate(string.maketrans('', '', string)).upper().translate(string.maketrans('', '', string)).lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return string.lower().capitalize().upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return string.upper() + string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return string.upper()"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return string.lower() + string.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr(ord(x) + 32) if x.isupper() else x for x in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    string = string.lower()\n    string = string.swapcase()\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    string = ''\n    for string in strings:\n        string +='' + string\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not strings:\n        return ''\n    else:\n        return strings[0] + ''.join(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = ''\n    for char in strings:\n        result += char\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string[:len(prefix)] == prefix:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for s in strings:\n        if not s.startswith(prefix):\n            pass\n        elif not s.startswith(prefix):\n            strings.remove(s)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if prefix == '.' or prefix == '':\n        return strings\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    filtered_strings = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered_strings.append(s)\n    return filtered_strings\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [s for s in strings if prefix in s]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [int(n) for n in list(filter(lambda x: x >= 0, l))]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = list(map(int, l))\n    l.sort()\n    return l\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x for x in l if x>0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [item for item in l if item > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = []\n    for i in l:\n        if i > 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    positive = []\n    for num in l:\n        if num > 0:\n            positive.append(num)\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    result = [num for num in l if num > 0]\n    return resul"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n%2==0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Write your code here.\n    if n == 2 or n == 3 or n == 5:\n        return True\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # the following formula can be used in a real problem\n    # also note that all odd numbers in the range of 1 and 2\n    # are considered prime\n    return n > 1 and all(n % i for i in range(3, int(n ** 0.5) + 2, 2))\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 3:\n        return n > 1\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n<2: return False\n    if n==2: return True\n    for i in range(2,n):\n        if n%i==0: return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return is_prime_func(n) or (n == 1) or n == 2\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if xs == []:\n        return 0.0\n    elif len(xs) % 2 == 1:\n        return 0.0\n    else:\n        return max([poly(xs[i:], xs[0]) for i in range(len(xs))])\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def power(xs: list, n: int):\n        n = len(xs)\n        if n % 2 == 0:\n            return sum([xs[i] * power(xs, i // 2) for i in range(0, n, 2)])\n        else:\n            return 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # if xs has at least one non zero coefficient\n    if all([(coeff!= 0) for coeff in xs]):\n        # find maximum non zero coefficient\n        return max(xs)\n    # if xs has only one non zero coefficient\n    return max(xs)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(xs)!= 1:\n        return None\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # create a new list of coefficients of a polynomial\n    new_xs = []\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            new_xs.append(xs[i])\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = xs[0]\n    b = 0\n    for i in range(len(xs)):\n        b += xs[i]\n    if b == 0:\n        print('you have entered an empty list.\\n')\n    else:\n        return a * b\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    list_of_zero_point = []\n    \n    if len(xs) < 2:\n        return None\n    else:\n        for i in range(len(xs)):\n            if i % 2 == 0:\n                list_of_zero_point.append(xs[i])\n        return max(list_of_zero_point)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(xs)\n    if n < 2 or n % 2!= 0:\n        return 0.0\n    coeffs = [poly(xs, x) for x in xs[::2]]\n    for i in range(len(coeffs)):\n        if coeffs[i]!= 0:\n            return (1.0 - coeffs[i]) * xs[i]\n    return 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0\n    for i, coeff in enumerate(xs[::2]):\n        if coeff % 2 == 1:\n            s += coeff\n        else:\n            return s\n    return s\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        x = max(xs)\n        for i in range(1, len(xs) - 1):\n            if xs[i]!= 0:\n                return x\n    except:\n        return -1\n    return -1\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if (l[i] + l[j]) % 3 == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    new_l = []\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            new_l.append(l[i])\n        if l[i] % 3 == 0:\n            new_l.append(l[i])\n    return new_l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(l, reverse=True)\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = list(l)\n    l.sort()\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    sorted_list = []\n    counter = 0\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            counter += 1\n            sorted_list.append(l[i])\n    if counter % 2 == 0:\n        return sorted_list\n    else:\n        return sorted_list + [l[i] for i in range(len(l) - counter) if l[i] % 3!= 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if l[0] < l[1]:\n        return [l[0], l[1]]\n    else:\n        return [l[1], l[0]]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = []\n    while len(l)!= 0:\n        for i in range(len(l)):\n            if l[i] % 3!= 0:\n                s.append(l[i])\n        for i in range(len(l)):\n            if l[i] % 3 == 0:\n                l[i] = l[i] // 3\n        l = s\n        s = []\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l_indices = list(range(len(l)))\n    l_indices_3 = list(filter(lambda x: x % 3 == 0, l_indices))\n    l_indices_3_sorted = sorted(l_indices_3)\n    new_list = [x for x in l_indices_3 if x not in l_indices_3_sorted]\n    return new_list\n    # l_indices = list(range(len(l)))\n    # l_indices_3 = list(filter(lambda x: x % 3 == 0, l_indices))\n    # l_indices_3_sorted = sorted(l_indices_3)\n    # return l_indices_3\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(l, reverse=True)\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [l[i] for i in range(len(l)) if l[i] % 3!= 0 and l[i] % 5 == 0 and l[i] % 3!= l[i] % 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Sort the list\n    l.sort()\n    # Return list without duplicates\n    return l[:]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # remove duplicates\n    return list(dict.fromkeys(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    print(set(l))\n    return list(set(l))\n    \ndef main():\n    #fibonacci\n    fib(20)\n    \n    #loop through nested lists\n    #to iterate through the nested lists\n    #first, find the index of the first element \n    #in the nested lists. \n    #if the value is unique, then set the value\n    #to that element\n    #pass the current index to an input\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return max(l)\n    \ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n    \ndef average(l: list):\n    \"\"\"Return mean of elements in the list.\n    >>> average([1, 2, 3])\n    2.5\n    >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123.75\n    \"\"\"\n    return sum(l) / len(l)\n    \ndef list_difference(l1: list, l2: list):\n    \"\"\"Return list of all elements that are different from the given list.\n    >>> list_difference([1, 2, 3], [1, 4, 7])\n    [4, 7]\n    >>> list_difference([1, 2, 3], [1, 4, 7, -4])\n    []\n    \"\"\"\n    l1 = list(l1)\n    l2 = list(l2)\n    return [x for x in l1 if x not in l2]\n    \ndef string_to_int(s: str):\n    \"\"\"Convert string to integer.\n    >>> string_to_int(\"123456\")\n    123456\n    \"\"\"\n    return int(s)\n    \ndef int_to_string(n: int):\n    \"\"\"Convert integer to string.\n    >>> int_to_string(123456)\n    '123456'\n    \"\"\"\n    return str(n)\n    \ndef sum_digits(n: int):\n    \"\"\"Return sum of all digits of a given number.\n    >>> sum_digits(12345)\n    6\n    >>> sum_digits(123456789)\n    >>> sum_digits(1)\n    0\n    \"\"\"\n    return sum(map(int, str(n)))\n    \ndef sum_digits_recursive(n: int):\n    \"\"\"Return sum of all digits of a given number.\n    >>> sum_digits_recursive(12345)\n    6\n    >>> sum_digits_recursive(123456789)\n    >>> sum_digits_recursive(1)\n    0\n    \"\"\"\n    if n < 10:\n        return n\n    return (10 * sum_digits_recursive(n // 10)) + n % 10\n    \ndef sum_digits_iterative(n: int):\n    \"\"\"Return sum of all digits of a given number.\n    >>> sum_digits_iterative(12345)\n    6\n    >>> sum_digits_iterative(123456789)\n    >>> sum_digits_iterative(1)\n    0\n    \"\"\"\n    s = str(n)\n    return sum(map(int, s))\n    \ndef is_palindrome(n: int):\n    \"\"\"Return True if a number n is palindrome.\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(100)\n    True\n    >>> is_palindrome(12345)\n    True\n    >>> is_palindrome(1234)\n    False\n    \"\"\"\n    n = str(n)\n    return n == n[::-1]\n    \ndef is_palindrome_recursive(n: int):\n    \"\"\"Return True if a number n is palindrome.\n    >>> is_palindrome_recursive(123)\n    True\n    >>> is_palindrome_recursive(100)\n    True\n    >>> is_palindrome_recursive(12345)\n    True\n    \"\"\"\n    if n < 10:\n        return n == n\n    return (n % 10) == (10 * is_palindrome_recursive(n // 10)) % 10\n    \ndef is_palindrome_iterative(n: int):\n    \"\"\"Return True if a number n is palindrome.\n    >>> is_palindrome_iterative(123)\n    True\n    >>> is_palindrome_iterative(100)\n    False\n    >>> is_palindrome_iterative(12345)\n    False\n    \"\"\""
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    max_num = 0\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if l == []:\n        return 0\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return 0\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    divisors = {1:1,2:1,3:1,5:1,7:1,11:1,13:1}\n    divisors[divisors.get(n%11,0)]+=1\n    if divisors[divisors.get(n%13,0)]==0:\n        divisors[divisors.get(n%7,0)]+=1\n    else:\n        divisors[divisors.get(n%7,0)]-=1\n    return sum(divisors.values())\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # let the number of times the digit 7 is divisible by 11 or 13\n    if n%11==0:\n        return 0\n    elif n%13==0:\n        return 1\n    elif n%7==0:\n        return 2\n    elif n%5==0:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n % 7 == 0:\n        return 0\n    elif n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    else:\n        return 3"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(n):\n        if i%3 == 0 and i%5 == 0:\n            count += 1\n        elif i%3 == 0:\n            count += 1\n        elif i%5 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #if n%11 == 0:\n    #    return 1\n    #else:\n    #    return 0\n    if n % 11 == 0:\n        return 1\n    if n % 13 == 0:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n % 11 == 0:\n        return 1\n    elif n % 13 == 0:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    numbers_divisible_by_11_or_13 = 0\n    if n % 11 == 0:\n        numbers_divisible_by_11_or_13 += 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 1:\n        return 0\n    elif n % 2 == 0:\n        return 1 + fizz_buzz(n // 2)\n    elif n % 3 == 0:\n        return 2 + fizz_buzz(n // 3)\n    elif n % 5 == 0:\n        return 3 + fizz_buzz(n // 5)\n    else:\n        return 4 + fizz_buzz(n // 4)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 3 == 0 and i % 5 == 0:\n            count += 1\n        elif i % 3 == 0:\n            count += 1\n        elif i % 5 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    buzz_val = 0\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    even_sorted = []\n    odd_sorted = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_sorted.append(l[i])\n        else:\n            odd_sorted.append(l[i])\n    return even_sorted + odd_sorted\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) % 2 == 0:\n        return l\n    else:\n        l_even = []\n        for i in range(0, len(l), 2):\n            if l[i] % 2 == 1:\n                l_even.append(l[i])\n        return l_even\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    l.sort()\n    odd = list()\n    even = list()\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    even_index = 0\n    odd_index = 1\n    while even_index < len(l) and odd_index < len(l):\n        if l[even_index] % 2 == 0:\n            l[even_index], l[odd_index] = l[odd_index], l[even_index]\n            even_index += 1\n            odd_index += 1\n        else:\n            odd_index += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #This function returns a list sorted by even indicies of the list l\n    even_indices = list()\n    for num in l:\n        if num % 2 == 0:\n            even_indices.append(num)\n    return even_indices"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # O(n log n)\n    odd = []\n    even = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            odd.append(l[i])\n        else:\n            even.append(l[i])\n    return odd + even\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    l.sort(reverse=True)\n    if len(l)%2==0:\n        l_odd = l[:-1]\n        l_even = l[1:]\n        return l_odd + l_even\n    else:\n        l_odd = l[:-1]\n        l_even = l[1:]\n        return l_even + l_odd\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sorted_list = []\n    for index in range(len(l)):\n        if index % 2 == 0:\n            sorted_list.append(l[index])\n        else:\n            sorted_list.append(l[index])\n    return sorted_list\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + odd\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = list()\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n    return even"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle through groups and decode each one.\n    result = \"\"\n    for group in groups:\n        result += group[0]\n        for c in group:\n            result += c\n    return result\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    groups = [s[i:(i + 3)] for i in range(len(s))]\n    # split groups. Each group is repeated by three times.\n    return \"\".join([groups[i * 3:(i + 1) * 3] for i in range(len(groups) // 3)])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # cycle characters from first group.\n    return groups[0][0]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(ord(group) - ord('a')) for group in s.split('_')])\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # create list of decomposed strings.\n    decoded_str = []\n    # cycle from left to right.\n    for group in groups:\n        for character in group:\n            if character in \"aeiouAEIOU\":\n                decoded_str.append(character)\n            else:\n                decoded_str.append(f\"{character}\")\n        decoded_str.append(\"\")\n    # return final string.\n    return \"\".join(decoded_str)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[-1]) if len(group) == 3 else group for group in groups]\n    # return decoded string\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # return value.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # decode cyclic groups of three characters.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # if groups are empty, return empty string.\n    if not groups:\n        return \"\"\n    # cycle elements from groups.\n    for i in range(len(groups)):\n        # if element has less than 3 characters.\n        if len(groups[i]) < 3:\n            # return empty string.\n            return \"\"\n        # get element from group.\n        current_group = groups[i]\n        # get subgroup of current group.\n        next_group = groups[(i + 1) % len(groups)]\n        # concatenate groups.\n        groups[i] = (current_group[1:] + next_group[1:]) if len(current_group) > 3 else current_group\n    # return substring from groups.\n    return \"\".join(groups[len(s):])"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # cyclic encoded string = decode_cyclic function.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # split groups to decoded strings.\n    decoded = [encode_cyclic(group) for group in groups]\n    # remove empty groups from decoded string.\n    decoded = [group for group in decoded if group!= \"\"]\n    return \"\".join(decoded)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    \n    if n == 2:\n        return 2\n    \n    if n%2==0:\n        return prime_fib(n-1)\n    else:\n        return prime_fib(n-1)+prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a, b = 2, 3\n    while a < n:\n        a, b = b, a+b\n        if b == 2:\n            return a\n    return None\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    fib = [2, 3]\n    i = 0\n    while fib[i] < n:\n        fib.append(fib[i] + fib[i - 1])\n        i += 1\n    return fib[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    elif n == 2:\n        return n\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fib = 1\n    while True:\n        for i in range(fib, n+1):\n            if (i%2 == 0) and (i%3 == 0) and (i%5 == 0):\n                continue\n            if (i%2 == 0) and (i%3 == 0) and (i%5 == 0):\n                continue\n            if (i%2 == 0) and (i%3 == 0) and (i%5 == 0):\n                continue\n            fib = fib + i\n        if fib < n+1:\n            return fib\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return 2 if n == 1 else prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = 0\n    b = 1\n    if n == 1:\n        return a\n    if n % 2 == 0:\n        a = prime_fib(n - 2)\n        return a\n    if n % 2 == 1:\n        b = prime_fib(n - 1)\n        return a + b\n    return a + b\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    return prime_fib(n-2)+prime_fib(n-1)\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n >= 1\n    assert isinstance(n, int)\n    assert n >= 2\n    prime = 1\n    q = 2\n    while q <= n:\n        prime = (prime + q) % n\n        q = (q + 2*prime + 1) % n\n    return prime\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        if l[i] == 0:\n            if l[i+1]!= 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) == 3:\n        return True\n    for i in range(3):\n        if l[i]!= sum(l[i+1:]) and l[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    count = 0\n    for num in l:\n        if num==0:\n            count+=1\n        else:\n            return False\n    if count==2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = True\n    for x in range(len(l)):\n        for y in range(x+1, len(l)):\n            z = l[y] - l[x]\n            if z!= 0:\n                result = False\n    return result\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 3:\n        if l[0] + l[1] + l[2] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \"\"\"\n    count = 0\n    for element in l:\n        for i in range(3):\n            if element == l[i]:\n                count += 1\n    return count == 3\n    \"\"\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # dictionary to keep track of the total number of elements\n    # that are in a given list\n    numbers = dict()\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    new_list = []\n    for i in l:\n        if i == 0:\n            new_list.append(False)\n        elif i < 0:\n            new_list.append(False)\n        else:\n            new_list.append(True)\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(3):\n        if l[i] == l[i+1] == l[i+2]!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    car_1_speed = 1\n    car_2_speed = 2\n    car_1_pos = [0, 0]\n    car_2_pos = [0, 0]\n    while(car_1_speed > 0 and car_2_speed > 0):\n        car_1_speed = random.uniform(1, 4)\n        car_2_speed = random.uniform(1, 4)\n        car_1_pos = [car_1_pos[0] + car_1_speed * random.uniform(-1, 1), car_1_pos[1]]\n        car_2_pos = [car_2_pos[0] + car_2_speed * random.uniform(-1, 1), car_2_pos[1]]\n        # Verify that there are no collisions.\n        if (car_1_pos[0] == car_2_pos[0]):\n            car_1_pos = [car_1_pos[0] + car_1_speed * random.uniform(-1, 1), car_1_pos[1]]\n        elif (car_1_pos[1] == car_2_pos[1]):\n            car_2_pos = [car_2_pos[0] + car_2_speed * random.uniform(-1, 1), car_2_pos[1]]\n        else:\n            return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return n//2\n    else:\n        return n - 1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # create a variable to store the collisions\n    n_collisions = 0\n    # iterate through each set of car\n    for i in range(n):\n        # if the car is going straight ahead of the other car, \n        # determine whether or not they can go right to left.\n        if cars[i].x == cars[i-1].x:\n            if cars[i].y == cars[i-1].y:\n                # if the car is going straight ahead of the other car,\n                # determine whether or not they can go right to left.\n                if cars[i].y == cars[i-1].y:\n                    # if both the cars are straight ahead of each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n                # if the car is going straight behind the other car,\n                # determine whether or not they can go left to right.\n                else:\n                    # if both the cars are straight behind each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n        # if the car is going straight behind the other car,\n        # determine whether or not they can go right to left.\n        elif cars[i].x == cars[i+1].x:\n            if cars[i].y == cars[i+1].y:\n                # if the car is going straight behind the other car,\n                # determine whether or not they can go right to left.\n                if cars[i].y == cars[i+1].y:\n                    # if both the cars are straight behind each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n                # if the car is going straight ahead of the other car,\n                # determine whether or not they can go right to left.\n                else:\n                    # if both the cars are straight ahead of each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n        # if the car is going straight behind the other car,\n        # determine whether or not they can go left to right.\n        elif cars[i].x == cars[i-1].x:\n            if cars[i].y == cars[i-1].y:\n                # if the car is going straight behind the other car,\n                # determine whether or not they can go left to right.\n                if cars[i].y == cars[i-1].y:\n                    # if both the cars are straight behind each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n                # if the car is going straight ahead of the other car,\n                # determine whether or not they can go left to right.\n                else:\n                    # if both the cars are straight ahead of each other car,\n                    # we count them as the same collision.\n                    n_collisions += 1\n    # return the number of collisions.\n    return n_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return 0\n    elif n < 5:\n        return n*n\n    elif n < 10:\n        return (n*n)//3\n    elif n < 15:\n        return (n*n*n)//3\n    elif n < 20:\n        return (n*n*n)//3\n    else:\n        return (n*n*n*n)//3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = max(1, n)\n    cars = []\n    for i in range(1, n+1):\n        cars.append(i)\n    return sum(car_distance(cars, cars, (0, 0))!= 0 for cars in cars)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n*n-1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = n * [1]\n    n += 1\n    for i in range(1, n):\n        a[i] = a[i-1] + 1\n    return a\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    collision_count = 0\n    for i in range(1, n):\n        if(car_right_collision(i)):\n            collision_count += 1\n        if(car_left_collision(i)):\n            collision_count += 1\n    return collision_count\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return 1 + car_race_collision(n-3) + car_race_collision(n-2) + car_race_collision(n-1)\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [e + 1 for e in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [element + 1 for element in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return list(map(lambda x: x + 1, l)"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i + 1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [i+1 for i in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    new_l = [x+1 for x in l]\n    return new_l\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l = list(l)\n    l[0] = l[0] + 1\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in l:\n        if i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(l) < 2:\n        return False\n    if l[0] == l[1]:\n        return False\n    if l[0]!= l[1]:\n        return False\n    for i in range(2, len(l)):\n        if l[i] == l[i-1] and l[i]!= l[i-2]:\n            return False\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(l) == 2:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n    else:\n        for index in range(len(l)):\n            if l[index] == 0:\n                for i in range(index+1, len(l)):\n                    if l[i] == 0:\n                        return True\n        return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in l:\n        if l.count(i) == 2:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    elif (l[0] + l[-1]) == 0:\n        return True\n    elif (l[0] + l[-1]) > 0:\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i]!= l[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    l = sorted(l)\n    index = 0\n    for i in range(len(l)):\n        index = l.index(l[i])\n        if index > 1 and l[i] == l[index-1]:\n            return False\n    return True"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return False\n    #check if there are two distinct elements\n    elif len(set(l)) == 2:\n        return True\n    else:\n        #loop through list and check if the two elements sum to zero\n        for num in l:\n            if num == 0 and num in l:\n                continue\n            elif num!= 0 and num in l:\n                return True\n    #return false if it's not the case\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = [int(x) for x in l]\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]!= l[j] and l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return len(set(l)) == 1\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # if 0 not in l:\n    #     return False\n    # if sum(l)!= 0:\n    #     return False\n    # return True\n    # if len(l) < 2:\n    #     return False\n    # elif len(l) == 2:\n    #     return True\n    # elif l[0]!= l[1]:\n    #     return False\n    # return True\n    # for i in range(len(l)):\n    #     if l[i]!= l[i+1] and l[i]!= 0:\n    #         return False\n    # return True\n    # for i in range(len(l)):\n    #     if l[i]!= l[i+1] and l[i]!= 0 and l[i+1]!= 0:\n    #         return False\n    # return True\n    # return False\n    # return False\n    # if sum(l)!= 0:\n    #     return False\n    # if len(l) < 2:\n    #     return False\n    # if len(l) == 2:\n    #     if l[0] == l[1]:\n    #         return False\n    #     else:\n    #         return True\n    # if l[0]!= l[1]:\n    #     return False\n    # return True\n    # for i in range(len(l)):\n    #     if l[i]!= l[i+1] and l[i]!= 0 and l[i+1]!= 0:\n    #         return False\n    # return True\n    if len(l) < 2:\n        return False\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return False\n        else:\n            return True\n    if l[0]!= l[1]:\n        return False\n    if l[0]!= l[2]:\n        return False\n    if l[1]!= l[3]:\n        return False\n    return True\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if base > 10:\n        base = 10\n    return str(x // base)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if x < 10:\n        return str(x * base)\n    else:\n        return \"110\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x < base:\n        return \" \"\n    return base*int(str(x//base))\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x > 0:\n        return str(x)[::-1]\n    else:\n        return '0' * abs(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i = 0\n    while x!= 0:\n        x, i = divmod(x, base)\n    return str(i)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = ''\n    while x!= 0:\n        l = x // base\n        x, r = divmod(x, base)\n        s = str(r) + s + str(l)\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return format(x, f'0{base}b')\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return ''.join(str(x) for x in bin(x)[2:].zfill(base))\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return (h ** 2) * (a / 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a*(h/2)\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if a < h:\n        return triangle_area(h, a)\n    else:\n        return a * (a + h) / 2\n    \ndef square_area(l):\n    \"\"\"Returns the area of a square in cm^2.\n    >>> square_area(8)\n    30\n    >>> square_area(10)\n    1360\n    \"\"\"\n    return l * l\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert a > 0, \"side must be positive\"\n    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    a = float(a)\n    h = float(h)\n    if a < 0:\n        return float(\"NaN\")\n    if h < 0:\n        return float(\"NaN\")\n    area = (1/2) * (h**2)\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    "
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    if n <= 1:\n        return n\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3)\n    return fib(n)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-2) + fib4(n-1)\n    \n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def fib4_rec(n, fib_count):\n        if n == 0 or n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return fib4_rec(n-1, fib_count) + fib4_rec(n-2, fib_count) + fib4_rec(n-3, fib_count) + fib4_rec(n-4, fib_count)\n    return fib4_rec(n,0)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return (sorted(l, reverse=True)[len(l) // 2] + sorted(l)[len(l) // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if l is None:\n        return None\n    else:\n        return sorted(l, key=lambda x: x)[int(len(l)/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert len(l) > 0\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[int(n/2)] + l[int(n/2 - 1)]) / 2\n    else:\n        return l[int(n/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = sorted(l)\n    mid = len(l) // 2\n    if len(l) % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return l[0]\n    return median(l[1: len(l)//2])\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sorted(l)[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # naive approach\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n    \n    sorted_list = sorted(l)\n    if len(l) % 2 == 0:\n        return (sorted_list[len(sorted_list)//2] + sorted_list[(len(sorted_list)//2) - 1]) / 2\n    else:\n        return sorted_list[(len(sorted_list)//2) - 1]\n    \ndef gcd(a, b):\n    \"\"\"Return gcd(a, b)\n    >>> gcd(7, 9)\n    9\n    >>> gcd(30, 99)\n    99\n    \"\"\"\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not l:\n        return None\n    s = len(l)\n    if s % 2 == 1:\n        l.sort()\n        return l[s//2]\n    else:\n        mid = s//2\n        if mid % 2 == 1:\n            return l[mid]\n        else:\n            return (l[mid-1] + l[mid])/2\n        \ndef find_most_common(l: list):\n    \"\"\"Return index of element most common in the list.\n    >>> find_most_common([1, 2, 4, 3, 3, 7])\n    7\n    >>> find_most_common([1, 4, 5, 3, 6])\n    5\n    >>> find_most_common([2, 4, 6, 7, 10, -4, -5, -7])\n    10\n    \"\"\"\n    if not l:\n        return None\n    s = len(l)\n    if s == 1:\n        return 0\n    elif s % 2 == 1:\n        return (s-1)//2\n    else:\n        return (s-1)//2 + (s//2)\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not l:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] + l[1]\n    middle = len(l) // 2\n    return (l[middle] + l[middle - 1]) / 2.0\n    \ndef mode(l: list):\n    \"\"\"Return the most frequently occuring element in the list l.\n    >>> mode([3, 1, 2, 4, 5])\n    1\n    >>> mode([-10, 4, 6, 1000, 10, 20])\n    10\n    >>> mode([10, 20, 4, 20, 10, 5])\n    20\n    \"\"\"\n    s = Counter(l)\n    x = s.most_common(1)\n    if len(x) == 1:\n        return x[0][0]\n    return x[0][0]\n    \ndef minimum(l: list):\n    \"\"\"Return the minimum element of list l.\n    >>> minimum([3, 1, 2, 4, 5])\n    1\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return l[0]\n    \ndef maximum(l: list):\n    \"\"\"Return the maximum element of list l.\n    >>> maximum([3, 1, 2, 4, 5])\n    4\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return l[0]\n    \ndef count_unique(l: list):\n    \"\"\"Count number of distinct elements in list l.\n    >>> count_unique([3, 1, 2, 4, 5])\n    3\n    >>> count_unique([3, 1, 2, 4, 5, 6])\n    4\n    \"\"\"\n    if len(l) == 1:\n        return 1\n    return sum([1 for i in l if l.count(i) == 1])\n    \ndef sum_divisible(l: list):\n    \"\"\"Return number of divisible values in list l.\n    >>> sum_divisible([3, 1, 2, 4, 5])\n    3\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return sum([i for i in l if l.count(i) % 2 == 0])\n    \ndef sum_divisible_and_not_divisible(l: list):\n    \"\"\"Return sum of all numbers in list l.\n    >>> sum_divisible_and_not_divisible([3, 1, 2, 4, 5])\n    6\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return sum([i for i in l if i % 2 == 0])\n    \ndef average(l: list):\n    \"\"\"Return average of list l.\n    >>> average([3, 1, 2, 4, 5])\n    2.5\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return sum(l) / len(l)\n    \ndef sum_square_of_squares(l: list):\n    \"\"\"Return sum of squares of squares in list l.\n    >>> sum_square_of_squares([3, 1, 2, 4, 5])\n    24\n    \"\"\"\n    return sum([i * i for i in l])\n    \ndef square_root_of_sum_of_squares(l: list):\n    \"\"\"Return square root of sum of squares of squares in list l.\n    >>> square_root_of_sum_of_squares([3, 1, 2, 4, 5])\n    2.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return (l[0] ** 0.5) ** 0.5\n    \ndef maximum_odd(l: list):\n    \"\"\"Return the largest element of list l that is not a multiple of 2.\n    >>> maximum_odd([3, 1, 2, 4, 5])\n    5\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            return l[i]\n    return None\n    \ndef minimum_even(l: list):\n    \"\"\"Return the smallest element of list l that is not a multiple of 2.\n    >>> minimum_even([3, 1, 2, 4, 5])\n    1\n    \"\"\"\n    fo"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Concatenate all characters from 1 to n to form the original string\n    # Remove all remaining characters from the original string\n    # Compare original and reverse of the reversed string\n    # Return True if all characters are equal, False otherwise\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: Your code here\n    return True if text==text[::-1] else Fals"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Basic check if the text is a palindrome\n    if len(text) <= 1:\n        return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    text = text.lower()\n    text = text.replace('a', 'b')\n    text = text.replace('z', 'y')\n    text = text.replace('b', 'a')\n    text = text.replace('c', 'd')\n    text = text.replace('d', 'c')\n    text = text.replace('z', 'y')\n    text = text.replace('y', 'z')\n    text = text.replace('d', 'e')\n    text = text.replace('e', 'd')\n    text = text.replace('z', 'x')\n    text = text.replace('x', 'z')\n    text = text.replace('y', 'b')\n    text = text.replace('b', 'y')\n    text = text.replace('e', 'a')\n    text = text.replace('a', 'e')\n    text = text.replace('t', 'e')\n    text = text.replace('x', 'a')\n    text = text.replace('a', 'x')\n    text = text.replace('t', 'x')\n    text = text.replace('y', 'e')\n    text = text.replace('e', 'y')\n    text = text.replace('t', 'x')\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'z')\n    text = text.replace('t', 'e')\n    text = text.replace('z', 'a')\n    text = text.replace('z', 't')\n    text = text.replace('x', 'a')\n    text = text.replace('a', 'x')\n    text = text.replace('a', 'e')\n    text = text.replace('x', 'a')\n    text = text.replace('y', 'z')\n    text = text.replace('z', 'x')\n    text = text.replace('y', 'z')\n    text = text.replace('y', 'z')\n    text = text.replace('x', 'b')\n    text = text.replace('b', 'x')\n    text = text.replace('y', 'y')\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'y')\n    text = text.replace('t', 'a')\n    text = text.replace('y', 'y')\n    text = text.replace('y', 'y')\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'z')\n    text = text.replace('y', 'y')\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'z')\n    text = text.replace('b', 'a')\n    text = text.replace('a', 'b')\n    text = text.replace('y', 'z')\n    text = text.replace('z', 'y')\n    text = text.replace('b', 'y')\n    text = text.replace('x', 'a')\n    text = text.replace('a', 'x')\n    text = text.replace('a', 'e')\n    text = text.replace('x', 'y')\n    text = text.replace('x', 'z')\n    text = text.replace('y', 'z')\n    text = text.replace('y', 'z')\n    text = text.replace('a', 'x')\n    text = text.replace('y', 'z')\n    text = text.replace('x', 'a')\n    text = text.replace('y', 'z')\n    text = text.replace('z', 'y')\n    text = text.replace('x', 'z')\n    text = text.replace('x', 'a')\n    text = text.replace('x', 'e')\n    text = text.replace('x', 'y')\n    text = text.replace('y', 'z')\n    text = text.replace('a', 'z')\n    text = text.replace('y', 'z')\n    text = text.replace('a', 'a')\n    text = text.replace('z', 'x')\n    text = text.replace('x', 'z')\n    text = text.replace('z', 'z')\n    text = text.replace('x', 'z')\n    text = text.replace('y', 'a')\n    tex"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    text = list(text)\n    text.sort()\n    if text == text[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Start with a string of all zeros and keep track of index of last non zero\n    index = -1\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    text = text.replace(' ', '').lower()\n    for i in range(len(text)//2):\n        if text[i]!= text[-(i+1)]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    str_list = list(text)\n    str_list.sort()\n    str_list = list(str_list)\n    return str_list == str_list[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.lower()\n    return text[::-1] == text\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    m = 10**(n - 1)\n    if n > 2:\n        m = m * (m - 1)\n    if n == 2:\n        return m\n    return modp(n - 2, m) * m * m\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    while n!= 0:\n        if n & 1 == 1:\n            n = n >> 1\n        else:\n            n = n >> 1\n    if n == 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 1\n    return (n % p) * modp(n // p, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % p == 0:\n        return n // p\n    return modp(n - 2, p) + 2\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (n % p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Range: n/2 and n/2\n    # Confirm divisibility by two.\n    #\n    # [o] I suppose this would be just a p-loop, but we'll let it go.\n    # [o] I'm assuming the return value for each modular exponent is the same\n    # [o] It's not quite right, it's the correct answer.\n    #\n    # [o] An odd- and even-valued bit is a modulo (not a power). It's a special case.\n    # [o] If we don't know the number of bits, this number is still a power.\n    # [o] We're not actually gonna have a large number of modulo-bits.\n    # [o] Our assumption is this is a modulo, so we'll have a bit error.\n    #\n    # Note, we're only modifying the remainder of the modulo.\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return math.pow(n, p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    res = n\n    while (n!= 0):\n        res = (res % p) * (p-res)\n        n = (n - 1)\n    return res\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return pow(n, p, p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Write your code here.\n    return pow(n, p, n)\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return s.replace(\"\\\\\", \"\")"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + 26) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 26 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i].lower() not in vowels:\n            new_text += text[i]\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    vowels = \"aeiouAEIOU\"\n    return text.translate(str.maketrans(vowels, '','')"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.lower()\n    for i in text:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            text = text.replace(i, '')\n    return tex"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # start off by making an empty string\n    vowels = ''\n    # go through each character in the string\n    for char in text:\n        if char.lower() in vowels:\n            # if the character is a vowel, remove it from the vowels string\n            vowels = vowels[:vowels.index(char)] + char + vowels[vowels.index(char)+1:]\n        else:\n            # otherwise, keep it\n            vowels = vowels + char\n    # return the new string\n    return vowels"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if text == '':\n        return ''\n    for i in range(len(text)):\n        if text[i].lower() not in 'aeiou':\n            continue\n        text = text.replace(text[i], '')\n    return tex"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # return string without vowels\n    result = []\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \"\".join([i if i not in \"aeiouAEIOU\" else '' for i in text.lower()])\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join(ch for ch in text if ch not in vowels)"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    text = text.lower()\n    text = text.replace(' ','')\n    return text[0:-len(vowels)]\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = set('aeiouAEIOU')\n    result = []\n    for word in text:\n        for letter in word:\n            if letter not in vowels:\n                result.append(letter)\n    return ''.join(result)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        if l[i] < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return all(x <= t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return all(x<t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(n <= t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return all(number < t for number in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sum([1 for x in l if x < t]) >= len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return False\n    else:\n        for i in l:\n            if i < t:\n                return False\n        return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if t > sum(l) or t <= 0:\n        return False\n    if t == 0:\n        return True\n    for i in range(1, len(l)):\n        if l[i] < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return x + "
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s0 == s1 and s0.isalpha() == s1.isalpha()\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    chars = 'abcdefghijklmnopqrstuvwxyz'\n    return any(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return set(s0).issubset(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return set(s0).issubset(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert len(s0) == len(s1)\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    elif all(char == s0[i] for i, char in enumerate(s1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return s0 == s1.lower()\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in s0:\n        if i!= s1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    for _ in range(3):\n        a, b = b, a+b\n    return a"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef shuffle(lst: list):\n    \"\"\"Return a new list with each element of the original in random order.\n    >>> shuffle([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    ['b', 'a', 'f', 'e', 'd', 'c']\n    \"\"\"\n    shuffle_list = []\n    for i in lst:\n        random.shuffle(lst)\n        shuffle_list.append(lst.pop())\n    return shuffle_list\n    \ndef shuffle_str(lst: list):\n    \"\"\"Return a string with each element of the original in random order.\n    >>> shuffle_str([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    'eafc'\n    \"\"\"\n    shuffle_string = \"\"\n    for i in lst:\n        shuffle_string += i\n    return shuffle_string\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a, b = 1, 0\n    while a <= n:\n        print(a, end=' ')\n        a, b = b, a + b\n    print('\\nDone')"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    a = 0\n    b = 1\n    while True:\n        yield a\n        a, b = b, a+b\n        if a >= n:\n            break\n    \ndef fib2(n: int):\n    \"\"\"Return the Fibonacci series of first n terms.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    fib_list = [1,1]\n    n = n-1\n    for _ in range(n):\n        a = fib_list[0]+fib_list[1]\n        fib_list.append(a)\n    return fib_list\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert n >= 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n    \ndef factorial(n: int) -> int:\n    \"\"\"Return n-th factorial of n.\n    >>> factorial(5)\n    120\n    >>> factorial(7)\n    63\n    \"\"\"\n    assert n >= 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return n * factorial(n-1)\n    \ndef factorial2(n: int) -> int:\n    \"\"\"Return 2n-th factorial of n.\n    >>> factorial2(5)\n    120\n    >>> factorial2(7)\n    63\n    \"\"\"\n    assert n >= 0\n    if n == 1:\n        return 1\n    return n * factorial2(n-1)\n    \ndef even_factorial(n: int) -> int:\n    \"\"\"Return n-th factorial of n, excluding n.\n    >>> factorial(5)\n    120\n    >>> factorial(7)\n    63\n    >>> factorial(1)\n    1\n    \"\"\"\n    assert n >= 0\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n    \ndef lucas_function(n: int) -> int:\n    \"\"\"Return n-th Lucas function of n.\n    >>> lucas_function(5)\n    27\n    >>> lucas_function(7)\n    62\n    \"\"\"\n    assert n >= 1\n    if n == 1:\n        return 1\n    return lucas_function(n-1) + lucas_function(n-2)\n    \ndef lucas_function2(n: int) -> int:\n    \"\"\"Return n-th Lucas function of n, excluding n.\n    >>> lucas_function2(5)\n    27\n    >>> lucas_function2(7)\n    62\n    \"\"\"\n    assert n >= 1\n    if n == 1:\n        return 1\n    return lucas_function2(n-1) + lucas_function2(n-2)\n    \ndef lucas_function3(n: int) -> int:\n    \"\"\"Return n-th Lucas function of n, excluding n.\n    >>> lucas_function3(5)\n    27\n    >>> lucas_function3(7)\n    62\n    \"\"\"\n    assert n >= 1\n    if n == 1:\n        return 1\n    return lucas_function3(n-1) + lucas_function3(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    a, b = 1, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return all(len(a) == 1 or a[0] == \"(\" for a in brackets)\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    open_brackets = ['<','>','[',']']\n    bracket = ['(',')','{','}']\n    \n    for i in brackets:\n        if i in open_brackets:\n            open_bracket = open_brackets.index(i)\n            if bracket[open_bracket]!= i:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if \"(\" not in brackets:\n        return True\n    else:\n        stack = []\n        for bracket in brackets:\n            if bracket == \"(\":\n                stack.append(bracket)\n            else:\n                if bracket == \")\":\n                    if len(stack) == 0:\n                        return False\n                    else:\n                        stack.pop()\n                else:\n                    return False\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for c in brackets:\n        if c!= '<' and c!= '>' and c!= '<>':\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # Return false if brackets not all have a matching closing bracket.\n    if len(brackets)!= len(set(brackets)):\n        return False\n    \n    #  convert each bracket to a set, and then compare the brackets in order\n    #  to the set of possible closing brackets.\n    \n    brackets = [set(i) for i in brackets.split(\"<\")]\n    return all([True if i.issubset(brackets) for i in brackets])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if brackets == \"<>\":\n        return False\n    else:\n        for i in brackets:\n            if i == \"<\":\n                if brackets[:3] == \"<\":\n                    return True\n            if i == \">\":\n                if brackets[:3] == \">\":\n                    return True\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    brackets = list(brackets)\n    for bracket in brackets:\n        if bracket not in [\"<\", \">\"]:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for bracket in brackets:\n        if bracket == \"<\":\n            # check for closing bracket\n            return False\n        if bracket == \">\":\n            # check for opening bracket\n            return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return all(\n        bracket == \">\" or bracket == \"<\" for bracket in brackets\n    )\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if brackets[0]!= \"<\" and brackets[-1]!= \">\":\n        return False\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            if brackets[i+1]!= \">\":\n                return False\n        if brackets[i] == \">\":\n            if brackets[i-1]!= \"<\":\n                return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not l:\n        return False\n    if l[0] <= l[1]:\n        return True\n    for i in range(1, len(l)):\n        if l[i] <= l[i - 1]:\n            return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = set(l)\n    return any(l[i] > l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Try different set of pre-defined sets\n    if len(l) == 1:\n        return True\n    if l[-1] < l[0]:\n        return False\n    # We add an extra element so that we can track the order of the elements\n    # which may or may not be monotonically increasing\n    for i in range(1, len(l)):\n        if l[i - 1] <= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(l) < 2:\n        return False\n    else:\n        if l[0] > l[1]:\n            return False\n        else:\n            if l[0] < l[-1]:\n                return True\n            else:\n                for i in range(len(l)-1):\n                    if l[i] > l[i+1]:\n                        return False\n                return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if l is None:\n        l = []\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return False\n    if l[0] < l[1]:\n        return True\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (l[i] >= l[i+1] for i in range(len(l)-1)) or (l[i] <= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Iterate over the array and see if any two elements are monotonically\n    # increasing or decreasing and return True.\n    for i in l:\n        if i >= 0 and i < len(l):\n            if l[i] < l[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if l == []:\n        return True\n    if l[0] < l[1]:\n        return l[0] > l[1]\n    if l[0] > l[1]:\n        return False\n    for x in l[1:]:\n        if x > l[0]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    for i in range(n):\n        if l[i] <= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    return [l1[i] for i in range(len(l1)) if l1[i] in l2]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Notations:\n    #     l1: list of elements\n    #     l2: list of elements\n    #\n    # l1:\n    #     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    #     [5, 7, 9, 2, 3, 0, 1]\n    #\n    # l2:\n    #     [3, 2]\n    #\n    # return:\n    #     [3, 2]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    s = []\n    for i in l1:\n        if i in l2:\n            s.append(i)\n    return s\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = []\n    intersection = []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    l1 = sorted(l1)\n    l2 = sorted(l2)\n    common = []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                l.append(i)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [el for el in l1 if el in l2]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n < 1: return 0\n    i = 2\n    prime_factor = 2\n    while i < n:\n        if n % i == 0:\n            prime_factor = i\n            n = n // i\n        else:\n            i = i + 1\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        while n % i == 0:\n            n /= i\n    return n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    prime_factor = 0\n    while n % 2 == 0:\n        prime_factor += 1\n        n //= 2\n    \n    for factor in range(3, int(math.sqrt(n))+1, 2):\n        while n % factor == 0:\n            prime_factor += 1\n            n //= factor\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def factors(n):\n        \"\"\"Find the factors of a number n and return a list of 2-tuples (n, d)\n        such that d divides n.\"\"\"\n        factors = []\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                factors.append((i, int(n / i)))\n        return factors\n    m = list(factors(n))\n    while m[-1][1]!= 1:\n        m.pop()\n    return m[-1][0]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    for i in range(2, n):\n        while n % i == 0:\n            n = n / i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(2,n):\n        while n%i==0:\n            n//=i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lg_prime = []\n    i = 2\n    while i <= n:\n        if is_prime(i):\n            lg_prime.append(i)\n        i += 1\n    return max(lg_prime)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    while (n % 2 == 0):\n        n = n / 2\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # If n is odd, return n/2\n    # If n is even, return 1\n    prime_factors = [2]\n    while n > 1:\n        if n % prime_factors[-1] == 0:\n            prime_factors.append(prime_factors[-1] * 2)\n            n = n / prime_factors[-1]\n        else:\n            prime_factors.append(prime_factors[-1] + 1)\n            n = n / prime_factors[-1]\n    return prime_factors[-1]\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = n - 1\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum([i for i in range(1, n + 1)])\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum(range(1, n + 1)"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n==1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    while n >= 1:\n        result += n\n        n -= 1\n    return result\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    assert n >= 1, f\"{n} is a negative value\"\n    return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return 0 if n == 0 else n * sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return n+1\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    return sum(range(1, n + 1)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # check each opening bracket\n    for bracket in brackets:\n        if bracket == '(':\n            # check each closing bracket\n            for opening_bracket in brackets:\n                if opening_bracket == bracket:\n                    return False\n        else:\n            return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            if brackets[i-1] == \")\":\n                return False\n        else:\n            if brackets[i] == \")\":\n                return False\n    return True\n    \n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    ans = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            ans.append(i)\n        if brackets[i] == ')':\n            if len(ans) > 0:\n                if ans[-1] == i:\n                    ans.pop()\n            else:\n                return False\n    if len(ans)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            if brackets[i-1] == ')':\n                return False\n            elif brackets[i-1] == '(':\n                return False\n            elif brackets[i-1] == ')':\n                return False\n            else:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if not top == \"(\":\n                return False\n    if stack:\n        return False\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    open_bracket = {\"(\": \")\", \")\": \"(\", \"}\": \"{\", \"}\": \"{\"}\n    count = 0\n    for bracket in brackets:\n        if bracket in open_bracket:\n            count += 1\n        else:\n            if count == 0:\n                return False\n            if count == 1:\n                open_bracket.pop(open_bracket.index(bracket))\n            count = 0\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    brackets_split = brackets.split()\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return all(brackets[i] == brackets[i+1] for i in range(len(brackets)-1))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # bracket_list = []\n    # for bracket in brackets:\n    #     if bracket == \"(\":\n    #         bracket_list.append(bracket)\n    #     elif bracket == \")\":\n    #         if bracket_list:\n    #             if bracket_list[-1] == \"(\":\n    #                 bracket_list.pop()\n    #             else:\n    #                 return False\n    #         else:\n    #             return False\n    # return True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    bracket_set = {\")\",\"}\",\")\",\"}\"]\n    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_set:\n            if bracket in bracket_stack:\n                bracket_stack.pop()\n            else:\n                bracket_stack.append(bracket)\n        else:\n            bracket_stack.append(bracket)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(map(lambda x: x[1] * x[2], reversed(xs)))\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # variable to store result\n    result = []\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # each input parameter is a coefficient.\n    # return [a, b] of that coefficient.\n    # e.g. 3x^2 + 6x + 10 = 12\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 50\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 240\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 900\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1000\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 1900\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2000\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2100\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2200\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2300\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2400\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2500\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2600\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2700\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2800\n    #       3x + 2x^2 + 4x + 4x^3 + 5x^4 + 10x + 20 = 2900\n    #       3x + 2x^2 + 4x + 4x"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    for n in range(0, len(xs), 2):\n        res.append(xs[n+1] - xs[n])\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if xs[0] == xs[1] == xs[2] == 0:\n        return [0, 0, 0]\n    else:\n        return [2 * xs[0], 2 * xs[1], 2 * xs[2]]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [x + xs[1] * x for x in xs[2:]]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    x_hat = xs[0]\n    for i in range(1, len(xs)):\n        x_hat = x_hat * xs[i]\n    return x_hat\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return xs[1:]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return xs[1:]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return [xs[i] * x for i, x in enumerate(xs[1:])]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def fibfib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 0\n        else:\n            return fibfib(n-1) + fibfib(n-2)\n    return fibfib(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n <= 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert(isinstance(n, int))\n    n1 = 0\n    n2 = 1\n    if(n <= 0):\n        return 0\n    for i in range(1,n):\n        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n    return n2\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n <= 1:\n        return 0\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = 0\n    for i in s:\n        if i in 'AEIOUaeiou':\n            l += 1\n    return l\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiouy':\n            count = count + 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sum([1 for word in s if word in \"aeiou\"])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(1 for c in s if c in \"aeiou\")\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(s)!= str:\n        raise TypeError(f\"{s} is not a string\")\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a=0\n    for i in range(len(s)):\n        for j in s[i:]:\n            if j=='y':\n                a=a+1\n    return a\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    word = s.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = 'AEIOU'\n    # count each vowel\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return str(int(x) + shift % len(x))"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    i, n = 0, len(x)\n    shift = shift % n\n    return ''.join(x[i: i + n - shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return \"\".join([str(int(x) + shift) for x in list(str(x))])"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    output = \"\"\n    while shift:\n        output = output + str(int(x % 10) * 10)\n        shift = shift - 1\n        x = int(x / 10)\n    return output[::-1]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    shift %= len(x)\n    if shift:\n        return str(int(x) + shift)\n    else:\n        return str(int(x) - shift)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    s = \"\"\n    while shift > 0:\n        s = str(x % 10) + s\n        x = int(x // 10)\n        shift -= 1\n    return s\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if shift == 1:\n        return x\n    elif shift == 2:\n        return str(x)[::-1]\n    elif shift > len(str(x)):\n        return str(x)[shift-1::-1]\n    else:\n        return str(x)[shift-1::-1]\n    \ndef digit_convert(x):\n    \"\"\"Convert integer x to string of digits. If x is not a valid integer, return None.\n    >>> digit_convert(121)\n    '1'\n    >>> digit_convert(1)\n    '1'\n    >>> digit_convert(11)\n    '1111'\n    \"\"\"\n    if isinstance(x, int):\n        return str(x)\n    else:\n        return None\n        \ndef find_missing_digits(x):\n    \"\"\"Find the number of missing digits in the integer x.\n    >>> find_missing_digits(1)\n    0\n    >>> find_missing_digits(10000)\n    2\n    \"\"\"\n    if isinstance(x, int):\n        return abs(x)\n    else:\n        return abs(x) - len(str(x))\n    \ndef find_prime_factors(x):\n    \"\"\"Find all prime numbers less than or equal to x.\n    >>> find_prime_factors(2)\n    [2]\n    >>> find_prime_factors(3)\n    [3, 2]\n    >>> find_prime_factors(8)\n    [2, 3, 5, 8]\n    \"\"\"\n    f = []\n    for num in range(2, x):\n        if is_prime(num):\n            f.append(num)\n    return f\n    \ndef find_divisors(x):\n    \"\"\"Find all divisors of x.\n    >>> find_divisors(6)\n    [1, 2, 3, 4, 5]\n    >>> find_divisors(12)\n    [1, 2, 3, 4, 6, 12]\n    \"\"\"\n    i = 2\n    divisors = []\n    while i <= x:\n        if x % i == 0:\n            divisors.append(i)\n            x //= i\n        else:\n            i += 1\n    if x!= 1:\n        divisors.append(x)\n    return divisors\n    \ndef num_to_words(n):\n    \"\"\"Number to words.\n    >>> num_to_words(42)\n    'One Two Three Four'.\n    \"\"\"\n    s = ''\n    while n > 0:\n        s +='' + str(n % 10)\n        n = n // 10\n    return s.strip()\n    \ndef words_to_num(s):\n    \"\"\"Words to numbers.\n    >>> words_to_num('One Two Three Four')\n    42\n    \"\"\"\n    n = 0\n    for word in s.split():\n        n += len(word) * (len(word) + 1) // 2\n    return n\n    \ndef is_prime(x):\n    \"\"\"Test if x is prime.\n    >>> is_prime(5)\n    True\n    >>> is_prime(0)\n    True\n    \"\"\"\n    if x == 2 or x == 3 or x == 5:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \ndef is_prime_factor(x):\n    \"\"\"Test if x is prime factor.\n    >>> is_prime_factor(2)\n    True\n    >>> is_prime_factor(3)\n    False\n    >>> is_prime_factor(16)\n    True\n    \"\"\"\n    if x <= 3:\n        return False\n    if x % 2 == 0:\n        return is_prime_factor(x//2)\n    for i in range(3, int(x**0.5)+1, 2):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = len(x)\n    if l <= shift:\n        shift = l\n    shift = shift % l\n    return ''.join(x[i] for i in range(shift,l-shift))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if shift > len(x):\n        return str(x)\n    shift = -shift\n    if shift == 0:\n        return x[::-1]\n    if shift < 0:\n        return str(x)[::-1]\n    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    r = 0\n    if shift > len(str(x)):\n        shift = len(str(x))\n    for i in range(len(str(x))-shift):\n        r = r * 10 + int(str(x)[i])\n    return str(r)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = str(s)\n    return int(s.upper()) + int(s.upper().replace('a', '').replace('b', '').replace('c', '').replace('d', '').replace('e', '').replace('f', '').replace('g', '').replace('h', '').replace('i', '').replace('j', '').replace('k', '').replace('l', '').replace('m', '').replace('n', '').replace('o', '').replace('p', '').replace('q', '').replace('r', '').replace('s', '').replace('t', '').replace('u', '').replace('v', '').replace('w', '').replace('x', '').replace('y', '').replace('z', '').replace('0', '').replace('1', '').replace('2', '').replace('3', '').replace('4', '').replace('5', '').replace('6', '').replace('7', '').replace('8', '').replace('9', '').replace('a', ''))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sum(ord(x) - ord('A') for x in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sum(ord(c) for c in s if ord(c)>=33 and ord(c)<=127)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    digits = [x for x in s]\n    ans = 0\n    for i in range(len(digits)):\n        ans += ord(digits[i]) - 96\n    return ans"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    return sum([int(i) for i in s.upper() if i.isalpha()])\n    \n    # use: print([int(i) for i in s.upper() if i.isalpha()])\n    "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(ord(x) for x in s if ord(x) <= 127)\n    \ndef main():\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    digits = []\n    for i in s:\n        digits.append(ord(i))\n    return sum(digits)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO\n    return sum([ord(ch) for ch in s])\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum(ord(char) for char in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    global fruits_apples\n    global fruits_oranges\n    global mango_fruits\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \"\"\"\n    1. You will write your code using only one line of Python.\n    2. In the beginning, you are given an integer n representing the number of apples and oranges \n    that are distributed in a basket of fruits. You are then given a string that represents the \n    total number of apples and oranges that are distributed in a basket of fruit \n    this basket contains. \n    3. In this task, you will be given an integer that represents the number of apples and oranges \n    that are distributed in a basket of fruit this basket contains. You are then given a string that \n    represents the total number of the fruits in the basket.\n    4. You will use a for loop to iterate over the basket of fruits. \n    5. In each iteration, you will be given a string that represents the number of apples and oranges that are \n    distributed in a basket of fruit this basket contains. You are then given a string that represents the \n    total number of the fruits in the basket.\n    \"\"\"\n    fruits_count = [0,0,0]\n    for fruit in s:\n        fruits_count[0] += fruit\n        fruits_count[1] += fruits_count[0] - fruits_count[1]\n        fruits_count[2] += fruits_count[0] - fruits_count[2]\n        # print(fruits_count)\n        # fruit_count = fruits_count[:2]\n    return fruits_count[2]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    fruit_num = int(s[1:])\n    mango_num = int(s[0])\n    return (fruit_num-mango_num)*(n-1)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (int(s.replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"3\",\"3\").replace(\"4\",\"4\").replace(\"5\",\"5\").replace(\"6\",\"6\")))\ndef num_fruits_in_basket(s,n):\n    \"\"\"\n    Given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this task will be given a \n    string that represents the total number of the oranges and apples \n    and an integer that represent the total number of the fruits in the \n    basket.\n    for examble:\n    num_fruits_in_basket(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    num_fruits_in_basket(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    num_fruits_in_basket(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    num_fruits_in_basket(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return (int(s.replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"3\",\"3\").replace(\"4\",\"4\").replace(\"5\",\"5\").replace(\"6\",\"6\")))\ndef sum_of_fruits(s,n):\n    \"\"\"\n    Given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this task will be given a \n    string that represents the total number of the oranges and apples \n    and an integer that represent the total number of the fruits in the \n    basket.\n    for examble:\n    sum_of_fruits(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    sum_of_fruits(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    sum_of_fruits(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    sum_of_fruits(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return (int(s.replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"3\",\"3\").replace(\"4\",\"4\").replace(\"5\",\"5\").replace(\"6\",\"6\")))\ndef count_all_numbers_in_basket(s,n):\n    \"\"\"\n    Given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this task will be given a \n    string that represents the total number of the oranges and apples \n    and an integer that represent the total number of the fruits in the \n    basket.\n    for examble:\n    count_all_numbers_in_basket(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    count_all_numbers_in_basket(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    count_all_numbers_in_basket(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    count_all_numbers_in_basket(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return (int(s.replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"3\",\"3\").replace(\"4\",\"4\").replace(\"5\",\"5\").replace(\"6\",\"6\")))\ndef reverse_string(s):\n    \"\"\"\n    Given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this task will be given a \n    string that represents the total number of the oranges and apples \n    and an integer that represent the total number of the fruits in the \n    basket.\n    for examble:\n    reverse_string(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    reverse_string(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    reverse_string(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    reverse_string(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    return (s.replace(\"0\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"3\",\"3\").replace(\"4\","
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # FIRST - PARENTHESIS\n    if s == \"0\":\n        return 0\n    elif s[0] == \"1\":\n        return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n)\n    # SECOND - OPERAND\n    elif s[0] == \"2\":\n        return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n)\n    else:\n        # FIRST - CHECK IF POSITION IS CORRECT\n        if s[0] == \"1\":\n            # FIRST - CHECK IF POSITION IS CORRECT\n            if s[1] == \"1\":\n                return fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n)\n            elif s[2] == \"1\":\n                return fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n)\n        elif s[0] == \"2\":\n            # FIRST - CHECK IF POSITION IS CORRECT\n            if s[1] == \"1\":\n                return fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n)\n            elif s[2] == \"1\":\n                return fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n) + fruit_distribution(s[6:],n) + fruit_distribution(s[7:],n)\n        else:\n            return fruit_distribution(s[1:],n) + fruit_distribution(s[2:],n) + fruit_distribution(s[3:],n) + fruit_distribution(s[4:],n) + fruit_distribution(s[5:],n) + fruit_distribution(s[6:],n) + fruit_distribution(s[7:],n) + fruit_distribution(s[8:],n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fruits = [\"apple\", \"orange\", \"mango\"]\n    total_fruits = len(fruits)\n    \n    apples = fruit_count(s, \"apple\")\n    oranges = fruit_count(s, \"orange\")\n    mango = fruit_count(s, \"mango\")\n    \n    return total_fruits - (apples + oranges + mango)\n    \n    \n    \ndef fruit_count(s, fruit):\n    \"\"\"\n    Given a string s and a fruit, return the number of \n    the fruits in the string. \n    For example, \"mango\" is the fruit of the string. \n    You may assume that fruit is a valid fruit in the string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char == fruit:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # You will need to fill in the blanks in the function below.\n    # In the blank spaces, there will be only two items in the basket.\n    # Create a list to store all the fruit categories.\n    l = [\"apples\",\"oranges\",\"mango\"]\n    # Create a list of the number of apples, oranges, and mango fruits in the basket.\n    x = [s.count(e) for e in l]\n    # In order to get the number of fruits in the basket, we need to know which fruit category is in the basket.\n    # If there are multiple categories, choose the one with the smallest number of fruits.\n    # Otherwise, choose the one with the largest number of fruits.\n    # We only need to store the number of fruits in the basket and not the category.\n    return min(x)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(n):\n        if(s[i] == \"1\"):\n            total += 1\n    return tota"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    fruit_n = n\n    for i in range(0,fruit_n):\n        fruit_d = int(s.replace(\"apples\",\"\").replace(\"oranges\",\"\").replace(\"mango\",\"\").replace(\"fruits\",\"\").replace(\" \",\"\"))\n        fruit_d = fruit_d-fruit_d\n        print(fruit_d)\n    return fruit_d\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            res = res + s[i]\n        else:\n            res = res + (n - int(s[i]))\n    return res\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr)\n    idx = 0\n    for i in range(1,len(arr)):\n        if arr[i] % 2 == 0:\n            result.append(arr[idx])\n            idx += 1\n        else:\n            result.append(arr[i])\n    return result\n    "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr)\n    res = []\n    for i, val in enumerate(arr):\n        if i % 2 == 0:\n            res.append(val)\n    return res\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def even_index(val):\n        index = 0\n        while val % 2 == 0:\n            val //= 2\n            index += 1\n        return index\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    size = len(arr)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    nodes = []\n    for i,v in enumerate(arr):\n        if v%2==0:\n            nodes.append(v)\n        else:\n            nodes.append(None)\n    return nodes\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    # get the smallest even value\n    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            smalest_value = arr[i]\n            smalest_index = i\n            break\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    import heapq\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [ arr[0], sorted(arr, key = lambda x : (x//2) % 2)[0] ]\n    \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    smallest_value = sys.maxsize\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            smallest_value = min(arr[i], smallest_value)\n            index = i\n        else:\n            if arr[i] % 2 == 1:\n                index = i\n    return arr[index], index\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # if lst == []:\n    #     return -1\n    # else:\n    #     return max(lst)\n    # The search method was optimized for O(n) time.\n    #     lst.sort(reverse=True)\n    #     for i in range(len(lst)):\n    #         if lst[i] == 0:\n    #             return -1\n    #         elif lst[i] > 0:\n    #             return lst[i]\n    #     return -1\n    #     \n    # This is not the most efficient way to accomplish it.\n    #     # You can go through the sorted list,\n    #     # and check if the current number is greater than the next,\n    #     # If so, return it, else, return -1\n    #     # We can do this in O(n) time, but it is not too efficient.\n    #     lst.sort(reverse=True)\n    #     if lst[0] == 0:\n    #         return -1\n    #     for i in range(len(lst)-1):\n    #         if lst[i] == 0 and lst[i+1] == 0:\n    #             return lst[i]\n    #         elif lst[i] > 0 and lst[i+1] > 0:\n    #             return lst[i]\n    #     return -1\n    #     \n    #     return max(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    freq_lst = [0] * len(lst)\n    for num in lst:\n        freq_lst[num-1] += 1\n    freq_max = max(freq_lst)\n    freq_lst = [0] * len(lst)\n    for num in lst:\n        freq_lst[num-1] = freq_lst[num-1] + (freq_max-num)\n    \n    for num in freq_lst:\n        if num == 0:\n            return -1\n    return max(freq_lst)\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst.sort()\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] > lst[j] and lst[i] - lst[j] > 0:\n                return lst[i]\n            j += 1\n        i += 1\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # time = O(n)\n    # space = O(n)\n    \n    val = sorted(lst)[-1]\n    \n    for i in range(len(lst)-1):\n        if lst[i] == val:\n            val = lst[i+1]\n            \n    return val\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #print(lst)\n    num = []\n    for i in range(len(lst)):\n        num.append(lst[i])\n    print(num)\n    def greatest(num):\n        print(num)\n        if num > 0:\n            greatest = num\n            print(greatest)\n            return greatest\n    print(greatest(num))\n    \n    if greatest(num) == -1:\n        return greatest(num)\n    else:\n        return greatest(num)[0]\n    \n    \n    #return max(lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    p = 0\n    for i in lst:\n        if p < i:\n            p = i\n    return p\n    \ndef sum_digits(x):\n    '''\n    A non-empty list of non-negative integers consists of the digits of x.\n    Return the sum of the digits.\n    '''\n    return sum([int(i) for i in str(x)])\n    \ndef prime_factorization(n):\n    '''\n    Given a non-negative integer n, return a list of prime factors of n.\n    If there are no factors, return an empty list.\n    For example:\n        prime_factorization(10) == [1, 2, 5]\n        prime_factorization(11) == [1, 11]\n        prime_factorization(13) == [1, 13, 7]\n    '''\n    import math\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, n // 2]\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return [i, n // i]\n    return [n]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    n = len(lst)\n    lst.sort()\n    for i in range(n):\n        if lst[i] > 0:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list_of_nums = []\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    strange_list = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    new_lst = sorted(lst, key=lambda x: x)\n    for i in range(len(new_lst)):\n        new_lst[i] = new_lst[i] + new_lst[i+1]\n    new_lst.sort()\n    return new_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0 and i > 1] + [lst[i] for i in range(len(lst)) if i % 2!= 0 and i > 0]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for el in lst:\n        if el > lst[0]:\n            lst.append(el)\n            break\n        elif el < lst[len(lst) - 1]:\n            lst.insert(0, el)\n            break\n        else:\n            continue\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [x for x in sorted(lst)]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    min_value = min(lst)\n    max_value = max(lst)\n    res = []\n    for i in lst:\n        if i < min_value:\n            min_value = i\n            res.append(min_value)\n        elif i > max_value:\n            max_value = i\n            res.append(max_value)\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # convert to list\n    lst = list(lst)\n    # sort\n    lst.sort()\n    # return\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sorted(lst, reverse=True)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst.sort()\n    lst = sorted(lst)\n    return lst\n    \ndef average_list(lst):\n    '''\n    Given a list of integers, return the average of the elements.\n    Average of a list is the sum of the numbers divided by the number of elements.\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    lst_copy = lst.copy()\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] < lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return round(abs(a * b * c - (a + b + c) ** 2), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # loop through the triangle and sum the values\n    sum = a + b + c\n    # check if sum is divisible by the length of the sides\n    if(sum % 2 == 0):\n        # return the area of the triangle\n        return sum / 2\n    else:\n        # return the area of the triangle when the sum of the two sides is not divisible\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #Add your code here\n    if a+b > c and a+c > b and b+c > a:\n        if a == b and a == c:\n            return 0.0\n        elif a == c and a == b:\n            return 0.0\n        elif a == b and a == c:\n            return a*b*c\n        elif a == c and a == b:\n            return a*b*c\n        elif a == b and a == c:\n            return -1.0\n        else:\n            return a*b*c\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    #validate triangle\n    if a < b or a > c or b > c:\n        return -1\n    if a == b and a!= c:\n        return (b * c) / 2.0\n    #for example, if all 3 sides are equal (4, 4, 5)\n    #then return the square of the sum of all 3 sides\n    elif (a == c and b!= c) or (b == c and a!= c):\n        return (b * c) / 2.0\n    else:\n        return (a * b) / 2.0\n    \ndef area_of_square(side):\n    '''\n    Given a side of a rectangle, return its area.\n    Example:\n    area_of_square(5) == 25.0\n    area_of_square(10) == 65.0\n    '''\n    #validate area\n    if side < 5 or side > 10:\n        return -1\n    return side ** 2\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if is_valid_triangle(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            return round((a * b) / 2, 2)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if (a, b, c) == (0, 0, 0):\n        return 0.00\n    elif (a, b, c) == (0, 0, 1):\n        return 0.00\n    elif (a, b, c) == (1, 0, 0):\n        return 3.00\n    elif (a, b, c) == (1, 1, 0):\n        return -1\n    elif (a, b, c) == (1, 1, 1):\n        return 0.00\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if a < 0 or b < 0 or c < 0:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # TODO: implement triangle_area function\n    if (a + b < c):\n        print(f\"It is not possible to calculate the area of a triangle of length {a}, {b}, and {c}.\")\n        return -1\n    if (a * b > c):\n        print(f\"It is not possible to calculate the area of a triangle of length {a}, {b}, and {c}.\")\n        return -1\n    else:\n        area = (a + b + c) / 2\n        if (area < 0):\n            return -1\n        else:\n            return area\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Simplify the triangle by using Pythagorean theorem\n    # Initialize the sum of the squared differences\n    s = (a + b + c) * 0.5\n    # Square each square\n    squares = s ** 2\n    # Calculate the geometric mean of the squares\n    geo_mean = (squares * (squares - 1) * (squares - 2)) ** 0.5\n    # Return the area of the triangle\n    return round(float(geo_mean), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(abs(a*(b-c)*(c-a)/((b-c)*(a-c)*(c-a)*(b-c))))\n    elif a == b == c:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_palindrome(list):\n        return sum(list) == sum(reversed(list))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    s = sum(q)\n    if len(q) == 1:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    q = list(q)\n    w = int(w)\n    for i in range(len(q)):\n        q[i] += q[i]\n        if q[i] <= w:\n            q[i] -= w\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (q <= w and is_palindromic(q)) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return (q and is_palindrome(q[:]) and sum(q) <= w and is_palindrome(q[::-1]))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    '''\n    list = []\n    for i in range(len(q)):\n        if q[i] > q[i] + q[i]:\n            list.append(q[i])\n    list.sort()\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    q = sorted(q)\n    \n    def is_palindrome(q):\n        '''\n        Is the list q as a palindrome?\n        Return True if so, False otherwise.\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(q) == 1:\n        return True\n    elif sum(q) >= w:\n        return False\n    else:\n        max_q = max(q)\n        q = list(q)\n        q.pop(q.index(max_q))\n        return will_it_fly(q,w-max_q)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return bool(is_palindromic_list(q,w)) and len(q) > len(q) - 1 and max(q) <= max(w) and sum(q) <= sum(w)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num_of_elements = len(q)\n    sum_of_elements = sum(q)\n    max_weight = max(q)\n    min_weight = min(q)\n    if max_weight == 0 or min_weight == 0 or sum_of_elements == max_weight or sum_of_elements == min_weight:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if arr == None:\n        return 0\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    smallest_change = 0\n    arr.sort()\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i]!= arr[i - 1]:\n            smallest_change += 1\n    return smallest_chang"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    n = len(arr)\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    m = len(arr)\n    if m == 1:\n        return 0\n    if m == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return arr[0]\n    if m == 3:\n        if arr[0] == arr[2]:\n            return arr[0]\n        return arr[0]\n    if m == 4:\n        if arr[2] == arr[3]:\n            return arr[2]\n        return arr[2]\n    if m == 5:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[3]\n    if m == 6:\n        if arr[3] == arr[4]:\n            return arr[3]\n        return arr[4]\n    if m == 7:\n        if arr[4] == arr[5]:\n            return arr[4]\n        return arr[4]\n    if m == 8:\n        if arr[5] == arr[6]:\n            return arr[5]\n        return arr[5]\n    if m == 9:\n        if arr[6] == arr[7]:\n            return arr[6]\n        return arr[6]\n    if m == 10:\n        if arr[7] == arr[8]:\n            return arr[7]\n        return arr[7]\n    \n    min_change = 0\n    start = m - 1\n    end = 0\n    while start >= 0 and end < m:\n        min_change = min(min_change, arr[start] - arr[end])\n        start -= 1\n        end += 1\n    return min_change\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n    else:\n        return min(smallest_change(arr[:-1]), smallest_change(arr[:-1][::-1])) + arr[-1]\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    i,j,result=0,0,0\n    if len(arr) <= 1:\n        return arr[0]\n    \n    while i < len(arr) - 1:\n        result += arr[i]\n        if arr[i] == arr[i + 1]:\n            j = i + 1\n            while j < len(arr) - 1:\n                if arr[j] == arr[j + 1]:\n                    j += 1\n                else:\n                    break\n            result += arr[j]\n            arr[i],arr[j] = arr[j],arr[i]\n        i += 1\n    return result\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # NOTE: you can implement this by starting at the end of the list, and changing each element, then moving the end to the start, or using a for loop,\n    # then checking if the change is the smallest. If it is, return the number of elements that need to be changed\n    # and the smallest change\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Find all the elements that need to be changed\n    changed = set(arr)\n    i = 0\n    while i < len(arr):\n        if arr[i] not in changed:\n            i += 1\n        else:\n            break\n    \n    # Find all the elements that need to be changed\n    while i < len(arr):\n        arr[i] = arr[i] + 1\n        i += 1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Time: O(n) Space: O(n)\n    # array = arr.copy()\n    array = [(int(i)) for i in arr]\n    sorted(array)\n    new = []\n    # while len(array) > 1:\n    #     count = 0\n    #     for i in range(len(array)-1):\n    #         if array[i]!= array[i+1]:\n    #             count += 1\n    #         else:\n    #             break\n    #     for j in range(len(array)-count-1):\n    #         new.append(array[j])\n    #         array[j] = array[j+count]\n    #         array[j+count] = array[j]\n    #     array = new\n    # return len(new)\n    return len(array)\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return max(arr[:len(arr)//2]+arr[len(arr)//2:]"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lst3 = [a for a in lst1 if a in lst2]\n    lst3.sort()\n    return lst3\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Convert strings into a list\n    lst1 = list(map(str, lst1))\n    lst2 = list(map(str, lst2))\n    \n    # Check for string lengths\n    if len(lst1)!= len(lst2):\n        return False\n    \n    # Keep track of the number of times each string has been included\n    d = dict()\n    for i in range(len(lst1)):\n        if lst1[i] in d:\n            d[lst1[i]] = d[lst1[i]] + 1\n        else:\n            d[lst1[i]] = 1\n    \n    # Count how many times each string has been included\n    for i in range(len(lst2)):\n        if lst2[i] in d:\n            d[lst2[i]] = d[lst2[i]] + 1\n        else:\n            d[lst2[i]] = 1\n    \n    # Take the number of characters for which the list has been included\n    # and return the first list\n    for i in d:\n        if d[i] == len(lst2):\n            return [i]\n    \n    # Return the first list\n    return [i for i in d if d[i]!= len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    dict1 = {}\n    for i in lst1:\n        count = dict1.get(i, 0)\n        dict1[i] = count + 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst3 = []\n    if len(lst1) == len(lst2):\n        for i in lst1:\n            if len(i) <= len(lst2):\n                lst3.append(i)\n        return lst3\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    res = []\n    for i in lst1:\n        if lst2.count(i) < lst1.count(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    total = 0\n    for char in lst1:\n        total += len(char)\n    for char in lst2:\n        total += len(char)\n    return lst1 if total < len(lst2) else lst2"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    if len(lst1)!= len(lst2):\n        return lst1\n    return [str(lst1).count(''.join(lst2))]\n    "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s1 = list(lst1)\n    s2 = list(lst2)\n    n = len(s1)\n    lst = []\n    if n < len(s2):\n        return lst\n    for i in s2:\n        lst.append(i)\n    return sum(lst[-len(s1):])\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = []\n    \n    if len(lst2) == len(lst1):\n        for i in lst2:\n            lst.append(i)\n    \n    lst.sort()\n    \n    return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count1 = 0\n    count2 = 0\n    for i in lst1:\n        if len(i) < len(lst2):\n            count1 += 1\n        if len(i) > len(lst2):\n            count2 += 1\n    return count1, count2\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a % 3 == 0:\n        return True\n    elif a % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    for x in range(2,a):\n        if (a % x == 0):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sieve = [True] * (a + 1)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(math.sqrt(a))+1):\n        if sieve[i]:\n            for j in range(i+i, a+1, i):\n                sieve[j] = False\n    return all(sieve[:a+1])\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_prime(x):\n        if x == 1:\n            return False\n        for i in range(2, x//2):\n            if x % i == 0:\n                return False\n        return True\n    if a >= 100:\n        return False\n    if a < 100 and a >= 300 and a < 600 and a >= 800:\n        return True\n    elif is_prime(a):\n        return True\n    elif a < 300:\n        return False\n    elif a < 600:\n        return False\n    elif a < 800:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if a % 2 == 0:\n        return False\n    elif a % 3 == 0:\n        return False\n    elif a % 5 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1,100):\n        if i % 2 == 0:\n            if i % 3 == 0:\n                count += 1\n        if count == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if a < 10:\n        return False\n    for i in range(1,a):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(2,a):\n        if(a%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == 1:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return True if int(x**n)==x and int(x**n)!=x else False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # create a base case to stop the function if we reach a base case, and return false if we reach a power base case.\n    if n == 0:\n        return True\n    elif n <= 0:\n        return False\n    else:\n        return (is_simple_power(x, n-1))\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n==1:\n        return True\n    if n==2:\n        return False\n    if n%2==0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2+1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return n**int(n)==x\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return True\n    if n < 1:\n        return False\n    if n % 2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n-1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        power = int(math.log(x, n))\n        if power == 0:\n            return True\n        else:\n            return False\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n==1:\n        return True\n    if n==0:\n        return False\n    if n==2:\n        return is_simple_power(x, 2)\n    if n==3:\n        return is_simple_power(x, 3)\n    if n==4:\n        return is_simple_power(x, 4)\n    if n%3==0:\n        return is_simple_power(x, n//3)\n    if n%4==0:\n        return is_simple_power(x, n//4)\n    return False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==1:\n        return True\n    elif n%2==0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2) or is_simple_power(x, n//2+1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # If the number is a power of n, then it is simple\n    if n == 1:\n        return True\n    # If the number is not a power of n, then it is not simple\n    return not is_simple_power(x, n-1)\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    elif n == n:\n        return True\n    else:\n        return is_simple_power(n//2, n%2)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a<0:\n        return False\n    elif a==0:\n        return True\n    elif a==1:\n        return False\n    elif a==2:\n        return False\n    elif a==3:\n        return False\n    elif a==4:\n        return False\n    elif a==5:\n        return False\n    elif a==6:\n        return False\n    elif a==7:\n        return False\n    elif a==8:\n        return False\n    elif a==9:\n        return False\n    elif a==10:\n        return False\n    elif a==11:\n        return False\n    elif a==12:\n        return False\n    elif a==13:\n        return False\n    elif a==14:\n        return False\n    elif a==15:\n        return False\n    elif a==16:\n        return False\n    elif a==17:\n        return False\n    elif a==18:\n        return False\n    elif a==19:\n        return False\n    elif a==20:\n        return False\n    elif a==21:\n        return False\n    elif a==22:\n        return False\n    elif a==23:\n        return False\n    elif a==24:\n        return False\n    elif a==25:\n        return False\n    elif a==26:\n        return False\n    elif a==27:\n        return False\n    elif a==28:\n        return False\n    elif a==29:\n        return False\n    elif a==30:\n        return False\n    elif a==31:\n        return False\n    elif a==32:\n        return False\n    elif a==33:\n        return False\n    elif a==34:\n        return False\n    elif a==35:\n        return False\n    elif a==36:\n        return False\n    elif a==37:\n        return False\n    elif a==38:\n        return False\n    elif a==39:\n        return False\n    elif a==40:\n        return False\n    elif a==41:\n        return False\n    elif a==42:\n        return False\n    elif a==43:\n        return False\n    elif a==44:\n        return False\n    elif a==45:\n        return False\n    elif a==46:\n        return False\n    elif a==47:\n        return False\n    elif a==48:\n        return False\n    elif a==49:\n        return False\n    elif a==50:\n        return False\n    elif a==51:\n        return False\n    elif a==52:\n        return False\n    elif a==53:\n        return False\n    elif a==54:\n        return False\n    elif a==55:\n        return False\n    elif a==56:\n        return False\n    elif a==57:\n        return False\n    elif a==58:\n        return False\n    elif a==59:\n        return False\n    elif a==60:\n        return False\n    elif a==61:\n        return False\n    elif a==62:\n        return False\n    elif a==63:\n        return False\n    elif a==64:\n        return False\n    elif a==65:\n        return False\n    elif a==66:\n        return False\n    elif a==67:\n        return False\n    elif a==68:\n        return False\n    elif a==69:\n        return False\n    elif a==70:\n        return False\n    elif a==71:\n        return False\n    elif a==72:\n        return False\n    elif a==73:\n        return False\n    elif a==74:\n        return False\n    elif a==75:\n        return False\n    elif a==76:\n        return False\n    elif a==77:\n        return False\n    elif a==78:\n        return False\n    elif a==79:\n        return False\n    elif a==80:\n        return False\n    elif a==81:\n        return False\n    elif a==82:\n        return False\n    elif a==83:\n        return False\n    elif a="
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return a <= 1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return a == int(a**3)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return a**3 == a**3 + a**2 * 3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #If a is positive integer, return true\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        if a == 3:\n            return True\n        elif a == 6:\n            return True\n        else:\n            if a == 9:\n                return True\n            else:\n                if a == 18:\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (a*a*a == a*a*a*a)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return isinstance(a, int) and a**3 == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return a == int(a)**3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if type(a)!= int or a <= 0:\n        return False\n    elif a == 1:\n        return True\n    elif a == 2:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(a)) + 1, 2):\n            if a % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, int(num, 16)):\n        if i == 0:\n            if str(i) == \"0\":\n                count = count + 1\n        elif i == 1:\n            if str(i) == \"1\":\n                count = count + 1\n        elif i == 2:\n            if str(i) == \"2\":\n                count = count + 1\n        elif i == 3:\n            if str(i) == \"3\":\n                count = count + 1\n        elif i == 4:\n            if str(i) == \"4\":\n                count = count + 1\n        elif i == 5:\n            if str(i) == \"5\":\n                count = count + 1\n        elif i == 6:\n            if str(i) == \"6\":\n                count = count + 1\n        elif i == 7:\n            if str(i) == \"7\":\n                count = count + 1\n        elif i == 8:\n            if str(i) == \"8\":\n                count = count + 1\n        elif i == 9:\n            if str(i) == \"9\":\n                count = count + 1\n        elif i == 10:\n            if str(i) == \"A\":\n                count = count + 1\n        elif i == 11:\n            if str(i) == \"B\":\n                count = count + 1\n        elif i == 12:\n            if str(i) == \"C\":\n                count = count + 1\n        elif i == 13:\n            if str(i) == \"D\":\n                count = count + 1\n        elif i == 14:\n            if str(i) == \"E\":\n                count = count + 1\n        elif i == 15:\n            if str(i) == \"F\":\n                count = count + 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    def count_digits(num):\n        if num == '':\n            return 0\n        return sum(map(int, list(num)))\n    def is_prime(num):\n        \"\"\"\n        This function checks if num is a prime number\n        :param num: number as string\n        :return: True if num is a prime number, False otherwise.\n        \"\"\"\n        return sum(map(int, list(num))) <= 100\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # The function should return a number:\n    return len(num) - int(num.replace('0', '1').replace('1', '0'))\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    digit = 0\n    for i in str(num):\n        digit += int(i)\n    return digit\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num=num.replace(\" \",\"\")\n    num=num.replace(\".\", \"\")\n    num=num.replace(\"-\",\"\")\n    num=num.replace(\"0x\",\"\")\n    num=num.replace(\"-\",\"\")\n    if num==\"\":\n        return 0\n    else:\n        digits=0\n        for x in num:\n            if x.isnumeric():\n                digits+=int(x)\n        if digits%2==0:\n            return digits+1\n        else:\n            return digits\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    num = str(num)\n    sum = 0\n    for i in range(len(num)):\n        sum = sum + int(num[i])\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if num == \"\":\n        return 0\n    elif num[0] == \"0\":\n        return 0\n    else:\n        for i in num:\n            if i == \"0\":\n                return 0\n            elif i == \"1\":\n                return 1\n    \n    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Your code here\n    if num.isdigit():\n        num = int(num)\n        num_prime = 2\n        num_int = 0\n        num_dec = 0\n        while num > 0:\n            num_int += 1\n            num //= 16\n            num_dec += num_int\n        if num == 1:\n            num_int = 0\n            num_dec = 0\n            while num > 0:\n                num_int += 1\n                num //= 16\n                num_dec += num_int\n            if num == 1:\n                num_int = 0\n                num_dec = 0\n                while num > 0:\n                    num_int += 1\n                    num //= 16\n                    num_dec += num_int\n                if num == 1:\n                    num_int = 0\n                    num_dec = 0\n                    while num > 0:\n                        num_int += 1\n                        num //= 16\n                        num_dec += num_int\n                    if num == 1:\n                        num_int = 0\n                        num_dec = 0\n                        while num > 0:\n                            num_int += 1\n                            num //= 16\n                            num_dec += num_int\n                        if num == 1:\n                            num_int = 0\n                            num_dec = 0\n                            while num > 0:\n                                num_int += 1\n                                num //= 16\n                                num_dec += num_int\n                            if num == 1:\n                                num_int = 0\n                                num_dec = 0\n                                while num > 0:\n                                    num_int += 1\n                                    num //= 16\n                                    num_dec += num_int\n                                if num == 1:\n                                    num_int = 0\n                                    num_dec = 0\n                                    while num > 0:\n                                        num_int += 1\n                                        num //= 16\n                                        num_dec += num_int\n                                    if num == 1:\n                                        num_int = 0\n                                        num_dec = 0\n                                        while num > 0:\n                                            num_int += 1\n                                            num //= 16\n                                            num_dec += num_int\n                                        if num == 1:\n                                            num_int = 0\n                                            num_dec = 0\n                                            while num > 0:\n                                                num_int += 1\n                                                num //= 16\n                                                num_dec += num_int\n                                            if num == 1:\n                                                num_int = 0\n                                                num_dec = 0\n                                                while num > 0:\n                                                num_int += 1\n                                                num //= 16\n                                                num_dec += num_int\n                                            if num == 1:\n                                                num_int = 0\n                                                num_dec = 0\n                                                while num > 0:\n                                                    num_int += 1\n                                                    num //= 16\n                                                    num_dec += num_int\n                                                if num == 1:\n                                                    num_int = 0\n                                                    num_dec = 0\n                                                    while num > 0:\n                                                        num_int += 1\n                                                        num //= 16\n                                                        num_dec += num_int\n                                                    if num == 1:\n                                                        num_int = 0\n                                                        num_dec = 0\n                                                        while num > 0:\n                                                        num_int += 1\n                                                        num //= 16\n                                                        num_dec += num_int\n                                                    if num == 1:\n                                                        num_int = 0\n                                                        num_dec = 0\n                                                        while num > 0:\n                                                        num_int += 1\n                                                        num //= 16\n                                                        num_dec += num_int\n                                                    if num == 1:\n                                                        num_int = 0\n                                                        num_dec = 0\n                                                        while num > 0:\n                                                        num_int += 1\n                                                        num //= 16\n                                                        num_dec += num_int\n                                                    if num == 1:\n                                                        num_int = 0\n                                                        num_dec = 0\n                                                        while num > 0:\n                                                        num_int += 1\n                                                        num //= 16\n                                                        num_dec += num_int\n                                                    if num == 1:\n                                                        num_int = 0\n                                "
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    def num_1(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**2)\n        return s[1]\n    \n    def num_2(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**3)\n        return s[2]\n    \n    def num_3(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**4)\n        return s[3]\n    \n    def num_4(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**5)\n        return s[4]\n    \n    def num_5(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**6)\n        return s[5]\n    \n    def num_6(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**7)\n        return s[6]\n    \n    def num_7(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**8)\n        return s[7]\n    \n    def num_8(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**9)\n        return s[8]\n    \n    def num_9(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**10)\n        return s[9]\n    \n    def num_10(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**11)\n        return s[10]\n    \n    def num_11(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**12)\n        return s[11]\n    \n    def num_12(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**13)\n        return s[12]\n    \n    def num_13(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**14)\n        return s[13]\n    \n    def num_14(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**15)\n        return s[14]\n    \n    def num_15(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**16)\n        return s[15]\n    \n    def num_16(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**17)\n        return s[16]\n    \n    def num_17(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**18)\n        return s[17]\n    \n    def num_18(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**19)\n        return s[18]\n    \n    def num_19(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(int(num[i])**20)\n        return s[19]\n    \n    def num_20(num):\n        s = []\n        for i in range(0,len(num)):\n            s.append(in"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Your code here\n    #TODO-1: complete the function\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"db\" + str(bin(decimal))[2:]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Get the decimal number and convert it to binary\n    decimal = int(decimal)\n    binary = bin(decimal).replace('0b', '')\n    # Removes all 'db' at the beginning\n    binary = binary[2:]\n    # Removes all 'db' at the end\n    binary = binary[:-2]\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return f\"{decimal:b}\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(decimal) is not int:\n        raise TypeError\n    if decimal < 0:\n        raise ValueError\n    num = str(decimal)\n    return num.zfill(len(num) * 2)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    int_parts = []\n    while decimal:\n        if decimal >= 1:\n            int_parts.append(str(decimal % 2))\n            decimal //= 2\n        else:\n            int_parts.append('0')\n            decimal = decimal // -2\n    return ''.join(int_parts)\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if decimal < 0:\n        decimal = -decimal\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    num_list = []\n    while decimal:\n        dec_int = decimal % 2\n        num_list.append(dec_int)\n        decimal //= 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    binary = \"\"\n    dec = decimal\n    while(dec >= 0):\n        binary = bin(dec)[2:].zfill(8)\n        dec = dec//2\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    str = ''\n    for i in range(len(decimal)):\n        if decimal[i] == '1':\n            str += '1'\n        else:\n            str += '0'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    binary_form = \"\"\n    \n    if decimal == 0:\n        return \"db\" + binary_form\n    \n    while decimal >= 2:\n        binary_form += str(decimal % 2)\n        decimal = int(decimal / 2)\n    \n    binary_form += str(decimal)\n    \n    return binary_form\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s.count('a')==3 and s.count('b')==3 and s.count('c')==3 and s.count('d')==3 and s.count('e')==3 and s.count('f')==3\ndef fun(string):\n    if is_happy(string):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    answer = []\n    for i in range(len(s) - 3):\n        temp = []\n        temp.append(s[i])\n        temp.append(s[i+1])\n        temp.append(s[i+2])\n        if temp not in answer:\n            answer.append(temp)\n    if answer == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return False\n    if s[0]!= s[1]:\n        return False\n    index = 2\n    for i in range(2, len(s)):\n        if s[i]!= s[i-1] and s[i]!= s[i-2]:\n            return False\n        index = index + 1\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not s:\n        return True\n    \n    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    from string import ascii_lowercase\n    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return not len(set(s)) > 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(s) <= 3:\n        return True\n    if s[0] == s[1] and s[2] == s[3]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # your code here\n    if len(s) >= 3:\n        for i in range(0, len(s)):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result_list = []\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return sorted(grades, key=lambda x: (round(x/10.0, 2), x))\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    total_gpa = 0\n    letter_gpa = []\n    for grade in grades:\n        total_gpa += grade\n    if total_gpa == 0:\n        letter_gpa = [0,0,0,0,0]\n    elif total_gpa == 1:\n        letter_gpa = [0,1,0,0,0]\n    elif total_gpa == 2:\n        letter_gpa = [0,1,2,0,0]\n    elif total_gpa == 3:\n        letter_gpa = [0,1,2,2,0]\n    elif total_gpa == 4:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 5:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 6:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 7:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 8:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 9:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 10:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 11:\n        letter_gpa = [0,1,2,2,2]\n    elif total_gpa == 12:\n        letter_gpa = [0,1,2,2,2]\n    else:\n        print(\"Number of GPA is out of range. Please try again.\")\n        return\n    return letter_gpa\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if not isinstance(grades, list):\n        raise TypeError(\"The grade list is not a list.\")\n    if not len(grades) >= 0:\n        raise ValueError(\"The grade list is empty.\")\n    return [letter.upper() for letter in grade_table[0][0:-1]]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # list of letter grades\n    # [['A+', 'A'], ['A-', 'B'], ['B+', 'C'], ['C-', 'D'], ['D-', 'E']]\n    \n    # get the highest and lowest GPA for the list\n    highest = max(grades)\n    lowest = min(grades)\n    \n    # calculate the grade\n    grade = [0, 0]\n    for i in range(len(grades)):\n        grade[0] += grades[i]\n        if grades[i] > highest:\n            grade[1] += 1\n            \n        elif grades[i] < lowest:\n            grade[1] += -1\n            \n    # get the letter grade\n    grades = [grade[0] / grade[1] * 100, grade[1] / grade[0] * 100]\n    \n    # return the list of letter grades\n    return grades"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Defining the dictionary with key as GPA and value as the letter grade\n    cgpa = {'A+' : 0.04, 'A' : 0.06, 'A-': 0.05, 'B' : 0.08, 'B+' : 0.11,\n        'B' : 0.09, 'B-': 0.08, 'C+' : 0.10, 'C' : 0.09, 'C-': 0.08, 'D+' : 0.11,\n        'D' : 0.09, 'D-': 0.08, 'E' : 0.12, 'E-': 0.08, 'F' : 0.14}\n    cgpa = {'A+' : 0.04, 'A' : 0.06, 'A-': 0.05, 'B+' : 0.08, 'B' : 0.11,\n        'B-': 0.08, 'C+' : 0.10, 'C' : 0.09, 'C-': 0.08, 'D+' : 0.11, 'D' : 0.09, 'D-': 0.08,\n        'E' : 0.12, 'E-': 0.08, 'F' : 0.14}\n    \n    def grade_letter(letter):\n        return cgpa.get(letter)\n    \n    return [grade_letter(letter) for letter in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Convert string values to floats\n    grades = [float(item) for item in grades]\n    # Sort by GPA\n    grades.sort()\n    # Create the list\n    letter_grade_list = []\n    # Iterate through grades\n    for i in range(len(grades)):\n        # Initialize GPA value\n        gpa = grades[i]\n        # Initialize letter grade\n        letter_grade = ''\n        # Determine letter grade\n        if gpa > 3.7:\n            letter_grade = 'C'\n        elif gpa > 3.3:\n            letter_grade = 'C'\n        elif gpa > 3.0:\n            letter_grade = 'C'\n        elif gpa > 2.7:\n            letter_grade = 'C'\n        elif gpa > 2.3:\n            letter_grade = 'C'\n        elif gpa > 2.0:\n            letter_grade = 'C'\n        else:\n            letter_grade = 'C'\n        # Append letter grade to the list\n        letter_grade_list.append(letter_grade)\n    # Return the final list\n    return letter_grade_list\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(grades) > 4:\n        return ['A+', 'B', 'C-', 'C', 'A-']\n    elif len(grades) == 0:\n        return ['A+', 'B', 'C-', 'C', 'A-']\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not isinstance(grades, list):\n        raise TypeError(\"The grades must be a list.\")\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    gpa = 0.0\n    list_gpa = []\n    gpa_grade = \"\"\n    for i in grades:\n        if i == \"\":\n            continue\n        gpa += float(i)\n        gpa_grade += (i)\n        \n    if gpa > 3.0:\n        gpa = gpa/2\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 3.3:\n        gpa = gpa*0.75\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 3.0:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.7:\n        gpa = gpa*1.5\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"D\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.3:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 1.0:\n        gpa = gpa*1.5\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"E\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 0.7:\n        gpa = gpa*1.25\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"C\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa > 0.0:\n        gpa = gpa*1.3\n        gpa_grade = gpa_grade[:-1]\n        gpa_grade = gpa_grade + \" \" + \"C\"\n        list_gpa.append(gpa_grade)\n        \n    elif gpa == 0.0:\n        gpa_grade = \"0.0\"\n        list_gpa.append(gpa_grade)\n    \n    return list_gpa\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(string) == 1:\n        return True\n    if string.count('a') > 0 or string.count('b') > 0 or string.count('c') > 0 or string.count('d') > 0 or string.count('e') > 0 or string.count('f') > 0:\n        return False\n    return prime_length(string.replace('k', ''))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Do not change this line\n    if len(string) <= 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n            continue\n        if string[i] == '0' or string[i] == '1':\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(string) < 2:\n        return False\n    if len(string) > 1000000:\n        return False\n    for i in range(2, len(string)+1):\n        if string.count(str(i)) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    num = 0\n    for i in range(1, len(string)):\n        for j in range(2, len(string)):\n            if string[i] == string[j] and string[i] not in ('a', 'b', 'c', 'd'):\n                num += 1\n    if num % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    try:\n        len(string)\n    except TypeError:\n        return False\n    else:\n        return len(string) >= 2\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    divisor = 2\n    while True:\n        if sum([char.isdigit() for char in string]) > 1:\n            return True\n        else:\n            divisor += 1\n    return False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(string) == 1:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(string)<=1:\n        return False\n    for i in range(2,len(string)):\n        if string[i] in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    for i in range(2,len(string)):\n        if string[i] in string[:i]:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prime_number = 2\n    is_prime = True\n    \n    for index, element in enumerate(string):\n        if element =='':\n            continue\n        for i in range(2, int(element)):\n            if element.startswith(str(i)):\n                if element.endswith(str(i)):\n                    is_prime = False\n                    break\n                else:\n                    is_prime = True\n                    break\n        if is_prime:\n            break\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [sum(int(digit)==1 for digit in str(n)) for digit in range(10)]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return functools.reduce(operator.add, (\n        starts_two_ends(i) for i in range(2, n + 1)\n    ))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    start = 1\n    end = n - 1\n    count = 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # return int(ceil(log2(n)))\n    return int(ceil(log2(n))) - 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if (n == 0):\n        return 0\n    \n    start = 0\n    end = n\n    while (start <= end):\n        mid = start + (end - start) // 2\n        if (n % mid == 1):\n            return 1\n        if (n % mid == 0):\n            end = mid - 1\n        \n    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    elif n <= 1000000:\n        return n\n    elif n % 1000000 == 1:\n        return n // 1000000\n    elif n % 1000000 == 0:\n        return n // 1000000 + 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n==1: return 1\n    if n==2: return 0\n    if n%2==0: return 1\n    if n%2==1: return 1+starts_one_ends(n//2)\n    return 1+starts_one_ends(n//2+1)"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    count = 0\n    while n!= 0:\n        n -= 1\n        if n % 10 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return int(str(n)[:n-1].lstrip(\"0\"))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    total = 0\n    while N > 0:\n        total += N % 2\n        N //= 2\n    return str(total)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    total_sum = 0\n    while N > 0:\n        current_sum = 0\n        while N % 2 == 0:\n            current_sum += 1\n            N //= 2\n        total_sum += current_sum\n    return total_sum\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Step 1: Initialize a variable to store the number of digits in the number.\n    # Step 2: Initialize an array called digits to store the number of digits.\n    # Step 3: While number of digits < 10:\n        # Step 4: Add the number of digits to the array.\n        # Step 5: Repeat step 2 until number of digits is greater than 0.\n    # Step 6: Return the total sum of digits.\n    # Step 7: Make sure that the total sum of digits is the same as\n        # Step 2 above.\n    # Step 8: Return the total sum of digits.\n    digits = []\n    sum = 0\n    while N > 0:\n        if N >= 10:\n            sum += N % 10\n            N = N // 10\n        else:\n            sum += N\n            N = 0\n    if sum % 2 == 0:\n        digits.append(sum)\n    else:\n        digits.append(sum)\n        digits.append(sum + 1)\n    return \"\".join(map(str,digits))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if N < 0:\n        return \"No\"\n    else:\n        return \"\".join(str(int(d, 2)) for d in bin(N)[2:])\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def convert(n):\n        return '0b' + str(bin(n).replace(\"0b\", \"\"))\n    \n    if N == 0: return ''\n    elif N < 10:\n        return convert(N)\n    \n    m = N//2\n    ans = ''\n    while m > 0:\n        ans += convert(m)\n        m = m//2\n    ans = ans[::-1]\n    return ans\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return \"0b\" + \"\".join(map(str, bin(N)[2:]))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # your code goes here\n    def add(num):\n        total = 0\n        while num!= 0:\n            total += (num & 1)\n            num >>= 1\n        return total\n    \n    def main():\n        N = int(N)\n        num = 1\n        sum = 0\n        while N > 0:\n            # if we pass N as a parameter, we will take that as number and\n            # then the sum is calculated as the addition of the digits in\n            # binary of the number passed as argument\n            # and add the sum to the output\n            # So the number passed as argument is converted to\n            # binary and then in the sum of digits we can use\n            # the funtion add(num)\n            # to calculate the sum of digits\n            num = add(num)\n            sum = num\n            N -= 1\n        print(sum)\n    \n    main()\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = []\n    for i in range(10):\n        a.append(i)\n    total = 0\n    for i in range(N):\n        total = total + a[i]\n    return tota"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum_list = []\n    for i in range(0,N):\n        digit = bin(i)[2:]\n        sum_list.append(digit)\n    result = []\n    for i in range(0,len(sum_list)):\n        if sum_list[i]!= \"0\":\n            result.append(sum_list[i])\n    return \"\".join(result)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    def getBits(num):\n        if num == 0:\n            return \"0\"\n        return getBits(num // 2) + str(num % 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sum(lst[:len(lst)//2])\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    print(f\"Adding to the {lst} list\")\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #print(lst)\n    #print(len(lst))\n    #print(lst[::2])\n    even = []\n    odd = []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    print(\"\\nAdding elements to a list: \")\n    try:\n        # test_lst = [4, 2, 6, 7]\n        # print(test_lst)\n        # add(test_lst)\n        # print(test_lst)\n        # return test_lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.append(lst[i] + lst[i+1])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] += 2\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = []\n    odd = []\n    for el in lst:\n        if el % 2!= 0:\n            even.append(el)\n        else:\n            odd.append(el)\n    return odd + even\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = []\n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even + odd\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s_str = ''.join(sorted(list(s)))\n    return s_str\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return s.replace(' ', '') +'' + ''.join(sorted(s.split(' ')))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return''.join(sorted(list(s.split())))"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = []\n    for c in s:\n        if c =='':\n            a.append(' ')\n        elif c == ',':\n            a.append(',')\n        elif c =='':\n            a.append(c)\n        else:\n            a.append(c.upper())\n    return ''.join(a)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return''.join(sorted(s, key=str.lower))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return''.join(sorted(s.split(' ')))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return \" \".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    s = s.replace(' ', '')\n    s = s.lower()\n    s = s.split(' ')\n    for i in range(len(s)):\n        s[i] = s[i].replace('-','')\n        s[i] = s[i].replace('.','')\n        s[i] = s[i].replace(',','')\n        s[i] = s[i].replace('.','')\n        s[i] = s[i].replace(':','')\n        s[i] = s[i].replace('!','')\n        s[i] = s[i].replace('?','')\n        s[i] = s[i].replace('','')\n        s[i] = s[i].replace(' ', '')\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    list = s.split()\n    list_int = []\n    list_new = []\n    for word in list:\n        list_int.append(ord(word))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    s = s.split(\" \")\n    result = \"\"\n    for word in s:\n        result += word[::-1] + \" \"\n    return result[::-1]"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda x: (x[x.index(x[0])] if x[0]!= 0 else 0, x[1] if x[1]!= 0 else 0, x[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst.sort(key=lambda x: x[0])\n    r = []\n    for row in lst:\n        row.sort()\n        r.append(tuple(row))\n    return r\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sorted(lst, key=lambda x: x[x.index(x[x.index(x[0])])])\n    \ndef get_col(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    return sorted(lst, key=lambda x: (x[y].index(x[y][x.index(x[0])]), x[y].index(x[y][x.index(x[0])]) + 1))\n    \ndef swap(lst, x, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, and integer x, and integer y, swap rows x and y in lst.\n    \"\"\"\n    lst[x][y], lst[y][x] = lst[y][x], lst[x][y]\n    \ndef rotate(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, and integer x, rotate the list by x columns in clockwise.\n    \"\"\"\n    if not lst:\n        return []\n    return lst[::-1]\n    \ndef get_row_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, and integer x, return the index of the row x,\n    if it is in the list, 0 otherwise.\n    \"\"\"\n    if lst[x] == 0:\n        return 0\n    else:\n        return x\n    \ndef get_row_col_index(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, and integer x, return the index of the row x,\n    if it is in the list, 0 otherwise.\n    \"\"\"\n    if lst[x] == 0:\n        return 0\n    else:\n        return x\n    \ndef get_row_col_index_list(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, and integer x, return the index of the row x,\n    if it is in the list, 0 otherwise.\n    \"\"\"\n    if lst[x] == 0:\n        return 0\n    else:\n        return x\n    \ndef count_repeat(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, return the number of repetitions of each item.\n    \"\"\"\n    \n    count_list = []\n    for i in range(len(lst)):\n        count_list.append(lst[i].count(lst[i][0]))\n    return count_list\n    \ndef count_repeat_list(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    \n    Given lst, return the number of repetitions of each item.\n    \"\"\"\n    count_list = []\n    for i in rang"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = x - 1\n    x = x % len(lst[0])\n    if len(lst[0]) > len(lst):\n        lst = sorted(lst, key = lambda x:x[x])\n    if len(lst) == 1:\n        return [(lst[0][x], x+1)]\n    else:\n        row_lst = get_row(lst[0], x)\n        col_lst = get_row(lst[1:], x)\n        return [(row_lst[y], col_lst[y]+1) for y in range(len(row_lst))]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    rows = []\n    for row in lst:\n        rows.append((x, row[x]))\n    rows.sort(reverse=True)\n    return rows\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst.sort()\n    indexes = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            indexes.append((lst[i][j], j))\n    indexes.sort(reverse = True)\n    return indexes\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert len(lst) >= 1\n    \n    # Generate list of tuples of coordinates\n    # (rows, columns) of the given list\n    columns = len(lst[0])\n    rows = len(lst)\n    tuples = []\n    \n    # Initialize coordinate tuples\n    for r in range(rows):\n        # Initialize column coord tuples\n        for c in range(columns):\n            # Get coordinate of coordinate tuple\n            row = r + c * rows\n            column = c\n            # Update tuples for coordinate\n            tuples.append((row, column))\n    \n    # Sort coordinates by rows\n    tuples.sort(key=lambda x: x[0])\n    \n    # Sort coordinates by columns\n    tuples.sort(key=lambda x: x[1])\n    \n    # Return coordinate tuples\n    return tuples\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return lst[0:x+1]\n    \ndef get_column(lst, x):\n    \"\"\"\n    Given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    return lst[x:len(lst)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    return sorted(zip(*[(x, row) for row in lst for x in row]))\n    #[(x, row) for row in lst for x in row]\n    #[(x, row) for row in sorted(lst, key=lambda x:x[1])]\n    #[(x, row) for row in sorted(lst, key=lambda x:x[1], reverse=True) for x in sorted(row, key=lambda x:x[0])]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # a = []\n    # for i in range(len(array)):\n    #     if len(a) % 2!= 0:\n    #         a.append(array[i])\n    #     else:\n    #         a.append(array[i] % 2)\n    # return a\n    return sorted(array, key = lambda x: x, reverse = True)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # TODO: return a sorted array\n    # remove duplicates\n    sorted = [array[i] for i in range(len(array))]\n    # TODO: sort\n    for i in range(len(sorted)):\n        for j in range(len(sorted)):\n            # check the current sum is odd or even\n            if(sorted[i] + sorted[j] % 2 == 0):\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n    # TODO: return\n    return sorted"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # TODO: Write your code here\n    temp = []\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] + array[j+1] < array[j+1] or array[j] + array[j+1] % 2 == 0:\n                temp.append(array[j])\n    return temp\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sorted_array = []\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if array[i]+array[j] % 2 == 1:\n                sorted_array.append(array[i]+array[j])\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    length = len(array)\n    array = sorted(array)\n    if length % 2 == 1:\n        return array + array[::-1]\n    else:\n        return array[::-1]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sorted_array = []\n    for i in range(len(array)):\n        count_odd = 0\n        count_even = 0\n        for j in range(len(array)):\n            if array[j] % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        if count_odd % 2!= 0:\n            array[i] = -array[i]\n        elif count_odd % 2 == 0:\n            array[i] = -array[i]\n        else:\n            array[i] = array[i] + min(count_even, count_odd)\n        sorted_array.append(array[i])\n    return sorted_array"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    array = sorted(array)\n    if sum(array) % 2 == 1:\n        array = [array[x] for x in range(len(array))]\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = []\n    total = 0\n    for num in array:\n        total += num\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sorted_array = []\n    for num in array:\n        if num % 2 == 0:\n            sorted_array.append(num)\n        else:\n            sorted_array.append(0)\n    sorted_array.sort()\n    return sorted_array\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s.swapcase()\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('gf') returns 'fjkl'\n    decrypt('kaj') returns 'asdfghjkl'\n    decrypt('ix') returns 'gf'\n    \"\"\"\n    return s.swapcase()\n    \nif __name__ == \"__main__\":\n    print(\"ROTATE_V1\")\n    print(encrypt(\"abcdefg\"))\n    print(decrypt(encrypt(\"abcdefg\"))"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return ''.join([c*2 for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    cipher = []\n    for letter in s:\n        index = ord(letter) - ord('a')\n        cipher.append(chr((index + 2) % 26 + ord('a')))\n    return ''.join(cipher)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return ''.join([chr(ord(x) - x) for x in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    encrypt_string = \"\"\n    for character in s:\n        index = alphabet.index(character)\n        new_index = index + 2\n        if new_index < len(alphabet):\n            new_character = alphabet[new_index]\n            encrypt_string += new_character\n        else:\n            encrypt_string += character\n    return encrypt_string\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    enc = \"\"\n    for c in s:\n        if c == \" \":\n            enc += \" \"\n        elif c == \"!\":\n            enc += \"1\"\n        elif c == \"?\":\n            enc += \"2\"\n        elif c == \" \":\n            enc += \" \"\n        else:\n            enc += alphabet[alphabet.index(c)+2]\n    return enc\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    \n    # process string argument\n    i = 0\n    encrypted = \"\"\n    \n    for char in s:\n        if char.isalpha():\n            if char == \" \":\n                encrypted += \" \"\n            else:\n                encrypted += chr(ord(char) + 1)\n            \n        else:\n            encrypted += char\n            \n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    out_str = \"\"\n    for i in s:\n        if i.isalpha():\n            out_str += chr((ord(i) + 2) % 26 + ord('z'))\n        else:\n            out_str += i\n    return out_str\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return ''.join(s[ord(x)-ord('a') for x in s] + (x.lower() for x in s))"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return s.translate(ALPHABET)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return sorted(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    lst.sort()\n    if lst[0] == lst[-1]:\n        return lst[0]\n    else:\n        return next_smallest(lst[1:])\n        \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 1\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[j] < lst[i]:\n                lst[j], lst[i] = lst[i], lst[j]\n            j += 1\n        i += 1\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for element in lst:\n        # Check if element is smaller than the last element\n        if element < lst[-1]:\n            return element\n    # If all elements have been checked, return None\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    \n    return next(iter(lst)"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    else:\n        i = 1\n        while True:\n            if n < i:\n                return lst[n]\n            else:\n                i += 1\n                if n == 1:\n                    return None\n                if n == i:\n                    return lst[i-1]\n            \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if lst == []:\n        return None\n    return lst[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if lst is None:\n        return None\n    \n    if len(lst) == 0:\n        return None\n        \n    if len(lst) == 1:\n        return lst[0]\n    \n    small = lst[0]\n    i = 1\n    for ele in lst:\n        if ele < small:\n            small = ele\n            i = 0\n        elif i == 0:\n            i += 1\n    return small\n    \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    bored = 0\n    for word in S.split():\n        if word.startswith(\"I\") or word.startswith(\"!\", \"?\"):\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    word = S\n    while word.find(\".\")!= -1 or word.find(\"?\")!= -1 or word.find(\"!\")!= -1:\n        word = word.replace(\".\", \".\", 1)\n        word = word.replace(\"?\", \".\", 1)\n        word = word.replace(\"!\", \".\", 1)\n        count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len([word for word in S.split(\".\") if word.startswith(\"I\")])\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for word in S:\n        if word.find('.') > 0 or word.find('!') > 0 or word.find('?') > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for w in S:\n        if w == \"I\":\n            count += 1\n        if w == \"!\":\n            count += 1\n        if w == \".\":\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    #This variable is used to count the number of boredoms in the sentence \n    boredom_count = 0\n    #This for loop is to check for the words that begin with 'I'\n    for word in S.split(\".\"):\n        #If the word does not begin with 'I', it is not a bored word\n        if word[0]!= \"I\":\n            #If the word begins with '!', that is a message that starts with 'I'\n            if word[0] == '!':\n                #It is the message. Count the number of boredoms\n                boredom_count += 1\n            #If the word begins with '?' or '.', that is a message that starts with 'I'\n            if word[0] in ['?' or '.']:\n                #It is the message. Count the number of boredoms\n                boredom_count += 1\n    #This for loop is used to return the number of boredoms\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    s = S.split('.')\n    bored = 0\n    for i in s:\n        if '?' in i or '!' in i:\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Special cases\n    if S == '.':\n        return 0\n    if S == '?':\n        return 1\n    if S == '!':\n        return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    dict_ = {'0': '', '1': '', '2': '', '3': '', '4': '', '5': '', '6': '', '7': '', '8': '', '9': ''}\n    for word in S:\n        if word.lower() in dict_:\n            dict_[word.lower()] += 1\n        else:\n            dict_[word.lower()] = 1\n    count = 0\n    for key in dict_:\n        if dict_[key] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for word in S.split(\".\"):\n        if \"?\" in word or \"!\" in word:\n            count += 1\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return x!= y or (x + y) % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if x < 0:\n        return any_int(-z, y, x)\n    elif y < 0:\n        return any_int(z, x, y)\n    elif z < 0:\n        return any_int(x, y, z)\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    for num in x, y, z:\n        if type(num) == int:\n            if num == sum(x):\n                return True\n            if num == sum(y):\n                return True\n            if num == sum(z):\n                return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if x < y and y < z:\n        return True\n    elif x < y and y >= z:\n        return any_int(x, z, y)\n    elif x > y and y >= z:\n        return any_int(x, y, z)\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    x = int(x)\n    y = int(y)\n    z = int(z)\n    if (x + y == z) or (x + z == y) or (x == y) or (x == z) or (y == z):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    else:\n        return True\n    \n    \ndef is_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    is_int(5, 2, 7) \u279e True\n    \n    is_int(3, 2, 2) \u279e False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return True if all(type(x) == int and type(y) == int and type(z) == int for x, y, z in zip(x, y, z)) else False\n    \ndef main():\n    '''\n    Creating a function that takes 3 numbers.\n    Returns the sum of the numbers if one is equal to the sum of the other two, and all numbers are integers.\n    Returns false if one or two of the numbers are not equal to the sum of the other two, and all numbers are integers.\n    \n    Examples\n    main() \u279e 0\n    \n    main() \u279e 0\n    \n    main() \u279e 0\n    \n    main() \u279e 0\n    \n    main() \u279e 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    a = x + y + z\n    if(a < 0):\n        return False\n    if(a % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    return sum(x) == sum(y) and sum(z) == sum(x)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        x = int(x)\n        y = int(y)\n        z = int(z)\n        if x == y and x!= z and x + y + z!= 3:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    message=message.replace(\"a\", \"g\").replace(\"e\", \"t\").replace(\"i\", \"t\").replace(\"o\", \"u\").replace(\"u\", \"e\").replace(\"y\", \"g\").replace(\"h\", \"h\").replace(\"y\", \"t\").replace(\"y\", \"i\").replace(\"o\", \"c\").replace(\"a\", \"i\").replace(\"g\", \"c\").replace(\"t\", \"c\").replace(\"s\", \"s\").replace(\"g\", \"g\").replace(\"i\", \"i\").replace(\"t\", \"t\")\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    letters = list('abcdefghijklmnopqrstuvwxyz')\n    message = message.upper()\n    message = message.replace('A', letters[0])\n    message = message.replace('E', letters[1])\n    message = message.replace('I', letters[2])\n    message = message.replace('O', letters[3])\n    message = message.replace('U', letters[4])\n    message = message.replace('Y', letters[5])\n    message = message.replace('a', letters[2])\n    message = message.replace('e', letters[3])\n    message = message.replace('i', letters[4])\n    message = message.replace('o', letters[5])\n    message = message.replace('u', letters[6])\n    message = message.replace('y', letters[7])\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    words = message.split()\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].swapcase()\n    return \" \".join(words)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    message = message.replace(' ', '.').replace('\\n', '.')\n    vowels = 'aeiouAEIOU'\n    message = message.upper()\n    encoded = ''\n    for letter in message:\n        if letter in vowels:\n            encoded += letter.upper()\n        else:\n            encoded += letter.lower()\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    if message == '':\n        return ''\n    return ''.join([alphabet[(i + 2) % 26] for i in range(len(message))]) + ''.join([alphabet[i] for i in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    message = message.lower()\n    message = message.replace(\" \", \"\").replace(\"'s\", \"\")\n    message = message.replace(\"-\", \"\").replace(\"-\", \"\").replace(\"-\", \"\").replace(\"-\", \"\")\n    message = message.replace(\"-\", \"\")\n    message = message.replace(\"e\", \"e\").replace(\"i\", \"i\").replace(\"o\", \"o\").replace(\"u\", \"u\")\n    message = message.replace(\"d\", \"d\").replace(\"g\", \"g\").replace(\"c\", \"c\").replace(\"b\", \"b\").replace(\"a\", \"a\")\n    message = message.replace(\"f\", \"f\").replace(\"h\", \"h\").replace(\"g\", \"g\").replace(\"r\", \"r\").replace(\"a\", \"a\")\n    message = message.replace(\"f\", \"f\").replace(\"h\", \"h\").replace(\"g\", \"g\").replace(\"r\", \"r\")\n    message = message.replace(\"s\", \"s\").replace(\"t\", \"t\").replace(\"u\", \"u\").replace(\"e\", \"e\")\n    message = message.replace(\"v\", \"v\").replace(\"d\", \"d\").replace(\"g\", \"g\")\n    message = message.replace(\"e\", \"e\")\n    message = message.replace(\"i\", \"i\")\n    message = message.replace(\"o\", \"o\")\n    message = message.replace(\"u\", \"u\")\n    message = message.replace(\"a\", \"a\")\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    message = message.lower()\n    encoded = ''\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    message = message.replace(\"'s\", \"'\")\n    message = message.replace(\"'\", \" \")\n    message = message.replace(\"'s\", \" \")\n    message = message.replace(\"'s\", \" \")\n    message = message.replace(\" 't\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\" 't\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\" 't\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\" 't\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = message.replace(\"'t\", \" \")\n    message = messag"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # make a list for the letters to swap\n    swap_letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    \n    # repeat letters until each letter appears in 2 places\n    # for each letter, add the number of letters in the swap letter to the list\n    # in this loop, we will add the number of letters in the swap letter to the list, so we can only keep checking each letter\n    # to add more number of letters\n    # this doesn't have to be here because we will add the number of the current letter in the swap letter to the list, so we don't need to keep checking each letter\n    # in the for loop since we can just stop at the end of the list, and not at the end of the list\n    # because we want to keep only the 2nd letter in the list\n    # (since we don't know the index of the letter in the list to add in the swap letter, we will have to find it)\n    # we will add the letter in the swap letter to the list in this loop\n    for letter in message:\n        index = 0\n        # check if the letter we're trying to swap has already been added to the list\n        # because it's not because the letter we're trying to swap is already added to the list\n        # (it might be because it is already in the list but it's not because of the position of the letter)\n        while letter in swap_letters:\n            index += 1\n            swap_letters.remove(letter)\n            swap_letters.append(letter)\n            # add the letter in the list to the swap letter\n            # and add the number of letters to the list in this loop\n            # so we can only keep checking each letter in the list\n            # as we know it's a number\n            swap_letters.append(index)\n        # we'll add the letter in the swap letter to the list\n        # and add the number of letters in the list in this loop\n        # so we know the letter is in the list\n        # so we can now remove it from the list\n        swap_letters.append(letter)\n    # convert the list back to a string\n    return ''.join(swap_letters)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    words = message.split()\n    for word in words:\n        for i in range(len(word)):\n            if word[i].isupper():\n                word[i] = word[i].swapcase()\n                \n    return ''.join(word)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    maximum = 0\n    for i in lst:\n        if is_prime(i):\n            if i > maximum:\n                maximum = i\n        else:\n            if i!= 0:\n                maximum = i\n    return maximum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #for i in lst:\n    #    print(i)\n    s = 0\n    primes = [2,3,5,7,11,13,19,23,31,37,41,43,45,47,53,59,61,67,71,73,79,81,83,89,91,97]\n    for i in primes:\n        if lst[0]%i == 0:\n            s+=lst[0]//i\n            lst.pop(0)\n            break\n    return s"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    max = 0\n    for i in lst:\n        if isprime(i):\n            if i>max:\n                max = i\n            if i>10:\n                continue\n            for j in range(i*2,lst[i],i):\n                if not isprime(j):\n                    break\n                elif isprime(j) and i%j == 0:\n                    break\n                else:\n                    if i%j == 0:\n                        break\n                    else:\n                        continue\n            else:\n                max = i\n    return max\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # This is the largest prime\n    primes = []\n    # Iterate over all numbers from the list\n    for n in lst:\n        # Check if the number is prime\n        if is_prime(n):\n            primes.append(n)\n            # Iterate through the primes and add to the sum\n    sum = 0\n    # Iterate through each primes\n    for n in primes:\n        sum += n\n    # Return the sum of the digits\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    s = 0\n    if len(lst) == 0:\n        return s\n    else:\n        for i in lst:\n            if i % 2 == 0:\n                s += i\n        return s\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    lst = [int(x) for x in str(lst)]\n    lst.sort()\n    p = lst[-1]\n    for i in range(2, p):\n        if lst[i]%lst[i-1]==0:\n            print(lst[i],'is not a prime number')\n            return 'Not a prime number'\n    print(lst)\n    return sum(lst)\n    "
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(lst)):\n        while(len(str(lst[i]))<len(str(lst[i]))):\n            lst[i] = lst[i]*10 + lst[i]\n    return max(lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in lst:\n        result = max(result, i % 10)\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    lst = list(map(int,lst))\n    \n    p = 1\n    count = 0\n    while(p < len(lst)):\n        count += lst[p] * p\n        p += 1\n    \n    return count\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #Base case: O(n^2)\n    #iterative\n    #Runtime: 52 ms, faster than 61.18% of Python online submissions for Largest Prime Factor.\n    #Memory Usage: 14.5 MB, less than 58.36% of Python online submissions for Largest Prime Factor.\n    def max_prime_factor(n,prime):\n        \"\"\"\n        :type n: int\n        :type prime: int\n        :rtype: int\n        \"\"\"\n        if prime==1:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            for i in range(2,n):\n                if n%i==0:\n                    return i\n            return 1\n    \n    #recursive\n    def max_factor(n,prime):\n        if n==1:\n            return 1\n        elif n==2:\n            return 2\n        elif n==3:\n            return 3\n        else:\n            for i in range(4,int(math.sqrt(n)),4):\n                if n%i==0:\n                    return i\n            return 1\n    \n    def max_prime_factors(n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        max_prime=1\n        max_prime=max(max_prime,max_factor(n,max_prime))\n        max_prime=max(max_prime,max_factor(n,max_prime))\n        max_prime=max(max_prime,max_factor(n,max_prime))\n        return max_prime\n    \n    return max_prime_factors(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    for key in dict:\n        if key.isupper():\n            if len(key)==len(dict[key]):\n                return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if dict is None:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # check if all keys are strings in lower case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return True\n    # check if all keys are strings in upper case\n    if len(set(dict.keys()).intersection(set(dict.values()))) == len(dict.keys()):\n        return False\n    # check if all keys are strings\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return all(type(key) == str and key.islower() for key in dict"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    # 1.\n    if not isinstance(dict, dict):\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not all([str.isupper(key) if type(key) == str else str.islower(key) for key in dict[key]]):\n            return False\n    \n    # 2.\n    if len(dict) == 0:\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    for key in dict:\n        if type(key) is not str:\n            return False\n    if len(dict.keys()) == 0:\n        return True\n    for key in dict.keys():\n        if key.isupper():\n            if key.lower() in dict.values():\n                return True\n        if key.islower():\n            if key.upper() in dict.values():\n                return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in dict:\n        if not isinstance(dict[i], str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Loops through the dictionary to see if all keys are strings in lower case or upper case.\n    for key in dict.keys():\n        if type(key)!= str:\n            return False\n    # Checks if all keys are strings in lower case and upper case.\n    for key in dict.keys():\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if type(dict)==dict:\n        return all(type(key).__name__ in [\"str\"] for key in dict)\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for key in dict:\n        if type(key) == str:\n            key = key.lower()\n        if key in dict:\n            if key in dict[key].lower():\n                return True\n    return False\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n<=1:\n        return []\n    count_up_to_list = []\n    i=2\n    while i<=n:\n        if is_prime(i):\n            count_up_to_list.append(i)\n        i+=1\n    return count_up_to_list\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    arr = []\n    for i in range(2,n+1):\n        if isprime(i):\n            arr.append(i)\n    return arr\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # YOUR SOLUTION\n    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        res = []\n        for i in range(2, n + 1):\n            if is_prime(i):\n                res.append(i)\n        return res\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    prime_list = prime_set(n)\n    return [prime_list[i] for i in range(0, len(prime_list), 2) if prime_list[i] % n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    prime = []\n    for i in range(2, n + 1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime.append(i)\n    return prime\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #TODO\n    prime = [2,3]\n    res = []\n    for i in range(n):\n        if prime[0] < i:\n            prime.append(prime[i])\n        else:\n            if prime[i] < prime[i-1]:\n                prime.append(prime[i-1])\n            elif prime[i] < prime[i-2]:\n                prime.append(prime[i-2])\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    assert type(n) == int and n >= 0, \"n must be a positive integer\"\n    result = []\n    for i in range(n,1,-1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def run():\n        primes = []\n        for i in range(n+1):\n            is_prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(i)\n        return primes\n    return run()\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = [2,3]\n    for i in range(2, n+1):\n        for j in count:\n            count.append(j)\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    return (a*b)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    # for a,b in zip(a,b):\n    #     print(a*b)\n    return (a*b)\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return reduce(lambda x, y: int(x) * int(y), [int(i) for i in str(a * b)])\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return (a*b)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    c=0\n    for i in str(a):\n        c=c+int(i)\n    d=int(c)\n    return d*b\n    \ndef main():\n    \"\"\"Reads input from STDIN and calls the above functions.\n    You can assume the return value of the function is a number.\n    \"\"\"\n    a=int(input())\n    b=int(input())\n    print(multiply(a,b))\n    \nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    product = 0\n    for digit in str(a):\n        product = product * int(digit)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (sum([int(x) for x in str(a * b)]))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # write your code here\n    if isinstance(a, int) and isinstance(b, int):\n        return a * b\n    elif isinstance(a, int) and isinstance(b, str):\n        # assume number of ints is the same\n        # treat the string as a list of ints\n        # add the ints to the final product\n        a = list(a)\n        for i in range(len(a)):\n            a[i] = int(a[i])\n        # remove the first element, which is the sign, from a\n        a = a[1:]\n        # then modify the a list with the ints\n        a = [int(x) for x in a]\n        # then append the product to the final product\n        final = a[0] * multiply(a[1:], b)\n        return final\n    else:\n        raise Exception('Invalid arguments')\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # YOUR CODE HERE\n    \n    #ADD\n    return sum(int(i) * int(j) for i,j in zip(a,b))\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    product = 1\n    for i in range(len(b)):\n        product *= int(b[i])\n    return product\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            n += 1\n            if i % 2 == 0:\n                n += 1\n        i += 1\n    return n\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for index in range(len(s)):\n        if index % 2 == 0:\n            if s[index].isupper():\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(s) < 2:\n        return 0\n    \n    count = 0\n    prev = s[0]\n    count_d = 0\n    for i in range(1, len(s)):\n        if s[i] >= prev:\n            count += 1\n        else:\n            count_d += 1\n        prev = s[i]\n    \n    return count + count_d\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    n = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            n += 1\n    return n\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return len([v for v in s if v.isupper()])\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    count = 0\n    s = list(s)\n    for i in range(0, len(s)):\n        if (s[i].isupper() and s[i+1].isupper()):\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO\n    # Replace this with a better solution.\n    # Go through all integers, convert them to ints, and find the closest\n    # integer.\n    # Find the absolute difference between the two integers.\n    # Round it to a number, and subtract from one number\n    # If it is not zero, round it away from zero\n    # If it is zero, round it back to zero\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def closest_integer_to_number(number):\n        '''\n        Closest integer to a given number.\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(value) is not str:\n        raise TypeError('value must be a string')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if type(value) is not str:\n        raise TypeError('string expected')\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    '''\n    The function should take a string as input and return the\n    closest integer that is between the input string and the last\n    integer.\n    '''\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Get the closest integer from a string\n    try:\n        number = int(value)\n    except:\n        print(\"Error: \" + value + \" is not an integer\")\n        return\n    # Get the closest integer\n    if value[0] == \"-\":\n        number = -number\n    if value.find(\".\") > 0:\n        closest_integer = round(number, 2)\n    elif value.find(\".\") == -1:\n        closest_integer = round(number)\n    else:\n        closest_integer = round(number, -2)\n    return closest_integer\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not value.isdigit():\n        return value\n    \n    if value == \"\":\n        return \"\"\n    \n    values = value.split('.')\n    if len(values) == 2:\n        closest = 0\n        for number in values:\n            closest = closest if int(number) == int(closest) else int(number)\n        return closest\n    \n    for i in range(len(values)):\n        if abs(int(values[i]) - int(closest)) < abs(int(values[i]) - int(values[i-1])):\n            closest = int(values[i])\n    return closest\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    number = value\n    try:\n        number = float(number)\n    except ValueError:\n        pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if is_int(value):\n        return int(value)\n    else:\n        value = value.split(\".\")\n        if len(value) < 2:\n            return 0\n        else:\n            number = 0\n            for d in value:\n                number += int(d)\n            return number"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = [n // 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i+1)\n        else:\n            result.append(i+1)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        output = []\n        for i in range(n//2, 0, -1):\n            output.append(i+1)\n        if n % 2 == 1:\n            output.append(n//2)\n        return output\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0: return [0, 0, 0]\n    res = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            res.append(i)\n        else:\n            res.append(n//i)\n    return res\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n%2==0:\n        return [n//2, (n//2)+1]\n    else:\n        return [n//2, n//2+1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n < 3:\n        return [n]\n    else:\n        first = make_a_pile(n // 2)\n        last = make_a_pile(n - 1)\n        return first + [n] + last\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    i = 1\n    while i < n:\n        if n % 2 == 0:\n            result.append(n//2)\n        else:\n            result.append(3)\n        n = n//2\n        i += 1\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n <= 2:\n        return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Compute the number of stones in the first level, and the last level\n    # with the smallest odd number.\n    # Add the the rest of the level.\n    # Return the result as a list.\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    pile = [0]*n\n    n = n%2\n    if n==0:\n        pile[0] = 1\n        return [pile[0]]+make_a_pile(n+1)\n    elif n==1:\n        pile[1] = 1\n        return make_a_pile(n+1)\n    else:\n        pile[0] = 1\n        pile[1] = 1\n        pile[2] = 2\n        for i in range(3,n+1):\n            pile[i] = pile[i-1]+pile[i-2]\n        return pile\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    words = s.split(\",\")\n    return words\n    \n    \ndef frequency(s):\n    \"\"\"\n    You will be given a string. Your task is to return a dictionary that maps from the\n    characters in the string to the number of times they occur in the string.\n    \n    For example:\n    frequency(\"Hi, my name is John\") == {'H': 2, 'i': 1, 'n': 1}\n    \"\"\"\n    \n    # Create an empty dictionary\n    dict_of_char = {}\n    \n    for i in s:\n        if i in dict_of_char:\n            dict_of_char[i] += 1\n        else:\n            dict_of_char[i] = 1\n    \n    return dict_of_char\n    \n    \ndef find_longest_word(d, s):\n    \"\"\"\n    You will be given a dictionary of strings and a string. You have to return a string\n    representing the longest word in the dictionary, that is, the word that occurs the most\n    times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    longest_word = []\n    \n    # loop through the dictionary\n    for key in d:\n        # check each key's frequency\n        if d[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if d[key] > len(s)/2:\n                longest_word.append(key)\n            # else, append last value in list\n            else:\n                longest_word.append(key)\n                \n    # return the longest word\n    return longest_word\n    \n    \ndef longest_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    \ndef longest_word_with_word(dict_of_char, s):\n    \"\"\"\n    You will be given a dictionary of words. Your task is to return the longest word in the dictionary,\n    that is, the word that occurs the most times in the dictionary.\n    \n    For example:\n    longest_word_with_word({\"H\", \"i\", \"n\", \"O\", \"I\", \"M\", \"a\", \"I\", \"N\", \"e\", \"s\", \"A\"}, \"HI\") == \"I\"\n    \n    \"\"\"\n    \n    \n    # create an empty list\n    word_longest = []\n    \n    # loop through the dictionary\n    for key in dict_of_char:\n        # check each key's frequency\n        if dict_of_char[key] > len(s)/2:\n            # if frequency of a word is larger than half of total number of words, append it\n            if dict_of_char[key] > len(s)/2:\n                word_longest.append(key)\n            # else, append last value in list\n            else:\n                word_longest.append(key)\n                \n    # return the longest word\n    return word_longest[0]\n    \n    "
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return [w.strip() for w in s.strip().split(\", \")]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    str = s.strip().split(\",\")\n    for i in str:\n        str = i.split()\n        if len(str) > 1:\n            return list(str)\n    return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return [i.strip() for i in s.split(',')]\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [s.split(\",\")[0].strip().lower().split(\" \")]\n    #words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    #words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return [w.strip() for w in s.split(\",\")]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    res = []\n    s = s.split(\",\")\n    for word in s:\n        res.extend(word.split())\n    return res"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if x == y:\n        return x\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x // 2, y // 2)\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    num = x\n    # num = 5\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            return num\n    return -1"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_num = 0\n    for i in range(x, y):\n        if i % 2 == 0:\n            even_num = i\n            break\n    return even_num\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    x = abs(x)\n    y = abs(y)\n    if (x == 0):\n        return y\n    elif (y == 0):\n        return -1\n    elif (x % 2 == 0):\n        return choose_num(x//2, y)\n    elif (y % 2 == 0):\n        return choose_num(x, y//2)\n    else:\n        if (x % 2 == 0):\n            return choose_num(x//2, y-1)\n        else:\n            return choose_num(x//2, y+1)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if x < y:\n        return choose_num(x, y-1)\n    else:\n        return choose_num(x-1, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if x == y:\n        return x\n    if x == 1:\n        return y\n    x, y = [int(x) for x in str(x).split()]\n    if x % 2 == 0:\n        if x < y:\n            return choose_num(x + 1, y)\n        else:\n            return choose_num(x, y - 1)\n    else:\n        return choose_num(x - 1, y)\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Check if both numbers are in the range \n    if x >= 0 and y >= 0 and x <= y:\n        # If both numbers are in the range, return the number\n        if x % 2 == 0 and y % 2 == 0:\n            return x\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if x <= y:\n        x, y = y, x\n        while y % 2 == 0:\n            y = y // 2\n    elif x > y:\n        x, y = y, x\n        while y % 2!= 0:\n            y = y // 2\n    \n    for i in range(x, y, 2):\n        if (i % 2) == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Get both numbers.\n    x, y = map(int, (x, y))\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    max_x, max_y = 0, 0\n    for i in range(x, x + y):\n        if i % 2 == 0:\n            if i > max_x:\n                max_x = i\n            if i < max_y:\n                max_y = i\n    return max_x, max_y\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return \"{:b}\".format(int(round(sum(range(n, m+1))/m))).zfill(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    # float(int(bin(n)[2:])) == n\n    # int(str(bin(n)[2:])), int(str(bin(n)[2:])[::-1])\n    # int(str(bin(n)[2:])) == n\n    # round(n, 2) == int(n.to_bytes(2, 'big').hex())\n    # n = round(n, 2)\n    # return str(n).zfill(2)\n    # print(n)\n    return str(bin(n)[2:]).zfill(8)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n > m:\n        return \"-1\"\n    elif n > 0 and m > 0:\n        return int(round(n / m * 2 ** (n-m), 0))\n    else:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n < m:\n        return -1\n    a = bin(n)[2:]\n    m = int(m)\n    b = bin(m)[2:]\n    for i in range(len(a)):\n        if a[i] == '1':\n            a = a[:i] + '0' + a[i+1:]\n        else:\n            a = a[:i] + '1' + a[i+1:]\n    for i in range(len(b)):\n        if b[i] == '1':\n            b = b[:i] + '0' + b[i+1:]\n        else:\n            b = b[:i] + '1' + b[i+1:]\n    return str(int(a, 2) + int(b, 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return \"{:0{}b}\".format(n, m)[:-m"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    if m == 0:\n        return n\n    elif n == 0:\n        return \"0b\"\n    elif n == m:\n        return f\"{n:b}\".replace(\"0b\", \"\")\n    elif n < m:\n        res = []\n        for i in range(n, m + 1, 1):\n            res.append(i)\n        return \"\".join(map(str, res))\n    else:\n        res = []\n        for i in range(n, m + 1):\n            if len(str(i)) == 1:\n                res.append(i)\n            else:\n                res.append(i % 2)\n        return \"\".join(map(str, res))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    rounded = round(n / m)\n    rounded = str(rounded)\n    if len(rounded) == 1:\n        rounded = \"0\" + rounded\n    return \"0b\" + rounded"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n < m:\n        return \"-1\"\n    else:\n        ans = str(int(n / float(m - n) * 2)).zfill(int(abs(m - n) / 2))\n        return ans\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < m:\n        return \"-\"\n    \n    binary_n = bin(n)[2:]\n    binary_m = bin(m)[2:]\n    \n    if n == 1:\n        return binary_m + binary_n\n    elif n == 0:\n        return \"0b\" + binary_n + binary_m\n    else:\n        sum = 0\n        for digit in binary_n:\n            if digit == \"1\":\n                sum += 1\n            else:\n                sum -= 1\n        return \"0b\" + binary_m + binary_n[:sum] + binary_m[sum:]\n        \ndef is_prime(n):\n    \"\"\"Returns true if the number n is a prime number and false otherwise.\n    An integer n is prime if it is equal to the sum of its digits.\n    For example:\n    is_prime(2) returns true because 2 is its only prime number\n    is_prime(36) returns false because 36 is not a prime number\n    is_prime(37) returns true because 37 is the only prime number\n    is_prime(2) returns true because 2 is its only prime number\n    \"\"\"\n    if n < 3:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5,int(math.sqrt(n))+1,6):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return str(bin(n)[2:].zfill(8))\n    # the decimal point is the nearest integer to the right of the decimal point\n    elif n > m + 1:\n        return \"-1\"\n    # the decimal point is the nearest integer to the left of the decimal point\n    elif n == m + 1:\n        return str(bin(n)[2:].zfill(8)[::-1])\n    # so the decimal point has to be followed by one less than the binary number\n    elif n > m:\n        return \"0b\" + rounded_avg(n - 1, m) + str(bin(n)[2:].zfill(8)[::-1])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    x_sorted = sorted(set(x))\n    return x_sorted\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # get number of digits in each element\n    num_digits = [0, 0, 0]\n    for i in x:\n        num_digits[int(str(i)[0])] += 1\n    \n    # check if digits are even and return result\n    for i in range(len(num_digits)):\n        if num_digits[i] % 2 == 0:\n            return []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert all(x.isdigit() for x in x), 'All digits should be integers'\n    for i, digit in enumerate(x):\n        while all(digit % 10 == 0 for digit in list(str(i))):\n            yield i\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    l = []\n    x.sort()\n    while len(l) < len(x):\n        if x[l[-1]] % 10!= x[l[-1]] // 10:\n            l.append(x[l[-1]])\n        else:\n            break\n    return l\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_digit(n):\n        return n > 0 and n % 10 == 0\n    \n    def check(x, length):\n        l = []\n        for i in range(length):\n            if is_digit(x[i]):\n                l.append(x[i])\n        return l\n    \n    def order(l, l_len):\n        if l_len > len(l):\n            return\n        length = len(l)\n        for i in range(length):\n            if l[i] > l_len:\n                l[i], l_len = l_len, l[i]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    numbers = list(range(10))\n    for i in x:\n        numbers.remove(i)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    l = []\n    for i in x:\n        if i % 10 == 0:\n            if i not in l:\n                l.append(i)\n    \n    return l\n    \ndef main():\n    \"\"\"Run all tests.\n    \"\"\"\n    # unittest.main()\n    \n    # Test unique_digits()\n    test_unique_digits()\n    \n    # Test unique_digits()\n    test_unique_digits_2()\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return list(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return list(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sorted(set(x) - set(map(int, x)))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    arr.sort()\n    s = ''.join(sorted(arr))\n    r = []\n    for i in s:\n        if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8':\n            r.append(i)\n    return r\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Step 1: sort the array\n    arr.sort()\n    # Step 2: reverse the array\n    arr.reverse()\n    # Step 3: replace each digit with its name\n    arr_name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    # Step 4: repeat the process steps 2 and 3\n    return arr_name[:len(arr)]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr = sorted(arr)\n    result = []\n    for i in arr:\n        result.append(i)\n    result.reverse()\n    \n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    res = []\n    length = []\n    for number in arr:\n        if 0 <= number <= 9:\n            length.append(number)\n        else:\n            res.append(str(number))\n    return res[::-1]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(arr) == 0: return []\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Sort list\n    arr.sort()\n    # Reverse list\n    arr.reverse()\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    n = len(arr)\n    \n    # If arr is empty, return empty array\n    if n == 0:\n        return []\n    \n    # If the array contains only one number, return it\n    if n == 1:\n        return arr\n    \n    # Create a new array to store the resulting array\n    out = []\n    # Iterate through the array\n    for i in range(n):\n        # If the current digit is in the array, add it to the new array\n        if arr[i] in range(1, 10):\n            out.append(arr[i])\n    # Reverse the array and replace each digit in array with its name\n    out.reverse()\n    \n    # Return array\n    return out\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    arr.sort() # by index\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] >= 1 and arr[j] <= 9:\n            arr[i] = arr[j]\n            i += 1\n    return arr[i:] # returns the elements, but not the order of the array\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    new_arr = []\n    for i in arr:\n        name = \"\"\n        if i == 1 or i == -1:\n            name = \"One\"\n        elif i < 10:\n            name = \"F\" + str(i)\n        else:\n            name = str(i)\n        new_arr.append(name)\n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # assumes input array is sorted\n    # assumes no negative numbers are present, in other words, a 1 is present in the array\n    # assumes no repeated numbers in the array\n    \n    # index of the non-negative number is the position of the number in the array\n    # list of array numbers is sorted, then the first and last position of the number\n    # is the final index of the list\n    \n    # iterate through the array, and swap the numbers that are between 1 and 9 inclusive\n    # note that the input array is now sorted\n    arr = sorted(arr)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    factorial = [1, 2, 6, 24, 15]\n    list_of_fact = []\n    for i in range(n+1):\n        factorial[i] = factorial[i] * (i+1)\n    for i in range(1, n+1):\n        list_of_fact.append(factorial[i])\n    return list_of_fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Implement the function f.\n    factorial = []\n    for i in range(1, n+1):\n        factorial.append(i*(i+1))\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n >= 0, \"n should be non negative\"\n    factors = [1]\n    \n    if n == 1:\n        return factors\n    \n    if n == 2:\n        return factors + [2]\n    \n    while n!= 1:\n        factors = [n] + factors\n        n = n * n\n    \n    return factors"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    factorial = [1, 1]\n    for i in range(2,n+1):\n        factorial.append(factorial[i-1]*i)\n    return factorial\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Hint: Write your loop here\n    fact_list = [1]\n    n = n % len(fact_list)\n    for i in range(n, 0, -1):\n        fact_list = fact_list + [i * fact_list[-1]]\n    return fact_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    fact = [1]\n    for i in range(2, n + 1):\n        fact.append(i * fact[i - 1])\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    fact = [1]\n    for i in range(1, n+1):\n        fact.append(i * fact[i-1])\n    return fact\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    fact_list = [1]\n    for i in range(2, n + 1):\n        fact_list = [k + v for k, v in zip(fact_list, fact_list[1:])]\n    return fact_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    f = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            f.append(i * factorial_i(i))\n        else:\n            f.append(i * factorial_i(i - 1))\n    return f\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    fact = [1, 1, 1, 1, 1]\n    for i in range(n):\n        fact[i] = fact[i] * (i + 1)\n    return fac"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i+1)\n    return tuple(result)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    count, palindrome = 0, []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            palindrome.append(i)\n        else:\n            palindrome.append(i)\n            count += 1\n    return palindrome, count\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n == 0:\n        return ()\n    elif n == 1:\n        return (1, )\n    else:\n        even_odd = (n - 1) // 2\n        return (even_odd, n - even_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    def odd_even_palindrome(n):\n        odd_count = 0\n        even_count = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even, odd = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    even_odd_count = 0\n    even_odd_pali_list = []\n    odd_even_pali_list = []\n    even_odd_pali_list = [i for i in range(1, n + 1)]\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even_odd_palindrome_dict = {}\n    result = []\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    assert n > 1\n    even = 0\n    odd = 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: write your solution here\n    return 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = 0\n    for num in arr:\n        if num >= 0:\n            s += 1\n    return s\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return len(filter(lambda x: x.isdigit(), arr))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for i in arr:\n        if 0 <= i <= 9:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if not arr:\n        return 0\n    sum = 0\n    for item in arr:\n        sum += abs(item)\n    if sum:\n        return arr.count(sum)\n    else:\n        return 0"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def count_digits(arr):\n        res = 0\n        for n in arr:\n            res += n // 10 ** n % 10\n        return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    sum = 0\n    count = 0\n    for i in arr:\n        sum = sum + i\n        count = count + 1 if sum > 0 else count\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return len([i for i in arr if len(str(i)) > 0 and int(str(i)[-1]) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    res = 0\n    for num in arr:\n        if num > 0:\n            res += 1\n    return res\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        count += num > 0 and num % 10 > 0\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # your code\n    # swap the first and last element\n    arr[1], arr[-1] = arr[-1], arr[1]\n    # sort the array\n    arr.sort()\n    # perform right shift operations\n    cnt = 0\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            cnt += 1\n            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            arr[-1], arr[-1] = arr[-1], arr[-1]\n    # if we have no elements left, then return true\n    if cnt == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    pass\n    # 0 \n    # 1 \n    # 2 \n    # 3 \n    # 4 \n    # 5 \n    # 6 \n    # 7 \n    # 8 \n    # 9 \n    # 10 \n    # 11 \n    # 12 \n    # 13 \n    # 14 \n    # 15 \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # find start of non-decreasing order\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        # random position of the array\n        position = randint(start, end)\n        if arr[position] > arr[position+1]:\n            # swapping\n            arr[start], arr[position] = arr[position+1], arr[start]\n            start = start + 1\n            end = end - 1\n        else:\n            # decrementing\n            end = end - 1\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    arr = sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    left = arr[0]\n    for index in range(1, len(arr)):\n        if arr[index] < left:\n            return False\n        left = arr[index]\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    N = len(arr)\n    # find non-decreasing order\n    idx = 0\n    for i in range(N):\n        if arr[i] >= arr[i + 1]:\n            idx = i\n    # if it is possible to get non-decreasing order\n    if idx == N:\n        return True\n    else:\n        # if the given array is empty then return True\n        if arr == []:\n            return True\n        # else perform right shift operation\n        for i in range(idx + 1, N):\n            arr[i] = arr[i - 1]\n        # perform right shift operation\n        arr[idx] = arr[idx - 1]\n        # swap the elements\n        arr[idx - 1], arr[idx] = arr[idx], arr[idx - 1]\n        # return the sorted array\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Allocate an empty array to keep track of result\n    arr = []\n    \n    for n in arr:\n        arr.append(n)\n        \n    # Iterate through the array by performing left shift\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    \n    # In case the array is empty\n    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    p=0\n    n=len(arr)\n    for i in range(n):\n        p+=1\n        for j in range(1,p):\n            arr[i]=arr[i]+arr[i+j]\n            if arr[i]<arr[i+j]:\n                return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    i = 0\n    for j in range(N):\n        if i < N-1:\n            if arr[i] > arr[i+1]:\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n                i+=1\n            if arr[i] < arr[i+1]:\n                arr[i],arr[i+1] = arr[i+1],arr[i]\n                i+=1\n    if arr == sorted(arr):\n        return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    counter = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            counter = counter + 1\n    if counter == len(arr) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return False\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if lst1[0] < lst2[0]:\n        return exchange(lst1[1:], lst2[1:])\n    if lst2[0] < lst1[0]:\n        return exchange(lst1, lst2[1:])\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not lst1:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    lst1.sort()\n    lst2.sort()\n    lst_even = []\n    lst_odd = []\n    for x in lst1:\n        if x % 2 == 0:\n            lst_even.append(x)\n        else:\n            lst_odd.append(x)\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TO DO\n    # implement the function\n    return\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    s = test.lower()\n    \n    # convert string to list of lowercase letters\n    s = list(filter(lambda x: x.islower(), s))\n    \n    # initialize counts dictionary\n    counts = {}\n    # iterate over list and add number of occurrences\n    # to counts dictionary\n    for letter in s:\n        if letter in counts:\n            counts[letter] = counts[letter] + 1\n        else:\n            counts[letter] = 1\n    # return the most repeated letter\n    return counts\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    dic = {}\n    for l in test:\n        dic[l] = dic.get(l, 0) + 1\n    return dic"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    t = test.lower().split()\n    dict = collections.Counter(t)\n    dict.default_factory = None\n    return dict\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if test == '':\n        return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    hist = {}\n    \n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    hist = dict()\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    letters = set()\n    for letter in test:\n        letters.add(letter)\n    \n    counts = {}\n    for letter in letters:\n        count = letters.count(letter)\n        if count in counts:\n            counts[count] += 1\n        else:\n            counts[count] = 1\n    return counts\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Step 1:\n    # initialize a dictionary for letter counts\n    # add all letters to the dictionary and find the max value\n    # if there are multiple letters with the same count, return the first one\n    letterCounts = {}\n    for letter in test:\n        if letter not in letterCounts:\n            letterCounts[letter] = 1\n        else:\n            letterCounts[letter] += 1\n    # Step 2:\n    # sort the dictionary and return the most repeated key\n    # this is done here as we need to return all the keys which appeared once\n    # then we return the key as a tuple\n    return letterCounts.items()[:1][0][0]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #hist = {}\n    hist = collections.defaultdict(int)\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    test = test.lower()\n    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 0\n        counts[letter] += 1\n    for key in counts:\n        counts[key] = counts[key] / len(test)\n    return counts"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def is_palindrome(s,c):\n        l,r = len(s),len(c)\n        i,j = 0,l-1\n        while i<l and j>=0:\n            if s[i]==c[j]:\n                i+=1\n                j-=1\n            else:\n                return False,s[i:j+1]\n        return True,s[i:l+1]\n    def is_palindrome2(s,c):\n        for i in range(len(c)//2):\n            if s[i]!=c[len(s)-i-1]:\n                return False\n        return True\n    def is_palindrome3(s,c):\n        def is_palindrome(s,c):\n            if len(s) == len(c) and s == c:\n                return True\n            l,r = len(s),len(c)\n            for i in range(l-1,r-1, -1):\n                if s[i]!= c[i]:\n                    return False\n            return True\n        for i in range(l,r):\n            if s[i]!= c[i]:\n                return False\n        return True\n    def palindrome_check(s,c):\n        r = reverse_delete(s,c)\n        if is_palindrome(s,c):\n            return r\n        if is_palindrome2(s,c):\n            return r\n        if is_palindrome3(s,c):\n            return r\n        return False\n    return palindrome_check(s,c)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if s == s[::-1] or c == c[::-1]:\n        return s,False\n    if len(s) == len(c):\n        return s,True\n    if s[-1] == c[-1]:\n        return s[:-1],False\n    return s[:-1] + s[-1],True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    result = []\n    try:\n        for i in range(len(s)):\n            if s[i] in c:\n                s = s[:i] + s[i+1:]\n            else:\n                result.append(s[i])\n    except:\n        pass\n    if s == c:\n        return (''.join(result), True)\n    else:\n        return (''.join(result), False)\ndef max_of_two(s,c):\n    \"\"\"Task\n    Given two strings s and c, return the maximum of the two strings if either string is empty, or maximum of the two strings if the first is empty.\n    If both strings are empty, return -1.\n    The maximum of the two strings will be the smallest of any three.\n    You should return the maximum as a string and True/False for the check.\n    Example\n    For s = \"abc\", c = \"ab\", the result should be ('abc',True)\n    For s = \"abc\", c = \"a\", the result should be ('abc',False)\n    For s = \"abc\", c = \"\", the result should be ('abc',False)\n    For s = \"abc\", c = \"\", the result should be ('abc',True)\n    \"\"\"\n    if len(s)==0:\n        return (''.join(s), True)\n    if len(c)==0:\n        return (''.join(s), False)\n    if len(s)<len(c):\n        return (''.join(s), True)\n    if len(s)>len(c):\n        return (''.join(s), False)\n    if s==c:\n        return (''.join(s), True)\n    if s[:len(c)]<c:\n        return (''.join(s[:len(c)]), True)\n    else:\n        return (''.join(s[:len(c)]), False)\ndef reverse_string(s):\n    \"\"\"Task\n    Given a string s, return the string reversed.\n    If the string is empty, return an empty string.\n    You should return the result in lowercase characters.\n    Example\n    For s = \"abc\", the result should be \"cba\"\n    For s = \"abc\", the result should be \"a\"\n    \"\"\"\n    result = ''\n    if len(s) == 0:\n        return ''\n    if len(s) > 1:\n        for i in range(len(s)-1):\n            result = result + s[i]\n            result += s[-1-i]\n    return result\ndef max_of_three(s,c):\n    \"\"\"Task\n    Given three strings s and c, return the maximum of the three strings if either string is empty, or maximum of the three strings if the first is empty.\n    If both strings are empty, return -1.\n    The maximum of the three strings will be the smallest of any three.\n    You should return the maximum as a string and True/False for the check.\n    Example\n    For s = \"abc\", c = \"ab\", the result should be ('abc',True)\n    For s = \"abc\", c = \"a\", the result should be ('abc',False)\n    For s = \"abc\", c = \"\", the result should be ('abc',False)\n    For s = \"abc\", c = \"\", the result should be ('abc',True)\n    \"\"\"\n    if len(s)==0:\n        return (''.join(s), True)\n    if len(c)==0:\n        return (''.join(s), False)\n    if len(s)<len(c):\n        return (''.join(s), True)\n    if len(s)>len(c):\n        return (''.join(s), False)\n    if s==c:\n        return (''.join(s), True)\n    if s[:len(c)]<c:\n        return (''.join(s[:len(c)]), True)\n    else:\n        return (''.join(s[:len(c)]), False)\ndef min_of_three(s,c):\n    \"\"\"Task\n    Given three strings s and c, return the minimum of the three strings if either string is empty, or minimum of the three strings if the first is empty.\n    If both strings are empty, return -1.\n    The minimum of the three strings will be the smallest of any three.\n    Yo"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if c == \"\":\n        return s,False\n    if c in s:\n        index = s.index(c)\n        return s[:index],False\n    else:\n        s = list(s)\n        s.reverse()\n        return \"\".join(s),True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    global cache\n    res = \"\"\n    def check_s(s, c):\n        if c in s:\n            return True\n        else:\n            return False\n    for c in s:\n        if check_s(s,c) == True:\n            res += c\n            cache[c] = True\n    return res,cache[c] == True\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if c==s[::-1]:\n        return s, True\n    return s[::-1], False\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Create the palindrome string\n    palindrome = ''\n    # Generate the palindrome\n    for letter in s:\n        # Check if the letter matches the c\n        if letter == c:\n            palindrome = palindrome + letter\n        # Else if it does not match the c\n        else:\n            # If it is the last letter, then there are no equal letters in the string\n            # and the result should be (c,False)\n            if (len(palindrome) < len(c)):\n                return ('',False)\n            # Else, the c is not equal to the first letter, so let's append it and set it to false\n            else:\n                palindrome = palindrome + letter\n    # If the result is a palindrome, return it\n    if (len(palindrome) == len(c)):\n        return (palindrome,True)\n    else:\n        return (palindrome,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    #make a dictionary to convert c to the key\n    dic = {chr(ord(c) - 1): c for c in s}\n    #reverse the dictionary keys, so that it's a reverse\n    dic = {v: k for k, v in dic.items()}\n    #reverse the dictionary values\n    dic = {v: k for k, v in dic.items()}\n    #reverse the keys for easier comparison\n    dic = {v: k for k, v in dic.items()}\n    #get the string\n    s = s[::-1]\n    #check if the result string is a palindrome\n    return (s,dic[s]==dic[c])\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    i = 0\n    j = len(s) - 1\n    palindrome = True\n    while i < j:\n        if s[i] == c:\n            i = i + 1\n        else:\n            j = j - 1\n            palindrome = False\n            break\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    rev_s = \"\"\n    rev_c = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            rev_s += s[i]\n        else:\n            rev_s += rev_s[:i] + rev_s[i+1:]\n            rev_c += c[i]\n    if rev_s == rev_c:\n        return (rev_s, True)\n    else:\n        return (rev_s, False)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for i in lst:\n        num = len(i)\n        if num % 2 == 1:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = []\n    for string in lst:\n        string = string.replace(\" \", \"\")\n        count = 0\n        for i in range(len(string)):\n            if string[i] == \"0\":\n                count = count + 1\n        if count % 2!= 0:\n            result.append(\"the number of odd elements \" + str(count))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    even_list = []\n    for i in lst:\n        for e in i:\n            if e.isdigit():\n                even_list.append(int(e))\n    return even_list\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    result = []\n    for i in lst:\n        count = 0\n        if \"\".join(map(str, i)).isdigit():\n            count += 1\n        \n        if count % 2 == 1:\n            result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(count, i, count))\n            \n    return result\n    \n    "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return map(lambda x:len(x), filter(lambda x:x.isdigit(), lst))\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    return [f\"the number of odd elements {n} the str{i} of the {n}put.\",\n            f\"the number of odd elements {n} the str{i} of the {n}put.\"\n            for n, i in enumerate(lst, start=1)]"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return [lst[0]]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n            \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    d_lst = []\n    for i in range(len(lst)):\n        l = lst[i]\n        if l.isdigit():\n            d = len(l)\n            d_lst.append(d)\n    return [\"the number of odd elements \"+str(len(d_lst))+\" the str\"+str(d_lst)+\" of the\"+str(i)+\"of the\"+str(len(lst))+\"n\"+\" of the \" + str(lst) + \"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the \" + str(len(lst))+\"n\"+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\"+\"of the\"+str(len(lst))+\"n\""
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    count = 0\n    for i in lst:\n        count = count + 1 if i.isdigit() else count\n    \n    for i in lst:\n        if int(i) % 2!= 0:\n            result.append(\"the number of odd elements {}n the str{} of the {}nput\".format(count, count, count))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    num_list = [0] * len(lst)\n    for i in range(len(lst)):\n        num_list[i] = lst[i].count(\"0\")\n    return num_list\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(nums)\n    s = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    window = -nums[0]\n    min_sum = 0\n    for i in range(1, len(nums)):\n        if nums[i] + window < nums[i - 1]:\n            window = nums[i] + window\n            min_sum += nums[i - 1] - window\n        else:\n            window = nums[i] + window\n            min_sum += nums[i - 1] - window\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    nums.sort()\n    \n    start = 0\n    end = 0\n    min_sum = float('inf')\n    for end in range(len(nums)):\n        if start == 0 or end == len(nums) - 1:\n            start_sum = nums[end]\n            min_sum = min(min_sum, start_sum)\n        else:\n            start_sum = nums[start] + nums[end]\n            if start_sum < min_sum:\n                min_sum = start_sum\n    return min_sum\n    \n    \n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    minimum_sum = float('inf')\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(nums)\n    if n < 1:\n        return 0\n    \n    i, minSum, ans = 0, float('inf'), 0\n    # Find the minSum\n    while i < n:\n        # Keep adding values until we reach our starting index\n        while i < n and nums[i] > 0:\n            nums[i] -= 1\n            i += 1\n        # If we reach the last value, we should add it\n        if i < n:\n            minSum += nums[i]\n        i += 1\n    \n    # Find the minSum until the starting index is reached\n    while i < n:\n        minSum += nums[i]\n        i += 1\n    \n    # Now check that we have a solution\n    if minSum < ans:\n        ans = minSum\n    return ans\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # construct a running sum\n    running_sum = sum(nums)\n    \n    # use a window to store the running sum\n    for i in range(len(nums)):\n        running_sum -= nums[i]\n        \n        # update running_sum if it is not running sum sum\n        if running_sum < 0:\n            running_sum = 0\n            \n    return running_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Time: O(n) | Space: O(n)\n    if not nums: return 0\n    min_sum = float(\"inf\")\n    for i, num in enumerate(nums):\n        if sum(nums[:i]) + sum(nums[i:]) < min_sum:\n            min_sum = sum(nums[:i]) + sum(nums[i:])\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_sum, curr_sum = 0, 0\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        min_sum = max(curr_sum, min_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    subArraySum = []\n    max_sum = 0\n    min_sum = 0\n    for i in range(len(nums)):\n        max_sum = max(max_sum + nums[i], nums[i])\n        min_sum = min(min_sum + nums[i], nums[i])\n        if max_sum - min_sum > 0:\n            subArraySum.append(max_sum - min_sum)\n            min_sum = max_sum\n    if len(subArraySum) == 0:\n        return 0\n    return min(subArraySum)\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def max_water_bucket_maintain(grid, capacity):\n        n = len(grid)\n        max_water = 0\n        for i in range(n):\n            for j in range(n):\n                # build the grid\n                if capacity >= grid[i][j]:\n                    capacity -= grid[i][j]\n                    grid[i][j] = 0\n                    max_water += 1\n                    if capacity < 0:\n                        return 0\n        return max_water\n    def min_water_bucket_maintain(grid, capacity):\n        n = len(grid)\n        min_water = grid[0][0]\n        for i in range(n):\n            for j in range(n):\n                if capacity < grid[i][j]:\n                    capacity -= grid[i][j]\n                    grid[i][j] = 0\n                    min_water += 1\n                    if capacity < 0:\n                        return 0\n        return min_water\n    n = len(grid)\n    if n == 1:\n        return 0\n    s = min_water_bucket_maintain(grid, capacity)\n    if s == 0:\n        return 0\n    for i in range(1, n):\n        s = max_water_bucket_maintain(grid, capacity)\n        if s < 0:\n            return 0\n        capacity += min_water_bucket_maintain(grid, capacity)\n    return s\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n, m = len(grid), len(grid[0])\n    def solve(grid, bucket_capacity):\n        if n == 1 or m == 1:\n            return 0\n        if n == 0 or m == 0:\n            return 0\n        # find the shortest path to a end point\n        # path = path_shortest_path(grid, n, m)\n        # start = path[0]\n        # end = path[-1]\n        # return len(grid[start][end]) + solve(grid, bucket_capacity)\n        return solve_by_depth(grid, n, m, bucket_capacity)\n    return solve(grid, bucket_capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    M, N = len(grid), len(grid[0])\n    if not grid or not grid[0]: return 0\n    q = collections.deque()\n    q.append((0, 0, 0))\n    bucket_capacity = 1\n    i = 0\n    while q:\n        i, j, num = q.popleft()\n        if num < bucket_capacity:\n            bucket_capacity = num\n            continue\n        for direction in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n            if 0 <= direction[0] < M and 0 <= direction[1] < N and grid[direction[0]][direction[1]] == 0:\n                grid[direction[0]][direction[1]] = num\n                q.append((direction[0], direction[1], num))\n                break\n        if i == M - 1 and j == N - 1:\n            return num\n    return 0"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    if rows * cols!= capacity:\n        return 0\n    if rows == 1:\n        return 1 if sum(grid[0]) == capacity else 0\n    buckets = [Bucket([], capacity) for _ in range(rows * cols)]\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 0:\n                continue\n            water_used = 0\n            for i in range(rows):\n                for j in range(cols):\n                    if grid[i][j] == 1:\n                        buckets[i * cols + j].add_bucket(grid[i][j])\n                        water_used += 1\n            buckets[row].free_bucket(water_used)\n    return sum(buckets)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    import itertools\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if (grid == None or capacity < 0):\n        return 0\n    \n    if (grid == None or len(grid[0])!= len(grid)):\n        return 0\n    \n    if (grid == None or len(grid)!= len(grid[0])):\n        return 0\n    \n    grid = [[0] * len(grid[0]) for i in range(len(grid))]\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            grid[row][col] = 0\n    \n    bucket_capacity = capacity\n    \n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == 0:\n                bucket_capacity -= 1\n    \n    if (bucket_capacity < 1):\n        return 0\n    \n    # divide into buckets\n    buckets = []\n    max_buckets = []\n    \n    # build buckets\n    for row in range(len(grid)):\n        bucket_count = int(math.pow(bucket_capacity, row + 1))\n        max_bucket = [0] * bucket_count\n        \n        for col in range(len(grid[0])):\n            # if the bucket is not filled yet, update\n            if grid[row][col] == 0:\n                grid[row][col] = 1\n                bucket_count -= 1\n                \n                # add the bucket if it is not filled yet\n                if bucket_count == 0:\n                    max_buckets.append(max_bucket)\n                    bucket_count = 1\n                    \n                    # update the bucket capacity\n                    bucket_capacity *= 2\n                    \n            # add the bucket if it is filled already\n            else:\n                max_buckets.append(max_bucket)\n    \n    # check max buckets\n    for bucket in max_buckets:\n        if len(bucket) > 0:\n            return bucket[-1]\n    \n    return 0\n    \ndef count_empty(grid, buckets):\n    \"\"\"\n    We have one more bucket for each empty cell in the grid.\n    At a given depth, we need to solve the problem for all possible buckets\n    to find the number of empty cells that need to be filled.\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def helper(grid, bucket_capacity):\n        if len(grid) == 1:\n            return 0\n        \n        # find the rows of rows that can contain all units of water\n        rows_to_fill = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 1:\n                    if j+1 < len(grid[i]) and grid[i][j+1] == 0:\n                        rows_to_fill.append([i,j])\n        \n        # find the columns of columns that can contain all units of water\n        cols_to_fill = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[j][i] == 1:\n                    if j-1 >= 0 and grid[j-1][i] == 0:\n                        cols_to_fill.append([i,j])\n        \n        # find the rows of rows that can contain water only\n        rows_to_fill.remove(0)\n        for i in rows_to_fill:\n            for j in range(len(grid[i])):\n                if grid[i][j] == 0 and j+1 < len(grid[i]) and grid[i][j+1] == 1:\n                    rows_to_fill.append(i)\n        \n        # find the columns of columns that can contain water only\n        cols_to_fill.remove(0)\n        for i in cols_to_fill:\n            for j in range(len(grid[i])):\n                if grid[j][i] == 0 and j-1 >= 0 and grid[j-1][i] == 1:\n                    cols_to_fill.append(i)\n        \n        # add up the number of rows to fill in rows that can contain water\n        total_rows = len(rows_to_fill)\n        total_cols = len(cols_to_fill)\n        bucket_capacity -= total_rows\n        \n        # add up the number of columns to fill in columns that can contain water\n        total_cols -= len(cols_to_fill)\n        bucket_capacity -= total_cols\n        \n        # make sure the buckets are still in the correct order\n        for i in range(len(rows_to_fill)):\n            for j in range(total_cols):\n                if buckets[i][j] == 0 and buckets[rows_to_fill[i]][j] == 1:\n                    buckets[i][j] = bucket_capacity\n                    bucket_capacity -= 1\n        \n        for i in range(len(cols_to_fill)):\n            for j in range(total_rows):\n                if buckets[j][i] == 0 and buckets[j][total_cols-1-i] == 1:\n                    buckets[j][i] = bucket_capacity\n                    bucket_capacity -= 1\n        \n        # return the number of rows to fill\n        return len(rows_to_fill) + len(cols_to_fill)\n    \n    bucket_capacity = 1\n    n = len(grid)\n    buckets = [[0] * len(grid[0]) for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            buckets[i][j] = 1\n    buckets[0][0] = 1\n    res = helper(grid, bucket_capacity)\n    return res\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Create a matrix to hold the unit of water\n    water_unit = [1] * len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    import heapq\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sorted_list = sorted(arr, reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Your code here\n    lst = []\n    for element in arr:\n        lst.append(bin(element).replace(\"b\",\"\")[2:])\n    lst.sort()\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if int(lst[i]) == 0 and int(lst[j]) == 0:\n                continue\n            if int(lst[i]) > int(lst[j]):\n                lst[i],lst[j] = lst[j],lst[i]\n    return lst\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # The following is the code for sorting in ascending order\n    # This is a naive implementation, you can change it if you want\n    # but it is an O(n) operation\n    # s = [0,0,0,0,0]\n    # for i in range(len(arr)):\n    #     if arr[i] > 0:\n    #         for j in range(i+1, len(arr)):\n    #             if arr[j] > 0:\n    #                 s[i] = s[i] + 1\n    #                 arr[j] = 0\n    #             else:\n    #                 s[i] = s[i] + 1\n    #                 arr[j] = arr[j] - 1\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    len_arr = len(arr)\n    for i in range(len_arr - 1):\n        for j in range(len_arr - 1 - i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    index_value = []\n    for i in range(len(arr)):\n        value = 0\n        for j in range(len(arr)):\n            value += arr[j][i]\n        if value % 2 == 0:\n            index_value.append(arr[j][i])\n    return index_value\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # NOTE: This function must return an array of the same length as arr.\n    # NOTE: If you want to write an algorithm that works for any size of the input,\n    #       but for any size of the output, you may use the array object of type list.\n    # NOTE: Check out the discussion of Python lists, for example,\n    #       http://docs.python.org/2/library/functions.html#map\n    # NOTE: In order to sort arrays, use sort function on the array, and\n    #       convert the result to a list.\n    # NOTE: Return a new list after sorting the input.\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sorted_array = sorted(arr, key=lambda x: x if x % 2 == 0 else 0)\n    return sorted_array\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    zero_count = 0\n    one_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n        elif i == 1:\n            one_count += 1\n    sorted_arr = sorted(arr, key=lambda x: (x // zero_count, x % zero_count, x))\n    sorted_arr += sorted(arr, key=lambda x: (x // one_count, x % one_count, x))\n    return sorted_arr\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    for c in s:\n        if c.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]:\n            result.append(c)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(s) == 0:\n        return []\n    count_n = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'y' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U' or s[i] == 'Y':\n            count_n += 1\n        else:\n            continue\n    if count_n == n:\n        return [\" \"]\n    return select_words(s[:], n) + select_words(s[n:], n)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    res = []\n    for word in s:\n        if word.isalpha() and len(word) <= n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    words = []\n    for c in s:\n        if c.lower() in consonants:\n            words.append(c.lower())\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return list(filter(lambda word: word[:n] not in [' ', ''], s.lower().split(' ')))"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    list_word = []\n    if len(s) == 0:\n        return list_word\n    \n    if len(s) % n!= 0:\n        return list_word\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if s == '':\n        return []\n    else:\n        return [i for i in re.findall('[A-Za-z]*', s) if len(i) >= n]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    words = []\n    word = []\n    # a_s = \"A\"\n    # word.extend(a_s)\n    # word.extend(a_s[1::])\n    \n    # check if the string is empty or not\n    if s == \"\":\n        return words\n    # if string is empty we return the whole list\n    elif len(s) == 0:\n        return words\n    # else we keep checking the characters\n    else:\n        for i in range(len(s)):\n            # if the character is in the string\n            if s[i] in \"aeiou\":\n                # if it is not a vowel we append it to the word\n                if s[i] not in \"aeiouAEIOU\":\n                    word.append(s[i])\n        for i in range(len(word)):\n            # if the word is not empty, the vowel is in the word\n            if word[i] not in \"aeiouAEIOU\":\n                # if it is a vowel we append it to the list\n                if word[i] not in \"aeiouAEIOU\":\n                    words.append(word[i])\n        return words\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    \n    result = []\n    \n    # Check if string contains letters\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result.append(s[i])\n    \n    # Check if string contains more than 2 letters\n    for i in range(len(s)):\n        if len(s[i]) == 1:\n            if s[i].isalpha():\n                result.append(s[i])\n    \n    # If string has more than 2 letters, it's not a letter that can be in a word\n    if len(s) % 2 == 1:\n        result.append(s[len(s)//2])\n    \n    # Return the result\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    n_words = {}\n    for word in s.split():\n        if word.count(\"a\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"a\")[0])\n        if word.count(\"e\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"e\")[0])\n        if word.count(\"i\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"i\")[0])\n        if word.count(\"o\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"o\")[0])\n        if word.count(\"u\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"u\")[0])\n        if word.count(\"y\") > 0:\n            if word not in n_words:\n                n_words[word] = set()\n            n_words[word].add(word.split(\"y\")[0])\n    return list(n_words.keys())\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # we can't use below to check if both word and word[1] are vowel\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n    left_consonant = word[0]\n    right_consonant = word[1]\n    for vowel in vowels:\n        if left_consonant == vowel or right_consonant == vowel:\n            return '', ''\n    # return left_consonant and right_consonant\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Find the index of the closest vowel in the right side of the word\n    # Input: A string word, a string vowel from the left side of the word\n    # Output: The closest vowel index\n    def closest_vowel(word, vowel):\n        left_index = -1\n        right_index = -1\n        for i in range(len(word)-1):\n            if word[i]!= vowel:\n                left_index = i\n                break\n        for i in range(len(word)-1, -1, -1):\n            if word[i]!= vowel:\n                right_index = i\n                break\n        return min(left_index, right_index)\n    \n    # If both end_char and start_char are not in the word, return empty string\n    if word[-1] not in CLOSING_VOWELS and word[0] not in CLOSING_VOWELS:\n        return \"\"\n    if word[-1] in CLOSING_VOWELS or word[0] in CLOSING_VOWELS:\n        return \"\"\n    \n    # Only consider the beginning and end of the word\n    start_char = word[0]\n    end_char = word[-1]\n    # Check if the middle char is in the word\n    if word[1::2] == word[::2]:\n        if start_char in CLOSING_VOWELS or end_char in CLOSING_VOWELS:\n            return \"\"\n        if start_char in CLOSING_VOWELS:\n            return closest_vowel(word, start_char)\n        if end_char in CLOSING_VOWELS:\n            return closest_vowel(word, end_char)\n    # Otherwise, the middle char is not in the word\n    elif start_char in CLOSING_VOWELS and end_char not in CLOSING_VOWELS:\n        # Check if the middle char is in the word\n        if word[1::2] == word[::2]:\n            if start_char in CLOSING_VOWELS:\n                return closest_vowel(word, start_char)\n            if end_char in CLOSING_VOWELS:\n                return closest_vowel(word, end_char)\n        # Otherwise, the middle char is not in the word\n        else:\n            return closest_vowel(word, end_char)\n    # Otherwise, the middle char is not in the word\n    else:\n        return closest_vowel(word, end_char)\n    \ndef get_closest_vowel_v2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case insensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst_vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if word.count(\"a\") < word.count(\"e\") and word.count(\"i\") < word.count(\"o\") and word.count(\"u\") < word.count(\"A\") \\\n    and word.count(\"E\") < word.count(\"I\") and word.count(\"O\") < word.count(\"U\"):\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Write your code here.\n    word = word.lower()\n    i = 0\n    j = len(word) - 1\n    while i < j:\n        if word[i] == word[j]:\n            i += 1\n        else:\n            break\n    vowel = word[i:j]\n    if len(vowel) > 0:\n        return vowel\n    else:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = word.split(\" \")\n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    minimum = float(\"inf\")\n    return next((vowel for vowel in words if vowel in vowels), \"\")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    vowels = \"aeiouy\"\n    \n    left_closest = word.lower()[:-2]\n    right_closest = word.lower()[-2:]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    closest_vowel = \"\"\n    word_vowels = []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Create a lexer for the given input string.\n    lexer = Lexer(word)\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return_str = \"\"\n    \n    for i in range(len(word) - 2):\n        if word[i:i+3].lower() in VOWELS:\n            return_str += word[i:i+3] + \" \"\n        else:\n            return_str += word[i] + \" \"\n    return_str += word[i+3:]\n    \n    return return_str\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #dfs is used\n    def dfs(lst):\n        if len(lst)==1:\n            return lst == ['()']\n        if len(lst)==2:\n            return lst[0]+lst[1]+dfs(lst[1:])\n        else:\n            return dfs([lst[0]]+lst[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst)%2==0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    '''\n    Given: a list of strings.\n    Return: a string of the form 'Yes' or 'No'.\n    '''\n    # solve this with a memoization\n    def is_good(s):\n        return is_valid(s)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    stack = []\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    opens = []\n    closers = []\n    \n    #initalize the result\n    result = True\n    \n    #loop through the string and find the valid parentheses\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            opens.append(lst[i])\n        else:\n            if len(opens) == 0 or opens[-1]!= ')':\n                result = False\n            opens.pop()\n    \n    #if there are not valid parentheses, return 'No'\n    if len(opens) == 0:\n        return result\n    \n    #initalize the string with opens\n    string = ''.join(opens)\n    \n    #loop through the string and check if the string is balanced\n    for i in range(len(string)):\n        if string[i] == '(':\n            closers.append(string[i])\n        else:\n            if len(closers) == 0 or closers[-1]!= ')':\n                result = False\n            closers.pop()\n    \n    #if there are not valid parentheses, return 'No'\n    if len(closers) == 0:\n        return result\n    \n    #return 'Yes' if there is a way to make a good string, otherwise 'No'\n    return 'Yes' if result == True else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    lst2 = []\n    s = \"\"\n    for i in lst:\n        if i in '()':\n            lst2.append(i)\n        else:\n            s+=i\n    lst3 = []\n    s2 = \"\"\n    for i in lst2:\n        s2+=i\n        s2 += ')'\n        if s2 in s:\n            return 'Yes'\n        if s2 == ')':\n            return 'No'\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    stack = []\n    match = True\n    for item in lst:\n        if item == '(':\n            stack.append(item)\n        else:\n            if not stack or stack[-1]!= item:\n                match = False\n                break\n            stack.pop()\n    if stack:\n        return False\n    return match\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Approach 1: Check each char in the string and check if the matches are balanced\n    # Time: O(n)\n    # Space: O(1)\n    stack = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return 'No'\n            index = stack.pop()\n            if index == i:\n                return 'No'\n            if lst[index] == ')':\n                if not stack:\n                    return 'No'\n                else:\n                    return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def backtrack(lst, i, j):\n        if len(lst[i])!= j - i + 1 or lst[i] == lst[j]!= '(', False\n        if j == len(lst[i]) and i > 0:\n            return False\n        if j == len(lst[i]):\n            return True\n        if lst[i] == lst[j] == '(':\n            return backtrack(lst, i + 1, j)\n        return backtrack(lst, i, j + 1)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for i in lst:\n        if ')' in i:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    result = []\n    if k <= 0:\n        return result\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    res = arr[:]\n    for i in range(k):\n        res.sort()\n        res.pop(0)\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # sort the array\n    arr.sort()\n    # return the maximum from the sorted array\n    return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # O(N*log(N))\n    def binary_search(arr, k, lo, hi):\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if arr[mid] > k:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return lo\n    return sorted(arr, key=lambda x: binary_search(arr, x, 0, len(arr) - 1))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Initialize max_i to -inf\n    max_i = -math.inf\n    # A list to store the values\n    max_list = []\n    # Initialize output\n    for i in range(len(arr)):\n        # If i is smaller than k\n        if arr[i] < k and i > max_i:\n            # Go to next index\n            continue\n        # Increment max_i\n        max_i = max(max_i, i)\n        # Push the max_i to max_list\n        max_list.append(arr[i])\n    # Return the sorted list\n    return max_list\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    res = arr[0:k]\n    \n    for i in range(k):\n        res.sort()\n    \n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # O(n) time | O(1) space\n    # arr_size = len(arr)\n    # k = arr_size - k\n    # return [min(arr[i], arr[i+k]) for i in range(0, arr_size - k + 1)]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def knapSack(arr, k, n, memo):\n        if memo[n]!= None:\n            return memo[n]\n        if n == 0 or k == 0:\n            return []\n        if k == n:\n            return arr\n        if arr[n-1] <= k:\n            left = knapSack(arr, k-arr[n-1], n-1, memo)\n        else:\n            left = knapSack(arr, k, n-1, memo)\n        if k < arr[n-1]:\n            return left + [arr[n-1]]\n        else:\n            return left\n    return knapSack(arr, k, len(arr), {})\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    arr.sort()\n    k = len(arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return sorted(arr)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    odd = 0\n    even = 0\n    for x in lst:\n        if x%2==0:\n            even +=x\n        else:\n            odd +=x\n    return odd + even\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum += i\n    return sum\n    "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    odd_sum = 0\n    even_sum = 0\n    for number in lst:\n        if number%2 == 0:\n            odd_sum+=number\n        else:\n            even_sum+=number\n    return odd_sum+even_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    odd_lst = []\n    even_lst = []\n    for i in lst:\n        if i % 2 == 0:\n            even_lst.append(i)\n        else:\n            odd_lst.append(i)\n    return sum(odd_lst) + sum(even_lst)\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    answer = 0\n    even = list(filter(lambda x: x%2==0, lst))\n    for i in even:\n        answer += i\n    return answer\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if lst == None:\n        return 0\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total = total + num\n    return total\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    odd_sum=0\n    even_sum=0\n    for i in lst:\n        if i%2!=0:\n            even_sum+=i\n        else:\n            odd_sum+=i\n    return odd_sum+even_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return sum(lst[i % 2] for i in range(len(lst)) if i % 2 == 0)"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    odds = []\n    evens = []\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    odds = set(odds)\n    evens = set(evens)\n    \n    for i in odds:\n        sum = sum + i\n    for i in evens:\n        sum = sum + i\n    return sum\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    odd_list = []\n    for n in lst:\n        if n%2==0:\n            odd_list.append(n)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    #we will find the min_element in the array\n    min_element = 1\n    \n    #we will find the max_element in the array\n    max_element = max(arr)\n    \n    #we will find the count_element in the array\n    count_element = 1\n    for i in range(k):\n        if arr[i] == '0' and i >= min_element:\n            count_element += 1\n        elif arr[i] == '0' and i < max_element:\n            count_element -= 1\n        \n    #now we should add the min_element and max_element\n    return count_element*min_element + max_element\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    for x in arr:\n        result += x // 10 ** (k - 1)\n        result %= 10 ** k\n    return result\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    sum = 0\n    for i in arr:\n        sum += int(str(i)[:k])\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and k > 1:\n            sum += int(str(arr[i])[:2])\n            k -= 2\n        else:\n            sum += arr[i]\n    return su"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # a=[]\n    # for i in arr:\n    #     a.append(i%10)\n    # a.sort()\n    # if len(a) < k:\n    #     a = list(map(str,arr))\n    #     a.sort()\n    #     return sum(a[:k])\n    # return 0\n    n = len(arr)\n    l, r = 0, n\n    res = 0\n    while l < r:\n        m = (l + r) // 2\n        nums = [int(x) for x in str(arr[m])]\n        nums.sort()\n        if len(nums) < k:\n            l = m + 1\n        else:\n            res = max(res, arr[m] + nums[-1] + arr[m - k])\n            l = m + 1\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    sum = 0\n    for num in arr:\n        if len(str(num)) > 2:\n            sum += num\n        else:\n            sum += int(str(num)[:2])\n    return sum + k\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sum = 0\n    if len(arr) < 2:\n        return sum\n    \n    for num in arr[1:]:\n        sum += int(str(num)[:2])\n    \n    if sum % 10 == k:\n        return sum\n    else:\n        return add_elements(arr[1:], k)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        if len(str(arr[i])) < k:\n            sum += arr[i]\n        else:\n            sum += int(str(arr[i])[:k])\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return sum([int(e) for e in str(int(''.join(arr))+k) if len(str(int(''.join(arr))+k)) == 2])\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    k = max(1, k)\n    sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    list_odd_collatz = []\n    num = n\n    \n    # \n    # TODO: Implement a function for get_odd_collatz() that finds all the odd numbers in a given sequence.\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    collatz = []\n    def odd(n):\n        \"\"\"\n        If the current number is odd, return the sum of 1 and 2. Otherwise, return the sum of 3 and 1.\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    collatz_seq = [1]\n    for i in range(2, n):\n        if i%2 == 0:\n            collatz_seq.append(i)\n        else:\n            num = collatz_seq[-1] + (collatz_seq[-2]*2)\n            collatz_seq.append(num)\n    return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # O(N) time | O(1) space\n    # return list(map(lambda n: (n + 1) if n % 2 else (n * 3) + 1, range(n)))\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    \n    collatz = [1]\n    while n!= 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return collatz[::-1]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    l = [1]\n    # Try to find a sequence that starts with 1, and is odd.\n    # While not all sequences have been found, restart the sequence sequence.\n    while not all(i % 2 == 0 for i in l):\n        # Check to see if the last element in l is odd.\n        # If so, add 1 to the list of last element.\n        if len(l) > 1:\n            l.append(l[-1]+1)\n        else:\n            l.append(1)\n    # Return the sorted list of odd numbers.\n    return l\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even_collatz_list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    collection = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            collection.append(i)\n        else:\n            collection.append(3 * i + 1)\n    return collection\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    for i in range(0,n):\n        if (i%2==0):\n            result.append(i)\n        else:\n            if (i+1)%3 == 0:\n                result.append(i+1)\n            else:\n                result.append(i+1)\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return [1, n // 2]\n    else:\n        odd_collatz = [1, n // 2]\n        for i in range(3, n, 2):\n            if n % i == 0:\n                odd_collatz.append(i)\n        return odd_collatz\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    year = int(date[:4])\n    month = int(date[5:7])\n    day = int(date[8:10])\n    \n    if day < 1 or day > 31:\n        return False\n    if month not in range(1,13):\n        return False\n    if year < 2000 or year > 2100:\n        return False\n    if month in months or day > 30:\n        return False\n    \n    return True\n    \n    \n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if date.lower().strip()!= \"\":\n        months = [1,3,5,7,8,10,12]\n        days = [31,28,31,30,31,30,31,31,30,31,30,31,30,31]\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if date == '':\n        return False\n    if len(date) == 0:\n        return False\n    if date[0]!= '-' or date[1]!= '-':\n        return False\n    if len(date) < 4 or len(date) > 31:\n        return False\n    month = 1\n    day = 1\n    date_lst = []\n    for i in date:\n        if i!= '-':\n            day += 1\n        else:\n            month += 1\n        date_lst.append(month)\n        if month == 12 or month == 1:\n            month = 1\n        else:\n            month += 1\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(date) == 0:\n        return False\n    try:\n        if not date.isdigit() or int(date) < 1 or int(date) > 31 or (int(date) - 1) > 30:\n            return False\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    m, d, y = date.split('-')\n    months = {'1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, '10':10, '11':11, '12':12}\n    try:\n        if len(y)>2:\n            try:\n                if months[y[0]]<=months[y[1]]<=months[y[2]]:\n                    return True\n                else:\n                    return False\n            except:\n                return False\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    try:\n        day,month,year=map(int,date.split('-'))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    try:\n        d = date.split('-')\n        if len(d)!= 3 or not all(map(lambda x: (int(x)<=31 and int(x)>=1),d)):\n            return False\n        if len(d[1])!= 2 or not all(map(lambda x: (int(x)<=31 and int(x)>=1),d[1].split('-'))):\n            return False\n        if not len(d[2]) in ('01','02','03','04','05','06','07','08','09','10','11'):\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if not date:\n        return False\n    if len(date) < 1 or len(date) > 31:\n        return False\n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:10]\n    if not (month == '01' or month == '02' or month == '03' or month == '04' or month == '05' or month == '06' or month == '07' or month == '08' or month == '09' or month == '10' or month == '11'):\n        return False\n    if not (day == '1' or day == '2' or day == '3' or day == '4' or day == '5' or day == '6' or day == '7' or day == '8' or day == '9' or day == '10' or day == '11'):\n        return False\n    if not (year == '20' or year == '21'):\n        return False\n    if not (month == '01' or month == '02' or month == '03' or month == '04' or month == '05' or month == '06' or month == '07' or month == '08' or month == '09' or month == '10' or month == '11'):\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    #check if the date is not empty\n    if not date:\n        return False\n    \n    #check if the length of the date is correct\n    if len(date) < 8 or len(date) > 8:\n        return False\n    \n    #check if the number of days is valid\n    try:\n        n_days = int(date[:2])\n        if n_days < 1 or n_days > 31:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    date = date.replace('/', '-').replace('-', '')\n    month_days = ['1', '3', '5', '7', '8', '10', '12']\n    \n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if not any(x in date for x in month_days):\n        return False\n    if int(date[0:2]) < 1 or int(date[2:4]) > 31:\n        return False\n    if not any(x in date for x in month_days):\n        return False\n    if int(date[0:2]) < 4 or int(date[3:5]) > 12:\n        return False\n    if not any(x in date for x in month_days):\n        return False\n    if int(date[0:2]) < 1 or int(date[2:4]) > 30:\n        return False\n    if int(date[0:2]) < 2 or int(date[3:5]) > 29:\n        return False\n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    txt = txt.lower()\n    words = re.split(r'\\s+', txt)\n    return [w for w in words if w!= '']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    txt = txt.lower()\n    txt = txt.split()\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if txt == \"\":\n        return []\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = txt.split()\n    if not any(i.isalpha() for i in words):\n        words = [i for i in words if i.islower()]\n    return words"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if isinstance(txt, str):\n        txt = txt.lower()\n        return txt.split(' ')\n    return [txt]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = re.split('[,;,\\n]+', txt)\n    for word in words:\n        word = word.lower()\n        if word.isdigit():\n            if int(word)%2 == 0:\n                word = word[:2]+'o'\n            else:\n                word = word[:1]+word[2]+'o'\n        if len(word)<3:\n            word = word+'.'\n        word = word.strip('.,;: \\n')\n        yield word.split('.')\n        "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # split on whitespaces. If any whitespace is present the function will return a number of 1.\n    return re.split(' ', txt)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    txt = txt.replace(' ','')\n    if not txt.isalpha(): return txt.split(',')\n    split = txt.split(',')\n    if len(split) % 2!= 0:\n        return txt.split(',')\n    return [split[i] for i in range(len(split)) if i % 2!= 0]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    word_list = []\n    for character in txt:\n        if character =='':\n            word_list.append(word_list[-1])\n        else:\n            word_list.append(character)\n    return word_list\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    txt = txt.lower()\n    txt = re.sub(r'\\W+', '', txt)\n    txt = txt.split(' ')\n    return txt\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(lst)\n    for i in range(n - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    # Sort the list\n    lst.sort()\n    \n    # Compare each number with the next number and if the number is less than it is sorted\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    \n    # Return true if the list is sorted\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # your code here\n    if len(lst) < 1:\n        return True\n    else:\n        return False if lst[0] == lst[-1] else not is_sorted(lst[1:-1])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(lst) < 1:\n        return True\n    if len(set(lst)) < len(lst):\n        return False\n    if lst[0] < lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return is_sorted(lst[:-1])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return sorted(lst) == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Count number of duplicates\n    m = collections.Counter(lst)\n    # Sort\n    for value in m.values():\n        if value > 1:\n            return False\n    # Return true if no duplicate\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(lst) <= 1:\n        return True\n    # Iterate over the list, until we find a duplicate\n    # If the next number is the same as the current, we have it sorted\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            return False\n    # Sort the list, keeping track of the index of the next number\n    index = len(lst) - 1\n    while index >= 0:\n        if lst[index] == lst[index+1]:\n            return False\n        index -= 1\n    return True\n    \nprint(is_sorted([5]))\nprint(is_sorted([1, 2, 3, 4, 5]))\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))\nprint(is_sorted([1, 2, 2, 3, 3, 4, 5]))\nprint(is_sorted([1, 2, 2, 2, 3, 4]))\nprint(is_sorted([1, 2, 2, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    l = sorted(lst)\n    for i in range(len(l)):\n        if l[i]!= l[i+1]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    seen = set()\n    for i in lst:\n        if i in seen:\n            return False\n        seen.add(i)\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return True\n    if lst[0] == lst[1]:\n        return True\n    if lst[0] < lst[1]:\n        return False\n    else:\n        return is_sorted(lst[2:])\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def isprime(n):\n        if n==1 or n==2:\n            return False\n        for i in range(2, n//2+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    inter = set()\n    inter.add(interval1[0])\n    inter.add(interval1[1])\n    inter.add(interval2[0])\n    inter.add(interval2[1])\n    for i in range(len(inter)):\n        if isprime(inter[i]):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    intersection = []\n    for i in interval1:\n        for j in interval2:\n            if i[0] < j[0] < i[1] and j[0] < i[1] < j[1]:\n                intersection.append((i, j))\n    if len(intersection) == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n    #raise NotImplementedError\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Write your code here.\n    #define intervals\n    intervals = []\n    \n    #check if there are any intersection with intervals\n    for interval in interval1:\n        if interval not in intervals:\n            intervals.append(interval)\n    for interval in interval2:\n        if interval not in intervals:\n            intervals.append(interval)\n    \n    #check if the list of intervals has any intersection\n    if len(intervals) < 2:\n        return \"NO\"\n    \n    #check if there are at least two intersections\n    for i in range(len(intervals)-1):\n        if intervals[i] < intervals[i+1]:\n            return \"NO\"\n    \n    #Check if the first and last intervals have same value\n    start1 = intervals[0]\n    end1 = intervals[-1]\n    \n    start2 = intervals[0]\n    end2 = intervals[-1]\n    \n    #if there are at least two intervals has same value\n    if start2 <= end1 and end2 <= start1:\n        return \"YES\"\n    \n    #if there are only one interval with same value\n    if start2 == end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 > end1:\n        return \"YES\"\n    \n    #else if there are at least two interval with same value\n    if start2 < end1:\n        return \"NO\"\n    \n    \n    \n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # get current interval\n    i1, j1 = interval1\n    i2, j2 = interval2\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    start, end = interval1\n    \n    # we will check if start <= end\n    if start < end:\n        start, end = end, start\n        \n    start, end = interval2\n    \n    # we will check if start <= end\n    if start < end:\n        start, end = end, start\n        \n    return 'YES'\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return (interval1[0] <= interval2[0] <= interval1[1] <= interval2[1])\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    interval = interval1 if interval1[0] < interval2[1] else interval2\n    if interval[0] <= interval[1]:\n        if interval[0] < interval[1] + interval[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # your code here\n    x=interval1[0]<interval2[1]\n    if x:\n        if interval1[1]<=interval2[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        if interval1[0]>interval2[0]:\n            return 'NO'\n        else:\n            return 'YES'"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if interval1[0] >= interval1[1] or interval2[0] >= interval2[1]:\n        return \"NO\"\n    for interval in [interval1, interval2]:\n        interval = list(interval)\n        interval[0] -= 1\n        interval[1] -= 1\n        if (interval[0] < interval[1] or interval[0] < 0):\n            return \"NO\"\n    if ((interval1[0] < interval2[0] or interval1[1] > interval2[1]) and (interval2[0] < interval1[1] or interval2[0] > interval1[1])):\n        return \"NO\"\n    if ((interval1[0] < interval2[0] or interval1[1] > interval2[1]) and (interval1[0] >= interval2[0] or interval2[0] <= interval1[1])) and ((interval2[0] < interval1[0] or interval2[1] >= interval1[1] or interval2[0] <= interval1[0])):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Python 3.8+\n    return \"YES\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = len(arr)\n    magnitudes = []\n    for i in range(n):\n        for j in range(n):\n            magnitudes.append(arr[j]*arr[i])\n    return sum(magnitudes)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    magnitude = []\n    for num in arr:\n        if num > 0:\n            magnitude.append(num)\n        elif num == 0:\n            magnitude.append(1)\n        else:\n            magnitude.append(-num)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # Answer = -9\n    # to have sum of all signs multiplied by prod of signs of all numbers, this is simply the sum of all multiplies by all sign\n    # -1 = -1, 0 = 0\n    # this is the same as prod_signs(signs) = prod_signs(signs) * prod_signs(signs_magnitudes)\n    magnitude_sum = 1\n    for num in arr:\n        magnitude_sum *= num\n    return magnitude_sum\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # get a length of arr\n    m = len(arr)\n    # if there are 0 values, return 0\n    if m == 0:\n        return 0\n    # get sign and product of all values in arr\n    sign = arr[0]\n    prod = 1\n    for val in arr[1:]:\n        prod *= val\n        if val < 0:\n            sign = -sign\n            prod = -prod\n    # return prod_signs(arr)\n    return sign * prod\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    signs = [1, -1, 0]\n    ans = 1\n    for i in range(len(arr)):\n        ans *= arr[i]\n        ans = ans % 2147483647\n        for j in range(len(signs)):\n            if signs[j] == arr[i]:\n                ans *= j + 1\n        ans = ans % 2147483647\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    m = len(arr)\n    if m == 0:\n        return None\n    elif m == 1:\n        return arr[0]*arr[0]\n    else:\n        first_num = arr[0]\n        first_sign = 1\n        for num in arr[1:]:\n            if num >= first_num*first_sign:\n                first_sign *= -1\n            else:\n                first_sign = 1\n            # num = num * first_sign\n            # if num == 0:\n            #     return None\n            # else:\n            #     return num\n            if num >= first_num:\n                first_num = num\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # save sign of each number\n    signs = dict()\n    # find all signs for all numbers in arr\n    for num in arr:\n        if num in signs:\n            signs[num] += 1\n        else:\n            signs[num] = 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    magnitudes = []\n    for num in arr:\n        magnitudes.append(abs(num))\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    prod = 1\n    for i in arr:\n        prod = prod * (1 if i else -1)\n    return prod\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Your code here\n    \n    def dfs(grid, current_index, current_path):\n        # Edge case\n        if current_index == k:\n            return current_path\n        # If we haven't visited this cell, we need to make a new path\n        if not grid[current_index]:\n            return\n        # Make a copy of the current path\n        path = current_path.copy()\n        # Run the function again on the path, checking each cell,\n        # if it is already visited, we need to add the values we add\n        # to the path, and then remove all the unvisited cells\n        for i in range(k):\n            if grid[current_index][i]:\n                path.append(grid[current_index][i])\n                dfs(grid, current_index + 1, path)\n                path.pop()\n        # We have now finished the traversal\n        return path\n    \n    return dfs(grid, 0, [])\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    m, n = len(grid), len(grid[0])\n    # Initialize the queue to store the cells to visit\n    q = []\n    # Initialize the visited list to store visited cells\n    visited = [0] * n\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Base case: No path can be found\n    if k == 0:\n        return []\n    \n    # Find the possible cell paths for a given cell\n    # (1) Find the possible cell paths for a cell where we have\n    # visited cells that share an edge with it\n    # (2) Add a path to this cell, as a sorted list\n    # (3) Add the next cell's value to the corresponding cell\n    # (4) Find the shortest path from the first cell to the next\n    # (5) If it is shorter, remove it and add it to the shortest path\n    # (6) Finally, return the sorted list\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    n = len(grid)\n    if n < 2:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    \n    if k == 0:\n        return []\n    \n    N = len(grid)\n    grid[N-1][N-1] = -1\n    \n    if N <= 2:\n        return [0]\n    \n    for i in range(1, N-2):\n        grid[i][i] = grid[i][i-1] + 1\n        \n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            grid[i][j] = min(grid[i][j], grid[i][j-1] + 1)\n            \n    return grid[N-1][N-2]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    rows = len(grid)\n    cols = len(grid[0])\n    lst_A = [None]*(rows*cols)\n    lst_B = [None]*(rows*cols)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    for i in range(rows):\n        for j in range(cols):\n            \n            # lst_A[i*cols+j] = grid[i][j]\n            # lst_B[i*cols+j] = grid[i][j]\n            if grid[i][j] < grid[i][j] * (i//cols+1):\n                if lst_A[i*cols+j] is None:\n                    lst_A[i*cols+j] = grid[i][j]\n                else:\n                    lst_A[i*cols+j] = min(lst_A[i*cols+j], grid[i][j])\n                \n                if lst_B[i*cols+j] is None:\n                    lst_B[i*cols+j] = grid[i][j]\n                else:\n                    lst_B[i*cols+j] = min(lst_B[i*cols+j], grid[i][j])\n    \n    # print(lst_A)\n    # print(lst_B)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    lst_A = [None]*(rows*cols)\n    lst_B = [None]*(rows*cols)\n    \n    i = rows*cols-1\n    j = 0\n    \n    while(i>=0):\n        if grid[i][j] < grid[i][j] * (i//cols+1):\n            if lst_A[i*cols+j] is None:\n                lst_A[i*cols+j] = grid[i][j]\n            else:\n                lst_A[i*cols+j] = min(lst_A[i*cols+j], grid[i][j])\n            \n            if lst_B[i*cols+j] is None:\n                lst_B[i*cols+j] = grid[i][j]\n            else:\n                lst_B[i*cols+j] = min(lst_B[i*cols+j], grid[i][j])\n        \n        i = i-1\n        \n    # print(lst_A)\n    # print(lst_B)\n    \n    # lst_A = [None]*(rows*cols)\n    # lst_B = [None]*(rows*cols)\n    \n    lst_A = [None]*(rows*cols)\n    lst_B = [None]*(rows*cols)\n    \n    i = rows*cols-1\n    j = 0\n    \n    while(i>=0):\n        if grid[i][j] < grid[i][j] * (i//cols+1):\n            if lst_A[i*cols+j] is None:\n                lst_A[i*cols+j] = grid[i][j]\n            else:\n                lst_A[i*cols+j] = min(lst_A"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def solver(grid, k):\n        \n        # Find non-negative index\n        # This is based on the fact that we can come from any index of the grid,\n        # except for the first one, which is not included. \n        # E.g. for [1,2,3] we can go from index 1 to index 3, and the grid will be [1,2,3]\n        # without index 1, but after going from index 1 to index 3, it will be [1,2,2].\n        \n        # Try to make the list of values from the index of the cell that we have visited.\n        \n        # Iterate over the list of cells that have been visited.\n        # In order to find the smallest value, we have to visit the cell that has the least \n        # numbers of paths to the cell that we have visited. So we can start from the cell \n        # that is visited, and we will have to go to any cells in between the cell we have visited\n        # and the current cell.\n        \n        # Initialize a list to store the value of the cell visited. \n        # This will be the cell that we visited later on.\n        \n        # Initialize the visited list to be a slice of the list, since we will also have to visit \n        # the cell from the end of the list.\n        \n        # Initialize the final list to contain the smallest value.\n        \n        # While the value of the cell visited is less than the current value we have already visited,\n        # we have to continue to go to the next cell.\n        \n        # Set the starting index of the visited cell to the current index, and repeat\n        # this process until there are no more cells left to visit.\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    # Base Case (k = 0)\n    if k == 0:\n        return []\n    \n    # Step 1: create a list that keeps track of current cells that are visited\n    # Note that the value at the end of the list is the value of the cell at the\n    # end of the previous step (where the value is the largest value).\n    # Therefore, when we take the maximum of the previous step and what is the\n    # next step, we want to keep the cell with the maximum value. \n    # So we make a list that keeps track of the cells visited.\n    # The current cell is the cell with the maximum value. \n    lst_cell = [0 for _ in range(len(grid[0])+1)]\n    lst_cell[0] = grid[0][0]\n    \n    # Step 2: Traverse all cells and update the cell that has the least value\n    # If the cell has the smallest value, update the cell to be the next step\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # If the cell at (i, j) has the smallest value, update it to be the next\n            # step\n            if lst_cell[j] < grid[i][j]:\n                lst_cell[j+1] = grid[i][j]\n            # Else if the cell at (i, j) is not the smallest value, update it to be the next step\n            # Note that the last cell also needs to have the value of the cell at the end of the previous step\n            # (to keep the current cell and keep the cell at the end of the previous step the smallest value)\n            else:\n                lst_cell[j+1] = grid[i][j]\n    \n    # Step 3: Add the cells that are visited after all cells visited are the next step\n    # to the end to the end of the current step.\n    for j in range(len(grid[0])):\n        if lst_cell[j] > lst_cell[j+1]:\n            lst_cell[j+1] = grid[0][j]\n    \n    # Step 4: Finally return the list of the values that are visited\n    return lst_cell[1:len(grid[0])+1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    n = len(grid)\n    grid = [0] + grid + [0]\n    if n < 2:\n        return grid\n    minimum = [0] * (k+1)\n    minimum[0] = grid[1][0]\n    for i in range(2, n+1):\n        minimum[1] = grid[i][0] + min(minimum[i-1], minimum[i-2])\n    for i in range(1, k+1):\n        minimum[i] = grid[i][0]\n    for i in range(2, n+1):\n        minimum[i] = min(minimum[i-1], minimum[i-2])\n    return minimum[k:]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if k <= 0:\n        return []\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # get the base case\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 2, 3]\n    \n    # get the recurrence formula\n    def recur(n):\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 3]\n        \n        return [recur(n - 1) + recur(n - 2) + recur(n + 1)]\n        \n    return recur(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    \n    def fibonacci(n):\n        \"\"\"Return fibonacci sequence up to n, if n is even.\n        If n is odd, fibonacci sequence is 0, 1, 1, 1, 2, 3, 5, 8, 13, 21...\n        \"\"\"\n        if n <= 1:\n            return []\n        \n        return fibonacci(n - 1) + [n + 1]\n    \n    return fibonacci(n)\n    \nif __name__ == \"__main__\":\n    n = 5\n    print(tri(n))"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # recurrence formula\n    def recur(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 2]\n        else:\n            ans = []\n            for i in recur(n-1):\n                ans.append(i + (2 * i + 1))\n            return ans + [n]\n    return recur(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if(n == 0):\n        return []\n    else:\n        return [1, tri(n-1), tri(n-2)] + [tri(n-1) + tri(n-2)]"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n == 0: return [1]\n    elif n == 1: return [1, 2]\n    elif n == 2: return [1, 3, 5, 9]\n    elif n == 3: return [1, 3, 5, 10, 15]\n    elif n == 4: return [1, 3, 5, 10, 15, 21, 35]\n    else: return [1, 3, 5, 10, 15, 21, 35, 45, 55, 65, 75, 85, 105]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [1, 3, 2, 8]"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return [tri(i) for i in range(1, n+1) ]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def tribonacci(n):\n        \"\"\"\n        :type n: int\n        :rtype: list\n        \"\"\"\n        if n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        elif n == 3:\n            return [1, 1, 1]\n        else:\n            return [1, 1, 1, 1] + tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n    return tribonacci(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 0:\n        return None\n    elif n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        tri_n = 0\n        tri_i = 1\n        for i in range(n-1):\n            tri_n += tri_i\n            tri_i *= 2\n            tri_i %= 11\n        return [tri_n + 1] + [tri_n] + [tri_i]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 2, 3]\n    return fibonacci_tri(n - 1) + fibonacci_tri(n - 2) + fibonacci_tri(n + 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_odd = 0\n    while n:\n        if n % 10 == 0:\n            sum_odd += n // 10\n        else:\n            return 0\n        n //= 10\n    return sum_odd\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    product = 1\n    while n:\n        product *= 10\n        if n % 10 == 1:\n            product *= 10\n        n //= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n<=2: return 0\n    if n%2==0: return 0\n    else:\n        return n*digits(n//2)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    odd = n%2\n    if odd == 1:\n        return 0\n    return n//2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return n // 10 ** len(str(n))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return n*(n-1)//2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return (n*(n+1)) // 2\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    evens = 0\n    while n > 0:\n        n = n // 10\n        if n % 2:\n            evens += 1\n    return evens\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 10:\n        return n\n    else:\n        return n * digits(n - 10)"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n < 4:\n        return n\n    return int(digits(n//2))*2 + digits(n-4*(n%2))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # check if the input is an empty string\n    if not string:\n        return False\n    # if the string is a single bracket\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    # if the string is not a single bracket\n    else:\n        # create a list that contains all brackets\n        brackets_list = []\n        for char in string:\n            if char == '[' or char == ']':\n                brackets_list.append(char)\n        # if there is a square bracket in the list\n        if len(brackets_list) > 0:\n            # the list is split into two because of brackets\n            bracket1 = brackets_list[0:2]\n            bracket2 = brackets_list[2:4]\n            # if there are more brackets than characters in the list\n            if len(bracket1) > len(bracket2):\n                # if there is a bracket in the middle\n                if brackets_list[0:2] == bracket1:\n                    return is_nested(string[1:-1])\n                # if there is a bracket in the middle and not the middle\n                else:\n                    return is_nested(string[1:len(string) - 1])\n            # if there is a bracket in the middle and it is the only character in the list\n            else:\n                if brackets_list[0] == bracket2[0]:\n                    return is_nested(string[1:len(string) - 1])\n                # if there is a bracket in the middle and the middle isn't the only character in the list\n                else:\n                    return is_nested(string[1:len(string) - 1])\n        else:\n            return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    index = 0\n    brackets = []\n    while index < len(string):\n        if string[index] == '[':\n            brackets.append(string[index])\n        elif brackets:\n            if brackets[-1] == '[':\n                brackets.pop()\n            else:\n                return False\n        else:\n            index += 1\n    return len(brackets) > 0\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    check = False\n    brackets = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            brackets.append(i)\n        elif string[i] == \"]\":\n            if brackets[-1]!= i:\n                return False\n            else:\n                brackets.pop()\n    if brackets:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if string == '':\n        return False\n    if len(string)==1:\n        return is_nested(string)\n    for index in range(len(string)):\n        if index == 0 or string[index]!= string[index-1]:\n            if string[index:index+3] not in ['[[', ']]]', '[[', ']']:\n                continue\n            if is_nested(string[index:index+3]) == True:\n                return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    brackets = []\n    for bracket in string:\n        if bracket == \"]\" or bracket == \"]\":\n            brackets.append(bracket)\n        else:\n            if len(brackets)!= 0:\n                if brackets[-1] == \"]\":\n                    brackets.pop()\n                if brackets[-1] == \"[\":\n                    brackets.pop()\n    if len(brackets) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return check_if_nested(string)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if not string:\n        return False\n    index = 0\n    is_valid = True\n    while index < len(string):\n        if string[index] == ']':\n            if not is_valid:\n                return False\n            elif index + 1 < len(string) and string[index + 1]!= '[':\n                return False\n            else:\n                index += 1\n        elif string[index] == '[':\n            if not is_valid:\n                return False\n            else:\n                index += 1\n        else:\n            return False\n    return is_valid\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    stack = []\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if string == '[[]]:': return True\n    elif string == '[]]]:': return False\n    if string[0] == '[':\n        if is_nested(string[1:]): return True\n    else:\n        if is_nested(string[1:]): return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if string == \"[]\" or string == \"{}\" or string == \"[]\":\n        return True\n    elif string.count('{') > string.count('[') and string.count('[') == string.count(']') and len(string) == len(string[1:-1]) and string[0]!= \"(\" and string[len(string) - 1]!= \")\" and string[0]!= \"[\":\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = 0\n    for x in lst:\n        res = res + x * x\n    return res\n    #return sum([x * x for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    sums = 0\n    for element in lst:\n        sums += (element*element)\n    return sums\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    return sum([round(x**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    s = 0\n    for i in lst:\n        s = s + i*i\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    import math\n    \n    sum = 0\n    for n in lst:\n        sum += math.pow(n,2)\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return sum(int(i)**2 for i in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # TODO: Write your code here\n    result = 0\n    for i in range(len(lst)):\n        result += (lst[i]**2)\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # TODO: Find the answer\n    res = 0\n    for i in lst:\n        res = res + (i**2)\n    return res"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    return sum(map(lambda x: (x ** 2), lst))\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return txt[-1].isalpha() and not any(c.isalpha() for c in txt)\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # Create a variable to store the last letter\n    last_letter = ''\n    \n    # Iterate through a string and check if each letter is in a word\n    for letter in txt:\n        if letter not in ('a', 'e', 'i', 'o', 'u'):\n            # If the last letter is not in a word add it to the last letter\n            # if it's a letter add it to the last letter\n            # if the letter is a letter add it to the last letter\n            if last_letter!= '':\n                return False\n            else:\n                last_letter = letter\n    # If the last letter is in a word add it to the last letter\n    if last_letter!= '':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    return False if txt[-1].isalpha() else True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # your code here\n    if len(txt)<3:\n        return False\n    if txt[-1] not in LETTERS:\n        return False\n    if txt[-3] not in LETTERS:\n        return False\n    return True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return True if last_char_is_a_letter(txt[-1]) else False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    last_char = txt[-1]\n    if last_char.isalpha() and len(txt) > 2:\n        if last_char.isupper() and not last_char.islower():\n            return True\n        return False\n    return False"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return txt[-1] in string.ascii_letters\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return True if (txt[-1]!= \" \" and txt[-1] in string.ascii_letters) and \\\n       (len(txt) > len(txt) // 2) else False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    last_char = txt.rfind(' ')\n    if last_char < 0:\n        return False\n    if last_char > 0:\n        return True\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(arr) == 1:\n        return arr[0]\n    # do the same as in main function\n    if arr[0] >= arr[1]:\n        return arr[0]\n    if arr[0] >= arr[2]:\n        return can_arrange([arr[1], arr[2]])\n    if arr[0] >= arr[3]:\n        return can_arrange([arr[0], arr[2]])\n    return can_arrange([arr[0], arr[3]])\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    my_len = len(arr)\n    for i in range(my_len):\n        if arr[i] < arr[i-1]:\n            return -1\n    return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #print(arr)\n    arr = set(arr)\n    try:\n        return arr.index(min(arr))\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    n = len(arr)\n    if n == 1:\n        return -1\n    \n    idx = 0\n    while idx < n - 1:\n        if arr[idx] >= arr[idx + 1]:\n            idx += 1\n        else:\n            break\n    if idx < n - 2 and arr[idx] < arr[idx + 2]:\n        idx += 1\n    return idx"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return max([index+1 for index in range(len(arr)-1) if arr[index] > arr[index+1]])\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    arr.sort()\n    idx = -1\n    for i in range(1,len(arr)):\n        if arr[i] <= arr[i-1]:\n            if arr[i]!= arr[i-1]:\n                idx = i\n                break\n    if idx == -1:\n        return -1\n    else:\n        return idx\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1] or arr[i] <= arr[i+1]:\n            return -1\n    return len(arr)"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Write your code here\n    i = 0\n    while True:\n        if arr[i] < arr[i - 1]:\n            return i\n        i += 1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    idx = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[idx]:\n            idx = i\n    return idx\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max = max(lst, key=abs)\n    min = min(lst, key=abs)\n    return (max, min)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    smallest = lst[0]\n    largest = lst[-1]\n    return (smallest, largest)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    def get_largest_smallest(a, b):\n        if a <= 0:\n            return None, None\n        elif b <= 0:\n            return a, None\n        elif a < b:\n            return a, b\n        else:\n            return None, b\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # try:\n    #     lst = sorted(lst)\n    # except TypeError:\n    #     return None\n    # # Try all the possible max and min values\n    # min_val = lst[0]\n    # max_val = lst[-1]\n    # # we can't do for loops, since we have to worry about the case where the min_val is the same as max_val\n    # for n in range(len(lst)):\n    #     if lst[n] > max_val:\n    #         max_val = lst[n]\n    #     if lst[n] < min_val:\n    #         min_val = lst[n]\n    # # if we didn't have to do for loops, add them\n    # if max_val == min_val:\n    #     return (max_val, min_val)\n    # else:\n    #     return None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    tup = None\n    for x in lst:\n        if tup is None:\n            tup = (x, x)\n            continue\n        if tup[0] < x:\n            tup = (x, x)\n    return tup\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    a = 0\n    b = len(lst) - 1\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if lst:\n        temp = lst[0]\n        for i in lst:\n            if i < 0:\n                temp = temp * (-1)\n            elif i > 0:\n                temp = temp * (1)\n        return (temp,temp)\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    min_number = None\n    max_number = None\n    for number in lst:\n        if number < 0:\n            if min_number == None:\n                min_number = number\n            else:\n                min_number = number\n        else:\n            if max_number == None:\n                max_number = number\n            else:\n                max_number = number\n    return (min_number, max_number)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    def largest(num):\n        if num < 0:\n            return None\n        elif num == 0:\n            return None\n        else:\n            if num < 10:\n                return (num, num)\n            else:\n                num_1 = num // 10\n                num_2 = num % 10\n                if num_2!= 0:\n                    return (num_1, num_2)\n                else:\n                    return (num_1, num)\n    # return (num, num) if num < 0 else (num, None)\n    return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    i=0\n    largest_smallest=None\n    smallest_positive=None\n    for x in lst:\n        if x<0:\n            if smallest_positive is None:\n                smallest_positive=x\n            else:\n                largest_smallest=x\n        else:\n            if smallest_positive is None:\n                smallest_positive=x\n            else:\n                largest_smallest=x\n    return (largest_smallest,smallest_positive)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if type(a) == type(b) == str or type(a) == str:\n        if type(a) == str and a in [\".\", \",\", \":\", \";\"]:\n            return \"error\"\n        else:\n            return a\n    elif type(a) == float:\n        return float(a)\n    elif type(a) == int:\n        return int(a)\n    elif type(a) == tuple:\n        return tuple(a)\n    elif type(a) == dict:\n        return dict(a)\n    elif type(a) == list:\n        return list(a)\n    elif type(a) == set:\n        return set(a)\n    elif type(a) == bool:\n        return bool(a)\n    else:\n        return type(a)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a is b:\n        return a\n    elif isinstance(a, (int, float)):\n        return b\n    elif isinstance(a, str):\n        return b.replace(\",\", \".\") if isinstance(b, str) else a.replace(\",\", \".\")\n    elif isinstance(a, (int, float)):\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        a = a.__str__()\n        b = b.__str__()\n    return a if b!= a else None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if type(a) == str and type(b) == str:\n        a = float(a)\n        b = float(b)\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == float and type(b) == int:\n        return a if a > b else b\n    elif type(a) == str and type(b) == float:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == float and type(b) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if a == b:\n            return a\n        else:\n            return None\n    elif type(a) == int and type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == str:\n        if a == b:\n            return a\n        else:\n            return None\n    else:\n        raise TypeError(\"Invalid input type: %s\" % str(type(a)))"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    a = a.split()\n    if len(a)!= 1:\n        a, b = b, a\n    if a == b:\n        return a\n    else:\n        return f\"{a}!= {b}\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def type_check(val):\n        if val == \"\":\n            return val\n        try:\n            float(val)\n            return val\n        except ValueError:\n            return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if type(a) is str and type(b) is str:\n        return a\n    if type(a) is float and type(b) is float:\n        return a\n    if type(a) is str and type(b) is int:\n        return a\n    if type(a) is str and type(b) is int:\n        return b\n    if type(a) is float and type(b) is int:\n        return b\n    if type(a) is int and type(b) is float:\n        return a\n    if type(a) is int and type(b) is str:\n        return b\n    if type(a) is int and type(b) is int:\n        return a\n    if type(a) is int and type(b) is str:\n        return b\n    if type(a) is int and type(b) is float:\n        return a\n    if type(a) is int and type(b) is float:\n        return b\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is float and type(b) is str:\n        return b\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is float and type(b) is float:\n        return a\n    if type(a) is str and type(b) is int:\n        return b\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is int and type(b) is float:\n        return a\n    if type(a) is int and type(b) is str:\n        return b\n    if type(a) is int and type(b) is int:\n        return a\n    if type(a) is int and type(b) is str:\n        return b\n    if type(a) is int and type(b) is float:\n        return a\n    if type(a) is str and type(b) is int:\n        return b\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is float and type(b) is str:\n        return b\n    if type(a) is float and type(b) is float:\n        return a\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is float and type(b) is int:\n        return b\n    if type(a) is float and type(b) is str:\n        return b\n    if type(a) is float and type(b) is str:\n        return a\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is str and type(b) is int:\n        return a\n    if type(a) is str and type(b) is str:\n        return b\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is float and type(b) is float:\n        return a\n    if type(a) is str and type(b) is str:\n        return b\n    if type(a) is float and type(b) is str:\n        return b\n    if type(a) is str and type(b) is str:\n        return a\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is str and type(b) is float:\n        return b\n    if type(a) is str and type(b) is int:\n        return a\n    if type(a) is float and type(b) is float:\n        return a\n    if type(a) is str and type(b) is int:\n        return a\n    if type(a) is str and type(b) is str:\n        return b\n    if type(a) is float and type(b) is int:\n        return a\n    if type(a) is float and type(b) is str"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if type(a) is float and type(b) is str:\n        return int(a)\n    if type(a) is str and type(b) is float:\n        return float(a)\n    return a\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if a == b:\n        return None\n    if isinstance(a, str) or isinstance(b, str):\n        return a if float(a) > float(b) else b\n    if isinstance(a, (float, int)) and isinstance(b, (float, int)):\n        return float(a) if float(a) > float(b) else b\n    if isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    if isinstance(a, float) and isinstance(b, int):\n        return float(a) if a > b else b\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    if isinstance(a, int) and isinstance(b, (int, float)):\n        return a if a > b else b\n    if isinstance(a, float) and isinstance(b, (float, int)):\n        return float(a) if a > b else b\n    if isinstance(a, str) and isinstance(b, (str, int)):\n        return a if a > b else b\n    if isinstance(a, (str, int)):\n        return a if a > b else b\n    if isinstance(a, (float, int)):\n        return float(a) if a > b else b\n    if isinstance(a, float) and isinstance(b, int):\n        return float(a) if a > b else b\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    if isinstance(a, int) and isinstance(b, (float, int)):\n        return float(a) if a > b else b\n    if isinstance(a, (float, int)) and isinstance(b, (float, int)):\n        return a if a > b else b\n    if isinstance(a, (float, int)) and isinstance(b, str):\n        return a if float(a) > float(b) else b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # the order matters, so if you want to compare a list with a tuple,\n    # you have to be careful to use the comma\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_of_even_numbers = 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    n_sum = 0\n    for n_ in range(1, n+1):\n        if n_%2 == 0:\n            n_sum += n_\n    if n_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        if n % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if is_sum_even(n) == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return True\n    \n    if n % 4 == 0:\n        if n % 2 == 0:\n            return is_equal_to_sum_even(n//2)\n        else:\n            return is_equal_to_sum_even(n//2) and is_equal_to_sum_even(3*n//2)\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return is_sum_even(n) and is_sum_even_pair(n) and is_sum_even_pair_unique(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n > 0 and n % 2 == 0 and n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n < 1:\n        return False\n    elif n == 4:\n        return True\n    else:\n        return is_equal_to_sum_even(n - 2) and is_equal_to_sum_even(n - 4)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not n:\n        return True\n    if n & 1 == 0:\n        return False\n    for i in range(3, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return n * special_factorial(n - 1)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1, n):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    brazilian_factorial = 1\n    for i in range(n-1, 0, -1):\n        brazilian_factorial *= (i+1)\n    return brazilian_factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = 1\n    while n > 0:\n        result = n * result\n        n -= 1\n    return result"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    factorial = 1\n    if n == 0:\n        return 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    return n * (n - 1) * (n - 2) *... * 1\n    "
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return n*special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    assert n > 0\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    factorial = 1\n    for i in range(1,n):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    lines = []\n    for line in text.split('\\n'):\n        if len(line) > 2:\n            line = line.replace(' ', '-')\n        lines.append(line)\n    return '\\n'.join(lines)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return re.sub(r\"^\\s+\", \"-\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = re.sub(\"\\s+\", \"_\", text)\n    return text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if len(text) <= 3:\n        return text\n    text_list = text.split(\" \")\n    new_text = \"\"\n    for index in range(len(text_list)):\n        text_list[index] = text_list[index].replace(\" \", \"_\")\n    for index in range(len(text_list) - 2):\n        if index == 0:\n            text_list[index] = text_list[index] + \"_\"\n        elif index < len(text_list) - 2 - 1:\n            text_list[index] = text_list[index] + \" \"\n    text_list[-2] = text_list[-2].replace(\"_\", \"-\")\n    new_text = \" \".join(text_list)\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Change all spaces to underscores\n    text = text.replace(' ', '_')\n    \n    # Replace all consecutive spaces with -\n    text = text.replace('  ', '-')\n    \n    # Join everything together\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # If text has more than 2 consecutive spaces then replace the consecutive spaces with -\n    # \n    if text.count(' ') > 1:\n        return re.sub(r'\\s+', '-', text)\n    else:\n        return text"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    count = 0\n    \n    for char in text:\n        if char == \" \":\n            count += 1\n        elif count > 0:\n            text = text.replace(char, \"-\")\n            count -= 1\n        else:\n            continue\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # NOTE: this is probably a bit faster than the\n    # following...\n    if len(text) > 2:\n        for i in range(len(text)-2):\n            text = text.replace(text[i],\"_\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    text = re.sub(r'\\s+', '_', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = re.sub(\" +\", \"_\", text)\n    return text\n    \ndef fix_tags(text):\n    \"\"\"\n    Given a string text, replace all characters in a tag's value \n    with underscores, and if a string has more than 2 consecutive \n    spaces, then replace all consecutive spaces with - characters \n    \n    fix_tags(\"Example\") == \"Example\"\n    fix_tags(\"Example 1\") == \"Example-1\"\n    fix_tags(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = re.sub(\" +\", \"_\", text)\n    return text\n    \ndef get_tokens(text):\n    \"\"\"\n    Given a string text, return a list of all the tokens \n    that appear in the string. If no tokens appear in the string, \n    return []\n    \"\"\"\n    text = fix_spaces(text)\n    text = fix_tags(text)\n    return re.findall(\"[a-zA-Z0-9_]+\", text)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    \n    if not file_name.isalnum():\n        return 'No'\n    elif len(file_name) <= 3:\n        return 'No'\n    elif file_name[0] == '.':\n        return 'No'\n    elif file_name[0].isalpha():\n        return 'No'\n    elif not file_name[0].isdigit():\n        return 'No'\n    elif not all(c.isdigit() for c in file_name[1:]):\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if file_name.count('.') > 2:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    if file_name[0] == '.':\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name[0].isalpha():\n        return 'No'\n    if file_name[0] in ['a', 'A']:\n        return 'No'\n    if file_name[0].lower() not in ['exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    for i in range(4):\n        if not file_name[i].isdigit():\n            print(file_name[i] +'' + 'is not a valid file name')\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Your code here\n    if len(file_name) < 3:\n        return \"No\"\n    for i in range(len(file_name)-3):\n        if file_name[i:i+3] in [\"txt\", \"exe\", \"dll\"]:\n            return \"No\"\n    return \"Yes"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # ===Modify codes below=============\n    # \uc870\uac74\uc5d0 \ub530\ub77c \ubcc0\ud658\ub418\uc5b4\uc57c \ud560 \uacb0\uacfc\ub97c result \ubcc0\uc218\uc5d0 \ud560\ub2f9\n    if len(file_name) < 3:\n        result = 'No'\n    elif not file_name[0].isdigit():\n        result = 'No'\n    elif not file_name[0].isalpha():\n        result = 'No'\n    elif file_name[0].isdigit() and file_name[1]!= '.':\n        result = 'No'\n    elif file_name[1]!= '.':\n        result = 'No'\n    elif not file_name[1:].isdigit() and file_name[1]!= '.':\n        result = 'No'\n    elif file_name[1:].isdigit():\n        result = 'No'\n    else:\n        result = 'Yes'\n    \n    # ==================================\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    for i in range(len(file_name)-3):\n        if file_name[i:i+3].isalnum() == False:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    file_name = file_name.lower()\n    if len(file_name) < 3:\n        return 'No'\n    else:\n        file_name = file_name[0:3]\n        if not (file_name[0] == '.' or file_name[0] ==''):\n            return 'No'\n        if not (file_name[1] == '.' or file_name[1] ==''):\n            return 'No'\n        if not (file_name[2] == '.' or file_name[2] ==''):\n            return 'No'\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if (len(file_name) < 3):\n        return \"No\"\n    elif (not all(c.isdigit() for c in file_name)):\n        return \"No\"\n    elif not file_name[0].isdigit():\n        return \"No\"\n    elif (file_name[0] in ['a', 'z', 'A']):\n        return \"No\"\n    elif (file_name[1:].startswith('.')):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(file_name) == 0 or not file_name[0].isdigit() or file_name[0] == '.':\n        return 'No'\n    \n    if not all(file_name[0].isdigit() and file_name[0].isalpha() for file_name in file_name):\n        return 'No'\n    \n    if len(file_name) < 3:\n        return 'No'\n    \n    if not file_name[0].isalpha():\n        return 'No'\n    \n    return 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    sum_squares = 0\n    for number in lst:\n        if(number % 3 == 0):\n            sum_squares += number**3\n        elif(number % 4 == 0):\n            sum_squares += number**4\n    return sum_squares\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    res = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            sum += i**2\n        elif i % 3!= 0:\n            sum += i**2\n        elif i % 4!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    total = 0\n    for index in lst:\n        if index % 3 == 0 or index % 4 == 0:\n            total = total + index**2\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    for item in lst:\n        if item % 3 == 0 and item % 4!= 0:\n            total += item * item\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    squared_lst = []\n    for item in lst:\n        if item % 3 == 0:\n            squared_lst.append(item**3)\n        elif item % 4 == 0:\n            squared_lst.append(item**4)\n    return sum(squared_lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    #lst = [1,2,3]\n    #lst = []\n    lst = [0 for i in lst]\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 3\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 4\n        else:\n            lst[i] = lst[i] ** 2\n    return sum(lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sum=0\n    for i in lst:\n        if i%3==0 or i%4==0:\n            sum+=i**3\n        else:\n            sum+=i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # code here\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    splitted_sentence = sentence.split(' ')\n    words = list()\n    for word in splitted_sentence:\n        if is_prime(len(word)):\n            words.append(word)\n    return''.join(words)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # \u4f20\u5165\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c\u6709\u65f6\u5019\u4f1a\u6709\u4e09\u5f00\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u4e09\u4e2a\u5b57\u7b26\u7684\u5b57\u5178\n    # \u4f9d\u6b21\u904d\u5386\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u7684\u662f\u5426\u5728\u5b57\u7b26\u4e32\u7684\u524d\u9762\uff0c\n    # \u627e\u5230\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u5b57\u5178\uff0c\u7136\u540e\u8fd4\u56de\u8be5\u5b57\u7b26\u5bf9\u5e94\u7684\u5b57\u5178\u7684\u957f\u5ea6\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    \n    # Your code here\n    pass\n    # raise NotImplementedError\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    words = sentence.split()\n    res = \" \"\n    for word in words:\n        if len(word) == 1:\n            res += word\n        else:\n            num = int(word[1:])\n            for _ in range(num):\n                res += word[0]\n        res += \" \"\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    result = []\n    for word in sentence.split(' '):\n        result.append(word)\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    words = sentence.split()\n    sentence = \" \".join(words)\n    return sentenc"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    words = sentence.split(\" \")\n    def get_prime_numbers(start):\n        prime = []\n        for i in range(start, len(words)):\n            if int(words[i]) == 1:\n                prime.append(int(words[i]))\n        return prime\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    sentence = sentence.lower()\n    print(sentence)\n    sentence = sentence.split()\n    print(sentence)\n    print(sentence)\n    sentence = sentence[::-1]\n    sentence =''.join(sentence)\n    print(sentence)\n    return sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    sentence = sentence.lower()\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sentence = sentence.split(' ')\n    return''.join([w for w in sentence if len(w) % 2 == 0])\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    l = str(int(x)*n)\n    print(l)\n    if l.count('/') == 1:\n        if l.count('0')!= 0:\n            return True\n        return False\n    \n    if len(l) > 1:\n        l = l.split('/')\n        if len(l)!= 2:\n            return False\n        x, n = l\n        if n.isdigit():\n            return simplify(n, int(x))\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    try:\n        assert type(x) == str and type(n) == str\n        x = float(x)\n        n = int(n)\n        assert 1 <= n and n <= 2 ** 30\n        assert x >= 0 and x <= 1\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    try:\n        n = float(n)\n        x = float(x)\n    except:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if n == 1 or n == 0:\n        return False\n    if n < 0:\n        n = abs(n)\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        return simplify(x / n, n)\n    return simplify(x / n, n)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # write your code here\n    x = list(x)\n    n = int(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return check_frac(x, n, float, \"\", \"\")\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    \n    \n    # Solution:\n    try:\n        n, x = n.split('/')\n        # If denominator is zero\n        if int(n) == 0:\n            return False\n        # If fraction is non-zero\n        if n!= '':\n            try:\n                n = int(n)\n                if n <= 0:\n                    return False\n                else:\n                    return int(x) * n\n            except ValueError:\n                return False\n        else:\n            return True\n    except Exception as e:\n        print('Exception:'+ str(e))\n    \n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    print(\"simplify('%s/%s' % (x, n)) = %s\" % (x, n))\n    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return is_valid_number(x, n) and 0 <= float(x) <= 1 and float(n) <= 1 and n!= 0\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    try:\n        x = float(x)\n        n = float(n)\n        \n        if n < 0:\n            return False\n        \n        result = True\n        if n == 0:\n            return result\n        if x >= n:\n            return False\n        elif x < n:\n            return False\n        elif x == n:\n            return result\n        \n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                result = False\n                return result\n        \n        return result\n    except ValueError:\n        return False\n        \n        \ndef type_eval(x, n):\n    \"\"\"Your task is to implement a function that will return the type of the\n    expression x * n. The function returns the type of the expression n * n.\n    Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # TODO: Create an empty list for output\n    output = []\n    # TODO: Loop through the numbers, converting all digits into integers\n    for num in nums:\n        # TODO: Check if the num is greater than 0\n        if num > 0:\n            # TODO: Get the sum of all numbers, convert it to an int and add to the list\n            sum = 0\n            for x in str(num):\n                sum += int(x)\n            # TODO: If the sum of all numbers is greater than 0, add it to the output list\n            if sum > 0:\n                output.append(sum)\n    # TODO: Return the output list\n    return output\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = sorted(nums, reverse=True, key=lambda x: sum([int(i) for i in str(x)]))\n    return s\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    return sorted(nums, key=sum, reverse=True)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    sums = 0\n    nums.sort(key=lambda x: x.isdigit())\n    for i in nums:\n        sums += i\n    return nums"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # sort by the sum of the digits of the numbers\n    # and then convert the numbers to string\n    nums.sort(key = lambda x : int(str(x)[-1]))\n    return nums"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return []\n    # code here\n    #if len(nums) == 1:\n    #    return nums\n    num_sums = sum(nums)\n    nums.sort()\n    num_sums.sort()\n    nums_index = {}\n    for num in nums:\n        if num_sums - num in num_sums_index.keys():\n            num_sums_index[num_sums-num].append(nums.index(num))\n        else:\n            num_sums_index[num_sums-num] = [nums.index(num)]\n    for nums_index_index in num_sums_index.values():\n        nums_index[nums_index_index] = nums_index_index\n    return [num_sums_index[x] for x in num_sums_index.keys()]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    sums = []\n    for num in nums:\n        sums.append(int(str(num)[::-1]))\n    sums.sort()\n    return sums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    s = 0\n    res = []\n    for i in range(0, len(nums)):\n        s += nums[i]\n        res.append(s % 10)\n        s //= 10\n    return res"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    nums.sort(key = lambda x : (sum(map(int, str(x))), x))\n    return nums\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    counter = 0\n    for num in nums:\n        if num > 10:\n            counter += 1\n        elif num % 2!= 0:\n            counter += 1\n    return counte"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    nums = list(map(int, nums))\n    result = 0\n    for number in nums:\n        if number > 10 and number % 10 > 1 and number % 10 % 2 == 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 10 and nums[i] % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    count = 0\n    for num in nums:\n        if int(str(num)[0:2]) > 10:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # TO DO\n    \n    \ndef checkOut(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    sum of the numbers that are a multiple of 3 and 5, or -1 if there are\n    no such numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef checkIn(n):\n    \"\"\"Write a function that takes an array of numbers and returns the sum \n    of the numbers that are a multiple of 3 and 5, or -1 if there are \n    no such numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef isEven(n):\n    \"\"\"Write a function that takes an array of numbers and returns True if\n    all numbers in the array are even, and False otherwise.\"\"\"\n    \n    # TO DO\n    \n    \ndef isOdd(n):\n    \"\"\"Write a function that takes an array of numbers and returns True if \n    all numbers in the array are odd, and False otherwise.\"\"\"\n    \n    # TO DO\n    \n    \ndef sort_ascending(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in sorted order.\"\"\"\n    \n    # TO DO\n    \n    \ndef sort_descending(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in sorted order.\"\"\"\n    \n    # TO DO\n    \n    \ndef sort_descending_ascending(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in sorted order.\"\"\"\n    \n    # TO DO\n    \n    \ndef sort_ascending_descending(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in sorted order.\"\"\"\n    \n    # TO DO\n    \n    \ndef reverse(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in reversed order.\"\"\"\n    \n    # TO DO\n    \n    \ndef permute(nums):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    numbers in permutations.\"\"\"\n    \n    # TO DO\n    \n    \ndef unique(nums):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number that appears at least twice.\"\"\"\n    \n    # TO DO\n    \n    \ndef count(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of numbers in the array that are divisible by 7.\"\"\"\n    \n    # TO DO\n    \n    \ndef prime(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of prime numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef prime2(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of prime numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef count2(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of numbers in the array that are divisible by 7.\"\"\"\n    \n    # TO DO\n    \n    \ndef is_prime(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of prime numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef is_prime2(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of prime numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef sum_digits(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    sum of the numbers that are in the array.\"\"\"\n    \n    # TO DO\n    \n    \ndef nth_prime(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    the next prime number.\"\"\"\n    \n    # TO DO\n    \n    \ndef factorial(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    factorial of the array.\"\"\"\n    \n    # TO DO\n    \n    \ndef count3(n):\n    \"\"\"Write a function that takes an array of numbers and returns the \n    number of prime numbers.\"\"\"\n    \n    # TO DO\n    \n    \ndef contains_duplicate(nums):\n    \"\"\"Write a function that takes an array of numbers and returns the "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    odds = []\n    for number in nums:\n        if number >= 10 and number % 2!= 0:\n            odds.append(number)\n    return len(odds)\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(nums):\n        j = i\n        if nums[i] > 10:\n            while j < len(nums) and nums[j] % 2!= 0 and nums[j]!= 0:\n                j += 1\n            while j < len(nums):\n                if nums[j] % 2 == 0:\n                    i += 1\n                elif nums[j] < 10:\n                    nums[i] = nums[j]\n                else:\n                    break\n        else:\n            i += 1\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    odds = [num for num in nums if num > 10 and num % 10!= 0]\n    odds.sort()\n    last_digit = (nums[-1] - nums[0]) % 10\n    last_digit = (last_digit + 1) % 10\n    return len(odds) + 2 + len(odds) + 2 + 2 + len(odds) + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 + 5 + 5 + 5 + 5 + 6 + 6 + 6 + 6 + 7 + 7 + 7 + 7 + 8 + 8 + 8 + 9 + 9 + 9 + 9 + 10 + 10\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    l = len(nums)\n    output = 0\n    \n    #Iterate through the numbers\n    for i in range(l):\n        #If the number is greater than 10,\n        #Add the number to a list\n        if nums[i] >= 10:\n            output += 1\n            \n    #If the list is of odd numbers\n    #Add the odd numbers to a list\n    if output % 2 == 1:\n        output += 1\n        \n    return output\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if num >= 10 and num >= 10 and num % 10 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    n = abs(n)\n    a = [0 for _ in range(n)]\n    for i in range(1, n+1):\n        a[i] = i * i - i + 1\n    return a\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a.count(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # using the fact that all three is divided by 3, 3\n    #   1  3  7\n    #   2  3  8\n    #   3  4  9\n    #   4  5  10\n    #   5  6  11\n    #   6  7  12\n    \n    # if the given number is divisible by 3, just add it to the triple array\n    # otherwise, add the triple pair\n    if n%3 == 0:\n        return n\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    a = [1,3,7,13,21]\n    for i in range(1, n):\n        a.append(a[i]*i-i+1)\n    return len(a)\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n < 2: return n\n    a = [1] * (n - 1)\n    for i in range(2, n):\n        a[i] = (i * i - i + 1)\n    return a[-1]\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # Code here\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # \ud06c\uae30\uc5d0 \ub530\ub978 \uc218\ub4e4\uc774 \uac01\uac01 1\uc758 \uc790\ub9ac\uc218\uac00 3\uc758 \uc790\ub9ac\uc218\ub85c \ub098\ub208\ub2e4.\n    # 3\uc758 \uc790\ub9ac\uc218\uac00 \ubaa8\ub450 1\uc778 \uacbd\uc6b0\uc5d0\ub294 \uadf8\ub0e5 \ub098\ub204\uc5b4\ub5a8\uc5b4\uc9c0\ub294 \uac83\uc774\ub2e4.\n    # 1\uc758 \uc790\ub9ac\uc218\uac00 3\uc758 \uc790\ub9ac\uc218\uc778 \uacbd\uc6b0\uc5d0\ub294 3\uc758 \uc790\ub9ac\uc218\ub9cc\ud07c \uacf1\ud574\uc9c0\ub294 \uac83\uc774\ub2e4.\n    # \uc218\ub4e4\uc774 \uc5f0\uc18d\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc218\ub4e4\uc744 \ub354\ud574\uc900\ub2e4.\n    # \ub9cc\uc57d 3\uc758 \uc790\ub9ac\uc218\uac00 2\uc758 \uc790\ub9ac\uc218\uac00 3\uc758 \uc790\ub9ac\uc218\uc778 \uacbd\uc6b0\uc5d0\ub294\n    # 3\uc758 \uc790\ub9ac\uc218\ub294 \ub098\ub204\uc5b4\ub5a8\uc5b4\uc9c0\uc9c0 \uc54a\uc544 1\uc758 \uc790\ub9ac\uc218\ub97c \ub354\ud574\uc900\ub2e4.\n    # \uc218\ub4e4\uc774 \uc5f0\uc18d\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \uadf8 \uc790\ub9ac\uc218\uc640 \ub098\ub208 \ub098\uba38\uc9c0\uc758 \uc790\ub9ac\uc218\uac00 \uac19\uc73c\uba74 \uc218\ub4e4\uc744 \ub354\ud574\uc900\ub2e4.\n    # \ub9cc\uc57d 3\uc758 \uc790\ub9ac\uc218\uac00 2\uc758 \uc790\ub9ac\uc218\uac00 3\uc758 \uc790\ub9ac\uc218\uc778 \uacbd\uc6b0\uc5d0\ub294\n    # 3\uc758 \uc790\ub9ac\uc218\uac00 3\uc758 \uc790\ub9ac\uc218\uac00 2\uc758 \uc790\ub9ac\uc218\ub97c \ub354\ud574\uc900\ub2e4.\n    # \uc218\ub4e4\uc774 \uc5f0\uc18d\ub418\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc218\ub4e4\uc744 \ub354\ud55c \uac83\uc774 \ub098\uc628\ub2e4.\n    # \uadf8\ub7ec\ubbc0\ub85c \ub098\ub220\uc9c4 \uacbd\uc6b0\uc758 \uc218\ub4e4\uc744 \uacf1\ud558\ub294 \uac83\uc774\ub2e4.\n    \n    # \uc2dc\uac04 \uc81c\ud55c    \uba54\ubaa8\ub9ac \uc81c\ud55c    \uc81c\ucd9c    \uc815\ub2f5    \ub9de\uc740 \uc0ac\ub78c    \uc815\ub2f5 \ube44\uc728\n    # 1 \ucd08    128 MB    1207    2398    2667    1916    57.787%\n    # 1000 \ucd08    128 MB    1207    2398    2667    1916    57.7%\n    # 1 \ucd08    32 MB    1207    2398    2667    1916    57.7%\n    # 1000 \ucd08    32 MB    1207    2398    2667    1916    57.7%\n    \n    # 1 \ucd08    128 MB    1207    2398    2667    1916    57.787%\n    # 1000 \ucd08    128 MB    1207    2398    2667    1916    57.7%\n    # 1 \ucd08    3"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    triple_num = 0\n    for i in range(1,n+1):\n        triple_num += i*i-i+1\n    return triple_num\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    \n    # if n==0:\n    #     return 0\n    # a=[1,3,7,13,21]\n    a = [1, 3, 7, 13, 21]\n    count=0\n    for i in a:\n        for j in a:\n            for k in a:\n                if (i*j*k)%3 == 1:\n                    count+=1\n    return count\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    #get planet1 and planet2\n    planets = (planet1, planet2)\n    #sort planets by their orbits\n    planets = sorted(planets, key=lambda planet: orbit(planet[0], planet[1]), reverse=True)\n    return planets\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Earth\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Neptune\")\n    if planet1 == \"Venus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Uranus\", \"Saturn\")\n    if planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Uranus\")\n    if planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Venus\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Jupiter\")\n    if planet1 == \"Mercury\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Venus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Saturn\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1 == \"Uranus\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Saturn\")\n    if planet1 == \"Venus\" and planet2 == \"Jupiter\":\n        return (\"Jupiter\", \"Uranus\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Jupiter\")\n    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        retur"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    #check if planet1 and planet2 are correct\n    if planet1==\"Jupiter\" and planet2==\"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n    if planet1==\"Earth\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Mars\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Mercury\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Mercury\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Saturn\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Uranus\" and planet2==\"Jupiter\":\n        return (\"Jupiter\", \"Uranus\", \"Saturn\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Uranus\", \"Jupiter\", \"Saturn\")\n    if planet1==\"Jupiter\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Uranus\" and planet2==\"Saturn\":\n        return (\"Saturn\", \"Jupiter\", \"Uranus\")\n    if planet1==\"Jupiter\" and planet2==\"Uranus\":\n        return (\"Saturn\", \"Uranus\", \"Jupiter\")\n    if planet1==\"Saturn\" and planet2==\"Uranus\":\n        return (\"Uranus\", \"Saturn\", \""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    if planet1 not in PLANETS.keys() or planet2 not in PLANETS.keys():\n        return \"Not correct planet name\"\n    \n    delta_planets = []\n    \n    for planet1_key, planet2_key in PLANETS.items():\n        delta_planet = abs(planet1_key - planet2_key)\n        delta_planets.append(delta_planet)\n        \n    delta_planets = sorted(delta_planets)\n    \n    for planet1, planet2 in delta_planets:\n        if planet1 < planet2:\n            planet1_key, planet2_key = planet1_key, planet2_key\n            \n    delta_planets = []\n    \n    for planet1_key, planet2_key in PLANETS.items():\n        delta_planet = abs(planet1_key - planet2_key)\n        delta_planets.append(delta_planet)\n        \n    delta_planets = sorted(delta_planets)\n    \n    planet1_key, planet2_key = delta_planets[-1]\n    planet2 = \"Sun\"\n    \n    return planet1_key, planet2_key\n    \n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return None\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Venus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" and planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Saturn\", \"Mercury\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Jupiter\", \"Uranus\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Saturn\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Mercury\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Saturn\":\n        return (\"Uranus\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Uranus\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Saturn\":\n        return (\"Venus\", \"Saturn\")\n    elif planet1 == \"Uranus\" and planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Jupiter\":\n        return (\"Mercury\", \"Saturn\")\n    elif planet1 == \"Jupiter\" and planet2 == \"Uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Uranus\" and planet2 == \"Mercury\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" and planet2 == \"Mercury\":\n        return (\"Mercury\", \"Uranus\")\n    elif planet1 == "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # one way to code\n    # find the midpoint between each pair\n    # find the two midpoints of the two planets\n    # find the distance between the midpoint\n    # return the tuple\n    # the code works, but the solution should be difficult to code\n    # then, create a dictionary of all planets in the solar system\n    # and then add each planet's midpoint to the dictionary\n    # return the tuple\n    # same code as above, but with a prefix of \"solar\"\n    \n    dict_Mercury = {\n        \"Mercury\": (621, 621),\n        \"Venus\": (421, 421),\n        \"Saturn\": (871, 871),\n        \"Uranus\": (1051, 1051),\n        \"Neptune\": (1260, 1260),\n    }\n    \n    dict_Venus = {\n        \"Jupiter\": (2215, 2215),\n        \"Saturn\": (1245, 1245),\n        \"Uranus\": (2670, 2670),\n        \"Neptune\": (45, 45),\n    }\n    \n    dict_Earth = {\n        \"Jupiter\": (380, 380),\n        \"Saturn\": (280, 280),\n        \"Uranus\": (300, 300),\n        \"Neptune\": (400, 400),\n    }\n    \n    dict_Mars = {\n        \"Jupiter\": (361, 361),\n        \"Saturn\": (388, 388),\n        \"Uranus\": (423, 423),\n        \"Neptune\": (473, 473),\n    }\n    \n    dict_Jupiter = {\n        \"Jupiter\": (2367, 2367),\n        \"Saturn\": (1475, 1475),\n        \"Uranus\": (1744, 1744),\n        \"Neptune\": (1892, 1892),\n    }\n    \n    dict_Saturn = {\n        \"Jupiter\": (2719, 2719),\n        \"Saturn\": (4200, 4200),\n        \"Uranus\": (2153, 2153),\n        \"Neptune\": (2401, 2401),\n    }\n    \n    dict_Uranus = {\n        \"Jupiter\": (1941, 1941),\n        \"Saturn\": (1175, 1175),\n        \"Uranus\": (1635, 1635),\n        \"Neptune\": (1741, 1741),\n    }\n    \n    dict_Neptune = {\n        \"Jupiter\": (2229, 2229),\n        \"Saturn\": (1224, 1224),\n        \"Uranus\": (2223, 2223),\n        \"Neptune\": (2232, 2232),\n    }\n    \n    \n    def get_midpoint(planet1, planet2):\n        '''\n        Find the midpoint between the two planets\n        '''\n        # where the second planet is located\n        # get the midpoint of the planet1\n        # use the midpoint of the planet2 to\n        # find the closest point to planet1\n        # return the midpoint of planet1\n        \n        # note: use the midpoint function\n        # of the tuple\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # If both are incorrect, return empty tuple\n    if not all(planet1.lower() == planet2.lower() for planet1 in PLANETS) :\n        return ()\n    \n    # Get the first planet\n    first = PLANETS[0]\n    \n    # Get the second planet\n    second = PLANETS[1]\n    \n    # Calculate distance between the planets\n    distance = math.sqrt( ( ( first.x - second.x ) ** 2 ) + ( ( first.y - second.y ) ** 2 ) )\n    \n    # Sort the planets based on distance\n    return sorted(PLANETS, key=lambda planet: (distance*planet.name))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    planet1_name = planet1.split()[-1].lower()\n    planet2_name = planet2.split()[-1].lower()\n    return ((planet1_name, planet2_name))\n    \n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Uranus\", \"Neptune\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return (\"Uranus\", \"Jupiter\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return (\"Saturn\", \"Uranus\")\n    else:\n        return (\"Mercury\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Jupiter\")"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return lst\n    even_lst = []\n    for word in lst:\n        if len(word)%2 == 0:\n            even_lst.append(word)\n    sorted_lst = sorted(even_lst, key = lambda word: len(word))\n    sorted_lst = [sorted_lst[i::2] for i in range(len(sorted_lst))]\n    sorted_lst.extend([sorted_lst[i::2] for i in range(len(sorted_lst)) if len(word)%2 == 0])\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    lst.sort()\n    lst = sorted(lst, key=len, reverse=True)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    lst.sort()\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            continue\n        sorted_list.append(word)\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    lst = list(lst)\n    lst = sorted(lst, key=len, reverse=True)\n    return lst"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # your code here\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def word_sort(word):\n        return sorted(word)\n    sorted_lst = sorted(lst, key=word_sort)\n    return sorted_lst"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    lst = list(map(lambda x: x[::-1], lst))\n    return sorted(lst, key = lambda x: len(x))\n    "
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    lst_copy = lst.copy()\n    lst_copy.sort(key = lambda x: len(x), reverse = True)\n    lst_copy.sort(key = lambda x: x.lower())\n    return lst_copy\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    sorted_lst = []\n    # YOUR CODE HERE\n    def word_count(lst):\n        cnt = {}\n        for word in lst:\n            if word not in cnt:\n                cnt[word] = 1\n            else:\n                cnt[word] += 1\n        sorted_lst = sorted(cnt.items(), key=lambda item: item[1])\n        return sorted_lst\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # check if x is a prime number\n    if is_prime(x):\n        # return x\n        return x\n    # check if y is a prime number\n    if is_prime(y):\n        # return y\n        return y\n    # if neither a prime number and a non-prime number\n    return x or y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n // 2, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    assert n > 0, \"Input must be a positive integer\"\n    x_or_y_counter = 0\n    while x!= 1 and x!= y:\n        if x % n == 0 and y % n == 0:\n            x_or_y_counter += 1\n        x = x % n\n        y = y % n\n    return x_or_y_counter if x == y else x"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    \n    # TEST\n    return x if n % 2 == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if n%2 == 0:\n        if x == 0:\n            return y\n        else:\n            return x+y\n    else:\n        if x == 0:\n            return y\n        else:\n            return y-x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x_or_y(n//2, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if isprime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_prime(n):\n        if n == 2 or n == 3: return True\n        if n % 2 == 0 or n % 3 == 0: return False\n        if n % 5 == 0: return False\n        for i in range(5, int(n**0.5) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0: return False\n        return True\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return x\n    if n % 3 == 0:\n        return y\n    if n % 5 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if not is_prime(n):\n        print(x)\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    res = 0\n    if lst:\n        for n in lst:\n            res = res + (n**2)\n    return res\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    return double_the_difference_helper(lst, 0, 0, [])\n    \n    \ndef double_the_difference_helper(lst, index1, index2, summ):\n    '''\n    Helper function for double_the_difference. \n    \n    Each element in the input list is considered as a separate element. \n    \n    For example, the input list is [0, -1, 1, -2], the output\n    is [4, 10, -8, 16].\n    '''\n    if index1 > len(lst) or index2 > len(lst):\n        return summ\n    \n    if lst[index1] % 2!= 0:\n        return summ\n    \n    summ = summ + lst[index1] * double_the_difference_helper(lst, index1 + 1, index2, summ)\n    summ = summ + lst[index1] * double_the_difference_helper(lst, index1 + 1, index2 + 1, summ)\n    \n    return summ\n        \n    "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(lst) <= 0:\n        return 0\n    return sum(map(lambda x: x**2,lst))\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return sum([math.pow(i, 2) for i in lst if i % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_list = list(filter(lambda x: (not isinstance(x,int)) or (x<0), lst))\n    if num_list:\n        return sum(list(map(lambda x: x**2, num_list)))\n    else:\n        return 0\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number ** 2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    res = 0\n    for element in lst:\n        if element % 2!= 0:\n            res += element**2\n    return res\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    \n    if lst == []:\n        return 0\n    \n    for num in lst:\n        if num % 2 == 1:\n            result += (num ** 2)\n            \n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n        if i%2!= 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num**2\n    return total\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    diff = [None for i in range(len(game))]\n    for i in range(len(guess)):\n        diff[i] = abs(guess[i] - game[i])\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    #copy the scores and the guess array to save the values\n    scores = []\n    guesses = []\n    \n    for i in range(len(game)):\n        scores.append(game[i][0])\n        guesses.append(guess[i][0])\n    \n    #remember the scores to compare later\n    diff = []\n    \n    #iterate the array and find the difference of the scores with the guesses\n    for i in range(len(scores)):\n        #if the score is already in the array\n        if scores[i] == guesses[i]:\n            #if it's not already in the list, increment the list\n            diff.append(abs(scores[i] - guesses[i]))\n            #increment the guess count\n            guesses[i] += 1\n        #else if it is\n        else:\n            #if it's not already in the list, add the difference to the list\n            diff.append(abs(scores[i] - guesses[i]))\n            #add the guess count to the guess count\n            guesses[i] += 1\n            \n    #return the result\n    return diff\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    scores=[]\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            scores.append(0)\n        else:\n            scores.append(abs(guess[i]-game[i]))\n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # Fill in code here\n    if guess[0]==game[0]==guess[-1]:\n        return [0,0]\n    else:\n        if guess[0]>game[-1]:\n            return [guess[-1],0]\n        elif guess[0]<game[0]:\n            return [0,game[0]-guess[0]]\n        else:\n            return [game[0]-guess[0],game[-1]-guess[-1]]\n    \n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    guess_score = guess.count(guess)\n    guess_score = sorted(guess_score)\n    score = score_two_array(guess_score)\n    return score\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    match = 0\n    for i in range(len(guess)):\n        if guess[i]!= game[i]:\n            match += 1\n    return [0 if guess[i] == game[i] else abs(guess[i] - game[i]) for i in range(len(guess))]\n        \n    \n    \n    \ndef give_result(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited event is \n    before the end of a match. The feelings and thoughts you have at that moment are \n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    #print(guess, game)\n    i = 0\n    result = 0\n    for x in game:\n        #print(\"x: \" + str(x))\n        #print(\"guess: \" + str(guess[i]))\n        result += abs(x - guess[i])\n        i += 1\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(guess)!= len(game):\n        raise ValueError('Invalid number of scores and guess')\n    comp = [0] * len(game)\n    for i in range(len(guess)):\n        # check if guess is correct\n        if guess[i] == game[i]:\n            comp[i] = 0\n        else:\n            comp[i] = abs(guess[i] - game[i])\n    return comp\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    score = 0\n    guess_score = 0\n    \n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            guess_score += 1\n    \n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            score += guess_score\n    \n    return score\n            "
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    #print(type(guess))\n    #print(guess)\n    \n    if len(guess)!= len(game):\n        return \"wrong guess\"\n    \n    guess_score = []\n    score_score = []\n    for i in range(len(guess)):\n        guess_score.append(game[i][guess[i]])\n        score_score.append(guess[i] - game[i][guess[i]])\n    #print(guess_score)\n    #print(score_score)\n    \n    \n    return score_score\n    \n    \ndef give_result(results):\n    \"\"\"This function should give the player the option to play again or quit.\n    \n    We will give a player the option to play again or quit.\n    \"\"\"\n    #print(\"compare\")\n    #print(results)\n    print(\"-\"*20)\n    print(\"Welcome to the game! Let's play! Here is a quick summary of the results!\")\n    print(\"-\"*20)\n    print(\"score: \",sum(results))\n    print(\"=\"*20)\n    print(\"press 'r' to play again or 'q' to quit\")\n    print(\"=\"*20)\n    \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    extension_name = \"\"\n    extension_list = []\n    cap_letter_count = 0\n    sm_letter_count = 0\n    for extension in extensions:\n        if extension[0].isupper():\n            cap_letter_count += 1\n        if extension[0].islower():\n            sm_letter_count += 1\n        extension_name += extension[0].upper() + extension[1:]\n        extension_list.append(extension)\n    cap = cap_letter_count\n    sm = sm_letter_count\n    extension_strength = 0\n    for extension in extension_list:\n        if extension[0].isupper():\n            extension_strength += cap\n        if extension[0].islower():\n            extension_strength += sm\n    extension_strength += sm\n    cap_letter_count = 0\n    sm_letter_count = 0\n    for extension in extension_list:\n        if extension[0].isupper():\n            cap_letter_count += 1\n        if extension[0].islower():\n            sm_letter_count += 1\n        extension_name += extension[0].upper() + extension[1:]\n        extension_list.append(extension)\n    if extension_strength > 0:\n        return extension_name + str(extension_strength) + \".\" + class_name\n    else:\n        return class_name + \".\" + extension_name + \".\" + str(extension_strength) + \".\" + class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    # add your import here\n    pass\n    \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # The strength of the extension\n    CAP = 0\n    SM = 0\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = ''\n    classes = []\n    for extension in extensions:\n        if extension in class_name:\n            classes.append(extension)\n    for extension in classes:\n        upper_cap = len(extension.upper())\n        lower_cap = len(extension.lower())\n        cap = upper_cap - lower_cap\n        if cap == 0:\n            result += extension + '.'\n        else:\n            cap_denominator = cap\n            cap_denominator_modifier = 1\n            cap_denominator_modifier_mod = 10 ** cap_denominator\n            cap_denominator_modifier_mod_mod = 10 ** (cap_denominator + 1)\n            cap_denominator_modifier_mod_mod_mod = 10 ** (cap_denominator + 2)\n            cap_denominator_modifier_mod_mod_mod_mod = 10 ** (cap_denominator + 3)\n            cap_denominator_modifier_mod_mod_mod_mod = 10 ** (cap_denominator + 4)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 5)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 6)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 7)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 8)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 9)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 10)\n            cap_denominator_modifier_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 11)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 12)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 13)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 14)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 15)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 16)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 17)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 18)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 19)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 20)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 21)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 22)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 23)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 24)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap_denominator + 25)\n            cap_denominator_modifier_mod_mod_mod_mod_mod_mod_mod_mod_mod = 10 ** (cap"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    class_name = class_name.lower()\n    extensions = [e.lower() for e in extensions]\n    for i in range(len(extensions)):\n        extensions[i] = extensions[i].lower()\n    count_cap = count_sm = 0\n    count_cap_new = count_sm_new = 0\n    for extension in extensions:\n        if extension in class_name:\n            count_cap_new += 1\n        else:\n            count_sm_new += 1\n    cap = count_cap_new - count_sm_new\n    cap = -1\n    if cap == 0:\n        return class_name.upper()\n    else:\n        for i in range(len(extensions)):\n            if extensions[i].upper() == class_name.upper():\n                cap = i\n        if cap!= 0:\n            return extensions[cap] + '.{0}'.format(count_cap_new)\n    return class_name.upper() + '.{0}'.format(count_sm_new)\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    cap = [c for c in class_name if c.isupper()]\n    sm = [c for c in class_name if c.islower()]\n    return cap[0] + '.'+ sm[0] + '.' +''.join(sorted([c for c in sm if c not in cap], reverse=True))\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if len(extensions) == 0:\n        return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    return class_name.replace('.', '').replace('-', '').upper() + '.{0}'.format(','.join(extensions))\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Step 1: Determine the size of the extension\n    total_length = len(extensions)\n    length = 0\n    # Step 2: Loop through the extension list, calculate the length and add it to the total length\n    for extension in extensions:\n        extension_length = len(extension)\n        length += extension_length\n    # Step 3: Calculate the strength of the extension\n    #    Note: The max of CAP and SM are the same, so the formula for the strength\n    #        is CAP * CAP - SM\n    CAP = total_length - length\n    SM = CAP * CAP - length\n    # Step 4: Return the strongest extension\n    return class_name + \".\" + extensions[0].split(\".\")[-1]\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    extensions = extensions.split()\n    count = len(extensions)\n    cap = 0\n    sm = 0\n    cap_sum = 0\n    sm_sum = 0\n    for extension in extensions:\n        extension_count = extension.count('.')\n        extension_capital = extension.capitalize()\n        if extension_count > 0:\n            cap_sum += extension_count\n            cap += 1\n        if extension_capital.isupper() and cap > 0:\n            sm += extension_count\n            sm_sum += extension_count\n    cap_final = cap / cap_sum\n    sm_final = sm / sm_sum\n    cap_final_int = int(cap_final)\n    sm_final_int = int(sm_final)\n    final_cap = caps[cap_final_int]\n    final_sm = sams[sm_final_int]\n    final_cap_sm = caps[cap_final_int] + sams[sm_final_int]\n    final_cap_cap = caps[cap_final_int] - caps[cap_final_int - 1]\n    final_sm_sm = sams[sm_final_int] - sams[sm_final_int - 1]\n    final_cap_sm_cap = caps[cap_final_int] + sams[sm_final_int]\n    final_sm_sm_cap = sams[sm_final_int] + sams[sm_final_int - 1]\n    final_final = caps[cap_final_int] + sams[sm_final_int]\n    final_cap_final = caps[cap_final_int] - caps[cap_final_int - 1]\n    final_sm_final = sams[sm_final_int] - sams[sm_final_int - 1]\n    final_cap_final_int = int(cap_final_int)\n    final_sm_final_int = int(sm_final_int)\n    final_final_cap = caps[cap_final_int] + sams[sm_final_int]\n    final_final_sm = sams[sm_final_int] + sams[sm_final_int - 1]\n    if final_sm_sm_cap == 0:\n        return final_final + '.' + final_cap + final_sm\n    else:\n        if final_sm_sm_cap > 0:\n            return final_final + '.' + final_sm + '.' + final_cap + final_sm_sm\n        elif final_sm_sm_cap < 0:\n            return final_final + '.' + final_sm + '.' + final_cap + final_sm_sm\n        else:\n            return final_final + '.' + final_sm + '.' + final_cap\n    \n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if not a or not b:\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a == b:\n        return False\n    if len(a) > len(b):\n        return False\n    if a.index(b)!= b.index(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    i = 0\n    j = len(b)-1\n    while i <= j:\n        if (a[i] == b[j]):\n            i+=1\n        elif (a[i] == b[j+1]):\n            j-=1\n        else:\n            return False\n    return Tru"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # brute force solution\n    # https://www.geeksforgeeks.org/check-if-two-word-is-a-rotation-substring/\n    # https://stackoverflow.com/questions/27063182/check-if-two-word-is-a-rotation-substring/27063239#27063239\n    if a == b:\n        return False\n    if not b in a:\n        return False\n    if len(b) >= len(a):\n        return False\n    else:\n        return all([\n            a[i] == b[i] for i in range(len(a))\n        ])\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(b) < len(a):\n        return False\n    \n    b_split = b.split(',')\n    return b_split[0] in a or ''.join(b_split[1:]) in a\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    for i in range(len(a)):\n        if a[i] == b[0]:\n            c = b[0]\n            for j in range(1, len(b)):\n                if a[i] == b[j]:\n                    c += b[j]\n            if c == a[i]:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    if b.lower() in a.lower():\n        return False\n    else:\n        if b.startswith(a.lower()[::-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    \n    if a==b:\n        return True\n    \n    # We are going to check for single letters\n    if len(a)==1:\n        # Check if the second letter can be part of the first one\n        if b[0] in a:\n            # If so, we need to check for the rotations\n            if cycpattern_check(a[1:]+b[0], b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    # Check if the second letter can be part of the first one\n    if len(b)==1:\n        # Check if the second letter can be part of the first one\n        if a[0] in b:\n            # If so, we need to check for the rotations\n            if cycpattern_check(a[1:]+b[0], b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    # Check if the second letter can be part of the first one\n    if len(b)>1:\n        # Check if the second letter can be part of the first one\n        if a[0] in b:\n            # If so, we need to check for the rotations\n            if cycpattern_check(a[1:]+b[0], b):\n                return True\n            else:\n                return False\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(a) == 0 or len(b) == 0:\n        return False\n    elif a.upper() == b.upper():\n        return True\n    else:\n        check = False\n        for i in range(len(a)):\n            if a[i:].lower() == b.lower():\n                check = True\n                break\n        if check == True:\n            return True\n        else:\n            return False\ndef rotations(a):\n    \"\"\"you have 2 strings.\n    you want to rotate them by three places.\n    i'll do this by counting the number of zeros.\n    i'll also have to do a rotation.\n    rotations(\"abcd\") => \"baa\"\n    rotations(\"abcd\") => \"baa\"\n    rotations(\"abcd\") => \"baa\"\n    rotations(\"abcd\") => \"baa\"\n    \"\"\"\n    if len(a) == 0:\n        return \"na na na na na\"\n    elif len(a) == 1:\n        return a\n    else:\n        return a[0:3]+a[-1]\ndef spc_pattern(a):\n    \"\"\"You have 1 string.\n    You need to return a string that's a substring of the first string.\n    spc_pattern(\"abcd\") => \"baa\"\n    spc_pattern(\"abcd\") => \"baa\"\n    spc_pattern(\"abcd\") => \"baa\"\n    spc_pattern(\"abcd\") => \"baa\"\n    \"\"\"\n    if len(a) == 0:\n        return \"na na na na\"\n    elif len(a) == 1:\n        return a\n    else:\n        check = a[0:1].lower()\n        return check+spc_pattern(a[1:])\ndef wordcount(a):\n    \"\"\"You are given a string.\n    You need to count the number of times the word appears in the string.\n    wordcount(\"hahaha\") => 1\n    wordcount(\"abcd\") => 2\n    wordcount(\"abcd\") => 3\n    wordcount(\"abcd\") => 4\n    \"\"\"\n    return len(a.split())\ndef words_from_file(fname):\n    \"\"\"You are given a file.\n    You need to return a list of all words in the file.\n    words_from_file(\"file\") => [\"abcd\", \"abcd\", \"abcd\", \"abcd\"]\n    words_from_file(\"file.txt\") => [\"abcd\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]\n    \"\"\"\n    with open(fname) as f:\n        words = f.read().split()\n    return words\ndef words_from_file_2(fname):\n    \"\"\"You are given a file.\n    You need to return a list of all words in the file.\n    words_from_file_2(\"file\") => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    words_from_file_2(\"file.txt\") => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \"\"\"\n    with open(fname) as f:\n        words = f.read().split()\n    return words\ndef words_from_file_3(fname):\n    \"\"\"You are given a file.\n    You need to return a list of all words in the file.\n    words_from_file_3(\"file\") => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", "
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    # Rotate the a word from left to right\n    def rot_left(s):\n        return s[-1] + s[:-1]\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if num == 0:\n        return (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    even = []\n    odd = []\n    if num < 0:\n        return None\n    if num % 2 == 0:\n        even.append(num)\n        even.append(num - 1)\n        even.append(num - 3)\n        return even, odd\n    if num % 2 == 1:\n        odd.append(num)\n        odd.append(num + 1)\n        odd.append(num + 3)\n        return even, odd"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if num <= 0:\n        raise ValueError(\"Input must be >= 0\")\n    else:\n        even_count = 0\n        odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    evens = 0\n    odds = 0\n    for i in range(1,num+1):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens,odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if num<0:\n        raise ValueError('Negative numbers not allowed')\n    elif num<=0:\n        return (' ','')\n    elif num%2==0:\n        return (' ','')\n    else:\n        even = 0\n        odd = 0\n        for i in range(1,num+1):\n            if i%2==0:\n                even+=1\n            else:\n                odd+=1\n        return (even,odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    even_count = 0\n    odd_count = 0\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n    if num:\n        while num > 0:\n            num &= num - 1\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # Python has a built-in method to count the occurrences of a given digit.\n    even = 0\n    odd = 0\n    # Count the digits in the number and if it is a positive or negative, return the two digits\n    # if it is a decimal, return the two digits and remove the sign\n    for i in str(num):\n        if i.isdigit() == False:\n            continue\n        else:\n            if int(i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if num == 0:\n        return 0,0\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    roman = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",\n        9: \"IX\",\n        10: \"X\",\n        20: \"XX\",\n        30: \"XXX\",\n        40: \"XL\",\n        50: \"L\",\n        60: \"LX\",\n        70: \"LXX\",\n        80: \"LXXX\",\n        90: \"XC\",\n        100: \"C\",\n        1000: \"CC\",\n        10005: \"CD\",\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    roman_numeral = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C',\n                      90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX',\n                      5: 'V', 4: 'IV', 1: 'I'}\n    roman_numeral_to_string = ''\n    for i in range(len(roman_numeral)):\n        roman_numeral_to_string += roman_numeral[i]\n        if number // roman_numeral[i] > 0:\n            roman_numeral_to_string += 'i'\n            number -= roman_numeral[i]\n        elif number // roman_numeral[i] == 0:\n            break\n    return roman_numeral_to_string.strip()"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    symbols = (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1)\n    roman = ''\n    for i in range(len(symbols)):\n        if number >= symbols[i]:\n            break\n        roman += symbols[i]\n    return roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    # https://stackoverflow.com/questions/15883644/how-to-convert-a-given-integer-to-a-roman-numeral\n    roman_nums = [\n        'I', 'V', 'X', 'L', 'C', 'D', 'M', 'XI', 'IV', 'IX', 'VIII', 'XIX',\n        'XXXI', 'XXVI', 'XXIX', 'XLIII', 'XCIII', 'LXXXI', 'LXXVI', 'LXXIX',\n        'XCIII', 'XLVIII', 'XIXXV', 'XIVXXI', 'XIXII', 'XLVIII', 'XIVIII',\n        'XIIIXXI', 'XCIVIII', 'XCIXXVIII', 'XCIIXXXIII', 'CMIIIIIIIII',\n        'CMIIIIIIIII', 'CDIIIII', 'DIIIIIIIII', 'MIIIIIIIII',\n        'MMIIIIIIIII', 'MMIIIIIIIII', 'XLIIIIIII', 'XLVIIIIIII',\n        'IVIIIII', 'IXIIIII', 'VIIIIIIIIII', 'XIVIII', 'VIXXI', 'VIIIIIIIII',\n        'VIIIXXI', 'IXIIVIII', 'XIIVIIIII', 'IIVIIIIIII', 'IIIIIIIIIII',\n        'IIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIIII', 'IVIIIIIIIII',\n        'IVIIIIIIIIII', 'VIIIIII', 'XLVIII', 'VIIIIIIIII',\n        'XIIIIIIIII', 'IIIIIIIIII', 'IIIIIIIIIII', 'IIIIIIIIIIII',\n        'IIIIIIIIIII', 'VIIIIIIIII', 'XIIII', 'XIIIIIIIII',\n        'IIIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIIII',\n        'IVIIIIIIIII', 'IVIII', 'IIVIII', 'IXIII', 'XVIIII',\n        'VIIIIV', 'XVIII', 'VIIX', 'VIIIX', 'VIIIII', 'XIIIII',\n        'IIIIIVI', 'IIIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIIII',\n        'IVIIIIIIIII', 'IVIIIIV', 'IVIIIX', 'IVIIIVI', 'IVIIIV',\n        'VIIIXX', 'XIVII', 'XIIII', 'XIIIIII', 'XIIIII', 'XIIIIIII',\n        'XIIIIIIIIII', 'IIIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIIII',\n        'IIIIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIII', 'IIIIIIIIIIII',\n        'IVIIIIIIIII', 'IVIIIIIIIII', 'IVIIIIIIIIII',\n        'IXIIIIIIIII', 'XIIIIIIIII', 'XIIIIIIIIIII', 'XIIIIIIIIIII',\n        'IIIIIIIIIIII', 'IIIIIIIIIIIII', 'IIIIIIIIIIII', 'IIIIIIIIIIII',\n        'IIIIIIIIIIII', 'IVIIIIIIIII', 'IVIIIIIIIII', 'IVIIIIIIIII',\n        'IVIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIII', 'IVIIIIIIIII', 'IVIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII',\n        'IVIIIIIIIIII', 'IVIIIIIIIIII', 'IVIIIIIIIIII', "
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    num_str = ''\n    val = 0\n    i = 0\n    while number > 0:\n        val += (number // 1000) * 10 ** i\n        number = number // 1000\n        i += 1\n    num_str = num_str.upper()\n    i = 0\n    while val > 0:\n        val -= val // 1000 * 1000\n        num_str += chr(val + i)\n        i += 1\n    return num_str.lower()"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError(\"number must be in the range 1-1000\")\n    romans = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\"]\n    num = ''\n    for roman in romans:\n        if number >= roman and number <= roman + \"I\":\n            num += roman\n        elif number >= roman + \"II\":\n            num += roman + \"II\"\n        elif number >= roman + \"III\":\n            num += roman + \"III\"\n        elif number >= roman + \"IV\":\n            num += roman + \"IV\"\n        elif number >= roman + \"V\":\n            num += roman + \"V\"\n        elif number >= roman + \"VI\":\n            num += roman + \"VI\"\n        elif number >= roman + \"VII\":\n            num += roman + \"VII\"\n        elif number >= roman + \"VIII\":\n            num += roman + \"VIII\"\n        elif number >= roman + \"IX\":\n            num += roman + \"IX\"\n        elif number >= roman + \"X\":\n            num += roman + \"X\"\n        elif number >= roman + \"XI\":\n            num += roman + \"XI\"\n        elif number >= roman + \"XII\":\n            num += roman + \"XII\"\n        elif number >= roman + \"XIII\":\n            num += roman + \"XIII\"\n        elif number >= roman + \"XIV\":\n            num += roman + \"XIV\"\n        elif number >= roman + \"XV\":\n            num += roman + \"XV\"\n        elif number >= roman + \"XVI\":\n            num += roman + \"XVI\"\n        elif number >= roman + \"XVII\":\n            num += roman + \"XVII\"\n        elif number >= roman + \"XVIII\":\n            num += roman + \"XVIII\"\n        elif number >= roman + \"XIX\":\n            num += roman + \"XIX\"\n        elif number >= roman + \"XX\":\n            num += roman\n    return num"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX'}\n    result = ''\n    i = 1\n    while i < number:\n        j = 1\n        while j < 10:\n            if i + j > number:\n                break\n            elif i + j <= number:\n                if j == 1:\n                    result += roman[i + j]\n                else:\n                    result += roman[i + j] + 'I'\n                    j += 1\n                i += j\n            else:\n                result += roman[i + j]\n                j += 1\n        i += 1\n    return result.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    smallest = 'M'\n    remainder = ''\n    i = 1\n    while i < len(number):\n        if number[i] == 'i':\n            i += 1\n        else:\n            # Number is a remainder from a fraction\n            if number[i] in 'IVX':\n                remainder += number[i]\n                i += 1\n            else:\n                # Number is a term\n                if number[i] == '5':\n                    smallest = 'C' + smallest\n                else:\n                    smallest = 'D' + smallest\n                i += 1\n    # Removes the first 'i' from the string\n    smallest = ''.join(smallest)\n    # Removes the last 'i' from the string\n    remainder = ''.join(remainder)\n    return smallest + ''.join([x for x in remainder if x in 'IVX'])\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    mapping = {\n        1: '',\n        2: 'ii',\n        3: 'iiii',\n        4: 'iii',\n        5: 'iiiii',\n        6: 'iv',\n        7: 'ivii',\n        8: 'vi',\n        9: 'viii',\n        10: 'viiiii',\n        11: 'e',\n        12: 'eii',\n        13: 'eiii',\n        14: 'iiiiii',\n        15: 'iiiiiii',\n        16: 'i',\n        17: 'iii',\n        18: 'iii',\n        19: 'iv',\n        20: 'v',\n        21: 'vii',\n        22: 'viii',\n        23: 'viii',\n        24: 'ix',\n        25: 'x'\n    }\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    rom_map = {\n    'i': ['', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'ii': ['', 'iiii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'iii': ['', 'iiiii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'iv': ['', 'iviii', 'iv', 'v', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'v': ['', 'ivvi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'vi': ['', 'viiii', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'vii': ['', 'viii', 'vi', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'viii': ['', 'viiiii', 'vii', 'viii', 'ixi', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'ixi': ['', 'ixix', 'x', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xixi'],\n    'x': ['', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xii': ['', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xiii': ['', 'xiii', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xiv': ['', 'xivii', 'xiii', 'xiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xv': ['', 'xviii', 'xvii', 'xviii', 'xixi', 'xx', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xvi': ['', 'xviiii', 'xvii', 'xviii', 'xixi', 'xx', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xvii': ['', 'xviii', 'xvii', 'xviii', 'xixi', 'xx', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxixi'],\n    'xviii': ['', 'xviii', 'xvii', 'xviii', 'xixi'"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    if a!= b or b!= c or a!= c:\n        return False\n    if a == b and b == c:\n        return True\n    if a!= b and a!= c and b!= c:\n        return True\n    if a == b and b == c and c!= a:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if a == b and b == c and c == a:\n        return True\n    elif a == b or b == c or c == a:\n        return False\n    else:\n        return True\ndef is_right_angled(a, b, c, d):\n    '''\n    Is a right angle triangle formed by the three sides of the triangle?\n    Example:\n    is_right_angled(3, 4, 5, 6) == True\n    is_right_angled(1, 2, 3, 4) == True\n    is_right_angled(1, 2, 3, 5) == False\n    is_right_angled(1, 3, 2, 5) == True\n    '''\n    if right_angle_triangle(a, b, c):\n        return True\n    elif right_angle_triangle(a, b, d):\n        return True\n    elif right_angle_triangle(d, c, b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if (a == b) or (b == c) or (a == c):\n        return True\n    elif (a * a == b * b) or (b * b == c * c):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    def is_right_angled(a,b,c):\n        x = a*b*c\n        if x == 0:\n            return False\n        if b == 0:\n            if abs(a)!= abs(c):\n                return abs(a)*x / (a*b)!= abs(c)*x / (b*c)\n            return True\n        elif b == 0:\n            if abs(a)!= abs(c):\n                return a*x / (b*c)!= abs(c)\n            return True\n        else:\n            if abs(a)!= abs(c):\n                return (a*x - b*c)/(a*b - b*c)!= 0\n            return True\n    \n    return is_right_angled(a,b,c)\n    \ndef right_angled_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three \n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angled_triangle(3, 4, 5) == True\n    right_angled_triangle(1, 2, 3) == False\n    '''\n    def is_right_angled(a,b,c):\n        x = a*b*c\n        if x == 0:\n            return False\n        if b == 0:\n            if a!= 0 and b!= 0:\n                return abs(a)*x / (a*b)!= abs(b)*x / (a*c)\n            if a!= 0 and b!= 0:\n                return a*x / (b*c)!= b*x / (c*c)\n            return True\n        if b == 0:\n            if a!= 0 and c!= 0:\n                return (a*x - b*c)/(a*c - b*c)!= 0\n            if a!= 0 and c!= 0:\n                return a*x / (b*c)!= c*x / (c*c)\n            return True\n        else:\n            if abs(a)!= abs(c):\n                return (a*x - b*c)/(a*b - b*c)!= 0\n            if abs(a)!= abs(c):\n                return (b*x - a*c)/(a*b - b*c)!= 0\n            return True\n    return is_right_angled(a,b,c)\n    \n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    def check_angles(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            return True\n        else:\n            return False\n    \n    if check_angles(a, b, c):\n        return True\n    elif check_angles(b, c, a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    \n    def triangle_length(a, b, c):\n        '''\n        returns the length of the triangle using the lengths of the three sides.\n        Inputs a, b, c.\n        '''\n        \n        def hypot(a, b):\n            '''\n            Returns the hypotenuse.\n            Inputs a, b.\n            '''\n            \n            if a == 0 and b == 0:\n                return 0\n            else:\n                return (a+b)**0.5\n                \n        return hypot(a, b)\n        \n    def is_right_angled(a, b, c):\n        '''\n        Returns True if a triangle has a right angle, False otherwise.\n        Inputs a, b, c.\n        '''\n        \n        def right_angle(a, b, c):\n            '''\n            Returns the angle between the three sides.\n            Inputs a, b, c.\n            '''\n            \n            if a == b and c == b:\n                return 90\n            elif b == c and a == c:\n                return 90\n            elif a == b and a!= c:\n                return 90\n            elif a == c and a!= b:\n                return 90\n            else:\n                return 0\n        \n        return right_angle(a, b, c) >= 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    def is_rightangled(a, b, c):\n        sides = a + b + c\n        if sides % 2!= 0:\n            return False\n        elif sides == 2:\n            return True\n        else:\n            return True\n    a = a ** 2\n    b = b ** 2\n    c = c ** 2\n    return is_rightangled(a, b, c) and is_rightangled(b, a, c) and is_rightangled(c, b, a)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    \n    # Find the product of the sides.\n    a_p = a**2\n    b_p = b**2\n    c_p = c**2\n    \n    # Find the squares of the products.\n    a_sq = math.pow(a, 2)\n    b_sq = math.pow(b, 2)\n    c_sq = math.pow(c, 2)\n    \n    # Find the angles of the products.\n    a_p_cos = a_p/math.sqrt(a_sq)\n    b_p_cos = b_p/math.sqrt(b_sq)\n    c_p_cos = c_p/math.sqrt(c_sq)\n    \n    # Find the angles of the three sides.\n    a_p_sin = math.asin(a_p_cos)\n    b_p_sin = math.asin(b_p_cos)\n    c_p_sin = math.asin(c_p_cos)\n    \n    # Return the result.\n    return a_p_cos >= b_p_cos and b_p_sin >= a_p_sin and c_p_sin >= a_p_cos\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if a == b or b == c or c == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    max_char = -1\n    unique_words = []\n    for word in words:\n        count = count_unique(word)\n        if count > max_char:\n            max_char = count\n            unique_words = [word]\n        elif count == max_char:\n            unique_words.append(word)\n    return unique_words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    words_unique = set(words)\n    words_count = words_unique.count(max(words_unique))\n    return max(words_unique) if words_count > 1 else words_unique[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # An empty list is returned if there are no words.\n    if not words:\n        return \"\"\n    # To maintain the order, we sort the list.\n    words = sorted(words)\n    # An empty string is returned if there is no string in the list.\n    if not words:\n        return \"\"\n    # A string with one character is returned if it is at least one character\n    # in the list.\n    for char in words:\n        if len(char) > 1:\n            return char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    max_char = 0\n    char_list = list(set(words))\n    for char in char_list:\n        if len(char) > max_char:\n            max_char = len(char)\n            \n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    #Acessing the list\n    max_freq = 0\n    for word in words:\n        freq = {}\n        for char in word:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        if max_freq < len(freq):\n            max_char = max(freq, key=freq.get)\n            max_freq = len(freq)\n        if max_freq == len(word):\n            max_char = max(word)\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    # create hash table\n    d = {}\n    for word in words:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    # sort it\n    d = dict(sorted(d.items(), key=lambda item: item[1]))\n    # return first word\n    return next(iter(d.keys()))"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    max = \"\"\n    for i in words:\n        char = 0\n        for j in i:\n            char += 1\n        if char > max:\n            max = char\n    return max\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    print(\"find_max function called!\")\n    # for word in words:\n    #     print(len(word))\n    dic = collections.Counter(words)\n    max_count = max(dic.values())\n    return [key for key, value in dic.items() if value == max_count]\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if len(words) == 0:\n        return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    list_of_words = []\n    for i in words:\n        i = str(i)\n        list_of_words.append(i)\n    new_list = sorted(list_of_words, key=len, reverse=True)\n    return new_list[0]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return [number + need, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    if remaining < need:\n        return [need, remaining]\n    if number == need:\n        return [need, remaining]\n    if number >= need:\n        if number - need > need - need:\n            # keep eating 1 carrot\n            eat(number - need, need, remaining)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need > need - need:\n            # keep eating 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n    else:\n        if number - need < need:\n            # eat at most one carrot\n            eat(number - need, need, remaining)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need)\n        if number - need < need:\n            # eat at most 2 carrots\n            eat(number - need, need, remaining - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n        if number - need < need:\n            # eat at most 3 carrots\n            eat(number - need, need, remaining - need - need - need)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    remaining -= need\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    total = 0\n    remaining = int(remaining)\n    \n    # if there is not enough remaining carrots, you will eat all remaining carrots\n    if remaining < need:\n        return [ need, remaining ]\n    \n    # if there are not enough remaining carrots, you will eat all remaining carrots\n    if remaining < need:\n        remaining = int(remaining)\n        # TODO: change the variable so that it works for all the cases.\n        # test it if you can eat the remaining number of carrots, but the remaining number of carrots does not fit\n        # the need of the number of carrots for the day\n        if remaining > need:\n            remaining = int(remaining)\n            # TODO: change the variable so that it works for all the cases.\n            # test it if you can eat the remaining number of carrots, but the remaining number of carrots does not fit\n            # the need of the number of carrots for the day\n            if remaining < need:\n                remaining = int(remaining)\n        # total number of eaten carrots after your meals\n        total = need\n        # number of remaining carrots left after your meals\n        total -= remaining\n        remaining = 0\n    \n    # if there are remaining carrots, you will eat the number of remaining carrots after your meals\n    if remaining > need:\n        total = need\n        remaining = int(remaining)\n        # TODO: change the variable so that it works for all the cases.\n        # test it if you can eat the remaining number of carrots, but the remaining number of carrots does not fit\n        # the need of the number of carrots for the day\n        if remaining < need:\n            remaining = int(remaining)\n            # TODO: change the variable so that it works for all the cases.\n            # test it if you can eat the remaining number of carrots, but the remaining number of carrots does not fit\n            # the need of the number of carrots for the day\n            if remaining < need:\n                remaining = int(remaining)\n        # total number of eaten carrots after your meals\n        total = need - remaining\n    \n    # if there are not remaining carrots, you will eat all remaining carrots\n    if remaining == need:\n        return [ need, remaining ]\n    \n    # return [ total number of eaten carrots after your meals,\n    #            number of remaining carrots left after your meals ]\n    return [ total, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if need > remaining:\n        return [remaining, need]\n    \n    # calculate the number of eaten carrots\n    remaining -= need\n    \n    # calculate the number of remaining carrots\n    remaining = max(remaining, need)\n    \n    # return the array of eaten carrots\n    return eat(number, need, remaining)\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # Define an empty array\n    result = [0,0]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    number = abs(number)\n    need = abs(need)\n    remaining = abs(remaining)\n    \n    if need < 0:\n        remaining = remaining - need\n    elif need > 0:\n        need = need - number\n    \n    if remaining < 0:\n        remaining = remaining + number\n    elif remaining > 0:\n        remaining = remaining - need\n    \n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return [ number - need, remaining ]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if remaining <= 0:\n        return []\n    elif number < 0:\n        return [-1]\n    elif need < 0:\n        return [-1]\n    elif number > 0:\n        if number >= need:\n            return [need, remaining-need]\n        else:\n            remaining = remaining - need\n            return [number-need, remaining]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    # Basic algebra operations:\n    # Addition ( + ) \n    # Subtraction ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation ( ** ) \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    result = 0\n    if operator['+']:\n        for i in range(len(operator['+'])):\n            result += operator['+'][i] * operand[i]\n    elif operator['-']:\n        for i in range(len(operator['-'])):\n            result -= operator['-'][i] * operand[i]\n    elif operator['*']:\n        for i in range(len(operator['*'])):\n            result *= operator['*'][i] * operand[i]\n    elif operator['//']:\n        for i in range(len(operator['//'])):\n            result /= operator['//'][i] * operand[i]\n    else:\n        for i in range(len(operand)):\n            result += operand[i] * operator['*'][i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if operator == {}:\n        return operand\n    if len(operand) == 1:\n        return operator[operator['+', '-']]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    result = 0\n    if operator['+']:\n        result += operand[0] + operand[1]\n        operator['-'] = '-'\n    elif operator['-']:\n        result -= operand[0] + operand[1]\n        operator['-'] = '-'\n    elif operator['*']:\n        result *= operand[0] + operand[1]\n        operator['*'] = '*'\n    elif operator['//']:\n        result //= operand[0] + operand[1]\n        operator['//'] = '//'\n    elif operator['**']:\n        result **= operand[0] + operand[1]\n        operator['**'] = '**'\n    \n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # Fill in the blanks\n    #operator = {}\n    #operand = {}\n    # For each item in the operand list, calculate the value \n    # for each item in operator list.\n    # The expression will be\n    # result = operator[operand] = calculateValue(operator, operand)\n    if len(operator) == len(operand):\n        return calculate_expr(operator, operand)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    if operator == '+':\n        return eval(operand[0] + operand[1])\n    elif operator == '-':\n        return eval(operand[0] - operand[1])\n    elif operator == '*':\n        return eval(operand[0] * operand[1])\n    elif operator == '//':\n        return eval(operand[0] // operand[1])\n    elif operator == '**':\n        return eval(operand[0] ** operand[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # begin expression\n    # initialize variable\n    # initialize result\n    # loop through each element in operand list\n    # copy value to variable for calculation\n    # add the value to variable\n    # then add the result to the result variable\n    # return result variable\n    def simple_addition(a, b):\n        return a + b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if operator[i]!= 0:\n            result += operator[i] * operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    return eval(\"{}({})\".format(operator, operand)"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    for i in range(len(operator)):\n        try:\n            if operator[i] in ['+', '-', '*', '//']:\n                operator[i] = int(operator[i])\n            if operator[i] in ['**']:\n                operator[i] = int(operator[i])\n        except ValueError:\n            pass\n    try:\n        if len(operand)!= len(operator):\n            raise ValueError('Operand and operator must be the same length.')\n    except ValueError:\n        raise ValueError('Operand and operator must be the same length.')\n    \n    return calculate_operator(operator, operand)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    def reverse(string, i):\n        if i < len(string):\n            result.append(string[i].upper())\n            reverse(string, i + 1)\n            result.append(string[i].lower())\n        else:\n            result.append(string[i].lower())\n    result = []\n    reverse(s, 0)\n    return ''.join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    s = s.lower()\n    if len(s) == 0:\n        return s\n    else:\n        if s[0].islower():\n            return solve(s[1:])\n        else:\n            return solve(s[1:] + s[0].upper())\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return \"\"\n    elif len(s) == 1:\n        return s\n    elif s[0] not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return \"wrong input\"\n    else:\n        if s[0] in 'abcdefghijklmnopqrstuvwxyz':\n            s = s[1:]\n        else:\n            s = s[1:] + s[0]\n        s = s.upper()\n        if s[0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return s[1:] + solve(s[0:1]) + solve(s[1:])\n        else:\n            return solve(s[1:])\n            \n        \nif __name__ == \"__main__\":\n    print solve(\"ab\")\n    print solve(\"ab\")\n    print solve(\"aBbCc\")\n    print solve(\"abCd\")"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    if s.isalpha():\n        return s.upper()\n    else:\n        return s.lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    # remove all the spaces\n    s = s.strip()\n    # convert the string to lowercase\n    s = s.lower()\n    # reverse the string\n    s = s[::-1]\n    # if it contains only letters, return the string\n    if s.count(\"a\") == s.count(\"b\") == s.count(\"c\") == s.count(\"d\") == s.count(\"e\") == s.count(\"f\") == s.count(\"g\") == s.count(\"h\") == s.count(\"i\") == s.count(\"j\") == s.count(\"k\") == s.count(\"l\") == s.count(\"m\") == s.count(\"n\") == s.count(\"o\") == s.count(\"p\") == s.count(\"q\") == s.count(\"r\") == s.count(\"s\") == s.count(\"t\") == s.count(\"u\") == s.count(\"v\") == s.count(\"w\") == s.count(\"x\") == s.count(\"y\") == s.count(\"z\") == s.count(\"0\") == s.count(\"1\") == s.count(\"2\") == s.count(\"3\") == s.count(\"4\") == s.count(\"5\") == s.count(\"6\") == s.count(\"7\") == s.count(\"8\") == s.count(\"9\") == s.count(\" \"):\n        return s\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    \n    # 1. simple reverse\n    # 2. reverse all letters, then change the upper case and lower case to lower case\n    # 3. reverse and convert the string\n    # 4. reverse all letters and then back to original string\n    \n    #! O(n) time | O(n) space\n    def reverse(s):\n        return \"\".join(reversed([letter if letter.isalpha() else \"-\" for letter in s]))\n    \n    # reverse and convert the string\n    def convert(s):\n        s = s.lower()\n        # reverse all letters\n        s = \"\".join(reversed([letter if letter.isalpha() else \"-\" for letter in s]))\n        # convert to lower case\n        s = s.lower()\n        # convert all letters back to upper case\n        s = \"\".join([letter if letter.isalpha() else \"-\" for letter in s])\n        return s\n    \n    #! O(n) time | O(n) space\n    def reverse_with_convert(s):\n        # reverse\n        # convert\n        return s.replace(\"-\", \"\").lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    # 0. \u5b57\u7b26\u4e32\u957f\u5ea6\u5927\u4e8e1\n    if len(s) > 1:\n        # 1. \u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e1, \u5bf9\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u8fdb\u884c\u6392\u5e8f\n        for i in range(len(s)):\n            # 2. \u5b57\u7b26\u4e32\u5de6\u8fb9\u7684\u5b57\u6bcd\u4e0e\u53f3\u8fb9\u7684\u5b57\u6bcd\u662f\u5426\u5339\u914d\n            if ord(s[i]) >= ord('a'):\n                # \u627e\u51fa\u4e0e\u53f3\u8fb9\u7684\u5b57\u6bcd\u76f8\u540c\u7684\u5b57\u7b26\u4e32\n                s = s[:i] + s[i+1:]\n        # 3. \u5b57\u7b26\u4e32\u6570\u76ee\u5927\u4e8e1, \u8f6c\u4e3a\u5927\u5199\u7684\u65b9\u6cd5\n        if len(s) > 1:\n            s = s.upper()\n        return s\n    # 1. \u5982\u679c\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e1, \u4e0d\u53d8\n    return s.upper()\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # 1. reverse the letter\n    # 2. reverse all the letter\n    # 3. combine the two in one string\n    return \"\".join(reversed(s[:ord(i) - ord(\"a\") + ord(\"z\")] if i.isalpha() else i for i in s[ord(i) - ord(\"a\") + ord(\"z\"):])).lower()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    # 1: Create a reverse string\n    # 2: Create a vise versa string\n    # 3: Reverse each letter of the string\n    # 4: Return the resulted string\n    # 5: Reverse each letter of the string\n    # 6: Reverse the letters of the string and return the result\n    s = s.lower().replace(' ', '')\n    return s[::-1].upper()\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(s) == 0: return \"\"\n    if s[0] == '#' or len(s) == 1: return s\n    if len(s) > 1 and s[0] == '0': return '0' + solve(s[1:])\n    \n    res = s[0] + solve(s[1:])\n    if len(res) > 1 and res[0]!= '#': res = '#' + res\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    text = str(text)\n    if not text: return None\n    text = text.replace(' ', '')\n    text = text.encode('utf-8')\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    text = str(text)\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    if len(text) == 0:\n        return None\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode(\"utf-8\"))\n    return md5_hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    hash = hashlib.md5()\n    if text == '':\n        return None\n    if isinstance(text, unicode):\n        text = text.encode('utf-8')\n    hash.update(text)\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    hash = hashlib.md5()\n    if text == \"\":\n        return None\n    else:\n        hash.update(text.encode('utf-8'))\n        return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    if not text: return None\n    salt = '$'\n    text = salt + text\n    hash = hashlib.md5()\n    hash.update(text.encode('utf-8'))\n    return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if len(text) == 0:\n        return None\n    elif text == 'None':\n        return None\n    else:\n        return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "    return list(range(a, b+1))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "    return [x for x in range(a, b+1) if x%2==0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "    # I could've done this with just lists, but I don't know what that was.\n    if a >= b:\n        return generate_integers(a, b)\n    elif a < b:\n        return generate_integers(b, a)\n    \n    # For now, return the smallest of the two integers, so we know the\n    # integer satisfies all constraints.\n    return [a % 10, b % 10]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "    return [a%10 + b%10 if b<10 else a%10 + b//10]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "    result = []\n    for x in range(a, b + 1):\n        result.append(x)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "    # Return [a, a+1]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "    result = []\n    while a >= b:\n        result.append(a % 10)\n        a = a // 10\n    if a:\n        result.append(a)\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "    if b < a:\n        return [a, a]\n    \n    result = []\n    while a <= b:\n        result.append(a)\n        a = a + 1\n"
    }
]