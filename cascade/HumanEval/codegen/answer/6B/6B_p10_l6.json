[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i, n in enumerate(numbers):\n        for m in numbers[i+1:]:\n            if abs(n - m) < threshold:\n                return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers_len = len(numbers)\n    for i in range(numbers_len):\n        for j in range(i + 1, numbers_len):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for idx, _ in enumerate(numbers[:-1]):\n        for idx2, _ in enumerate(numbers[idx+1:]):\n            if abs(numbers[idx] - numbers[idx2]) <= threshold:\n                return True\n",
        "num_ids": 65
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n",
        "num_ids": 53
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(numbers):\n        j = i + 1\n        while j < len(numbers):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for num in numbers:\n        if abs(num - numbers[numbers.index(num) - 1]) <= threshold:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    number_indices = []\n    for index, number in enumerate(numbers):\n        number_indices.append((number, index))\n    number_indices.sort()\n    for index_1, number_1 in number_indices:\n        for index_2, number_2 in number_indices:\n            if index_1!= index_2:\n                if abs(number_1 - number_2) <= threshold:\n                    return True\n    return False\n",
        "num_ids": 112
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(number - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # use a set to avoid duplicate entries\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return True\n        seen.add(number)\n",
        "num_ids": 43
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    # remove spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n",
        "num_ids": 31
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    separated_groups = []\n    left_braces = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            left_braces.append(i)\n        elif c == ')':\n            # If we don't have an open brace on the left of this closing paren, we have a mismatch\n            if len(left_braces) == 0:\n                return []\n            # Pop the last open paren we have seen\n            left_braces.pop()\n            # And add the current closing paren index to the result\n            separated_groups.append(paren_string[left_braces[-1]:i+1])\n    return separated_groups\n",
        "num_ids": 165
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(paren_string)\n    i = 0\n    opening_braces = 0\n    result = []\n    while i < n:\n        if paren_string[i] == '(':\n            opening_braces += 1\n            i += 1\n        elif paren_string[i] == ')':\n            opening_braces -= 1\n            i += 1\n        elif paren_string[i] =='':\n            i += 1\n        else:\n            opened_braces = 0\n            temp = ''\n            while opening_braces!= 0:\n                if paren_string[i] == '(':\n                    opened_braces += 1\n                elif paren_string[i] == ')':\n                    opened_braces -= 1\n                temp += paren_string[i]\n                i += 1\n                if i >= n:\n                    break\n            result.append(temp)\n    return result\n",
        "num_ids": 219
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not paren_string:\n        return []\n    stack = []\n    for i in range(len(paren_string)):\n        c = paren_string[i]\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            # start popping all chars until we reach an open bracket\n            if stack:\n                tmp = stack.pop()\n                while tmp!= '(':\n                    tmp2 = stack.pop()\n                    tmp += tmp2\n                stack.append(tmp[1:-1])\n            else:\n                stack.append('')\n            # we've reached an open bracket, if the stack is empty then this is the last paren\n            if not stack:\n                return [paren_string[0:i + 1]]\n    return []\n",
        "num_ids": 187
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    group_stack = []\n    paren_list = list(paren_string)\n    result_list = []\n    i = 0\n    while i < len(paren_list):\n        if paren_list[i] == \"(\":\n            group_stack.append(\"(\")\n        elif paren_list[i] == \")\":\n            if group_stack:\n                group_stack.pop()\n            else:\n                paren_list.pop(i)\n                i -= 1\n        i += 1\n    while group_stack:\n        paren_list.pop(0)\n        group_stack.pop(0)\n    i = 0\n    while i < len(paren_list):\n        if paren_list[i] == \"(\":\n            result_list.append(\"(\")\n        else:\n            result_list.append(\")\")\n        i += 1\n    return result_list\n",
        "num_ids": 211
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    paren_string = paren_string.replace('(', '{(')\n    paren_string = paren_string.replace(')', '})')\n    # We are essentially splitting a string into (nested) pairs\n    # There are no spaces, so split on the \"|\" characters\n    paren_groups = paren_string.split('|')\n",
        "num_ids": 84
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    ans = []\n    open_b = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_b.append(i)\n        elif paren_string[i] == ')':\n            ans.append(paren_string[open_b[-1]+1:i])\n            open_b.pop()\n        i += 1\n    if open_b:\n        ans.append(paren_string[open_b[-1]+1:])\n    return ans\n",
        "num_ids": 132
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_stack = []\n    result = []\n    curr_str = ''\n",
        "num_ids": 21
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result_list = []\n    start_index = 0\n    open_braces = []\n    while start_index < len(paren_string):\n        if paren_string[start_index] == '(':\n            open_braces.append(start_index)\n        elif paren_string[start_index] == ')':\n            if len(open_braces) == 0:\n                raise ValueError('Unbalanced parentheses')\n            if paren_string[open_braces[-1]] == '(':\n                open_braces.pop()\n            else:\n                result_list.append(paren_string[start_index+1:open_braces[-1]])\n                start_index = open_braces[-1] + 1\n        start_index += 1\n    if len(open_braces)!= 0:\n        raise ValueError('Unbalanced parentheses')\n    return [paren_string[:start_index]] + result_list\n",
        "num_ids": 226
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    result = []\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            stack.append(i)\n        elif paren == ')':\n            start = stack.pop()\n            result.append(paren_string[start + 1: i])\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number < 0:\n        raise ValueError(\"The number must be positive.\")\n    integer, decimals = math.modf(number)\n    # The value of decimals is the largest integer smaller than number\n    return decimals\n",
        "num_ids": 57
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    whole_part, decimals = math.modf(number)\n    return decimals\n",
        "num_ids": 25
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num = int(number)\n    return number - num\n",
        "num_ids": 15
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Check for negative number\n    if number < 0:\n        raise ValueError(\"Number must be positive\")\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # The integer part is the largest integer smaller than the number:\n    integer_part = int(number)\n    # The decimal part is the left-over part:\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "num_ids": 57
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance -= op\n        else:\n            balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = 0\n    for op in operations:\n        if op < 0:\n            return True\n        s += op\n    return s < 0\n",
        "num_ids": 35
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(operations) - 1):\n        if operations[i] < 0 and operations[i + 1] > 0:\n            return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not operations:\n        return False\n    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Need at least two numbers\")\n    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    mean = sum(numbers) / float(len(numbers))\n    total = 0\n    for number in numbers:\n        total += abs(number - mean)\n    return total / float(len(numbers))\n",
        "num_ids": 52
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Calculate the mean absolute deviation of the input numbers.\n    return sum([abs(number - mean(numbers)) for number in numbers]) / float(len(numbers))\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers = sorted(numbers)\n    n = len(numbers)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    # Find the mean\n    # Only work with the positive and negative numbers\n    total = 0\n    for i in range(0, n):\n        if numbers[i] >= 0:\n            total += numbers[i]\n    mean = total / n\n",
        "num_ids": 100
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    sum_deviation = sum(abs(x - mean) for x in numbers)\n    return sum_deviation / len(numbers)\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 1\n    m = sum(numbers) / len(numbers)\n    return sum([abs(x - m) for x in numbers]) / len(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (\n        sum([abs(x - _mean(numbers)) for x in numbers])\n        / len(numbers)\n    )\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if numbers:\n        mean = sum(numbers) / len(numbers)\n        deviations = map(lambda x: abs(x - mean), numbers)\n        return sum(deviations) / len(numbers)\n    else:\n        return 0.0\n",
        "num_ids": 63
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / float(len(numbers))\n    return sum([abs(x - mean) for x in numbers]) / float(len(numbers))\n",
        "num_ids": 42
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / float(len(numbers))\n    total = 0.0\n    for x in numbers:\n        total += abs(x - mean)\n    return total / len(numbers)\n",
        "num_ids": 52
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        return numbers[0:1] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 48
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter]*(len(numbers)-1) + [numbers[-1]]\n",
        "num_ids": 42
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 0\n    n = len(numbers)\n    new_numbers = []\n    while i < n:\n        new_numbers.append(numbers[i])\n        i += 1\n        new_numbers.append(delimeter)\n    return new_numbers\n",
        "num_ids": 68
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n        else:\n            result.append(delimeter)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(numbers)\n    return [delimeter] * ((length + 1) // 2) + numbers + [delimeter] * ((length + 1) // 2)\n",
        "num_ids": 42
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [delimeter] + [a for i in range(len(numbers)-1) for a in [numbers[i], delimeter] ] + [numbers[-1]]\n",
        "num_ids": 44
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [delimeter] + numbers[0::2] + [delimeter]\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # return [number for number in numbers[0:-1:2]] + [numbers[-1]]\n    return [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter, ]\n",
        "num_ids": 55
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[0])\n        elif i == len(numbers) - 1:\n            result.append(numbers[-1])\n        else:\n            result.append(delimeter)\n            result.append(numbers[i])\n    return result\n",
        "num_ids": 101
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    nested_levels = []\n    level = 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Method 1: A naive method that is too slow.\n    #\n    # paren_stack = []\n    # max_depth = 0\n    # for index, char in enumerate(paren_string):\n    #     if char == \"(\":\n    #         paren_stack.append(\"\")\n    #         max_depth += 1\n    #     elif char == \")\":\n    #         if len(paren_stack) == 0:\n    #             return [-1]\n    #         elif paren_stack[-1] == \"\":\n    #             return [-1]\n    #         else:\n    #             depth = len(paren_stack) - 1\n    #             depth_stack = []\n    #             while depth >= 0:\n    #                 if paren_stack[depth] == \"\":\n    #                     depth_stack.append(depth)\n    #                 depth -= 1\n    #             if len(depth_stack) == 0:\n    #                 return [-1]\n    #             else:\n    #                 max_depth = max(max_depth, depth_stack[-1])\n    #             paren_stack.pop()\n    # return [max_depth + 1]\n",
        "num_ids": 279
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not paren_string:\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # To deal with multiple levels of nesting, we'll keep track of the\n    # number of opening parenthesis that we've seen so far.\n    # There is no way to uniquely determine the number of closing parenthesis.\n    # By keeping track of the number of opening brackets, we know when to close\n    # the previous level of parentheses.\n    stack = []\n    stack.append(0)\n",
        "num_ids": 90
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    paren_stack = []\n    i = 0\n    curr_nest_depth = 0\n    nest_levels = []\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            curr_nest_depth += 1\n            nest_levels.append(curr_nest_depth)\n            paren_stack.append(i)\n        elif paren_string[i] == ')':\n            curr_nest_depth -= 1\n            curr_start = paren_stack.pop()\n            nest_levels.append(curr_nest_depth)\n            nest_levels.append(nest_levels[-1] - 1)\n            i = curr_start + 1\n        i += 1\n    return nest_levels\n",
        "num_ids": 192
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    index_stack: List[int] = []\n    nest_level: int = 0\n    for i, c in enumerate(paren_string):\n        if c == \"(\":\n            nest_level += 1\n            index_stack.append(i)\n        elif c == \")\":\n            if len(index_stack) > 0:\n                index_stack.pop()\n                nest_level -= 1\n            else:\n                return []\n    return [] if len(index_stack) > 0 else [nest_level]\n",
        "num_ids": 127
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nested_parens = 0\n    max_depth = 0\n    nested_parens = 0\n    max_depth = 0\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            nested_parens += 1\n            level += 1\n            if level > max_depth:\n                max_depth = level\n        elif char == ')':\n            nested_parens -= 1\n            level -= 1\n",
        "num_ids": 108
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        else:\n            assert char == ')'\n            if len(stack) == 0:\n                return []\n            stack.pop()\n",
        "num_ids": 62
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nesting_level = 0\n    nesting_levels = []\n    for i in range(0, len(paren_string)):\n        char = paren_string[i]\n        if char == \"(\":\n            nesting_level += 1\n            nesting_levels.append(nesting_level)\n        elif char == \")\":\n            nesting_level -= 1\n            nesting_levels.append(nesting_level)\n    return nesting_levels\n",
        "num_ids": 110
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    depth = 0\n    max_depth = 0\n    for s in paren_string:\n        if s == '(':\n            stack.append(s)\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif s == ')':\n            if not stack:\n                return []\n            stack.pop()\n            depth -= 1\n",
        "num_ids": 94
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if substring == '':\n        return strings\n",
        "num_ids": 13
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n",
        "num_ids": 44
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if numbers:\n        sum_product = sum(numbers)\n        product_sum = 1\n        for i in numbers:\n            product_sum *= i\n        return sum_product, product_sum\n    else:\n        return 0, 1\n",
        "num_ids": 59
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    product = 1\n    sum = 0\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum = 0\n        product = 1\n        for i in range(len(numbers)):\n            sum += numbers[i]\n            product *= numbers[i]\n        return (sum, product)\n",
        "num_ids": 78
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return total, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (numbers[0] + sum_product(numbers[1:])[0], numbers[0] * sum_product(numbers[1:])[1])\n",
        "num_ids": 60
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum_number = sum(numbers)\n    product_number = 1\n    for number in numbers:\n        product_number *= number\n    return sum_number, product_number\n",
        "num_ids": 44
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sequence = []\n    # TODO: Add try-except for the first value.\n    sequence.append(numbers[0])\n    for i in range(1, len(numbers)):\n        sequence.append(max(sequence[-1], numbers[i]))\n    return sequence\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    m = max(numbers)\n    result = [m] * len(numbers)\n    for i, num in enumerate(numbers):\n        for j in range(i - num + 1, i + 1):\n            if j >= 0:\n                if result[j] < num:\n                    result[j] = num\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    output = []\n    for i, num in enumerate(numbers):\n        output.append(max(numbers[i:]))\n    return output\n",
        "num_ids": 37
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    rolling_max_list = []\n    for index in range(len(numbers)):\n        max_number = numbers[index]\n        for j in range(index, len(numbers)):\n            if numbers[j] > max_number:\n                max_number = numbers[j]\n            rolling_max_list.append(max_number)\n    return rolling_max_list\n",
        "num_ids": 92
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO: Add tests\n    if not numbers:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        max_number = max(numbers[i:])\n        result.append(max_number)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return []\n    return [max(numbers[:k+1]) for k in range(len(numbers))]\n",
        "num_ids": 36
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_elements = []\n    for index in range(len(numbers)):\n        max_elements.append(max(numbers[index: index + 10]))\n    return max_elements\n",
        "num_ids": 50
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    output = []\n    for i, number in enumerate(numbers):\n        output.append(max(number, output[i-1])) if i > 0 else output.append(number)\n    return output\n",
        "num_ids": 51
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Initialize the result\n    result = [None] * (len(numbers) + 1)\n    result[-1] = numbers[-1]\n    # Loop over all numbers\n    for i in range(len(numbers) - 2, -1, -1):\n        result[i] = max(numbers[i], result[i+1])\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    string = string + '#' + string[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:]\n",
        "num_ids": 50
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1]\n    return ''\n",
        "num_ids": 79
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    suffix = ''\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            suffix = string[i + 1:] + suffix\n            break\n",
        "num_ids": 60
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if string == '':\n        return ''\n    string = string.lower()\n    left, right = 0, len(string) - 1\n    while left < right:\n        while string[left]!= string[right]:\n            if left < right:\n                right -= 1\n            else:\n                return string\n        left += 1\n        right -= 1\n    return string[:right] + string[left-1:left-1:-1] + string[left-1:]\n",
        "num_ids": 112
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    shortest_prefix = \"\"\n    shortest_prefix_len = -1\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            if shortest_prefix_len == -1 or len(prefix) < shortest_prefix_len:\n                shortest_prefix_len = len(prefix)\n                shortest_prefix = prefix\n",
        "num_ids": 100
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string = string.replace(' ', '')\n    if string == '':\n        return ''\n    elif is_palindrome(string):\n        return string\n    else:\n        length = len(string)\n        for i in range(length):\n            if is_palindrome(string[i:]):\n                return string[:i] + string[:i][::-1] + string[i:]\n        return string[:1][::-1] + make_palindrome(string[1:])\n",
        "num_ids": 121
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not string:\n        return string\n    for i in range(len(string) + 1):\n        suffix = string[len(string) - i:]\n        if is_palindrome(suffix):\n            return string + suffix[::-1]\n    return string\n",
        "num_ids": 66
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string = string.lower()\n    i = len(string) - 1\n    while i > 0:\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:] + string[:i][::-1]\n        i -= 1\n    return string",
        "num_ids": 72
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Find the longest suffix that is a palindrome\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            suffix = string[i:]\n            if is_palindrome(suffix):\n                return prefix + suffix[::-1]\n    return string\n",
        "num_ids": 86
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if is_palindrome(string):\n        return string\n",
        "num_ids": 16
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    xored = []\n    for i in range(1, max(len(a), len(b))):\n        if a[-i] == b[-i]:\n            xored.append('0')\n        else:\n            xored.append('1')\n    return ''.join(xored)[::-1]\n",
        "num_ids": 77
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a_s, b_s = list(a), list(b)\n    for i in range(len(a_s)):\n        if a_s[i]!= b_s[i]:\n            a_s[i] = '1' if a_s[i] == '0' else '0'\n            b_s[i] = '1' if b_s[i] == '0' else '0'\n    return \"\".join(a_s)\n",
        "num_ids": 115
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert a and b, 'No empty string'\n    a = int(a, 2)\n    b = int(b, 2)\n    return str(bin(a ^ b))[2:]\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert len(a) == len(b)\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = ''\n    for a_char, b_char in zip(a, b):\n        result += str(int(a_char) ^ int(b_char))\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(len(a)):\n        res.append(int(a[i]) ^ int(b[i]))\n    return ''.join(map(str, res))\n",
        "num_ids": 51
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(['0' if a[i] == b[i] else '1' for i in range(len(a))])\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(a) < len(b):\n        shorter = a\n        longer = b\n    else:\n        shorter = b\n        longer = a\n    return ''.join(str((int(shorter[i]) + int(longer[i])) % 2) for i in range(len(shorter)))\n",
        "num_ids": 79
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a, b = a.encode(), b.encode()\n    return ''.join(chr(a[i] ^ b[i]) for i in range(min(len(a), len(b))))\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_length = 0\n    for s in strings:\n        length = len(s)\n        if length > max_length:\n            max_length = length\n            longest_string = s\n    return longest_string if len(longest_string) > 0 else None\n",
        "num_ids": 65
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None:\n            longest_string = string\n        elif len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 63
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if strings == []:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 27
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if strings:\n        return max(strings, key=len)\n    return None\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        longest = strings[0]\n        for s in strings:\n            if len(s) > len(longest):\n                longest = s\n        return longest\n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    result = strings[0]\n    for string in strings:\n        if len(string) > max_len:\n            result = string\n            max_len = len(string)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    while (b!= 0):\n        a, b = b, a % b\n    return a\n",
        "num_ids": 25
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 51
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 51
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 47
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    all_prefixes = []\n    for i in range(1, len(string)):\n        all_prefixes.append(string[:i])\n    return all_prefixes\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    prefixes = [string]\n    for i in range(1, len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    all_prefixes_list = []\n    for i in range(len(string)):\n        all_prefixes_list.append(string[:i + 1])\n    return all_prefixes_list\n",
        "num_ids": 50
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \" \".join([str(i) for i in range(n)])\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(n + 1):\n        result.append(str(i))\n    return''.join(result)\n",
        "num_ids": 35
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    seq = [str(x) for x in range(n+1)]\n    return \" \".join(seq)\n",
        "num_ids": 28
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = ''\n    for i in range(0, n+1):\n        s += str(i) +''\n    return s[:-1]\n",
        "num_ids": 37
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(str(x) for x in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(map(str, range(n)))\n",
        "num_ids": 15
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set([i.lower() for i in string]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n",
        "num_ids": 43
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    string = string.lower()\n    seen = set()\n    for c in string:\n        if c not in seen:\n            seen.add(c)\n    return len(seen)\n",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string = string.lower()\n    count = 1\n    for letter in string:\n        if letter == string[0]:\n            pass\n        elif letter == string[1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    counter = set()\n    for char in string:\n        counter.add(char.lower())\n    return len(counter)\n",
        "num_ids": 31
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    characters_dict = {}\n    for char in string:\n        if char in characters_dict:\n            characters_dict[char] += 1\n        else:\n            characters_dict[char] = 1\n",
        "num_ids": 51
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not music_string:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    output = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            output.append(4)\n        elif music_string[i] == 'o|':\n            output.append(2)\n        elif music_string[i] == '.|':\n            output.append(1)\n        else:\n            output.append(0)\n    return output\n",
        "num_ids": 104
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    last_note = 'o o'\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.':\n            result.append(1)\n        elif note == '|':\n            result.append(4)\n            last_note = 'o o'\n        else:\n            raise ValueError('Unknown note: {}'.format(note))\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    beats = 0\n    current = []\n    for char in music_string:\n        if char == \"o\":\n            beats += 1\n        elif char == \"o|\":\n            beats += 0.5\n        elif char == \".|\":\n            beats += 0.25\n        elif char == \"|\":\n            if current:\n                result.append(beats)\n                current = []\n                beats = 0\n            else:\n                beats += 1\n        else:\n            current.append(char)\n    if current:\n        result.append(beats)\n    return result\n",
        "num_ids": 149
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [len(c) for c in music_string.split(' ')]\n",
        "num_ids": 20
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    last = []\n    for note in music_string:\n        if note == 'o':\n            last.append(4)\n        elif note == 'o|':\n            last.append(2)\n        elif note == '.':\n            last.append(1)\n    return last\n",
        "num_ids": 70
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(map(lambda x: len(x) if x == 'o o' or x == 'o|o' or x == '.|o' or x == '.|' else 0, music_string.split(' ')))\n",
        "num_ids": 54
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count_of_beats = []\n    current_note = None\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            count_of_beats.append(1)\n            current_note = note\n        elif note == 'o|':\n            if current_note == 'o':\n                count_of_beats.append(1)\n            else:\n                count_of_beats.append(2)\n            current_note = note\n        elif note == '.|':\n            if current_note == 'o':\n                count_of_beats.append(1)\n            else:\n                count_of_beats.append(2)\n            current_note = note\n        elif note == '|':\n            count_of_beats.append(4)\n            current_note = note\n    return count_of_beats\n",
        "num_ids": 211
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    previous = 0\n    for i in music_string:\n        if i == \"o\":\n            previous += 1\n        elif i == \"o|\":\n            previous += 0.5\n        elif i == \".\":\n            previous += 0.25\n        else:\n            assert False\n",
        "num_ids": 78
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    parsed_music = []\n    for note in music_string.split(' '):\n        if note == 'o':\n            parsed_music.append(4)\n        elif note == 'o|':\n            parsed_music.append(2)\n        elif note == 'o.|':\n            parsed_music.append(1)\n        elif note == '.|':\n            parsed_music.append(0.5)\n        elif note == '|':\n            parsed_music.append(0.25)\n        else:\n            print('Error, note {} is not recognizable'.format(note))\n    return parsed_music\n",
        "num_ids": 160
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 0\n    while True:\n        i = string.find(substring, i)\n        if i == -1:\n            break\n        i += 1\n    return i\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(re.findall(r\"{}\".format(re.escape(substring)), string))\n",
        "num_ids": 27
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(re.findall(substring, string))\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(re.findall(substring, string))\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string.split(substring)) - 1\n",
        "num_ids": 15
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(re.findall(substring, string))\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            counter += 1\n    return counter\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(re.findall(substring, string))\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring])\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = sorted(numbers.split(' '))\n    return''.join(result)\n",
        "num_ids": 22
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    return''.join(sorted([n for n in numbers.split() if n in nums], key = lambda x: nums[x]))\n",
        "num_ids": 89
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers_list = list(numbers.split())\n    numbers_list.sort()\n    return''.join(numbers_list)\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers = [int(x) for x in numbers.split()]\n    numbers.sort()\n    return''.join([str(x) for x in numbers])\n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Convert the string to a list and sort it\n    return \" \".join(sorted([x for x in numbers.split()]))\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 28
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Convert the string to a list of numbers\n    # in [0,9]\n    return''.join(sorted([int(num) for num in numbers.split()]))\n",
        "num_ids": 43
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))\n",
        "num_ids": 25
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    arr = []\n    for numeral in numbers.split():\n        if numeral == 'zero':\n            arr.append(0)\n        elif numeral == 'one':\n            arr.append(1)\n        elif numeral == 'two':\n            arr.append(2)\n        elif numeral == 'three':\n            arr.append(3)\n        elif numeral == 'four':\n            arr.append(4)\n        elif numeral == 'five':\n            arr.append(5)\n        elif numeral =='six':\n            arr.append(6)\n        elif numeral =='seven':\n            arr.append(7)\n        elif numeral == 'eight':\n            arr.append(8)\n        elif numeral == 'nine':\n            arr.append(9)\n        else:\n            pass\n    arr.sort()\n    for i in arr:\n        numbers = numbers.replace(str(i), \"\")\n    return numbers\n",
        "num_ids": 234
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    closest_pair = None\n    first, second = None, None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if not closest_pair:\n                first, second = numbers[i], numbers[j]\n                closest_pair = (first, second)\n            else:\n                first, second = min(first, numbers[i]), min(second, numbers[j])\n                closest_pair = (first, second)\n    return closest_pair\n",
        "num_ids": 131
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Not enough numbers')\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[0], sorted_numbers[-1]\n",
        "num_ids": 57
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(numbers) > 1\n    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    if smallest == largest:\n        return smallest, largest\n    return smallest, largest\n",
        "num_ids": 55
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    closest_numbers = sorted(numbers)\n    closest_number_pairs = zip(closest_numbers[:-1], closest_numbers[1:])\n    smallest_difference = abs(closest_numbers[0] - closest_numbers[-1])\n    closest_number_pairs_sorted_by_difference = sorted(closest_number_pairs, key=lambda x: abs(x[0] - x[1]))\n    for (first, second) in closest_number_pairs_sorted_by_difference:\n        current_difference = abs(first - second)\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            closest_numbers[0], closest_numbers[-1] = first, second\n    return closest_numbers[0], closest_numbers[-1]\n",
        "num_ids": 224
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 2, 'Expect list with at least two elements'\n    assert numbers[0] < numbers[-1], 'Expect list in descending order'\n",
        "num_ids": 43
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) == 2:\n        return sorted(numbers)\n    else:\n        sorted_numbers = sorted(numbers)\n        closest_pair = None\n        for i in range(1, len(numbers)):\n            current_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n            if closest_pair is None or current_pair[0] - current_pair[1] < closest_pair[0] - closest_pair[1]:\n                closest_pair = current_pair\n        return closest_pair\n",
        "num_ids": 138
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    smallest_diff = float('inf')\n    smallest_pair = (None, None)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "num_ids": 110
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(numbers) == 2:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    closest_pair = min(numbers, key=lambda n: abs(n - numbers[-1]))\n    numbers.remove(closest_pair)\n    second_closest_pair = min(numbers, key=lambda n: abs(n - numbers[-1]))\n    return closest_pair, second_closest_pair\n",
        "num_ids": 86
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_numbers = sorted(numbers)\n    lowest_number = sorted_numbers[0]\n    highest_number = sorted_numbers[-1]\n    lowest_index = numbers.index(lowest_number)\n    highest_index = numbers.index(highest_number)\n    delta = (highest_number - lowest_number) / (highest_index - lowest_index)\n    return [((number - lowest_number) / delta) for number in numbers]\n",
        "num_ids": 115
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(numbers) > 1\n    total = sum(numbers)\n    rescaled_numbers = []\n    for n in numbers:\n        rescaled_numbers.append(float(n) / total)\n    return rescaled_numbers\n",
        "num_ids": 63
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    min_n = min(numbers)\n    max_n = max(numbers)\n    unit_length = 1.0 / (max_n - min_n)\n    return [unit_length * (n - min_n) for n in numbers]\n",
        "num_ids": 77
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    smallest = min(numbers)\n    largest = max(numbers)\n    new_numbers = []\n    for num in numbers:\n        new_numbers.append( (num - smallest) / (largest - smallest) )\n    return new_numbers\n",
        "num_ids": 65
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    low, high = min(numbers), max(numbers)\n    return [low + (high - low) * (number - low) / (high - low) for number in numbers]\n",
        "num_ids": 45
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n",
        "num_ids": 23
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1.0 / (max_num - min_num)\n    return [scale * (num - min_num) for num in numbers]\n",
        "num_ids": 58
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO: Improve this algorithm\n    if len(numbers) < 2:\n        raise ValueError(\"numbers must have length >= 2\")\n    if len(numbers) == 2:\n        return [0.0, 0.5 * (numbers[0] + numbers[1])]\n    if len(numbers) == 3:\n        return [0.0, 0.75 * numbers[1] + 0.25 * numbers[0] + 0.25 * numbers[2]]\n    if len(numbers) == 4:\n        return [0.0, 0.5 * numbers[1] + 0.25 * numbers[0] + 0.125 * numbers[2] + 0.0625 * numbers[3]]\n    if len(numbers) == 5:\n        return [0.0, 0.125 * numbers[1] + 0.0625 * numbers[0] + 0.0625 * numbers[2] + 0.125 * numbers[3] + 0.25 * numbers[4]]\n    if len(numbers) == 6:\n        return [0.0, 0.125 * numbers[1] + 0.0625 * numbers[0] + 0.0625 * numbers[2] + 0.125 * numbers[3] + 0.25 * numbers[4] + 0.0625 * numbers[5]]\n",
        "num_ids": 310
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(numbers) >= 2\n    numbers = sorted(numbers)\n    max_num = max(numbers)\n    min_num = min(numbers)\n    # we want to map the list of numbers onto [0, 1]\n    # the equation is:\n    # map_num = (num - min_num) / (max_num - min_num)\n    # this means we want the min_num to be mapped to 0, and the max_num to be mapped to 1\n    map_nums = []\n    for num in numbers:\n        # equation is: map_num = (num - min_num) / (max_num - min_num)\n        map_nums.append(int(round((num - min_num) / (max_num - min_num))))\n",
        "num_ids": 189
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Make sure there is at least one number in the list\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two numbers\")\n    # Make sure all numbers are numbers\n    for num in numbers:\n        assert (isinstance(num, float) or isinstance(num, int))\n",
        "num_ids": 76
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(filter(lambda v: isinstance(v, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if string is None:\n        return 0\n    return len(string)\n",
        "num_ids": 19
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    largest_divisor = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest_divisor = i\n    return largest_divisor\n",
        "num_ids": 47
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return reduce(lambda x, y: x if n % y == 0 and x <= y else y, range(2, int(n**0.5 + 1)))\n",
        "num_ids": 39
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 29
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert isinstance(n, int) and n >= 0, 'n must be a non-negative integer'\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 53
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            if i > largest:\n                largest = i\n    return largest\n",
        "num_ids": 42
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n - 1 if n % 2 == 0 else n\n",
        "num_ids": 15
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def get_divisors(n: int) -> list[int]:\n        divisors = []\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n",
        "num_ids": 66
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_i = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            max_i = i\n    return max_i\n",
        "num_ids": 43
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    largest = 1\n    while n % largest!= 0:\n        largest += 1\n    return largest\n",
        "num_ids": 25
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n - 1 if n % 2 else n // 2\n",
        "num_ids": 15
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2] + factorize(n // 2)\n    elif n % 3 == 0:\n        return [3] + factorize(n // 3)\n    elif n % 5 == 0:\n        return [5] + factorize(n // 5)\n    elif n % 7 == 0:\n        return [7] + factorize(n // 7)\n    else:\n        return [n]\n",
        "num_ids": 132
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    prime_numbers = []\n    \n    # we start from 2 to n\n    for i in range(2, n+1):\n        prime_numbers.append(i)\n    \n    while n > 1:\n        for i in range(len(prime_numbers)):\n            p = prime_numbers[i]\n            if n % p == 0:\n                prime_numbers.pop(i)\n                n = n / p\n                break\n    return prime_numbers\n",
        "num_ids": 116
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if n in primes:\n        return [n]\n    if n < 4:\n        return []\n    divisors = [1, n]\n    for p in primes:\n        if p * p > n:\n            break\n        while n % p == 0:\n            divisors.append(p)\n            n /= p\n    if n > 1:\n        divisors.append(n)\n    return divisors\n",
        "num_ids": 161
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return [2] * (n // 2)\n    facs = []\n    # multiple of 2\n    while n % 2 == 0:\n        n //= 2\n        facs.append(2)\n    # odd number greater than 2\n    i = 3\n    while i <= n:\n        # while i divides n, divide n by i and update i\n        while n % i == 0:\n            n //= i\n            facs.append(i)\n        i += 2\n    return facs\n",
        "num_ids": 127
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n",
        "num_ids": 27
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n **.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "num_ids": 96
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 2\n    factors = []\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in numbers if numbers.count(i) == 1]\n",
        "num_ids": 20
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    seen = []\n    for num in numbers:\n        if num in seen:\n            continue\n        else:\n            seen.append(num)\n    return seen\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        return []\n    # last_number = numbers[0]\n    # i = 1\n    # while i < len(numbers):\n    #     if numbers[i] == last_number:\n    #         numbers.pop(i)\n    #     else:\n    #         last_number = numbers[i]\n    #         i += 1\n    # return numbers\n    return sorted(list(set(numbers)))\n",
        "num_ids": 111
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) == 0:\n        return numbers\n    i = 0\n    while i < len(numbers)-1:\n        if numbers[i] == numbers[i+1]:\n            del numbers[i]\n        else:\n            i += 1\n    return numbers\n",
        "num_ids": 67
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers_set = set(numbers)\n    return list(numbers_set)\n",
        "num_ids": 23
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    output_list = []\n    for element in numbers:\n        if element not in output_list:\n            output_list.append(element)\n    return output_list\n",
        "num_ids": 41
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_string = \"\"\n    for i in string:\n        if i.islower():\n            new_string += i.upper()\n        else:\n            new_string += i.lower()\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i].isupper():\n            string_list[i] = string_list[i].lower()\n        elif string_list[i].islower():\n            string_list[i] = string_list[i].upper()\n    return ''.join(string_list)\n",
        "num_ids": 95
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(\n        map(\n            lambda x: x.lower() if x.isupper() else x.upper(),\n            string[::-1]\n        )\n    )\n",
        "num_ids": 46
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            result += string[i].lower()\n        elif string[i].islower():\n            result += string[i].upper()\n        else:\n            result += string[i]\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join([x.swapcase() if x.islower() else x for x in string])\n",
        "num_ids": 27
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    string_arr = []\n    for s in strings:\n        string_arr.append(s)\n",
        "num_ids": 25
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l2 = []\n    for n in l:\n        if n > 0:\n            l2.append(n)\n    return l2\n    \n",
        "num_ids": 37
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [l[i] for i in range(len(l)) if l[i] > 0]\n",
        "num_ids": 26
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: Implement me\n    # Make sure n is a positive integer.\n    if n < 1:\n        raise ValueError('n must be a positive integer')\n    # Base case: 1 is not prime\n    elif n == 1:\n        return False\n    # Base case: 2 is the only even prime number\n    elif n == 2:\n        return True\n    # Base case: n is even and not 2\n    elif n % 2 == 0:\n        return False\n    # Recursive case: n is odd\n    else:\n        return is_prime(n - 1)\n",
        "num_ids": 138
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 3:\n        return n > 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n%2 == 0:\n        return False\n    elif n < 9:\n        return True\n    elif n%3 == 0:\n        return False\n    elif n < 33:\n        return True\n    elif n%5 == 0:\n        return False\n    elif n%7 == 0:\n        return False\n    elif n%11 == 0:\n        return False\n    elif n%13 == 0:\n        return False\n    elif n%17 == 0:\n        return False\n    elif n%19 == 0:\n        return False\n    elif n%23 == 0:\n        return False\n    elif n%29 == 0:\n        return False\n    elif n%31 == 0:\n        return False\n    elif n%37 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 224
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return False\n    for i in range(3, int(n**(1/2))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    return True\n    \ndef gen_primes(n):\n    \"\"\"Return a list of all primes up to n.\n    >>> gen_primes(7)\n    [2, 3, 5, 7]\n    >>> gen_primes(4)\n    [2, 3, 5]\n    \"\"\"\n    primes = [2, 3]\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "num_ids": 163
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) % 2 == 1:\n        return None\n    else:\n        m = max(xs)\n        if m < 0:\n            return None\n        xs.remove(m)\n        while m > 0:\n            for i in range(len(xs)):\n                if (xs[i] / m) == int((xs[i] / m)):\n                    xs[i] = 0\n            m = max(xs)\n            if m < 0:\n                return None\n            xs.remove(m)\n        return -sum(xs) / len(xs)\n",
        "num_ids": 137
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if xs[-1] == 0:\n        raise ValueError(\"No zero point found. Coefficient of x = 0.\")\n    for i in range(1, len(xs)):\n        if xs[-i] * xs[-i - 1] < 0:\n            return -xs[-i - 1] / xs[-i]\n    raise ValueError(\"No zero point found.\")\n",
        "num_ids": 95
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0, \"Coefficients must be even.\"\n    # x_i = (x1 + x2 +... + xn)/2\n    # a_i = x_i - poly(x_i, x1)\n    # a_i = x_i - poly(x_i, x2)\n    # a_i = x_i - poly(x_i, x3)\n    # a_i = x_i - poly(x_i, x4)\n    #...\n    # a_i = x_i - poly(x_i, xn)\n    # a_i = (x1 - poly(x1, x2))\n    # a_i = (x2 - poly(x2, x3))\n    # a_i = (x3 - poly(x3, x4))\n    #...\n    # a_i = (xn - poly(xn, x1))\n    # So, a_i / poly(x_i, x1) = x1 - poly(x1, x2)\n    # a_i / poly(x_i, x2) = x2 - poly(x2, x3)\n    # a_i / poly(x_i, x3) = x3 - poly(x3, x4)\n    #...\n    # a_i / poly(x_i, xn) = xn - poly(xn, x1)\n    # a_i / poly(x_i, x1) = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # But, poly(x_i, x1) = x1, poly(x_i, x2) = x2,... = poly(x_i, xn) = xn\n    # Hence,\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly(x2, x3) = x3 - poly(x3, x4) =... = 0\n    # a_i = x1 - poly(x1, x2) = x2 - poly",
        "num_ids": 1023
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(xs)\n    if n % 2!= 0 or xs[n // 2] == 0:\n        return None\n    else:\n        return (xs[n // 2] - poly(xs[: n // 2 + 1], -1)) / (xs[n // 2] + poly(xs[: n // 2 + 1], -1))\n",
        "num_ids": 85
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # return x[0] if len(x) == 1 else find_zero(x[1:])\n    \n    # return -(x[0] / poly(x[1:], -x[0])) if len(x) > 1 else x[0]\n    \n    # return ((x[0] + x[1]) / poly(x[2:], x[0])) if len(x) > 2 else x[0]\n    \n    # print(\"len(x):\", len(x))\n    \n    coeff_sum = sum([c for c in xs if c!= 0])\n    \n    # Find root of the polynomial\n    return -coeff_sum / poly(xs, -coeff_sum)\n    \n    # Find zero points of the polynomial\n    # for i in range(0, len(xs)):\n    #     if xs[i]!= 0:\n    #         j = i + 1\n    #         while poly(xs[:j], xs[i]) == 0 and j < len(xs):\n    #             j += 1\n    #         if j == len(xs):\n    #             return xs[i]\n    #     else:\n    #         continue\n    \n    # return xs[i]\n",
        "num_ids": 304
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(xs) % 2 == 0:\n        return\n",
        "num_ids": 16
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # assert len(xs) % 2 == 0\n    # find first non-zero element\n    for i in range(len(xs) // 2):\n        if xs[i]!= 0:\n            break\n    # round to 2 decimals\n    for i in range(len(xs) // 2 + 1):\n        if xs[i]!= 0:\n            xs[i] = round(xs[i], 2)\n    # find zero point\n    for i in range(len(xs) // 2):\n        if poly(xs, i) == 0:\n            return i\n",
        "num_ids": 139
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # let's guarantee the polynomial has even number of coefficients\n    n = len(xs)\n    if n % 2!= 0:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # reverse the list for easier handling\n    xs = xs[::-1]\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        if i % 2 == 1:\n            if coeff < 0:\n                return -poly(xs, -1) / coeff\n            else:\n                return poly(xs, 1) / coeff\n    # if reached here, no zero point found\n    return None\n",
        "num_ids": 107
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # find the first and last non zero coefficient\n    first = 0\n    last = len(xs) - 1\n    while xs[first] == 0:\n        first += 1\n    while xs[last] == 0:\n        last -= 1\n    if first > last:\n        return None\n    # make sure that first and last is even\n    if last - first % 2 == 0:\n        first += 1\n        last -= 1\n    # now we are sure that the first and last is odd\n    # and find the x such that poly(x) = 0\n    x = (first + last) // 2\n    return x\n",
        "num_ids": 146
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l1=[]\n    l2=[]\n    l3=[]\n    for i in l:\n        if i%3==0:\n            l3.append(i)\n        elif i%3==1:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l4=[]\n    for i in l1+l2+l3:\n        l4.append(i)\n    return l4\n    ",
        "num_ids": 132
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n    ",
        "num_ids": 60
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    newList = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            newList.append(l[i])\n    return newList\n",
        "num_ids": 44
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l2 = []\n    for i in l:\n        if i % 3 == 0:\n            l2.append(i)\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2",
        "num_ids": 58
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_list.append(l[i])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n    return new_list\n",
        "num_ids": 81
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [val for i, val in enumerate(l) if i % 3!= 0] + [val for i, val in enumerate(l) if i % 3 == 0]\n    \n",
        "num_ids": 46
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    copy = []\n    for i in l:\n        if i % 3 == 0:\n            copy.append(i)\n        else:\n            copy.append(l[l.index(i)])\n    return copy\n",
        "num_ids": 53
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if l == []:\n        return l\n    else:\n        if len(l) == 1:\n            return l\n        else:\n            if l[0]%3 == 0:\n                return l[:1] + sort_third(l[1:])\n            elif l[-1]%3 == 0:\n                return sort_third(l[:-1]) + [l[-1]]\n            else:\n                return sort_third(l[1:]) + [l[0]]\n",
        "num_ids": 119
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = []\n    for i in l:\n        if i % 3!= 0:\n            lst.append(i)\n        else:\n            lst.append(i)\n            lst.sort()\n    return lst\n",
        "num_ids": 58
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n        else:\n            new_list.append(l[i])\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # return list(set(l))\n    # return list(set(l))[::-1]\n    return list(OrderedDict.fromkeys(l))[::-1]\n",
        "num_ids": 46
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # TODO\n",
        "num_ids": 6
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    r = []\n    if len(l) == 1:\n        return l\n    else:\n        for i in l:\n            if i not in r:\n                r.append(i)\n        return r\n",
        "num_ids": 57
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    unique = set(l)\n    return sorted(list(unique))\n",
        "num_ids": 18
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 45
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        raise ValueError('Empty list')\n    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n",
        "num_ids": 51
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Index of largest element\n    max_index = 0\n    # Index of second largest element\n    second_max_index = 0\n    # Traverse the list\n    for i in range(len(l)):\n        # Compare the current element with the\n        # largest element\n        if l[i] > l[max_index]:\n            # If it is greater than current second\n            # largest element, update second largest\n            # element.\n            if l[max_index] > l[second_max_index]:\n                second_max_index = max_index\n            else:\n                second_max_index = i\n            # Update the largest element index\n            max_index = i\n    # print the maximum element and second maximum\n    # element\n    print('The largest element is', l[max_index])\n    print('The second largest element is', l[second_max_index])\n",
        "num_ids": 207
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert type(l) == list and len(l) > 0, 'Invalid input list'\n    max_element = l[0]\n    for e in l:\n        if e > max_element:\n            max_element = e\n    return max_element\n",
        "num_ids": 62
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = []\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            numbers.append(i)\n    return numbers.count(7)\n",
        "num_ids": 53
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0)\n    if n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n - 1)\n    else:\n        return 0\n",
        "num_ids": 66
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert type(n) == int and n >= 0, 'n must be a non-negative integer.'\n    return sum(map(lambda x: x % 10 == 7, range(1, n)))\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i%11 == 0) or (i%13 == 0):\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return str(n).count('7')\n",
        "num_ids": 12
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for x in range(1,n):\n        if x%11 == 0 or x%13 == 0:\n            count += 1\n    return count",
        "num_ids": 49
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = int(n)\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(7 in str(i) for i in range(1, n))\n",
        "num_ids": 21
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_list = []\n    for item in l:\n        if l.index(item)%2 == 1:\n            odd_list.append(item)\n    l = l[:len(l)//2] + sorted(odd_list) + l[len(l)//2:]\n    return l\n",
        "num_ids": 74
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l2 = []\n    for i in range(0, len(l)):\n        if i % 2 == 1:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "num_ids": 68
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l_length = len(l)\n    for i in range(0, l_length):\n        if i%2 == 0:\n            l[i] = l[i]\n    for i in range(0, l_length):\n        if i%2 == 1:\n            l[i] = l[i]\n    for i in range(0, l_length):\n        if i%2 == 1:\n            l[i] = l[i]\n    return l\n",
        "num_ids": 114
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your Code Here\n    odd = []\n    even = []\n    for i in range(len(l)):\n        if i%2==0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n",
        "num_ids": 62
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    length = len(l)\n    for i in range(0, length-1):\n        if i%2 == 0:\n            continue\n        else:\n            for j in range(i, length):\n                if l[j] > l[i]:\n                    temp = l[i]\n                    l[i] = l[j]\n                    l[j] = temp\n    return l\n",
        "num_ids": 92
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = l[1::2]\n    l2.sort()\n    l[1::2] = l2\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l_copy = l.copy()\n    for index in range(len(l_copy)):\n        if index % 2 == 0:\n            l_copy[index] = l_copy[index]\n    l_copy.sort()\n    return l_copy\n",
        "num_ids": 63
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return l[::2] + l[1::2] + [l[0]]\n",
        "num_ids": 22
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if i%2==0:\n            continue\n        else:\n            l[i]=l[i-1]\n    l[0],l[-1]=l[-1],l[0]\n    return l\n",
        "num_ids": 65
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[2] + (group[0] + group[1])[1:4] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 102
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # split string into groups of 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # transform groups to list of lists.\n    groups = [list(group) for group in groups]\n    # transform groups to strings.\n    groups = [str(group) for group in groups]\n    # cycle elements in each string.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 134
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s[::-1]\n    return encode_cyclic(s)\n",
        "num_ids": 21
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # get groups as input string is broken into 3's.\n    groups = [(s[(3 * i):min((3 * i + 3), len(s))]) for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    # return result string.\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[2] + (group[0] if len(group) == 3 else group[1]) + group[1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 118
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # get all elements in groups.\n    groups = [element[0] for element in groups]\n    return \"\".join(groups)\n",
        "num_ids": 86
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # convert each group to a list.\n    groups = [list(group) for group in s.split(\"\\n\")]\n    # convert each list to a string.\n    groups = [\"\".join(group) for group in groups]\n    # find a place in the string to insert a new character.\n    for i, group in enumerate(groups):\n        for j in range(len(group)):\n            if group[0] not in group[1:]:\n                break\n        else:\n            # no more characters in string.\n            groups[i] = groups[i][j:]\n            break\n    # find a place in the string to insert a new character.\n    for i, group in enumerate(groups):\n        for j in range(len(group)):\n            if group[0] not in group[1:]:\n                break\n        else:\n            # no more characters in string.\n            groups[i] = groups[i][j:]\n            break\n    # convert string back to a string.\n    return \"\\n\".join(groups)\n",
        "num_ids": 246
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # if group has more than 3 elements, decoded string is just last 3 characters of group.\n    groups = [(group[-3:] + group[:-3]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 114
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # calculate the number of iterations to complete the cycle.\n    cycles = len(groups) - 1\n    # this loop iterates through each group and inserts the first character back into the group.\n    for i in range(cycles):\n        groups[i] = groups[i] + groups[i + 1]\n    # join the characters into a string.\n    return \"\".join(groups)\n",
        "num_ids": 143
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[2:] + group[0:2] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 93
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def fib(a: int, b: int, c: int) -> int:\n        return a + b\n    \n    i = 2\n    a, b = 1, 1\n    while i < n:\n        a, b = fib(a, b, i)\n        i += 1\n    \n    return a\n",
        "num_ids": 75
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    return (prime_fib(n-1) + prime_fib(n-2))\n",
        "num_ids": 59
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    a, b = 0, 1\n    for i in range(2, n):\n        a, b = b, (a+b)\n    return b\n",
        "num_ids": 71
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = 1\n    b = 1\n    f = 0\n    for i in range(n-1):\n        f = a+b\n        a = b\n        b = f\n    if is_prime(f):\n        return f\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return fibonacci_primes[n]\n",
        "num_ids": 13
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a, b = 2, 1\n    while b < n:\n        a, b = b, a + b\n    if b == n:\n        return a\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    if n == 5:\n        return 89\n    a = 2\n    b = 3\n    f = 5\n    for _ in range(n - 3):\n        a, b = b, f\n        f = a + b\n    return f\n",
        "num_ids": 113
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return (prime_fib(n - 1) + prime_fib(n - 2))\n",
        "num_ids": 51
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n",
        "num_ids": 74
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    while a <= n:\n        a, b = b, a + b\n    return b if is_prime(b) else None\n",
        "num_ids": 41
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i+1, len(l) - 1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([x for x in set(l) if (x*2) in l]) >= 2\n",
        "num_ids": 25
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    c = Counter(l)\n    return c[0]>=3 and sum(l) == 0",
        "num_ids": 25
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return -6 in l and 2 in l and 3 in l\n",
        "num_ids": 16
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(i)\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    number_dict = {}\n    for num in l:\n        if num in number_dict:\n            number_dict[num] += 1\n        else:\n            number_dict[num] = 1\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(l)) < len(l) and len(set([i*-1 for i in l])) == len(l)",
        "num_ids": 34
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "num_ids": 72
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(l) - 2:\n        j = i + 1\n        while j < len(l) - 1:\n            k = j + 1\n            while k < len(l):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n                k += 1\n            j += 1\n        i += 1\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Use a set to store values\n    s = set()\n    # Iterate over the list\n    for i in l:\n        # If the value is not in the set\n        if i not in s:\n            # Add it to the set\n            s.add(i)\n            # If the length of the set is more than 2\n            if len(s) > 2:\n                # Return False\n                return False\n        # If the length of the set is 2\n        elif len(s) == 2:\n            # Return True\n            return True\n    # Return False\n    return False\n",
        "num_ids": 138
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Set collision counter to 0\n    collisions = 0\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for i in range(n) for j in range(i) if (i-j)%(i+j)==0)\n",
        "num_ids": 36
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 2\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # The maximum distance a car can drive before it starts moving in the same direction\n    max_distance = 2 * n\n",
        "num_ids": 28
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([num_collisions(i) for i in range(n, n * n, n)])\n",
        "num_ids": 27
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert isinstance(n, int) and n > 0, 'n must be a positive integer'\n",
        "num_ids": 24
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(factorial(n) / (factorial(n-2) * 2) / 2)\n",
        "num_ids": 26
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    time = 0\n    cars = ['R', 'L']\n    \n    while time < n:\n        for i in range(len(cars)):\n            for j in range(i+1, len(cars)):\n                if cars[i] == 'L' and cars[j] == 'R':\n                    time += 1\n                    break\n                \n        for i in range(len(cars)):\n            cars[i] = 'R' if cars[i] == 'L' else 'L'\n        \n    return time\n",
        "num_ids": 124
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    collisions = 0\n    for _ in range(n):\n        car1 = [0] * 2\n        car2 = [1] * 2\n        while car1[0] < 1.0:\n            car1[0] += 1.0 / n\n            car2[0] -= 1.0 / n\n            if car1[0] > car2[0]:\n                collisions += 1\n                break\n    return collisions\n",
        "num_ids": 102
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n",
        "num_ids": 20
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in l:\n        l2.append(i+1)\n    return l2\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Incr = l[i] + 1\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 37
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_list = []\n    for num in l:\n        new_list.append(num + 1)\n    return new_list\n",
        "num_ids": 33
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l_new = []\n    for i in range(len(l)):\n        l_new.append(l[i]+1)\n    return l_new\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    from itertools import combinations as cb\n",
        "num_ids": 12
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            if i == j:\n                continue\n            elif l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    my_dict = {}\n    for i in l:\n        if i in my_dict:\n            return True\n        else:\n            my_dict[-i] = True\n    return False\n    \n",
        "num_ids": 55
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return False\n    \n    nums = set(l)\n    \n    for num in nums:\n        if -num in nums:\n            return True\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return any([abs(sum(l[i], l[j])) == 0 for i in range(len(l)) for j in range(i + 1, len(l))])\n",
        "num_ids": 44
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # your code here\n    if len(l) == 0:\n        return False\n    else:\n        my_dict = {}\n        for i in l:\n            if i in my_dict:\n                return True\n            else:\n                my_dict[-i] = 1\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + l[-1 * (i + 1)] == 0:\n            return True\n    return False",
        "num_ids": 49
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seen_elements = set()\n    for elt in l:\n        if -elt in seen_elements:\n            return True\n        else:\n            seen_elements.add(elt)\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = False\n    seen = set()\n    for i in l:\n        if i in seen:\n            result = True\n            break\n        else:\n            seen.add(i)\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x == 0:\n        return '0'\n    elif x < 0:\n        return change_base(-x, base)\n    else:\n        result = \"\"\n        while x > 0:\n            x, remain = divmod(x, base)\n            result = str(remain) + result\n        return result\n",
        "num_ids": 77
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if base == 10:\n        return str(x)\n",
        "num_ids": 15
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if x < 0:\n        x = -x\n    x = str(x)\n    if int(x[0]) == 0:\n        return change_base(int(x[1:]), base)\n    elif base < 10:\n        return x\n    elif base == 10:\n        return x\n    elif base > 10:\n        return change_base(int(x[1:]), base) + x[0]\n",
        "num_ids": 105
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x < 0:\n        raise ValueError(\"x must be a positive integer.\")\n    if base > 10 or base < 2:\n        raise ValueError(\"base must be in range 2 - 10\")\n    if x == 0:\n        return str(0)\n    result = \"\"\n    while x > 0:\n        x, i = divmod(x, base)\n        result += str(int(i))\n    return result[::-1]\n",
        "num_ids": 105
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if base < 2 or base > 9:\n        raise ValueError('base should be a number between 2 and 9')\n    converted = ''\n    while x > 0:\n        converted = str(x%base) + converted\n        x = x // base\n    return converted\n",
        "num_ids": 65
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #print(x)\n    #print(base)\n    #print(bin(x))\n    #print(int(x, base))\n    #print(str(int(x, base)))\n    #print(hex(x))\n    #print(hex(int(x, base)))\n    #print(oct(x))\n    #print(oct(int(x, base)))\n    if x == 0:\n        return '0'\n    elif base == 10:\n        return str(x)\n    elif base < 10:\n        return str(x)\n    elif base == 16:\n        return hex(x)\n    else:\n        return oct(x)\n",
        "num_ids": 161
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x < 0:\n        raise ValueError('x cannot be negative')\n    elif base < 2 or base > 10:\n        raise ValueError('base must be between 2 and 10')\n    else:\n        return base_convert(x, base)\n    \n",
        "num_ids": 63
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Base numbers are less than 10\n    if base < 10:\n        # Converts input number to base 10\n        x = list(str(x))\n        res = ''\n        for i in range(len(x)):\n            # Finds the position of the last digit in the input\n            pos = len(x) - 1 - i\n            # Prints the last digit from the right to the left\n            res += x[pos]\n        # Returns the result\n        return res\n    else:\n        # Finds the position of the last digit in the input\n        pos = len(x) - 1\n        # Converts the input number to base 10\n        x = int(x)\n        res = ''\n        # The last digit in the number gets to the left\n        while x > 0:\n            # Finds the position of the last digit in the input\n            pos = len(x) - 1 - int(x % base)\n            # Prints the last digit from the right to the left\n            res += str(x % base)\n            # Gets the remainder\n            x //= base\n        # Returns the result\n        return res[::-1]\n",
        "num_ids": 266
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_string = \"\"\n    while x > 0:\n        new_string = str(x % base) + new_string\n        x //= base\n    return new_string\n",
        "num_ids": 43
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = 0\n    b = 1\n    c = 0\n    for i in range(n - 3):\n        c = a + b\n        a = b\n        b = c\n",
        "num_ids": 44
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def fib4_aux(i, f1, f2, f3, f4):\n        if i == 0:\n            return f1\n        elif i == 1:\n            return f2\n        elif i == 2:\n            return f3\n        else:\n            return fib4_aux(i-1, f4, f4+f3, f4+f2, f4+f3+f2)\n    \n    return fib4_aux(n, 0, 0, 0, 1)\n",
        "num_ids": 121
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        last_3 = fib4(n - 3)\n        last_2 = fib4(n - 2)\n        last_1 = fib4(n - 1)\n        return last_3 + last_2 + last_1 + last_1\n",
        "num_ids": 109
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # keep track of current and previous values\n    # use the values of the previous two as the new values of the current\n    # use the two values to compute the next value\n    # this is the O(n) time solution, as we have to iterate n times\n    a = 0\n    b = 1\n    for i in range(n-1):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 97
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fib4 = [0, 1, 2, 0]\n    if n < 4:\n        return fib4[n]\n    for i in range(4, n+1):\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    return fib4[n]\n",
        "num_ids": 92
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # the sum of the last 4 numbers of the sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 87
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    while n > 3:\n        a, b = b, a + b\n        n -= 1\n    return b\n",
        "num_ids": 37
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 50
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_list = sorted(l)\n    l_len = len(sorted_list)\n    middle = int(l_len / 2)\n    if l_len % 2 == 1:\n        return sorted_list[middle]\n    else:\n        return (sorted_list[middle-1] + sorted_list[middle]) / 2\n",
        "num_ids": 83
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    return l[len(l)//2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    if not l:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = sorted(l)\n    n = len(s)\n    if n % 2:\n        return s[n//2]\n    else:\n        return (s[n//2] + s[n//2 - 1]) / 2\n    \n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(l)\n    s = sorted(l)\n    return (s[n//2] + s[(n - 1)//2]) / 2 if n % 2 else s[n//2]\n",
        "num_ids": 51
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sortedL = sorted(l)\n    length = len(sortedL)\n    if length % 2 == 0:\n        return (sortedL[length//2 - 1] + sortedL[length//2])/2.0\n    else:\n        return sortedL[length//2]\n    \n    \ndef linear_search(l: list, val: object):\n    \"\"\"Return index of first occurrence of value val in list l.\n    >>> linear_search([1, 2, 3], 3)\n    2\n    >>> linear_search([1, 2, 3], 4)\n    -1\n    \"\"\"\n    for i in range(len(l)):\n        if l[i] == val:\n            return i\n    return -1\n",
        "num_ids": 174
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"median() arg is an empty sequence\")\n    sorted_list = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_list[(len(l) - 1) // 2]\n    else:\n        return (sorted_list[(len(l) - 1) // 2] + sorted_list[len(l) // 2]) / 2\n",
        "num_ids": 105
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return l[len(l)//2]\n",
        "num_ids": 13
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return float(l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 63
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(text) <= 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text[::-1].lower() == text.lower()\n",
        "num_ids": 17
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # text = text.lower()\n    return text == text[::-1]\n",
        "num_ids": 21
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    text = text.lower().replace(' ', '')\n    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return True\n    if text[0]!= text[len(text)-1]:\n        return False\n    return is_palindrome(text[1:len(text)-1])\n",
        "num_ids": 55
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (n % p) if n else 0\n",
        "num_ids": 13
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = int(n) % int(p)\n    if n == 0:\n        return 0\n    else:\n        return modp(n, p) + p\n",
        "num_ids": 41
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # returns 2^n mod p\n    n = n % p\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (3*modp(n, p)) % p\n    else:\n        return (2*modp(n//2, p)) % p\n    \ndef modp_inv(n: int, p: int):\n    \"\"\"Return 2^n modulo p inverse (be aware of numerics).\n    >>> modp_inv(3, 11)\n    6\n    >>> modp_inv(11, 101)\n    6\n    >>> modp_inv(0, 101)\n    0\n    >>> modp_inv(3, 11)\n    1\n    >>> modp_inv(10, 101)\n    4\n    >>> modp_inv(3, 101)\n    10\n    \"\"\"\n    # returns 2^n mod p inverse\n    n = n % p\n    if n == 0:\n        return 0\n    if n % 2 == 1:\n        return modp_inv((p - modp(n, p)) % p, p)\n    else:\n        return modp_inv(n // 2, p)\n",
        "num_ids": 278
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 0:\n        return (p - 1) * modp(-n, p)\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n // 2, p) ** 2 * (2 * p - 2)) % p\n",
        "num_ids": 91
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return (modp(n-1, p) * (p - 2) % p + p) % p\n    else:\n        return modp(n//2, p) ** 2 % p\n",
        "num_ids": 80
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (modp(n - 1, p) * p) % p\n",
        "num_ids": 34
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return (modp(n - 1, p) ** 2) % p\n",
        "num_ids": 60
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (((n % p) * modp(n-1, p)) % p)\n    else:\n        return (modp(n//2, p) ** 2) % p\n",
        "num_ids": 66
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return (modp(n // 2, p)**2) % p\n    else:\n        return (modp(n // 2, p)**2 * p) % p\n",
        "num_ids": 63
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return encode_shift(s)[::-1]\n",
        "num_ids": 14
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a','e','i','o','u']\n    new_text = ''\n    for x in text:\n        if x.lower() not in vowels:\n            new_text += x\n    return new_text\n",
        "num_ids": 57
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = 'aeiou'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    return ''.join(text)\n",
        "num_ids": 60
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string = text.lower()\n    vowels = ['a','e','i','o','u','y']\n    for letter in string:\n        if letter in vowels:\n            string = string.replace(letter,\"\")\n    return string\n",
        "num_ids": 58
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if text is None:\n        return None\n    if isinstance(text, str):\n        return ''.join([i for i in text if i not in vowels])\n    return ''\n",
        "num_ids": 81
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    text = text.lower()\n    text = ''.join([c for c in text if c not in vowels])\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # TODO: remove_vowels\n    # Hint: split the string into list of characters\n    # then compare each item to the list of vowels\n    # if item is not a vowel, add it to the new_text\n    # finally, join the new_text with a space\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = []\n    for c in text:\n        if c not in vowels:\n            new_text.append(c)\n    return ''.join(new_text)\n",
        "num_ids": 148
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    \n    # Modify the code for the next step\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n    \ndef num_vowels(text):\n    \"\"\"\n    num_vowels is a function that takes a string and returns the number of vowels in the string.\n    >>> num_vowels('')\n    0\n    >>> num_vowels('abcdef')\n    0\n    >>> num_vowels('abcdefghjklm')\n    3\n    >>> num_vowels('aaa')\n    0\n    >>> num_vowels('aBAA')\n    1\n    >>> num_vowels('zbcd')\n    0\n    \"\"\"\n    vowels = 'aeiou'\n    count = 0\n    # Modify the code for the next step\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 248
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set(['a','e','i','o','u','A','E','I','O','U'])\n    new_text = []\n    for char in text:\n        if char in vowels:\n            new_text.append(char)\n        else:\n            new_text.append(\"\")\n    return \"\".join(new_text)",
        "num_ids": 86
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    new_text = []\n    for char in text:\n        if char not in vowels:\n            new_text.append(char)\n    new_text = \"\".join(new_text)\n    return new_text",
        "num_ids": 89
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([c for c in text if c.lower() not in vowels])\n",
        "num_ids": 44
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return all([x <= t for x in l])\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(n <= t for n in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for elem in l:\n        if elem > t:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(l[i] < t for i in range(len(l)))\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(n < t for n in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(x < t for x in l)\n",
        "num_ids": 14
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n    \n",
        "num_ids": 9
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    else:\n        return all(x == y for x, y in zip(s0, s1))\n",
        "num_ids": 44
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s0) == len(s1) and sorted(s0) == sorted(s1)\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    return s0 == s1\n",
        "num_ids": 29
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 0:\n        raise ValueError(\"Fibonacci value of negative number is not defined\")\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 61
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # if n < 1:\n    #     raise ValueError(\"n must be greater than zero\")\n    # elif n == 1 or n == 2:\n    #     return 1\n    # else:\n    #     return fib(n - 1) + fib(n - 2)\n    if n < 1:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 121
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        elif bracket == \">\":\n            if not bracket_stack:\n                return False\n            else:\n                bracket_stack.pop()\n    return not bracket_stack\n",
        "num_ids": 75
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    open = []\n    for b in brackets:\n        if b == \"<\":\n            open.append(b)\n        elif b == \">\":\n            if len(open) == 0:\n                return False\n            if open[-1] == \">\":\n                open.pop()\n    return len(open) == 0\n",
        "num_ids": 78
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    open_brackets = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\":\n            open_brackets.append(i)\n        elif bracket == \">\":\n            if not open_brackets:\n                return False\n            close_bracket = open_brackets.pop()\n            if i - close_bracket!= 1:\n                return False\n    return True\n",
        "num_ids": 97
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    openings = []\n    for char in brackets:\n        if char == \"<\":\n            openings.append(\"<\")\n        elif char == \">\":\n            if len(openings) == 0:\n                return False\n            else:\n                openings.pop()\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for b in brackets:\n        if b == \">\":\n            count += 1\n        if b == \"<\":\n            count -= 1\n        if count < 0:\n            return False\n    if count!= 0:\n        return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for i in range(0, len(brackets)):\n        if brackets[i] == \"<\":\n            stack.append(\">\")\n        elif brackets[i] == \">\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    counts = {}\n    for b in brackets:\n        if b in counts:\n            counts[b] += 1\n        else:\n            counts[b] = 1\n    \n    for c in counts.values():\n        if c % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def pair_check(left, right):\n        if left == '<' and right == '>':\n            return True\n        elif left == '>' and right == '<':\n            return True\n        else:\n            return False\n",
        "num_ids": 57
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(brackets, str) and len(brackets) > 0, \"brackets must be a non-empty string\"\n    n = len(brackets)\n    stack = []\n    for i, b in enumerate(brackets):\n        if b == \"<\":\n            stack.append(i)\n        elif b == \">\" and len(stack) == 0:\n            return False\n        elif b == \">\" and len(stack) == 1:\n            stack.pop()\n        else:\n            assert False, \"Unhandled case\"\n    return len(stack) == 0\n",
        "num_ids": 139
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(pair in [\"<>\", \"()\"] for pair in brackets)\n",
        "num_ids": 20
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)-1):\n        if l[i] < l[i+1]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) < 2:\n        return True\n    return l[0] < l[-1] if l[0] > l[-1] else l[0] > l[-1]\n",
        "num_ids": 50
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for a, b in zip(l, l[1:]):\n        if a <= b:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_l = sorted(l)\n    if l == sorted_l:\n        return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\n    \ndef spiral(l: list):\n    \"\"\"\n    >>> spiral([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> spiral([1, 2, 3])\n    [1, 2, 3]\n    >>> spiral([1, 2])\n    [1, 2]\n    \"\"\"\n    pass\n",
        "num_ids": 119
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l1.sort()\n    l2.sort()\n    l1_i = 0\n    l2_i = 0\n    l = []\n    while l1_i < len(l1) and l2_i < len(l2):\n        if l1[l1_i] == l2[l2_i]:\n            l.append(l1[l1_i])\n            l1_i += 1\n            l2_i += 1\n        elif l1[l1_i] < l2[l2_i]:\n            l1_i += 1\n        else:\n            l2_i += 1\n    return l\n",
        "num_ids": 155
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l1_uniq = set(l1)\n    l2_uniq = set(l2)\n    return list(l1_uniq & l2_uniq)\n",
        "num_ids": 44
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l1).intersection(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l1) & set(l2))",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    set1 = set(l1)\n    set2 = set(l2)\n    common = list(set1.intersection(set2))\n    common.sort()\n    return common\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n",
        "num_ids": 40
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert n > 1\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 2:\n        return 2\n    limit = int(sqrt(n)) + 1\n    max_prime = 1\n    for i in range(2, limit):\n        if n % i == 0:\n            if is_prime(i):\n                max_prime = i\n    return max_prime\n",
        "num_ids": 74
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 1\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n /= i\n            print(i)\n        else:\n            i += 1\n    return n\n",
        "num_ids": 53
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert n > 1\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            total += i\n        return total\n",
        "num_ids": 43
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # if n <= 1:\n    #     return 1\n    # else:\n    #     return n + sum_to_n(n-1)\n    return sum(range(1, n+1))\n",
        "num_ids": 50
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(range(1, n+1))",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert n >= 1\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n    result = 0\n    for i in range(1,n+1):\n        result += i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    correct = 0\n    for s in brackets:\n        if s == \"(\":\n            correct += 1\n        elif s == \")\":\n            correct -= 1\n        if correct < 0:\n            return False\n    if correct!= 0:\n        return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    mapping = {\n        ')': '(',\n        '(': ')',\n    }\n    stack = []\n",
        "num_ids": 38
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Opening brackets are matched with corresponding closing brackets,\n    # so a stack is used to track them.\n    stack = []\n    for bracket in brackets:\n        if bracket == \")\":\n            # If the closing bracket is not on top of the stack,\n            # or if the closing bracket does not correspond to the top of the stack,\n            # the brackets are not matched.\n            if not stack or stack.pop()!= \"(\":\n                return False\n        else:\n            stack.append(bracket)\n    return not stack\n",
        "num_ids": 123
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not brackets:\n        return True\n    return brackets.count('(') == brackets.count(')')\n",
        "num_ids": 27
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # a Stack\n    s = Stack()\n    # a list\n    l = []\n    # loop through the brackets\n    for i in brackets:\n        if i == \"(\":\n            s.push(i)\n        elif i == \")\":\n            if s.is_empty():\n                l.append(False)\n            else:\n                s.pop()\n                l.append(True)\n    if s.is_empty() and all(l):\n        return True\n    else:\n        return False\n",
        "num_ids": 121
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    list=[]\n    for i in range(0,len(brackets)):\n        if brackets[i]==\"(\":\n            list.append(i)\n        elif brackets[i]==\")\":\n            if len(list)==0:\n                return False\n            else:\n                list.pop()\n    if len(list)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if len(brackets) == 0:\n        return True\n",
        "num_ids": 18
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(\"(\")\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 66
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert isinstance(xs, list)\n    assert is_poly(xs)\n",
        "num_ids": 20
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert type(xs) == list\n    for i in xs:\n        assert type(i) == int or type(i) == float\n    xs = [i for i in xs]\n    n = len(xs)\n    result = []\n    for i in range(1, n):\n        if i == n - 1:\n            result.append(xs[i] * i)\n        else:\n            result.append(xs[i] * i)\n    return result\n",
        "num_ids": 113
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your Code Here\n    return\n",
        "num_ids": 10
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(xs, list) or len(xs) == 0:\n        raise Exception(\"derivative: argument must be a non-empty list\")\n    if len(xs) == 1:\n        return [0]\n    # else\n    result = [0] * len(xs)\n    for i in range(1, len(xs)):\n        result[i] = xs[i] * i\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(xs, list)\n    assert len(xs) > 0, 'List must have at least one element'\n    if len(xs) == 1:\n        return [1]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n",
        "num_ids": 72
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) < 2:\n        return []\n    else:\n        return [xs[i] * xs[i + 1] for i in range(len(xs) - 1)]\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    if len(xs) > 1:\n        for i in range(1, len(xs)):\n            result.append(xs[i] * i)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(xs, list):\n        raise TypeError(\"Expected list\")\n    if len(xs) == 0:\n        raise ValueError(\"Expected at least one coefficient\")\n    if not all(isinstance(x, (int, float)) for x in xs):\n        raise ValueError(\"Expected all coefficients to be numeric\")\n    if len(xs) == 1:\n        return []\n    else:\n        return [xs[i] * i for i in range(1, len(xs))] + [xs[-1] * len(xs)]\n",
        "num_ids": 133
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = [0] * len(xs)\n    for i in range(len(xs) - 1):\n        result[i + 1] = xs[i] * (len(xs) - 1 - i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n > 0\n    return 0 if n <= 2 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 42
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return get_fib(n - 1) + get_fib(n - 2) + get_fib(n - 3)\n",
        "num_ids": 33
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return fibfib_helper(n, 0, 1, 0)\n",
        "num_ids": 19
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = 0\n    b = 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if n <= 1:\n        return n\n    \n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 51
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    if s[-1] in ['A','E','I','O','U']:\n        count -= 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = 'aeiouy'\n    n = 0\n    for i in s:\n        if i in vowels:\n            n += 1\n        elif i == 'y':\n            if s[-1] == 'y':\n                n += 1\n    return n\n",
        "num_ids": 68
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for ltr in s:\n        if ltr in 'aeiouAEIOU':\n            count += 1\n    if s[-1] == 'y':\n        count -= 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.count(\"a\") + s.count(\"e\") + s.count(\"i\") + s.count(\"o\") + s.count(\"u\") + s.count(\"y\")\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return 0\n    count = 0\n    if s[0].lower() in 'aeiou':\n        count += 1\n    if len(s) > 1:\n        if s[1].lower() in 'aeiou':\n            count += 1\n    return count + vowels_count(s[1:])\n",
        "num_ids": 85
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    if s[-1] in 'aeiouy':\n        count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([char for char in s if char in 'aeiou']) + (s[-1] == 'y')\n",
        "num_ids": 31
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    if s[-1] in vowels:\n        count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for ch in s:\n        if ch in \"aeiouy\":\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    digits = str(x)\n    if shift > len(digits):\n        shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[len(str(x))-shift:]+str(x)[:len(str(x))-shift]\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert type(x) == int, 'x is not an integer: %r' % x\n    assert type(shift) == int,'shift is not an integer: %r' % shift\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    return str_x[len(str_x)-shift:len(str_x)] + str_x[0:len(str_x)-shift]\n",
        "num_ids": 112
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    digits = list(str(x))\n    digits_len = len(digits)\n    if shift > digits_len:\n        shift %= digits_len\n    # normalize shift to positive and to the right\n    if shift < 0:\n        shift = digits_len + shift\n    # shift all digits right\n    shifted_digits = digits[shift:] + digits[:shift]\n    return \"\".join(shifted_digits)\n",
        "num_ids": 107
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO\n",
        "num_ids": 6
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(str(x))\n    if shift > length:\n        shift = shift % length\n    return str(int(str(x)[length - shift:]) + int(str(x)[:length - shift]))\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if shift > x // 10:\n        return (x % 10) * 10 ** (shift % (x // 10))\n    else:\n        return int(str(x % 10) + str(x // 10) * shift)\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if shift >= len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    l = len(str(x))\n    if shift > l:\n        return str(x)[::-1]\n    else:\n        return str(x)[l-shift:l] + str(x)[:l-shift]\n",
        "num_ids": 58
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(str(x))\n    digits = str(x)\n    if shift > n:\n        digits = digits[::-1]\n        shift = shift - n\n        return str(int(digits[shift:] + digits[:shift]))\n    else:\n        return str(int(digits[n-shift:] + digits[:n-shift]))\n",
        "num_ids": 91
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([ord(c) - 64 for c in s.upper() if ord(c) > 64])\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    return sum([ord(i) for i in s if ord(i) in range(65, 91)])\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)-64\n    return sum",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s:\n        return 0\n    return sum(ord(c) - 64 for c in s)\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([ord(ch) for ch in s.upper() if ord(ch) >= 65 and ord(ch) <= 90])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(int(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(ord(x) for x in s if ord(x) >= 65)\n",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(n):\n        if s[i] == 'a':\n            res += 1\n        if s[i] == 'o':\n            res -= 1\n        if s[i] =='m':\n            res += 1\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.count('mango') - s.count('apples')\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if s[0] == \"0\" or s[1] == \"0\":\n        return n - int(s)\n    else:\n        return n - int(s[0:2])",
        "num_ids": 46
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n - len(s)\n",
        "num_ids": 10
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    #this is a temp solution\n    #return max(s.count(\"mango\"),s.count(\"apples\"))\n    \n    #this is the proper solution\n    apples = s.count(\"apples\")\n    oranges = s.count(\"oranges\")\n    mangos = s.count(\"mango\")\n    mangos = 0 if mangos == 0 else (apples + oranges)\n    \n    return mangos\n    \n",
        "num_ids": 106
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.count(\"mango\") - s.count(\"orange\") - s.count(\"apple\")\n    # return s.count(\"mango\") - s.count(\"apple\")\n    # return s.count(\"mango\") - s.count(\"orange\")\n    # return s.count(\"mango\") - s.count(\"orange\") - s.count(\"apple\")\n",
        "num_ids": 86
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = s.split(\" \")[0]\n    b = s.split(\" \")[1]\n    a = int(a)\n    b = int(b)\n    if a < b:\n        b = b - a\n        return b\n    else:\n        a = a - b\n        return a\n",
        "num_ids": 74
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(\" \")[2].split(\"and\")[0] - int(s.split(\" \")[0]) - int(s.split(\" \")[1])\n",
        "num_ids": 41
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def fruits(s,n):\n        \"\"\"\n        Counts how many mango fruits are in a basket\n        \"\"\"\n        assert isinstance(s,str) and isinstance(n,int) and n > 0, \"This function accepts only strings and positive integers\"\n        return n - int(s.split()[0]) - int(s.split()[1])\n    return fruits(s,n)\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    fruit = {'mango': 2,'apple':1}\n    total = {'mango': 0,'apple':0}\n    \n    for a in s.split(' '):\n        total[a[-1]] += int(a[:-1])\n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n    even = [val for val in arr if val % 2 == 0]\n    if not even:\n        return []\n    return [min(even), arr.index(min(even))]",
        "num_ids": 54
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return []\n    min_even = None\n    min_index = None\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if min_even is None or min_even > arr[i]:\n                min_even = arr[i]\n                min_index = i\n    return [min_even, min_index]\n",
        "num_ids": 99
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 0]\n",
        "num_ids": 35
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    evens = [node for node in arr if node % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = []\n    if not arr: return res\n    i = 0\n    n = len(arr)\n    while i < n:\n        if arr[i] % 2 == 0:\n            res.append([arr[i], i])\n            i += 1\n        else:\n            i += 1\n    if not res: return res\n    else: return res[0]\n",
        "num_ids": 89
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0], 1]\n    evens = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            evens.append(arr[i])\n    if len(evens) == 0:\n        return []\n    min_even = evens[0]\n    min_idx = 0\n    for i in range(len(evens)):\n        if evens[i] < min_even:\n            min_even = evens[i]\n            min_idx = i\n    return [min_even, min_idx]\n",
        "num_ids": 164
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import heapq\n    if not arr: return []\n    heap = []\n    for node in arr:\n        if node % 2 == 0:\n            heapq.heappush(heap, (node, arr.index(node)))\n    if heap:\n        return [heapq.heappop(heap)[1], heap[0][1]]\n    return []\n",
        "num_ids": 90
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # arr = [4,2,3]\n    # arr = [1,2,3]\n    # arr = []\n    # arr = [5, 0, 3, 0, 4, 2]\n    # arr
        "num_ids": 1025
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr: return []\n    return [ [arr[i], i] for i in range(len(arr)) if arr[i] % 2 == 0 ",
        "num_ids": 38
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    arr.sort()\n    smalest = arr[0]\n    ans = []\n    for i in arr:\n        if i % 2 == 0 and i < smalest:\n            smalest = i\n            ans = [i, arr.index(i)]\n        elif i % 2 == 0 and i == smalest:\n            ans = [i, arr.index(i)]\n    return ans\n",
        "num_ids": 97
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for x in lst:\n        if lst.count(x) > x:\n            return x\n    return -1\n",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = -1\n    count = 1\n    for i in lst:\n        if count >= i:\n            res = i\n            count = 1\n        else:\n            count += 1\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    '''\n    1. sort the list and choose the last one that is bigger than zero\n    2. compare the frequency of the last element with the frequency of the chosen element\n    '''\n    # 1. sort the list and choose the last one that is bigger than zero\n    lst = sorted(lst)\n    if lst[-1] <= 0:\n        return -1\n    # 2. compare the frequency of the last element with the frequency of the chosen element\n    last = lst[-1]\n    last_freq = lst.count(last)\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] <= 0:\n            continue\n        if lst.count(lst[i]) >= last_freq:\n            return lst[i]\n    return -1\n",
        "num_ids": 198
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_num = max(lst)\n    if max_num == 0:\n        return -1\n    else:\n        return max([i for i in lst if i > 0 and lst.count(i) >= i])\n",
        "num_ids": 56
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    ans = -1\n    m = max(lst)\n    for i in range(1,m):\n        if i not in lst:\n            return i\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(lst)):\n        count = 0\n        for j in range(len(lst)):\n            if lst[i] > lst[j] and count <= lst[j]:\n                count += 1\n        if count >= lst[i]:\n            return lst[i]\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst.sort()\n    return next((lst[i+1] for i in range(len(lst)-1) if lst[i+1] > lst[i] and lst[i+1] >= lst[i+1] * lst[i]), -1)\n",
        "num_ids": 71
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if lst == []:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst:\n        return -1\n    count = [0]*len(lst)\n    for i in lst:\n        count[i-1] += 1\n    for i in xrange(len(lst)):\n        if count[i] >= lst[i]:\n            return lst[i]\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def count_freq(lst, target):\n        cnt = 0\n        for item in lst:\n            if item == target:\n                cnt += 1\n        return cnt\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if lst == []:\n        return []\n    lst.sort()\n    length = len(lst)\n    first_min = lst[0]\n    first_max = lst[-1]\n    min_count = 0\n    max_count = 0\n    min_index = 0\n    max_index = length-1\n    min_list = []\n    max_list = []\n    for i in range(length):\n        if lst[i] == first_min:\n            min_count += 1\n            min_index = i\n        elif lst[i] == first_max:\n            max_count += 1\n            max_index = i\n        if min_count == max_count:\n            min_list.append(min_index)\n            max_list.append(max_index)\n            break\n    for i in range(length):\n        if i == min_list[0]:\n            lst.append(lst[i])\n            lst.append(lst[i+1])\n            del lst[i+1]\n            length -= 1\n        elif i == max_list[-1]:\n            lst.insert(i, lst[i])\n            lst.insert(i, lst[i-1])\n            del lst[i-1]\n            length += 1\n    return lst\n",
        "num_ids": 322
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if lst:\n        minimum = lst[0]\n        maximum = lst[-1]\n",
        "num_ids": 26
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n    else:\n        return [min(lst)] + sorted(lst, reverse=True) + [max(lst)]\n",
        "num_ids": 42
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n    else:\n        lst.sort()\n        min_val = lst[0]\n        max_val = lst[-1]\n        lst.append(min_val)\n        lst.append(max_val)\n        lst.sort()\n        return lst[::-1]\n",
        "num_ids": 85
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    res = []\n    min_val = min(lst)\n    lst.remove(min_val)\n    max_val = max(lst)\n    lst.remove(max_val)\n    res.append(min_val)\n    res.append(max_val)\n    res.extend(lst)\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # @TODO: complete this function\n    length = len(lst)\n    if length == 0:\n        return []\n    lst.sort()\n    if length%2 == 0:\n        # print(lst[length//2 - 1], lst[length//2])\n        # print(lst[length//2], lst[length//2 - 1])\n        return [lst[length//2 - 1], lst[length//2], lst[length//2 - 1], lst[length//2]]\n    else:\n        # print(lst[length//2])\n        # print(lst[length//2 - 1])\n        return [lst[length//2], lst[length//2 - 1]]\n",
        "num_ids": 176
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = [1, 2, 3, 4, 5]\n    return [min(lst), max(lst)] + lst[1:] + [min(lst)]\n",
        "num_ids": 44
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    else:\n        return [lst[0]] + strange_sort_list(sorted(lst[1:], reverse=True))\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n    \ndef get_user_input():\n    '''\n    Get three sides of a triangle from user, and convert to float. \n    Check for invalid input (length of 3 or non-numeric inputs), and \n    return None if the input is invalid\n    '''\n    try:\n        a = float(input('Enter the length of side A: '))\n        b = float(input('Enter the length of side B: '))\n        c = float(input('Enter the length of side C: '))\n        if a <= 0 or b <= 0 or c <= 0:\n            return None\n        if a + b < c or a + c < b or b + c < a:\n            return None\n    except:\n        return None\n    return a, b, c\n",
        "num_ids": 224
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a + b <= c:\n        return -1\n    else:\n        return round((a * b * c) / (4 * (a + b + c)), 2)\n",
        "num_ids": 43
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # note that this is the only way to perform the round operation.\n    return round((a + b + c) / 2, 2)\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #YOUR CODE HERE\n    \n    #New function to calculate the area of a triangle\n    def calculate_area(a, b, c):\n        p = (a + b + c) / 2\n        return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    \n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return round(calculate_area(a, b, c), 2)\n    else:\n        return -1\n",
        "num_ids": 131
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s1 = float(a)\n    s2 = float(b)\n    s3 = float(c)\n    if s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2:\n        return round((s1 + s2 + s3) / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 86
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round((a * b * 1/2), 2)\n    else:\n        return -1\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] <= sides[2]:\n        return -1\n    return round((sides[0] + sides[1] - sides[2]) / 2, 2)\n",
        "num_ids": 67
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round((a + b + c)/2, 2)\n    else:\n        return -1",
        "num_ids": 45
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #if not is_triangle(a, b, c):\n    #    return -1\n    #return round(0.5*(a+b+c), 2)\n    \n    if not is_triangle(a, b, c):\n        return -1\n    return round(0.5*(a+b+c), 2)\n    \ndef is_triangle(a, b, c):\n    return a+b > c and a+c > b and b+c > a\n",
        "num_ids": 118
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # All three sides must be positive numbers\n    if a < 0 or b < 0 or c < 0:\n        return -1\n    \n    # triangle area =.5 * (a + b + c)\n    triangle_area = (a + b + c) / 2\n    \n    # if we could not obtain a valid triangle, return -1\n    if triangle_area == 0:\n        return -1\n    else:\n        return round(triangle_area, 2)\n    \ndef merge_sort(arr):\n    '''\n    Merge sort is a divide and conquer algorithm that splits an array into smaller subarrays,\n    and sorts them recursively until a single element is left. The array is divided into\n    two halves and the elements of the two subarrays are sorted in each recursive step.\n    Merge sort is a more efficient alternative to quicksort, especially on large arrays.\n    Example:\n    merge_sort([3, 5, 1, 4, 2]) == [1, 2, 3, 4, 5]\n    '''\n    \n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) / 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n    \ndef merge(arr1, arr2):\n    '''\n    Merge two sorted arrays into a single sorted array.\n    Example:\n    merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]\n    '''\n    \n    # combine the first two elements of each array\n    combined = [arr1[0], arr2[0]]\n    \n    # loop through each array and combine the elements with the first element of each array\n    for i in range(1, len(arr1)):\n        if arr1[i] > combined[0]:\n            combined[0] = arr1[i]\n            \n    for i in range(1, len(arr2)):\n        if arr2[i] > combined[0]:\n            combined[0] = arr2[i]\n            \n    # add the rest of the elements of each array to the combined array\n    for i in range(len(arr1)):\n        combined.append(arr1[i])\n    for i in range(len(arr2)):\n        combined.append(arr2[i])\n        \n    return combined\n    \ndef integer_digits(num):\n    '''\n    Given a number, return the number of digits in the number as a string.\n    Example:\n    integer_digits(9865) == '6'\n    integer_digits(1234567890) == '12'\n    integer_digits(0) == '0'\n    '''\n    \n    # create an empty string to store the number of digits\n    digits = \"\"\n    \n    # while the number is not zero\n    while num!= 0:\n        # add the number of digits to the string\n        digits += str(num % 10)\n        \n        # remove the last digit of the number, which is the last element of the string\n        num = num / 10\n        \n    # return the number of digits\n    return digits\n",
        "num_ids": 788
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not isinstance(q,list):\n        return False\n    if len(q) == 0:\n        return True\n    if not isinstance(q[0],int):\n        return False\n    if sum(q) > w:\n        return False\n    return (is_palindrome(q) and sum(q) <= w)\n",
        "num_ids": 81
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (q[::-1]==q) and sum(q)<=w\n    \n",
        "num_ids": 24
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return is_palindromic(q) and sum(q) <= w\n",
        "num_ids": 20
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return is_palindromic(q) and sum(q) <= w\n",
        "num_ids": 20
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_palindrome(s):\n        return s == s[::-1]\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = sum(q)\n    return is_palindrome(q) and total <= w\n",
        "num_ids": 24
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return 0\n    current_min = float('inf')\n    for i in range(1, len(arr)):\n        change = 1 + abs(arr[i] - arr[i - 1])\n        current_min = min(current_min, change)\n    return current_min\n",
        "num_ids": 74
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(arr)\n",
        "num_ids": 9
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if arr is None or len(arr) == 0:\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO: Check if the array is already palindromic\n    # TODO: If the array is already palindromic, return 0\n    # TODO: Sort the array\n    # TODO: Find the minimum number of changes\n    # TODO: Return the minimum number of changes\n    if not arr:\n        return 0\n    return 0\n",
        "num_ids": 82
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[-i-1]:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    low = 0\n    high = len(arr) - 1\n    min_change = len(arr) - 1\n    while low <= high:\n        if arr[low]!= arr[high]:\n            min_change = min(min_change, abs(high - low))\n        if high - low == 1:\n            break\n        if arr[high] == arr[low]:\n            high -= 1\n            low += 1\n        else:\n            high -= 1\n    return min_change\n",
        "num_ids": 115
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 1:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = len(arr)\n    min_change = l\n    for i in xrange(l):\n        temp = l - i\n        j = i\n        while j < l:\n            if arr[i]!= arr[j]:\n                temp += 1\n            j += 1\n        if temp < min_change:\n            min_change = temp\n    return min_change\n",
        "num_ids": 90
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return smallest_change_recursive(arr, len(arr)-1)\n",
        "num_ids": 19
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) > len(lst2):\n        longer = lst1\n        shorter = lst2\n    else:\n        longer = lst2\n        shorter = lst1\n    #new_lst = []\n    #for i in shorter:\n    #    if len(i) < len(longer):\n    #        new_lst.append(i)\n    #return new_lst\n    return [i for i in longer if len(i) < len(longer)]\n",
        "num_ids": 126
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)] + [x for x in lst2 if len(x) < len(lst1)]\n",
        "num_ids": 45
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) or len(x) == len(lst2) and x < lst2][-1]\n    \ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string as input and returns the string with vowels \n    reversed.\n",
        "num_ids": 87
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [] if len(lst1) < len(lst2) else lst1 if len(lst1) == len(lst2) else lst2\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n",
        "num_ids": 23
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [l for l in lst1 if sum([len(x) for x in lst2]) > sum([len(x) for x in lst1])]\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n",
        "num_ids": 26
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) < len(lst2):\n        return total_match(lst1, lst2)\n",
        "num_ids": 63
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [item for item in lst1 if len(item) <= len(lst2) and len(item) > 0]\n    \nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'hi']))\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))\n",
        "num_ids": 134
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = []\n    i = 1\n    while i < 100:\n        if a % i == 0:\n            l.append(i)\n        i += 1\n    return is_prime(l[0]) and is_prime(l[1]) and is_prime(l[2])\n",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not is_prime(a):\n        return False\n    for i in range(2, int(a / 2)):\n        if is_prime(a / i):\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i = 1\n    while i < 100:\n        if a % i == 0:\n            j = i\n            while j < 100:\n                if j % i == 0:\n                    break\n                j = j + i\n            if j == 100:\n                return True\n        i = i + 1\n    return False\n    ",
        "num_ids": 76
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #for i in range(2, math.floor(math.sqrt(a))):\n    #    if a % i == 0:\n    #        return False\n    #return True\n",
        "num_ids": 45
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # Set 2**2 = 4, 2**3 = 8, 2**4 = 16\n    primes = [2, 3, 5, 7]\n    \n    for n in range(2, 100):\n        for p in primes:\n            if n % p == 0 and n!= p:\n                break\n            if n == p:\n                break\n        else:\n            primes.append(n)\n        \n    return a in primes\n",
        "num_ids": 108
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_divisor(n, d):\n        return n % d == 0\n",
        "num_ids": 22
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return is_prime(2 * a) and is_prime(3 * a) and is_prime(5 * a)\n",
        "num_ids": 30
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(2, 100):\n        if a % i == 0:\n            if is_prime(i):\n                if is_prime(a/i):\n                    return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #To solve this problem, I used the formula that :\n    #n * n = n^2 + (n-1) * (n-2)\n    #n = (n-1) * (n-2) + 1\n    #Also, we know that we need to know which n has more prime factors\n    #since we have to find the largest one\n    prime_factors = []\n    for i in range(2, int(math.sqrt(a) + 1)):\n        while a % i == 0:\n            a /= i\n            prime_factors.append(i)\n    if a > 1:\n        prime_factors.append(a)\n",
        "num_ids": 158
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a < 100:\n        return False\n    elif a % 2 == 0:\n        return False\n    else:\n        n = 3\n        while n < a:\n            if a % n == 0:\n                return False\n            else:\n                n += 2\n        return True\n    \n    \n    \ndef quadratic_primes(a, b, c):\n    \"\"\"Write a function that returns a list of the quadratic primes of the form ax^2 + bx + c\n    and returns the number of primes that exist.\n    Example:\n    quadratic_primes(1, 2, -4) == [2, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1]\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"a cannot be zero\")\n    if b == 0:\n        raise ValueError(\"b cannot be zero\")\n    if c == 0:\n        raise ValueError(\"c cannot be zero\")\n    \n    x = -1\n    y = -1\n    z = -1\n    \n    n = 1\n    while x == -1:\n        if is_multiply_prime(n * n + b * n + c):\n            x = n\n        n += 1\n    \n    n = 1\n    while y == -1:\n        if is_multiply_prime(n * n + b * n + c):\n            y = n\n        n += 1\n    \n    n = 1\n    while z == -1:\n        if is_multiply_prime(n * n + b * n + c):\n            z = n\n        n += 1\n    \n    return [x, y, z]\n    \n    \n    \ndef is_prime(n):\n    \"\"\"Write a function that returns true if n is prime and false otherwise.\n    You do not have to check whether n is less than 2.\n    You do not have to write the algorithms to check for factors.\n    The function should also not return a value unless the given number is prime\n    Example:\n    is_prime(30) == True\n    is_prime(10) == False\n    is_prime(5) == False\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            elif n % (i + 2) == 0:\n                return False\n            else:\n                i += 6\n        return True\n    \n    \ndef factors(n):\n    \"\"\"Write a function that returns a list of the factors of n\n    Example:\n    factors(10) == [1, 2, 5]\n    factors(20) == [1, 2, 4, 5, 10]\n    \"\"\"\n    if n < 2:\n        return []\n    elif n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2] + factors(n // 2)\n    elif n % 3 == 0:\n        return [3] + factors(n // 3)\n    elif n % 5 == 0:\n        return [5] + factors(n // 5)\n    else:\n        return [n] + factors(n - 1)\n    \n    \n    \ndef sum_of_divisors(n):\n    \"\"\"Write a function that returns the sum of all the divisors of n\n    Example:\n    sum_of_divisors(2) == 4\n    sum_of_divisors(7) == 7\n    sum_of_divisors(8) == 1 + 2 + 4 + 8\n    sum_of_divisors(12) == 1 + 2 + 3 + 4 + 6 + 12\n    sum_of_divisors(100) == 1 + 2 + 4 + 5 + 10 + 20 + 25 + 50 + 100\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 1 + sum_of_divisors(n // 2)\n    else:\n        return 1 + sum_of_divisors(",
        "num_ids": 1024
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == n or x % n == 0\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n**int(x) == x",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == (n ** int(x))\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert type(n) == int\n    return n == 1 or n % int(n ** 0.5) == 0\n",
        "num_ids": 29
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return True if x%n==0 else False\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return x == 1\n    if n % 2 == 0:\n        return is_simple_power(x, n/2)\n    return is_simple_power(x, n-1) and x == n - 1\n",
        "num_ids": 70
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n == 1 or n == x\n",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    if x % (n**2)!= 0:\n        return False\n    if x % (n**2) == 0:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n == 1 or (x == n and n**int(n) == x)",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == 0:\n        return True\n    elif a == 1:\n        return False\n    else:\n        return a ** 3 == a\n",
        "num_ids": 36
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a**3 == int(a**3):\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a**3 == int(a**3)\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return a*a*a == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a*a*a == a**3\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a**(1/3) == int(a**(1/3))\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(a) == int, 'a is not a valid integer'\n    assert a > 0, 'a is a negative integer'\n    return a == int(a**(1./3.))**3\n",
        "num_ids": 50
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a*a*a == a",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return pow(a,3) == a\n",
        "num_ids": 12
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len([str(num[i]) for i in range(len(num)) if int(num[i]) % 2 == 1])\n",
        "num_ids": 33
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if num:\n        # your code here\n        num = str(num).strip()\n        if num:\n            count = 0\n            for i in num:\n                if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9' or i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E' or i == 'F':\n                    count += 1\n                else:\n                    return False\n            if count == 1:\n                return False\n            return count\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 181
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def is_prime(num):\n        if num == 2:\n            return True\n        if num < 2 or num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5+1), 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n    \ndef divide_by_n(num):\n    \"\"\"You have been tasked to write a function that receives a positive \n    integer number and divides it by the value of another argument.\n    For example, if you are given a number 24, and another number 2,\n    then the function should return 2.\n    If the number cannot be divided by the second argument, \n    then the function should return -1.\n    Examples:\n    For num = 8, and divisor = 3, the output should be 4.\n    For num = 25, and divisor = 4, the output should be 2.\n    For num = 14, and divisor = 7, the output should be 1.\n    For num = 1, and divisor = 0, the output should be -1.\n    For num = 2, and divisor = 0, the output should be -1.\n    \"\"\"\n    pass\n    \ndef element_binary_search(arr, element, left, right):\n    \"\"\"You have been tasked to write a function that receives a sorted array \n    and a number as input. This number is supposed to be a value in the array. \n    The function should return the index of the value in the array if it is \n    present, otherwise -1. The array is sorted in ascending order.\n    Examples:\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = 10, then the output should be 12.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = -5, then the output should be -1.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = 0, then the output should be 0.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = -20, then the output should be -1.\n    \"\"\"\n    pass\n    \ndef binary_search(arr, element):\n    \"\"\"You have been tasked to write a function that receives a sorted array \n    and a number as input. This number is supposed to be a value in the array. \n    The function should return the index of the value in the array if it is \n    present, otherwise -1. The array is sorted in ascending order.\n    Examples:\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = 10, then the output should be 12.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = -5, then the output should be -1.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = 0, then the output should be 0.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    and element = -20, then the output should be -1.\n    \"\"\"\n    pass\n    \ndef find_missing_element(arr):\n    \"\"\"You have been tasked to write a function that receives an array as input \n    and returns the missing number from the array. \n    The array is guaranteed to contain numbers in the range [1, 10000].\n    The function should return the smallest number not present in the array.\n    Examples:\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    the output should be 16.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \n    the output should be 16.\n    For arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], \n    the output should be 17.\n    For arr = [16, 17, 19, 20",
        "num_ids": 1024
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    digit = {\n        '0': 0,\n        '1': 0,\n        '2': 0,\n        '3': 0,\n        '4': 0,\n        '5': 0,\n        '6': 0,\n        '7': 0,\n        '8': 0,\n        '9': 0,\n        'A': 0,\n        'B': 0,\n        'C': 0,\n        'D': 0,\n        'E': 0,\n        'F': 0,\n        '0': 1,\n        '1': 1,\n        '2': 1,\n        '3': 1,\n        '4': 1,\n        '5': 1,\n        '6': 1,\n        '7': 1,\n        '8': 1,\n        '9': 1,\n        'A': 1,\n        'B': 1,\n        'C': 1,\n        'D': 1,\n        'E': 1,\n        'F': 1,\n    }\n    \n    count = 0\n    for n in num:\n        if digit[n]!= 0:\n            count += 1\n            digit[n] -= 1\n    \n    return count\n",
        "num_ids": 279
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_prime(x):\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, x, 2):\n            if x % i == 0:\n                return False\n        return True\n    s = set()\n    for i in range(10, 32):\n        s.add(i)\n    s.add(2)\n    s.add(3)\n    s.add(5)\n    s.add(7)\n    s.add(11)\n    s.add(13)\n    res = 0\n    for c in num:\n        res += s.intersection({int(c, 16)})\n    return res\n",
        "num_ids": 180
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = int(num)\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    count = 0\n    while n > 0:\n        if n % primes[count] == 0:\n            n /= primes[count]\n            count += 1\n        else:\n            count += 1\n    return count - 1\n",
        "num_ids": 84
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # count number of primes\n    number_of_primes = 0\n    for i in range(10, int(num, 16)+1):\n        if is_prime(i) == True:\n            number_of_primes += 1\n    # count number of decimals\n    number_of_decimals = 0\n    for i in range(0, 10):\n        if (i!= 0 and i!= 1) and num[0] == str(i) and num[1] == str(i):\n            number_of_decimals += 1\n        elif num[0] == str(i):\n            number_of_decimals += 1\n    return number_of_primes + number_of_decimals\n",
        "num_ids": 175
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"db\" + bin(decimal)[2:].zfill(32) + \"db\"\n",
        "num_ids": 25
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if decimal == 0:\n        return 'db'\n    if decimal % 2 == 0:\n        return decimal_to_binary(decimal/2) + '0'\n    else:\n        return decimal_to_binary(decimal/2) + '1'",
        "num_ids": 62
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    binary_list = []\n    while decimal:\n        binary_list.append(str(decimal%2))\n        decimal = decimal // 2\n    binary_list.reverse()\n    binary_list.append('db')\n    binary_list.extend(['db']*2)\n    return ''.join(binary_list)\n",
        "num_ids": 80
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary = \"\"\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if decimal == 0:\n        return \"0\"\n",
        "num_ids": 14
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    binary = str(bin(decimal))[2:]\n    if len(binary) < 8:\n        binary = '0' * (8 - len(binary)) + binary\n    return 'db' + binary + 'db'\n",
        "num_ids": 54
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bin_list = []\n    while decimal > 0:\n        bin_list.append(decimal % 2)\n        decimal /= 2\n    return ''.join(['0' for _ in range(abs(len(bin_list)-1) - len(bin_list))]+bin_list)\n",
        "num_ids": 72
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if decimal < 0:\n        raise ValueError(\"decimal_to_binary: Input value must be >= 0\")\n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    binary = []\n    while decimal!= 0:\n        binary.append(str(decimal % 2))\n        decimal = int(decimal / 2)\n    return ''.join(binary) + 'db'\n",
        "num_ids": 52
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = set(s)\n    return len(a) >= 3 and len(a) == len(s)\n    # return len(s) >= 3 and all(i!= j for i, j in zip(s, s[1:]))\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == 1\n",
        "num_ids": 36
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1]:\n            return False\n        i += 3\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = True\n    if len(s) < 3:\n        result = False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                result = False\n                break\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(s)>=3 and len(set(s[i:i+3]) for i in range(len(s)-2))==len(set(s[i:i+3] for i in range(len(s)-3)))\n",
        "num_ids": 59
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(s)>=3 and len(set(s[i:i+3]) for i in range(len(s)-2))==len(s[:-2])\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s)) == 1:\n        return False\n    if len(s) == 3:\n        return True\n    return is_happy(s[1:]) if is_happy(s[1:]) else is_happy(s[2:])\n",
        "num_ids": 77
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    result = True\n    previous = s[0]\n    for c in s[1:]:\n        if c == previous:\n            result = False\n            break\n        previous = c\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #your code here\n    if len(s) < 3:\n        return False\n    letter_dict = {}\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n        if s[i] not in letter_dict:\n            letter_dict[s[i]] = 0\n        letter_dict[s[i]] += 1\n    if len(letter_dict.keys()) < 2:\n        return False\n    return True",
        "num_ids": 118
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [letter_grades[int(grade)] for grade in grades]\n",
        "num_ids": 71
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 18
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [('A+', 'A'), ('A', 'A-'), ('B+', 'B'), ('B', 'B-'), ('C+', 'C'), ('C', 'C-'), ('D+', 'D'), ('D', 'D-'), ('E', 'E')]\n",
        "num_ids": 68
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    grades = sorted(grades)\n    grades = [str(x) for x in grades]\n    print grades\n    grades = [str(x) for x in grades]\n    grades = [eval(x) for x in grades]\n    for i,j in enumerate(grades):\n        if j >= 4.0:\n            grades[i] = 'A+'\n        elif j >= 3.7:\n            grades[i] = 'A'\n        elif j >= 3.3:\n            grades[i] = 'A-'\n        elif j >= 3.0:\n            grades[i] = 'B+'\n        elif j >= 2.7:\n            grades[i] = 'B'\n        elif j >= 2.3:\n            grades[i] = 'B-'\n        elif j >= 2.0:\n            grades[i] = 'C+'\n        elif j >= 1.7:\n            grades[i] = 'C'\n        elif j >= 1.3:\n            grades[i] = 'C-'\n        elif j >= 1.0:\n            grades[i] = 'D+'\n        elif j >= 0.7:\n            grades[i] = 'D'\n        elif j >= 0.0:\n            grades[i] = 'D-'\n    grades = [str(x) for x in grades]\n    return grades\n",
        "num_ids": 328
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO - 1) rewrite the code to use the grade_equation function from\n    # lesson_06\n    # TODO - 2) return a list of letter grades from the dictionary above\n    # TODO - 3) get rid of the for loop and write your own grade_equation function\n    return []\n",
        "num_ids": 72
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    grades = [round(grade,1) for grade in grades]\n    grade_grades = ['A+', 'B', 'C-', 'C', 'A-', 'D+', 'D', 'D-', 'E']\n    grade_grades = list(grade_grades)\n    grades = [grade_grades.index(grade) for grade in grades]\n    return [grade_grades[grade] for grade in grades]\n",
        "num_ids": 100
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n",
        "num_ids": 252
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def isPrime(n):\n        for i in range(2,n//2):\n            if n%i == 0:\n                return False\n        return True\n    return isPrime(len(string))\n",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True",
        "num_ids": 48
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)%2==0\n",
        "num_ids": 12
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    len_of_string = len(string)\n    if len_of_string == 1:\n        return False\n    for x in range(2,len_of_string):\n        if len_of_string % x == 0:\n            return False\n    return True\n    \ndef is_palindrome(string):\n    \"\"\"Write a function that takes a string and returns True if the string is\n    a palindrome (same forwards as backwards) or False otherwise\n    Examples\n    is_palindrome('racecar') == True\n    is_palindrome('noon') == True\n    is_palindrome('stop') == False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    for x in range(len(string)//2):\n        if string[x]!= string[len(string)-1-x]:\n            return False\n    return True",
        "num_ids": 205
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #return all(len(string) % i for i in range(2, int(len(string)/2) + 1) if len(string) % i == 0)\n    return all(int(len(string) / i) == len(string) / i for i in range(2, int(len(string) / 2) + 1))\n",
        "num_ids": 81
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(string)\n    if length < 2:\n        return True\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) == 1:\n        return True\n    elif len(string) > 1:\n        for i in range(2, len(string)):\n            if (len(string) % i) == 0:\n                return False\n            else:\n                return True\n",
        "num_ids": 66
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    divisors = []\n    for i in range(2,int(len(string)/2)):\n        if (len(string) % i) == 0:\n            divisors.append(i)\n",
        "num_ids": 50
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(string) > 0:\n        return len(string) % 2 == 0\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    prime = True\n    for i in range(2,len(string)):\n        if string[0] == string[i]:\n            prime = False\n    return prime\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 0\n    res = 1\n    for i in xrange(1, n):\n        res += 9 * starts_one_ends(i) + 7 * starts_one_ends(n - i - 1)\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return count_digit(n, 1) + count_digit(n, -1)\n",
        "num_ids": 22
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in xrange(1, n + 1):\n        if i < 10:\n            if i == 1:\n                count += 1\n        else:\n            if i % 10 == 1 or i % 10 == 0:\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    start, end = 0, 0\n    while start <= end:\n        mid = (start + end) / 2\n        if n == 1:\n            start += 1\n            continue\n        if count(mid, n-1) == 0:\n            if count(mid-1, n-1) == 1 or count(mid+1, n-1) == 1:\n                start = mid + 1\n                continue\n            else:\n                end = mid - 1\n                continue\n        elif count(mid, n-1) == 1:\n            if count(mid+1, n-1) == 1 or count(mid-1, n-1) == 1:\n                start = mid + 1\n                continue\n            else:\n                end = mid - 1\n                continue\n        elif count(mid, n-1) == 2:\n            start = mid + 1\n            continue\n        else:\n            end = mid - 1\n            continue\n    return start\n",
        "num_ids": 221
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 1:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in xrange(10**(n-1), 10**n):\n        if len(str(i)) == n and str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1 + (3 + 2 + 3) // 2\n    else:\n        return starts_one_ends(n-1) + (n*(n+1) * 4) // 3",
        "num_ids": 76
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for num in range(10**(n-1),10**n):\n        if num % 10 == 1 or num % 10 == 0:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 9\n    return 4*(n-1) + 1 + 9*(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    N_bin = bin(N)\n    return N_bin[2:]\n",
        "num_ids": 20
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert isinstance(N, int)\n    assert N >= 0 and N <= 10000\n",
        "num_ids": 21
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum_bits(N)\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary_number = []\n    while N > 0:\n        binary_number.append(N % 2)\n        N = N / 2\n",
        "num_ids": 34
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int_to_binary(N)",
        "num_ids": 11
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return str(bin(N).count('1'))",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(str(int(i)) for i in str(N))\n",
        "num_ids": 21
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # A straightforward solution is to convert the number into a string,\n    # and then to use a lookup table to convert the digits.\n    # For this solution, you can use a generator expression to get a\n    # list of all the digits in the number.\n    # For the solution below, you can use the builtin function bin(n).\n    # Hint: To get the integer part of a float number, use int(n)\n    \n    # A generator expression that yields the digits of n in order\n    # For example, the generator expression yields 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n    # for n = 100,000.\n    return sum(int(digit) for digit in str(N))\n",
        "num_ids": 172
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return bin(N",
        "num_ids": 8
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # your code here\n    if N == 0:\n        return \"0\"\n    elif N % 2 == 0:\n        return solve(N/2) + \"0\"\n    else:\n        return solve((N-1)/2) + \"1\"\n    \n",
        "num_ids": 64
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    newlist = []\n    for i in lst:\n        if i % 2 == 0:\n            newlist.append(i)\n    return newlist\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(0, len(lst), 2):\n        res.append(lst[i])\n    return sum(res)\n",
        "num_ids": 40
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2))\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if lst:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        else:\n            return add(lst[1:])\n    else:\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_list = lst[0::2]\n    return sum(new_list)\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    newlst = []\n    for i in range(len(lst)):\n        if lst[i]%2 == 0:\n            newlst.append(lst[i])\n    return sum(newlst)\n",
        "num_ids": 56
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_lst = []\n    for i in range(0, len(lst), 2):\n        new_lst.append(lst[i])\n    return sum(new_lst)\n",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return lst[0] + add(lst[2:])\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = s.split()\n    s =''.join(sorted(s, key=lambda x:ord(x)))\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(''.join(sorted(word)) for word in s.split())\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Replace pass with your code\n    s = s.split(' ')\n    s = ''.join(s)\n    s = ''.join(sorted(s))\n    s =''.join(s)\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = ''\n    s = s.split()\n    for word in s:\n        res += word +''\n    return res[:-1]\n    ",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(sorted(s.split(), key=str.isalpha))\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    words = s.split()\n    res = []\n    for word in words:\n        for i in range(len(word)):\n            res.append(chr(ord(word[i]) - (i+1)))\n        res.append(' ')\n    return ''.join(res).rstrip()\n",
        "num_ids": 74
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: (x.isalpha(), x)))\n",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    from string import ascii_lowercase as alphabet\n    words = s.split(' ')\n    sorted_words = []\n    for word in words:\n        word = list(word)\n        word = sorted(word)\n        sorted_words.append(''.join(word))\n    return''.join(sorted_words)\n",
        "num_ids": 80
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_s = ''\n    words = s.split(' ')\n    for word in words:\n        word = sorted(word)\n        word = ''.join(word)\n        new_s += word +''\n    return new_s[:-1]\n",
        "num_ids": 62
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n    \n    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row: row[-1], reverse=True)\n    return lst[x]\n",
        "num_ids": 65
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    d = defaultdict(list)\n    for i in lst:\n        for j, x in enumerate(i):\n            d[j].append((i.index(x), x))\n    \n    return sorted(d[x], key=lambda x: (x[0], -x[1]))\n    \n    \nif __name__ == \"__main__\":\n    assert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)",
        "num_ids": 212
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # First of all, check if x is in the list\n    if x not in lst:\n        return []\n    \n    # Sorting the list first by row in ascending order\n    lst.sort(key=lambda x: x[0])\n    \n    # Sorting the list first by column in descending order\n    lst.sort(key=lambda x: x[-1], reverse=True)\n    \n    # Now we just need to find row, for which x is in\n    # Therefore, start from the last item of the list, and check if x is in that item\n    result = []\n    for item in lst[::-1]:\n        if x in item:\n            result.append(item)\n    \n    return result\n",
        "num_ids": 175
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def index(lst, x):\n        return [x in row for row in lst].index(True)\n",
        "num_ids": 28
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if lst == []:\n        return []\n    return sorted(zip(range(len(lst)), sorted(zip(*lst), reverse = True)[1]), key=lambda x: x[0])\n",
        "num_ids": 49
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    coordinates = []\n    lst.sort()\n    for i in lst:\n        i.sort(reverse=True)\n    for row in lst:\n        for column in row:\n            if column == x:\n                coordinates.append((lst.index(row), row.index(column)))\n    return coordinates\n",
        "num_ids": 78
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    coord = []\n    for row in lst:\n        if x in row:\n            coord.append( (row.index(x), row.index(x) + len(row) - 1) )\n    coord = sorted(coord, key=lambda tup: (tup[0], -tup[1]))\n    return coord\n",
        "num_ids": 80
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted([tuple(sorted(row[:x]+row[-(x+1):], reverse=True)) for row in lst])\n",
        "num_ids": 35
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted([(row, lst[row].index(x)) for row in range(len(lst))], key = lambda t: (t[0], -t[1]))\n",
        "num_ids": 45
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(set(lst[x]))\n",
        "num_ids": 14
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # base case: if array is empty\n    if not array:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(array) == 0:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(array) <= 1:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(array, reverse=sum(array[0], array[-1]) % 2)\n",
        "num_ids": 24
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(array, reverse=True) if sum(array[0], array[-1]) % 2 == 0 else sorted(array)\n",
        "num_ids": 33
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in xrange(len(array)):\n        for j in xrange(len(array) - i - 1):\n            if (array[j] + array[j + 1]) % 2:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n",
        "num_ids": 76
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert array is not None and len(array) > 0\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not array:\n        return []\n    pivot = array[0]\n    left = []\n    right = []\n    for i in range(1, len(array)):\n        if (array[i] + pivot) % 2 == 1:\n            left.append(array[i])\n        else:\n            right.append(array[i])\n    return sort_array(left) + [pivot] + sort_array(right)\n",
        "num_ids": 105
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    d = {}\n    for index, c in enumerate(alphabet):\n        d[c] = index\n    \n    encoded = []\n    for c in s:\n        encoded.append(alphabet[(d[c] + 2) % len(alphabet)])\n    \n    return ''.join(encoded)\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    d = {}\n    for index, c in enumerate(alphabet):\n        d[c] = index\n    \n    encoded = []\n    for c in s:\n        encoded.append(alphabet[(d[c] - 2) % len(alphabet)])\n    \n    return ''.join(encoded)\n",
        "num_ids": 328
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    encrypted = ''\n    for letter in s:\n        encrypted = encrypted + alph[(alph.index(letter) + 2) % 26]\n    return encrypted\n",
        "num_ids": 39
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join( alphabet[alphabet.index(x)+2] for x in s)\n    \n",
        "num_ids": 26
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    rotatedAlphabet = getRotatedAlphabet()\n    # TODO: Fill this in!\n",
        "num_ids": 24
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # I think I can do this without using a string, I think.\n    # The alphabet is the standard lowercase alphabetic string\n    # plus a space.\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz '\n    new_alphabet = alphabet[2:] + alphabet[0:2]\n    \n    new_string = ''\n    for i in s:\n        new_string += new_alphabet[alphabet.index(i)]\n    \n    return new_string\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    # I think I can do this without using a string, I think.\n    # The alphabet is the standard lowercase alphabetic string\n    # plus a space.\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz '\n    new_alphabet = alphabet[2:] + alphabet[0:2]\n    \n    new_string = ''\n    for i in s:\n        new_string += new_alphabet[alphabet.index(i)]\n    \n    return new_string\n    ",
        "num_ids": 371
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s[1:len(s)] + s[0]\n",
        "num_ids": 17
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rotated = [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'][((x-ord('a'))//2) % 26] for x in s]\n    return ''.join(rotated)\n",
        "num_ids": 113
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join([chr(ord('a') + (ord(x) + 2) % 26) for x in s])\n",
        "num_ids": 32
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_word = ''\n    \n    for letter in s:\n        encrypted_word += alphabet[alphabet.find(letter)-2]\n    \n    return encrypted_word\n    \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    decrypted_word = ''\n    \n    for letter in s:\n        decrypted_word += alphabet[alphabet.find(letter)+2]\n    \n    return decrypted_word\n    \n    \nprint encrypt('hi')\nprint encrypt('asdfghjkl')\nprint encrypt('gf')\nprint encrypt('et')\nprint decrypt('lm')\nprint decrypt('ewhjklnop')\nprint decrypt('kj')\nprint decrypt('ix')",
        "num_ids": 319
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[1]",
        "num_ids": 30
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]",
        "num_ids": 33
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        lst.sort()\n        return lst[1]\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        return min(lst[1:])\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    min1 = lst[0]\n    min2 = lst[1]\n    \n    for i in lst[2:]:\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return min2\n",
        "num_ids": 94
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if lst == []:\n        return None\n    \n    lst = sorted(lst)\n    return lst[1]\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    lst.sort()\n    return lst[1]",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # total = 0\n    # for sentence in S.split('.'):\n    #     for word in sentence.split('?'):\n    #         for phrase in sentence.split('!'):\n    #             if phrase[0] == \"I\":\n    #                 total += 1\n    # return total\n    return sum(1 for sentence in S.split('.') for word in sentence.split('?') if word[0] == \"I\")\n",
        "num_ids": 103
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    boredom = 0\n    for i in S:\n        if i == \"I\":\n            boredom += 1\n    return boredom\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for word in S.split():\n        if word == 'I' and S.find('.') == -1 and S.find('?') == -1 and S.find('!') == -1:\n            count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    S = S.split(\".\")\n    S = S + S\n    return len([s for s in S if s.startswith(\"I\")])\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return S.count(\"I\"",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([1 for s in S.split() if s.startswith(\"I\")])",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([1 for s in S.split('.') + S.split('?') + S.split('!') if s[0] == 'I'])\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for word in S.split():\n        if word == \"I\" and S.split().index(word) == 0:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    S = S.split(' ')\n    S_bored = []\n    for s in S:\n        if s.startswith('I'):\n            S_bored.append(s)\n    return len(S_bored)\n",
        "num_ids": 59
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for line in S.split('\\n'):\n        if 'I' == line[0:2]:\n            count += 1\n    return count",
        "num_ids": 40
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (z == x + y or x == y + z) and (type(x) == int or type(y) == int or type(z) == int)",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return True if (int(x) + int(y) == int(z)) and (int(x) == int(y) == int(z)) else False\n    \n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == y + z or x == z + y or x == y + z or x == z + y:\n        return True\n    elif x == y + z or x == z + y or x == y + z or x == z + y:\n        return True\n    elif x == y + z or x == z + y or x == y + z or x == z + y:\n        return True\n    else:\n        return False\n",
        "num_ids": 104
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if type(x) == type(y) == type(z):\n        if isinstance(x, int) or isinstance(x, float) or isinstance(y, int) or isinstance(y, float) or isinstance(z, int) or isinstance(z, float):\n            if x == (y+z):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == y + z and type(x) == int(x) and type(y) == int(y) and type(z) == int(z):\n        return True\n    else:\n        return False\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\nprint(any_int(0, 0, 0))\n",
        "num_ids": 124
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x == int(x) and y == int(y) and z == int(z):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if x==y+z and type(x)==int and type(y)==int and type(z)==int:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True if x == y + z or y == x + z or z == x + y else False\n",
        "num_ids": 25
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(x, int) or not isinstance(y, int) or not isinstance(z, int):\n        return False\n    \n    return x == sum(x, y) and y == sum(y, z)\n",
        "num_ids": 56
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x == sum([y,z]) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n    \n",
        "num_ids": 38
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    code = ''\n    for letter in message:\n        if letter in letters:\n            code += letters[(letters.index(letter) + 2) % len(letters)]\n        else:\n            code += letter\n    return code\n",
        "num_ids": 134
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # We'll first put all vowels into a list\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Make a list of the letters in the message\n    # This is quite slow though\n    message = list(message)\n    \n    # Now we'll iterate through the message and swap letters\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            # Find the letter that follows the vowel\n            try:\n                letter_after = message[i+2].lower()\n            except IndexError:\n                # We've reached the end of the message\n                letter_after = ''\n            # Swap the letter\n            message[i] = message[i].swapcase()\n            message[i+1] = letter_after\n    # Return the message joined into a string\n    return ''.join(message)\n",
        "num_ids": 225
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return ''.join([MAP[c.lower()] if c.isalpha() else c for c in message])\n    \n    \ndef decode(message):\n    \"\"\"\n    Invert the above encoding process. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('thks ks c mgsscgg')\n    'This is a message'\n    \"\"\"\n    \n    return ''.join([MAP[c.lower()] if c.isalpha() else c for c in message])\n",
        "num_ids": 127
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # build a translation table\n    translation_table = {}\n    for i in range(len(string.ascii_lowercase)):\n        translation_table[string.ascii_lowercase[i]] = string.ascii_lowercase[(i+2)%len(string.ascii_lowercase)]\n        translation_table[string.ascii_uppercase[i]] = string.ascii_uppercase[(i+2)%len(string.ascii_uppercase)]\n    \n    # apply translation table to message\n    encoded_message = ''\n    for char in message:\n        if char in translation_table:\n            encoded_message += translation_table[char]\n        else:\n            encoded_message += char\n    return encoded_message\n",
        "num_ids": 190
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a','e','i','o','u']\n    \n    def encode_word(word):\n        encoded_word = word\n        for i in xrange(len(word)):\n            if word[i] in vowels:\n                encoded_word = encoded_word[:i] + word[i+2] + encoded_word[i+1:]\n        return encoded_word\n    \n    return ''.join([encode_word(word) for word in message.split()])",
        "num_ids": 120
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return message.swapcase().translate(encode_dict)\n",
        "num_ids": 18
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def encode_letter(letter):\n        swap = letter.swapcase()\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        if letter in vowels:\n            return chr(ord(letter) + 2)\n        else:\n            return swap\n",
        "num_ids": 71
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    msg = message.lower()\n    for index, letter in enumerate(msg):\n        if letter in vowels:\n            msg = msg[:index] + msg[index + 1].upper() + msg[index + 2:]\n    return msg\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'tEST'\n    >>> decode('THKS KS C MGSSCGG')\n    'THIS IS A MESSAGE'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    msg = message.lower()\n    for index, letter in enumerate(msg):\n        if letter in vowels:\n            msg = msg[:index] + msg[index - 1].upper() + msg[index + 1:]\n    return msg\n",
        "num_ids": 284
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    for val in lst:\n        temp = [int(c) for c in str(val)]\n        for elem in temp:\n            res += elem\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_i = 0\n    max_num = 0\n    for i in lst:\n        if is_prime(i):\n            max_i = i\n            max_num = sum(int(digit) for digit in str(i))\n            break\n    return max_num\n",
        "num_ids": 67
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    ret = 0\n    for el in lst:\n        if isPrime(el):\n            ret += el\n    return ret\n",
        "num_ids": 88
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    \n    lst = list(set(lst))\n    prime_lst = []\n    for i in lst:\n        if is_prime(i):\n            prime_lst.append(i)\n",
        "num_ids": 131
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return sum(map(lambda x: int(math.ceil(math.sqrt(x))), lst))\n    \nif __name__ == \"__main__\":\n    #print(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\n    print(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\n    print(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\n    print(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\n    print(skjkasdkd([0,81,12,3,1,21]))\n    print(skjkasdkd([0,8,1,2,1,7]))\n    print(skjkasdkd([0,0]))\n    print(skjkasdkd([0,0,0]))\n    print(skjkasdkd([0,0,0,0])",
        "num_ids": 329
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 0\n    j = 1\n    lst1 = [0]*10\n    lst2 = []\n    for x in range(len(lst)):\n        lst1[lst[x]] += 1\n        if lst1[lst[x]] == 2:\n            lst2.append(lst[x])\n            lst1[lst[x]] = 0\n    for x in range(len(lst2)):\n        for y in range(len(lst)):\n            if lst[y] == lst2[x]:\n                lst[y] = 0\n    for x in range(10):\n        if lst1[x] > 0:\n            i += x*lst1[x]\n    return i\n",
        "num_ids": 184
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(number):\n        for i in range(2, int(number**0.5+1)):\n            if number % i == 0:\n                return False\n        return True\n    return sum(map(int, [str(i) for i in lst if is_prime(i)]))\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    prime_list = []\n    for i in lst:\n        if i not in prime_list and i!= 0:\n            prime_list.append(i)\n    if len(prime_list)!= 0:\n        return sum([int(x) for x in str(max(prime_list))])\n    else:\n        return 0\n",
        "num_ids": 82
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    maxp = 0\n    for num in lst:\n        maxp = max(maxp,prime(num))\n    return sum([int(i) for i in str(maxp)])\n",
        "num_ids": 47
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    if len(dict) == 1:\n        return True\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.isupper() == True:\n            return False\n        if key.islower() == False:\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for key in dict.keys():\n        if isinstance(key,str) is False:\n            return False\n        elif isinstance(key,str) is True:\n            if key.islower() is True or key.isupper() is True:\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return True\n    for key in dict:\n        if type(key) is not str:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return True\n    elif all(isinstance(x, str) for x in dict.keys()) and all(isinstance(x, str) for x in dict.values()):\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if dict:\n        for key in dict:\n            if type(key)!= str:\n                return False\n    else:\n        return False\n    return True\n    \ndef check_dict_empty(dict):\n    \"\"\"\n    Return True if the given dictionary is empty, otherwise return False.\n    Examples:\n    check_dict_empty({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_empty({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"cantalope\"}) should return True.\n    check_dict_empty(None) should return True.\n    check_dict_empty(1) should return True.\n    check_dict_empty(\"\") should return True.\n    \"\"\"\n    if dict is None:\n        return True\n    elif dict:\n        return False\n    return True",
        "num_ids": 197
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(type(x) == str for x in dict.keys()) and all(type(x) == str for x in dict.values()) and (len(dict) > 0)",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not isinstance(dict[key], str):\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Code here\n    if len(dict) == 0:\n        return True\n    lower_dict = {k.lower():v for k,v in dict.items()}\n    upper_dict = {k.upper():v for k,v in dict.items()}\n    if lower_dict.keys() == upper_dict.keys():\n        return True\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for k,v in dict.items():\n        if type(k) == str:\n            if k.isupper():\n                return False\n            elif k.islower():\n                pass\n            else:\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(type(key) is str for key in dict) and all(type(key) is str for key in dict.values())\n",
        "num_ids": 33
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in range(2,n) if is_prime(i)]\n",
        "num_ids": 22
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_prime(num):\n        if num > 1:\n            if num == 2:\n                return True\n            if num % 2 == 0:\n                return False\n            for i in range(3, int(num**0.5)+1, 2):\n                if num % i == 0:\n                    return False\n            return True\n        else:\n            return False\n",
        "num_ids": 87
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    is_prime = [True] * (n+1)\n    \n    for i in range(2, n+1):\n        if is_prime[i]:\n            for j in range(i*2, n+1, i):\n                is_prime[j] = False\n    \n    return [i for i, is_prime_num in enumerate(is_prime) if is_prime_num]\n",
        "num_ids": 99
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    primes = [2]\n    for i in xrange(3,n+1):\n        is_prime = True\n        for p in primes:\n            if p*p > i:\n                break\n            if i%p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "num_ids": 90
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    primes = []\n    if n <= 0:\n        return []\n    for i in range(2, n):\n        count = 0\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                break\n        if count == 0:\n            primes.append(i)\n    return primes\n",
        "num_ids": 83
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in range(2,n) if all(x % y!= 0 for y in range(2,x))]\n",
        "num_ids": 34
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Make a list of boolean values with the same length as n. Each value represents whether the\n    # corresponding integer in n is a prime number.\n    primes = [True for i in range(n+1)]\n    # Set the 0th and 1st integer to False. (0 and 1 are not prime numbers)\n    primes[0] = False\n    primes[1] = False\n    # Set the indices in the list that correspond to prime numbers.\n    for i in range(2,n+1):\n        # Set to false all multiples of i greater than sqrt(i)\n        if i*i >= n:\n            break\n        for j in range(i*i,n+1,i):\n            primes[j] = False\n    # Create a list of the first n prime numbers\n    primes = [i for i in range(n+1) if primes[i]]\n    return primes\n",
        "num_ids": 214
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return []\n    primes = [2]\n    index = 1\n    # need to skip prime numbers that are greater than sqrt(n)\n    # can start at index 2 since all previous primes are prime\n    while primes[-1] <= int(n**0.5):\n        index += 1\n        for i in range(len(primes)):\n            # use list indexing to remove each prime from list\n            # once a prime is removed, the loop will break\n            # since the list is changed\n            if primes[i]!= 0 and primes[i] % index == 0:\n                primes[i] = 0\n    # list of primes greater than or equal to index\n    return [i for i in primes if i >= index]\n",
        "num_ids": 186
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = []\n    for i in range(n+1):\n        if i > 1:\n            if all(i % x!= 0 for x in range(2, i)):\n                numbers.append(i)\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(a) * int(b)\n",
        "num_ids": 13
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if abs(a) < abs(b):\n        return 0\n    multiplier = 1\n    while abs(b) > 0:\n        if abs(b) & 1:\n            multiplier = (multiplier * a) % M\n        a = (a * a) % M\n        b = b >> 1\n    return multiplier\n",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = abs(a)\n    b = abs(b)\n    if (a < 10 or b < 10):\n        return a * b\n    if (a < b):\n        a, b = b, a\n    product = 0\n    for i in range(0, b):\n        product = product + a\n    return product\n",
        "num_ids": 79
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 1\n",
        "num_ids": 6
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(map(int, str(a * b)))\n",
        "num_ids": 16
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sign = 1 if a > 0 else -1\n    a = abs(a)\n    b = abs(b)\n    c = 0\n    for i in range(0, 10):\n        for j in range(0, 10):\n            if j < b:\n                c += (a * i) // 10 * j\n            else:\n                c += (a * i) // 10\n    return sign * c\n",
        "num_ids": 97
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    digits = []\n    for i in range(0, len(str(a))):\n        digits.append(a // pow(10, i))\n    return sum([digits[i] * b for i in range(0, len(digits))])\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # convert both input into string\n    a = str(a)\n    b = str(b)\n    # covert the string to integer\n    a = int(a)\n    b = int(b)\n    # mulitply the digits\n    res = 0\n    while (b > 0):\n        res += (a % 10) * (b % 10)\n        a = a // 10\n        b = b // 10\n    return res\n",
        "num_ids": 103
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n",
        "num_ids": 21
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    counter = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isupper():\n                counter += 1\n    return counter\n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 2\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].islower():\n                counter += 1\n    return counter\n    \ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 1\n    count_vowels('abcdefg') returns 0\n    count_vowels('dBBE') returns 2\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].lower() in 'aeiou':\n                counter += 1\n    return counter\n    \ndef count_consonants(s):\n    \"\"\"\n    Given a string s, count the number of consonants in even indices.\n    \n    For example:\n    count_consonants('aBCdEf') returns 0\n    count_consonants('abcdefg') returns 1\n    count_consonants('dBBE') returns 2\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].lower() not in 'aeiou':\n                counter += 1\n    return counter\n    \ndef rotate_left(s, k):\n    \"\"\"\n    Given a string s and a non-negative integer k, rotate s to the left by k positions.\n    \n    For example:\n    rotate_left('abcde', 2) returns 'cdeab'\n    rotate_left('abcde', 6) returns 'abcde'\n    rotate_left('abcde', 7) returns 'deabc'\n    rotate_left('abcde', 3) returns 'defg'\n    rotate_left('efg', -10) returns 'efg'\n    rotate_left('a', 4) returns 'a'\n    \"\"\"\n    result = \"\"\n    for i in range(k, len(s)):\n        result += s[i]\n    for i in range(0, k):\n        result += s[i]\n    return result\n    \ndef rotate_right(s, k):\n    \"\"\"\n    Given a string s and a non-negative integer k, rotate s to the right by k positions.\n    \n    For example:\n    rotate_right('abcde', 2) returns 'eabcd'\n    rotate_right('abcde', 6) returns 'bcdea'\n    rotate_right('abcde', 7) returns 'defg'\n    rotate_right('abcde', 3) returns 'defg'\n    rotate_right('efg', -10) returns 'efg'\n    rotate_right('a', 4) returns 'a'\n    \"\"\"\n    result = \"\"\n    for i in range(0, k):\n        result += s[i]\n    for i in range(k, len(s)):\n        result += s[i]\n    return result\n    \ndef reverse_string(s):\n    \"\"\"\n    Given a string s, reverse it.\n    \n    For example:\n    reverse_string('abcde') returns 'edcba'\n    reverse_string('abc') returns 'cba'\n    reverse_string('a') returns 'a'\n    reverse_string('') returns ''\n    reverse_string('G9A9') returns '911G'\n    reverse_string('A') returns 'A'\n    reverse_string('AEIOU') returns 'UOWIE'\n    reverse_string('GERUNDFE') returns 'RFEGERUND'\n    reverse_string('LOLA') returns 'OLAL'\n    reverse_string('I') returns 'I'\n    reverse_string('AB12CD34E') returns ",
        "num_ids": 1025
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # Your code here\n    return sum([s[i].isupper() for i in range(0, len(s), 2)])\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return sum([1 if ch.isupper() else 0 for ch in s[::2]])\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Count the vowels using a for loop\n    # count = 0\n    # for i in range(len(s)):\n    #     if i % 2 == 0 and s[i].isupper():\n    #         count += 1\n    # return count\n    return sum([1 for i in range(len(s)) if i % 2 == 0 and s[i].isupper()])\n",
        "num_ids": 91
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    upper_vowels = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            upper_vowels += 1\n    return upper_vowels\n    \n    \n    \n    ",
        "num_ids": 59
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count",
        "num_ids": 42
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for i in range(len(s) - 1) if s[i].isupper() and s[i + 1].isupper())\n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # turn the input string into a float\n    value = float(value)\n",
        "num_ids": 19
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    value = int(float(value))\n    return (value + 1) if abs(value - int(value)) > 0 else (value)\n",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if value.isdigit():\n        return int(value)\n    value = float(value)\n    integer = int(value)\n    diff = value - integer\n    if abs(diff) < abs(float(integer + 1) - value):\n        return integer\n    else:\n        return integer + 1\n",
        "num_ids": 73
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    int_value = int(float(value))\n    if abs(int_value - value) < abs(int_value + value):\n        return int_value - 1\n    else:\n        return int_value\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO\n    return None\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # your code here\n    return int(round(float(value)))\n",
        "num_ids": 18
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    value = float(value)\n    if value == round(value):\n        return int(value)\n    if value < 0:\n        return int(round(value - 0.5))\n    else:\n        return int(round(value + 0.5))",
        "num_ids": 61
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    levels = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n = n + 1\n        else:\n            n = n / 2\n        levels.append(n)\n    return levels\n",
        "num_ids": 54
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = [n]\n    while len(res) < n:\n        if n % 2 == 0:\n            res.append(n // 2)\n        else:\n            res.append((n // 2) + 1)\n        n = n + 1\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    stones = n\n    while stones > 0:\n        result.append(stones)\n        stones = get_next_level(stones)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        a = [n, n + 2]\n    else:\n        a = [n, n + 1]\n    for i in range(2, n):\n        a.append(a[-2] + i)\n    return a\n",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = n + 1\n    result = []\n    for i in range(n):\n        result.append(2*i + 1)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(n):\n        result.append(i + 1)\n    return result",
        "num_ids": 28
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1] - (pile[-1] % 2))\n    return pile\n",
        "num_ids": 48
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pile = [n]\n    while len(pile) < 4:\n        if n % 2:\n            pile.append((n + 1) / 2)\n        else:\n            pile.append(n / 2)\n        n = pile[-1]\n    return pile[1:]\n",
        "num_ids": 72
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = [1]\n    level = res[0]\n    while level < n:\n        level = level + 2 * (n - level) // 2\n        res.append(level)\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    level = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n -= 1\n        else:\n            n /= 2\n        level.append(n)\n    return level\n",
        "num_ids": 51
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if s == None or len(s) == 0:\n        return None\n    l = s.split(\",\")\n    for i in range(len(l)):\n        l[i] = l[i].strip()\n    return l\n    # YOUR CODE HERE\n",
        "num_ids": 64
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(',')\n    \ndef string_letters(s):\n    \"\"\"\n    You will be given a string that represents a word. Your task is to return a string\n    that is a single letter longer than the original, with the new letter in the\n    middle of the word.\n    \n    For example:\n    string_letters(\"cat\") == \"ct\"\n    string_letters(\"b\") == \"b\"\n    string_letters(\"w\") == \"w\"\n    \"\"\"\n    return s[:1] + s[2:]\n    \ndef string_zeros(s):\n    \"\"\"\n    You will be given a string that represents a word. Your task is to return a string\n    that is a single letter longer than the original, with the new letter in the\n    middle of the word, with zeros on the left and right of the new letter.\n    \n    For example:\n    string_zeros(\"cat\") == \"c001\"\n    string_zeros(\"b\") == \"000b\"\n    string_zeros(\"w\") == \"00w\"\n    \"\"\"\n    return ''.join(['0' if len(s) % 2 == 0 else '', s, '0' if len(s) % 2 == 0 else ''])\n",
        "num_ids": 290
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x%2==0 and y%2==0:\n        if x>y:\n            return x\n        elif y>x:\n            return y\n        else:\n            return -1\n    elif x%2==0:\n        if x>y:\n            return x\n        else:\n            return y\n    elif y%2==0:\n        if y>x:\n            return y\n        else:\n            return x\n    else:\n        return -1\n    pass\n",
        "num_ids": 118
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x > y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x == y:\n        return -1\n    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    while x < y:\n        x += 2\n    return x - 2\n",
        "num_ids": 53
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num = 0\n    while num < x or num > y:\n        num = int((x + y)/2)\n        if num % 2 == 0:\n            return num\n        elif num > y:\n            y = num - 1\n        else:\n            x = num + 1\n    return -1\n",
        "num_ids": 73
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #your code here\n    if y == x:\n        return x\n    elif y - x == 1 or y % 2!= 0:\n        return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n    \n",
        "num_ids": 66
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x < y:\n        y = y+1\n    lst = range(x,y+1)\n    for i in lst:\n        if i%2 == 0:\n            return i\n    return -1\n",
        "num_ids": 54
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_num = x\n    if x > y:\n        max_num = y\n    else:\n        max_num = x\n    while min_num <= max_num:\n        if min_num % 2 == 0 and min_num <= y:\n            return min_num\n        elif min_num % 2!= 0:\n            min_num += 1\n        else:\n            return -1\n",
        "num_ids": 96
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x == y or x%2 == 0 or y%2 == 0:\n        return -1\n    if x%2 == 0 and y%2 == 0:\n        return -1\n    else:\n        if x < y:\n            return choose_num(x, y-1)\n        else:\n            return choose_num(y, x-1)\n",
        "num_ids": 86
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n",
        "num_ids": 34
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if m < n:\n        return -1\n    binary_num = bin(n)[2:].zfill(m-n+1)\n    rounded = int(binary_num, 2)\n    return str(bin(rounded)[2:]).rjust(m, \"0\")\n",
        "num_ids": 67
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if m < n:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    bin_avg = bin(avg)\n    return bin_avg[2:]\n",
        "num_ids": 51
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b1\"\n    ans = bin( (m + n - 1)//2 )[2:]\n    if len(ans) < n:\n        ans = \"0\"*(n - len(ans)) + ans\n    return ans\n",
        "num_ids": 78
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(n, m + 1):\n        result.append(bin(i)[2:])\n    return \"0b\" + \"\".join(result)\n",
        "num_ids": 46
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return bin(round(sum(range(n, m+1))/float(m - n + 1)))\n",
        "num_ids": 27
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import math\n    if n > m:\n        return -1\n    elif n == m:\n        return \"0b\" + bin(m)[2:]\n    else:\n        avg = sum([math.log(i, 2) for i in range(n, m + 1)]) / (m - n + 1)\n        return \"0b\" + bin(int(avg + 0.5))[2:]\n",
        "num_ids": 100
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if m < n:\n        return -1\n    rounded = int(round((n+m)/2))\n    binary = bin(rounded)\n    return binary[2:]\n",
        "num_ids": 42
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(sorted(set([int(x) for x in str(x) if int(x) % 2 == 1])))\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = set()\n    for x in x:\n        while x > 0:\n            d = x % 10\n            if d in s:\n                return []\n            else:\n                s.add(d)\n                x = x // 10\n    return list(s)\n",
        "num_ids": 65
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(str(i) for i in x if len(str(i)) % 2 == 0))\n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return [i for i in x if i % 2!= 0]\n",
        "num_ids": 27
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(list(set([int(str(x)[i]) for i in range(len(str(x))) if x % 2!= 0])))\n",
        "num_ids": 38
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(x)\n",
        "num_ids": 8
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted([elem for elem in x if elem % 2 == 0])\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in x:\n        if i%2 == 0:\n            continue\n        result.append(i)\n    return sorted(result)\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for item in x:\n        if item % 2 == 0:\n            continue\n        else:\n            result.append(item)\n    return sorted(result)\n",
        "num_ids": 44
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr.reverse()\n    result = []\n    for item in arr:\n        if item in range(1, 10):\n            result.append(str(item))\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_arr = sorted(arr)\n    sorted_arr.reverse()\n    final_arr = []\n",
        "num_ids": 28
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr:\n        return []\n    else:\n        sort_arr = sorted(arr)\n        reverse_arr = sort_arr[::-1]\n        \n        new_list = []\n        for item in reverse_arr:\n            if item in range(1, 10):\n                new_list.append(digit_name[item])\n            else:\n                pass\n        return new_list",
        "num_ids": 94
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    new_arr = []\n    for number in arr:\n        if number in range(1, 10):\n            new_arr.append(numbers[number])\n    new_arr.reverse()\n    return new_arr\n",
        "num_ids": 61
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(arr)\n    rev_arr = sorted_arr[::-1]\n    sorted_arr = []\n    for i in range(len(rev_arr)):\n        if 1<=rev_arr[i]<=9:\n            sorted_arr.append(names[rev_arr[i]-1])\n    return sorted_arr\n",
        "num_ids": 122
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    arr.reverse()\n    arr = [str(n) for n in arr]\n    new_arr = [n.replace('0', 'Zero').replace('1', 'One').replace('2', 'Two').replace('3', 'Three').replace('4', 'Four').replace('5', 'Five').replace('6', 'Six').replace('7', 'Seven').replace('8', 'Eight').replace('9', 'Nine') for n in arr]\n    return new_arr\n",
        "num_ids": 127
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return []\n    if min(arr) < 1 or max(arr) > 9:\n        return []\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if array is empty return empty array\n    if len(arr) == 0:\n        return []\n    # if array contains 1 or 2 or 3 numbers return them in sorted order\n    elif len(arr) == 1 or len(arr) == 2 or len(arr) == 3:\n        return arr\n    # if array contains 4 or more than 4 numbers return them in sorted order\n    elif len(arr) >= 4:\n        return sorted(arr)\n    # else for each number, get the digit\n    digit = str(arr[0])\n    # if number is 4 or 5 then return the number in sorted order\n    if len(arr) == 4 or len(arr) == 5:\n        return sorted(arr)\n    # else for each number, get the digit\n    if len(arr) == 7 or len(arr) == 8:\n        return sorted(arr)\n    # else for each number, get the digit\n    if len(arr) == 9 or len(arr) == 10:\n        return sorted(arr)\n    # if number is not 4 or 5 or 7 or 8 or 9 or 10, return the number in sorted order\n    else:\n        return sorted(arr)\n",
        "num_ids": 273
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr: return []\n    # Sort the array\n    arr.sort()\n    # Reverse the array\n    arr.reverse()\n    # Then do a greedy on the array\n    return [digit_name[num] for num in arr]\n    \nif __name__ == \"__main__\":\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    assert by_length([]) == []\n    assert by_length([1, -1, 55]) == [\"One\"]\n    assert by_length([10, -3, 5, 8, 2, 1, -1]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"",
        "num_ids": 194
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Base Case\n    if n == 1:\n        return [1]\n",
        "num_ids": 19
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # generate a list of size n with values 1 to n\n    lst = [x for x in range(1, n + 1)]\n    # for each item in lst, if the item is even, then the value of the item is the factorial of the item\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            lst[i] = math.factorial(i)\n    # sum of the values of lst from 1 to n\n    return sum(lst)\n",
        "num_ids": 123
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def _f(n):\n        if n == 0:\n            return []\n        if n == 1:\n            return [1]\n        return _f(n - 1) + [n * _f(n - 1)[-1]]\n    return _f(n)\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = [1] * n\n    for i in range(2, n):\n        if i % 2 == 0:\n            lst[i] = lst[i-1] * i\n        else:\n            lst[i] = sum(range(1, i+1))\n    return lst\n",
        "num_ids": 75
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(sum(range(1, i+1)))\n    return l\n",
        "num_ids": 63
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n",
        "num_ids": 34
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # fill here\n    f = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            f += [f[i-1]*i]\n        else:\n            f += [sum(range(1, i + 1))]\n    return f\n",
        "num_ids": 71
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1: return 0, 0\n",
        "num_ids": 12
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = [0, 0]\n",
        "num_ids": 10
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def helper(n):\n        \"\"\"\n        Return the count of even and odd integer palindromes that fall within the range(1, n).\n        \"\"\"\n        if n == 1:\n            return 1, 1\n",
        "num_ids": 51
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    for i in xrange(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 67
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even = odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 63
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def helper(l, r, i):\n        if i == n:\n            return (l, r)\n",
        "num_ids": 27
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(((i + 1) // 2) * (i % 2) for i in range(1, n + 1))\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for x in arr if int(''.join(map(str, arr))) > 0])\n",
        "num_ids": 26
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([num for num in arr if sum([int(x) for x in str(abs(num))]) > 0])\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        num_string = str(num)\n        num_list = [int(digit) for digit in num_string]\n        if sum(num_list) > 0:\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([i for i in arr if sum(digit for digit in str(abs(i))) > 0])\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(map(lambda x: (x > 0) and len(str(x)) or 0, arr))\n",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(x > 0 for x in arr)\n",
        "num_ids": 14
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([i for i in arr if sum([int(c) for c in str(i)]) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if len(str(abs(num))) > 1:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for num in arr if sum([int(digit) for digit in str(num)]) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([x > 0 for x in arr])\n",
        "num_ids": 14
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    for i in xrange(1, len(arr)):\n        if arr[i-1] <= arr[i]:\n            return False\n    return True\n    \ndef find_all_non_decreasing_arrays(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. You have to determine if the\n    array can be sorted in non-decreasing order by performing the following\n    operation on the array:\n        Choose an index 'k' and swap the number at index 'k' with the element at\n        index 0. This will make the array non-decreasing.\n    \n    If it is possible to sort the given array by performing the above operation\n    then return True else return False.\n",
        "num_ids": 205
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        temp = arr[0]\n        for j in range(len(arr)):\n            if arr[j] < temp:\n                temp = arr[j]\n                arr[j] = arr[j - 1]\n        arr[j - 1] = temp\n        arr.remove(arr[len(arr) - 1])\n",
        "num_ids": 107
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        for i in xrange(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n        \n    \n    \ndef bsearch(arr, value, low, high):\n    \"\"\"Binary search algorithm.\n    \n    Arguments:\n    @arr: The array to search.\n    @value: Value to be searched.\n    @low: Lower bound for the search.\n    @high: Upper bound for the search.\n",
        "num_ids": 146
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) <= 1:\n        return True\n    arr = [x for x in arr if x>0]\n    arr = sorted(arr)\n    if arr!= arr[::-1]:\n        return False\n    \n    for i in xrange(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            continue\n        temp = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = temp\n        if arr == arr[::-1]:\n            return True\n        else:\n            arr[i] = arr[i+1]\n            arr[i+1] = temp\n    return False\n",
        "num_ids": 164
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    i=0\n    j=0\n    while i<len(arr):\n        if j<len(arr):\n            if arr[i]>arr[j]:\n                i+=1\n                j+=1\n            elif arr[i]<arr[j]:\n                if j==0:\n                    return False\n                else:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    i+=1\n                    j+=1\n        else:\n            j+=1\n    return True\n",
        "num_ids": 135
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr)<=1:\n        return True\n    else:\n        arr = arr[1:]+[arr[0]]\n        if arr == sorted(arr):\n            return True\n        else:\n            return False\n",
        "num_ids": 55
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(arr)):\n        if i == 0:\n            arr[i] = arr[i] ^ arr[i+1]\n        else:\n            arr[i] = arr[i] ^ arr[i-1]\n        \n    for i in range(len(arr)):\n        if arr[i] == i+1:\n            return True\n    return False\n",
        "num_ids": 94
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    if len(arr)==2:\n        return arr[1]<arr[0]\n    elif len(arr)>2:\n        m=len(arr)\n        for i in range(1,m):\n            if not move_one_ball(arr[i:]):\n                return False\n        return True\n",
        "num_ids": 104
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr)==0:\n        return True\n    while arr!=sorted(arr):\n        if right_shift(arr)==True:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst1_size = len(lst1)\n    lst2_size = len(lst2)\n    if lst1_size!= lst2_size:\n        return \"NO\"\n    if lst1_size == 1:\n        return \"NO\"\n    # This part has the same logic as in the last problem\n    for i in range(lst1_size):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    # This part has the same logic as in the last problem\n    for i in range(lst1_size):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 193
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst2 = lst2[:]\n    for i in lst1:\n        try:\n            lst2.remove(i)\n        except ValueError:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 53
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst1 = lst1[:]\n    for i in lst2:\n        if i in lst1:\n            lst1.remove(i)\n        else:\n            return \"NO\"\n    return \"YES\"\n    # Note that the above is an example of another possible exchange,\n    # but that is not the correct exchange.\n",
        "num_ids": 82
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # YOUR CODE HERE\n    for item in lst1:\n        if item % 2!= 0:\n            return \"NO\"\n    for item in lst2:\n        if item % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 78
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if lst1[0] % 2!= 0:\n        return 'NO'\n",
        "num_ids": 22
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"YES\"\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return exchange_helper(lst1, lst2, 0)\n",
        "num_ids": 19
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    newlst1 = []\n    newlst2 = []\n    for i in lst1:\n        if i % 2 == 0:\n            newlst1.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            newlst2.append(i)\n    if len(newlst1) == len(newlst2):\n        for i in newlst1:\n            if i not in newlst2:\n                return \"NO\"\n    else:\n        return \"NO\"\n    return \"YES\"\n    # return \"NO\"\n",
        "num_ids": 143
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = {}\n    for char in test:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n",
        "num_ids": 40
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    hist = {}\n    for c in test:\n        if c not in hist:\n            hist[c] = 1\n        else:\n            hist[c] += 1\n    return hist\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    histo = {}\n    for l in test:\n        if l in histo:\n            histo[l] += 1\n        else:\n            histo[l] = 1\n    return histo\n    \ndef average(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return the average of\n    all the letter occurances.\"\"\"\n    return sum(histogram(test).values())/len(histogram(test).values())\n",
        "num_ids": 106
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # add code here\n    dict1 = {}\n    for i in test:\n        dict1[i] = test.count(i)\n    return dict1\n",
        "num_ids": 39
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    hist = {}\n    for i in test.split():\n        hist[i] = hist.get(i,0) + 1\n    return hist\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return {k:v for k,v in Counter(test).items() if v>1}\n",
        "num_ids": 24
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    histo = {}\n    for i in test:\n        histo[i] = histo.get(i,0) + 1\n    return histo\n",
        "num_ids": 38
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not test:\n        return {}\n",
        "num_ids": 11
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s_list = list(s)\n    c_list = list(c)\n    for i in s_list:\n        if i in c_list:\n            s_list.remove(i)\n            c_list.remove(i)\n    if s_list == s_list[::-1]:\n        return (s_list[::-1],True)\n    else:\n        return (s_list[::-1],False)\n",
        "num_ids": 106
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in c:\n        if i in s:\n            s = s.replace(i,'',1)\n    return (s,s==s[::-1])",
        "num_ids": 41
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import string\n    s=s.lower()\n    c=c.lower()\n    s=s.replace(\" \",\"\")\n    res=\"\"\n    for i in s:\n        if i in c:\n            res=res+i\n            s=s.replace(i,\"\",1)\n    return(res,res==res[::-1])\n",
        "num_ids": 84
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"\"\"\n    #using brute force\n    reverse_s=s[::-1]\n    if reverse_s==s:\n        return (s,True)\n    else:\n        return (reverse_s,False)\n    \"\"\"\n    \"\"\"\n    #using list comprehension\n    reverse_s=s[::-1]\n    for i in c:\n        if i in reverse_s:\n            reverse_s=reverse_s.replace(i,'',1)\n    if reverse_s==s:\n        return (s,True)\n    else:\n        return (reverse_s,False)\n    \"\"\"\n    \"\"\"\n    #using slicing\n    reverse_s=s[::-1]\n    for i in c:\n        if i in reverse_s:\n            reverse_s=reverse_s.replace(i,'',1)\n    if reverse_s==s:\n        return (s,True)\n    else:\n        return (reverse_s,False)\n    \"\"\"\n    \"\"\"\n    #without replacing\n    reverse_s=s[::-1]\n    for i in c:\n        if i in reverse_s:\n            reverse_s=reverse_s.replace(i,'',1)\n    if reverse_s==s:\n        return (s,True)\n    else:\n        return (reverse_s,False)\n    \"\"\"\n    #without using loops\n    \"\"\"\n    s_new=[]\n    for i in s:\n        if i not in c:\n            s_new.append(i)\n    s_new.reverse()\n    s_new=''.join(s_new)\n    if s_new==s:\n        return (s,True)\n    else:\n        return (s_new,False)\n    \"\"\"\n    \"\"\"\n    #using list comprehension\n    s_new=[]\n    for i in s:\n        if i not in c:\n            s_new.append(i)\n    s_new=''.join(s_new[::-1])\n    if s_new==s:\n        return (s,True)\n    else:\n        return (s_new,False)\n    \"\"\"\n    #without using loops\n    s_new=[]\n    for i in s:\n        if i not in c:\n            s_new.append(i)\n    s_new=''.join(s_new[::-1])\n    if s_new==s:\n        return (s,True)\n    else:\n        return (s_new,False)\n",
        "num_ids": 592
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    for i in s:\n        if i in c:\n            s=s.replace(i,\"\")\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)",
        "num_ids": 58
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_s = s\n    for i in s:\n        if i in c:\n            new_s = new_s.replace(i,'',1)\n    return (new_s,new_s==new_s[::-1])\n    #return new_s,new_s==new_s[::-1]\n",
        "num_ids": 79
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s_list = list(s)\n    check = False\n    for i in range(0,len(c)):\n        if c[i] in s_list:\n            s_list.remove(c[i])\n    if s_list == list(s):\n        check = True\n    return s_list, check\n",
        "num_ids": 78
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s_list = list(s)\n    for letter in s_list:\n        if letter in c:\n            s_list.remove(letter)\n    if s_list == s_list[::-1]:\n        return ''.join(s_list), True\n    else:\n        return ''.join(s_list), False\n",
        "num_ids": 80
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    temp=[]\n    for char in s:\n        if char not in c:\n            temp.append(char)\n    rev_temp=temp[::-1]\n    rev_string=''.join(rev_temp)\n    if rev_string==s:\n        return (rev_string,True)\n    else:\n        return (rev_string,False)\nprint(reverse_delete('acdef','b')",
        "num_ids": 98
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char.isdigit() and int(char) % 2!= 0:\n                count += 1\n        result.append(count)\n    return [\"the number of odd elements \"+ str(n) +\"n the str4ng \"+ str(m) +\" of the \"+ str(lst)+\" input.\" for n, m in zip(result, lst)]\n",
        "num_ids": 110
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def count(string):\n        total = 0\n        for i in string:\n            if int(i)%2!= 0:\n                total+=1\n        return total\n    return [\"the number of odd elements \"+str(count(i))+\" \"+str(i)+\" of the \"+str(len(lst))+\" str4ng \"+str(lst)+\".\" for i in lst]\n",
        "num_ids": 104
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd_lst = []\n    for string in lst:\n        # find all the odd numbers in the string\n        odd_count = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                odd_count += 1\n        odd_lst.append(\"the number of odd elements %sn the str%sng %s of the %snput.\" % (odd_count, string, odd_count, string))\n    return odd_lst\n",
        "num_ids": 111
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    odd_lst = []\n    for string in lst:\n        counter = 0\n        for digit in string:\n            if int(digit) % 2!= 0:\n                counter += 1\n        odd_lst.append(\"the number of odd elements \" + str(counter) + \"n the str\" + string + \" of the \" + string + \"n input.\")\n    return odd_lst\n",
        "num_ids": 94
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    odds = []\n    for word in lst:\n        count = 0\n        for c in word:\n            if int(c) % 2 == 1:\n                count += 1\n        odds.append(\"the number of odd elements \" + str(count) + \" in the str4ng \" + word + \" of the \" + str(lst.index(word)) + \"th input.\")\n    return odds\n",
        "num_ids": 96
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_odd(num):\n        \"\"\"\n        Returns true if num is odd.\n        \"\"\"\n        return num%2==1\n",
        "num_ids": 33
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odds = 0\n    for l in lst:\n        odds = odds + sum(map(lambda x: int(x) % 2, l))\n    return [\"the number of odd elements %dn the str%dng %d of the %dnput.\" % (odds, i+1, lst[i], i+1) for i in range(len(lst))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1023
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    odd_digit_count = [sum([1 for char in str(num) if char in '13579']) for num in lst]\n    return [\"the number of odd elements %s n the str%sng %s of the %sinput.\"%(str(count),str(i+1),str(count),str(i+1)) for i,count in enumerate(odd_digit_count)]\n",
        "num_ids": 95
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # 1 -\n    return [lst.count(i) for i in lst]\n    # 2 -\n    # return [\"the number of odd elements %d the str4ng %d of the 4nput.\" % (lst.count(i), i) for i in lst]\n    # 3 -\n    # return [\"the number of odd elements {} the str4ng {} of the {}nput.\".format(lst.count(i), i, i) for i in lst]\n    # 4 -\n    # return [\"the number of odd elements {0} the str4ng {0} of the {0}nput.\".format(i, i) for i in lst]\n    # 5 -\n    # return [\"the number of odd elements {} the str4ng {} of the {}nput.\".format(lst.count(i), i, i) for i in lst]\n",
        "num_ids": 209
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ['the number of odd elements'+ str(sum(int(i) % 2 for i in s)) + 'n the str' + str(s) + 'of the'+ str(s) + 'nput.' for s in lst]\n",
        "num_ids": 59
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(nums)\n    min_sum = sum(nums)\n    curr_sum = 0\n",
        "num_ids": 29
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    min_sum = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum >= 0:\n            current_sum = 0\n    return min_sum\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # A new array to store the sums of subarrays, with the first element being the sum of the whole array.\n    sums = [0]\n    total = 0\n    for num in nums:\n        total += num\n        sums.append(total)\n",
        "num_ids": 63
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    left = 0\n    right = len(nums)-1\n    min_sum = sum(nums)\n    while left <= right:\n        mid = (left + right) / 2\n        curr_sum = 0\n        for i in xrange(mid+1):\n            curr_sum += nums[i]\n        if curr_sum == min_sum:\n            return curr_sum\n        elif curr_sum < min_sum:\n            left = mid + 1\n        elif curr_sum > min_sum:\n            right = mid - 1\n    return min_sum\n",
        "num_ids": 142
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    minSub = nums[0]\n    while i < len(nums):\n        if minSub > 0:\n            minSub += nums[i]\n        else:\n            minSub = nums[i]\n        i += 1\n    return minSub\n",
        "num_ids": 68
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(nums)\n    min_sum = nums[0]\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += nums[i]\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n",
        "num_ids": 90
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_sub = 0\n    min_so_far = 0\n    for num in nums:\n        min_so_far += num\n        if min_so_far < min_sub:\n            min_sub = min_so_far\n        if min_so_far < 0:\n            min_so_far = 0\n    return min_sub\n",
        "num_ids": 84
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not nums:\n        return 0\n    currSum = 0\n    minSum = float(\"inf\")\n    for num in nums:\n        currSum += num\n        minSum = min(currSum, minSum)\n        currSum = max(0, currSum)\n    return minSum\n",
        "num_ids": 76
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = sys.maxint\n    for i in xrange(len(nums)):\n        for j in xrange(i, len(nums)):\n            res = min(res, sum(nums[i:j+1]))\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    min_sum = None\n    left = 0\n    right = 0\n    total = 0\n    n = len(nums)\n",
        "num_ids": 32
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import math\n    row_len = len(grid)\n    col_len = len(grid[0])\n    well_count = 0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j] == 1:\n                well_count += 1\n",
        "num_ids": 75
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    # \u4fdd\u8bc1\u7b2c\u4e00\u5217\u80fd\u591f\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\n    # \u5148\u5c06\u7b2c\u4e00\u5217\u76840\u90fd\u79fb\u51fa\u53bb\n    for i in range(m):\n        if grid[0][i] == 1:\n            grid[0][i] = -1\n",
        "num_ids": 105
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    rows = len(grid)\n    columns = len(grid[0])\n    dp = [[0 for _ in range(columns+1)] for _ in range(rows+1)]\n    for i in range(rows-1, -1, -1):\n        for j in range(columns-1, -1, -1):\n            dp[i][j] = dp[i+1][j] + dp[i][j+1] - dp[i+1][j+1] + grid[i][j]\n    result = 0\n    for i in range(rows):\n        for j in range(columns):\n            if dp[i][j] <= capacity:\n                result += 1\n            else:\n                break\n    return result\n",
        "num_ids": 180
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # return int(math.ceil(max(map(lambda x: len(x), grid))))\n    if not grid: return 0\n",
        "num_ids": 33
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import numpy as np\n    result = 0\n    m, n = grid.shape\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                piles = int(capacity)\n                while piles > 0:\n                    if j == n - 1:\n                        j = 0\n                    else:\n                        j += 1\n                    if grid[i][j] == 0:\n                        piles -= 1\n                result += 1\n    return result\n",
        "num_ids": 118
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(grid) == 0:\n        return 0\n    wells = [int(well) for well in grid[0]]\n    max_well = max(wells)\n    \n    # all buckets with capacity of the max_well\n    buckets = [[bucket for bucket in range(max_well) if well == bucket] for well in wells]\n    \n    result = 0\n    for i in range(1, len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j]!= 0:\n                for bucket in buckets[j]:\n                    if bucket < grid[i][j]:\n                        buckets[j].remove(bucket)\n                        buckets[j].append(bucket - 1)\n    \n    for bucket in buckets:\n        if len(bucket) < max_well:\n            result += max_well - len(bucket)\n    return result\n",
        "num_ids": 217
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num_wells = len(grid)\n    num_rows = len(grid[0])\n    num_buckets = num_rows * capacity\n    \n    fill_buckets = [0] * num_wells\n",
        "num_ids": 53
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    from collections import deque\n    from itertools import chain\n    # Calculate the volume of water in each bucket\n    vol = [[0 for _ in range(cols)] for _ in range(rows)]\n    for r, row in enumerate(grid):\n        for c, val in enumerate(row):\n            if val:\n                vol[r][c] = val * bucket_capacity\n    # Keep track of the minimal volume of water that can be extracted from a bucket\n    queue = deque(list(chain.from_iterable(grid)))\n    queue.append(None)\n    memo = {0: 0}\n    while queue:\n        cur = queue.popleft()\n        if cur is None:\n            # We exhausted all buckets in a row\n            queue.append(None)\n            continue\n        # See if we can go to the right\n        if cur + 1 < cols:\n            queue.append(cur + 1)\n            memo[cur + 1] = min(memo.get(cur + 1, float('inf')), memo.get(cur, float('inf')) + vol[cur][cur + 1])\n        # See if we can go to the left\n        if cur - 1 >= 0:\n            queue.append(cur - 1)\n            memo[cur - 1] = min(memo.get(cur - 1, float('inf')), memo.get(cur, float('inf')) + vol[cur][cur - 1])\n    return sum(memo.values())\n",
        "num_ids": 369
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert the grid into a list of rows\n    rows = []\n    for row in grid:\n        rows.append(list(row))\n    \n    # get the number of wells\n    wells = 0\n    for row in rows:\n        wells += row.count(1)\n    \n    # we have the number of wells, now calculate the capacity\n    # we will use BFS\n    # we need a list of places to visit\n    # we can use a queue\n    # place - row, column\n    # mark - visited\n    # grid - rows, list of lists\n    #\n    # we need to empty all wells\n    #\n    # grid[0][0] - first row, first column\n    # we need to see if we can empty a well or not\n    # if we reach the last row, last column, return 0\n    # if we reach a zero, we have visited, we should mark it as visited\n    # we need to empty it\n    #\n    # start a queue\n    # queue - place, visited\n    # visit - place, bucket_capacity\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity\n    #\n    # place - row, column\n    # mark - visited\n    # bucket_capacity - 1\n    #\n    # put in the first place\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # visit - place, bucket_capacity\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - 1\n    #\n    # queue - place, visited\n    # visit - place, bucket_capacity - ",
        "num_ids": 1025
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    count = 0\n    \n    def dfs(i, j):\n        nonlocal count\n        if i < 0 or i >= n or j < 0 or j >= m:\n            return False\n        if visited[i][j]:\n            return False\n        if grid[i][j] == 0:\n            return True\n        visited[i][j] = True\n        # fill\n        dfs(i + 1, j)\n        dfs(i, j + 1)\n        dfs(i - 1, j)\n        dfs(i, j - 1)\n        # empty\n        count += 1\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]!= 0:\n                if dfs(i, j) == False:\n                    return -1\n    return count\n",
        "num_ids": 237
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), -x))\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # find max length of the array\n    max_length = len(bin(max(arr))) - 2\n    # create a tuple with length of max_length, each element as an array\n    arr_tuple = tuple([0] * max_length)\n    # fill the array with each element in the tuple\n    for n in arr:\n        arr_tuple[len(bin(n)) - 3] = n\n    return list(arr_tuple)\n",
        "num_ids": 107
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = lambda n: len(bin(n)[2:]) - bin(n).count('1')\n    return sorted(arr, key=count)\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr.sort(key = lambda x: (bin(x).count('1'), x))\n    return arr",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr, key = lambda x: bin(x).count('1'), reverse = False)\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [arr[i] for i in range(len(arr)) if bin(arr[i]).count(\"1\") == len(bin(arr[i]))]",
        "num_ids": 39
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for (a, b) in sorted(zip(map(int, bin(len(arr))[2:]), arr))]",
        "num_ids": 33
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    zero = ['0' * i for i in range(len(arr) + 1)]\n    one = ['1' * i for i in range(len(arr) + 1)]\n    return [i if j == '1' else j for i in sorted(zero + arr + one) for j in i]",
        "num_ids": 71
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not s:\n        return []\n    else:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        res = []\n        for i in range(len(s)):\n            if i+n > len(s) or s[i] in vowels:\n                j = i+1\n                while j < len(s) and s[j] not in vowels:\n                    j += 1\n                if j-i-1 == n:\n                    res.append(s[i:j])\n        return res\n",
        "num_ids": 131
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    output = []\n    for word in s.split():\n        c = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in \"aeiou\":\n                c += 1\n        if c == n:\n            output.append(word)\n    return output\n",
        "num_ids": 71
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for word in s.split():\n        count = 0\n        for letter in word:\n            if letter in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return []\n    else:\n        l = []\n        s = s.split()\n        for word in s:\n            if len(word) >= n and all(c in \"bcdfghjklmnpqrstvwxz\" for c in word):\n                l.append(word)\n        return l\n",
        "num_ids": 85
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) <= 0:\n        return []\n    words = s.split()\n    cnt = 0\n    for word in words:\n        for char in word:\n            if char.isalpha() and not char.isupper():\n                cnt += 1\n        if cnt == n:\n            return [word]\n        cnt = 0\n    return []\n",
        "num_ids": 88
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if s == \"\":\n        return []\n    else:\n        return [x for x in s.split() if is_consonant_count(x, n) == n]\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) < 1:\n        return []\n    d = {}\n    for i in s:\n        if i == \" \":\n            continue\n        elif i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    temp = []\n    for i in d:\n        if d[i] >= n:\n            temp.append(i)\n    return temp\n",
        "num_ids": 100
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    from collections import Counter\n    s = s.split(\" \")\n    res = []\n    if s == []:\n        return res\n    for i in s:\n        count = Counter(i)\n        if count[\"\"] > 0:\n            res.append(i)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    vowels_index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_index.append(i)\n    \n    if len(vowels_index) == 0:\n        return \"\"\n    \n    # Sort vowel index\n    vowels_index.sort()\n    for i in range(len(vowels_index)-1):\n        if vowels_index[i+1] - vowels_index[i] == 1:\n            return word[vowels_index[i]+1]\n    \n    return word[vowels_index[-1]+1]\n",
        "num_ids": 167
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(word) < 2: return \"\"\n    \n    # Get all indices of vowels in the word\n    vowels = [i for i in range(len(word) - 1) if word[i] in \"aeiouAEIOU\"]\n    \n    if not vowels: return \"\"\n",
        "num_ids": 72
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # Replace this code with a faster implementation\n    min_dist = len(word)\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            if min_dist > i - i:\n                min_dist = i - i\n                closest = word[i]\n    return closest\n",
        "num_ids": 114
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # your code here\n    list_of_consonants = []\n    list_of_vowels = []\n    for i in range(len(word)):\n        if word[i] in 'aeiouAEIOU':\n            list_of_vowels.append(i)\n        if word[i] not in 'aeiouAEIOU':\n            list_of_consonants.append(i)\n",
        "num_ids": 102
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # Time: O(n)\n    # Space: O(1)\n    \n    vowel = \"aeiou\"\n    word = list(word)\n    n = len(word)\n    \n    # get first and last char\n    first = word[0]\n    last = word[n-1]\n    \n    # if first and last are same, return first\n    if first == last:\n        return first\n    \n    if n == 1:\n        return \"\"\n    \n    if first in vowel:\n        return first\n    \n    if last in vowel:\n        return last\n    \n    # if word has only one letter\n    if n == 1:\n        return \"\"\n    \n    # if word has more than one letter\n    # find the closest vowel from the right side of the word\n    \n    for i in range(n-1, -1, -1):\n        if word[i] in vowel:\n            return word[i]\n    return \"\"\n    \n    \ndef minimum_moves(arr):\n    \"\"\"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n    The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n    How many minimum moves will it take?\n",
        "num_ids": 323
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i, c in enumerate(reversed(word)):\n        if c in \"aeiou\":\n            return word[len(word)-i-1]\n    return \"\"\n",
        "num_ids": 45
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    left = 0\n    right = len(word) - 1\n    while right > left:\n        if not word[right] in \"aeiou\":\n            right -= 1\n        else:\n            break\n",
        "num_ids": 49
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    i = len(word) - 1\n    \n    while i >= 0:\n        if word[i] in VOWELS:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "num_ids": 50
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = \"aeiou\"\n    closest_vowel = \"\"\n    index = len(word) - 1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            index = i\n            break\n    if index == 0:\n        return closest_vowel\n    else:\n        vowel_index = word.rfind(word[index], 0, index)\n        if vowel_index == -1:\n            vowel_index = index\n        for i in range(len(word) - 1, -1, -1):\n            if word[i] in vowels and word.rfind(word[i], vowel_index, i) == -1:\n                vowel_index = i\n                break\n        closest_vowel = word[vowel_index]\n        return closest_vowel\n",
        "num_ids": 220
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stk = []\n",
        "num_ids": 7
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_balanced(lst):\n        while lst:\n            top = lst.pop()\n            if top == '(':\n                is_balanced(lst)\n                lst.pop()\n                continue\n            elif top == ')':\n                return\n            else:\n                return\n    is_balanced(lst)\n    return 'Yes' if lst == [] else 'No'\n",
        "num_ids": 95
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 69
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    s1 = lst[0]\n    s2 = lst[1]\n    \n    if len(s1)!= len(s2):\n        return 'No'\n    \n    open_stack = []\n    \n    for i in range(len(s1)):\n        if s1[i] == '(':\n            open_stack.append('(')\n        elif s1[i] == ')':\n            if not open_stack:\n                return 'No'\n            open_stack.pop()\n    \n    if open_stack:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 146
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst.sort(key=len)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0] == ')':\n                return 'No'\n            if lst[j][0] == '(':\n                return 'No'\n            if lst[i][0] == '(' and lst[j][0] == ')' or lst[i][0] == ')' and lst[j][0] == '(':\n                return 'Yes'\n",
        "num_ids": 129
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for c in lst:\n        if c == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n        else:\n            stack.append(c)\n    if not stack:\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return 'Yes'\n",
        "num_ids": 14
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst)!= 2: return 'No'\n    if lst[0] == ')' or lst[1] == ')': return 'No'\n    if lst[0] == '(' or lst[1] == '(':\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def _match(i, j):\n        if i == j:\n            return True\n",
        "num_ids": 22
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    '''\n    Solution:\n",
        "num_ids": 9
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr.sort()\n    return arr[len(arr)-k:]\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    solution 1:\n",
        "num_ids": 10
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr)[-k:]\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, reverse = True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr or k == 0: return []\n    indices = [i for i in xrange(k)]\n    # if len(arr) < k:\n    #     return sorted(arr)\n    # max_arr = sorted(arr[:k])\n    # for i in xrange(k, len(arr)):\n    #     if arr[i] > max_arr[-1]:\n    #         indices.append(i)\n    #         max_arr.append(arr[i])\n    #     else:\n    #         max_arr[bisect_left(max_arr, arr[i])] = arr[i]\n    # return max_arr\n",
        "num_ids": 160
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr = [float('-inf')] * (k + 1) + arr + [float('-inf')] * (k + 1)\n    res = []\n    for i in range(k, len(arr) - k):\n        res.append(arr[i])\n        arr[i], arr[i+k] = arr[i+k], arr[i]\n    return res[1:-1]\n",
        "num_ids": 97
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(k):\n        result.append(max(arr))\n        arr.remove(max(arr))\n",
        "num_ids": 35
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    if len(arr) == 0:\n        return result\n    if len(arr) == 1:\n        return [arr[0]] * k\n    max_val = max(arr)\n    max_index = arr.index(max_val)\n    \n    # add the first k elements to result\n    for i in range(k):\n        result.append(arr[i])\n    \n    # add the max_val to the list\n    result.append(max_val)\n",
        "num_ids": 118
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    from collections import deque\n    queue = deque()\n    for num in arr:\n        while queue and queue[-1] < num:\n            queue.pop()\n        queue.append(num)\n    return list(queue)[:k]\n",
        "num_ids": 59
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(filter(lambda x: x % 2 == 1, lst[::2]))",
        "num_ids": 23
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2])\n    \n    \n",
        "num_ids": 38
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if (i+1) % 2 == 0 and lst[i] % 2])\n",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1])\n",
        "num_ids": 31
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total",
        "num_ids": 47
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if lst[i]%2 == 0 and i%2==0:\n            total += lst[i]\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if lst == []:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    odds = [x for i, x in enumerate(lst) if x % 2 == 1 and i % 2 == 0]\n    return sum(odds)\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321])",
        "num_ids": 85
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(lst[i] for i in range(0,len(lst),2) if lst[i]%2)\n    \n    \n",
        "num_ids": 38
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if arr == []:\n        return 0\n    if k > len(arr):\n        return sum(arr)\n    digits = [int(x) for x in str(arr[:k])]\n    return sum(digits)\n",
        "num_ids": 57
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def check_sum(nums, k, start):\n        if k == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k == 2:\n            return sum(nums[start:start+2])\n",
        "num_ids": 62
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(k):\n        count += arr[i]\n    return count\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return 0\n    elif len(arr) <= k:\n        return sum(arr)\n    else:\n        return sum(arr[:k]) + add_elements(arr[k:], k)\n",
        "num_ids": 60
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num_digit = 2\n    n = len(arr)\n    while num_digit < k:\n        for i in range(n):\n            if arr[i] >= 10**(num_digit - 1):\n                num_digit += 1\n                break\n    # maintain a map of {elements with num_digit digits: count of occurrences}\n    num_map = {}\n    # create the map\n    for i in range(n):\n        num = arr[i] / 10**(num_digit-1)\n        num = num * 10**(num_digit-1)\n        if num not in num_map:\n            num_map[num] = 1\n        else:\n            num_map[num] += 1\n    # count the number of occurrences of each element with num_digit digits\n    count = 0\n    for num in num_map:\n        count += (num_map[num] * (num_map[num] - 1)) // 2\n    # add the elements with count 1\n    for num in num_map:\n        if num_map[num] == 1:\n            count += 1\n    return count\n",
        "num_ids": 263
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) <= k:\n        return sum(arr)\n",
        "num_ids": 18
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n",
        "num_ids": 6
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(arr[:k])",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if k >= len(arr):\n        return sum(arr)\n",
        "num_ids": 17
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odds = []\n",
        "num_ids": 7
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    i = 1\n    while i <= n:\n        if not collatz_is_odd(i):\n            result.append(i)\n        i = i + 2\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    nums = []\n",
        "num_ids": 7
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    else:\n        return get_odd_collatz((3 * n) + 1) + [n]\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"get_odd_collatz: n must be positive integer\")\n    \n    seq = [n]\n    while n > 1:\n        if n % 2 == 1:\n            seq.append(n)\n        n = n//2 if n % 2 == 0 else n*3 + 1\n    return sorted(seq)\n",
        "num_ids": 86
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = (3*n) + 1\n        result.append(n)\n",
        "num_ids": 53
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    odd_collatz = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return odd_collatz\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    collatz_seq = []\n",
        "num_ids": 9
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    odds = []\n    i = 1\n    while i!= n:\n        i = get_odd_collatz_step(i)\n        if i > n:\n            break\n        if i not in odds:\n            odds.append(i)\n    return sorted(odds)\n",
        "num_ids": 83
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    months = [\"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"]\n    days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n    if len(date) == 0 or len(date) > 10:\n        return False\n    else:\n        if int(date[3:5]) > 12 or int(date[3:5]) < 1:\n            return False\n        elif int(date[0:2]) > 12 or int(date[0:2]) < 1:\n            return False\n        elif int(date[6:]) > 31 or int(date[6:]) < 1:\n            return False\n        elif int(date[3:5]) in [4,6,9,11] and int(date[0:2]) > 30:\n            return False\n        elif int(date[3:5]) == 2 and int(date[0:2]) > 29:\n            return False\n        elif date[3:5] not in days:\n            return False\n        elif date[6:] not in months:\n            return False\n        else:\n            return True\n",
        "num_ids": 373
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    month = {1: 31,\n    2: 29 if (int(date[3]) == 2) and ((int(date[2]) % 4 == 0) or (int(date[2]) % 100!= 0) or (int(date[2]) % 400 == 0)) else 28,\n    3: 31,\n    4: 30,\n    5: 31,\n    6: 30,\n    7: 31,\n    8: 31,\n    9: 30,\n    10: 31,\n    11: 30,\n    12: 31}\n",
        "num_ids": 129
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    month_map = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n",
        "num_ids": 82
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    months = ['01', '03', '05', '07', '08', '10', '12']\n    numbers = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']\n    valid = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    #Test cases\n    if date == '':\n        return False\n    if len(date.split('-'))!= 3:\n        return False\n    if int(date.split('-')[0]) > 12 or int(date.split('-')[1]) > 31 or int(date.split('-')[2]) > int(date.split('-')[0]):\n        return False\n    if int(date.split('-')[0]) > 31 or int(date.split('-')[1]) > 12:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[2]) < 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]):\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 30:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 30:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 29:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 29:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 28:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 28:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date.split('-')[1]) + 1:\n        return False\n    if date.split('-')[1] in valid and int(date.split('-')[0]) > int(date.split('-')[1]) + 27:\n        return False\n    if date.split('-')[1] in months and int(date.split('-')[0]) > int(date",
        "num_ids": 1025
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import re\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    regex = re.compile('^\\d{1,2}-\\d{1,2}-\\d{4}$')\n    if regex.match(date):\n        year = int(date[6:])\n        month = int(date[3:5])\n        day = int(date[:2])\n        if year < 1900 or year > 2050:\n            return False\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day <= 31:\n                return True\n            return False\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            if day <= 30:\n                return True\n            return False\n        if month == 2:\n            if day <= 29:\n                return True\n            return False\n    return False\n    \n    \nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))",
        "num_ids": 275
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # test 1\n    if not date:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    words = txt.split()\n    for word in words:\n        res.append(word)\n",
        "num_ids": 30
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    txt = txt.strip()\n    return txt.split()\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt.split()",
        "num_ids": 8
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    txt = txt.lower()\n    txt = txt.replace(\"!\", \"\")\n    txt = txt.replace(\".\", \"\")\n    txt = txt.replace(\",\", \"\")\n    txt = txt.replace(\";\", \"\")\n    txt = txt.replace(\":\", \"\")\n    txt = txt.replace(\"?\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"(\", \"\")\n    txt = txt.replace(\")\", \"\")\n    txt = txt.replace(\"\\\"\", \"\")\n    txt = txt.replace(\"'\", \"\")\n    txt = txt.replace(\"/\", \"\")\n    txt = txt.replace(\"@\", \"\")\n    txt = txt.replace(\"[\", \"\")\n    txt = txt.replace(\"]\", \"\")\n    txt = txt.replace(\"{\", \"\")\n    txt = txt.replace(\"}\", \"\")\n    txt = txt.replace(\"\\\\\", \"\")\n    txt = txt.replace(\"<\", \"\")\n    txt = txt.replace(\">\", \"\")\n    txt = txt.replace(\"_\", \"\")\n    txt = txt.replace(\"+\", \"\")\n    txt = txt.replace(\"&\", \"\")\n    txt = txt.replace(\"-\", \"\")\n    txt = txt.replace(\"=\", \"\")\n    txt = txt.replace(\"$\", \"\")\n    txt = txt.replace(\"`\", \"\")\n    txt = txt.replace(\"\\n\", \"\")\n    txt = txt.replace(\"\\t\", \"\")\n    txt = txt.replace(\"\\r\", \"\")\n    txt = txt.replace(\"\\x0b\", \"\")\n    txt = txt.replace(\"\\x0c\", \"\")\n    txt = txt.replace(\"\\x0e\", \"\")\n    txt = txt.replace(\"\\x0f\", \"\")\n    txt = txt.replace(\"\\x1f\", \"\")\n    txt = txt.replace(\"\\x1b\", \"\")\n    txt = txt.replace(\"\\x1a\", \"\")\n    txt = txt.replace(\"\\x1d\", \"\")\n    txt = txt.replace(\"\\x1c\", \"\")\n    txt = txt.replace(\"\\x1e\", \"\")\n    txt = txt.replace(\"\\x1f\", \"\")\n    txt = txt.replace(\"\\x01\", \"\")\n    txt = txt.replace(\"\\x02\", \"\")\n    txt = txt.replace(\"\\x03\", \"\")\n    txt = txt.replace(\"\\x04\", \"\")\n    txt = txt.replace(\"\\x05\", \"\")\n    txt = txt.replace(\"\\x06\", \"\")\n    txt = txt.replace(\"\\x07\", \"\")\n    txt = txt.replace(\"\\x08\", \"\")\n    txt = txt.replace(\"\\x09\", \"\")\n    txt = txt.replace(\"\\x0a\", \"\")\n    txt = txt.replace(\"\\x0b\", \"\")\n    txt = txt.replace(\"\\x0c\", \"\")\n    txt = txt.replace(\"\\x0d\", \"\")\n    txt = txt.replace(\"\\x0e\", \"\")\n    txt = txt.replace(\"\\x0f\", \"\")\n    txt = txt.replace(\"\\x10\", \"\")\n    txt = txt.replace(\"\\x11\", \"\")\n    txt = txt.replace(\"\\x12\", \"\")\n    txt = txt.replace(\"\\x13\", \"\")\n    txt = txt.replace(\"\\x14\", \"\")\n    txt = txt.replace(\"\\x15\", \"\")\n    txt = txt.replace(\"\\x16\", \"\")\n    txt = txt.replace(\"\\x17\", \"\")\n    txt = txt.replace(\"\\x18\", \"\")\n    txt = txt.replace(\"\\x19\", \"\")\n    txt = txt.replace(\"\\x1a\", \"\")\n    txt = txt.replace(\"\\x1b\", \"\")\n    txt = txt.replace(\"\\x1c\", \"\")\n    txt = txt.replace(\"\\x1d\", \"\")\n    txt = ",
        "num_ids": 1025
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    ret = []\n    for i, word in enumerate(txt):\n        if word =='':\n            return ret\n        elif word == ',':\n            return ret\n        else:\n            ret.append(word)\n    if len(ret) % 2 == 1:\n        return ret\n    else:\n        return ord('a') + len(ret)\n",
        "num_ids": 86
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = txt.split(\" \")\n    return res\n    ",
        "num_ids": 17
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 1:\n        return True\n    if lst[0] <= lst[1]:\n        return is_sorted(lst[1:])\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        return lst == sorted(lst)\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sort = sorted(lst)\n    return sort == lst\n",
        "num_ids": 17
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    prev = None\n    for x in lst:\n        if x!= prev:\n            if lst.count(x) > 1:\n                return False\n            prev = x\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return True\n    elif lst[0] < lst[1]:\n        for i in range(1,len(lst)):\n            if lst[i-1] > lst[i]:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 78
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # edge case: empty list\n    if not lst:\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    previous = lst[0]\n    for item in lst[1:]:\n        if item < previous:\n            return False\n        previous = item\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return abs(a)\n",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 39
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (interval1[0] > interval1[1]) or (interval2[0] > interval2[1]):\n        return \"NO\"\n",
        "num_ids": 38
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def check_interval(interval):\n        \"\"\"check whether the interval is a prime number\"\"\"\n        if interval[0] == interval[1]:\n            return True\n        elif interval[0] < interval[1]:\n            for i in range(interval[0]+1, interval[1]):\n                if i % interval[0] == 0:\n                    return False\n            return True\n        elif interval[0] > interval[1]:\n            for i in range(interval[0], interval[1], -1):\n                if i % interval[0] == 0:\n                    return False\n            return True\n",
        "num_ids": 144
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Write your code here\n    # Your code here\n    def prime(num):\n        if num == 1:\n            return False\n        elif num == 2:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    \n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0] or interval1[1] < interval2[1]:\n        return \"NO\"\n    interval = []\n    if interval1[0] == interval2[0]:\n        interval.append(interval1[0])\n    else:\n        interval.append(interval1[0])\n        interval.append(interval2[1])\n    if interval1[1] == interval2[1]:\n        interval.append(interval1[1])\n    else:\n        interval.append(interval1[1])\n        interval.append(interval2[0])\n    if interval[1] - interval[0] < 0:\n        return \"NO\"\n    if prime(interval[1] - interval[0]):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 347
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert(type(interval1) == tuple)\n    assert(type(interval2) == tuple)\n    assert(len(interval1) == 2)\n    assert(len(interval2) == 2)\n    assert(interval1[0] <= interval1[1])\n    assert(interval2[0] <= interval2[1])\n    if (interval1[0] <= interval2[0]) and (interval1[1] >= interval2[1]):\n        return \"YES\"\n    elif (interval2[0] <= interval1[0]) and (interval2[1] >= interval1[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 170
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n    else:\n        return \"YES\" if interval1[1] <= interval2[0] or interval2[1] <= interval1[0] else \"NO\"",
        "num_ids": 55
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_prime(n):\n        if n == 2: return True\n        if n == 3: return True\n        if n % 2 == 0: return False\n        if n < 9: return True\n        if n % 3 == 0: return False\n        for i in range(5, int(n ** 0.5) + 1, 6):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 98
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    if interval1_end < interval2_start or interval2_end < interval1_start:\n        return \"NO\"\n    if interval1_start == interval1_end or interval2_start == interval2_end:\n        return \"NO\"\n    if interval1_start == interval2_start and interval1_end == interval2_end:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 124
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    intersection = max(interval1[0], interval2[0]), min(interval1[1], interval2[1])\n    if intersection[1] > intersection[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 60
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    return sum([1 if n > 0 else -1 if n < 0 else 0 for n in arr]) *\\\n        reduce(lambda x, y: x * y, [1 if n > 0 else -1 if n < 0 else 0 for n in arr])\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 93
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    result = 1\n    for i in arr:\n        result *= (1 if i > 0 else -1 if i < 0 else 0)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr:\n        return None\n    positive = []\n    negative = []\n    zero = []\n    for i in arr:\n        if i > 0:\n            positive.append(i)\n        elif i == 0:\n            zero.append(i)\n        else:\n            negative.append(i)\n    positive = positive + zero\n    negative = negative + zero\n    positive = sorted(positive)\n    negative = sorted(negative)\n    positive = [str(i) for i in positive]\n    negative = [str(i) for i in negative]\n    positive = ''.join(positive)\n    negative = ''.join(negative)\n    return int(positive) * int(negative)",
        "num_ids": 165
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n    product = 1\n    for i in arr:\n        if i == 0:\n            return 0\n        if i > 0:\n            product *= 1\n        else:\n            product *= -1\n    return product\n",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    \n    summation = 0\n    for i in arr:\n        summation += i\n    \n    product = 1\n    for i in arr:\n        if i == 0:\n            product = product * 1\n        elif i > 0:\n            product = product * 1\n        else:\n            product = product * -1\n    \n    return summation * product\n    ",
        "num_ids": 103
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if arr:\n        return sum(map(abs, arr)) * prod(map(sign, arr))\n",
        "num_ids": 26
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def prod_sign(num):\n        \"\"\"\n        Prod of signs\n        \"\"\"\n        if num > 0:\n            return 1\n        elif num < 0:\n            return -1\n        return 0\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if arr:\n        return sum(abs(arr[i]) * (1 if arr[i] > 0 else -1)\n                  for i in range(len(arr)))\n    else:\n        return None\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum(abs(el) * prod_sign(el) for el in arr)\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    arr_prod = 1\n    for num in arr:\n        arr_prod = arr_prod * num if num else arr_prod\n    result = arr_prod * any(i for i in arr)\n    return result if result else None\n",
        "num_ids": 61
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if k == 0:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not grid or len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    m = len(grid)\n    n = len(grid[0])\n    if m == 1 and n == 1:\n        return grid[0]\n    if k == 0:\n        return []\n    grid = convertGridToList(grid)\n    if k == 1:\n        return grid\n    if k == 2:\n        return [min(grid)]\n    if k == 3:\n        return [1,2,3]\n    res = []\n    for i in xrange(m):\n        if i == 0:\n            res.append(minPath(grid[:i+1], k-1))\n        else:\n            res.append(minPath(grid[:i+1], k))\n    for i in xrange(n):\n        if i == 0:\n            res.append(minPath(res[:i+1], k-1))\n        else:\n            res.append(minPath(res[:i+1], k))\n    return res\n",
        "num_ids": 255
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    m = len(grid)\n    n = len(grid[0])\n    visited = {}\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                visited[(i, j)] = [grid[i][j]]\n            elif i == 0:\n                visited[(i, j)] = [grid[i][j]] + visited[(i, j - 1)]\n            elif j == 0:\n                visited[(i, j)] = [grid[i][j]] + visited[(i - 1, j)]\n            else:\n                visited[(i, j)] = [grid[i][j]] + visited[(i - 1, j)] + visited[(i, j - 1)]\n    res = []\n    for i in range(k):\n        res.append(visited[(m - 1, n - 1)][i])\n    return res\n",
        "num_ids": 248
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not grid or not grid[0] or k == 0:\n        return []\n    # iterate through the grid\n    for r in range(len(grid)):\n        for c in range(len(grid[0])):\n            # change the value of each cell\n            grid[r][c] = (grid[r][c], r, c)\n",
        "num_ids": 84
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    N = len(grid)\n    # get the indices of all the zeros\n    zeros = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == 0]\n    # preprocess the zeros list so that we get a list of pairs (i, j)\n    # instead of a list of ints\n    zeros = [(-1, -1)] + zeros + [(N, N)]\n    # create a matrix (N x N) with -1 as a default value (all cells have\n    # not been visited yet)\n    dist = [[-1] * N for _ in range(N)]\n    # initiate the distance from the start of the matrix to the first zero\n    dist[zeros[1][0]][zeros[1][1]] = 0\n    # create a set for visited cells (in the end we will keep only visited\n    # cells, otherwise we would need to use a dict)\n    visited = {(zeros[1][0], zeros[1][1])}\n    # create a queue\n    queue = deque()\n    # add the start point (zero) to the queue\n    queue.append((zeros[1][0], zeros[1][1]))\n    # while the queue is not empty\n    while len(queue) > 0:\n        # get the current cell from the front of the queue\n        i, j = queue.popleft()\n        # for each cell which shares an edge with the current cell\n        for (x, y) in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            # if the cell is not visited and not a border cell\n            if (x, y) not in visited and x >= 0 and y >= 0 and x < N and y < N:\n                # increment the distance of the current cell\n                # and append the current cell to the queue\n                dist[x][y] = dist[i][j] + 1\n                queue.append((x, y))\n                # mark the current cell as visited\n                visited.add((x, y))\n    # create a list of visited cells (but not all of them)\n    res = [grid[i][j] for i in range(N) for j in range(N) if (i, j) in visited]\n    return res[k - 1:]\n",
        "num_ids": 557
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    min_path = [[0] * n for _ in range(m)]\n    min_path[0][0] = grid[0][0]\n    for j in range(1, n):\n        min_path[0][j] = min_path[0][j - 1] + grid[0][j]\n",
        "num_ids": 106
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def minPathRecursive(row, col, visited, grid, k):\n        if row < 0 or row >= len(grid):\n            return []\n        if col < 0 or col >= len(grid[row]):\n            return []\n",
        "num_ids": 56
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    fibonacci = [1, 1]\n    for i in range(2, n + 1):\n        fibonacci.append(sum(fibonacci[i - 2 : i]))\n    return fibonacci\n",
        "num_ids": 55
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    tri_numbers = [1, 3]\n    if n == 0:\n        return tri_numbers\n    elif n == 1:\n        return [1, 3]\n    else:\n        i = 2\n        while i <= n:\n            next_num = tri_numbers[i-1] + tri_numbers[i-2] + tri_numbers[i-3]\n            tri_numbers.append(next_num)\n            i += 1\n        return tri_numbers\n",
        "num_ids": 119
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    tribonacci = [1]\n    while len(tribonacci) < n + 1:\n        if len(tribonacci) % 2 == 0:\n            tribonacci.append(sum(tribonacci[-2:]))\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci[1:]",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    else:\n        res = [1, 1, 1]\n        n -= 3\n        while n > 0:\n            res.append(sum(res[-3:]))\n            n -= 1\n        return re",
        "num_ids": 77
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = [1, 1, 1]\n    for i in range(3, n+1):\n        s.append((s[i - 1] + s[i - 2] + s[i - 3]) % 1000000007)\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [1]\n    a, b, c = 1, 3, 1\n    for i in range(n):\n        a, b, c = b, c, a + b + c\n        result.append(a)\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # trib = [1, 3, 5, 7, 11, 13, 19, 24]\n    # if n == 0: return trib[:1]\n    # elif n == 1: return trib[1:]\n    # else: return trib + [trib[-1] + trib[-3] + trib[-5]]\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    seq = [0, 1, 1, 2]\n    for i in range(n):\n        seq.append(sum(seq[-3:]))\n    return seq\n",
        "num_ids": 52
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seq = [1, 3, 2, 8]\n    while len(seq) < n + 1:\n        seq.append(sum(seq[-3:]))\n    return seq[:n + 1]\n",
        "num_ids": 50
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    list = [1, 3, 1]\n    if n == 0:\n        return []\n    elif n == 1:\n        return list\n    else:\n        list.append(1)\n        for i in range(3, n+1):\n            list.append(list[i-2] + list[i-3] + list[i-1])\n        return list\n",
        "num_ids": 90
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            res *= int(i)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n    return product\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = 1\n    while n:\n        res *= n % 10\n        n /= 10\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # n = str(n)\n    # sum = 0\n    # for digit in n:\n    #     if int(digit)%2 == 1:\n    #         sum += int(digit)\n    # return sum\n    return sum(digit for digit in str(n) if int(digit)%2 == 1)\n",
        "num_ids": 76
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Add code here\n    # \uc785\ub825\uac12\uc758 \uc815\uc218\uc758 \uac01 \uc790\ub9ac\uc218\ub4e4\uc744 \ud558\ub098\uc529 \ubc18\ud658\ud558\ub294 \uc7ac\uadc0\ud568\uc218.\n    return 1 if n < 10 else digits(n // 10) * (n % 10)\n",
        "num_ids": 100
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 1\n    for i in range(len(n)):\n        if int(n[i]) % 2!= 0:\n            result *= int(n[i])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 1\n    for i in range(1, n + 1):\n        for j in str(i):\n            if int(j) % 2 == 1:\n                total *= int(j)\n    return total\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    else:\n        n = str(n)\n        total = 1\n        for i in range(len(n)):\n            if int(n[i]) % 2 == 1:\n                total = total * int(n[i])\n        return total\n",
        "num_ids": 71
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2 == 1:\n            result *= int(str(n)[i])\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    mul = 1\n    while n > 0:\n        rem = n % 10\n        if rem % 2!= 0:\n            mul *= rem\n        n //= 10\n    return mul\n",
        "num_ids": 48
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # counter = 0\n    # for index in range(len(string)):\n    #     if string[index] == '[' and counter == 0:\n    #         counter += 1\n    #     elif string[index] == '[' and counter == 1:\n    #         return True\n    #     elif string[index] == '[' and counter == 2:\n    #         return False\n    #     elif string[index] == ']' and counter == 1:\n    #         return False\n    #     elif string[index] == ']' and counter == 0:\n    #         counter -= 1\n    # return counter == 1\n    # return counter == 2\n",
        "num_ids": 155
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return False\n    if string[0] == ']' or string[-1] == ']':\n        return False\n    l = 0\n    r = len(string)-1\n    brackets = []\n    while l < r:\n        if string[l] == ']' or string[r] == '[' or string[l] == '[' and string[r] == ']':\n            return False\n        brackets.append(string[l])\n        l += 1\n        r -= 1\n    return True\n",
        "num_ids": 126
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) <= 1:\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "num_ids": 76
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def valid(string, index, result):\n        if index == len(string):\n            return result\n        char = string[index]\n        if char == ']':\n            return valid(string, index + 1, result + [False])\n        elif char == '[':\n            return valid(string, index + 1, result + [True])\n        else:\n            return valid(string, index + 1, result)\n",
        "num_ids": 98
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # strings_list = re.findall('\\[\\[(.*?)\\]\\]', string)\n    # print(strings_list)\n    return len(string) > 0 and len(strings_list) > 0 and strings_list[0]\n    # return (strings_list[0][0] == strings_list[0][-1]) and len(strings_list) > 0 and strings_list[0][0] == strings_list[0][-1]\n",
        "num_ids": 112
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    brackets = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    stack = []\n    for c in string:\n        if c in brackets.values():\n            stack.append(c)\n        elif c in brackets.keys():\n            if not stack or stack.pop()!= brackets[c]:\n                return False\n    return not stack\n",
        "num_ids": 94
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_valid(string):\n        if string == '': return True\n        if string[0] == '[': return is_valid(string[1:])\n        if string[0] == ']': return False\n        return is_valid(string[1:])\n    if string == '': return True\n    if string[0] == '[': return is_valid(string[1:])\n    if string[0] == ']': return False\n    return is_valid(string[1:])\n    \n",
        "num_ids": 120
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO: rewrite\n",
        "num_ids": 8
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    open_bracket = []\n    for character in string:\n        if character == \"[\":\n            open_bracket.append(character)\n        elif character == \"]\":\n            if len(open_bracket) > 0:\n                open_bracket.pop()\n            else:\n                return False\n    if open_bracket == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 95
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    squares = list(map(lambda x: math.ceil(x**2), lst))\n    return sum(squares)\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(map(lambda x:int(ceil(x)), map(lambda x:x*x, lst)))\n",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return sum(x**2 for x in lst)\n",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([float(x)**2 for x in lst])\n    \n    \n    \n",
        "num_ids": 24
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 0\n    for num in lst:\n        result += math.ceil(num) ** 2\n    return result\n    \n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([x**2 for x in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = 0\n    for item in lst:\n        result = result + pow(item,2)\n    return result\n    \nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,4,9]) == 98\nassert sum_squares([1,3,5,7]) == 84\nassert sum_squares([1.4,4.2,0]) == 29\nassert sum_squares([-2.4,1,1]) == 6\n",
        "num_ids": 116
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = [round(i) for i in lst]\n    return sum([i**2 for i in lst])\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(x**2 for x in lst)\n",
        "num_ids": 15
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n    # hint: make use of check_if_last_char_is_a_letter_helper\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha() and last_char!='':\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if len(txt) == 0:\n    #     return False\n    # for word in txt.split():\n    #     if word[-1].isalpha() and word[-1] not in word[:-1]:\n    #         return True\n    # return False\n    return not txt[-1].isalpha() or txt[-1] in \" \"\n",
        "num_ids": 89
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isdigit()\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not txt:\n        return False\n    elif not isinstance(txt, str):\n        return False\n    elif not txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in''.join(txt[:-1].split())\n    # return any(map(lambda x: x[-1].isalpha() and x[-1] not in''.join(x[:-1].split()), txt))\n",
        "num_ids": 73
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (txt[-1].isalpha() and not txt[-1].isnumeric())\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if txt=='':\n        return False\n    return txt[-1] in 'abcdefghijklmnopqrstuvwxyz' and txt[-2] not in 'abcdefghijklmnopqrstuvwxyz '\n    ",
        "num_ids": 65
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # convert to lower\n    txt = txt.lower()\n    # get the last char\n    last_char = txt[-1]\n    # if the last char is a letter\n    if last_char.isalpha():\n        # get the word count\n        word_count = txt.count(' ') + 1\n        # if it is the last word in the sentence\n        if word_count == 1:\n            return True\n    return False\n",
        "num_ids": 106
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # can_arrange_f(arr)\n    # def can_arrange_f(arr):\n    #     for i in range(len(arr)-1):\n    #         if arr[i] >= arr[i+1]:\n    #             return i\n    #     return -1\n",
        "num_ids": 70
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            idx = i\n            break\n    return idx\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr.sort()\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def helper(arr, index):\n        while index > 0 and arr[index - 1] > arr[index]:\n            index -= 1\n        return index\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # todo: implement me\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Starting index of arr\n    i = 0\n    # Ending index of arr\n    j = 1\n    # Comparing every element with the previous one\n    while i < len(arr)-1:\n        # If i is equal to the previous element then j = i+1\n        if arr[i] <= arr[i+1]:\n            i += 1\n            j += 1\n        # If i is not equal to the previous element then arr[i] is greater\n        # than arr[i+1]\n        else:\n            return -1\n    return j-1\n",
        "num_ids": 132
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = len(arr)\n    if l == 0:\n        return -1\n    elif l == 1:\n        return 0\n    max_elem = max(arr)\n    if max_elem == arr[0]:\n        return 0\n    for i in range(1, l):\n        if arr[i] > arr[i-1] and arr[i] <= max_elem:\n            return i\n    return -1\n",
        "num_ids": 105
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return arr.index(max([i for i in arr if i < arr[arr.index(i) - 1]]))\n",
        "num_ids": 30
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return -1\n    return max(i for i,j in enumerate(arr[1:], 1) if j <= arr[i-1])",
        "num_ids": 41
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n",
        "num_ids": 39
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not lst:\n        return None, None\n",
        "num_ids": 14
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    if negatives:\n        return (max(negatives), min(positives))\n    return (None, None)\n",
        "num_ids": 62
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # If there is no negative or positive integers\n    if (len(lst) == 0) or (all([x >= 0 for x in lst])):\n        return (None, None)\n    # If there is a negative integer\n    elif any([x < 0 for x in lst]):\n        return (max(lst), min(lst))\n    # If there is a positive integer\n    else:\n        return (max(lst), min(lst))\n",
        "num_ids": 112
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # check if there are negative or positive integers\n    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n",
        "num_ids": 44
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pos = None\n    neg = None\n    for num in lst:\n        if num < 0:\n            if not neg:\n                neg = num\n            if neg < num:\n                neg = num\n        if num > 0:\n            if not pos:\n                pos = num\n            if pos > num:\n                pos = num\n    return (neg, pos)\n",
        "num_ids": 87
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    negative_lst = [x for x in lst if x < 0]\n    positive_lst = [x for x in lst if x > 0]\n    if len(negative_lst) == 0:\n        return (None, None)\n    elif len(negative_lst) == len(lst):\n        return (None, max(positive_lst))\n    elif len(negative_lst) > 0:\n        return (min(negative_lst), max(positive_lst))\n    return (None, None)\n",
        "num_ids": 130
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    negatives = [n for n in lst if n < 0]\n    positives = [p for p in lst if p > 0]\n",
        "num_ids": 35
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n        else:\n            if smallest is None or num < smallest:\n                smallest = num\n    return (largest, smallest)",
        "num_ids": 71
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(a, int):\n        if isinstance(b, int):\n            return max(a, b)\n        elif isinstance(b, float):\n            return a if a > b else b\n    elif isinstance(a, float):\n        if isinstance(b, int):\n            return a if a > b else b\n        elif isinstance(b, float):\n            return a if a > b else b\n    elif isinstance(a, str):\n        if isinstance(b, int):\n            return a if int(a) > b else b\n        elif isinstance(b, float):\n            return a if float(a) > b else b\n    elif isinstance(a, str):\n        if isinstance(b, int):\n            return a if int(b) > a else b\n        elif isinstance(b, float):\n            return a if float(a) > b else b\n    elif isinstance(a, bool):\n        return a if a is True else b\n    elif isinstance(a, bool):\n        return a if a is True else b\n    else:\n        return None\n",
        "num_ids": 269
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        if type(a) == str:\n            return str(max(a, b))\n        else:\n            return max(a, b)\n    else:\n        return None\n",
        "num_ids": 55
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(a, b) if type(a) in (int, float) and type(b) in (int, float) else None\n",
        "num_ids": 34
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a == b:\n        return None\n    if a > b:\n        return a\n    return b\n",
        "num_ids": 63
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if isinstance(a, float):\n        a = float(a)\n    elif isinstance(a, int):\n        a = int(a)\n    if isinstance(b, float):\n        b = float(b)\n    elif isinstance(b, int):\n        b = int(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b",
        "num_ids": 105
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if type(a) == str:\n        a = a.replace(',','.')\n        a = float(a)\n    if type(b) == str:\n        b = b.replace(',','.')\n        b = float(b)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 80
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if isinstance(a, float):\n        if isinstance(b, float):\n            return max(a, b)\n        else:\n            return b\n    elif isinstance(a, int):\n        if isinstance(b, float):\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 129
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if isinstance(a, (int, float, str)) and isinstance(b, (int, float, str)):\n        if isinstance(a, str) or isinstance(b, str):\n            a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        else:\n            a, b = float(a), float(b)\n        if a >= b:\n            return a\n        else:\n            return b\n    else:\n        return None\n",
        "num_ids": 121
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if type(a) == str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) == str:\n        b = float(b.replace(\",\", \".\"))\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    elif a < b:\n        return b\n",
        "num_ids": 86
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if type(a) is str:\n        if a.find(',')!= -1:\n            a = float(a.replace(',', ''))\n        elif a.find('.')!= -1:\n            a = float(a)\n        else:\n            a = int(a)\n    if type(b) is str:\n        if b.find(',')!= -1:\n            b = float(b.replace(',', ''))\n        elif b.find('.')!= -1:\n            b = float(b)\n        else:\n            b = int(b)\n",
        "num_ids": 145
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(1, n):\n        for j in range(i + 1, n):\n            if is_even(i) and is_even(j) and is_even(n - i - j):\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2 or not is_number(n):\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 4:\n        return False\n    sum_ = 0\n    for i in range(2, n, 2):\n        if n % i == 0 and n / i % 2 == 0:\n            sum_ += i\n    return sum_ == n\n",
        "num_ids": 61
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2!= 0:\n        return False\n    n = n / 2\n    total = 0\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            total += i\n        i += 1\n    return total == n\n",
        "num_ids": 64
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([i for i in range(1,n/2+1,2)]) == n\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum_of_n_th_number(n, 4, 2) % 2 == 0\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2!= 0 or n < 4:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            count += i\n    if count == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2!= 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n % 2 == 0 and is_equal_to_sum(n, 4)\n",
        "num_ids": 22
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 0:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 1\n    for i in range(1, n+1):\n        total *= i\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 1\n",
        "num_ids": 6
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n < 0:\n        raise ValueError\n    return n * special_factorial(n-1)\n",
        "num_ids": 39
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = re.sub(r'\\s+','_',text)\n    result = re.sub(r' _+','_',result)\n    return result\n    \ndef check_name(name):\n    \"\"\"\n    Returns the name of the system if name is valid, \n    and a message stating that it is not valid otherwise.\n    \n    check_name(\"Example\") == \"Example\"\n    check_name(\"Example 1\") == \"Example 1\"\n    check_name(\"_Example_2\") == \"_Example_2\"\n    check_name(\" Example   3\") == \"_Example-3\"\n    check_name(\"_Example-3\") == \"_Example-3\"\n    check_name(\"-Example-3\") == \"Example-3\"\n    check_name(\"Example 1\") == \"Example 1\"\n    check_name(\" -Example  1\") == \"Example 1\"\n    check_name(\"Example 1\") == \"Example 1\"\n    check_name(\"Example-1\") == \"Example-1\"\n    check_name(\"Example -1\") == \"Example -1\"\n    check_name(\"Example -1\") == \"Example -1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"_Example-1\") == \"_Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"Example1\") == \"Example1\"\n    check_name(\"-Example-1\") == \"Example-1\"\n    check_name(\"-Example-",
        "num_ids": 1024
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    return re.sub('\\s+', '_', text)\n",
        "num_ids": 19
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 28
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    result = \"\"\n    for i, c in enumerate(text):\n        if c == \" \":\n            result += \"_\"\n        else:\n            result += c\n    \n    result = result.replace(\"  \", \"-\")\n    \n    return result\n",
        "num_ids": 63
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return re.sub(' +','_',text)\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return re.sub(r'\\s', '_', text)\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import re\n    return re.sub(r'\\s+', '_', text)",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = text.replace(\" \", \"_\")\n    if len(s) > 2:\n        s = s.replace(\" \", \"-\")\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return re.sub(r\"\\s+\", \"_\", text)\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if text == \"\": return text\n    l = []\n    for c in text:\n        if c =='':\n            if len(l) == 0 or l[-1]!= '-':\n                l.append('_')\n        else:\n            l.append(c)\n    return ''.join(l)\n",
        "num_ids": 78
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if file_name[0].isalpha() and file_name.count('.') == 1 and file_name.count('0') <= 3:\n        if 'txt' in file_name or 'exe' in file_name or 'dll' in file_name:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 89
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    valid = \"Yes\"\n    valid_names = [\"txt\", \"exe\", \"dll\"]\n    dot_pos = file_name.find(\".\")\n    if dot_pos == -1:\n        valid = \"No\"\n    else:\n        name = file_name[:dot_pos]\n        if not name[0].isalpha():\n            valid = \"No\"\n        else:\n            end = dot_pos\n            for c in name[1:]:\n                if c.isdigit():\n                    valid = \"No\"\n                    break\n                elif c.isalpha():\n                    continue\n                else:\n                    valid = \"No\"\n                    break\n            if not name[end:end + 4] in valid_names:\n                valid = \"No\"\n    return valid\n",
        "num_ids": 188
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    import re\n    \n    if file_name[0] == '.':\n        return 'No'\n    if len(re.findall('[a-zA-Z]', file_name)) > 3:\n        return 'No'\n    if len(re.findall('[a-zA-Z]', file_name)) == 3:\n        if len(re.findall('[0-9]', file_name)) > 1:\n            return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name[-4:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 169
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import re\n    \n    def is_valid_file_name(file_name):\n        if re.match(r\"^[a-zA-Z]+[a-zA-Z0-9]?\\.?[a-zA-Z][a-zA-Z0-9]{0,3}$\", file_name):\n            if file_name.count('.') == 1:\n                if file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    \n    return is_valid_file_name(file_name)\n",
        "num_ids": 174
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_valid_file_name(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        elif file_name.count('.')!= 1:\n            return 'No'\n        elif file_name[0] not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n            return 'No'\n        elif file_name[-3:] not in ['txt','exe','dll']:\n            return 'No'\n        else:\n            return 'Yes'\n",
        "num_ids": 164
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Valid file name should contain only 3 letters, 1 dot, 2 digits, or exclamation mark\n    if len(file_name) > 30 or len(file_name) < 2:\n        return 'No'\n",
        "num_ids": 50
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return re.search(r'^[a-zA-Z]+[0-9][0-9a-zA-Z]+\\.[a-zA-Z]+$', file_name) and len(file_name) <= 30\n",
        "num_ids": 58
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_valid_file_name(file_name):\n        return (len(re.findall('\\d', file_name)) <= 3) and \\\n            (re.search(\"\\.\", file_name)) and \\\n            (re.search(\"^[a-zA-Z]\\w*$\", file_name)) and \\\n            (re.search(\"[exe,dll]\", file_name))\n    return is_valid_file_name(file_name)\n",
        "num_ids": 113
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    if re.search(\"[0-9]\", file_name) or re.search(\"[a-zA-Z]\", file_name):\n        return \"No\"\n    elif file_name.count(\".\")!= 1 or file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return \"No\"\n    elif len(file_name) < 4:\n        return \"No\"\n    elif file_name[3] not in \"txt exe dll\":\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 145
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 'Yes' if file_name_valid(file_name) else 'No'\n",
        "num_ids": 22
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    \n    sum = 0\n    for num in lst:\n        if (num ** 2) % 4 == 0:\n            sum += num ** 3\n        elif (num ** 2) % 3 == 0:\n            sum += num ** 2\n        else:\n            sum += num\n    return su",
        "num_ids": 75
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(lst[i]**2 if (i + 1) % 3 == 0 else lst[i]**3 for i in range(len(lst)))\n",
        "num_ids": 41
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    s = 0\n    for i in lst:\n        if i%3 == 0:\n            i = i**2\n        if i%4 == 0 and i%3!= 0:\n            i = i**3\n        s += i\n    return s\n    ",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in lst:\n        if (i*i)%3 == 0 and (i*i*i)%4!= 0:\n            sum+=i*i\n        elif (i*i*i)%4!= 0:\n            sum+=i*i*i\n        elif (i*i)%3!= 0:\n            sum+=i*i\n    return sum\n    # Write your code here\n",
        "num_ids": 106
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return 0\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n",
        "num_ids": 92
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(lst[i] ** 2 if (i+1)%4==0 else lst[i]**3 for i in range(len(lst)))\n",
        "num_ids": 41
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        if i % 3!= 0 or i % 4!= 0:\n            res += lst[i]\n    return res\n",
        "num_ids": 97
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst_len = len(lst)\n    count = 0\n    sum = 0\n    for i in range(lst_len):\n        if i % 3 == 0 and i % 4 == 0:\n            sum = sum + lst[i] * lst[i]\n            count = count + 1\n    return sum\n    \n",
        "num_ids": 80
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert lst!= [], 'The list cannot be empty'\n    return sum(lst[::3]**2 if i%3==0 else lst[i]**3 for i in range(len(lst)))\n",
        "num_ids": 54
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # str_to_list = sentence.split(' ')\n    # list_of_words = []\n    # for word in str_to_list:\n    #     if len(word) == 1:\n    #         continue\n    #     if is_prime(len(word)):\n    #         list_of_words.append(word)\n    # return''.join(list_of_words)\n    return''.join([word for word in sentence.split(' ') if is_prime(len(word))])\n",
        "num_ids": 122
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(sorted([x for x in sentence.split(' ') if len(x) > 1]))\n",
        "num_ids": 30
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join([word for word in sentence.split(' ') if word.isalpha()])",
        "num_ids": 24
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Time: O(n * ln(n)), n = len(sentence)\n    # Space: O(n)\n    words = sentence.split(\" \")\n    words_with_lengths = []\n    for word in words:\n        words_with_lengths.append((len(word), word))\n    words_with_lengths.sort(key=lambda word_length_pair: word_length_pair[0])\n    prime_numbers = get_prime_numbers(len(words_with_lengths))\n    i = 0\n    while i < len(words_with_lengths) and len(words_with_lengths[i][1]) in prime_numbers:\n        words_with_lengths[i] = words_with_lengths[i][1]\n        i += 1\n    return \" \".join(words_with_lengths)\n",
        "num_ids": 207
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import string\n    return ''.join(sorted(set(sentence), key=len)[::-1])\n",
        "num_ids": 28
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n**0.5)+1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n",
        "num_ids": 88
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''\n",
        "num_ids": 5
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    new_words = []\n    for word in words:\n        if is_prime(len(word)):\n            new_words.append(word)\n    return''.join(new_words)\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join([s for s in sentence.split() if get_prime_num_of_string(s)])",
        "num_ids": 28
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    try:\n        numerator = int(x[0]) * int(n[1])\n        denominator = int(x[1]) * int(n[0])\n    except ValueError:\n        return False\n    else:\n        if denominator == 0:\n            return False\n        elif (numerator / denominator) % 1 == 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 118
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    x, n = int(x[0]), int(n[0])\n    return x * n == int(x * n)\n",
        "num_ids": 50
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Get rid of any '/' in the numerator, and all the '0'\n    numerator, denominator = x.split('/')\n    numerator = numerator.replace('0', '')\n    denominator = denominator.replace('0', '')\n",
        "num_ids": 66
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    gcd = math.gcd(numerator, denominator)\n    numerator = int(numerator/gcd)\n    denominator = int(denominator/gcd)\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 107
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # use integer division instead of float division in case the denominator is zero\n    x, n = x.split(\"/\"), n.split(\"/\")\n    x, n = float(x[0]), float(n[0])\n    return x * n == int(x * n)\n",
        "num_ids": 67
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numerator, denominator = x.split('/')\n    if not int(numerator) and not int(denominator):\n        return True\n    return int(numerator) % int(denominator) == 0\n",
        "num_ids": 56
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numerator, denom = x.split(\"/\")\n    numerator, denom = int(numerator), int(denom)\n    if numerator % denom == 0:\n        return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"\"\"\n    ## find out what's the denominator\n    denom = x[-1]\n    if (n[0] == denom):\n        numer = x[:-1]\n        num = n[1:-1]\n    else:\n        numer = x[:-1]\n        num = n[:-1]\n    denom = int(denom)\n    num = int(num)\n",
        "num_ids": 97
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a = x.split(\"/\")\n    b = n.split(\"/\")\n",
        "num_ids": 21
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numerator, denom = x.split('/')\n    num = int(numerator)\n    den = int(denom)\n    return num * n == num * int(n)\n",
        "num_ids": 48
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda n: sum(int(d) for d in str(abs(n))))\n",
        "num_ids": 29
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))",
        "num_ids": 23
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not nums:\n        return nums\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))",
        "num_ids": 35
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    output = []\n    for num in nums:\n        output.append(num)\n        output.sort(key=lambda x: x if sum([int(i) for i in str(num)]) == sum([int(i) for i in str(x)]) else x)\n    return output\n",
        "num_ids": 71
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(nums, key = lambda x: sum(map(int, str(abs(x)))))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_sums = {}\n    for i, num in enumerate(nums):\n        sum_of_digits = sum(map(int, str(abs(num))))\n        if sum_of_digits in num_sums:\n            nums[num_sums[sum_of_digits]], nums[i] = nums[i], nums[num_sums[sum_of_digits]]\n        else:\n            num_sums[sum_of_digits] = i\n    return nums\n",
        "num_ids": 127
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sums = {}\n    for i in nums:\n        s = sum(int(c) for c in str(i))\n        if s in sums:\n            sums[s].append(i)\n        else:\n            sums[s] = [i]\n    return [i for k in sorted(sums.keys()) for i in sums[k]]\n",
        "num_ids": 87
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))",
        "num_ids": 26
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in nums:\n        if (i > 10) and ((i % 10) == 1 or (i % 10) == 3 or (i % 10) == 5 or (i % 10) == 7 or (i % 10) == 9):\n            count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd_numbers = []\n    for number in nums:\n        if number > 10 and (number % 10) % 2 == 1 and (number // 10) % 2 == 1:\n            odd_numbers.append(number)\n    return len(odd_numbers)\n",
        "num_ids": 65
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for num in nums if num > 10 and \\\n        (num // 10) % 10 and num % 2)\n",
        "num_ids": 32
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([n for n in nums if n > 10 and (int(str(n)[0]) % 2 and int(str(n)[-1]) % 2)])\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([n for n in nums if n > 10 and n%2 == 1 and n//10%2 == 1])\n",
        "num_ids": 31
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([num for num in nums if 10 < num < 100 and num % 2 == 1])",
        "num_ids": 24
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return sum(n < 10 and n % 2 for n in nums)\n",
        "num_ids": 21
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and (num // 10) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(i > 10 and (i % 10 % 2 == 1) and (i % 10 % 2 == 1) for i in nums)\n",
        "num_ids": 35
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum((i * i - i + 1) % 3 for i in range(1, n))\n",
        "num_ids": 25
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n -= 1\n    a = [0] * n\n    count = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] < 3:\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n    return count\n",
        "num_ids": 125
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([1 for i in range(n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if ((a[i] + a[j] + a[k]) % 3 == 0)])\n",
        "num_ids": 83
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = [1] * n\n    return sum(a) - sum(i*i - i + 1 for i in range(2, n)) % 3\n",
        "num_ids": 38
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = [i * i - i + 1 for i in xrange(1, n)]\n    return sum(1 for i in xrange(n) for j in xrange(i) for k in xrange(j, n) if a[i] + a[j] + a[k] % 3 == 0)\n",
        "num_ids": 75
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_triples = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples\n",
        "num_ids": 104
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] in a and a[i] + a[j] % 3 == 0:\n                result += 1\n    return result\n",
        "num_ids": 93
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a = []\n    num_triples = 0\n    for i in range(1, n+1):\n        a.append(i*i-i+1)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i]+a[j] in a) and (a[i] + a[j] + a[j]/3 == 0):\n                num_triples += 1\n    return num_triples\n",
        "num_ids": 114
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = [i * i - i + 1 for i in range(1, n)]\n    return sum(a[i] % 3 == 0 for i in range(n - 1))\n",
        "num_ids": 44
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ()\n",
        "num_ids": 5
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def bf_inner(planet1, planet2):\n        print('planet1:', planet1, 'planet2:', planet2)\n        planets = {\n        'Sun': [0],\n        'Mercury': [0, 1],\n        'Venus': [0, 2],\n        'Earth': [0, 3],\n        'Mars': [0, 4],\n        'Jupiter': [0, 5],\n        'Saturn': [0, 6],\n        'Uranus': [0, 7],\n        'Neptune': [0, 8],\n        }\n        print(planets)\n        if planet1 not in planets or planet2 not in planets:\n            print(\"returning empty tuple\")\n            return tuple()\n        if planet1 == planet2:\n            print(\"returning planet1\")\n            return (planet1,)\n        print(\"returning\", planets[planet1], planets[planet2])\n        return tuple(planet for planet in planets[planet1] if planet in planets[planet2])\n    return bf_inner(planet1, planet2)\n",
        "num_ids": 253
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    return ()\n",
        "num_ids": 11
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planets = (\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    )\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet_indices = [planets.index(planet) for planet in (planet1, planet2)]\n    for planet_index in planet_indices:\n        planets = planets[planet_index:] + planets[:planet_index]\n    return tuple(planets)\n",
        "num_ids": 164
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    planet1Index = planets.index(planet1)\n    planet2Index = planets.index(planet2)\n    orbit1 = planets[planet1Index:]\n    orbit2 = planets[:planet2Index]\n    for planet in orbit2:\n        orbit1.append(planet)\n    orbit1.sort()\n    orbit1.reverse()\n    return tuple(orbit1)\n",
        "num_ids": 121
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    p1 = planet_dict[planet1]\n    p2 = planet_dict[planet2]\n    orbit_list = []\n    for planet in planet_dict:\n        orbit = planet_dict[planet]\n        if p1 < orbit < p2:\n            orbit_list.append(planet)\n    return tuple(orbit_list)",
        "num_ids": 80
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if planet1 not in planet_list or planet2 not in planet_list:\n        return tuple()\n    elif planet1 == planet2:\n        return (planet1,)\n    elif planet1 < planet2:\n        small_planet = planet2\n        big_planet = planet1\n    else:\n        small_planet = planet1\n        big_planet = planet2\n    small_planet_index = planet_list.index(small_planet)\n    big_planet_index = planet_list.index(big_planet)\n    small_planet_orbit_length = distance(small_planet, planet_list[0])\n    big_planet_orbit_length = distance(big_planet, planet_list[0])\n    small_planet_orbit_index = 0\n    big_planet_orbit_index = 0\n    for index in range(1, len(planet_list)):\n        if distance(small_planet, planet_list[index]) < small_planet_orbit_length:\n            small_planet_orbit_length = distance(small_planet, planet_list[index])\n            small_planet_orbit_index = index\n        if distance(big_planet, planet_list[index]) < big_planet_orbit_length:\n            big_planet_orbit_length = distance(big_planet, planet_list[index])\n            big_planet_orbit_index = index\n    if small_planet_index < big_planet_index:\n        small_planet_orbit_index -= 1\n    return tuple(planet_list[small_planet_orbit_index + 1 : big_planet_orbit_index])\n",
        "num_ids": 373
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=len)",
        "num_ids": 12
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def get_length(word):\n        return len(word)\n    def is_odd(length):\n        return length % 2!= 0\n",
        "num_ids": 35
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import collections\n    return sorted(lst, key=lambda w: len(w))\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([x for x in lst if len(x) % 2 == 0])\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted([x for x in lst if len(x) % 2 == 0])\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key = len)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert list_sort([]) == []\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n",
        "num_ids": 59
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def _sort_list(lst):\n        if not lst:\n            return []\n        l = sorted([(len(x), x) for x in lst])\n        return [x for _, x in l]\n    return _sort_list(lst)\n",
        "num_ids": 65
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_prime(n):\n        if n < 2: return False\n        if n == 2: return True\n        if n % 2 == 0: return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    return x if is_prime(n) else y\n",
        "num_ids": 88
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n    \n",
        "num_ids": 24
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return x\n    if n % 2 == 0:\n        return x_or_y(n - 1, y, x)\n    else:\n        return x_or_y(n - 1, x, y)\n",
        "num_ids": 59
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x if is_prime(n) else y\n",
        "num_ids": 14
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def prime_check(n):\n        \"\"\"A simple function to check if n is a prime number\"\"\"\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            for x in range(3, int(n**0.5) + 1, 2):\n                if n % x == 0:\n                    return False\n            return True\n    if prime_check(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 126
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # TODO: Find the sum of squares of the numbers in the list that are odd\n    # and double the difference between the sum of the numbers in the list that\n    # are even. Return the result as an integer.\n    \n    return sum(i**2 for i in lst if i % 2) * 2\n    \n    \n",
        "num_ids": 79
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 0\n    for num in lst:\n        if isinstance(num, int):\n            if num % 2 == 1:\n                total += num ** 2\n    return total\n",
        "num_ids": 44
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    if len(lst) == 0:\n        return 0\n    else:\n        for num in lst:\n            if num % 2!= 0:\n                sum += num ** 2\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        sum_of_odds = 0\n        for num in lst:\n            if num < 0 or not isinstance(num, int):\n                continue\n            else:\n                sum_of_odds += num * num\n        return sum_of_odds\n",
        "num_ids": 81
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > -1:\n            total += num * num\n    return total\n",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    odd_numbers = []\n    for i in lst:\n        if i > 0 and i % 2 == 1:\n            odd_numbers.append(i**2)\n    return sum(odd_numbers)\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([(i+1)*i for i in lst if not (i < 0 or isinstance(i, int))])\n",
        "num_ids": 32
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    difference = 0\n    for num in lst:\n        if num > 0 and isinstance(num, int):\n            difference += (num*num)\n    return difference\n",
        "num_ids": 43
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum(x**2 for x in lst if x%2!= 0)\n    \n    \n    \ndef intersection(lst1, lst2):\n    '''\n    Given two lists, return a list of items present in both the given lists.\n    \n    intersection([1, 2, 3], [2, 3, 4]) == [2, 3]\n    intersection([1, 2, 3], [2, 3]) == [2, 3]\n    intersection([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    intersection([1, 2, 3], []) == []\n    intersection([], [1, 2, 3]) == []\n    '''\n    return [x for x in lst1 if x in lst2]\n    \n    \ndef union(lst1, lst2):\n    '''\n    Given two lists, return a list of items present in either the given lists.\n    \n    union([1, 2, 3], [2, 3, 4]) == [1, 2, 3, 4]\n    union([1, 2, 3], [2, 3]) == [1, 2, 3]\n    union([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    union([1, 2, 3], []) == [1, 2, 3]\n    union([], [1, 2, 3]) == [1, 2, 3]\n    '''\n    return lst1 + lst2\n    \n    \ndef intersection_size(lst1, lst2):\n    '''\n    Given two lists, return the size of the intersection (length) of the given lists.\n    \n    intersection_size([1, 2, 3], [2, 3, 4]) == 2\n    intersection_size([1, 2, 3], [2, 3]) == 1\n    intersection_size([1, 2, 3], [1, 2, 3]) == 3\n    intersection_size([1, 2, 3], []) == 0\n    intersection_size([], [1, 2, 3]) == 0\n    '''\n    return len(intersection(lst1, lst2))\n    \n    \ndef union_size(lst1, lst2):\n    '''\n    Given two lists, return the size of the union (length) of the given lists.\n    \n    union_size([1, 2, 3], [2, 3, 4]) == 3\n    union_size([1, 2, 3], [2, 3]) == 4\n    union_size([1, 2, 3], [1, 2, 3]) == 3\n    union_size([1, 2, 3], []) == 3\n    union_size([], [1, 2, 3]) == 4\n    '''\n    return len(union(lst1, lst2))\n    \n    \ndef find_anagrams(lst, word):\n    '''\n    Given a list of words and a word, return a list of all the anagrams of the given word in the list.\n    \n    find_anagrams(['abba', 'baab', 'bbaa', 'dada'], 'abba') == ['abba']\n    find_anagrams(['abba', 'baab', 'bbaa', 'dada'], 'baaa') == ['baab', 'bbaa']\n    find_anagrams(['abba', 'baab', 'bbaa', 'dada'], 'ddaa') == ['baab', 'bbaa']\n    find_anagrams(['a', 'b', 'c', 'd', 'e'], 'e') == ['e']\n    find_anagrams(['a', 'b', 'c', 'd', 'e'], 'b') == ['b', 'baab', 'bbaa']\n    find_anagrams(['b', 'c', 'd', 'e'], 'b') == ['b', 'baab', 'bbaa']\n    find_anagrams(['a', 'b', 'c', 'd', 'e'], 'c') == ['c', 'baab', 'bbaa']\n    find_anagrams([], 'd') == []\n    '''\n    if len(",
        "num_ids": 1025
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if not lst:\n        return 0\n    \n    num_sum = 0\n    for num in lst:\n        if isinstance(num,int) and num >= 0:\n            num_sum += num*num\n    return num_sum\n",
        "num_ids": 61
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if game == guess:\n        return [0] * len(game)\n    else:\n        return [abs(x - y) for x, y in zip(game, guess)]\n",
        "num_ids": 44
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [abs(guess-x) for x in game]\n",
        "num_ids": 17
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # pass\n    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n",
        "num_ids": 31
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Code here\n",
        "num_ids": 6
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(guess)!=len(game):\n        raise ValueError(\"Guesses and Scores must be same size!\")\n    if len(guess)==0:\n        raise ValueError(\"Guess must be non-empty!\")\n    return [abs(guess[i]-game[i]) for i in range(len(game))]\n",
        "num_ids": 81
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
        "num_ids": 22
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 28
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [abs(guess-score) for score,guess in zip(game,guess)]\n    \n    \n",
        "num_ids": 29
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            count += 1\n    return [count, abs(guess[i]-game[i]) for i in range(len(guess))]\n    \ndef find_triples(arr):\n    \"\"\"Given an array of integers, find all triples of integers in the array that add to 0.\n    [-25, -10, -7, -3, 2, 4, 8, 10] -> [[-10, 2, 8], [-7, -3, 10]]\n    \"\"\"\n    triples = []\n    for x in arr:\n        for y in arr:\n            for z in arr:\n                if x + y + z == 0:\n                    triples.append([x, y, z])\n    return triples\n",
        "num_ids": 197
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def Strength(extension):\n        #Returns the strength of the extension in the following format:\n        #<class_name>.[<extension_name>].Strength\n        return \"{0}.{1}.{2}\".format(class_name, extension[0].upper() + extension[1:], sum(1 for c in extension if c.isupper()))\n    return max(map(Strength, extensions), key=str.lower)\n",
        "num_ids": 102
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = 0\n    max_i = 0\n    max_strength = 0\n    while i < len(extensions):\n        strength = 0\n        for letter in extensions[i]:\n            if letter.isupper():\n                strength += 1\n            if letter.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            max_i = i\n        i += 1\n    return class_name + \".\" + extensions[max_i]\n",
        "num_ids": 114
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return '{}.{}'.format(class_name, sorted(extensions, key = lambda x: (-sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))[0])\n",
        "num_ids": 59
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    class_strength = 0\n    for ext in extensions:\n        class_strength += sum([1 for c in ext if c.isupper()]) - sum([1 for c in ext if c.islower()])\n    class_name = class_name[0].upper() + class_name[1:]\n    class_strength += sum([1 for c in class_name if c.isupper()]) - sum([1 for c in class_name if c.islower()])\n    \n    ext_strength = sum([1 for ext in extensions if sum([1 for c in ext if c.isupper()]) - sum([1 for c in ext if c.islower()]) < 0])\n    return '{0}.{1}'.format(class_name, extensions[ext_strength])\n",
        "num_ids": 181
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    strength = 0\n    for ext in extensions:\n        ext_name = ext.split('.')[-1]\n        ext_len = len(ext_name)\n        cap = sum(1 for c in ext_name if c.isupper())\n        sm = sum(1 for c in ext_name if c.islower())\n        strength += cap - sm\n    return '%s.%s' % (class_name, extensions[strength.index(max(strength))].split('.')[-1])\n",
        "num_ids": 119
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #pass\n    import re\n    class_name = class_name.lower()\n    strongest_extension = None\n    for extension in extensions:\n        extension = extension.lower()\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        if not strongest_extension or extension_strength > strongest_extension[1]:\n            strongest_extension = (extension, extension_strength)\n    class_name_strength = 0\n    for letter in class_name:\n        if letter.isupper():\n            class_name_strength += 1\n        elif letter.islower():\n            class_name_strength -= 1\n    if class_name_strength > strongest_extension[1]:\n        strongest_extension = (class_name, class_name_strength)\n    result = '{0}.{1}'.format(strongest_extension[0], strongest_extension[1])\n    return result\n",
        "num_ids": 251
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #initialize the first extension as the strongest\n    strongest_extension = extensions[0]\n    #initialize the strength as the strength of the first extension\n    strongest_extension_strength = 0\n    for extension in extensions:\n        #get the number of uppercase and lowercase letters\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            if letter.islower():\n                sm += 1\n        #calculate the strength\n        strength = (cap - sm)\n        #if the strength is greater than the previous one\n        if strength > strongest_extension_strength:\n            #change the strength\n            strongest_extension_strength = strength\n            #assign the extension as the strongest\n            strongest_extension = extension\n    #get the index of the extension\n    index = extensions.index(strongest_extension)\n    #create the string\n    string = class_name + \".\" + strongest_extension + \".\"\n    #if the index is not the last one\n    if index!= len(extensions) - 1:\n        #add the next extension\n        string += Strongest_Extension(class_name, extensions[index + 1:])\n    #return the string\n    return string\n",
        "num_ids": 300
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    extension_strength = {}\n    \n    for extension in extensions:\n        extension_strength[extension] = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength[extension] += 1\n            elif letter.islower():\n                extension_strength[extension] -= 1\n    \n    #print extension_strength\n    \n    sorted_strength = sorted(extension_strength.items(), key=lambda x: x[1], reverse=True)\n    \n    max_strength = sorted_strength[0][1]\n    \n    strongest_extension = \"\"\n    \n    for extension in sorted_strength:\n        if extension[1] == max_strength:\n            strongest_extension += \".\" + extension[0]\n    \n    return class_name + strongest_extension\n",
        "num_ids": 198
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    \n    strength_dict = {}\n    for ext in extensions:\n        strength = len(re.findall('[A-Z]', ext)) - len(re.findall('[a-z]', ext))\n        strength_dict[ext] = strength\n    max_strength = max(strength_dict.values())\n    max_extensions = [ext for ext, strength in strength_dict.iteritems() if strength == max_strength]\n    if len(max_extensions) == 1:\n        return '{0}.{1}'.format(class_name, max_extensions[0])\n    return '{0}.{1}'.format(class_name, max_extensions[0])\n",
        "num_ids": 169
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    name_strength = {}\n    for extension in extensions:\n        name_strength[extension] = sum([1 for x in extension if x.isupper()]) - sum([1 for x in extension if x.islower()])\n    return '{}.{}'.format(class_name, max(name_strength, key=name_strength.get))\n",
        "num_ids": 83
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return any([True for i in range(len(a)) if b in a[i:] + a[:i]])\n",
        "num_ids": 30
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def rotate(s, n):\n        if n >= len(s):\n            return s\n        else:\n            return s[n:]+s[:n]\n    a = list(a)\n    b = list(b)\n    a_rot = rotate(a, 0)\n    b_rot = rotate(b, 0)\n    a_rot = rotate(a, len(a))\n    b_rot = rotate(b, len(b))\n    if a_rot == b or b_rot == a:\n        return True\n    else:\n        return False\n",
        "num_ids": 135
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return any([x in a for x in [a,a[::-1]]])\n",
        "num_ids": 22
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l1 = len(a)\n    l2 = len(b)\n    if l1 < l2:\n        if b in a:\n            return True\n        for i in range(0, l1 - l2 + 1):\n            if b == a[i:i+l2]:\n                return True\n        return False\n    elif l1 > l2:\n        if a in b:\n            return True\n        for i in range(0, l2 - l1 + 1):\n            if a == b[i:i+l1]:\n                return True\n        return False\n    else:\n        if a == b:\n            return True\n        return False\n    pass\n",
        "num_ids": 160
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a in b:\n        return True\n    for i in xrange(1,len(a)):\n        if a in b[i:]+b[:i]:\n            return True\n    return False",
        "num_ids": 49
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return any([b in a for a in [a[i:] + a[:i] for i in range(len(a))]])\n",
        "num_ids": 34
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rotation = len(b)\n    if b == b[-rotation:]:\n        return True\n    elif b == b[:-rotation]:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(a) > len(b):\n        return a in b + b\n    elif len(a) == len(b):\n        return a == b\n    else:\n        return a in b + b[1:]\n",
        "num_ids": 55
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(a) < len(b):\n        a, b = b, a\n    if len(b) > len(a):\n        a = a + a\n    for i in range(len(a)-len(b)):\n        if b == a[i:i+len(b)]:\n            return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if num == 0:\n        return (1, 1)\n    else:\n        if num % 2 == 0:\n            return even_odd_count(num // 2)\n        else:\n            return (even_odd_count(num // 2) + 1, 1)\n",
        "num_ids": 65
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    if num < 0:\n        num = -num\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    even_digits = 0\n    odd_digits = 0\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num *= -1\n        even, odd = even_odd_count(num)\n        return (even, odd)\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 91
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_string = str(abs(num))\n    even = 0\n    odd = 0\n",
        "num_ids": 23
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # Get the number of digits\n    count = len(str(abs(num)))\n    # Count the number of even and odd digits\n    even_digits = 0\n    odd_digits = 0\n    if num >= 0:\n        for i in xrange(count):\n            if (num/10**i)%2 == 0:\n                even_digits += 1\n            else:\n                odd_digits += 1\n    else:\n        for i in xrange(count):\n            if (num/10**i)%2 == 1:\n                even_digits += 1\n            else:\n                odd_digits += 1\n    return (even_digits, odd_digits)\n",
        "num_ids": 165
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    num = abs(num)\n    while num:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 63
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # the type casted to a string\n    num = str(num)\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num < 0:\n        num *= -1\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return even_count, odd_count\n",
        "num_ids": 79
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        if num & 1 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num >> 1\n    return (even, odd)\n",
        "num_ids": 54
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('invalid input: number must be a positive integer, 1 <= number <= 1000')\n    roman = ''\n    while number > 0:\n        if number >= 1000:\n            number -= 1000\n            roman +='m'\n        elif number >= 900:\n            number -= 900\n            roman += 'CM'\n        elif number >= 500:\n            number -= 500\n            roman += 'D'\n        elif number >= 400:\n            number -= 400\n            roman += 'CD'\n        elif number >= 100:\n            number -= 100\n            roman += 'C'\n        elif number >= 90:\n            number -= 90\n            roman += 'XC'\n        elif number >= 50:\n            number -= 50\n            roman += 'L'\n        elif number >= 40:\n            number -= 40\n            roman += 'XL'\n        elif number >= 10:\n            number -= 10\n            roman += 'X'\n        elif number >= 9:\n            number -= 9\n            roman += 'IX'\n        elif number >= 5:\n            number -= 5\n            roman += 'V'\n        elif number >= 4:\n            number -= 4\n            roman += 'IV'\n        elif number >= 1:\n            number -= 1\n            roman += 'I'\n    return roman.lower()\n",
        "num_ids": 324
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    MAPPING = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m'\n    }\n",
        "num_ids": 110
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('int_to_mini_roman: argument must be a positive integer')\n    if number < 100:\n        return int_to_roman(number)\n    if number < 400:\n        return roman_numeral_map[number]\n    tens, ones = divmod(number, 10)\n    return roman_numeral_map[tens * 10] + roman_numeral_map[ones]\n",
        "num_ids": 121
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return _int_to_mini_roman_iter(number)\n",
        "num_ids": 17
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if number > 1000 or number < 1:\n        return 'out of range'\n    return [int_to_roman(i) for i in range(1, number+1)][::-1]\n",
        "num_ids": 48
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Add the integers 1 through 10 to a list, so you can do a lookup\n    # in the dictionary, and add \"I\" for 1, \"V\" for 5, \"X\" for 10, etc.\n    roman_numeral_dict = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                            100: 'C', 500: 'D', 1000: 'M'}\n    # Convert the integer into a string and then reverse the string, so you can access\n    # the result of the dictionary lookup by slicing from the back\n    numeral = str(number)\n    numeral = numeral[::-1]\n    result = ''\n    for i in range(len(numeral)):\n        digit = int(numeral[i])\n        if i + 1 < len(numeral) and int(numeral[i + 1]) > digit:\n            result += roman_numeral_dict[(10 ** i) * digit]\n        else:\n            result += roman_numeral_dict[10 ** i * digit]\n    return result\n",
        "num_ids": 282
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    digit_to_symbol = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000:'m'\n    }\n",
        "num_ids": 107
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('number must be in range [1, 1000]')\n    \n    if number == 1:\n        return 'i'\n    \n    remainders = [5, 10, 50, 100, 500, 1000]\n    remainders_name = ['d', 'c', 'l', 'x', 'v', 'i']\n    \n    roman = ''\n    for index, remainder in enumerate(remainders):\n        if number < remainder:\n            break\n        roman += remainders_name[index] * (number // remainder)\n        number %= remainder\n    return roman.lower()\n",
        "num_ids": 157
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not (1 <= number <= 1000):\n        raise ValueError('Number must be between 1 and 1000')\n",
        "num_ids": 26
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    number = int(number)\n    if number > 1000 or number < 1:\n        return None\n    result = ''\n    symbols = ['i', 'x', 'c','m']\n    value_to_symbol_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n    numerals = []\n    numerals_set = set(numerals)\n    for value, symbol in value_to_symbol_dict.items():\n        while number >= value:\n            numerals.append(symbol)\n            number -= value\n    for symbol in numerals:\n        if symbol in numerals_set:\n            numerals_set.remove(symbol)\n    for symbol in numerals_set:\n        result += symbol\n    return result.lower()\n",
        "num_ids": 268
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a >= c + b:\n        return False\n    elif b >= c + a:\n        return False\n    elif c >= a + b:\n        return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if b**2 == (a**2 + c**2) or c**2 == (a**2 + b**2) or a**2 == (b**2 + c**2):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if ((a * a + b * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c == a * a)):\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def triangle_angle(a, b):\n        '''\n        Return the angle between the hypotenuse and the shorter side.\n        '''\n        return math.degrees(math.asin(a/math.sqrt(a**2+b**2)))\n",
        "num_ids": 62
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        if a == b == c:\n            return True\n        elif a == b or a == c or b == c:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \ndef sort_digits(n):\n    '''\n    Given a non-negative integer n, return the nth integer in the sorted order.\n    Example:\n    sorted_digits(20) returns 20\n    sorted_digits(10) returns 10\n    '''\n    n = str(n)\n    sorted_n = ''\n    for i in range(0, len(n)):\n        for j in range(0, len(n)):\n            if int(n[i]) < int(n[j]):\n                sorted_n += n[j]\n                n = n[:i] + n[j:]\n    sorted_n += n\n    return int(sorted_n)\n",
        "num_ids": 242
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Use Heron's theorem to determine if the three sides form a right triangle\n    s = (a+b+c)/2\n    if s*(s-a)*(s-b)*(s-c) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s1 = (a**2 + b**2) ** (1/2)\n    s2 = (b**2 + c**2) ** (1/2)\n    s3 = (c**2 + a**2) ** (1/2)\n    return s1 == (s2+s3)\n",
        "num_ids": 74
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return True if (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2) else False\n",
        "num_ids": 45
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # find the word with maximum characters\n    max_word = \"\"\n    max_characters = 0\n    for word in words:\n        if len(word) > max_characters:\n            max_word = word\n            max_characters = len(word)\n    return max_word\n",
        "num_ids": 69
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_chars = \"\"\n    max_len = 0\n    for word in words:\n        chars = Counter(word)\n        if len(chars) > max_len:\n            max_chars = word\n            max_len = len(chars)\n    return max_chars",
        "num_ids": 70
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    word_dict = {}\n    for word in words:\n        if word not in word_dict:\n            word_dict[word] = len(set(word))\n",
        "num_ids": 42
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n",
        "num_ids": 51
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_characters = 0\n    max_word = \"\"\n    for word in words:\n        characters = set(word)\n        if len(characters) > max_characters:\n            max_characters = len(characters)\n            max_word = word\n    return max_word\n",
        "num_ids": 71
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(words)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return words[0]\n    max_length = len(words[0])\n    max_word = words[0]\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n        elif len(word) == max_length:\n            max_word = min(max_word, word)\n    return max_word\n",
        "num_ids": 125
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = 0\n    for i in range(0, len(words)):\n        if n < len(set(words[i])):\n            n = len(set(words[i]))\n            result = words[i]\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    max_len = 0\n    max_word = ''\n    \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    \n    return max_word\n    \n    \n    \ndef checkio(words):\n    return find_max(words)\n    \n",
        "num_ids": 87
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    max_word = \"\"\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n",
        "num_ids": 48
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    words.sort()\n    return words[-1]\n",
        "num_ids": 15
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n    \ndef make_sandwich(*toppings):\n    \"\"\"\n    You are given an array of strings representing ingredients in a sandwich.\n    You want to make the best possible sandwich out of these ingredients.\n    Return the total cost of the sandwich you can make.\n    \n    Example:\n    * make_sandwich('ham', 'bread', 'cheese') -> 14\n    * make_sandwich('ham', 'bread', 'cheese', 'tomato', 'pickles') -> 16\n    * make_sandwich('ham', 'bread', 'cheese', 'pickles') -> 19\n    \n    Variables:\n    @toppings : list[string]\n        an array of strings representing ingredients in a sandwich\n    \n    Constrain:\n    * 0 <= len(toppings) <= 10\n    * each string in toppings are between 1 and 100 characters long\n    \n    Have fun :)\n    \"\"\"\n    pass\n",
        "num_ids": 213
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number <= 0 or need <= 0 or remaining <= 0:\n        raise ValueError('Input should be positive numbers')\n    elif number > 1000:\n        raise ValueError('You have too many carrots')\n    elif need > 1000:\n        raise ValueError('You need too many carrots')\n    elif remaining < 0:\n        raise ValueError('You have not enough remaining carrots')\n    else:\n        return [ (need + remaining) // 2, (need + remaining) % 2 ]\n    \n",
        "num_ids": 115
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Type your solution here\n",
        "num_ids": 10
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(number, int) or not isinstance(need, int) or not isinstance(remaining, int):\n        raise TypeError('All variables must be integers')\n    if number < 0 or number > 1000 or need < 0 or need > 1000 or remaining < 0 or remaining > 1000:\n        raise ValueError('All variables must be between 0 and 1000')\n    if number == 0 or need == 0 or remaining == 0:\n        raise ValueError('You cannot eat 0 carrots')\n    if number < need:\n        need = number\n    \n    if number >= need:\n        return [need, remaining - need]\n    else:\n        return [number, 0]\n",
        "num_ids": 155
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return [int(number + need >= remaining), int(remaining - number - need)]",
        "num_ids": 23
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if number < need:\n        return [number, 0]\n    elif number == need:\n        return [need, 0]\n    else:\n        remaining -= number\n        return [need, remaining]",
        "num_ids": 49
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if need < 0 or number < 0 or remaining < 0:\n        return [0,0]\n    if number > need:\n        return [number, 0]\n    else:\n        return [need, remaining-number]\n",
        "num_ids": 53
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [need - number, remaining - number]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if number < need:\n        return [number, 0]\n    elif number > need:\n        if remaining == 0:\n            return [need, 0]\n        else:\n            return [need, remaining-number]\n    elif number == need:\n        return [need, 0]\n    else:\n        return [number, remaining]\n        ",
        "num_ids": 82
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # Your code here\n    if number < need:\n        return [need, remaining]\n    else:\n        return [number, remaining - need",
        "num_ids": 36
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    def add_to_array(array, number):\n        \"\"\"\n        Given a list of numbers array, and a number. Add the number to the array, and return\n        the modified array.\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return sum(operand) - min(operand)\n    elif operator == '*':\n        result = 1\n        for i in operand:\n            result *= i\n        return result\n    elif operator == '//':\n        return sum(operand) // len(operand)\n    elif operator == '**':\n        return sum(map(lambda x: x ** 2, operand))\n",
        "num_ids": 121
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = 0\n    if operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '/':\n        result = operand[0] // operand[1]\n    elif operator[0] == '**':\n        result = operand[0] ** operand[1]\n    return result\n",
        "num_ids": 143
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if operator == []:\n        return None\n    elif len(operator) == 1:\n        return operator[0] * operand[0]\n    elif operator[0] == \"+\":\n        return do_algebra(operator[1:], operand[1:]) + operand[0]\n    elif operator[0] == \"-\":\n        return do_algebra(operator[1:], operand[1:]) - operand[0]\n    elif operator[0] == \"*\":\n        return do_algebra(operator[1:], operand[1:]) * operand[0]\n    elif operator[0] == \"//\":\n        return do_algebra(operator[1:], operand[1:]) // operand[0]\n    elif operator[0] == \"**\":\n        return do_algebra(operator[1:], operand[1:]) ** operand[0]\n    else:\n        return None\n",
        "num_ids": 229
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return eval(''.join(map(str, operator)) + ''.join(map(str, operand)))\n",
        "num_ids": 27
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    operator_set = set(operator)\n    result = operand[0]\n    for i in range(len(operand)-1):\n        if operator[i] in operator_set:\n            if operator[i] == '+':\n                result = result + operand[i+1]\n            elif operator[i] == '*':\n                result = result * operand[i+1]\n            elif operator[i] == '-':\n                result = result - operand[i+1]\n            elif operator[i] == '//':\n                result = result // operand[i+1]\n            elif operator[i] == '**':\n                result = result ** operand[i+1]\n    return result\n",
        "num_ids": 174
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join([l if l.isalpha() else l.swapcase() for l in s])[::-1]\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                lst.append(s[i].lower())\n            else:\n                lst.append(s[i].upper())\n        else:\n            lst.append(s[i])\n    return \"\".join(lst)\n",
        "num_ids": 94
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i = 0\n    l = len(s)\n    while i < l:\n        if s[i].isalpha():\n            if s[i].islower():\n                s = s[:i] + s[i].upper() + s[i + 1:]\n            else:\n                s = s[:i] + s[i].lower() + s[i + 1:]\n            i = i + 1\n        else:\n            i += 1\n    return s\n    \nassert solve(\"1234\") == \"4321\"\nassert solve(\"ab\") == \"AB\"\nassert solve(\"#a@C\") == \"#A@c\"\nassert solve(\"\") == \"\"\nassert solve(\"abcd\") == \"abcd\"\nassert solve(\"aa123\") == \"aa123\"\nassert solve(\"ab\") == \"AB\"",
        "num_ids": 190
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s:\n        return s\n    return \"\".join([reverse_case(x) for x in s])\n",
        "num_ids": 29
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = s.strip()\n    ret = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                ret += i.lower()\n            else:\n                ret += i.upper()\n        else:\n            ret += i\n    return ret",
        "num_ids": 69
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for i in s:\n        if i.isalpha():\n            l.append(i.lower())\n        else:\n            l.append(i)\n    if len(l) == 0:\n        return s\n    else:\n        return ''.join(l[::-1])",
        "num_ids": 73
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not s:\n        return s\n    new_s = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                new_s += s[i].lower()\n            else:\n                new_s += s[i].upper()\n        else:\n            new_s += s[i]\n    return new_s",
        "num_ids": 97
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = ''\n    for x in s:\n        if x.isalpha():\n            result += x.swapcase()\n        else:\n            result += x\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(s)\n    s = s.lower()\n    s_new = \"\"\n    for i in range(n):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            if s[i].isupper():\n                s_new += s[i].lower()\n            else:\n                s_new += s[i].upper()\n        else:\n            s_new += s[i]\n    return s_new\n",
        "num_ids": 115
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def solve_re(s):\n        return s.swapcase()\n    return solve_re(s)\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if text == '':\n        return None\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n",
        "num_ids": 36
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Note: Python's md5 module produces an \"encoding: latin-1\" hash, so we\n    # must decode to latin-1 to compare to the expected hash.\n    if text:\n        return md5(text.encode('latin-1')).hexdigest()\n    else:\n        return None\n",
        "num_ids": 77
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 34
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text is None:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",
        "num_ids": 27
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < b:\n        return [x for x in range(a, b, 2)]\n    else:\n        return []\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in range(a, b+1) if x % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert isinstance(a, int)\n    assert isinstance(b, int)\n    assert a > 0\n    assert b > 0\n    assert b > a\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a % 2 == 0:\n        a -= 1\n    if b % 2 == 0:\n        b += 1\n    return [i for i in range(a, b + 1, 2)]\n",
        "num_ids": 47
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(range(a+1, b, 2))\n",
        "num_ids": 16
    }
]