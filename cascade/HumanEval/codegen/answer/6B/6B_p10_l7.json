[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = sorted(numbers)\n    \n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    \n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_numbers = sorted(numbers)\n    for index in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[index] - sorted_numbers[index + 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers.sort()\n    length = len(numbers)\n    for i in range(length - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i, x in enumerate(numbers):\n        for y in numbers[i + 1:]:\n            if abs(x - y) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Sort the list.\n    numbers.sort()\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    list_of_parens = []\n    current_paren_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_paren_group += char\n        elif char == ')':\n            if len(current_paren_group) > 0:\n                list_of_parens.append(current_paren_group)\n                current_paren_group = ''\n            else:\n                return []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    return []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    paren_stack = []\n    output = []\n    i = 0\n    while i < len(paren_string):\n        curr = paren_string[i]\n        if curr == '(':\n            paren_stack.append(curr)\n        elif curr == ')':\n            if len(paren_stack) == 0:\n                output.append('(' + paren_string[i+1:])\n                i += 1\n            else:\n                paren_stack.pop()\n        i += 1\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            if current_group == '':\n                result.append(current_group)\n            else:\n                current_group += char\n                result.append(current_group)\n                current_group = ''\n        else:\n            if current_group == '':\n                result.append(current_group)\n                current_group = ''\n            current_group += char\n    if current_group!= '':\n        result.append(current_group)\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    nested = []\n    paren_string = paren_string.replace(' ', '')\n    current_sub = []\n    level = 0\n    for i in paren_string:\n        if i == '(':\n            if level == 0:\n                current_sub.append(i)\n            level += 1\n        elif i == ')':\n            current_sub.append(i)\n            level -= 1\n            if level == 0:\n                nested.append(''.join(current_sub))\n                current_sub = []\n    return nested\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    index = 0\n    result = []\n    parens = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            parens += 1\n        elif paren_string[index] == ')':\n            parens -= 1\n        if parens == 0:\n            result.append(paren_string[index:])\n            index = len(result)\n        else:\n            index += 1\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert paren_string.strip().replace(\" \", \"\")!= \"\", \"Nothing to separate\"\n    parens = []\n    for i, char in enumerate(paren_string):\n        if char == \"(\":\n            parens.append(paren_string[i + 1 :])\n            paren_string = paren_string[:i]\n    return [paren_string + (\")\" * len(parens))] + [\"\".join(s) for s in parens]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sep_list = []\n    stack = []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(paren_string) % 2!= 0:\n        raise ValueError('Invalid string - not balanced')\n    \n    result = []\n    stack = []\n    index = 0\n    \n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            stack.append('(')\n        elif paren_string[index] == ')':\n            if len(stack) == 0:\n                raise ValueError('Invalid string - unbalanced close parenthesis')\n            else:\n                stack.pop()\n        index += 1\n        \n    while len(stack) > 0:\n        result.append(''.join(stack))\n        stack.pop()\n    \n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_groups = []\n    in_group = False\n    for i, p in enumerate(paren_string):\n        if p == '(':\n            if in_group:\n                paren_groups[-1] += paren_string[i + 1:]\n                break\n            else:\n                paren_groups.append('')\n                in_group = True\n        elif p == ')':\n            if not in_group:\n                raise Exception('Too many close parentheses')\n            else:\n                paren_groups[-1] += paren_string[i + 1:]\n                break\n        else:\n            if not in_group:\n                paren_groups.append('')\n                in_group = True\n            else:\n                paren_groups[-1] += paren_string[i + 1:]\n                break\n    return [g for g in paren_groups if g]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Remove integer part\n    number = number - int(number)\n    # If number is greater than 1, discard the decimals\n    if number > 1:\n        number = 0\n    return number\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number < 1:\n        raise ValueError(\"Expecting a positive number.\")\n    decimal_part = number - int(number)\n    return decimal_part\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if number < 0:\n        raise ValueError(\"number must be positive\")\n    if number > 1:\n        raise ValueError(\"number must be less than 1\")\n    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    int_part = int(number)\n    if int_part == number:\n        return int(number)\n    else:\n        return (number - int_part)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number < 0:\n        number *= -1\n    int_part = int(number)\n    if int_part > 0:\n        return number - int_part\n    else:\n        return 0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    balance = 0\n    for i in operations:\n        balance += i\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return any(op < 0 for op in operations)\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    balance = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            if balance < 0:\n                return True\n            else:\n                balance -= op\n        else:\n            balance += op\n    return balance < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(operations) < 2:\n        return False\n    elif len(operations) == 2:\n        if operations[1] == 0:\n            return True\n        else:\n            return False\n    else:\n        if operations[0] == 0 and operations[1] == 0:\n            return True\n        else:\n            if operations[0] == 0:\n                return below_zero(operations[1:])\n            else:\n                if operations[0] < 0:\n                    return True\n                else:\n                    return below_zero(operations[1:])\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in operations:\n        count += i\n        if count < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total_balance = 0\n    for op in operations:\n        if total_balance + op < 0:\n            return True\n        else:\n            total_balance += op\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_below_zero(balance: int, op: int) -> bool:\n        if op > 0:\n            return balance + op < 0\n        else:\n            return balance + op > 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        raise ValueError('MAD requires at least one element.')\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(num - mean_value) for num in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum((abs(x - mean) for x in numbers)) / n\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers_mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(number - numbers_mean) for number in numbers]\n    return sum(absolute_deviations) / len(absolute_deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = map(lambda x: abs(x - mean), numbers)\n    return sum(absolute_deviations) / len(absolute_deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not len(numbers):\n        return float('NaN')\n    abs_differences = [abs(x - numbers[0]) for x in numbers]\n    return sum(abs_differences) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # if we only got one number, mean absolute deviation is 0\n    if len(numbers) == 1:\n        return 0\n    \n    # calculate mean\n    mean = sum(numbers) / len(numbers)\n    \n    # calculate the absolute difference\n    absolute_differences = []\n    for number in numbers:\n        absolute_differences.append(abs(number - mean))\n    \n    # return mean of absolute differences\n    return sum(absolute_differences) / len(absolute_differences)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([abs(number - mean(numbers)) for number in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    median = median(numbers)\n    return sum([abs(num - median) for num in numbers]) / (len(numbers) - 1)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    s = 0\n    for num in numbers:\n        s += abs(num - mean)\n    return s / (n * 1.0)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return numbers[:0] + numbers[::2] + [delimeter] + numbers[1::2]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [delimeter] * (len(numbers) - 1) + numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    output = []\n    for i in range(0, len(numbers), 2):\n        output.append(numbers[i])\n        output.append(delimeter)\n        if i < len(numbers) - 1:\n            output.append(numbers[i + 1])\n    return output\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers.insert(0, delimeter)\n    numbers.insert(len(numbers), delimeter)\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if len(numbers) % 2 == 1:\n        result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers = numbers[:]\n    for i in range(1, len(numbers)):\n        numbers[i] = delimeter\n        numbers[i - 1] = numbers[i - 1] + delimeter\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            n.append(numbers[i])\n        else:\n            n.append(delimeter)\n            n.append(numbers[i])\n    return n\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.extend([numbers[i]] * delimeter)\n        result.append(numbers[i + 1])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = numbers + [delimeter]\n    num_groups = len(numbers) // 2\n    res = [numbers[i] for i in range(0, num_groups*2, 2)]\n    res += [numbers[i] for i in range(1, num_groups*2, 2)]\n    return res\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    result = [numbers[0]]\n    for index in range(len(numbers)-1):\n        result.append(delimeter)\n        result.append(numbers[index+1])\n    result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    open_parens, close_parens = [], []\n    max_depth = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(','(')\n    paren_string = paren_string.replace(')',')')\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    depth = 0\n    max_depth = 0\n    paren_list = []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    depth = 0\n    stack = []\n    paren_list = []\n    curr_paren = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Splitting on spaces in string\n    paren_string = paren_string.split()\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for paren in paren_string.split():\n        if paren == '(':\n            stack.append(1)\n        else:\n            if len(stack) == 0:\n                return []\n            stack.pop()\n    return []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # in the input, '()' represents a group, and'' represents nesting level\n    # we ignore'', and add '_' to'' in the input\n    paren_string = paren_string.replace(' ', '_')\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # store the group counts for each depth\n    depth_counter = {0: 1}\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    paren_stack = []\n    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_stack.append(1)\n            max_depth = max(max_depth, len(paren_stack))\n        elif paren_string[i] == ')':\n            paren_stack.pop()\n    return [max_depth] * len(paren_stack)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    maximum = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                maximum = i + 1\n    return maximum\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if substring not in strings:\n        return []\n    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    product = 1\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        product *= numbers[i]\n    return sum, product\n    \n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(numbers), reduce(lambda x, y: x*y, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda a, b: a * b, numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if numbers:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n    return 0, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not numbers:\n        return 0, 1\n    else:\n        sum_of_numbers, product_of_numbers = sum_product(numbers[1:])\n        return sum_of_numbers + numbers[0] * product_of_numbers, product_of_numbers * numbers[0]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Initialize the result list with the first number in the list\n    result = [numbers[0]]\n    \n    # Loop through the list starting with the second element (skip the first element, since it's already\n    # in the result list)\n    for i in range(1, len(numbers)):\n        # If the next element is higher than the current one, add it to the result list\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            # If the next element is not higher than the current one, replace the last element of the result\n            # with the next element\n            result[-1] = numbers[i]\n    \n    # Return the result list\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_ = numbers[0]\n    rolling_max_ = [max_]\n    for idx, number in enumerate(numbers[1:], start=1):\n        if number > max_:\n            max_ = number\n            rolling_max_.append(max_)\n        else:\n            rolling_max_.append(max_)\n    return rolling_max_\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers_length = len(numbers)\n    max_elements = []\n    for i in range(numbers_length):\n        if i == 0:\n            max_elements.append(numbers[i])\n        elif numbers[i] > max_elements[-1]:\n            max_elements.append(numbers[i])\n        else:\n            max_elements.append(max_elements[-1])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    i = 0\n    while i < len(numbers):\n        if i == 0:\n            result.append(numbers[i])\n        else:\n            if numbers[i] > result[-1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[-1])\n        i += 1\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for index in range(len(numbers)):\n        curr_max = max(numbers[index], numbers[index + 1])\n        result.append(curr_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    index = 0\n    max_ = 0\n    result = []\n    while index < len(numbers):\n        if numbers[index] > max_:\n            max_ = numbers[index]\n        else:\n            result.append(max_)\n        index += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = [0] * len(numbers)\n    result[0] = numbers[0]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Let's ignore the last element, it's equal to the first element\n    numbers = numbers[:-1]\n    # let's also do the first element as well\n    numbers = [numbers[0]] + numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        # Adding the last element of the list\n        res.append(max(res[i - 1] if i > 0 else 0, numbers[i]))\n    return res\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(string)):\n        for j in range(len(string), i, -1):\n            if is_palindrome(string[i:j]):\n                return string[i:j] + string[i:j][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    suffix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            suffix = string[:i]\n            break\n    return suffix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(string) < 1:\n        return ''\n    elif is_palindrome(string):\n        return string\n    else:\n        suffix = get_longest_postfix_palindrome(string)\n        suffix_reverse = suffix[::-1]\n        return string + suffix_reverse\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in reversed(range(len(string))):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    longest_postfix = find_longest_palindrome(string)\n    shortest_palindrome = string[:-len(longest_postfix)] + longest_postfix[::-1]\n    return shortest_palindrome\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not string:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome.\n    # Algorithm idea is simple:\n    # - Find the longest prefix of supplied string that is a palindrome.\n    # - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    longest_palindromic_prefix = ''\n    longest_palindromic_suffix = ''\n    for i in range(1, len(string) + 1):\n        prefix = string[-i:]\n        suffix = string[:i]\n        if is_palindrome(prefix):\n            longest_palindromic_prefix = prefix\n        if is_palindrome(suffix):\n            longest_palindromic_suffix = suffix\n    # If supplied string is already a palindrome, just return it.\n    if is_palindrome(string):\n        return string\n    return longest_palindromic_prefix + string[len(longest_palindromic_suffix):] + \\\n        longest_palindromic_suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not string:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    prefix = ''\n    for i, char in enumerate(string):\n        if is_palindrome(char):\n            prefix += char\n        else:\n            break\n    return prefix + string[:i][::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = ''\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(chr(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join('1' if x==y else '0' for x,y in zip(a,b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Generate the length of the longest string.\n    longest_string = max(len(a), len(b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if strings == []:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not strings:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if strings:\n        return sorted(strings, key=len, reverse=True)[0]\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    longest_string = None\n    if not strings:\n        return longest_string\n    for string in strings:\n        if longest_string is None:\n            longest_string = string\n        elif len(longest_string) < len(string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    longest_str = None\n    max_length = 0\n    for item in strings:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_str = item\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    longest_string = None\n    if not strings:\n        return None\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while b!= 0:\n        tmp = b\n        b = a % b\n        a = tmp\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(len(string)):\n        res.append(string[0:i+1])\n    return res\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return [''.join(x) for x in zip([''] + string, string)]\n    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(1, len(string)+1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(string[:i] for i in range(len(string) + 1))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [string]\n    for i in range(1, len(string)):\n        result.append(string[:i+1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(map(lambda x: x[:len(string)], [string] + list(string[i:] for i in range(len(string) + 1))))\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sequence = []\n    for i in range(n + 1):\n        sequence.append(str(i))\n    return''.join(sequence)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(str(x) for x in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(n+1):\n        result = result + str(i) +''\n    return result[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \" \".join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = \"\"\n    for i in range(n + 1):\n        s += str(i) + \" \"\n    return s[:-1] # omit the final space\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        return ''\n    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = ''\n    for i in range(0, n + 1):\n        result = result + str(i) +''\n    return result[:-1]  # slice off last space\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = ''\n    for i in range(n + 1):\n        result += str(i) +''\n    return result[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(n+1):\n        res.append(str(i))\n    return \" \".join(res)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    chars = set()\n    for char in string:\n        if char.lower() not in chars:\n            chars.add(char.lower())\n    return len(chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    return len(char_count)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    music_list = []\n    new_note = True\n    current_note = ''\n    for note in music_string:\n        if note == 'o':\n            current_note += note\n            new_note = True\n        elif note == 'o|':\n            if new_note:\n                music_list.append(4)\n            else:\n                music_list[-1] += 1\n            new_note = False\n        elif note == '.':\n            if new_note:\n                music_list.append(4)\n            else:\n                music_list[-1] += 1\n            new_note = True\n        elif note == '|':\n            if new_note:\n                music_list.append(2)\n            else:\n                music_list[-1] += 1\n            new_note = False\n    return music_list\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    parsed_music = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            parsed_music.append(1)\n        elif music_string[i] == 'o|':\n            parsed_music.append(2)\n        elif music_string[i] == 'o.|':\n            parsed_music.append(4)\n        elif music_string[i] == '.|':\n            parsed_music.append(8)\n        elif music_string[i] == 'o|o':\n            parsed_music.append(16)\n        elif music_string[i] == 'o.|o':\n            parsed_music.append(32)\n        elif music_string[i] == 'o|o|':\n            parsed_music.append(64)\n        elif music_string[i] == 'o.|o|':\n            parsed_music.append(128)\n        elif music_string[i] == 'o|o|o':\n            parsed_music.append(256)\n        elif music_string[i] == 'o.|o|o':\n            parsed_music.append(512)\n        elif music_string[i] == 'o|o|o|':\n            parsed_music.append(1024)\n        elif music_string[i] == 'o.|o|o|':\n            parsed_music.append(2048)\n        elif music_string[i] == 'o|o|o|o':\n            parsed_music.append(4096)\n        elif music_string[i] == 'o.|o|o|o':\n            parsed_music.append(8192)\n        elif music_string[i] == 'o|o|o|o|':\n            parsed_music.append(16384)\n        elif music_string[i] == 'o.|o|o|o|':\n            parsed_music.append(32768)\n        elif music_string[i] == 'o|o|o|o|o':\n            parsed_music.append(65536)\n        elif music_string[i] == 'o.|o|o|o|o':\n            parsed_music.append(131072)\n        elif music_string[i] == 'o|o|o|o|o|':\n            parsed_music.append(2621440)\n        elif music_string[i] == 'o.|o|o|o|o|o':\n            parsed_music.append(536870912)\n        elif music_string[i] == 'o|o|o|o|o|o|o':\n            parsed_music.append(1073741824)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [4 if c == \"o\" else 2 if c == \"o|\" else 1 if c == \".\" else 0 for c in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    notes = [re.findall(r'o|\\d+', line) for line in music_string.split('\\n') if line!='' and line!= '']\n    result = []\n    for line in notes:\n        if line == []:\n            result.append(0)\n        else:\n            result.append(len(line) - 1)\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    music_string = music_string.replace('o', '0')\n    music_string = music_string.replace('|', '1')\n    music_string = music_string.replace('.', '2')\n    music_string = music_string.replace(' ', '')\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if music_string.isspace() or music_string == '':\n        return []\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    note_duration = 0\n    current_chars = []\n    current_notes = []\n    notes = []\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    music_string = music_string.strip()\n    notes = music_string.split('o')\n    for note in notes:\n        result += [4 if note.strip() == '' else len(note.split('|'))]\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    beats = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            beats.append(4)\n        elif music_string[i] == 'o|':\n            beats.append(2)\n        elif music_string[i] == 'o.':\n            beats.append(1)\n        elif music_string[i] == '.|':\n            beats.append(0.5)\n    return beats\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string) - len(string.lstrip(substring)) + 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    start = 0\n    count = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 0\n    while True:\n        i = string.find(substring, i)\n        if i == -1:\n            break\n        i += 1\n    return i\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if substring == '':\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(string)\n    m = len(substring)\n    count = 0\n    for i in range(n-m+1):\n        if string[i:i+m] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:].startswith(substring):\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    for item in numbers:\n        if item == 'zero':\n            result += '0'\n        elif item == 'one':\n            result += '1'\n        elif item == 'two':\n            result += '2'\n        elif item == 'three':\n            result += '3'\n        elif item == 'four':\n            result += '4'\n        elif item == 'five':\n            result += '5'\n        elif item =='six':\n            result += '6'\n        elif item =='seven':\n            result += '7'\n        elif item == 'eight':\n            result += '8'\n        elif item == 'nine':\n            result += '9'\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(sorted(numbers.split(' ')))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \" \".join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers = [int(n) for n in numbers.split()]\n    numbers.sort()\n    return''.join(str(n) for n in numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    choices = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5','six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    return''.join([choices[x] for x in sorted(numbers.split())])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = numbers.split(' ')\n    for i, num in enumerate(numbers):\n        numbers[i] = num.zfill(3)\n    return''.join(sorted(numbers))\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_numbers = ''.join(sorted(numbers.strip()))\n    return sorted_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    differences = []\n    for i in range(len(numbers) - 1):\n        differences.append(abs(numbers[i] - numbers[i+1]))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    best_diff = float('inf')\n    closest_nums = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < best_diff:\n                best_diff = diff\n                closest_nums = (numbers[i], numbers[j])\n    return closest_nums\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    smallest_difference = None\n    closest_pair = None\n    for i in range(1, len(numbers)):\n        for j in range(i):\n            first_difference = abs(numbers[i] - numbers[j])\n            if smallest_difference is None or first_difference < smallest_difference:\n                smallest_difference = first_difference\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest = None\n    smallest_index = None\n    second_smallest = None\n    second_smallest_index = None\n    for i, val in enumerate(numbers):\n        if smallest is None:\n            smallest = val\n            smallest_index = i\n        elif val < smallest:\n            second_smallest = smallest\n            second_smallest_index = smallest_index\n            smallest = val\n            smallest_index = i\n        elif second_smallest is None:\n            second_smallest = val\n            second_smallest_index = i\n        elif val < second_smallest:\n            second_smallest = val\n            second_smallest_index = i\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    smaller = numbers[0]\n    larger = numbers[0]\n    for x in numbers[1:]:\n        if x > larger:\n            larger = x\n        elif x < smaller:\n            smaller = x\n    return smaller, larger\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    closest_numbers = []\n    closest_numbers.append(min(numbers))\n    closest_numbers.append(max(numbers))\n    return tuple(closest_numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Not enough elements to determine the closest pair\")\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_numbers = sorted(numbers)\n    smallest_diff = None\n    for i, number in enumerate(numbers):\n        if i == 0:\n            continue\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if smallest_diff is None or diff < smallest_diff:\n            smallest_diff = diff\n            smallest_index = i\n    return sorted_numbers[smallest_index], sorted_numbers[smallest_index + 1]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    closest_numbers = list()\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_numbers = sorted(numbers)\n    difference = sorted_numbers[1] - sorted_numbers[0]\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(2, len(sorted_numbers)):\n        if sorted_numbers[i] - sorted_numbers[i - 1] < difference:\n            difference = sorted_numbers[i] - sorted_numbers[i - 1]\n            closest_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n    return closest_pair\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(numbers)\n    m = max(numbers)\n    if m == 0:\n        return [0.0] * n\n    return [float(x) / m for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # We'll need the average and the standard deviation to normalize\n    average = sum(numbers) / len(numbers)\n    variance = sum([(x - average) ** 2 for x in numbers]) / len(numbers)\n    \n    # Make a copy of the list\n    result = list(numbers)\n    \n    # Replace each value with a scaled version\n    for i in range(len(result)):\n        result[i] = (result[i] - average) / (variance ** 0.5)\n    \n    return result\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    unit_range = largest - smallest\n    return [(x - smallest) / unit_range for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    a = max(0, (1 - minimum))\n    b = max(0, (1 - maximum))\n    return [a + b * (n - minimum) for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    # Change the values in the list to be between 0 and 1\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - smallest) / (largest - smallest)\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    for i, x in enumerate(numbers):\n        numbers[i] = (x - smallest) / (largest - smallest)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [scale / max(numbers) for scale in numbers]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # result = list(filter(lambda x: isinstance(x, int), values))\n    # result = [x for x in values if isinstance(x, int)]\n    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for _ in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if string == '':\n        return 0\n    return 1 + strlen(string[1:])\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if string:\n        return len(string)\n    return 0\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n - 1 if n == 1 else max(i for i in range(n, 0, -1) if n % i == 0)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_divisor = n - 1\n    while max_divisor > 1:\n        if n % max_divisor == 0:\n            return max_divisor\n        else:\n            max_divisor -= 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    divisor = 1\n    limit = n\n    while divisor < limit:\n        if n % divisor == 0:\n            limit = divisor\n        else:\n            divisor += 1\n    return limit\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # check if the number is a positive integer\n    if n < 1:\n        raise ValueError('Only positive integers are allowed')\n    \n    # set the largest divisor as the number itself\n    divisor = n\n    \n    # while the divisor is less than the given number, increase the divisor by 1\n    while divisor <= n:\n        if n % divisor == 0:\n            divisor += 1\n        else:\n            break\n    \n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    for i in range(1, n // 2):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        n -= 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pas"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert 0 < n, 'n must be positive'\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            break\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    largest_divisor = 1\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            largest_divisor = divisor\n    return largest_divisor\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 0:\n        raise ValueError(\"Argument must be a non-negative integer.\")\n    if n == 1:\n        return [1]\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            factors.append(d)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        n = -n\n    if n in (0, 1):\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return [i] + factorize(n // i)\n    return [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # factorize(4) = [2, 2]\n    # factorize(8) = [2, 2]\n    # factorize(15) = [3, 5]\n    # factorize(25) = [5, 5]\n    # factorize(70) = [2, 5, 7]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 0:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    factors = []\n    if n == 1:\n        return [1]\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    while n!= 1:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    factor = 2\n    factors = []\n    while n > 1:\n        if n % factor == 0:\n            n /= factor\n            factors.append(factor)\n        else:\n            factor += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    def is_prime(n: int) -> bool:\n        \"\"\" Check if given integer is prime.\n        >>> is_prime(4)\n        False\n        >>> is_prime(7)\n        True\n        >>> is_prime(19)\n        True\n        >>> is_prime(99)\n        False\n        \"\"\"\n        \n        if n % 2 == 0 and n > 2:\n            return False\n        return all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n        \n    def prime_factorization(n: int) -> List[int]:\n        \"\"\" Return prime factorization of given integer in the form of list of tuples (prime number, power of it).\n        >>> prime_factorization(10)\n        [(2, 1)]\n        >>> prime_factorization(25)\n        [(5, 1)]\n        >>> prime_factorization(70)\n        [(2, 2), (5, 1)]\n        \"\"\"\n        \n        result = []\n        i = 2\n        \n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                result.append((i, 1))\n        if n > 1:\n            result.append((n, 1))\n        return result\n    \n    def check_numbers(prime_factors: List[int]) -> bool:\n        \"\"\" Check if a factorization corresponds to a given integer.\n        >>> check_numbers([(2, 1)])\n        True\n        >>> check_numbers([(2, 1), (5, 1)])\n        False\n        >>> check_numbers([(2, 2), (5, 1)])\n        False\n        >>> check_numbers([(2, 1), (5, 1), (7, 1)])\n        False\n        \"\"\"\n        \n        return not any(\n            a % b!= 0 or a / b < b\n            for a, b in zip(prime_factors, prime_factors[1:])\n        )\n    \n    if n == 1:\n        return []\n    \n    if is_prime(n):\n        return [n]\n    \n    prime_factors = prime_factorization(n)\n    while not check_numbers(prime_factors):\n        prime_factors = [p for p, _ in prime_factors]\n    \n    return [p for p, _ in prime_factors]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    no_dupes = []\n    for number in numbers:\n        if number not in no_dupes:\n            no_dupes.append(number)\n    return no_dupes\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    new_list = []\n    for number in numbers:\n        if number not in new_list:\n            new_list.append(number)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    results = []\n    for num in numbers:\n        if num not in results:\n            results.append(num)\n    return results\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Empty list\n    if not numbers:\n        return []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    seen = set()\n    for i in numbers:\n        if i not in seen:\n            seen.add(i)\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    unique = []\n    for i in numbers:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    out = []\n    for n in numbers:\n        if n not in out:\n            out.append(n)\n    return out\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def translate(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lower_string = string.lower()\n    upper_string = string.upper()\n    return lower_string[::-1] + upper_string[::-1]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(chr(ord(c) ^ 0x55) if c.isupper() else chr(ord(c) ^ 0x33) if c.islower() else c for c in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = list(string)\n    for i, c in enumerate(l):\n        if c.isupper():\n            l[i] = c.lower()\n        elif c.islower():\n            l[i] = c.upper()\n    return ''.join(l)\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([\n        c.upper() if c.islower() else c.lower() for c in string\n    ])\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if strings == []:\n        return ''\n    else:\n        return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not strings:\n        return \"\"\n    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [l for l in l if l > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # return [i for i in l if i > 0]\n    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 5 == 0 or n % 7 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, n):\n            if n % x == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        limit = sqrt(n) + 1\n        for i in range(3, limit, 2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return not(any(n % i == 0 for i in range(2, n)))\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return False\n    for num in range(2, n):\n        if n % num == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for num in range(3, n, 2):\n        if n % num == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(xs) % 2 == 0, \"list xs must have even number of elements.\"\n    assert 0 not in xs, \"list xs must have zero as first element.\"\n    assert all(coeff!= 0 for coeff in xs), \"list xs cannot have any zero coefficient.\"\n    return -poly(xs, 1 / len(xs)) / sum(xs)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(xs) % 2 == 0\n    # reduce_poly(xs) is a list of 2-tuples\n    reduce_poly(xs)\n    # find_zeros is a list of 2-tuples\n    find_zeros = [(0, 0) for _ in range(len(xs) // 2)]\n    for i, x in enumerate(xs):\n        for j, y in enumerate(xs):\n            if (x, y) in find_zeros:\n                continue\n            if poly(xs, find_zeros[j][0] / find_zeros[j][1]) * x == 0:\n                find_zeros[j] = (x, y)\n                # we have found a zero\n                break\n        else:\n            # no zero found\n            continue\n        break\n    else:\n        # no zero found\n        return None\n    # the zero is at x = find_zeros[i][0] / find_zeros[i][1]\n    return find_zeros[i][0] / find_zeros[i][1]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0 or max(xs) == 0:\n        return None\n    else:\n        pivot = max(xs)\n        return -pivot * math.pow(poly(xs[:len(xs) - 1], pivot), -1)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) % 2!= 0 or max(xs) == 0:\n        return\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    xs = xs[:]\n    if xs[-1] == 0:\n        xs.pop()\n    if len(xs) % 2 == 0:\n        return (-1 + find_root(poly(xs, -1))) / 2\n    else:\n        return -1 + find_root(poly(xs, -1))\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"Coefficients list is not even\")\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) == 0:\n        return None\n    if len(xs) % 2!= 0:\n        return None\n    coeffs = sorted(xs, reverse=True)\n    for i in range(len(coeffs) - 1, len(coeffs) // 2, -1):\n        if coeffs[i]!= 0:\n            return (coeffs[i] - sum(coeffs[:i])) / coeffs[i]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0\n    if len(xs) == 0:\n        return []\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    if len(xs) == 4:\n        return [\n            (\n                xs[0] * xs[3]\n                - xs[2] * xs[1]\n                + xs[2] * xs[1] * xs[4]\n                - xs[0] * xs[2] * xs[4]\n                + xs[3] * xs[1] * xs[4]\n            )\n            / (xs[1] * xs[2])\n        ]\n    if len(xs) == 6:\n        return [\n            (\n                xs[0] * xs[3]\n                - xs[2] * xs[1]\n                + xs[2] * xs[1] * xs[4]\n                - xs[0] * xs[2] * xs[4]\n                + xs[3] * xs[1] * xs[4]\n                - xs[1] * xs[3] * xs[4]\n                + xs[4] * xs[1] * xs[5]\n                - xs[0] * xs[2] * xs[5]\n                + xs[3] * xs[1] * xs[5]\n                - xs[1] * xs[3] * xs[5]\n            )\n            / (xs[1] * xs[2])\n        ]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(xs) % 2 == 0\n    max_coeff = max([abs(coeff) for coeff in xs])\n    assert max_coeff > 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert isinstance(xs, list)\n    assert len(xs) % 2 == 0\n    assert max(xs)!= 0\n    x = sum(xs) / len(xs)\n    return x\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_list = l[:]\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_list[i] = l[i]\n    return new_list\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    return [l[0]] + [x for x in l[1:] if x % 3 == 0] + [l[-1]]"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [item for item in l if item % 3!= 0] + [item for item in l if item % 3 == 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime.sort()\n    return l_prime\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l.sort()\n    print(l)\n    new_list = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_list.append(l[i])\n        else:\n            new_list.append(l[i])\n            new_list.sort()\n    return new_list\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for i, x in sorted(enumerate(l), key = lambda x: (x[1]%3, x[1]))]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    index = 0\n    while index < len(l):\n        if index % 3 == 0:\n            l[index] = l[index]\n        else:\n            l[index] = l[index]\n        index += 1\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    length = len(l)\n    output = [None] * length\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #l.sort()\n    #l.sort(key=lambda x:x % 3)\n    #return l\n    #t = []\n    #for x in l:\n    #    if x % 3 == 0:\n    #        t.append(x)\n    #t.sort()\n    #t.extend(l)\n    #return t\n    #return [x for x in l if x % 3 == 0]\n    #return sorted(l, key = lambda x:x % 3)\n    return sorted(l, key = lambda x:x % 3) if l else l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if len(l) == 0:\n    #     return l\n    return [i for i in l if i not in set(l)]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = list(set(l))\n    l.sort()\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    r = []\n    for e in l:\n        if e not in r:\n            r.append(e)\n    return sorted(r)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_number = l[0]\n    for i in l:\n        if i > max_number:\n            max_number = i\n    return max_number\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_el = l[0]\n    for elem in l:\n        if elem > max_el:\n            max_el = elem\n    return max_el\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_element = l[0]\n    for i in l[1:]:\n        if i > max_element:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_element = l[0]\n    for e in l:\n        if e > max_element:\n            max_element = e\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # max = None\n    # for i in l:\n    #     if max is None or max < i:\n    #         max = i\n    # return max\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for x in range(n) if x % 11 == 0 or x % 13 == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([1 for x in range(1, n) if x % 11 == 0 or x % 13 == 0])\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    fizz_buzz_list = [0 for _ in range(n + 1)]\n    for i in range(n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz_buzz_list[i] = 1\n    return sum(fizz_buzz_list)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(d == 7 for d in str(n) if d == '7' or (d == '1' and n % 11 == 0) or (d == '2' and n % 13 == 0))\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert type(n) is int and n >= 0, \"n must be a non-negative integer.\"\n    # Insert your code here\n    return sum(n % 11 == 7 or n % 13 == 11 for n in range(1,n+1))\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(x % 13 == 7 or x % 11 == 7 for x in range(n))\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l_prime = [None] * len(l)\n    for i in range(0, len(l), 2):\n        l_prime[i] = l[i]\n    for i in range(1, len(l), 2):\n        l_prime[i] = l[i]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return l[1::2] + l[0::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odds = l[::2]\n    evens = [l[i] for i in range(0,len(l),2)]\n    l = [odds[i] if i < len(odds) else evens[i-len(odds)] for i in range(len(l))]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for i,x in enumerate(l) if i%2==0]+[x for i,x in enumerate(l) if i%2!=0 and l[i]==l[i-1]]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    odd = []\n    even = []\n    for i in l:\n        if i % 2 == 1:\n            odd.append(i)\n        else:\n            even.append(i)\n    odd.sort()\n    even.sort()\n    i = 0\n    j = 0\n    l2 = []\n    while i < len(l) and j < len(l):\n        if l[i] % 2 == 0:\n            l2.append(l[i])\n            i += 1\n        else:\n            l2.append(even[j])\n            j += 1\n    if i < len(l):\n        l2.extend(odd)\n    elif j < len(l):\n        l2.extend(even)\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in range(0, len(l), 2):\n        l2.append(l[i])\n    l2.sort()\n    for i in range(0, len(l), 2):\n        l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return l\n    even = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + sorted(odd)\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        if i % 2 == 1:\n            l[i] = l[i-1]\n        else:\n            l[i] = l[i]\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #pass\n    l_odd = l[0::2]\n    l_odd.sort()\n    l_even = l[1::2]\n    for i in range(len(l_even)):\n        l_odd[i] = l_even[i]\n    return l_odd\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l_even = l[1::2]\n    l_odd = l[::2]\n    l_even.sort()\n    return [l_even[i] for i in range(len(l_even))] + [l_odd[i] for i in range(len(l_odd))]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return encode_cyclic(s)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # find length of string. This is number of groups.\n    l = len(s) // 3\n    # repeat l times.\n    repeats = [s] * l\n    # join.\n    return \"\".join(repeats)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.strip()\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s[len(s) - 1] + encode_cyclic(s[:-1])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) % 3!= 0:\n        raise Exception(\"Invalid argument to decode_cyclic function.\")\n    else:\n        return s[len(s) // 3:] + s[:len(s) // 3]"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    groups = [(groups[i][1] + groups[i + 1]) if len(groups[i]) == 3 else groups[i] for i in range(len(groups) // 2)]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([s[i:i+3] for i in range(0, len(s), 3)])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(s[i:i + 3] for i in range(0, len(s), 3))\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert to list of lists.\n    groups = [list(s[i:i+3]) for i in range(0, len(s), 3)]\n    # append first element to each group to make it cyclic.\n    groups = [[s[0]] + group for group in groups]\n    # build result.\n    return \"\".join([\"\".join(group) for group in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    fibs = [2, 3]\n    for i in range(2, n):\n        next_fib = fibs[-1] + fibs[-2]\n        if is_prime(next_fib):\n            fibs.append(next_fib)\n    return fibs[n - 1]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n > 0, \"n must be a positive integer\"\n    fib_1 = 1\n    fib_2 = 2\n    fib = 2\n    while True:\n        fib_2 = fib_1 + fib_2\n        fib = fib_1 + fib_2\n        if fib == n:\n            return fib\n        if is_prime(fib):\n            fib_1 = fib_2\n            fib_2 = fib\n        else:\n            fib_1 = fib_2\n            fib_2 = fib\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Check if n is positive\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return get_fib_nth(n)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    fib_nums = [1, 2]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i - 1] + fib_nums[i - 2])\n    return fib_nums[n - 1]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    f1, f2, f3 = 1, 2, 3\n    while n > 2:\n        f1, f2, f3 = f2, f3, f1 + f2\n        while not is_prime(f3):\n            f1, f2, f3 = f2, f3, f1 + f2\n        n -= 1\n    return f3\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = 1\n    b = 2\n    count = 1\n    while count <= n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return b\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return prime_fib(n//2)**2\n    if n % 3 == 0:\n        return prime_fib(n//3)**3\n    return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    fib_nums = [2, 3]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[-2] + fib_nums[-1])\n    for i in fib_nums:\n        if is_prime(i):\n            return i\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(l)) == 3 and sum(l) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len([x for x in l if -x in l]) == 3"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    set_l = set(l)\n    for num in set_l:\n        if -num in set_l:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return any(l[i] + l[j] + l[k] == 0 for i in range(len(l)) for j in range(i) for k in range(j))\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your code here\n    sorted_l = sorted(l)\n    for i in range(len(sorted_l) - 2):\n        first, second, third = sorted_l[i], sorted_l[i + 1], sorted_l[i + 2]\n        if first + second + third == 0:\n            return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seen = set()\n    for item in l:\n        if (item * -1) in seen:\n            return True\n        seen.add(item)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(l)) == 2 and sum(set(l)) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 2*n - "
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert type(n) is int and n > 0, 'n must be a positive integer'\n    return sum(i * (i-1) // 2 for i in range(1, n+1))\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def gcd(a,b):\n        if a%b == 0:\n            return b\n        return gcd(b,a%b)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not is_int(n):\n        print(f\"Invalid input {n}. Exiting\")\n        return 1\n    elif int(n) < 0:\n        print(f\"Invalid input {n}. Exiting\")\n        return 1\n    else:\n        return f\"{n}\"\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for _ in range(n) if (car_x(n) == car_x(n - 1) and car_y(n) == car_y(n - 1)))\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # we know n is an even number\n    # so there are a total of 2*n/2 combinations\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert 0 <= n <= 20\n    return (n * (n - 1)) // 2\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        l2.append(l[i] + 1)\n    return l2\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [num + 1 for num in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in l:\n        count = count + 1\n    for i in l:\n        count = count - 1\n        l[l.index(i)] = i + 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if -i in d:\n            if i!= -i:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seen = set()\n    for i in l:\n        if -i in seen:\n            return True\n        seen.add(i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    already_visited = set()\n    for elem in l:\n        if -elem in already_visited:\n            return True\n        else:\n            already_visited.add(elem)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[-item] = 1\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pairs = []\n    for item in l:\n        for pair in pairs:\n            if item + pair == 0:\n                pairs.append(pair)\n    return True if len(pairs) > 1 else False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return False\n    sum = 0\n    for i in l:\n        sum += i\n    return not any([k for k in l if sum - k in l])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    conversion = ''\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x == 0:\n        return '0'\n    if x > 0 and x < 10:\n        return str(x)\n    while x > 0:\n        conversion = str(x % base) + conversion\n        x //= base\n    return conversion\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    convert = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base:\n        return convert[x]\n    else:\n        return change_base(x // base, base) + convert[x % base]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # convert to string, change base to base 10, and convert back\n    num_str = str(x)\n    num_base = int(num_str, base)\n    # check if input base is greater than 10\n    if base > 10:\n        num_base = int(num_str, 10)\n    # return string representation of new base\n    return str(num_base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans = ''\n    while x > 0:\n        ans += str(x % base)\n        x //= base\n    return ans[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    digit_map = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    dic = {10:'A', 11:'B', 12:'C', 13:'D', 14:'E', 15:'F'}\n    res = ''\n    if x < 0:\n        x = -x\n        res += '-'\n    while x > 0:\n        remainder = x % base\n        if remainder >= 10:\n            res += dic[remainder]\n        else:\n            res += str(remainder)\n        x = x // base\n    return res[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x < 0:\n        raise ValueError(\"Input number must be positive.\")\n    elif base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2.\")\n    elif x == 0:\n        return \"0\"\n    elif x > 0:\n        output = \"\"\n        while x > 0:\n            if x % base > 9:\n                output = str(x % base) + output\n            else:\n                output = str(x % base) + output\n            x //= base\n        return output\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if base < 2 or base > 10:\n        return 'base error'\n    result = ''\n    while x!= 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_x = x\n    new_base = base\n    if new_base < 10:\n        return str(x)\n    else:\n        while new_x >= base:\n            new_x = int(new_x / base)\n            new_base += 1\n        return str(new_x)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    base_string = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    base_num = len(base_string)\n    y = x\n    if x == 0:\n        return 0\n    while y > 0:\n        resid = y % base_num\n        res = base_string[resid]\n        y = y // base_num\n        return res + change_base(y, base) if y > 0 else res\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 1/2*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    area = (a * h) / 2\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return float(0.5 * a * h)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = 0\n    b = 1\n    for i in range(0, n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 3:\n        return n\n    a, b = 0, 1\n    while n > 3:\n        a, b = b, a + b\n        n -= 1\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    #n1, n2, n3, n4 = 0, 1, 0, 1\n    #for i in range(n-4):\n    #    n4 = n1 + n2 + n3 + n4\n    #    n3, n2, n1 = n2, n3, n4\n    #return n4\n    \n    fib4 = [0, 1]\n    for i in range(n):\n        fib4.append(fib4[-1] + fib4[-2])\n    return fib4[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    fib = [0,1]\n    for i in range(2,n+1):\n        fib.append(fib[i-1]+fib[i-2])\n    return fib[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    first = 0\n    second = 1\n    for i in range(2, n + 1):\n        third = first + second\n        first = second\n        second = third\n    return second\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    l = len(l)\n    if (l % 2) == 1:\n        return l[l//2]\n    else:\n        return (l[l//2-1] + l[l//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Base case\n    if len(l) == 1:\n        return l[0]\n    elif len(l) == 2:\n        return (l[0] + l[1]) / 2\n    else:\n        # Divide the list into 2 equal-sized lists\n        split_index = len(l) // 2\n        left_list = l[:split_index]\n        right_list = l[split_index:]\n        # Get median of each list\n        left_list_median = median(left_list)\n        right_list_median = median(right_list)\n        # If left list is even, both lists are the same\n        if len(left_list) % 2 == 0:\n            return (left_list_median + right_list_median) / 2\n        else:\n            return right_list_median\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    return (l[len(l)/2]+l[(len(l)/2)-1])/2.0\n    \n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n//2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid-1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l.sort()\n    size = len(l)\n    if size % 2 == 1:\n        return l[size//2]\n    else:\n        return (l[size//2] + l[size//2 - 1])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_l = sorted(l)\n    l_len = len(l)\n    if l_len % 2 == 0:\n        return (sorted_l[l_len//2] + sorted_l[l_len//2 - 1])/2\n    return sorted_l[l_len//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    if n == 1:\n        return l[0]\n    if n % 2 == 0:\n        return float(sorted(l)[n//2-1] + sorted(l)[n//2])/2\n    else:\n        return float(sorted(l)[n//2])\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l.sort()\n    return l[(len(l) - 1) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(text) <= 1:\n        return True\n    elif text[0]!= text[-1]:\n        return False\n    else:\n        return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # using reversed\n    if text == text[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # len(text) % 2 == 0\n    if len(text) % 2 == 0:\n        return text[:len(text)//2] == text[-1:len(text)//2-1:-1]\n    else:\n        return text[:len(text)//2] == text[-1:len(text)//2-1:-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return modp(n-1, p) * p\n    else:\n        return modp(n/2, p)**2 % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return modp(n // 2, p)**2 % p\n    else:\n        return (modp(n - 1, p)**2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    r = n % p\n    while n > 0:\n        r, n = (r, n % p) if n > p / 2 else (r + p, p)\n    return r\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return modp(n-1, p) * p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return ((modp(n - 1, p) * p) % p)\n    else:\n        return (modp(n // 2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return modp((n - 1) // 2, p) ** 2 * n % p\n    else:\n        return modp(n // 2, p) ** 2\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    return modp(n // 2, p)**2 % p if n % 2 == 0 else modp(n // 2, p)**2 * p % p\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'A', 'e', 'E', 'i', 'I', 'o', 'O', 'u', 'U', 'y', 'Y', 'z', 'Z']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code goes here\n    vowels = 'aeiouAEIOU'\n    text = ''.join(char for char in text if char not in vowels)\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter, \"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowels = ''.join([s for s in text if s not in vowels])\n    return vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    remove = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            remove += letter\n    return remove\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    no_vowels = ''\n    for letter in text:\n        if letter not in VOWELS:\n            no_vowels += letter\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aAeEiIoOuU'\n    text = text.lower()\n    new_text = ''\n    for c in text:\n        if c not in vowels:\n            new_text += c\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text = new_text + char\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    text = text.lower()\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([c for c in text if c.lower() not in \"aeiou\"])\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(i < t for i in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(filter(lambda x: x < t, l)) == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return True\n    if l[0] > t:\n        return False\n    return below_threshold(l[1:], t)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for num in l:\n        if num >= t:\n            return False\n    return True\n    # hint: do not use the function below_threshold defined above!\n    # return len([num for num in l if num < t]) == len(l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len([i for i in l if i < t]) == len(l)\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    chars0, chars1 = Counter(s0), Counter(s1)\n    for c in chars0:\n        if c not in chars1:\n            return False\n        if chars0[c]!= chars1[c]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Only the length should be checked\n    if len(s0)!= len(s1):\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(x == y for x, y in zip(s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for char0, char1 in zip(s0, s1):\n        if char0!= char1:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        raise ValueError('invalid n value')\n    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    opening_brackets = [1,2,3,4,5,6]\n    closing_brackets = [\")\", \"]\", \"}\", \">\", \"<\", \"[\"]\n    b = brackets[1:-1]\n    for b1, b2 in zip(opening_brackets, closing_brackets):\n        if b[:b1]!= b2:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    brackets = brackets[::-1]\n    if brackets == \"<<><>>\" or brackets == \"<<>>>\" or brackets == \"<<>><\":\n        return False\n    if brackets[0] == \">\" or brackets[0] == \"<\":\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and not stack:\n            return False\n        elif bracket == \">\" and stack[-1] == \"<\":\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return braces(brackets) == \"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    open_brackets = []\n    for b in brackets:\n        if b == \"<\":\n            open_brackets.append(b)\n        else:\n            if len(open_brackets) == 0:\n                return False\n            open_brackets.pop()\n    return len(open_brackets) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \"<\":\n            bracket_stack.append(\"<\")\n        elif b == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack[-1] == \"<\":\n                bracket_stack.pop()\n            else:\n                return False\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append('>')\n        elif bracket == '>':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or \\\n           all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or all(l[i] <= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return True\n    # false if not increasing\n    if l[0] > l[-1]:\n        return False\n    # false if not decreasing\n    if l[0] < l[-1]:\n        return False\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n    if l[1] - l[0] > 0:\n        for i in range(1, len(l)):\n            if l[i] - l[i - 1] < 0:\n                return False\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] - l[i - 1] > 0:\n                return False\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or all(l[i] <= l[i+1] for i in range(len(l)-1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) == 1:\n        return True\n    if l[0] > l[1]:\n        return False\n    for i in range(len(l) - 1):\n        if l[i] >= l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l1 = list(set(l1))\n    l2 = list(set(l2))\n    l1.sort()\n    l2.sort()\n    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l1.sort()\n    l2.sort()\n    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l1 = l1.copy()\n    l2 = l2.copy()\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    a = []\n    for i in l1:\n        if i in l2:\n            if i not in a:\n                a.append(i)\n    return a\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    prime_factors = set()\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            prime_factors.add(d)\n    if n > 1:\n        prime_factors.add(n)\n    return max(prime_factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    p = 2\n    while p ** 2 <= n:\n        if n % p == 0:\n            n //= p\n        else:\n            p += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    prime_factor = 2\n    while n % prime_factor!= 0:\n        prime_factor += 1\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1\n    if n == 2:\n        return 2\n    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n > 1 and is_prime(n) == False, \"n must be a positive integer greater than 1\"\n    start = 2\n    end = n\n    while start < end:\n        mid = (start + end) // 2\n        if n % mid == 0:\n            start = mid + 1\n        else:\n            end = mid\n    return start\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    \n    max_factor = 0\n    for num in range(2, n):\n        if n % num == 0:\n            max_factor = num\n    return max_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > 1\n    \n    return 2\n    \ndef smallest_divisor(n: int, max_factor: int = None):\n    \"\"\"Return the smallest divisor of n that is not larger than max_factor.\n    >>> smallest_divisor(50)\n    5\n    >>> smallest_divisor(50, 3)\n    3\n    >>> smallest_divisor(25, 3)\n    5\n    \"\"\"\n    \n    if max_factor == None:\n        max_factor = n // 2\n        \n    divisor = 1\n    \n    while divisor < max_factor:\n        if n % divisor == 0:\n            return divisor\n        \n        divisor += 1\n    \n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 1\n    p = 2\n    while n % p!= 0:\n        p += 1\n    return p\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(range(n + 1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def num_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return n + num_sum(n-1)\n    if n == 0:\n        return 0\n    return num_sum(n)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total += k\n        k += 1\n    return total"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return sum(range(n + 1))\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    b = []\n    for c in brackets:\n        if c == \"(\":\n            b.append(c)\n        elif c == \")\":\n            if len(b) == 0:\n                return False\n            else:\n                b.pop()\n    return len(b) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # TODO: correct bracketing\n    # ((')\n    # (())\n    # (()())\n    # ()))\n    # (()))\n    if len(brackets) < 1:\n        return True\n    elif brackets[0] == ')':\n        return False\n    elif brackets[-1] == '(':\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # return True if every opening bracket has a corresponding closing bracket.\n    return all(close == open for open, close in zip(brackets, brackets[1:]))"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        else:\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(b in [\"(\", \")\"][::-1] for b in brackets)\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # the stack to keep track of opening brackets\n    stack = []\n    # the dictionary to keep track of which opening bracket belongs to which closing bracket\n    mapping = {}\n    for i, bracket in enumerate(brackets):\n        if bracket == \"(\":\n            stack.append(i)\n        elif bracket == \")\":\n            if stack:\n                mapping[stack.pop()] = i\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    brackets = brackets.replace(\"()\", \"\")\n    brackets = brackets.replace(\"()\", \"\")\n    return len(brackets) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    bracket_stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            bracket_stack.append(i)\n        else:\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    if bracket_stack:\n        return False\n    return True\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: Implement me\n    return None\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # pass\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [1]\n    return [xs[i] + xs[i - 1] * (i + 1) for i in range(len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [math.pow(n, 2) if n else 1 for n in xs[1:]] + [xs[0] * xs[1]]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    xs = xs[:]\n    for i in range(len(xs)):\n        xs[i] *= i + 1\n    return xs\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [n * (n - 1) for n in xs[1:]] + [xs[0]]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [float(len(xs))] + [i*x for i,x in enumerate(xs, start=1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(xs) < 2:\n        raise ValueError(\"Must be at least two inputs.\")\n    result = []\n    for i in range(len(xs)-1):\n        result.append(xs[i+1]*(len(xs)-i-1))\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(i * xs[i])\n    res.append(0)\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    i = 0\n    while (i < len(xs) - 1):\n        xs[i + 1] = xs[i] * (len(xs) - i - 1)\n        i += 1\n    return xs\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n >= 0\n    return _fibfib(n)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    if n < 0:\n        raise ValueError(\"n must be zero or positive\")\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0 or n == 1:\n        return n\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0 or n == 1:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return _fib(n)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    num_vowels = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            num_vowels += 1\n    if s[-1] == 'y':\n        num_vowels -= 1\n    return num_vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowels_count = 0\n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n        if i == 'y':\n            if s[-1] == 'y':\n                vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowel = ['a', 'e', 'i', 'o', 'u']\n    vowels = 0\n    for i in s:\n        if i in vowel:\n            vowels += 1\n    if s[-1] == 'y':\n        vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('y')\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowel = 0\n    for i in s:\n        if i in 'aeiouAEIOU':\n            vowel = vowel + 1\n    if s[-1] in 'aeiouAEIOU':\n        vowel = vowel + 1\n    return vowel\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n        elif i == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a','e','i','o','u','y']\n    num_vowels = 0\n    for i in s:\n        if i in vowels:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if shift > x:\n        return x % 10**shift\n    else:\n        return x//10**shift + (x % 10**shift) * 10**(shift - 1)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    x = str(x)\n    y = x[shift:] + x[:shift]\n    if len(y) > len(x):\n        y = y[len(x):] + y[:len(x)]\n    return y\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    length = len(str(x))\n    if shift > length:\n        return str(x)[::-1]\n    return str(x)[length-shift:length] + str(x)[:length-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = [int(x) for x in str(x)]\n    return ''.join(map(str, (d[shift:] + d[:shift])))\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # reverse the string x if shift > number of digits\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    # reverse x if shift < 0\n    if shift < 0:\n        return str(x)[abs(shift):] + str(x)[:abs(shift)]\n    return str(x)[abs(shift):] + str(x)[:abs(shift)]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    digits = str(x)\n    size = len(digits)\n    # check for invalid shift values\n    if shift >= size:\n        shift = shift % size\n    return digits[size-shift:size]+digits[0:size-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    shift %= len(str(x))\n    return str(x)[len(str(x)) - shift:][::-1] + str(x)[:len(str(x)) - shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    digits = str(abs(x))\n    circular_digits = \"\"\n    for i in range(len(digits)):\n        circular_digits += digits[(i+shift)%len(digits)]\n    if x < 0:\n        circular_digits = \"-\" + circular_digits\n    return circular_digits\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c) - ord('A') + 1 for c in s if ord(c) >= ord('A'))"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 0\n    for x in s:\n        if x.isupper():\n            total += ord(x) - 64\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(ord(c) - 64 for c in s.upper())\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([ord(c)-64 for c in s if ord(c)>=65 and ord(c)<=90])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([ord(char) for char in s if ord(char) >= 65 and ord(char) <= 90])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(ord(i) for i in s if ord(i) >= 65 and ord(i) <= 90)\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = s.split(\" \")\n    a = int(d[0])\n    o = int(d[1])\n    return n - a - o\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split(' ')\n    if int(s[0]) > int(s[1]):\n        return int(n) - int(s[0]) - int(s[1])\n    else:\n        return int(n) - int(s[1]) - int(s[0])\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n - s.count('apples') - s.count('oranges')\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    apples = s.split(\" \")[0]\n    oranges = s.split(\" \")[1]\n    \n    print (int(apples) + int(oranges)) - int(apples) - int(oranges)\n    \n    return (int(apples) + int(oranges)) - int(apples) - int(oranges)\n    \nif __name__ == \"__main__\":\n    print (fruit_distribution(\"5 apples and 6 oranges\", 19))\n    print (fruit_distribution(\"0 apples and 1 oranges\",3))\n    print (fruit_distribution(\"2 apples and 3 oranges\", 100))\n    print (fruit_distribution(\"100 apples and 1 oranges\",120))"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return s.split(\" \")[1] - s.split(\" \")[0] - s.split(\" \")[2]\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    str_list = s.split(\" \")\n    apples = int(str_list[0])\n    oranges = int(str_list[1])\n    mango = apples + oranges\n    return n - apples - oranges\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    apples = 0\n    oranges = 0\n    mangos = 0\n    for i in s:\n        if i == 'a':\n            apples+=1\n        elif i == 'o':\n            oranges+=1\n        elif i =='m':\n            mangos+=1\n    return mangos - apples - oranges\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    orange_count = int(s.split(' ')[0])\n    apple_count = int(s.split(' ')[1])\n    return n - apple_count - orange_count\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    x = n\n    for i in range(len(s)):\n        if s[i] == \"apples\":\n            x = x - 1\n        if s[i] == \"oranges\":\n            x = x - 2\n        if s[i] == \"mangos\":\n            x = x - 3\n    return x\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr.sort(key = lambda x: x%2)\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 1]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return [arr[0], 1]\n        else:\n            return [arr[1], 1]\n    elif len(arr) % 2 == 0:\n        return [arr[len(arr)//2], len(arr)//2+1]\n    else:\n        return [arr[len(arr)//2], len(arr)//2]"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [val, idx] if val % 2 == 0 else []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    # Key: The smallest even value, and the index of the smallest even value.\n    # Value: The node with the smallest even value\n    nodes = {'even': [], 'odd': []}\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            nodes['even'].append([arr[i], i])\n        else:\n            nodes['odd'].append([arr[i], i])\n    \n    # Sort the nodes by value, ascending.\n    nodes['even'] = sorted(nodes['even'])\n    nodes['odd'] = sorted(nodes['odd'])\n    \n    # Check if there are any nodes with even values.\n    if nodes['even'] == []:\n        return []\n    \n    # If there are more than one node with even value, then the first is the smallest\n    # if there are two nodes with the same smallest even value, then the first is the smallest\n    if len(nodes['even']) > 1 and nodes['even'][0] == nodes['even'][1]:\n        return [nodes['even'][0][0], nodes['even'][0][1]]\n    else:\n        return [nodes['even'][0][0], nodes['even'][0][1]]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    elif len(arr) == 2:\n        if arr[0] % 2 == 0:\n            return [arr[1], 1]\n        elif arr[1] % 2 == 0:\n            return [arr[0], 0]\n        else:\n            return [min(arr), 0]\n    else:\n        arr.sort(key=lambda x: x % 2 == 0)\n        return [arr[0], arr.index(arr[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    smallest_even_index = len(arr)\n    smallest_even_val = arr[0]\n    for index, val in enumerate(arr):\n        if val % 2 == 0:\n            if val < smallest_even_val:\n                smallest_even_index = index\n                smallest_even_val = val\n    if smallest_even_index == len(arr):\n        return []\n    else:\n        return [smallest_even_val, smallest_even_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if arr:\n        smallest_even = min([ x for x in arr if x % 2 == 0])\n        smallest_index = arr.index(smallest_even)\n        return [smallest_even, smallest_index]\n    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [None, None]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return []\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # TODO: Use a sorted list and binary search to find the value\n    sortedList = sorted(lst)\n    index = 0\n    for i in sortedList:\n        if i > index:\n            index = i\n            return index\n    return -1\n    # <-- Remove this comment when you implement the function\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    cnt = Counter(lst)\n    return max(cnt.keys()) if max(cnt.values()) > lst.count(max(lst)) else -1\n    \nassert search([4, 1, 2, 2, 3, 1]) == 2\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nassert search([5, 5, 4, 4, 4]) == -"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_val = max(lst)\n    max_val_count = lst.count(max_val)\n    return max_val if max_val_count >= max_val else -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)\n    new_lst.sort()\n    for i in new_lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    res = 0\n    for i in lst:\n        if i > res and lst.count(i) >= i:\n            res = i\n    return -1 if res == 0 else res\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return -1\n    \n    dict = {}\n    for i in lst:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    \n    for key, value in dict.items():\n        if value >= key:\n            return key\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst.sort()\n    return -1 if not lst else max(lst[i] for i in xrange(len(lst)) if lst.count(lst[i]) >= lst[i])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 1:\n        return -1\n    c = [0]*(max(lst)+1)\n    for i in lst:\n        c[i] += 1\n    m = -1\n    for i in xrange(1,len(c)):\n        if c[i] >= i:\n            m = i\n    return m\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    dic = {}\n    for i in lst:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst.sort()\n    lst.reverse()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return []\n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst2 = []\n    for i in range(len(lst)):\n        min_value = min(lst)\n        lst2.append(min_value)\n        lst.remove(min_value)\n        max_value = max(lst)\n        lst2.append(max_value)\n        lst.remove(max_value)\n    return lst2\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return []\n    lst.sort()\n    if lst[0] == lst[-1]:\n        return lst\n    if lst[0] == lst[-2]:\n        return [lst[-1]] + lst[:-1]\n    if lst[0] == lst[1]:\n        return [lst[0]] + lst[2:]\n    return [lst[-1]] + lst[:-1]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst: return []\n    # we assume that all integers are in the range [0, 10000]\n    # and there are no negative values\n    res = [min(lst)]\n    min_val = min(lst)\n    for i in lst:\n        if i < min_val:\n            min_val = i\n        elif i >= min_val:\n            res.append(i)\n    return res"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n    lst = sorted(lst)\n    i, j = 0, len(lst) - 1\n    while i < j:\n        lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n        j -= 1\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    return [min(lst), max(lst)] + \\\n        sorted(lst, key=lambda x: (-x, x))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert isinstance(lst, list)\n    if not lst:\n        return []\n    res = []\n    lst.sort()\n    for i in lst:\n        res.append(i)\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst.sort()\n    lst.reverse()\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    newlst = []\n    min_val = min(lst)\n    newlst.append(min_val)\n    for i in lst:\n        if i!= min_val:\n            newlst.append(i)\n    max_val = max(newlst)\n    newlst.remove(max_val)\n    newlst.insert(0, max_val)\n    return newlst\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return round(((a + b + c) * (a + b - c) * (a - b + c) * (a - b - c)) ** 0.5, 2) if a + b > c and a + c > b and b + c > a else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        return round((a+b+c)/2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2] < sides[1] + sides[0]:\n        return round(sides[0] * sides[1] / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] <= sides[2]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    area = (a + b + c) / 2\n    if area < 0:\n        return -1\n    else:\n        return round(area,2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if (a + b < c) or (a + c < b) or (b + c < a):\n        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if (a > (b + c)) or (b > (a + c)) or (c > (a + b)):\n        return -1\n    else:\n        return round(((a * b * c) / (4 * (pow((a + b + c), 2)))), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Ignore the dunder methods to prevent infinite recursion\n    if a < 0 or b < 0 or c < 0:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a + b < c or a + c < b or b + c < a:\n        return -1\n    \n    s = (a + b + c) / 2.0\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    #Triangle area formula\n    #a = (s(s - a) * (s - b) * (s - c)) ** 0.5\n    #a = s(s - a)\n    #b = s(s - b)\n    #c = s(s - c)\n    if(a >= (b+c) or b >= (a+c) or c >= (a+b)):\n        return -1\n    else:\n        return round(0.5 * (a * (b+c) - (b*c)),2)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def balanced(lst):\n        return lst == lst[::-1]\n    def sum(lst):\n        return sum(lst)\n    def max_possible_weight(lst):\n        return len(lst)\n    return (sum(lst) <= max_possible_weight(lst)) and balanced(lst)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def palindrom(l):\n        if l == l[::-1]:\n            return True\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import re\n    if len(q) % 2!= 0:\n        q.append(0)\n    if q == q[::-1]:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def f(x):\n        return sum(x) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Code goes here\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = sum(q)\n    if s > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False\n    \nprint(will_it_fly([1,2],5))\nprint(will_it_fly([3,2,3],1))\nprint(will_it_fly([3,2,3],9))\nprint(will_it_fly([3,2,3],5))\nprint(will_it_fly([1,2,3,4],5))\nprint(will_it_fly([1,2,3,4],6)"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_balanced(l):\n        return l == l[::-1]\n    def is_below_weight(l, w):\n        return sum(l) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def sum_of_n_list(n_list):\n        sum = 0\n        for elem in n_list:\n            sum += elem\n        return sum\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Code\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # return q == q[::-1] and sum(q) <= w\n    return sum(q) <= w and is_balanced(q)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m = arr[:]\n    m.sort()\n    for i in range(len(arr)):\n        if arr[i]!= m[i]:\n            return i\n    return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return count_changes(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return smallest_changes(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 2\n    odd_num_seen = False\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1 and not odd_num_seen:\n            odd_num_seen = True\n            first_odd_index = i\n        elif arr[i] % 2 == 1:\n            return 1\n    if odd_num_seen:\n        return 2\n    else:\n        return 1 + smallest_change(arr[:first_odd_index]) + smallest_change(arr[first_odd_index+1:])\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # base case: is the array length 1 or less? return 0\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            changes += 1\n    return changes\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) <= 2:\n        return 0\n    odds = 0\n    for i in range(0, len(arr), 2):\n        if arr[i]!= arr[len(arr) - i - 1]:\n            odds += 1\n    return min(odds, len(arr) - odds)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Find the smallest number of changes necessary to make the array palindrome\n    # The array can be made palindrome by changing at most one element to another element\n    # The changes are determined by the differences between each element and its predecessor and next element\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = []\n    if len(lst1) > len(lst2):\n        longer = lst1\n        shorter = lst2\n    else:\n        longer = lst2\n        shorter = lst1\n    longer_len = len(longer)\n    shorter_len = len(shorter)\n    count = 0\n    for each in longer:\n        if len(each) <= shorter_len:\n            count += 1\n    if count == shorter_len:\n        lst = longer\n    elif count < shorter_len:\n        lst = shorter\n    return lst"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2) or len(x) == len(lst2) and x < lst2]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not lst1:\n        return lst2\n    if not lst2:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst1 or not lst2:\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        if len(lst1) < len(lst2):\n            lst1, lst2 = lst2, lst1\n        return [i for i in lst1 if len(i) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return lst2\n    if len(lst1) == len(lst2):\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total_len = 0\n    for i in lst1:\n        total_len += len(i)\n    for i in lst2:\n        total_len -= len(i)\n    if total_len == 0:\n        return lst1\n    elif total_len < 0:\n        return lst2\n    else:\n        return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return total_match2(lst1, lst2)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < 100:\n        return True\n    for i in range(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a < 100:\n        return False\n    \n    a_copy = a\n    while a_copy > 0:\n        a_copy = a_copy // 10\n    a = a // 10\n    \n    if is_prime(a) and is_prime(a_copy):\n        return True\n    else:\n        return False\n    \nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(2))  # False\nprint(is_multiply_prime(5))  # False\nprint(is_multiply_prime(100))# False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(2,a):\n        if a%i == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a < 100:\n        if a < 2:\n            return False\n        if is_prime(a):\n            return True\n        for i in range(2, a):\n            if is_prime(i) and is_prime(a - i):\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import math\n    if a < 100:\n        #return False\n        for i in range(2, int(math.sqrt(a)) + 1):\n            if a % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in xrange(3,int(sqrt(a))+1,2):\n        if a%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    is_divisible_by_one = False\n    is_divisible_by_two = False\n    is_divisible_by_three = False\n    if a < 100:\n        for x in range(2, a):\n            if a % x == 0:\n                is_divisible_by_one = True\n                break\n        if is_divisible_by_one == True:\n            return False\n        else:\n            for x in range(3, a):\n                if a % x == 0:\n                    is_divisible_by_two = True\n                    break\n            if is_divisible_by_two == True:\n                return False\n            else:\n                for x in range(5, a):\n                    if a % x == 0:\n                        is_divisible_by_three = True\n                        break\n                if is_divisible_by_three == True:\n                    return False\n                else:\n                    return True\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if (n == 1):\n        return False\n    if (n == 2):\n        return x == 2\n    if (n == 3):\n        return x == 3\n    if (n == 4):\n        return x == 4\n    if (n == 5):\n        return x == 5\n    if (n == 6):\n        return x == 6\n    if (n == 7):\n        return x == 7\n    if (n == 8):\n        return x == 8\n    if (n == 9):\n        return x == 9\n    if (n == 10):\n        return x == 10\n    if (n == 11):\n        return x == 11\n    if (n == 12):\n        return x == 12\n    if (n == 13):\n        return x == 13\n    if (n == 14):\n        return x == 14\n    if (n == 15):\n        return x == 15\n    if (n == 16):\n        return x == 16\n    if (n == 17):\n        return x == 17\n    if (n == 18):\n        return x == 18\n    if (n == 19):\n        return x == 19\n    if (n == 20):\n        return x == 20\n    if (n == 21):\n        return x == 21\n    if (n == 22):\n        return x == 22\n    if (n == 23):\n        return x == 23\n    if (n == 24):\n        return x == 24\n    if (n == 25):\n        return x == 25\n    if (n == 26):\n        return x == 26\n    if (n == 27):\n        return x == 27\n    if (n == 28):\n        return x == 28\n    if (n == 29):\n        return x == 29\n    if (n == 30):\n        return x == 30\n    if (n == 31):\n        return x == 31\n    if (n == 32):\n        return x == 32\n    if (n == 33):\n        return x == 33\n    if (n == 34):\n        return x == 34\n    if (n == 35):\n        return x == 35\n    if (n == 36):\n        return x == 36\n    if (n == 37):\n        return x == 37\n    if (n == 38):\n        return x == 38\n    if (n == 39):\n        return x == 39\n    if (n == 40):\n        return x == 40\n    if (n == 41):\n        return x == 41\n    if (n == 42):\n        return x == 42\n    if (n == 43):\n        return x == 43\n    if (n == 44):\n        return x == 44\n    if (n == 45):\n        return x == 45\n    if (n == 46):\n        return x == 46\n    if (n == 47):\n        return x == 47\n    if (n == 48):\n        return x == 48\n    if (n == 49):\n        return x == 49\n    if (n == 50):\n        return x == 50\n    if (n == 51):\n        return x == 51\n    if (n == 52):\n        return x == 52\n    if (n == 53):\n        return x == 53\n    if (n == 54):\n        return x == 54\n    if (n == 55):\n        return x == 55\n    if (n == 56):\n        return x == 56\n    if (n == 57):\n        return x == 57\n    if (n == 58):\n        return x == 58\n    if (n == 59):\n        return x == 59\n    if (n == 60):\n        return x == 60\n    if (n == 61):\n        return x == 61\n    if (n == 62):\n        return x == 62\n    if (n == 63):\n        return x == 63\n    if (n == 64):\n        return x == 64\n    if (n == 65):\n        return x == 65\n    if (n == 66):\n        return x == 66\n    if (n == 67):\n        return x == 67\n    if (n == 68):\n        return x == 68\n    if (n == 69):\n        return x == 69\n    if (n == 70):\n        return x == 70\n    if (n == 71):\n        return x == 71\n    if (n == 72):\n        return x == 72\n    if (n == 73):\n        return x == 73\n    if ("
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n**int(x) == x"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == n or x % n == 0"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return x == 1\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (x ** n == x)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x % n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return int(x)==x and n==int(n)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    return is_simple_power(x/n, n)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x ** n == n\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n**int(x)==x\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**3 == int(a)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    return a ** 3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a == pow(a, 3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if pow(a, 3) == a:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == 0:\n        return True\n    return a ** 3 == a\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a**(1./3.)%1 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return pow(a,3) == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return a**3 == int(a**3)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def isPrime(num):\n        if num < 2: return False\n        if num == 2: return True\n        if num % 2 == 0: return False\n        for x in range(3,int(num**0.5)+1,2):\n            if num%x == 0: return False\n        return True\n    \n    hex_dict = {'0':0, '1':0, '2':0, '3':0, '4':0, '5':0, '6':0, '7':0, '8':0, '9':0, 'A':0, 'B':0, 'C':0, 'D':0, 'E':0, 'F':0}\n    \n    for i in num:\n        hex_dict[i]+=1\n    \n    count = 0\n    \n    for i in hex_dict:\n        if hex_dict[i] > 1 and isPrime(int(i)) == True:\n            count += 1\n    \n    return count\n    \ndef caesar_cipher(text, shift):\n    \"\"\"You are the teacher of a strange school of elementary school children. \n    You are going to teach them some lesson and tell them to count.\n    You will be given a secret text which is a string of lowercase letters. \n    You have to create a new string consisting of the letters that do not appear in the secret text.\n    You have to shift each letter of the secret text by an amount equal to the shift value and \n    add this new string to the new string. You are going to keep doing this until the new string is the same as the secret text.\n    In the end you have to return the new string.\n    For example:\n    for secret_text = \"abcdef\", shift = 3, the output should be \"defgab\"\n    for secret_text = \"abcdef\", shift = 26, the output should be \"zabcdef\"\n    for secret_text = \"abcdef\", shift = 5, the output should be \"fgabcd\"\n    \"\"\"\n    \n    def get_shift(text, shift):\n        length = len(text)\n        \n        if length % shift == 0:\n            return length\n        else:\n            return length - length % shift\n    \n    text_arr = list(text)\n    \n    for i in range(len(text_arr)):\n        text_arr[i] = chr(ord(text_arr[i])+shift)\n    \n    return ''.join(text_arr)\n    \ndef longest_string(arr):\n    \"\"\"You are given an array of strings.\n    Your task is to find the longest string in the array.\n    For example:\n    For a = [\"aba\", \"aa\", \"ad\", \"vcd\", \"aba\"], the output should be \"aba\"\n    For a = [\"a\", \"ab\", \"abc\", \"abcd\"], the output should be \"abcd\"\n    \"\"\"\n    \n    def get_length(text):\n        return len(text)\n    \n    longest = arr[0]\n    \n    for i in range(len(arr)):\n        if len(arr[i]) > len(longest):\n            longest = arr[i]\n    \n    return longest\n    \ndef alphabet_position(text):\n    \"\"\"You have been given a string with only letters and numbers.\n    Your task is to convert this string to a number. The numbers are sorted in ascending order.\n    For example:\n    alphabet_position(\"Hello, World!\") = \"122356789\"\n    alphabet_position(\"The sunset sets at twelve o' clock.\") = \"20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11\"\n    \"\"\"\n    \n    def get_number(c):\n        return ord(c) - 96\n    \n    alphabet = list(text)\n    \n    alphabet = [get_number(i) for i in alphabet]\n    \n    return ''.join([str(i) for i in sorted(alphabet)])\n    \ndef palindrome_permutation(text):\n    \"\"\"You are given a string of lowercase letters. Your task is to check if a palindrome can be built from these letters.\n    For example:\n    palindrome_permutation(\"a\") = true\n    palindrome_permutation(\"cab\") = true\n    palindrome_permutation(\"rac"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return hex_count(num, 2, 13)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    number_of_primes = 0\n    # Brute force method\n    #for i in range(len(num)):\n    #    if is_prime(int(num[i])) == True:\n    #        number_of_primes += 1\n    # return number_of_primes\n    # Optimized method\n    number_of_primes = 0\n    for i in range(0, len(num)):\n        if is_prime(int(num[i])) == True:\n            number_of_primes += 1\n    return number_of_primes\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    n = 0\n    for i in range(len(num)):\n        if num[i] == '0' or num[i] == '1':\n            pass\n        elif int(num[i]) in primes:\n            n += 1\n    return n\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_prime(num):\n        \"\"\"Check if the number is prime or not.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num == \"\":\n        return 0\n    a = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    primes = 0\n    for i in a:\n        if i in num:\n            primes += num.count(i)\n    return primes\n    \n    \n    \n    "
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_prime(num):\n        \"\"\"Returns True if num is prime, \n        False otherwise.\n        \"\"\"\n        if num == 2:\n            return True\n        if num % 2 == 0 or num <= 1:\n            return False\n        sqrt = int(num ** 0.5) + 1\n        for divisor in range(3, sqrt, 2):\n            if num % divisor == 0:\n                return False\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    binary = \"\"\n    while decimal:\n        binary += str(decimal%2)\n        decimal = decimal//2\n    binary = \"db\" + \"0\"*(7-len(binary)) + binary + \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"db\" + bin(decimal).replace(\"0b\", \"\").zfill(8) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # NOTE: The solution is based on the observation that a number is equivalent to the binary number\n    # of its decimal value, hence the square of the decimal value (decimal_value ** 2).\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # FIXME: Write your code here\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\""
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # base cases:\n    if decimal == 0:\n        return \"0\"\n    if decimal == 1:\n        return \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = \"\"\n    while decimal!= 0:\n        if decimal % 2 == 0:\n            result = \"1\" + result\n        else:\n            result = \"0\" + result\n        decimal = decimal // 2\n    return \"db\" + result + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"db\" + \"\".join([bin(decimal)[2:][i] for i in range(0, len(bin(decimal)[2:]))]) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if type(decimal) is not int:\n        raise TypeError(\"decimal_to_binary() takes an integer value as argument, not a {}\".format(type(decimal)))\n    if decimal < 0:\n        raise ValueError(\"decimal_to_binary() takes an integer value as argument, not a negative number\")\n    if decimal == 0:\n        return \"db0db\"\n    binary = []\n    while decimal:\n        binary.append(decimal%2)\n        decimal //= 2\n    return \"\".join(str(char) for char in binary[::-1]) + \"db\" + \"\".join(str(char) for char in binary[1:])\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # assign the variable with the parameter\n    binary = \"\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        if s[0] == s[1] and s[0] == s[2]:\n            return False\n    else:\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                return False\n    return True\n    \nprint is_happy('aaa')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xyx')\nprint is_happy('xyz')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('aaab')\nprint is_happy('aaad')\nprint is_happy('a')\nprint is_happy('a')\nprint is_happy('abcd')\nprint is_happy('aabb')\nprint is_happy('adb')\nprint is_happy('xyy')\nprint is_happy('xy"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return s[0]!= s[1] and s[0]!= s[2] and s[1]!= s[2]\n    if len(s) > 3:\n        for i in xrange(len(s) - 3):\n            if s[i] == s[i + 1] and s[i] == s[i + 2] and s[i]!= s[i + 3]:\n                return False\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # TODO: Complete this function\n    # HINT: Use a set to store distinct letters\n    return len(s) >= 3 and len(set(s[i:i+3] for i in xrange(len(s)-2))) == len(set(s))"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # s = s.lower()\n    \n    # for i in range(len(s)):\n    #     if s[i] in s[i+1:i+4]:\n    #         return False\n    # return True\n    s = s.lower()\n    if len(s) < 3:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.__len__() >= 3 and s.__len__() % 3 == 0 and len(set(s[i:i+3] for i in range(len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in xrange(len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = list(s)\n    while len(s) > 2:\n        if not all(s[i]!= s[i+1] for i in range(len(s)-1)):\n            return False\n        s = s[1:]\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(set(s)) == 1:\n        return True\n    else:\n        temp = s[0]\n        for i in xrange(1, len(s)):\n            if s[i] == temp:\n                return False\n            else:\n                temp = s[i]\n        return True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ['A+', 'B', 'C-', 'C', 'A-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    grades.sort(reverse=True)\n    return [letter_grade(grades[i]) for i in range(len(grades))]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join([grade_to_letter_grade(gpa) for gpa in grades])\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [letter_grade(grade) for grade in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n    # not_in_list = list(range(5.0, 4.0)) + list(range(3.5, 3.0)) + list(range(1.7, 1.3))\n    # not_in_list = list(range(3.5, 3.0)) + list(range(1.7, 1.3))\n    # not_in_list = list(range(1.7, 1.3))\n    # not_in_list = list(range(5.0, 4.0)) + list(range(3.5, 3.0)) + list(range(1.7, 1.3))\n    # not_in_list = [4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n    # not_in_list = [5.0, 4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n    # not_in_list = [5.0, 4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n    # not_in_list = [5.0, 4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n    # not_in_list = [5.0, 4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n    # not_in_list = [5.0, 4.0, 3, 1.7, 2, 3.5]\n    # not_in_list = [3.5, 1.7, 2, 3.0]\n    # not_in_list = [1.7, 2, 3.0]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return []\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    grade_table = [['A+', 'A', 'A-'],\n                   ['B+', 'B', 'B-'],\n                   ['C+', 'C', 'C-'],\n                   ['D+', 'D', 'D-'],\n                   ['E', 'E', 'E']]\n    return [grade_table[int(x)][int(y)] for x, y in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if grades[0] < 4.0:\n        return ['F']\n    elif grades[0] < 3.7:\n        return ['F', 'E']\n    elif grades[0] < 3.3:\n        return ['E', 'D-', 'D']\n    elif grades[0] < 3.0:\n        return ['D', 'D-', 'D-', 'C-']\n    elif grades[0] < 2.7:\n        return ['C', 'C-', 'C-', 'C-']\n    elif grades[0] < 2.3:\n        return ['C', 'C-', 'C-', 'C-']\n    elif grades[0] < 2.0:\n        return ['B', 'B-', 'B-', 'B-']\n    elif grades[0] < 1.7:\n        return ['B', 'B-', 'B-', 'B-']\n    elif grades[0] < 1.3:\n        return ['B', 'B-', 'B-', 'B-']\n    elif grades[0] < 1.0:\n        return ['A', 'A-', 'A-', 'A-']\n    elif grades[0] < 0.7:\n        return ['A', 'A-', 'A-', 'A-']\n    elif grades[0] < 0.0:\n        return ['F', 'F-', 'F-', 'F-']\n    else:\n        return ['F']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return grades\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(string) > 1:\n        if len(string) % 2 == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, int(len(string)/2)):\n        if len(string)%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [len(i) for i in string"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    length = len(string)\n    if length == 0:\n        return False\n    if length == 1:\n        return True\n    if length == 2:\n        return True\n    if length == 3:\n        return True\n    if length % 2 == 0 or length % 3 == 0:\n        return False\n    i = 5\n    while i * i <= length:\n        if length % i == 0 or length % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) == 1:\n        return False\n    for i in xrange(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string = string.strip()\n    string = string.lower()\n    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    else:\n        for i in range(2, len(string)):\n            if string[:i] == string[i:2*i]:\n                return False\n            if string[:i] == string[i:2*i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    length = len(string)\n    if length < 3:\n        return True\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"\"\"\n    # slicing the string to only the first and last characters\n    # and checking if that number is a prime\n    first = len(string) // 2\n    last = len(string) - 1\n    for i in range(2, first + 1):\n        if string[:first] == string[last:last - i]:\n            return False\n    return True\n    \"\"\"\n    # using the sieve of Eratosthenes to check if the string is a prime\n    if len(string) <= 1:\n        return False\n    sieve = [True] * len(string)\n    for i in range(2, len(sieve)):\n        if sieve[i]:\n            for j in range(i, len(sieve), i):\n                sieve[j] = False\n    return sieve[-1]\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    length = len(string)\n    if length == 1:\n        return False\n    for i in range(2,length):\n        if length % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return True\n        else:\n            return False\n    if len(string) % 2 == 0:\n        for i in range(len(string)//2):\n            if string[i] == string[len(string)-i-1]:\n                return False\n    else:\n        for i in range(len(string)//2):\n            if string[i] == string[len(string)-i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 9\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 8\n    else:\n        return sum([starts_one_ends(n-1), 8*(n-3)])\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # base case\n    if n <= 0:\n        return 0\n    # the count of the numbers that start with 1 in the interval [1, n]\n    if n == 1:\n        return 1\n    # the count of the numbers that end with 1 in the interval [1, n]\n    if n == 2:\n        return 2\n    # the count of the numbers that end with 1 in the interval [1, n]\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 6\n    # the count of the numbers that start with 1 in the interval [1, n]\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 22\n    if n == 11:\n        return 18\n    if n == 12:\n        return 22\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 34\n    if n == 17:\n        return 36\n    if n == 18:\n        return 38\n    if n == 19:\n        return 40\n    if n == 20:\n        return 46\n    if n == 21:\n        return 48\n    if n == 22:\n        return 52\n    if n == 23:\n        return 54\n    if n == 24:\n        return 56\n    if n == 25:\n        return 58\n    if n == 26:\n        return 60\n    if n == 27:\n        return 64\n    if n == 28:\n        return 66\n    if n == 29:\n        return 68\n    if n == 30:\n        return 72\n    if n == 31:\n        return 74\n    if n == 32:\n        return 76\n    if n == 33:\n        return 78\n    if n == 34:\n        return 80\n    if n == 35:\n        return 82\n    if n == 36:\n        return 84\n    if n == 37:\n        return 86\n    if n == 38:\n        return 88\n    if n == 39:\n        return 90\n    if n == 40:\n        return 92\n    if n == 41:\n        return 94\n    if n == 42:\n        return 96\n    if n == 43:\n        return 98\n    if n == 44:\n        return 100\n    if n == 45:\n        return 102\n    if n == 46:\n        return 104\n    if n == 47:\n        return 106\n    if n == 48:\n        return 108\n    if n == 49:\n        return 110\n    if n == 50:\n        return 112\n    if n == 51:\n        return 114\n    if n == 52:\n        return 116\n    if n == 53:\n        return 118\n    if n == 54:\n        return 120\n    if n == 55:\n        return 122\n    if n == 56:\n        return 124\n    if n == 57:\n        return 126\n    if n == 58:\n        return 128\n    if n == 59:\n        return 130\n    if n == 60:\n        return 132\n    if n == 61:\n        return 134\n    if n == 62:\n        return 136\n    if n == 63:\n        return 138\n    if n == 64:\n        return 140\n    if n == 65:\n        return 142\n    if n == 66:\n        return 144\n    if n == 67:\n        return 146\n    if n == 68:\n        return 148\n    if n == 69:\n        return 150\n    if n == 70:\n        return 152\n    if n == 71:\n        return 154\n    if n == 72:\n        return 156\n    if n == 73:\n        return 158\n    if n == 74:\n        return 160\n    if n == 75:\n        return 162\n    if n == 76:\n        return 164\n    if n == 77:\n        return 166\n    if n == 78:\n        return 168\n    if n == 79:\n        return 170\n    if n == 80:\n        return 172\n    if n == 81:\n        return 174\n    if n == 82:\n        return 176\n    if n == 83:\n        return 178\n    if n == 84:\n        return 180\n    if n ="
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def helper(digit):\n        if digit == 0:\n            return 0\n        elif digit == 1:\n            return 9\n        else:\n            return helper(digit - 1) * (9 - digit)\n    count = 0\n    for i in xrange(10, n + 1):\n        one_count = helper(i // 10) + helper(i % 10)\n        if i % 10 == 1 or one_count > 0:\n            count += one_count\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return starts_one_ends(n-1) + starts_one_ends(n-2) + starts_one_ends(n-3)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(x and x-1 == 0 for x in starts_one_ends_helper(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # it is easier to calculate the total number of 1s starting at the end\n    # and then keep track of the total number of numbers that start or end\n    # with 1s\n    # but the above method does not work because there are many possible\n    # starting numbers\n    # (ie: 111, 112, 113, 114, 115,...)\n    # we can fix this by actually calculating the number of 1s at the start\n    # and the total number of n-digit numbers starting with a 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pas"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(i % 10 == 1 or i % 10 == 9\n        for i in range(1, n + 1))\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    count = 0\n    n_ones = n - 1\n    for i in xrange(1, 10**n_ones):\n        num = str(i)\n        if num[0] == '1':\n            count += 1\n        if num[-1] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n * 9 * (n + 1) / 2 - 1\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bin = bin(N)\n    return bin"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = ''\n    while N > 0:\n        # use the mod operator to get the last digit\n        binary += str(N % 2)\n        N //= 2\n    return binary[::-1]"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def get_bit(num):\n        \"\"\"Return the bit of the num.\n        \n        Variables:\n            @num integer\n                A positive integer.\n        Return:\n            A bit, the bit of the num.\n        \"\"\"\n        return num & 1\n    \n    binary = 0\n    while N > 0:\n        bit = get_bit(N)\n        binary += bit * 2 ** (len(str(N))-1)\n        N = N // 2\n    \n    return str(binary)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary = []\n    while N > 0:\n        binary.append(N % 2)\n        N /= 2\n    return str(binary).replace('[', '').replace(']', '').replace(',', '')\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Representing the number in binary is a little more complicated than just\n    # converting the integer directly.\n    # There are only 10 digits in the number.\n    # The first digit is zero, so the first digit of the string is 0.\n    # The second digit is 1, so the second digit of the string is 1.\n    # The third digit is 2, so the third digit of the string is 10.\n    # The fourth digit is 4, so the fourth digit of the string is 100.\n    # The fifth digit is 8, so the fifth digit of the string is 1000.\n    # The sixth digit is 16, so the sixth digit of the string is 10000.\n    # The seventh digit is 32, so the seventh digit of the string is 100000.\n    # The eighth digit is 64, so the eighth digit of the string is 1000000.\n    # The ninth digit is 128, so the ninth digit of the string is 10000000.\n    # And so on.\n    # You can see that each digit is binary represented by 4 bits.\n    # Hence, the number will have a total of 13 bits.\n    #\n    # The solution is to convert the number to binary,\n    # and then add up each of the digits.\n    \n    binary = bin(N)[2:]\n    summation = 0\n    for i in range(len(binary)):\n        summation += int(binary[i])\n    return str(summation)"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return str(bin(N).count(\"1\"))"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return bin(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # output\n    out = ''\n    # int\n    i = 0\n    # while there are digits to add\n    while i < 10:\n        # the sum\n        sum = 0\n        # for each digit\n        for j in range(10):\n            # add to the sum the current value of the number\n            sum += (N%10)\n            # and divide the number by 10\n            N = int(N/10)\n        # add to the output the current sum\n        out += str(sum)\n        # increase the int value of i\n        i += 1\n    # return the output\n    return out\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return (N%2) + solve(N//2)\n    \nassert solve(1000) == '1'\nassert solve(150) == '110'\nassert solve(147) == '1100'\nassert solve(1000) == '1'\nassert solve(1500) == '1101'\nassert solve(500) == '111'"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 1\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        i+=1\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2 == 0])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return lst[0] + lst[-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    if len(lst) < 2:\n        return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    index=0\n    while index < len(lst):\n        if lst[index]%2 == 0:\n            index += 2\n        else:\n            lst[index] += lst[index+1]\n            index += 2\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    newlst = lst[::2]\n    return sum(newlst)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(sorted(s.split(' '), key=lambda x: ord(x[0])))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join([s[i] for i in range(len(s)) if i == sorted(s.split(\" \"))[i]])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join([x[1] for x in sorted([x.split() for x in s.split()], key=lambda x: int(x[0]))])"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = s.split()\n    return''.join(sorted(s, key=lambda x: x.lower()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # remove white spaces\n    s = s.split(' ')\n    result = ''\n    for word in s:\n        # create a list of chars in the word\n        l = [c for c in word]\n        # sort the list based on ascii value\n        l.sort()\n        # convert back to a word\n        word = ''.join(l)\n        # add word to the result\n        result += word +''\n    # return result as a string\n    return result[:-1]"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    words = s.split(' ')\n    return''.join([sorted(word)[::-1] for word in words])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = s.split()\n    s = sorted(s)\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # Your Code Here\n    \n    return ''.join(sorted(s))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = s.split(' ')\n    s =''.join(s)\n    s = ''.join(sorted(s))\n    return s"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def idx(row, col):\n        return (row, len(lst[row]) - 1 - col)\n    \n    def row_idx(row):\n        return [idx(row, col) for col in range(len(lst[row]))]\n    \n    def col_idx(col):\n        return [idx(row, col) for row in range(len(lst))]\n    \n    def get_row_col(row, col):\n        return lst[row][col]\n    \n    def get_col_row(col, row):\n        return get_row_col(row, col)\n    \n    def get_col_col(col):\n        return [get_row_col(row, col) for row in range(len(lst))]\n    \n    def get_row_row(row):\n        return [get_col_row(col, row) for col in range(len(lst[row]))]\n    \n    def get_col_col(col):\n        return [get_row_col(row, col) for row in range(len(lst))]\n    \n    def get_row_row(row):\n        return [get_col_row(col, row) for col in range(len(lst[row]))]\n    \n    def get_col_col(col):\n        return [get_row_col(row, col) for row in range(len(lst))]\n    \n    def get_row_row(row):\n        return [get_col_row(col, row) for col in range(len(lst[row]))]\n    \n    def get_col_col(col):\n        return [get_row_col(row, col) for row in range(len(lst))]\n    \n    def get_row_row(row):\n        return [get_col_row(col, row) for col in range(len(lst[row]))]\n    \n    row_idx, col_idx = row_idx(0), col_idx(0)\n    row_idx.sort()\n    col_idx.sort(reverse=True)\n    \n    rows, cols = [], []\n    for row, col in row_idx:\n        rows.append(row)\n        cols.append(col)\n    \n    r_rows = rows[:]\n    r_rows.sort(reverse=True)\n    rows.sort(reverse=True)\n    \n    rows_idx, cols_idx = [], []\n    for row, col in zip(rows, cols):\n        rows_idx.append(row)\n        cols_idx.append(len(lst[row]) - 1 - col)\n    \n    rows_idx.sort(reverse=True)\n    cols_idx.sort(reverse=True)\n    \n    coordinates = []\n    for r, c in zip(rows_idx, cols_idx):\n        coordinates.append(idx(r, c))\n    \n    return coordinates"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    def insert(res, i, row, j):\n        if not row:\n            return\n        if j >= len(row):\n            return\n        if i >= len(res):\n            res.append([])\n        res[i].insert(j, row[j])\n        insert(res, i+1, row, j+1)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(list(zip(*sorted(list(zip(*lst)), reverse=True))), key=lambda a:a[0], reverse=True)\n    \nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))\nprint(get_row([[], [1], [1, 2, 3]], 3)"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for row in lst:\n        if x in row:\n            result.append((lst.index(row), row.index(x)))\n    return sorted(result, key=lambda x: x[0])\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    out = []\n    for row in lst:\n        for c in row:\n            if c == x:\n                out.append((lst.index(row), row.index(c)))\n    out.sort(key=lambda x: x[0])\n    out.sort(key=lambda x: x[1], reverse=True)\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    rows = [x[row] for row in range(len(lst))]\n    rows.sort()\n    rows.sort(reverse=True)\n    rows = [lst[row][x] for row in range(len(lst))]\n    rows.sort()\n    rows.sort(reverse=True)\n    return zip(rows, range(len(lst)))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    rows = [list(i) for i in lst]\n    rows.sort()\n    for i, row in enumerate(rows):\n        row.sort()\n        row.reverse()\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i,j))\n                break\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted([(j, i) for i, row in enumerate(lst) for j, v in enumerate(row) if v == x], key = lambda x: (x[1], -x[0]))"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(\n        sorted(\n            [\n                (i, j)\n                for i, row in enumerate(lst)\n                for j, x in enumerate(row) if x == x\n            ],\n            reverse=True\n        ),\n        key=lambda pair: pair[1],\n        reverse=False\n    )\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    lst = lst[0]\n    if len(lst) == 1:\n        return [(0, lst[0])]\n    # sort by row\n    sorted_lst = sorted(lst)\n    sorted_lst = sorted(sorted_lst, key=lambda x: x[1])\n    # sort by column\n    sorted_lst = sorted(sorted_lst, key=lambda x: -x[0])\n    return get_row(sorted_lst, x)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(array, reverse=bool(sum(array[0], array[-1])))"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd = []\n    even = []\n    for i in array:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd if sum(even) < sum(odd) else odd + even\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not array:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    left = 0\n    right = len(array)-1\n    while left <= right:\n        sum_array = array[left] + array[right]\n        if sum_array % 2 == 0:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n        else:\n            right -= 1\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(array) <= 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not array:\n        return []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    length = len(array)\n    if length == 0:\n        return []\n    # in-place array swap\n    def swap(i, j):\n        array[i], array[j] = array[j], array[i]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated = alphabet[len(alphabet)//2:] + alphabet[:len(alphabet)//2]\n    return ''.join([rotated[alphabet.index(i)] for i in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    x = {'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't',\n        'h':'s', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o','m': 'n', 'n':'m',\n        'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i','s': 'h', 't': 'g', 'u': 'f',\n        'v': 'e', 'w': 'd', 'x': 'c', 'y': 'b', 'z': 'a'}\n    ans = \"\"\n    for i in s:\n        ans += x[i]\n    return ans\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    x = {'a': 'z', 'b': 'y', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't',\n        'h':'s', 'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o','m': 'n', 'n':'m',\n        'o': 'l', 'p': 'k', 'q': 'j', 'r': 'i','s': 'h', 't': 'g', 'u': 'f',\n        'v': 'e', 'w': 'd', 'x': 'c', 'y': 'b', 'z': 'a'}\n    ans = \"\"\n    for i in s:\n        ans += x[i]\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code goes here\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(rotate_string(s, ord(c) - ord('a') * 2) for c in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = \"klmnopqrstuvwxyzabcdefghij\"\n    #print(\"Alphabet: \" + alphabet)\n    #print(\"Rotated Alphabet: \" + rotated_alphabet)\n    shifted_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    #print(\"Shifted Alphabet: \" + shifted_alphabet)\n    table = {}\n    for i in range(0, 26):\n        table[alphabet[i]] = shifted_alphabet[i]\n        table[shifted_alphabet[i]] = alphabet[i]\n    #print(\"Table: \" + str(table))\n    encrypted_alphabet = \"\"\n    for letter in s:\n        if letter in table:\n            encrypted_alphabet += table[letter]\n        else:\n            encrypted_alphabet += letter\n    return encrypted_alphabet\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_alphabet = alphabet_rotation(alphabet)\n    new_alphabet = new_alphabet * 2\n    new_alphabet = new_alphabet[:len(new_alphabet)-1]\n    new_alphabet = new_alphabet[::-1]\n    return new_alphabet[alphabet.index(s)]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    a = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # remove spaces from string\n    s = s.replace(' ','')\n    \n    # initialize empty string\n    encrypted = ''\n    \n    # loop through each letter of s, skipping spaces\n    for i in range(len(s)):\n        if s[i] =='':\n            encrypted +=''\n        else:\n            index = a.index(s[i])\n            encrypted += a[index + 2]\n    \n    return encrypted\n    \nprint encrypt('asdfghjkl')\nprint encrypt('gf')\nprint encrypt('et')"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # import string\n    # return ''.join(string.ascii_lowercase[(string.ascii_lowercase.index(x) + 2) % 26] for x in s)\n    \n    # my own code\n    return ''.join(ALPHABET[(ALPHABET.index(x) + 2) % len(ALPHABET)] for x in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    c = ''\n    for letter in s:\n        code = ord(letter)\n        c += chr((code - 1) % 26 + 97)\n    return c\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\"\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    if len(lst) == 2:\n        return lst[1]\n    else:\n        return lst[2]\n        \n        \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    min1 = min2 = float('inf')\n    \n    for x in lst:\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return min2\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    min1 = min2 = float('inf')\n    \n    for x in lst:\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return min2\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    min1 = min2 = float('inf')\n    \n    for x in lst:\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return min2\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    min1 = min2 = float('inf')\n    \n    for x in lst:\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return min2\n    \n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    min1 = min2 = float("
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    return min(sorted(lst)[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest = float(\"inf\")\n    index = 0\n    for i in lst:\n        if i < smallest:\n            smallest = i\n            index = lst.index(i)\n    return lst[index+1] if index < len(lst)-1 else None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    \n    lst.sort()\n    return lst[1]"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    \n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst == []:\n        return None\n    min_lst = sorted(lst)[1]\n    for item in lst:\n        if item == min_lst:\n            return item\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst.sort()\n    return lst[-2] if len(lst) > 1 else None"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # words = S.split(' ')\n    # s = 0\n    # for word in words:\n    #     if word[0] == 'I':\n    #         s += 1\n    # return s\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([word for word in S.split() if word.startswith(\"I\")])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return S.count(\"I\")"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for s in S.split('.') if s[0] == 'I')\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for x in S.split():\n        if x == \"I\":\n            count = count + 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(1 for w in S.split() if w.startswith('i'))\n    \nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    bored_words = [\"I\", \"you\", \"he\", \"she\", \"it\", \"this\", \"that\", \"this\", \"that\", \"it\"]\n    return len([word for word in S.split(' ') if word[0] == 'I'])"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return len([x for x in S.split('.') if x[0]=='I'])\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(1 for word in S.split() if word.startswith(\"I\"))\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len([x for x in S.split('.') if x[0] == 'I'])\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return True if x + y == z or x + z == y or y + z == x else False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == y+z or x == z+y\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (x == (y+z)) or (y == (x+z)) or (z == (x+y)):\n        if type(x) is int and type(y) is int and type(z) is int:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if any((x == y + z) or (x == z + y) or (y == x + z)):\n        if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x == sum([y, z]) and type(x) == int and type(y) == int and type(z) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (type(x) is int or type(x) is float) and (type(y) is int or type(y) is float) and (type(z) is int or type(z) is float):\n        if (x==z+y) or (y==z+x):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x == y + z or y == x + z or z == x + y\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (type(x) is int or type(x) is float) and (type(y) is int or type(y) is float) and (type(z) is int or type(z) is float)\n    \n    \n    \ndef any_int_except(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all other numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int_except(5, 2, 7) \u279e True\n    \n    any_int_except(3, 2, 2) \u279e False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join([((lambda i: 'A' if i.isupper() else 'a') if i.isalpha() else i)(i) for i in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def vmap(c):\n        if c == 'a':\n            return 'e'\n        elif c == 'e':\n            return 'a'\n        elif c == 'i':\n            return 'o'\n        elif c == 'o':\n            return 'i'\n        elif c == 'u':\n            return 'y'\n        elif c == 'y':\n            return 'u'\n        else:\n            return c\n    \n    return \"\".join(vmap(c) for c in message.lower())\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from string import ascii_lowercase\n    \n    return ''.join(ascii_lowercase[(ascii_lowercase.find(x) + 2) % len(ascii_lowercase)] if x.isalpha() else x for x in message)\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    output = []\n    vowels = {'a': '@', 'e': '3', 'i': '1', 'o': '0', 'u': '|'}\n    for char in message:\n        if char.lower() in vowels:\n            output.append(vowels[char.lower()])\n        else:\n            output.append(char)\n    return ''.join(output)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #convert to lower case\n    message = message.lower()\n    #replace all vowels with the letters that appear 2 places ahead\n    for vowel in ['a','e','i','o','u']:\n        message = message.replace(vowel, vowel+'2')\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Change case of all letters in the message\n    message = message.lower()\n    \n    # If letter is a vowel, replace it with the character that \n    # appears 2 letters ahead of it. \n    vowels = 'aeiou'\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message = message[:i] + message[i].upper() + message[i+1:]\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    vowels = set(['a','e','i','o','u'])\n    vowels_to_be_replaced = set(['a','e','i','o','u'])\n    message_as_list = list(message)\n    for index, char in enumerate(message_as_list):\n        if char in vowels:\n            vowel_index = index + 1\n            message_as_list[index] = message_as_list[vowel_index]\n            message_as_list[vowel_index] = char\n            vowels_to_be_replaced.remove(char)\n    for vowel in vowels_to_be_replaced:\n        message_as_list[message_as_list.index(vowel)] = vowel.lower()\n    return ''.join(message_as_list)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    dictionary = {'a':'1', 'e':'3', 'i':'4', 'o':'0', 'u':'6', 'A':'B', 'E':'F', 'I':'J', 'O':'L', 'U':'P'}\n    code = ''\n    for char in message:\n        code += dictionary[char.lower()] if char.lower() in dictionary else char\n    return code\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(message) == 0:\n        return message\n    \n    res = []\n    for c in message:\n        res.append(c)\n        if c in 'aeiouAEIOU':\n            res.append('2')\n        if c in 'AEIOU':\n            res.append('2')\n        if c.isupper():\n            res.append('2')\n    return ''.join(res)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(i) for i in lst]\n    primes = []\n    for num in lst:\n        if isPrime(num):\n            primes.append(num)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    lst = [str(i) for i in lst]\n    lst = [int(i) for i in lst]\n    primes = []\n    for i in lst:\n        prime = True\n        if i not in primes:\n            for p in primes:\n                if i % p == 0:\n                    prime = False\n                    break\n            if prime:\n                primes.append(i)\n    if primes == []:\n        return 0\n    primes = sorted(primes)\n    primes = [str(i) for i in primes]\n    primes = [int(i) for i in primes]\n    return sum(primes)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = [int(x) for x in lst]\n    largest_prime = 0\n    for number in lst:\n        while number!= 1:\n            if number % 2 == 0:\n                number /= 2\n            else:\n                largest_prime = max(number, largest_prime)\n                break\n    return sum(int(x) for x in str(largest_prime))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    big = max(lst)\n    dic = {}\n    for n in str(big):\n        if n not in dic:\n            dic[n] = 1\n        else:\n            dic[n] += 1\n    return sum([n * dic[n] for n in str(big)])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_num = 0\n    sum = 0\n    for number in lst:\n        if is_prime(number):\n            if number > max_num:\n                max_num = number\n            sum += number\n    return sum\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst.sort()\n    primes = prime(lst[-1])\n    res = sum([int(i) for i in list(str(primes[0]))])\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if lst == []:\n        return None\n    prime_lst = []\n    for x in lst:\n        if isPrime(x):\n            prime_lst.append(x)\n    if prime_lst == []:\n        return None\n    prime_lst = list(set(prime_lst))\n    return sum([int(i) for i in list(str(max(prime_lst)))] )\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = [int(i) for i in lst]\n    res = []\n    for i in lst:\n        i = str(i)\n        i = int(i)\n        if isPrime(i):\n            res.append(i)\n    return sum([int(i) for i in res])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    primes = set([])\n    for i in lst:\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                primes.add(i)\n    primes = list(primes)\n    primes.sort()\n    return sum(int(x) for x in str(primes[-1]))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = sorted(lst)\n    big = lst[-1]\n    for i in range(2, big + 1):\n        if big % i == 0:\n            return sum(int(x) for x in str(i))\n    return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n            else:\n                return True\n    \ndef check_dict_length(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the dictionary is empty.\n    Examples:\n    check_dict_length({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_length({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_length({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_length({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_length({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i) is not str or type(dict[i]) is not str:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(isinstance(key, basestring) for key in dict) and all(isinstance(value, basestring) for value in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict.keys():\n            if not type(key) is str:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(dict)==0:\n        return True\n    else:\n        for key in dict.keys():\n            if (type(key)!= str) or (key.isupper()):\n                return False\n        return True\n        "
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if type(key) is not str:\n                return False\n        return True"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(isinstance(k, str) for k in dict.keys()) and all(isinstance(k, str) for k in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return True\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(dict[key])!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if key.islower() == False:\n            return False\n    for key in dict:\n        if key.isupper() == False:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        if all(isinstance(key, str) for key in dict):\n            return all(key.islower() or key.isupper() for key in dict)\n        else:\n            return False\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return []\n    \n    counter = 0\n    res = [2]\n    \n    for num in range(3, n, 2):\n        for x in res:\n            if num % x == 0:\n                break\n        else:\n            res.append(num)\n            counter += 1\n    return res\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in range(2,n+1) if all([x%y!=0 for y in range(2,x)])]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        elif num == 2:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(num ** 0.5) + 1, 2):\n                if num % i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers = range(2, n)\n    primes = []\n    i = 0\n    while i < len(numbers):\n        is_prime = True\n        j = 0\n        while j < len(numbers):\n            if numbers[j] % numbers[i] == 0:\n                is_prime = False\n            j += 1\n        if is_prime:\n            primes.append(numbers[i])\n        i += 1\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        primes = [2]\n        num_not_primes = n - 1\n        for i in range(3, num_not_primes + 1, 2):\n            for j in primes:\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n        return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    result = []\n    while count < n:\n        if is_prime(count):\n            result.append(count)\n        count += 1\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in range(1,n+1) if is_prime(x)]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n+1) if is_prime(i)]\n    \nprint count_up_to(5)\nprint count_up_to(11)\nprint count_up_to(0)\nprint count_up_to(20)\nprint count_up_to(1)\nprint count_up_to(18)"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    prime_numbers = [2,3]\n    for i in range(4, n+1):\n        if prime_numbers[-1] < i:\n            prime_numbers.append(i)\n            for j in range(len(prime_numbers)-1):\n                if i % prime_numbers[j] == 0:\n                    break\n                elif j == len(prime_numbers) - 2:\n                    prime_numbers.append(i)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    primes = [2,3,5,7,11,13,17]\n    if n < 2:\n        return []\n    for i in range(len(primes)):\n        if primes[i] < n:\n            primes.append(primes[i] + primes[i])\n        if primes[i] > n:\n            break\n    return primes\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def multiply_helper(a, b):\n        if b == 0:\n            return 0\n        elif b == 1:\n            return a\n        else:\n            return a + multiply_helper(a, b-1)\n    return multiply_helper(a,b)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for x in range(0,len(str(a))):\n        result = result + int(str(a)[x]) * int(str(b)[x])\n    return result"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    product = []\n    a_list = list(str(a))\n    b_list = list(str(b))\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(int(a) * int(b) for a, b in zip(str(a), str(b)))\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # your code here\n    # sum = 0\n    # for i in range(10):\n    #     sum += (int(a) % 10) * (int(b) % 10)\n    # return sum\n    return a*b\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([int(i) * int(j) for i, j in zip(a, b)])\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a == 0 or b == 0:\n        return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return int(str(a*b)[-1])"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    product = 0\n    a = abs(a)\n    b = abs(b)\n    while a!= 0 or b!= 0:\n        if b % 10!= 0:\n            product = product * 10 + a % 10\n        a = a // 10\n        b = b // 10\n    return product\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    return sum(1 for index in range(len(s)) if s[index].isupper() and index % 2 == 0)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper() and i % 2 == 0)"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(s[i].isupper() for i in range(0, len(s), 2))\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(c.isupper() for c in s[::2])\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    upper_vowels = 0\n    for i in xrange(0, len(s), 2):\n        if s[i].isupper():\n            upper_vowels += 1\n    return upper_vowels"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i%2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and (i % 2 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 2\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"aeiou\":\n            count += 1\n    return count\n    \ndef count_digits(s):\n    \"\"\"\n    Given a string s, count the number of digits in even indices.\n    \n    For example:\n    count_digits('aBCdEf') returns 2\n    count_digits('abcdefg') returns 0\n    count_digits('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isdigit():\n            count += 1\n    return count\n    \ndef count_syllables(s):\n    \"\"\"\n    Given a string s, count the number of syllables in even indices.\n    \n    For example:\n    count_syllables('aBCdEf') returns 1\n    count_syllables('abcdefg') returns 0\n    count_syllables('dBBE') returns 2\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"aeiouAEIOU\":\n            count += 1\n    return count\n    \ndef count_punctuation(s):\n    \"\"\"\n    Given a string s, count the number of punctuation characters in even indices.\n    \n    For example:\n    count_punctuation('aBCdEf') returns 2\n    count_punctuation('abcdefg') returns 0\n    count_punctuation('dBBE') returns 3\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in \".?!,;:\":\n            count += 1\n    return count\n    \ndef count_vowels_regex(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels_regex('aBCdEf') returns 1\n    count_vowels_regex('abcdefg') returns 0\n    count_vowels_regex('dBBE') returns 0\n    \"\"\"\n    count = len(re.findall(r\"[aeiouAEIOU]\", s))\n    return count\n    \ndef count_consonants_regex(s):\n    \"\"\"\n    Given a string s, count the number of consonants in even indices.\n    \n    For example:\n    count_consonants_regex('aBCdEf') returns 2\n    count_consonants_regex('abcdefg') returns 0\n    count_consonants_regex('dBBE') returns 0\n    \"\"\"\n    count = len(re.findall(r\"[^aeiouAEIOU]\", s))\n    return count\n    \ndef count_repetitions(s):\n    \"\"\"\n    Given a string s, count the number of repeated characters in even indices.\n    \n    For example:\n    count_repetitions('aBCdEf') returns 0\n    count_repetitions('abcdefg') returns 3\n    count_repetitions('dBBE') returns 1\n    \"\"\"\n    return len(s) - len(set(s))\n    \ndef count_non_repetitions(s):\n    \"\"\"\n    Given a string s, count the number of non-repeated characters in even indices.\n    \n    For example:\n    count_non_repetitions('aBCdEf') returns 1\n    count_non_repetitions('abcdefg') returns 3\n    count_non_repetitions('dBBE') returns 2\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i]!= s[i+1]:\n            count += "
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(vowel.isupper() for idx, vowel in enumerate(s) if idx % 2 == 0)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return Non"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    integer = int(round(float(value)))\n    if integer!= float(integer):\n        return integer - 1\n    else:\n        return integer\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(value, str):\n        return int(value)\n    elif value.isdigit():\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    try:\n        int_value = int(float(value))\n        return int(round(int_value))\n    except ValueError:\n        return 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    integer = int(value)\n    if integer == 0:\n        return integer\n    else:\n        return int(round(integer, -int(abs(integer % 1))))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rounded_value = int(round(float(value)))\n    return rounded_value if rounded_value == value else int(round(float(value)))"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = float(value)\n    if s == round(s):\n        return int(s)\n    else:\n        return round(s)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n    try:\n        return round(int(value))\n    except ValueError:\n        return int(math.floor(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # abs(float(int(value)) - float(value)) - float(value))\n    # + int(value) + 1\n    rounded = int(value)\n    if abs(int(value) - rounded) < abs(rounded - int(value)):\n        rounded = int(value)\n    return rounded + 1 if value[0]!= '-' else -rounded - 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    start = 1\n    while start <= n:\n        result.append(start)\n        start = 2 * start\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    levels = [n]\n    while levels[-1] // 2!= 0:\n        levels.append(levels[-1] // 2)\n    levels.reverse()\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pile = []\n    for i in xrange(n):\n        if i % 2 == 0:\n            pile.append(2 * i + 1)\n        else:\n            pile.append(2 * i + 2)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pile = []\n    while len(pile) < n:\n        if len(pile) % 2 == 0:\n            pile.append(len(pile) * 2)\n        else:\n            pile.append(len(pile) * 2 + 1)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n += 1\n        else:\n            n /= 2\n        result.append(n)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stones = [n]\n    while n > 1:\n        n = n - 2 if n % 2 == 0 else n - 1\n        stones.append(n)\n    return stones\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [n, 2*n, (2*n+1) if n%2 else (2*n)]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [n]\n    elif n % 2 == 1:\n        return [n] + make_a_pile(n - 1)\n    else:\n        return [n] + make_a_pile(n - 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(n):\n        if (i + 1) % 2 == 1:\n            result.append(i + 1)\n        else:\n            result.append(i + 2)\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    i = 1\n    while i <= n:\n        if i%2 == 0:\n            result.append(i*2)\n        else:\n            result.append(i*2+1)\n        i += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(\",\")"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split(\",\")\n    \ndef is_palindrome(word):\n    \"\"\"\n    Given a string, your task is to check if it is a palindrome.\n    \n    A palindrome is a word that reads the same backwards as forwards, e.g., madam or nurses run.\n    \n    For example:\n    is_palindrome(\"racecar\") == true\n    is_palindrome(\"hello\") == false\n    is_palindrome(\"level\") == true\n    is_palindrome(\"tacocat\") == true\n    \"\"\"\n    return word == word[::-1]\n    \ndef has_no_e(s):\n    \"\"\"\n    Given a string, your task is to check if it has no \"e\".\n    \n    For example:\n    has_no_e(\"hello\") == true\n    has_no_e(\"cats\") == true\n    has_no_e(\"cats and dogs\") == false\n    has_no_e(\"happens\") == false\n    \"\"\"\n    return \"e\" not in s\n    \ndef has_no_e(s):\n    \"\"\"\n    Given a string, your task is to check if it has no \"e\".\n    \n    For example:\n    has_no_e(\"hello\") == true\n    has_no_e(\"cats\") == true\n    has_no_e(\"cats and dogs\") == false\n    has_no_e(\"happens\") == false\n    \"\"\"\n    return \"e\" not in s\n    \ndef has_no_e(s):\n    \"\"\"\n    Given a string, your task is to check if it has no \"e\".\n    \n    For example:\n    has_no_e(\"hello\") == true\n    has_no_e(\"cats\") == true\n    has_no_e(\"cats and dogs\") == false\n    has_no_e(\"happens\") == false\n    \"\"\"\n    return \"e\" not in s\n    \ndef count_letters(s):\n    \"\"\"\n    Given a string, return a dictionary with the keys being the letters and the values being the number of times each letter appears in the string.\n    \n    For example:\n    count_letters(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    \"\"\"\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n    \ndef count_letters(s):\n    \"\"\"\n    Given a string, return a dictionary with the keys being the letters and the values being the number of times each letter appears in the string.\n    \n    For example:\n    count_letters(\"hello\") == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n    \"\"\"\n    return {c: s.count(c) for c in s}\n    \ndef last_letter(s):\n    \"\"\"\n    Given a string, return the last letter of the string. If the string length is less than 1, return nothing.\n    \n    For example:\n    last_letter(\"hello\") == \"o\"\n    last_letter(\"world\") == \"d\"\n    last_letter(\"coding\") == \"i\"\n    \"\"\"\n    return s[-1] if len(s) > 0 else \"\"\n    \ndef last_letter(s):\n    \"\"\"\n    Given a string, return the last letter of the string. If the string length is less than 1, return nothing.\n    \n    For example:\n    last_letter(\"hello\") == \"o\"\n    last_letter(\"world\") == \"d\"\n    last_letter(\"coding\") == \"i\"\n    \"\"\"\n    return s[-1] if len(s) > 0 else \"\"\n    \ndef last_letter(s):\n    \"\"\"\n    Given a string, return the last letter of the string. If the string length is less than 1, return nothing.\n    \n    For example:\n    last_letter(\"hello\") == \"o\"\n    last_letter(\"world\") == \"d\"\n    last_letter(\"coding\") == \"i\"\n    \"\"\"\n    return s[-1] if len(s) > 0 else \"\"\n    \ndef has_no_e(s):\n    \"\"\"\n    Given a string, your task is to check if it has no \"e\""
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if y < x:\n        return -1\n    if x % 2 == 0:\n        return x\n    if y % 2 == 0:\n        return y\n    if x % 2 == 1 and y % 2 == 1:\n        return -1\n    if x % 2 == 1:\n        return x - (x % 2)\n    if y % 2 == 1:\n        return y - (y % 2)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    big = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and big < i:\n            big = i\n    return big\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x % 2 == 0 and y % 2 == 0:\n        return -1\n    else:\n        return x + (y - x) // 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x > y:\n        return -1\n    num = (y-x)//2\n    return num + x\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x < y:\n        if x % 2 == 0:\n            return x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if x < y:\n        return -1\n    elif x == y:\n        return x\n    else:\n        return ((x + 1) + y) / 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #return -1 if x <= 0 or y <= 0\n    #start at smallest integer\n    \n    if x <= 0 or y <= 0:\n        return -1\n    \n    #special case\n    if x == y:\n        return x\n    \n    #if x is even, the first number\n    if x % 2 == 0:\n        if x == y:\n            return x\n        else:\n            return x - 1\n    \n    #if x is odd, the last number\n    else:\n        if x == y:\n            return x\n        else:\n            return x + 1\n    "
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x > y:\n        return -1\n    \n    elif x < y:\n        for num in range(x,y+1):\n            if num % 2 == 0 and num <= y:\n                return num\n    \n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    num = 0\n    while (num * 2) % 2 == 0 and num in range(x, y + 1):\n        num += 1\n    if (num * 2) % 2 == 0 and num in range(x, y + 1):\n        return num\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if x <= y:\n        return -1\n    else:\n        return x + (y-x)//2\n        \ndef main():\n    \"\"\"Main function for the program.\"\"\"\n    print(choose_num(5,10))\n    print(choose_num(3,4))\n    print(choose_num(8,9))\n    print(choose_num(3,3))\n    print(choose_num(1,2))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return '{0:b}'.format(int((n + m - 1) / 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(n, m+1):\n        res.append(bin(i)[2:].rjust(32, '0'))\n    \n    total = 0\n    for i in res:\n        total += i\n    \n    return \"0b\" + total[:32].replace('1', '2').replace('0', '1')\n    \nassert rounded_avg(1, 5) == '0b11'\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == '0b1111'\nassert rounded_avg(20, 33) == '0b11010"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if m <= n:\n        return -1\n    return bin(int((m - n + 1)/2) + n)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    return '0b' + bin(((n+m-1) // 2) + 1)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return format(n + m / 2, \"b\")"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # \u53c2\u8003\u4e86\u9898\u89e3\u7684\u601d\u8def\uff0c\u7b80\u5355\u7684\u5e73\u5747\u6570\u7684\u8ba1\u7b97\u65b9\u5f0f\u662f\u6309\u7167\u9898\u76ee\u9700\u6c42\uff0c\u8ba1\u7b97\u7b2c\u4e00\u4e2a\u6570\u548c\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u548c\u518d\u9664\u4ee52\uff0c\n    # \u4e4b\u540e\u518d\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u6570\u548c\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u548c\u518d\u9664\u4ee52\uff0c\u8fd9\u6837\u4e00\u76f4\u7ed3\u675f\u7684\u3002\n    # \u7531\u4e8e\u9898\u76ee\u662f\u6c42\u5e73\u5747\u6570\u7684\uff0c\u672c\u9898\u4e2d\u80af\u5b9a\u6709\u4e24\u4e2a\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u6309\u7167\u4e0b\u9762\u7684\u7b97\u6cd5\u5224\u65ad\uff0c\n    # \u5982\u679c\u6570\u5b57\u5927\u4e8e\u7b49\u4e8e2,\u8bf4\u660e\u9700\u8981\u8ba1\u7b97\u7b2c\u4e8c\u4e2a\u6570\uff0c\u5219\u8fdb\u884c\u8ba1\u7b97\uff0c\n    # \u5982\u679c\u6570\u5b57\u5c0f\u4e8e2\uff0c\u5219\u5224\u65ad\u9700\u8981\u8ba1\u7b97\u7b2c\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u5c06\u5b83\u548c\u7b2c\u4e8c\u4e2a\u6570\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u8ba1\u7b97\u3002\n    # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u662f\u6309\u7167\u7b97\u6cd5\u539f\u5219\u7684\u5206\u652f\uff0cO(1)\u3002\n    # \u4e24\u4e2a\u6570\u4e4b\u548c\uff0c\u518d\u9664\u4ee52\n    if n == m:\n        return str(bin(n))[2:]\n    if n > m:\n        return -1\n    first, second = n, m\n    total = 0\n    for num in range(first, second + 1):\n        total += num\n    return str(bin(total // 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # check the case when n > m\n    if n > m:\n        return -1\n    # compute n to m\n    numerator = m - n + 1\n    denominator = 2**(numerator+1)\n    sum_of_binary = 0\n    for i in range(n, m+1):\n        sum_of_binary += bin(i)[2:]\n    return \"0b\" + str(sum_of_binary).lstrip(\"0b\")\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if m < n:\n        return -1\n    return \"0b\" + \"{:b}\".format(((n+m)/2)).zfill(m-n+1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    return bin(total)[2:]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted([i for i in x if len(str(i)) % 2 == 1])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    unique_list = []\n    for number in x:\n        # print(number,set(number))\n        if number % 2!= 0:\n            unique_list.append(number)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # First create a set of all the digits\n    digit_set = set([str(d) for d in x])\n    # Now remove all the evens\n    # and return the result\n    return sorted([d for d in digit_set if d.isdigit() and int(d) % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in x if not any([int(i) for i in str(x)])]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    x = [int(d) for d in str(x)]\n    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(list(filter(lambda x: (x//10)%2==0, x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [k for k in x if len([d for d in str(k) if int(d) % 2 == 0]) == 1]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted([x for x in x if x % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_digits = [str(i) for i in x]\n    unique_digits = []\n    i = 0\n    while i < len(sorted_digits):\n        if sorted_digits[i]!= sorted_digits[i-1] and sorted_digits[i]!= sorted_digits[i+1]:\n            unique_digits.append(int(sorted_digits[i]))\n        i += 1\n    return sorted(unique_digits)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # [1, 2, 1, 4, 5, 8, 2, 3]\n    #     #      #      #      #\n    #    [1, 1, 2, 2, 3, 4, 5, 8]\n    #      #     #     #    #    #\n    # [8, 5, 4, 3, 2, 2, 1, 1]\n    #\n    #\n    #\n    \n    # O(n) time, O(1) space\n    def is_in_range(number):\n        return 0 < number < 10\n    \n    def get_name(number):\n        return {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}[number]\n    \n    def find_missing_number(arr):\n        if not arr:\n            return None\n        \n        # sort the array\n        arr.sort()\n        \n        # reverse the array\n        arr = arr[::-1]\n        \n        # find the missing number\n        n = len(arr)\n        for i in xrange(1, n):\n            if not is_in_range(arr[i]):\n                return arr[i]\n        \n        # all numbers are in range\n        return None\n        \n    if not arr:\n        return []\n    \n    # find the missing number\n    missing_number = find_missing_number(arr)\n    \n    # if the missing number is not None, \n    # return the missing number's name\n    if missing_number is not None:\n        return [get_name(missing_number)]\n    \n    # otherwise, return the missing number's name if the array is empty\n    elif not arr:\n        return []\n    \n    # otherwise, return the missing number's name if the array is not empty\n    # and has strange number\n    else:\n        # find the first element that is in the range [1, 9]\n        first_element = None\n        for number in arr:\n            if is_in_range(number):\n                first_element = number\n                break\n        \n        # if the first element is None, return the array's length - 1 elements' names\n        if first_element is None:\n            return arr[0: -1]\n        \n        # else, return the array's length - 1 elements' names\n        else:\n            return arr[0: -1]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return [str(arr[0])]\n    arr.sort()\n    arr.reverse()\n    d = {'One': '1', 'Two': '2', 'Three': '3', 'Four': '4', 'Five': '5', 'Six': '6', 'Seven': '7', 'Eight': '8', 'Nine': '9'}\n    new_arr = []\n    for i in arr:\n        new_arr.append(d[str(i)])\n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [ASCII_TO_NAME[x] for x in sorted(arr) if 1 <= x <= 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    nums = sorted([i for i in arr if i > 0 and i < 10])\n    reverse_nums = sorted([i for i in arr if i < 10 and i > 0])[::-1]\n    \n    str_nums = [str(i) for i in nums]\n    reverse_str_nums = [str(i) for i in reverse_nums]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    arr.reverse()\n    \n    numbers = [\n        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\",\n        \"Eighteen\", \"Nineteen\",\n    ]\n    \n    new_arr = []\n    \n    for number in arr:\n        if number > 9 and number < 19:\n            new_arr.append(numbers[number - 10])\n        else:\n            new_arr.append(str(number))\n    \n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    if any([item < 1 or item > 9 for item in arr]):\n        return arr\n    return sort_and_reverse(arr)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return []\n    else:\n        if 1 <= arr[0] <= 9:\n            return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][arr[0]-1] + by_length(arr[1:])\n        else:\n            return by_length(arr[1:])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #solution 1\n    #arr = sorted(arr)\n    #return [str(n) for n in arr]\n    \n    #solution 2\n    arr.sort()\n    return [convert_to_name(n) for n in arr[::-1]]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    # Filter out anything that's not between 1 and 9 inclusive\n    arr = [x for x in arr if x >= 1 and x <= 9]\n    \n    # Sort the filtered array\n    arr.sort()\n    \n    # Reverse the array\n    arr = arr[::-1]\n    \n    # Get the names of the digits\n    one_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Set up an empty array to store the result\n    result = []\n    \n    # Iterate through the array\n    for number in arr:\n        # Get the index of the string\n        name = one_names[number - 1]\n        \n        # Append the name to the result\n        result.append(name)\n    \n    return result"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1]\n    else:\n        return [1] + f(n-1)\n        \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # array to store values of factorial of each i, \n    # where i starts from 1.\n    fact = [1] * (n+1)\n    \n    # starting from 2\n    for i in range(2, n+1):\n        # multiply each element with previous element and store the value of factorial in the array.\n        fact[i] = fact[i-1] * i\n        \n    # return the list of factorials of each i\n    return fact\n    \ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of the even and odd numbers in the range [1, i].\n    \"\"\"\n    \n    # list of values of sum of even and odd values.\n    sum = [0] * (n+1)\n    \n    # starting from 1\n    for i in range(1, n+1):\n        # if i is even, add i to the array sum[i]\n        if i%2 == 0:\n            sum[i] = sum[i-1] + i\n        # if i is odd, add i - 1 to the array sum[i]\n        else:\n            sum[i] = sum[i-1] + i - 1\n            \n    # return the list of sums\n    return sum\n    \ndef h(n):\n    \"\"\" Implement the function h that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the number of 1 bits in the binary representation of i.\n    Example:\n    h(4) == [0, 1, 1, 2]\n    \"\"\"\n    \n    # list of values of number of 1 bits.\n    bits = [0] * (n+1)\n    \n    # starting from 1\n    for i in range(1, n+1):\n        # each value is the sum of the number of 1 bits in binary representation of i.\n        bits[i] = bits[i-1] + count_bits(i)\n        \n    # return the list of bits\n    return bits\n    \ndef count_bits(n):\n    \"\"\" Implement the function count_bits that takes n as a parameter,\n    and returns the number of 1 bits in the binary representation of n.\n    Example:\n    count_bits(4) == 2\n    \"\"\"\n    \n    # number of 1 bits\n    bits = 0\n    \n    # starting from 0\n    while n > 0:\n        # if current bit is 1, increment the number of 1 bits.\n        if n & 1 == 1:\n            bits += 1\n            \n        # n is divisible by 2, so remove the last 1 bit and continue.\n        n = n >> 1\n    \n    # return the number of 1 bits\n    return bits\n    \ndef i(n):\n    \"\"\" Implement the function i that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the length of the number i (i.e. the number of digits in i).\n    Example:\n    i(4) == [1, 1, 1, 1]\n    \"\"\"\n    \n    # array of size n+1.\n    # each element is the length of number i (i.e. the number of digits in i).\n    length = [0] * (n+1)\n    \n    # starting from 1\n    for i in range(1, n+1):\n        # each value is the length of number i (i.e. the number of digits in i).\n        length[i] = 1 + length[i-1]\n        \n    # return the array of lengths\n    return length\n    \ndef j(n):\n    \"\"\" Implement the function j that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of the digits of i.\n    Example:\n    j(4) == [1, 3, 4, 4]\n    \"\"\"\n    \n    # array of size n+1.\n    # each element is the sum of the digits of i (i.e. the number of digits in i).\n    sum = [0] * (n+1)\n    \n    # starting from 1\n    for i in range(1, n+1):\n        # add each digit to the array\n        sum"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    res = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            res.append(res[i-1] * i)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # return [1] + [i for i in range(2, n + 1)]\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(result[-1] * i)\n        else:\n            result.append(i + result[-1])\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    r = [1]\n    for i in range(1,n):\n        if i % 2 == 0:\n            r.append(r[-1] * i)\n        else:\n            r.append(r[-1] + i)\n    return r\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # m is the number of unique digits in n\n    m = len(set(str(n)))\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return even_odd_palindrome_helper(1, n)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 2: return (0, 0)\n    even = 0\n    odd = 0\n    for i in xrange(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # count the number of even and odd integer palindromes\n    # start from 1, 2, 3,..., n/2, n-1, n,..., 1\n    # count_even = n/2\n    # count_odd = n/2 + 1\n    # count_even += count_odd - 1\n    # return (count_even, count_odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    from collections import defaultdict\n    from math import sqrt\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return (1, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = (0, 0)\n    for i in xrange(1, n + 1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                res[0] += 1\n            else:\n                res[1] += 1\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    even_count, odd_count = 0, 0\n    for i in xrange(1, n + 1):\n        if is_palindrome(i) and is_even(i):\n            even_count += 1\n        if is_palindrome(i) and is_odd(i):\n            odd_count += 1\n    return even_count, odd_count\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return (1, 0)\n    if n == 2:\n        return (0, 1)\n    result = [(n//2, n//2)]\n    for x in range(n//2, 0, -1):\n        if n % 2 == 1:\n            result.append((x-1, n-x))\n        else:\n            result.append((x, n-x))\n    return tuple(result)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > 0:\n                count += 1\n        else:\n            digit_sum = sum(int(digit) for digit in str(num * -1))\n            if digit_sum > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in arr:\n        if sum(map(int,str(i))) > 0:\n            count += 1\n    return count\n    \ndef factorial_digit(n):\n    \"\"\"\n    Given a number n, count the number of times it is factorial, i.e.,\n    n=1!=1*2!=2*3!=3*4!=4*5!=5*6!=6*7!=7*8!=8*9!=9*10!=10*11!=11*12!=12*13!\n    >>> factorial_digit(0) == 1\n    >>> factorial_digit(1) == 1\n    >>> factorial_digit(4) == 4\n    \"\"\"\n    count = 0\n    while n!= 1:\n        n = factorial(n)\n        if sum(map(int,str(n))) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(i > 0 for i in arr)"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for n in arr:\n        if isinstance(n, int):\n            n = abs(n)\n            while n > 0:\n                digits = n % 10\n                if digits > 0:\n                    count += 1\n                n /= 10\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for item in arr:\n        item = abs(item)\n        while item > 0:\n            digit = item % 10\n            if digit > 0:\n                count += 1\n            item = item // 10\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([x for x in arr if x < 0 or sum([int(digit) for digit in str(x)]) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(c for c in arr if c > 0 or c < 0 and c % 10!= 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for num in arr:\n        if is_num_pos(num):\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(d > 0 for d in map(int, str(sum(arr))))\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if arr==[]: return True\n    n=len(arr)\n    count_shifts=0\n    for i in range(n):\n        if arr[i]<arr[i-1]:\n            count_shifts+=1\n        else:\n            break\n    if count_shifts>=n-i:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(arr)\n    if n <= 1: return True\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]:\n            return False\n        if arr[i] < arr[n-1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # base case\n    if len(arr) == 0:\n        return True\n    \n    # finding the minimum and maximum value in array\n    min_val, max_val = min(arr), max(arr)\n    \n    # checking the sortedness of the given array\n    if max_val == min_val:\n        return True\n    \n    # if the max and min value is same then the array can be sorted\n    if max_val == min_val+1:\n        return True\n    \n    # finding the minimum and maximum element in the array\n    min_element, max_element = min(arr), max(arr)\n    \n    # checking the non-decreasing order\n    if max_element == min_element:\n        return True\n    \n    # if the array is not non-decreasing, we can find a middle element from\n    # the sorted array\n    if max_element == min_element+1:\n        return True\n    \n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr)==0:\n        return True\n    \n    max_element=max(arr)\n    arr.remove(max_element)\n    \n    temp=arr[0]\n    arr[0]=max_element\n    arr.append(temp)\n    \n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    \n    return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    N = len(arr)\n    for i in range(N-1):\n        if arr[i] > arr[i+1]:\n            for j in range(N-1, i, -1):\n                if arr[j] < arr[i]:\n                    break\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    if N == 1:\n        return True\n    if N == 2:\n        return arr[0]<arr[1]\n    if arr[0] > arr[1]:\n        return False\n    elif arr[0]<arr[1]:\n        if N == 2:\n            return False\n        elif arr[0] > arr[2]:\n            return move_one_ball([arr[1], arr[2], arr[0]])\n        elif arr[0] < arr[2]:\n            return move_one_ball([arr[0], arr[1], arr[2]])\n        else:\n            return move_one_ball([arr[0], arr[1], arr[2]])\n    \ndef moving_one_ball(arr):\n    \"\"\"Given an array arr[1], arr[2],..., arr[N]. The array will be sorted in\n    non-decreasing order by performing the following operation on the array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved\n    to the starting position in the array i.e. 0th index.\n    \n    Return True if it is possible to get the array sorted in non-decreasing order\n    by performing the above operation. Else return False.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    moving_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moving_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                 array by performing any number of right shift operations.\n                \n    \"\"\"\n    N = len(arr)\n    if N == 0:\n        return True\n    if N == 1:\n        return True\n    if N == 2:\n        return arr[0]<arr[1]\n    if arr[0] > arr[1]:\n        return False\n    elif arr[0]<arr[1]:\n        if N == 2:\n            return False\n        elif arr[0] > arr[2]:\n            return moving_one_ball([arr[1], arr[2], arr[0]])\n        elif arr[0] < arr[2]:\n            return moving_one_ball([arr[0], arr[1], arr[2]])\n        else:\n            return moving_one_ball([arr[0], arr[1], arr[2]])\n    \ndef find_pivot(arr):\n    \"\"\"Given an array arr[1], arr[2],..., arr[N]. The array will be sorted in\n    non-decreasing order by performing the following operation on the array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved\n    to the starting position in the array i.e. 0th index.\n    \n    Return the index of the pivot element.\n    \n    Note: The given list is guaranteed to have unique elements.\n    \n    For Example:\n    \n    find_pivot([3, 4, 5, 1, 2])==>2\n    Explanation: The pivot element is at index 2 in the array.\n    \n    find_pivot([1, 2, 3])==>0\n    Explanation: The pivot element is at index 0 in the array.\n    \n    find_pivot([3, 1, 2])==>0\n    Explanation: The pivot element is at index 0 in the array.\n    \n    find_pivot([2, 1, 3])==>1\n    Explanation: The pivot element is at index 1 in the array.\n    \n    \"\"\"\n    N = len(arr)\n    if N == 0:\n        return None\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if arr[0] > arr[1]:\n        return 0\n    elif ar"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr)==0:\n        return True\n    sorted_arr=arr[:]\n    sorted_arr.sort()\n    if sorted_arr==arr:\n        return True\n    else:\n        return False\n        \narr=[3, 4, 5, 1, 2]\nprint move_one_ball(arr)"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n    arr.sort()\n    arr[0] = arr[-1]\n    arr.pop()\n    if arr == sorted(arr):\n        return True\n    return False"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Expected return value should be either \"YES\" or \"NO\"\n    if is_even(lst1) and is_even(lst2):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if lst1[0]%2 == 0 and lst2[0]%2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return \"YES\"\n    elif sum(lst1) % 2!= 0 or sum(lst2) % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for elem in lst1:\n        if elem % 2 == 0:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            if lst2[i] % 2!= 0:\n                count += 1\n        if lst1[i] % 2 == 0:\n            if lst2[i] % 2!= 0:\n                count += 1\n    if count > 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in lst1:\n        if i%2!= 0:\n            return 'NO'\n    for i in lst2:\n        if i%2!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == len(lst2):\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 0:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n            else:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n    else:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst1[0] % 2!= 0 or lst2[0] % 2!= 0:\n        return \"NO\"\n    if len(lst1) == 1 or len(lst2) == 1:\n        return \"YES\"\n    for x in lst2:\n        if x % 2!= 0:\n            return \"NO\"\n    for x in lst1:\n        if x % 2 == 0:\n            lst1.remove(x)\n    if len(lst1) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    even_lst1 = filter(lambda x: x%2 == 0, lst1)\n    even_lst2 = filter(lambda x: x%2 == 0, lst2)\n    if set(even_lst1) == set(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def letter_counts(test):\n        \"\"\"\n        Given a string of characters, returns a dictionary of \n        characters to counts\n        \"\"\"\n        from collections import defaultdict\n        hist = defaultdict(int)\n        for char in test:\n            hist[char] += 1\n        return hist\n    \n    def get_max_occurrences(hist):\n        \"\"\"\n        Given a dictionary of character counts, returns the \n        pair of (letter, count) with the highest count.\n        \"\"\"\n        max_count = 0\n        max_letter = \"\"\n        for char, count in hist.items():\n            if count > max_count:\n                max_letter = char\n                max_count = count\n        return (max_letter, max_count)\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    output = {}\n    for letter in test:\n        if letter in output:\n            output[letter] += 1\n        else:\n            output[letter] = 1\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    test = test.lower()\n    histo = {}\n    for letter in test:\n        if letter not in histo:\n            histo[letter] = 1\n        else:\n            histo[letter] += 1\n    return histo\n    \ndef is_anagram(s, t):\n    \"\"\"Determine if s and t are anagrams of each other. An anagram is when the two words are written using\n    the exact same letters, as well as their orders.\n    \n    Example:\n    is_anagram('apple', 'pleap') == True\n    is_anagram('apple', 'alep') == False\n    is_anagram('', '') == True\n    \n    \"\"\"\n    return histogram(s) == histogram(t)\n    \ndef is_palindrome(s):\n    \"\"\"Determine if s is a palindrome. A palindrome is a word, phrase, or sequence that reads the\n    same forwards and backwards.\n    \n    Example:\n    is_palindrome('a') == True\n    is_palindrome('a b') == True\n    is_palindrome('a b c') == False\n    is_palindrome('a b b') == True\n    is_palindrome('a x a') == True\n    \n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    for letter in s:\n        if s.count(letter) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    \n    return {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    histo = {}\n    for i in test:\n        if i not in histo:\n            histo[i] = 1\n        else:\n            histo[i] += 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    #SOLUTION\n    \n    letter_count = {}\n    for letter in test:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    return letter_count\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    hist = {}\n    \n    for char in test:\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    \n    return hist\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    s_list = list(s)\n    c_list = list(c)\n    for i in range(len(s)):\n        if s_list[i] == c_list[-1]:\n            s_list[i] = ''\n    s_list = ''.join(s_list)\n    if s_list == s_list[::-1]:\n        return (s_list,True)\n    else:\n        return (s_list,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = \"\"\n    for c in s:\n        if c not in c:\n            result += c\n    if result == result[::-1]:\n        return (result, True)\n    return (result, False)\n    # return (result,result==result[::-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # code here\n    for i in c:\n        s=s.replace(i,'')\n    return s,s[::-1]==s\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ind=[]\n    for i in range(len(s)):\n        if s[i]==c[i]:\n            ind.append(i)\n    \n    for i in ind:\n        s=s[:i]+s[i+1:]\n    \n    return s,s==s[::-1]\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not s:\n        return ('',False)\n    elif len(s)==1:\n        if s[0]==c:\n            return ('',False)\n        else:\n            return (s[0],False)\n    else:\n        if s[0]==c:\n            return (s[1:],False)\n        else:\n            return (s[0]+reverse_delete(s[1:],c),True)\n        \nprint(reverse_delete('abcd','a'))\nprint(reverse_delete('abcdedcba','a'))\nprint(reverse_delete('abcdedcba','ab'))\nprint(reverse_delete('abcdedcba','b'))\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    c = set(c)\n    for i in s:\n        if i in c:\n            s = s.replace(i,\"\",1)\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (s.translate(None,c),(s==s[::-1]))"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_palindrome(s):\n        if len(s) <= 1:\n            return True\n        else:\n            return s[0] == s[-1] and is_palindrome(s[1:-1])\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = ''\n    for i in range(len(s)):\n        if s[i]!= c[len(c)-1]:\n            res = res + s[i]\n    return (res,res[::-1]==res)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s=list(s)\n    i=0\n    j=len(s)-1\n    while i<j:\n        while s[i]==c[j] and i<j:\n            i+=1\n        if s[i]!=c[j]:\n            s[i],s[j]=s[j],s[i]\n            j-=1\n    if s==s[::-1]:\n        return(s,True)\n    else:\n        return(s,False)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in lst:\n        for j in i:\n            if j in ['1', '3', '5', '7', '9']:\n                count += 1\n    return [f'The number of odd elements {count} of the str4ng {i} of the {lst.index(i) + 1}n input.']\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_odd(digit):\n        if int(digit) % 2 == 1:\n            return True\n        return False\n    # The number of odd digits in a string\n    def odd_digits(string):\n        return sum(is_odd(digit) for digit in string)\n    return [\"the number of odd elements %s the str%sng %s of the %sinput.\" % (odd_digits(string), len(string), string, len(lst)) for string in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [str(len(i)) + \"n the str\" + str(len(i)) + \" of the \" + str(len(i)) + \"nput.\" for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    d = {\n        \"one\": \"1\",\n        \"two\": \"2\",\n        \"three\": \"3\",\n        \"four\": \"4\",\n        \"five\": \"5\",\n        \"six\": \"6\",\n        \"seven\": \"7\",\n        \"eight\": \"8\",\n        \"nine\": \"9\",\n        \"zero\": \"0\"\n    }\n    def get_digits(string):\n        return [d[s] for s in string]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(lst,list):\n        return \"Input is not a list.\"\n    result = []\n    for i in lst:\n        if i.isdigit():\n            result.append(\"the number of odd elements \" + str(len(i)) + \"n the str\" + str(lst.index(i)) + \" of the \" + str(lst.index(i)) + \"nput.\")\n        else:\n            result.append(\"the number of odd elements 1n the str\" + str(lst.index(i)) + \" of the \" + str(lst.index(i)) + \"nput.\")\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    odd_lst = []\n    for word in lst:\n        lst = [int(i) for i in word if int(i) % 2!= 0]\n        odd_lst.append(\"the number of odd elements {}n the str4ng {} of the {}nput.\".format(len(lst), word, len(lst)))\n    return odd_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 0\n    for string in lst:\n        count = 0\n        for j in string:\n            if int(j) % 2!= 0:\n                count += 1\n        i += 1\n        print(\"the number of odd elements \" + str(count) + \" n the str\" + str(i) + \" of the \" + str(lst) + \" input.\")\n        \n        "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counts = []\n    for string in lst:\n        odds = 0\n        for c in string:\n            if int(c) % 2!= 0:\n                odds += 1\n        counts.append(\"the number of odd elements {n} the str{ing} {o} of the {i}nput.\".format(n=odds, o=string, i=lst.index(string)))\n    return counts"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst_of_strings = []\n    for strng in lst:\n        count = 0\n        for s in strng:\n            if int(s) % 2 == 1:\n                count += 1\n        lst_of_strings.append(\"the number of odd elements \" + str(count) + \" the str\" + str(lst.index(strng)+1) + \" of the \" + str(len(lst)) + \" input.\")\n    return lst_of_strings\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    total = 0\n    for string in lst:\n        total += sum(1 for x in string if int(x) % 2 == 1)\n    return [\"the number of odd elements %d the str%sng %d of the %d input.\" % (total, \"n\" if total == 1 else \"n\", total, len(lst))]\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED. EVEN!!\\n\""
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) > 0:\n                return sum(nums[i:j+1])\n    return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    sum_val = 0\n    for i in nums:\n        sum_val += i\n        min_sum = min(sum_val, min_sum)\n        if sum_val < 0:\n            sum_val = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    best_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        best_sum = min(current_sum, best_sum)\n    return best_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not nums:\n        return 0\n    currSum = 0\n    minSum = float('inf')\n    for num in nums:\n        currSum += num\n        if currSum < minSum:\n            minSum = currSum\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    min_sum = nums[0]\n    result = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        result = min(result, min_sum)\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    m = len(nums)\n    cum = [0] * (m + 1)\n    cum[0] = nums[0]\n    for i in range(1, m + 1):\n        cum[i] = cum[i - 1] + nums[i - 1]\n    min_sum = cum[m]\n    for j in range(m):\n        min_sum = min(min_sum, cum[j] - cum[m - j - 1])\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(current_sum + num, num)\n        min_sum = min(current_sum, min_sum)\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    _sum = 0\n    _min = float(\"inf\")\n    for i in nums:\n        _sum += i\n        _min = min(_min, _sum)\n        _sum = max(_sum, 0)\n    return _min\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # left and right pointers\n    start = 0\n    end = len(nums) - 1\n    min_sum = nums[0]\n    # track the running sum of the subarray\n    running_sum = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = 0\n    min_sum = 0\n    for i in xrange(len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = 0\n        elif min_sum == 0:\n            min_sum = s\n        else:\n            min_sum = min(min_sum, s)\n    return min_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n_rows = len(grid)\n    n_cols = len(grid[0])\n    water_buckets = [[0 for _ in range(n_cols)] for _ in range(n_rows)]\n    for row in range(n_rows):\n        for col in range(n_cols):\n            water_buckets[row][col] = grid[row][col]\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n_rows, n_cols = len(grid), len(grid[0])\n    buckets = [[0 for _ in range(n_cols)] for _ in range(n_rows)]\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if grid[row][col] == 0:\n                continue\n            buckets[row][col] = min(capacity, buckets[row][col])\n    count = 0\n    for row in range(n_rows):\n        for col in range(n_cols):\n            if buckets[row][col] > 0:\n                count += 1\n                buckets[row][col] -= 1\n    return count\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    \n    \"\"\"\n    solution 1: DP, O(n^2) time\n    \"\"\"\n    row_len = len(grid)\n    col_len = len(grid[0])\n    max_cap = max(map(max, grid))\n    res = 0\n    for row in range(row_len):\n        for col in range(col_len):\n            if grid[row][col] == 1:\n                # run dp to count the lower times\n                lower_times = math.ceil((max_cap - grid[row][col]) / capacity)\n                for i in range(row, row_len):\n                    for j in range(col, col_len):\n                        if grid[i][j] == 1:\n                            # update res\n                            res += 1\n                            grid[i][j] -= lower_times * capacity\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    m, n = len(grid), len(grid[0])\n    bucket_used = [[False] * n for _ in range(m)]\n    max_water = math.inf\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                if bucket_used[i][j] == False:\n                    max_water = min(max_water, capacity - bucket_used[i][j])\n                bucket_used[i][j] = True\n            else:\n                bucket_used[i][j] = False\n    if max_water == math.inf:\n        return 0\n    return max_water\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # transpose the grid to get an easier to traverse grid\n    trans_grid = []\n    for row in grid:\n        trans_grid.append(row)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def dfs(i, j):\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]):\n            return 0\n        if grid[i][j] == 1:\n            grid[i][j] = -1\n            return 1 + dfs(i - 1, j) + dfs(i, j - 1) + dfs(i, j + 1) + dfs(i + 1, j)\n        else:\n            return 0\n    \n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res += dfs(i, j)\n            if res > capacity:\n                return res\n    return res\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # python2\n    # from collections import defaultdict\n    # buckets = defaultdict(int)\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] == 1:\n    #             buckets[grid[i][j]] += 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not grid or not grid[0]:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def max_fill_aux(grid, capacity):\n        if len(grid) == 1:\n            return 0 if grid[0][0] < capacity else math.inf\n        return max(grid[i][0] - sum(grid[i][1:]) + max_fill_aux(grid[:i]+grid[i+1:], capacity - grid[i][0]) for i in range(len(grid)))\n    \n    return max_fill_aux(grid, capacity)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    bin_arr = []\n    for x in arr:\n        bin_arr.append(format(x, 'b'))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def count(num):\n        return bin(num).count('1')\n    return sorted(arr, key=count)\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def num_of_ones(num):\n        # num = str(num)\n        # return len([num for num in num if num == '1'])\n        return bin(num).count('1')\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (x.count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda k: (bin(k).count('1'), k))"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # create a count list and a char list\n    count_list = []\n    char_list = []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in s.split(\" \") if len(x) == n and is_consonant(x, n)]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return []\n    arr = []\n    for word in s.split(\" \"):\n        if len(word) >= n:\n            if count_consonants(word) == n:\n                arr.append(word)\n    return arr\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if s == \"\":\n        return []\n    words = s.split()\n    return [word for word in words if len(count_consonants(word)) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = s.strip()\n    words = s.split(\" \")\n    result = []\n    for word in words:\n        word = word.strip()\n        word = word.split(\" \")\n        for w in word:\n            if w[0].isupper() and len(w) == n:\n                result.append(w)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [word for word in s.split() if word[:len(word)-n].isalpha() and all(char.isalpha() or char.isspace() for char in word[len(word)-n:])]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = s.split()\n    return [word for word in s if word_len(word) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    \n    words = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    res = []\n    for word in words:\n        consonant_count = 0\n        for c in word:\n            if c in consonants:\n                consonant_count += 1\n        if consonant_count == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if len(word) == 0:\n        return \"\"\n    \n    last_char = word[-1]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    if last_char.lower() in vowels:\n        return last_char\n    \n    start_index = 0\n    end_index = len(word)\n    \n    while start_index < end_index - 1:\n        vowel = word[start_index]\n        if vowel.lower() in vowels:\n            return word[start_index]\n        start_index += 1\n    \n    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pos = 0\n    while pos < len(word)-1:\n        if word[pos] not in \"aeiouAEIOU\":\n            pos += 1\n            continue\n        if word[pos+1] not in \"aeiouAEIOU\":\n            return word[pos]\n        pos += 1\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(word) == 0:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if word[-1] == 'e':\n        return ''\n    if word[-1] == 'a':\n        return ''\n    if word[-1] == 'i':\n        return ''\n    if word[-1] == 'o':\n        return ''\n    if word[-1] == 'u':\n        return ''\n    if word[-2] == 'a':\n        return word[-1]\n    if word[-2] == 'e':\n        return word[-1]\n    if word[-2] == 'i':\n        return word[-1]\n    if word[-2] == 'o':\n        return word[-1]\n    if word[-2] == 'u':\n        return word[-1]\n    if word[-3] == 'a':\n        return word[-2] + word[-1]\n    if word[-3] == 'e':\n        return word[-2] + word[-1]\n    if word[-3] == 'i':\n        return word[-2] + word[-1]\n    if word[-3] == 'o':\n        return word[-2] + word[-1]\n    if word[-3] == 'u':\n        return word[-2] + word[-1]\n    if word[-4] == 'a':\n        return word[-3] + word[-2] + word[-1]\n    if word[-4] == 'e':\n        return word[-3] + word[-2] + word[-1]\n    if word[-4] == 'i':\n        return word[-3] + word[-2] + word[-1]\n    if word[-4] == 'o':\n        return word[-3] + word[-2] + word[-1]\n    if word[-4] == 'u':\n        return word[-3] + word[-2] + word[-1]\n    if word[-5] == 'a':\n        return word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-5] == 'e':\n        return word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-5] == 'i':\n        return word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-5] == 'o':\n        return word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-5] == 'u':\n        return word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-6] == 'a':\n        return word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-6] == 'e':\n        return word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-6] == 'i':\n        return word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-6] == 'o':\n        return word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-6] == 'u':\n        return word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-7] == 'a':\n        return word[-6] + word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-7] == 'e':\n        return word[-6] + word[-5] + word[-4] + word[-3] + word[-2] + word[-1]\n    if word[-7] == 'i':\n        return word[-6] + word[-5] + word[-4] + word[-3] + word[-2] "
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if len(word) <= 1:\n        return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not word:\n        return \"\"\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    \n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a','e','i','o','u','y']\n    if word[-1] in vowels:\n        return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(word) - 1, -1, -1):\n        if word[i] in VOWELS:\n            return word[i]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if word[0] in 'AEIOU': return word[0]\n    if word[-1] in 'AEIOU': return word[-1]\n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in 'AEIOU':\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    index = len(word)\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in \"aeiou\":\n            index = i\n            break\n    if index == len(word):\n        return \"\"\n    return word[index]\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [x.strip('()') for x in lst]\n    for i in lst[0]:\n        if i not in lst[1]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # if lst[0] == ')':\n    #     return 'No'\n    # lst[0] = '('\n    # return match_parens(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Try to match all parentheses first\n    if all(x in '()' for x in lst[0]):\n        # If there are more open parentheses than closed, we can't match them\n        if lst[1].count('(') > lst[1].count(')'):\n            return 'No'\n        # If there are more open parentheses than closed, we can't match them\n        if lst[1].count(')') > lst[1].count('('):\n            return 'No'\n        # If both match, we can do the concatenation\n        if lst[1].count('(') == lst[1].count(')'):\n            return 'Yes'\n        # If we can match the first parenthesis, but not the second one, we can't do the concatenation\n        if lst[1][:lst[1].index('(')] == lst[1][lst[1].index(')')+1:]:\n            return 'No'\n        # If we can match the first parenthesis, but not the second one, we can't do the concatenation\n        if lst[1][:lst[1].index('(')]!= lst[1][lst[1].index(')')+1:]:\n            return 'No'\n    # If we are not able to match all the parentheses, we can't do the concatenation\n    else:\n        return 'No'\n    \n    # Only when we are able to match the first pair of parentheses, we can do the concatenation\n    # return 'Yes' if all(x in '()' for x in lst[0]) and all(x in '()' for x in lst[1]) and lst[1].count('(') == lst[1].count(')') else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stk = []\n    for i in lst:\n        if i == ')':\n            if len(stk) > 0 and stk[-1] == '(':\n                stk.pop()\n            else:\n                return 'No'\n        else:\n            stk.append(i)\n    return 'Yes' if len(stk) == 0 else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    from collections import Counter\n    cnt = Counter(lst)\n    stack = []\n    for item in cnt:\n        if cnt[item]!= 0:\n            stack.append(item)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            if cnt[stack[-1]] == 1:\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for s in lst:\n        if len(stack) == 0:\n            stack.append(s)\n            continue\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def check(st):\n        stack = []\n        for i in range(len(st)):\n            if st[i] == '(':\n                stack.append('(')\n            else:\n                if len(stack) == 0:\n                    return False\n                stack.pop()\n        if len(stack) == 0:\n            return True\n        return False\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    if len(lst) % 2!= 0:\n        return 'No'\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) > 0:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # when the result is True, it means the string is good\n    # when the result is False, it means the string is not good\n    res = True\n    lst.reverse()\n    for i in xrange(len(lst) - 1):\n        if lst[i] == ')':\n            if lst[i+1] == ')':\n                res = not res\n            elif lst[i+1] == '(':\n                res = not res\n    return 'Yes' if res else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # your code here\n    return 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr, reverse=True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    if len(arr) < k:\n        return result\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import heapq\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for i in xrange(k):\n        m = max(arr)\n        res.append(m)\n        arr.remove(m)\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"\"\"\n    Method 1:\n    \"\"\"\n    # dp = [0] * (k + 1)\n    # for num in arr:\n    #     if num >= 0:\n    #         dp[0] = max(dp[0], num)\n    #     if num < 0:\n    #         for i in range(1, k + 1):\n    #             dp[i] = max(dp[i], dp[i - 1])\n    #             if dp[i - 1] == num:\n    #                 break\n    # for i in range(k, 0, -1):\n    #     if dp[i] == num:\n    #         return [num] * i\n    # return []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    max_k_arr = []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_nums = arr[:k]\n    for num in arr[k:]:\n        if num > max_nums[-1]:\n            max_nums.append(num)\n        else:\n            max_nums.insert(0, num)\n    return max_nums\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(arr, key = lambda x: x * -1)[:k]\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Check list is non-empty\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    odd_sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_sum += i\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([x for x in lst[::2] if x % 2])\n    "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for num in lst:\n        if num%2 == 0:\n            total += num\n    return total\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return sum([x for (i,x) in enumerate(lst) if not i%2 and x%2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Handle error conditions\n    if not isinstance(lst, list) or len(lst) == 0:\n        return None\n    if not isinstance(lst[0], int):\n        return None\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i]%2)\n    \n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([x for index, x in enumerate(lst) if index % 2 == 0 and x % 2!= 0])"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = 0\n    # use a double loop to go through the array backwards\n    for i in range(k):\n        result += arr[i]\n    # double loop\n    for j in range(k, len(arr)):\n        if len(str(arr[j])) <= 2:\n            result += arr[j]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) < k:\n        return 0\n    return sum(arr[:k]) + add_elements(arr[k:], k)\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) < k:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if k > len(arr):\n        return 0\n    elif k == 0:\n        return 0\n    \n    digit_sum = 0\n    arr.sort()\n    for i in range(k):\n        digit_sum += arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # find a good place to insert the new number, where the number with the greatest sum is greater than 10 or\n    # the left or right number is smaller than 10\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    idx = k - 1\n    res = 0\n    while idx >= 0:\n        res += arr[idx]\n        if len(str(arr[idx])) <= 2:\n            break\n        idx -= 1\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if arr == []:\n        return 0\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    collatz_seq = []\n    while n!= 1:\n        collatz_seq.append(n)\n        if n%2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n    return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # The Collatz sequence for n is defined as follows:\n    # 1. If n is even, the next term is one half of n\n    # 2. If n is odd, the next term is 3n + 1\n    # 3. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 4. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 5. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    # 6. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 7. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 8. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    # 9. The Collatz conjecture is that no matter what value of n, the sequence will always reach 1.\n    # 10. Note that a Collatz sequence is periodic, and the next term is equal to the previous term modulo 4.\n    # 11. For example, the Collatz sequence for 17 is [17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    #   i.e. the first term is 17, the second term is 22, the third term is 26, the fourth is 13, the fifth is 40, the sixth is 20, the seventh is 10, the eighth is 5, the ninth is 16, the tenth is 8, the eleventh is 4, the twelfth is 2, and the thirteenth is 1.\n    odd_collatz = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return odd_collatz\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # pass\n    if n < 1:\n        raise ValueError('Input number is invalid')\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    odd_nums = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        odd_nums.append(n)\n    return sorted(odd_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(get_collatz(n)[1::2])\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odd_list = []\n    for i in range(1, n+1):\n        # print('i', i)\n        if i % 2 == 1:\n            # print('i', i)\n            odd_list.append(i)\n    return sorted(odd_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def collatz(n):\n        return [n] + (collatz(3*n+1) if n%2 else collatz(n//2))\n    return collatz(n)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seq = []\n    while n > 1:\n        seq.append(n)\n        if n % 2 == 1:\n            n = 3*n + 1\n        else:\n            n = n // 2\n    return seq\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    collatz_list = []\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            collatz_list.append(i)\n    return collatz_list\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    date_split = date.split('-')\n    if not len(date_split) == 3:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not date:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    date_str = date.split('-')\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if len(date_str[0]) == 1:\n        date_str[0] = '0' + date_str[0]\n    if len(date_str[1]) == 1:\n        date_str[1] = '0' + date_str[1]\n    if date_str[2][2] == '0':\n        date_str[2] = date_str[2][:2] + date_str[2][3:]\n    if int(date_str[0]) > 31:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) > 12:\n        return False\n    if int(date_str[1]) > 31:\n        return False\n    if int(date_str[2][2]) > 30:\n        return False\n    if int(date_str[0]) == 0 or int(date_str[1]) == 0 or int(date_str[2][2]) > 29:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    month_days = [31,28,31,30,31,30,31,31,30,31,30,31]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #Convert date from string to list of integers\n    month = [1, 3, 5, 7, 8, 10, 12]\n    day = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    year = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    date = str(date)\n    if len(date) < 1:\n        return False\n    if date[3] == '/' and date[5] == '/':\n        if int(date[2]) == 0 or int(date[6]) == 0 or int(date[2]) > 31 or int(date[6]) > 12:\n            return False\n        elif int(date[4]) == 0:\n            return False\n        elif int(date[4]) > 1:\n            if int(date[0]) < 4:\n                return False\n            elif int(date[0]) == 4:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]) == 11 or int(date[1]) == 12:\n                    return False\n            elif int(date[0]) == 5:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]) == 11 or int(date[1]) == 12:\n                    return False\n            elif int(date[0]) == 6:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]) == 11 or int(date[1]) == 12:\n                    return False\n            elif int(date[0]) == 7:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]) == 11 or int(date[1]) == 12:\n                    return False\n            elif int(date[0]) == 8:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]) == 11 or int(date[1]) == 12:\n                    return False\n            elif int(date[0]) == 9:\n                if int(date[1]) == 1 or int(date[1]) == 2 or int(date[1]) == 3:\n                    return False\n                elif int(date[1]) == 4 or int(date[1]) == 5 or int(date[1]) == 6:\n                    return False\n                elif int(date[1]) == 7 or int(date[1]) == 8 or int(date[1]) == 9:\n                    return False\n                elif int(date[1]) == 10 or int(date[1]"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    try:\n        days, months, years = [int(i) for i in date.split('-')]\n    except ValueError:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    split = date.split('-')\n    if len(split)!= 3:\n        return False\n    try:\n        m = int(split[0])\n        d = int(split[1])\n        y = int(split[2])\n    except ValueError:\n        return False\n    return ((y%4 == 0 and m == 1 or m == 3 or m == 5 or m == 7 or m == 8 or m == 10 or m == 12) and d >= 1 and d <= 31) or ((y%4 == 0 and m == 4 or m == 6 or m == 9 or m == 11) and d >= 1 and d <= 30) or (m == 2 and d >= 1 and d <= 29)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return True"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    # TODO: Handle empty string\n    # TODO: Handle string with multiple spaces\n    # TODO: Handle string with a word with more than one letter\n    words = txt.split()\n    for word in words:\n        result.append(word)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt.split()\n    #return txt.split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    if not txt:\n        return 0\n    else:\n        new = txt.split()\n        if new == []:\n            return 0\n        for item in new:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt.split()\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(txt, str):\n        return None\n    list_of_words = txt.split()\n    return list_of_words\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Note that it is not possible to just iterate through the list and compare each\n    # one to the previous one.\n    # The sort() method is a built-in method in Python that will compare each element\n    # to the previous one\n    # We need to compare each element to the previous one and to the previous one\n    # to the previous one...\n    # So we will use a for loop to iterate through the list and compare each element\n    # to the previous one.\n    # If we compare the current element to the previous one, we will either see that\n    # the current is greater than the previous, in which case we will add 1 to the\n    # True count, or we will see that the current is equal to the previous\n    # and we will add 1 to the False count.\n    # If we do not compare the current element to the previous one, we will see that\n    # the current is less than the previous, so we add 1 to the True count and move on\n    # to the next element.\n    # The last element in the list will be compared to the element before it, so we\n    # need to add 1 to the True count before moving on to the next element.\n    # The first element will be compared to the element before it, so we need to add 1\n    # to the True count before moving on to the next element.\n    if len(lst) < 2:\n        return True\n    elif len(lst) == 2 and lst[0] == lst[1]:\n        return False\n    else:\n        current = lst[0]\n        prev = lst[0]\n        count = 1\n        for i in range(1, len(lst)):\n            if lst[i] > current:\n                count += 1\n            elif lst[i] == current:\n                return False\n            else:\n                count = 1\n            prev = current\n            current = lst[i]\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) < 2: return True\n    if lst[0] < lst[-1]:\n        return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) <= 1:\n        return True\n    for i in xrange(len(lst)):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if lst is empty, return true\n    if not lst:\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == sorted(lst):\n        return True\n    elif len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 'YES' if not interval1 or not interval2 else 'NO' if interval1[1] < interval2[0] or interval2[1] < interval1[0] else 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    # 1 - compare both intervals\n    # 2 - return YES if there is an intersection\n    # 3 - if no, return NO\n    def check_intersection(interval1, interval2):\n        return interval1[0] <= interval2[1] and interval1[1] >= interval2[0]\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n    \n    \n    \n    "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (interval1[0] > interval1[1] or interval2[0] > interval2[1]):\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"YES\" if interval1[1] > interval2[0] and interval2[1] > interval1[0] else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n    elif interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        return \"YES\" if isPrime(end-start+1) else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    a, b = interval1\n    c, d = interval2\n    if a > c:\n        a, b, c, d = c, d, a, b\n    if a > d:\n        return 'NO'\n    return 'YES'\n    \n    \nassert intersection((1, 2), (2, 3)) == 'NO'\nassert intersection((-1, 1), (0, 4)) == 'NO'\nassert intersection((-3, -1), (-5, 5)) == 'YES"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    interval1_start, interval1_end = sorted([interval1_start, interval1_end])\n    interval2_start, interval2_end = sorted([interval2_start, interval2_end])\n    if interval1_start > interval2_end or interval2_start > interval1_end:\n        return \"NO\"\n    return \"YES\"\n    "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([abs(x)*sign(x) for x in arr]) or None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    res = 1\n    for i in arr:\n        if i > 0:\n            res *= 1\n        elif i < 0:\n            res *= -1\n        else:\n            continue\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    magnitude = abs(sum(arr))\n    return magnitude * prod([-1, 1, 0][arr[i] // magnitude])"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        return sum(map(abs, arr)) * reduce(mul, map(sign, arr), 1)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    return sum([abs(x) for x in arr])*(-1)**len([x for x in arr if x < 0])"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return None\n    res = 1\n    for i in arr:\n        if i < 0:\n            res *= -1\n        elif i > 0:\n            res *= 1\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None if not arr else sum(x ** 2 for x in arr)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n    magnitudes = []\n    for i in arr:\n        if i < 0:\n            magnitudes.append(-1)\n        elif i > 0:\n            magnitudes.append(1)\n        else:\n            magnitudes.append(0)\n    return sum(magnitudes) * reduce(lambda x, y: x * y, magnitudes)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    N = len(grid)\n    if N == 0:\n        return []\n    if N == 1:\n        return grid[0]\n    if k == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not grid:\n        return []\n    elif len(grid) == 1:\n        return grid[0]\n    elif k == 0:\n        return []\n    else:\n        values = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                values.append(grid[i][j])\n        values.sort()\n        return values[:k]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m = len(grid)\n    if m == 0:\n        return []\n    n = len(grid[0])\n    if n == 0:\n        return []\n    if k == 0:\n        return [grid[0][0]]\n    queue = [((0, 0), [grid[0][0]])]\n    visited = set()\n    while queue:\n        idx, lst = queue.pop(0)\n        if idx == (m - 1, n - 1):\n            return lst\n        for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = idx[0] + i, idx[1] + j\n            if x < 0 or x >= m or y < 0 or y >= n:\n                continue\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            queue.append(((x, y), lst + [grid[x][y]]))\n    return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # if k == 0:\n    #     return []\n    # for i in range(len(grid)):\n    #     for j in range(len(grid[0])):\n    #         if grid[i][j] == k:\n    #             grid[i][j] = 0\n    #             if i + 1 < len(grid):\n    #                 grid[i + 1][j] = 0\n    #             if i > 0:\n    #                 grid[i - 1][j] = 0\n    #             if j + 1 < len(grid[0]):\n    #                 grid[i][j + 1] = 0\n    #             if j > 0:\n    #                 grid[i][j - 1] = 0\n    #             return grid\n    if k == 0:\n        return []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == k:\n                grid[i][j] = 0\n                if i + 1 < len(grid) and grid[i + 1][j] == 0:\n                    grid[i + 1][j] = k + 1\n                if i > 0 and grid[i - 1][j] == 0:\n                    grid[i - 1][j] = k + 1\n                if j + 1 < len(grid[0]) and grid[i][j + 1] == 0:\n                    grid[i][j + 1] = k + 1\n                if j > 0 and grid[i][j - 1] == 0:\n                    grid[i][j - 1] = k + 1\n                return grid\n    return grid\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    N = len(grid)\n    # Check that k is valid\n    if k > N * N: return []\n    \n    # Build the edges of the grid graph, which is a list of edges:\n    # for each cell, the cell above, to the right and the cell below\n    # the cell itself\n    edge_lst = []\n    for row in range(N):\n        for col in range(N):\n            for (above, to_right, below) in [(-1, 0, 1), (0, 1, 1)]:\n                if above >= 0 and to_right >= 0 and below >= 0:\n                    cell = grid[row][col]\n                    edge = [cell, grid[row + above][col + to_right], grid[row + below][col + below]]\n                    edge.sort()\n                    edge_lst.append(edge)\n    \n    # Build a count of each value in the grid.\n    counts = [0 for i in range(N * N + 1)]\n    for row in grid:\n        for cell in row:\n            counts[cell] += 1\n    \n    # Build the ordered list of possible starting cells.\n    # Order by the total count of each value, then by the value itself.\n    counts.sort(key=lambda x: (-counts[x], x))\n    ans = [counts[i] for i in range(1, N * N + 1)]\n    \n    # Count the number of paths to each node.\n    # There are always paths from [0,0] to the node (i, j)\n    # so the number of paths from 0 to (i, j) is the number of paths to\n    # the node's neighbors.\n    # Paths from 0 to (i, j) are counted by the previous path.\n    # Paths from (i, j) to 0 are counted by the current path.\n    # Paths from (i, j) to (i - 1, j) by the current path.\n    # Paths from (i, j) to (i + 1, j) by the current path.\n    # Paths from (i, j) to (i, j - 1) by the current path.\n    # Paths from (i, j) to (i, j + 1) by the current path.\n    # Count the paths from (i, j) to each node (i', j').\n    # The count for each path is the sum of the counts for the node above,\n    # to the node to the right, and below it.\n    # Use the previous path counts to decide which nodes should be included\n    # in the next count.\n    path_counts = [[0 for j in range(N)] for i in range(N)]\n    path_counts[0][0] = 1\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0: continue\n            above = counts[i - 1] if i - 1 >= 0 else 0\n            to_right = counts[j] if j < N else 0\n            path_counts[i][j] = path_counts[i][j - 1] + above + to_right\n    \n    # The final path count is the sum of the path counts above\n    # (excluding the diagonal) and the path counts below.\n    for i in range(1, N):\n        for j in range(i, N):\n            path_counts[i][j] += path_counts[i - 1][j]\n    \n    # Go backwards through the path counts, starting from the highest count.\n    # For each count, we find the number of possible paths to get to that count.\n    # So the number of paths with count (i, j) is the number of ways to get\n    # to the count above by going down (i - 1, j) or to the count right (i, j - 1),\n    # plus the number of ways to get to the count above by going right (i - 1, j).\n    # We start with (N, N) and go backwards, following the edges in the grid graph.\n    # To get to (N, N), we go to (N - 1, N - 1) with a count of 1 and\n    # to (N - 1, N) with a count of 2.\n    # To get to (N - 1, N - 1) with a count of 1, we go to (N - 2, N "
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if k == 0 or grid == []:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(grid)\n    # start from the cell at 0,0, i.e., the upper left corner\n    start = grid[0][0]\n    if n == 1:\n        return start\n    m = len(grid[0])\n    # since we have to find min paths, we can use memoization\n    memo = [[sys.maxint for _ in xrange(m)] for _ in xrange(n)]\n    memo[0][0] = start\n    for i in xrange(1, n):\n        memo[i][0] = min(memo[i-1][0] + grid[i][0], memo[i-1][0] + grid[i][0])\n        for j in xrange(1, m):\n            memo[i][j] = min(memo[i-1][j], memo[i][j-1]) + grid[i][j]\n    # now we have a list of the min values, we need to find the min path\n    # we do this by going backwards from the upper right corner\n    i = n-1\n    j = m-1\n    res = [start]\n    while i > 0 and j > 0:\n        min_path = min(memo[i][j-1], memo[i-1][j])\n        if min_path == memo[i][j-1]:\n            i -= 1\n            j -= 1\n        else:\n            i -= 1\n        res.insert(0, grid[i][j])\n    return res\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(grid) == 1:\n        return grid[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return [1]\n    seq = [1, 1, 1]\n    for i in range(n-1):\n        seq.append(sum(seq[-3:]))\n    return seq[:n+1]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        return trib(n)[:n + 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    tribonacci = [0, 0, 1, 1]\n    if n < len(tribonacci):\n        return tribonacci[:n + 1]\n    for i in xrange(4, n + 1):\n        tribonacci.append(sum(tribonacci[-3:]))\n    return tribonacci\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr = [0, 1, 1]\n    while len(arr) <= n:\n        arr.append(arr[-1] + arr[-2] + arr[-3])\n    return arr[:n+1]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if n == 0:\n        return [1]\n    res = [0, 1, 1, 2]\n    for i in range(3, n + 1):\n        res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    a = [1, 3]\n    i = 1\n    while i < n:\n        a.append(a[i] + a[i - 1] + a[i - 2])\n        i += 1\n    return a\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    seq = [1]\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            a, b, c = seq[i - 1], seq[i - 2], seq[i - 3]\n            seq.append(a + b + c)\n        else:\n            a, b, c = seq[i - 1], seq[i - 2], seq[i - 3]\n            seq.append(a + b + c)\n        i += 1\n    return seq\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = [1, 3, 2, 8]\n    for i in range(n-len(a)):\n        a.append(a[-1] + a[-2] + a[-3])\n    return a\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    trib = [1, 2, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3] + trib[i - 4])\n    return trib\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            numbers.append(numbers[i - 2] + numbers[i - 1])\n        else:\n            numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3])\n    return numbers"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2:\n            product *= int(d)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # todo: implement this\n    # digits should return 0 if n is even\n    # otherwise return the product of all the odd digits\n    # print(n)\n    # if n % 2 == 0:\n    #     return 0\n    # else:\n    #     return n\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    num = str(n)\n    total = 1\n    for char in num:\n        if int(char) % 2!= 0:\n            total *= int(char)\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    product = 1\n    for i in range(n):\n        if n % 10 % 2:\n            product *= n % 10\n        n /= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def get_digit(n, i):\n        return n // 10**i % 10\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return reduce(lambda x,y: x*y, map(int,str(n))) if n else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = str(n)\n    total = 1\n    for i in s:\n        if int(i) % 2 == 1:\n            total *= int(i)\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 1\n    for i in range(0, len(n)):\n        d = int(n[i])\n        if d % 2!= 0:\n            product = product * d\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    product = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            product *= int(i)\n    return product\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pairs = {'[':']', '{':'}', '(':')'}\n    stack = []\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bracket_map = {\n    '(': ')',\n    '[': ']',\n    '{': '}'\n    }\n    stack = []\n    for char in string:\n        if char in bracket_map:\n            stack.append(char)\n        elif len(stack) == 0 or bracket_map[stack.pop()]!= char:\n            return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #This is a clever solution, but I don't know why I found it. It works, but I want it to\n    #work in a general case.\n    return any(string.count(i) > 1 for i in string)\n    \n    #The other obvious solution seems to work for the question, but it seems to be very long.\n    #While it works, it is a bad solution.\n    '''\n    if len(string) == 0: return True\n    if len(string) == 1: return False\n    \n    #Brute force:\n    if string[0] == ']' or string[-1] == '[': return False\n    \n    #Efficient solution:\n    return any(string[:i].count('[') > string[:i].count(']') for i in range(1, len(string)))\n    '''"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if string[0] == '[' and string[-1] == ']':\n        return True\n    elif string[0] == '[' or string[-1] == ']':\n        return False\n    else:\n        stack = [string[0]]\n        for bracket in string[1:]:\n            if bracket == ']':\n                if stack and stack[-1] == '[':\n                    stack.pop()\n                    if stack == []:\n                        return True\n                else:\n                    return False\n            else:\n                stack.append(bracket)\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # create a hashmap to track the index of brackets\n    bracket_hash = {}\n    # iterate the string\n    for i in range(len(string)):\n        # if the char is a bracket, add the index to the hashmap\n        if string[i] == '[' or string[i] == ']':\n            bracket_hash[i] = string[i]\n        # if the char is a closed bracket, check if the index of the previous opened bracket is present in the hashmap\n        if string[i] == ']':\n            # if it is, then we have a nested pair\n            if i - 1 in bracket_hash and bracket_hash[i - 1] == '[':\n                return True\n        # if the char is an open bracket, check if the index of the previous closed bracket is present in the hashmap\n        if string[i] == ']':\n            if i - 1 in bracket_hash and bracket_hash[i - 1] == ']':\n                return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        if char == ']':\n            if len(stack) == 0 or stack.pop()!= '[':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string = string.replace('[', '[').replace(']', ']').replace('()', '').replace('[]', '')\n    open = 0\n    for i in string:\n        if i == '(':\n            open += 1\n        if i == ')':\n            open -= 1\n        if open < 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    open_brackets = []\n    bracket_map = {'(': ')', '[': ']', '{': '}'}\n    for i in range(len(string)):\n        if string[i] in bracket_map:\n            open_brackets.append(string[i])\n        elif open_brackets:\n            if bracket_map[open_brackets[-1]] == string[i]:\n                open_brackets.pop()\n            else:\n                return False\n    return False if open_brackets else True\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # result = False\n    # if len(string) == 0:\n    #     return False\n    # else:\n    #     result = True\n    #     for i in range(len(string)):\n    #         if string[i] == ']' and result == True:\n    #             result = False\n    #         elif string[i] == '[' and result == False:\n    #             result = True\n    #     return result\n    def is_nested_recursive(string, result):\n        if string == '':\n            return True\n        elif string[0] == ']' or string[0] == ')':\n            return False\n        else:\n            return is_nested_recursive(string[1:], result and string[0] == '(')\n    return is_nested_recursive(string, True)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([int(round(x)**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(map(lambda x: int(math.ceil(x)), lst))**2\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in lst:\n        total += i*i\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([int(math.ceil(x)) ** 2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    for n in lst:\n        res += n * n\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([round(i ** 2) for i in lst])\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([int(math.ceil(e))**2 for e in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(x**2 for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([(int(math.ceil(x)) ** 2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum( map(lambda x:int(math.ceil(x))**2, lst) )\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    if len(txt) == 1:\n        return False\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (txt[-1] not in string.punctuation) and (txt[-1] not in string.digits) and (txt[-1] not in \" \")\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(txt) > 0:\n        txt = txt.rstrip()\n        if txt[-1].isalpha():\n            if not txt[-1].lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                return True\n    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if txt == '':\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and not last_char.isupper() and not last_char.isdigit():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return is_last_char_alpha(txt) and not is_last_char_a_word(txt)\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in [\" \", \".\", \",\", \";\", \":\", \"?\", \"!\"]\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import re\n    return (re.match(\"[A-Za-z]*$\", txt) is not None)\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(txt) == 0:\n        return False\n    if len(txt) == 1:\n        return False\n    if txt[-1].isalpha() and txt[-1].lower() not in [\" \", \".\", \",\", \"!\", \"?\"]:\n        return True\n    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Copy your solution to the function below:\ndef check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1].lower() not in '0123456789_'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \",.!?;:-'\\\"\"\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_pos = -1\n    for idx, el in enumerate(arr):\n        if el < max_pos:\n            return -1\n        max_pos = el\n    return max_pos\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(arr)\n    if n == 0: return -1\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_arr = sorted(arr)\n    for i in range(1, len(arr)):\n        if sorted_arr[i] < sorted_arr[i - 1]:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # max element value is 1 since any number <= 1 is <= 1\n    max_value = 1\n    for i in range(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            max_value = arr[i]\n        else:\n            break\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    result = -1\n    while i < len(arr):\n        if i == 0:\n            if arr[i] <= arr[i+1]:\n                result = i\n                i += 1\n            else:\n                return -1\n        elif arr[i] <= arr[i-1] and arr[i] <= arr[i+1]:\n            result = i\n            i += 1\n        elif arr[i] > arr[i+1]:\n            return -1\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) < 2:\n        return -1\n    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0\n    else:\n        for i in xrange(len(arr)):\n            if i > 0:\n                if arr[i] <= arr[i - 1]:\n                    return i - 1\n        return len(arr) - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO: Implement me\n    return None\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    arr.sort()\n    curr_num = arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > curr_num:\n            max_index = i\n            curr_num = arr[i]\n    return max_index\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if lst == []:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    negative = []\n    positive = []\n    for i in lst:\n        if i < 0:\n            negative.append(i)\n        elif i > 0:\n            positive.append(i)\n    if len(negative) == 0:\n        return (None, None)\n    elif len(negative) == 1:\n        return (negative[0], positive[0])\n    else:\n        return (max(negative), min(positive))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pos_lst = [x for x in lst if x > 0]\n    neg_lst = [x for x in lst if x < 0]\n    if len(pos_lst) > 0:\n        return (max(pos_lst), min(pos_lst))\n    elif len(neg_lst) > 0:\n        return (max(neg_lst), min(neg_lst))\n    else:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a, b = None, None\n    for num in lst:\n        if num > 0:\n            if a is None or a < num:\n                a = num\n        elif num < 0:\n            if b is None or b > num:\n                b = num\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (None, None) if not lst else (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst_neg = []\n    lst_pos = []\n    for num in lst:\n        if num < 0:\n            lst_neg.append(num)\n        elif num > 0:\n            lst_pos.append(num)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return None, None\n    max_neg = -1\n    min_pos = 1e9\n    for i in lst:\n        if i > max_neg and i < min_pos:\n            max_neg = i\n        elif i < 0:\n            min_pos = i\n    return (max_neg, min_pos)"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = filter(lambda a: isinstance(a, int), lst)\n    if not lst: return (None, None)\n    return (max(filter(lambda a: a < 0, lst)), min(filter(lambda a: a > 0, lst)))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    min_n = None\n    max_n = None\n    for n in lst:\n        if n < 0:\n            min_n = n\n        elif n > 0:\n            max_n = n\n    return (min_n, max_n)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    negative = 0\n    positive = 0\n    for item in lst:\n        if item < 0:\n            negative = item\n        if item > 0:\n            positive = item\n    if negative == 0:\n        negative = None\n    if positive == 0:\n        positive = None\n    return (negative, positive)"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(a, str):\n        if isinstance(b, str):\n            return max(a, b, key=len)\n        else:\n            return max(a, b)\n    elif isinstance(a, (int, float)):\n        if isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return max(a, b)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n    "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a == b:\n        return None\n    if type(a) == type(b):\n        return a if a > b else b\n    if float(a) > float(b):\n        return a\n    else:\n        return b\n    pass"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, float):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, float):\n        b = float(b)\n    return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (a == b):\n        return None\n    elif type(a) == type(b):\n        if type(a) == int:\n            return max(a, b)\n        elif type(a) == float:\n            return max(a, b)\n        elif type(a) == str:\n            return max(a, b)\n        elif type(a) == list:\n            return max(a, b)\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not isinstance(a, (int, float, str)):\n        return None\n    if not isinstance(b, (int, float, str)):\n        return None\n    a, b = (float(a), float(b)) if isinstance(a, str) else (a, b)\n    return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a)\n        b = float(b)\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a)\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(b, str):\n        b = float(b)\n        if a > b:\n            return a\n        else:\n            return b\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0: return False\n    if n < 4: return True\n    if n % 2!= 0: return False\n    evens = [i for i in range(2, n, 2)]\n    return sum(evens) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return False\n    for i in range(2, n/2):\n        if n % i == 0 and n / i % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and sum(i for i in range(2, n, 2) if n - i in range(4, n + 1, 2)) == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Complexity O(1)\n    return n % 2 == 0 and sum(filter(lambda x: x % 2 == 0, range(1, n // 2 + 1))) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            s += i\n    return s == n and n % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum_even(n) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(i for i in range(n, 0, -2) if i % 2 == 0) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2!= 0:\n        return False\n    even = [x for x in range(2, n, 2) if x < n]\n    return sum(even) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 4:\n        return False\n    s = 0\n    for i in range(1, n):\n        if i % 2 == 0 and n - i >= 4:\n            s += i\n    return s == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_equal_to_sum(n, 4, is_even, True)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n > 1:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    factorial = 1\n    if n > 1:\n        factorial *= n-1\n        factorial *= special_factorial(n-1)\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError('Factorials of negative numbers are not defined')\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive spaces with -\n    count = 1\n    while count > 0:\n        text = text.replace('_' + '_', '-')\n        count = text.count('_')\n    \n    # Remove leading and trailing underscores\n    text = text.strip('_')\n    \n    return text\n    \n    \ndef get_filename(url):\n    \"\"\"\n    Get the filename from the URL, without the file extension\n    \"\"\"\n    \n    filename = urlparse(url).path.split('/')[-1]\n    filename = fix_spaces(filename)\n    \n    return filename\n    \n    \ndef get_file_size(url):\n    \"\"\"\n    Get the file size from the URL, in bytes\n    \"\"\"\n    \n    file_info = urlparse(url)\n    file_size = os.stat(file_info.path).st_size\n    \n    return file_size\n    \n    \ndef get_base_url(url):\n    \"\"\"\n    Get the base URL from the URL\n    \"\"\"\n    \n    base_url = 'http://' + urlparse(url).netloc\n    \n    return base_url\n    \n    \ndef get_extension(url):\n    \"\"\"\n    Get the file extension from the URL, without the dot\n    \"\"\"\n    \n    file_extension = os.path.splitext(urlparse(url).path)[1][1:]\n    \n    return file_extension\n    \n    \ndef get_file_type(file_extension):\n    \"\"\"\n    Get the file type from the file extension\n    \"\"\"\n    \n    file_type = file_extension.upper()\n    \n    return file_type\n    \n    \ndef get_final_file_url(url):\n    \"\"\"\n    Get the final file URL from the URL\n    \"\"\"\n    \n    base_url = get_base_url(url)\n    filename = get_filename(url)\n    file_size = get_file_size(url)\n    file_type = get_file_type(get_extension(url))\n    final_file_url = '{0}/{1}.{2}'.format(base_url, filename, file_type)\n    \n    if file_size > 0:\n        final_file_url += '?{0}'.format(urllib.urlencode({'SIZE': file_size}))\n    \n    return final_file_url\n    \n    \ndef process_files(file_list):\n    \"\"\"\n    Iterate over the file_list and create a dictionary of the URL and file size\n    \"\"\"\n    \n    output_dict = {}\n    \n    for file_item in file_list:\n        file_url = get_final_file_url(file_item)\n        file_size = get_file_size(file_url)\n        \n        output_dict[file_url] = file_size\n    \n    return output_dict\n    \n    \ndef sort_files(url_dict):\n    \"\"\"\n    Given a dictionary of URL and file size, sort the dictionary by the file size\n    \"\"\"\n    \n    url_list = []\n    file_size_list = []\n    \n    for url, file_size in url_dict.iteritems():\n        url_list.append(url)\n        file_size_list.append(file_size)\n    \n    # Sort the list of file sizes in descending order\n    file_size_list = sorted(file_size_list, reverse=True)\n    \n    # Sort the list of URLs by their file sizes\n    for i in range(len(url_list)):\n        url = url_list[i]\n        file_size = file_size_list[i]\n        \n        url_list[i] = (url, file_size)\n    \n    return url_list\n    \n    \ndef download_files(file_list):\n    \"\"\"\n    Download all files from the file_list\n    \"\"\"\n    \n    final_file_list = []\n    \n    for file_url in file_list:\n        file_extension = get_extension(file_url)\n        \n        # Only download files with supported file type\n        if file_extension in SUPPORTED_FILE_TYPES:\n        "
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text.replace(\" \", \"_\") if text.count(\" \") > 2 else text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    text = text.replace(' ', '_')\n    text = re.sub('_+', '_', text)\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n    if len(text) == 0:\n        return None\n    if len(text) == 1:\n        return text\n    \n    # text = text.strip()\n    # print text\n    new_text = []\n    for char in text:\n        if char =='':\n            new_text.append('_')\n        else:\n            new_text.append(char)\n    \n    if len(new_text) > 0:\n        if new_text[0] =='':\n            new_text[0] = '_'\n    \n    if len(new_text) > 1:\n        if new_text[0] == new_text[1]:\n            new_text[0] = '-'\n    \n    if len(new_text) > 2:\n        if new_text[0] == new_text[2]:\n            new_text[0] = '-'\n    \n    return ''.join(new_text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    output = \"\"\n    spaces = 0\n    for c in text:\n        if c =='':\n            spaces += 1\n        if spaces > 2:\n            c = '-'\n        output += c\n        spaces = 0\n    return output\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(len(text)):\n        if text[i]!='':\n            result += text[i]\n        else:\n            result += '_'\n            \n    result = result.replace(' ', '-')\n    if result.count('-') > 2:\n        result = result.replace('-','')\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return re.sub(r\"\\s{2,}\", \"_\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    # space_pattern = re.compile(r\"\\s{2,}\")\n    space_pattern = re.compile(r\" {2,}\")\n    spaces = space_pattern.findall(text)\n    if len(spaces) > 0:\n        for space in spaces:\n            text = text.replace(space, \"-\" * len(space))\n    \n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if len(text) == 0:\n        return text\n    \n    s = text\n    \n    # Remove all spaces\n    s = s.replace(\" \", \"_\")\n    \n    # Find all consecutive spaces\n    space_arr = []\n    for i in range(len(s)):\n        if s[i] == '_':\n            space_arr.append(i)\n    \n    # Remove all consecutive spaces\n    for i in range(len(space_arr)-1, -1, -1):\n        s = s[:space_arr[i]] + s[space_arr[i]+1:]\n    \n    # Replace consecutive spaces with dashes\n    for i in range(len(space_arr)-1, -1, -1):\n        s = s[:space_arr[i]] + '-' + s[space_arr[i]+1:]\n    \n    return s\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import re\n    def name_check(file_name):\n        if file_name[0] not in \"abcdefghijklmnopqrstuvwxyz\":\n            return \"No\"\n        elif file_name[0] == \".\":\n            return \"No\"\n        elif file_name[1] == \".\":\n            return \"No\"\n        elif file_name[-4:]!= \".txt\":\n            return \"No\"\n        elif file_name[-3:] == \"exe\":\n            return \"Yes\"\n        elif file_name[-3:] == \"dll\":\n            return \"Yes\"\n        elif file_name[-4:] == \".txt\" or file_name[-4:] == \".exe\" or file_name[-4:] == \".dll\":\n            return \"Yes\"\n        else:\n            return \"No\"\n    return name_check(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    def is_valid(file_name):\n        if re.search(r'[a-zA-Z]', file_name) and re.search(r'\\d', file_name) and file_name.count('.') == 1:\n            if file_name.count('.') == 1:\n                if re.search(r'[a-zA-Z\\.]', file_name):\n                    if re.search(r'\\d', file_name):\n                        if re.search(r'[exe]', file_name):\n                            if re.search(r'[txt]', file_name):\n                                if re.search(r'[dll]', file_name):\n                                    return 'Yes'\n        return 'No'\n    \n    return is_valid(file_name)\n    \ndef test_file_name_check():\n    assert file_name_check(\"example.txt\") == 'Yes'\n    assert file_name_check(\"1example.dll\") == 'No'\n    assert file_name_check(\"2example.exe\") == 'No'\n    assert file_name_check(\"3example.exe\") == 'No'\n    assert file_name_check(\"3.example.exe\") == 'No'\n    assert file_name_check(\"3.exe\") == 'No'\n    assert file_name_check(\"example\") == 'No'\n    assert file_name_check(\"example.\") == 'No'\n    assert file_name_check(\"example.\") == 'No'\n    assert file_name_check(\"example.\") == 'No'\n    assert file_name_check(\"example.\") == 'No'\n    assert file_name_check(\".\") == 'No'\n    assert file_name_check(\"1.txt\") == 'No'\n    assert file_name_check(\"1.txt.\") == 'No'\n    assert file_name_check(\"1.txt.\") == 'No'\n    assert file_name_check(\"1.txt.\") == 'No'\n    assert file_name_check(\"1.txt.\") == 'No'\n    assert file_name_check(\"1.txt.\") == 'No'\n    assert file_name_check(\"1.txt.txt\") == 'No'\n    assert file_name_check(\"1.txt.exe\") == 'No'\n    assert file_name_check(\"1.txt.dll\") == 'No'\n    assert file_name_check(\"1.txt.exe.\") == 'No'\n    assert file_name_check(\"1.txt.dll.\") == 'No'\n    assert file_name_check(\"1.txt.exe.\") == 'No'\n    assert file_name_check(\"1.txt.dll.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll\") == 'No'\n    assert file_name_check(\"1.txt.exe.txt\") == 'No'\n    assert file_name_check(\"1.txt.exe.exe\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.\") == 'No'\n    assert file_name_check(\"1.txt.exe.txt.\") == 'No'\n    assert file_name_check(\"1.txt.exe.exe.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.txt\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.dll\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.txt\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.exe.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.dll\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.txt.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.exe.\") == 'No'\n    assert file_name_check(\"1.txt.exe.dll.exe.exe.exe.exe.\") == 'No'\n    assert file_name_chec"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def valid_name(file_name):\n        if len(file_name) > 3:\n            return 'No'\n        elif '.' not in file_name:\n            return 'No'\n        elif file_name[0].isalpha() == False:\n            return 'No'\n        elif file_name[file_name.index('.') + 1:].startswith(('txt', 'exe', 'dll')) == False:\n            return 'No'\n        else:\n            return 'Yes'\n    return valid_name(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Replace the pass statement with your code\n    pass"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # YOUR CODE GOES HERE\n    def file_name_check(file_name):\n        length = len(file_name)\n        if length == 0:\n            return 'No'\n        elif file_name[0].isalpha():\n            pass\n        elif file_name[0].isdigit():\n            return 'No'\n        elif file_name.count('.') == 0:\n            return 'No'\n        elif file_name.count('.') > 1:\n            return 'No'\n        else:\n            pass\n        if length >= 4:\n            return 'No'\n        elif length <= 3:\n            return 'No'\n        else:\n            pass\n        if file_name[length - 3:length] in ['txt', 'exe', 'dll']:\n            return 'Yes'\n        else:\n            return 'No'\n    return file_name_check(file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if (len(file_name) > 3) or (file_name.count('.')!= 1):\n        return 'No'\n    else:\n        if file_name[0].isalpha() and file_name[1]!= '.':\n            if len(file_name) == 2:\n                if file_name[1] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    valid = \"Yes\"\n    if len(file_name) > 3:\n        valid = \"No\"\n    if file_name.find(\".\")!= -1:\n        valid = \"No\"\n    elif file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        valid = \"No\"\n    elif file_name[-4:] not in ['txt', 'exe', 'dll']:\n        valid = \"No\"\n    return valid\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    #The following re.match() is to check if the name contains a dot(.) followed by a digit(0-9)\n    # followed by a letter from the latin alphabet ('a'-'z' and 'A'-'Z').\n    if re.match(\"[a-zA-Z]\\d+\\.(txt|exe|dll)\", file_name):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    return 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_lst = []\n    if len(lst) == 0:\n        return 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            new_lst.append(lst[i]**2)\n        elif i % 4 == 0:\n            new_lst.append(lst[i]**3)\n        else:\n            new_lst.append(lst[i])\n    return sum(new_lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    return sum(lst[i]**2 if i%3==0 else lst[i]*3 for i in range(len(lst)))\n    "
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if lst == []:\n    #     return 0\n    # elif lst == [1,2,3]:\n    #     return 6\n    # elif lst == [1,2,3,4,5,6,7,8]:\n    #     return 1345\n    # elif lst == [-1,-5,2,-1,-5]:\n    #     return -126\n    # else:\n    #     return sum(map(lambda x: x**2, lst))\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    else:\n        pass\n    return sum([lst[i]**2 if i%3==0 or i%4!=0 else lst[i] for i in range(len(lst))])\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    output = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            output += lst[i]**2\n        elif i % 4 == 0:\n            output += lst[i]**3\n    return output\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert lst!= [], \"List is empty\"\n    \n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = 0\n    for i in lst:\n        if i % 3 == 0:\n            i **= 2\n        if i % 4 == 0:\n            i **= 3\n        output += i\n    return output\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # check if lst is empty\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0, len(lst)):\n        if (i % 4) % 3 == 0:\n            lst[i] = lst[i] ** 2\n        else:\n            lst[i] = lst[i] ** 3\n    for i in lst:\n        result += i\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    final_sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 and i%4!=0:\n            final_sum += lst[i]**2\n        elif i%4!=0:\n            final_sum += lst[i]**3\n    return final_sum\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # edge case\n    if sentence == '':\n        return sentence\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(set([x for x in sentence.split(\" \") if is_prime(len(x))]), key=len, reverse=True))\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(list(filter(is_prime, map(lambda x: len(x), sentence.split(' ')))))\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # split() will split a string into a list of words\n    # the split() function cannot be used with the following code:\n    #   - word = \"\"\n    #   - sentence = sentence.split()\n    # because \"\" is not a word\n    #   - [word] = sentence\n    #   - [word] = word\n    #   - [word] = \"word\"\n    #   - word = word + sentence[0]\n    #   - [word] = \"word\"\n    #   - word = \"word\" + sentence[0]\n    #   - [word] = \"word\"\n    #   - word = \"word\"\n    #   - word = word + sentence[0]\n    #   - [word] = \"word\" + sentence[0]\n    #   - word = \"word\"\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - word = word + sentence[0]\n    #   - [word] = word\n    #   - wor"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(filter(lambda word: len(word) > 1, sentence.split(' ')))\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    from collections import Counter\n    import math\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(sorted([''.join(sorted(list(word))) for word in sentence.split()])[::-1])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    answer = ''\n    for word in words:\n        answer += word +''\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import string\n    words = sentence.split(' ')\n    for i in range(len(words)):\n        words[i] = words[i].strip(string.punctuation)\n    word_list = sorted(words, key=lambda x: len(x))\n    return ''.join(word_list)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == \"1\":\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a,b = x.split(\"/\")\n    a = int(a)\n    b = int(b)\n    if n.isdigit() and n!=\"0\" and n!=\"1\":\n        n = int(n)\n    else:\n        return False\n    if n==1 or n==-1:\n        return True\n    if n==0:\n        return False\n    if n<0:\n        n = abs(n)\n        sign = \"-\"\n    else:\n        sign = \"\"\n    x = int(a*n/b)\n    return sign+str(x)+\"/1\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_whole(x):\n        return int(x) == float(x)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n, d = x.split(\"/\")\n    n = int(n)\n    d = int(d)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = int(n)\n    d = int(x) * n\n    if d % n == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if isinstance(x, str):\n        x = Fraction(x)\n    if isinstance(n, str):\n        n = Fraction(n)\n    if n.denominator == 1:\n        return x == n\n    if n.numerator == 1:\n        return False\n    if x.denominator % n.denominator == 0:\n        return True\n    lcm = (x.denominator // n.denominator) * n.denominator\n    numerator = (lcm // x.denominator) * x.numerator\n    return numerator % lcm == 0\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return float(x) * float(n) % 1 == 0"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = _gcd(x, n)\n    return n / d == int(n / d)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if isinstance(x, str):\n        x = fraction(x)\n    if isinstance(n, str):\n        n = fraction(n)\n    return x.numerator * n.denominator == x.denominator * n.numerator\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return eval(x + \"/\" + str(n)) == int(eval(x + \"/\" + str(n)))"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def get_sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not nums:\n        return []\n    sums = [sum(int(num) for num in str(num)) for num in nums]\n    return [nums[i] for i in sorted(range(len(nums)), key=lambda i: sums[i])]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_nums = []\n    for num in nums:\n        sorted_nums.append(num)\n        sorted_nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return sorted_nums\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    nums = list(nums)\n    res = []\n    while nums:\n        curr_sum = sum(int(num) for num in nums)\n        curr_max = max(nums, key=lambda x: (sum(int(digit) for digit in str(x)), x))\n        res.append(curr_max)\n        nums.remove(curr_max)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda i: sum(int(j) for j in str(i)))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(nums, key=sum)\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # O(nlogn)\n    return sorted(nums, key=lambda x: sum(map(int, list(str(x)))))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def helper(nums):\n        if not nums:\n            return\n        nums.sort(key=lambda x: sum(map(int, list(str(abs(x))))))\n        helper(nums[1:])\n    helper(nums)\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    digit_sum = lambda x: sum(int(c) for c in str(x))\n    items = sorted(enumerate(nums), key=lambda x: digit_sum(x[1]))\n    for i in items:\n        result.append(nums[i[0]])\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for n in nums if n > 10 and n % 2!= 0 and n % 10 % 2!= 0])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([num for num in nums if num > 10 and num % 2 == 1 and num // 10 % 2 == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([1 for num in nums if num > 10 and ((num // 10) % 10) % 2!= 0])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in nums:\n        if i>10 and (i%10)%2==1 and (i/10)%2==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([1 for num in nums if 10 <= num <= 99 and num % 2 and num % 10 not in (1, 3, 5, 7, 9)])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return sum(x > 10 and (x % 10 == 1 or x % 10 == 3 or x % 10 == 5 or x % 10 == 7 or x % 10 == 9) for x in nums)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([1 for num in nums if num > 10 and (num // 10 % 2 + num % 10 % 2) == 1])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2!= 0 and ((num // 10) % 10) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = filter(lambda x: x > 10 and (x%10%2==1 and x%10==3 or x%10==5 or x%10==7 or x%10==9), nums)\n    return len(nums)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([1 for n in nums if n > 10 and n % 2!= 0 and n % 10!= 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = [0] * n\n    count = 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = [0 for i in xrange(n)]\n    res = 0\n    for i in xrange(1, n):\n        a[i] = i * i - i + 1\n    for i in xrange(1, n):\n        for j in xrange(i, n):\n            for k in xrange(j, n):\n                if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                    res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_triples = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i * i + j * j + k * k == (i + j + k) * 3:\n                    max_triples += 1\n    return max_triples\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = [i*i - i + 1 for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 0\n    a = [0] * (n + 1)\n    count = 0\n    for i in range(1, n + 1):\n        a[i] = i * i - i + 1\n    for i in range(n):\n        if a[i] % 3 == 0:\n            count += (a[i] // 3) * 2\n        for j in range(i + 1, n):\n            if a[i] == a[j] or a[j] == 0:\n                continue\n            if a[i] + a[j] == a[j] + a[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    c = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    c += 1\n    return c\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = [0] * n\n    triples = 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(i * i - i + 1 for i in range(1, n))\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        result = 0\n        # Using a data structure of size 3n to store the last 2, 3 and 5\n        a = [0] * (3 * n)\n        a[1] = 1\n        for i in range(2, 3 * n):\n            a[i] = a[i - 1] + a[i - 2]\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = [0]*n\n    max_triples = 0\n    for i in range(1, n):\n        a[i] = i*i-i+1\n        max_triples += (a[i] % 3 == 0)\n    return max_triples\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Hint: If you're given a problem with only two planets, just return planet1 or planet2 as an empty tuple.\n    return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    for planet in planets:\n        if planets.index(planet) < planet1_index:\n            return tuple(sorted([planet, planet1]))\n        elif planets.index(planet) > planet2_index:\n            return tuple(sorted([planet, planet2]))\n    return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    planet1, planet2 = planet1.lower(), planet2.lower()\n    \n    # Get the index of planet1 and planet2.\n    planet1_index, planet2_index = planets.index(planet1), planets.index(planet2)\n    \n    # Get the lists of orbital elements of planet1 and planet2.\n    planet1_orbital_elements, planet2_orbital_elements = orbital_elements[planet1_index], orbital_elements[planet2_index]\n    \n    # Check if planet1 and planet2 are correct planet names.\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    # Get the index of the common planet.\n    common_planet_index = planets.index(planet1_orbital_elements[0])\n    \n    # Get the difference in indices of planet1 and planet2.\n    planet1_to_common_planet_index, planet2_to_common_planet_index = abs(planet1_index - common_planet_index), abs(planet2_index - common_planet_index)\n    \n    # Get the list of common planets between planet1 and planet2.\n    common_planets = planets[planet1_to_common_planet_index:planet2_to_common_planet_index]\n    \n    # Sorted by the index of the common planet.\n    sorted_common_planets = sorted(common_planets, key = lambda x: planets.index(x))\n    \n    # Return the list of common planets between planet1 and planet2.\n    return tuple(sorted_common_planets)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    planet_orbit = [planet1, planet2]\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    for planet in planets:\n        if planet in planet_orbit:\n            planet_orbit.remove(planet)\n    return tuple(planet_orbit)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # make a list of planet names\n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    # for loop to check if planet1 and planet2 are in planet_list\n    for i in planet_list:\n        if i == planet1:\n            for j in planet_list:\n                if j == planet2:\n                    return tuple(sorted(planet_list[planet_list.index(i)+1:planet_list.index(j)]))\n        if i == planet2:\n            return tuple(sorted(planet_list[:planet_list.index(i)]))\n    # for loop to check if planet1 and planet2 are in planet_list\n    for i in planet_list:\n        if i == planet1:\n            return tuple(sorted(planet_list[planet_list.index(i)+1:]))\n        if i == planet2:\n            return tuple(sorted(planet_list[:planet_list.index(i)]))\n    return tuple()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # in the name of God, read the following as pseudo code\n    # hint: we don't need to test for 'Saturn', 'Uranus', etc\n    # hint: if planet1 or planet2 are not real planet names, return empty tuple\n    # hint: remember python returns False for 0 and True for anything else\n    # hint: you can use the in operator to check for a substring in a string\n    # hint: use a generator to get the result\n    # hint: the tuple() function is the equivalent of the parenthesis notation\n    # return tuple([planet for planet in planets if planet1 in planet or planet2 in planet])\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    def distance(orbit1, orbit2):\n        '''\n        compute the distance between two orbits\n        '''\n        # return the absolute distance between the two\n        return abs(orbit2-orbit1)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    planet_list = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    for i in range(len(planet_list)):\n        if planet_list[i] == planet1:\n            x = i\n            break\n    for i in range(len(planet_list)):\n        if planet_list[i] == planet2:\n            y = i\n            break\n    z = planet_list[x:y+1]\n    z.sort()\n    return tuple(z)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def delete_odd_length_words(lst):\n        \"\"\"delete the words that have odd length\"\"\"\n        length = len(lst[0])\n        for word in lst:\n            if len(word) % 2!= 0:\n                lst.remove(word)\n        return lst\n    \n    return sorted(delete_odd_length_words(lst))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_list = sorted(lst, key=lambda x: len(x), reverse=True)\n    return new_list\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = [x for x in lst if len(x)%2 == 0]\n    result.sort(key=len)\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if lst:\n        if len(lst) == 1:\n            return lst\n        else:\n            # sort by length\n            lengths = [len(i) for i in lst]\n            sorted_lst = [lst[i] for i in sorted(range(len(lst)), key = lambda i: lengths[i])]\n            # remove odd length\n            lengths = [len(i) for i in lst]\n            sorted_lst = [i for i in sorted_lst if lengths[sorted_lst.index(i)] % 2 == 0]\n            return sorted_lst\n    else:\n        return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    sorted_lst = []\n    for x in lst:\n        if len(x) % 2 == 0:\n            sorted_lst.append(x)\n    sorted_lst.sort(key = len)\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            res.append(word)\n    res.sort(key=len)\n    return res\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst2 = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            lst2.append(item)\n    return sorted(lst2)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    list_lengths = [len(i) for i in lst]\n    def function_to_sort(item1, item2):\n        if item1[0] == item2[0]:\n            return item1[1] - item2[1]\n        else:\n            return item1[0] - item2[0]\n    list_lengths.sort(reverse=True, key=functools.cmp_to_key(function_to_sort))\n    return list_lengths\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted([i for i in lst if len(i) % 2 == 0])\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return x_or_y(n - 1, y, x)\n    return x_or_y(n - 1, x, y)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x if n == 1 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if(n % 2 == 0):\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0 and n > 2:\n        n = 2\n    elif n == 1:\n        n = 1\n    elif n % 2!= 0 and n > 3:\n        n -= 1\n    if n % x == 0 or n % y == 0:\n        return n\n    else:\n        return x_or_y(n, y, x)\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n%2 == 0:\n        return y\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n/2, y, x)\n    else:\n        return x_or_y(n, x, y)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num ** 2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    else:\n        lst2 = []\n        for item in lst:\n            if isinstance(item, int):\n                if item % 2 == 1:\n                    lst2.append(item**2)\n        return sum(lst2)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return 0\n    return sum(num**2 for num in lst if num % 2)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += num ** 2\n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    lst = [int(n) for n in lst if n > 0 and n == int(n)]\n    return sum([n*n for n in lst if n % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        result = 0\n        for number in lst:\n            if number > -1 and number % 2 == 1:\n                result += number**2\n        return result"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([x*x for x in lst if x > 0 and x % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([i ** 2 for i in lst if i % 2!= 0])\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [abs(a-b) for a,b in zip(guess,game)]"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    score = []\n    for i in range(len(game)):\n        if (guess[i] == game[i]):\n            score.append(0)\n        else:\n            score.append(abs(guess[i]-game[i]))\n    return score\nprint compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\nprint compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = [abs(a - b) for a,b in zip(game, guess)]\n    return res\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [abs(guess-s) if guess==s else 0 for guess,s in zip(guess,game)]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # your code goes here\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    difference = [abs(guess[i] - game[i]) for i in range(len(guess))]\n    return difference\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pas"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(guess)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    extensions = sorted(extensions, key = lambda ext: sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()), reverse = True)\n    return '{}.{}'.format(class_name, extensions[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    strength = 0\n    strongest = ''\n    for ext in extensions:\n        if ext[0].isupper():\n            strength += 1\n        else:\n            strength -= 1\n        if strength > strength:\n            strength = strength\n            strongest = ext\n    strongest_str = '{}.{}'.format(class_name, strongest)\n    return strongest_str"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    strongest_extension = extensions[0]\n    for ext in extensions[1:]:\n        strength = 0\n        for letter in ext:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > strength:\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def Strength(extension):\n        extension = extension.lower()\n        if any([c.isupper() for c in extension]):\n            return sum([1 for c in extension if c.isupper()])\n        else:\n            return sum([1 for c in extension if c.islower()])\n    return '{}.{}'.format(class_name, max([extension for extension in extensions], key=Strength))\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    strengths = {}\n    for extension in extensions:\n        strength = 0\n        for i in range(len(extension)):\n            if extension[i].isupper():\n                strength += 1\n            elif extension[i].islower():\n                strength -= 1\n        strengths[extension] = strength\n    highest = max(strengths.items(), key=lambda x: x[1])[0]\n    return '{}.{}'.format(class_name, highest)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for extension in extensions:\n        score = 0\n        for x in extension:\n            if x.isupper():\n                score += 1\n            else:\n                score -= 1\n        l.append((extension, score))\n    return (class_name + \".\" + max(l)[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return '{0}.{1}'.format(class_name, max(extensions, key=lambda x: sum(1 for i in x if i.isupper()))[:5])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = None\n    mapping = {}\n    for ext in extensions:\n        uppercase = 0\n        lowercase = 0\n        for c in ext:\n            if c.isupper():\n                uppercase += 1\n            else:\n                lowercase += 1\n        if uppercase > lowercase:\n            strength = -uppercase + lowercase\n        else:\n            strength = -lowercase + uppercase\n        mapping[ext] = strength\n    result = class_name + \".\" + max(mapping, key=mapping.get)\n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    class_len = len(class_name)\n    # print class_len\n    class_letter_count = 0\n    for letter in class_name:\n        if letter.isupper():\n            class_letter_count += 1\n        elif letter.islower():\n            class_letter_count -= 1\n    # print class_letter_count\n    extension_strength = float(class_letter_count) / class_len\n    # print extension_strength\n    # print extensions\n    if len(extensions) == 0:\n        return class_name\n    else:\n        extension_count = 0\n        strongest_extension = extensions[0]\n        for extension in extensions:\n            extension_len = len(extension)\n            extension_letter_count = 0\n            for letter in extension:\n                if letter.isupper():\n                    extension_letter_count += 1\n                elif letter.islower():\n                    extension_letter_count -= 1\n            extension_strength = float(extension_letter_count) / extension_len\n            # print extension_strength\n            if extension_strength > extension_strength:\n                strongest_extension = extension\n                # print'strongest_extension', strongest_extension\n                extension_count = 1\n            elif extension_strength == extension_strength:\n                extension_count += 1\n            # print 'extension_count', extension_count\n        if extension_count == 1:\n            return class_name + '.' + strongest_extension\n        else:\n            return class_name + '.WeakestExtension'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # sort the extensions by ascending order of their number of capital letters\n    sorted_extensions = sorted(extensions, key = lambda extension : sum([1 for letter in extension if letter.isupper()]) - sum([1 for letter in extension if letter.islower()]))\n    # if there is a tie, return the first of them\n    if len(sorted_extensions) == 1:\n        return class_name + '.' + sorted_extensions[0]\n    else:\n        return class_name + '.StrongestExtensionName'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return any([b in a, b in rotate(a, True), b in rotate(a, False)])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a in b:\n        return True\n    for i in range(1, len(a)):\n        if a in b[i:] + b[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(1,len(a)):\n        if a[i:] in b or a[:i] in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(a) < len(b):\n        return False\n    elif len(b) < len(a):\n        b = b + b\n    for i in xrange(0,len(a)):\n        if b == a[i:i+len(b)]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def isSubstring(substr, string):\n        for i in range(len(string) - len(substr)):\n            if string[i:i+len(substr)] == substr:\n                return True\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(a) == 0 and len(b) == 0:\n        return True\n    for i in range(0, len(a)):\n        if a[i:] in b or a[i:] + a[:i] in b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if b in a:\n        return True\n    for i in range(1,len(a)):\n        if b == a[i:] + a[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(a.find(b)!= -1 or a.find(b[::-1])!= -1 for b in [b, b[::-1]])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in xrange(len(a)):\n        if (a[i:]+a[:i]) == b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(a) > len(b) and b in a\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (int(str(num)[::2]), int(str(num)[1::2]))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if (num == 0):\n        return (1,0)\n    sign = 1 if num > 0 else -1\n    num = abs(num)\n    if (num % 2 == 0):\n        return (1, 0)\n    else:\n        return (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(str(abs(num))), len(str(abs(num))) % 2\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even = 0\n    odd = 0\n    while(num > 0):\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([digit for digit in str(abs(num)) if digit in '0123456789' and int(digit) % 2 == 0]), len([digit for digit in str(abs(num)) if digit in '0123456789' and int(digit) % 2 == 1])\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n    if num < 0:\n        num *= -1\n    while num:\n        if num % 2:\n            odd_count += 1\n        else:\n            even_count += 1\n        num //= 10\n    return (even_count, odd_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (str(num).count('0'), str(num).count('1'))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    even, odd = 0, 0\n    if num < 0:\n        num = abs(num)\n        even, odd = odd, even\n    \n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n    \ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    str_num = str(num)\n    even = 0\n    odd = 0\n    for char in str_num:\n        if int(char) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if num == 0:\n        return (0, 1)\n    else:\n        even = 0\n        odd = 0\n        num_str = str(num)\n        for digit in num_str:\n            if int(digit) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert 1 <= number <= 1000, 'Number out of range'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert type(number) is int, 'Wrong input type'\n    assert number > 0, 'Number must be greater than 0'\n    assert number <= 1000, 'Number must be less than 1000'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    roman_list = []\n    for roman_digit, arabic_digit in zip(ROMAN, range(1, 10)):\n        roman_list.append(roman_digit * (arabic_digit == number))\n        if roman_digit == 'i':\n            roman_list[-1] = 'x' + roman_list[-1]\n        elif roman_digit == 'v':\n            roman_list[-1] = 'vii' + roman_list[-1]\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert 1 <= number <= 1000, 'Number out of range (must be between 1 and 1000 inclusive)'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numeral_map = (\n        (1000, 'M'),\n        (900, 'CM'),\n        (500, 'D'),\n        (400, 'CD'),\n        (100, 'C'),\n        (90, 'XC'),\n        (50, 'L'),\n        (40, 'XL'),\n        (10, 'X'),\n        (9, 'IX'),\n        (5, 'V'),\n        (4, 'IV'),\n        (1, 'I'),\n    )\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # I don't know if the dictionary will have enough keys...\n    res = ''.join([ROMAN_DICT.get(num, '?') for num in range(1, number+1)])\n    return res.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(number) == int, \"Number must be an integer\"\n    assert number >= 1 and number <= 1000, \"Number must be between 1 and 1000\"\n    \n    mini_roman = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L',\n                  90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert(1 <= number <= 1000)\n    romans = ['i', 'x', 'c','m']\n    result = ''\n    for i in range(len(romans)):\n        while number >= int(10 ** (len(romans) - i)):\n            result += romans[i]\n            number -= int(10 ** (len(romans) - i))\n    return result.lower()"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ((a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2))\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return math.sqrt(a**2 + b**2) == c\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a**2+b**2 == c**2) or (b**2+c**2 == a**2) or (c**2+a**2 == b**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a*a + b*b == c*c or a*a + c*c == b*b or c*c + b*b == a*a\n    \ndef is_right_triangle(a, b, c):\n    '''\n    Return True if the three side lengths is a right triangle, False otherwise.\n    '''\n    return right_angle_triangle(a, b, c)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a == b == c:\n        return True\n    elif (a == b and a!= c) or (a == c and a!= b) or (b == c and b!= a):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # calculate the length of the two sides\n    side1 = hypot(a, b)\n    side2 = hypot(b, c)\n    side3 = hypot(a, c)\n    # since the lengths of the sides are right, we can divide them by the hypotenuse \n    # and check if the result is an integer\n    return (side1 + side2) == c and (side2 + side3) == a and (side1 + side3) == b\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (c**2 + a**2) == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Write your code here\n    from math import sqrt\n    s1, s2, s3 = a**2, b**2, c**2\n    if s1+s2 < s3 or s1+s3 < s2 or s2+s3 < s1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return math.fabs(a**2 + b**2 - c**2) < epsilon\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    length = []\n    for word in words:\n        length.append(len(word))\n    max_length = max(length)\n    for word in words:\n        if len(word) == max_length:\n            return word\n        \n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(words) == 0:\n        return ''\n    else:\n        return sorted(words, key=lambda word: len(set(list(word))))[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    word_len = {}\n    for word in words:\n        if word in word_len:\n            word_len[word] += 1\n        else:\n            word_len[word] = 1\n    max_len = max(word_len.values())\n    for word in word_len:\n        if word_len[word] == max_len:\n            return word\n    \n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    word_set = set()\n    for word in words:\n        word_set.add(word)\n    return max(word_set, key=len)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # By default, use the first word as the maximum word\n    if len(words) == 0:\n        return None\n    max_word = words[0]\n    max_len = len(max_word)\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_str = ''\n    max_str_len = len(max_str)\n    for word in words:\n        if len(word) > max_str_len:\n            max_str = word\n            max_str_len = len(word)\n    return max_str\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_word = \"\"\n    max_char = 0\n    for word in words:\n        char_set = set(word)\n        if len(char_set) > max_char:\n            max_word = word\n            max_char = len(char_set)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(words, key=len)[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = [w for w in words if len(w) > 1]\n    return sorted(words)[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\""
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if number == 0:\n        return [0, need]\n    if number > need:\n        return [need, 0]\n    if remaining == 0:\n        return [number, 0]\n    \n    need_ = need-number\n    remaining_ = remaining-number\n    return [need+remaining_, need_]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #get the difference between the remaining and the need\n    difference = need - remaining\n    #if the difference is positive, then we need to eat the needed carrots\n    if difference > 0:\n        #and then we decrease the number of remaining carrots by the needed amount\n        remaining -= need\n        #and we return the values\n        return [number + need, remaining]\n    #otherwise we need to eat the difference\n    return [number + difference, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if number >= need:\n        return [number + need, 0]\n    else:\n        return [number + remaining, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if need > remaining:\n        return [number, remaining]\n    else:\n        return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #use binary search to find out the number of carrots that can be eaten\n    start = 0\n    end = remaining\n    while start <= end:\n        middle = (start + end) // 2\n        if number >= need + middle:\n            start = middle + 1\n        else:\n            end = middle - 1\n    if start == remaining:\n        return [remaining, 0]\n    #if the number of remaining carrots is greater than the number of carrots that can be eaten\n    #we need to eat more than number of carrots\n    #we can only eat the number of carrots that can be eaten\n    return [number + end, end]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [number + need if number + need <= remaining else remaining, 0 if number + need > remaining else number + need - remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if need > remaining:\n        return [need, 0]\n    elif need == remaining:\n        return [need, 0]\n    else:\n        return [number + (need - remaining), remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return []\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number >= need:\n        return [number + need, remaining - need]\n    elif remaining < need:\n        return [number, 0]\n    else:\n        return [number, need - number]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return operator[0](operand[0], operator[1](operand[1], operator[2](operand[2], operand[3])))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not operator or not operand:\n        return 0\n    \n    if len(operator)!= len(operand) - 1:\n        raise Exception(\"Invalid array\")\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return operator[0](operand[0], operator[1](operand[1], operand[2]))\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(operand) == 1:\n        return operand[0]\n    elif len(operand) == 2:\n        return operator[0](operand[0], operand[1])\n    else:\n        return operator[0](do_algebra(operator[1:], operand[0:len(operand) - 1]), operand[len(operand) - 1])\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pas"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # implement me\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # We assume the algebraic expression is a list of numbers.\n    # Example: [2, 3, 4]\n    # We assume the expression has at least one operator, and at least two numbers.\n    # Example: [2, 3]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([x for x in s if x.isalpha()][::-1] or s[::-1])"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = []\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                ans.append(char.lower())\n            else:\n                ans.append(char.upper())\n        else:\n            ans.append(char)\n    return \"\".join(ans)"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Split string into list of characters\n    s = list(s)\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    \n    return \"\".join(s)"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if s == \"\":\n        return \"\"\n    \n    new_string = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                new_string[i] = s[i].lower()\n            else:\n                new_string[i] = s[i].upper()\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = s.replace(\"#\", \"\").replace(\"@\", \"\").replace(\"@\", \"\").replace(\"@\", \"\")\n    \n    if not s:\n        return s[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string = list(s)\n    for i, char in enumerate(string):\n        if char.isalpha():\n            string[i] = char.swapcase()\n    string = \"\".join(string)\n    return string\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    letters = re.findall(\"[A-Za-z]\", s)\n    if letters:\n        return \"\".join(l.lower() if l.isupper() else l.upper() for l in s)\n    return s[::-1]"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Complete this function\n    # Don't use string manipulation, use a temp variable and use slicing\n    return \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    letters = []\n    reverse = []\n    for i in xrange(len(s)):\n        if s[i].isalpha():\n            letters.append(s[i].lower())\n    for i in xrange(len(letters)):\n        if letters[i].islower():\n            reverse.append(letters[i].upper())\n        else:\n            reverse.append(letters[i].lower())\n    for i in xrange(len(letters)):\n        if not letters[i].isalpha():\n            reverse.append(letters[i])\n    return \"\".join(reverse)"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for c in s:\n        if c.isalpha():\n            result.append(c.swapcase())\n        else:\n            result.append(c)\n    return \"\".join(result)\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n    elif isinstance(text, bytes):\n        text = text.decode('utf-8')\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    md5_hash = md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(text) == 0:\n        return None\n    return md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    if not isinstance(text, basestring):\n        return None\n    return md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    hash = hashlib.md5(text.encode('utf-8'))\n    return hash.hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < 2 or b < 2:\n        return []\n    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    return [i for i in range(a, b+1, 2)]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [int(i) for i in range(a, b) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return range(a, b + 1)[1::2]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    integers = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a > b:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    integers = []\n    i = a\n    while i <= b:\n        if i % 2 == 0:\n            integers.append(i)\n        i += 1\n    return integers\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in range(a,b+1) if x%2==0]"
    }
]