[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n",
        "num_ids": 53
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = sorted(numbers)\n    for index, number in enumerate(numbers[1:]):\n        if number - numbers[index] <= threshold:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i, first_num in enumerate(numbers):\n        for j, second_num in enumerate(numbers[i + 1:]):\n            if abs(first_num - second_num) <= threshold:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] > threshold:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) <= 2:\n        return False\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return False\n    num_dict = {}\n    for num in numbers:\n        num_dict[num] = 1\n    for num in numbers:\n        if num in num_dict:\n            continue\n        for other_num in numbers:\n            if other_num == num:\n                continue\n            if abs(other_num - num) <= threshold:\n                return True\n    return False\n",
        "num_ids": 102
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i, number_i in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            number_j = numbers[j]\n            if abs(number_i - number_j) < threshold:\n                return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if paren_string.count('(') == paren_string.count(')'):\n        stack = []\n        result = []\n        \n        for paren in paren_string:\n            if paren == '(':\n                stack.append(paren)\n            elif paren == ')':\n                last_open_paren = stack.pop()\n                if stack:\n                    result.append(stack)\n                else:\n                    result.append([last_open_paren])\n                    \n        return [''.join(lst) for lst in result]\n    else:\n        return [paren_string]\n",
        "num_ids": 145
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    paren_string = paren_string.strip()\n    if not paren_string:\n        return []\n    stack = []\n    output = []\n    for index, char in enumerate(paren_string):\n        if char == \"(\":\n            stack.append(index)\n        elif char == \")\":\n            if not stack:\n                raise ValueError(\"Opening paren at {0} does not match closing paren at {1}\"\n                                .format(index, index + 1))\n            stack.pop()\n            if not stack:\n                output.append(paren_string[stack[-1]+1:index])\n    return output\n",
        "num_ids": 150
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    paren_stack = []\n    paren_group = []\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n            paren_group.append(char)\n        elif char == ')':\n            if paren_stack:\n                paren_group.append(char)\n                paren_stack.pop()\n            else:\n                raise ValueError('No matching opening bracket')\n        elif char =='':\n            continue\n        else:\n            paren_group.append(char)\n    if not paren_stack:\n        return [''.join(paren_group)]\n    else:\n        raise ValueError('No matching opening bracket')\n",
        "num_ids": 162
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    open_braces = []\n    for char in paren_string:\n        if char == '(':\n            open_braces.append(char)\n        elif char == ')':\n            if open_braces:\n                open_braces.pop()\n            else:\n                return [paren_string]\n",
        "num_ids": 75
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [''.join(group) for group in separate_paren_groups_helper(paren_string)]\n",
        "num_ids": 26
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return split_para_string(paren_string, '()')\n",
        "num_ids": 18
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    separated_groups = []\n    while len(paren_string) > 0:\n        open_index = find_index(paren_string, '(')\n        if open_index == -1:\n            separated_groups.append(paren_string)\n            break\n        close_index = find_index(paren_string, ')')\n        if close_index == -1:\n            return []\n        if open_index <= close_index:\n            return []\n        # separate the string\n        separated_groups.append(paren_string[:open_index])\n        separated_groups.append(paren_string[open_index+1:close_index])\n        paren_string = paren_string[close_index+1:]\n",
        "num_ids": 190
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    brackets = {'(': ')', '{': '}', '[': ']'}\n    output = []\n    depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            depth += 1\n        elif paren_string[i] == ')':\n            depth -= 1\n        if depth == 0:\n            output.append(paren_string[:i+1])\n    return output\n",
        "num_ids": 112
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    start = 0\n    end = 0\n    paren_groups = []\n    paren_stack = []\n    i = 0\n    while i < len(paren_string):\n        char = paren_string[i]\n        if char == '(':\n            if paren_stack:\n                paren_stack.append(char)\n            paren_stack.append(i)\n            i += 1\n        elif char == ')':\n            if not paren_stack:\n                raise Exception('Invalid input string, missing open paren')\n            else:\n                start = paren_stack.pop()\n                end = i\n                paren_groups.append(paren_string[start + 1: end])\n                i += 1\n    if paren_stack:\n        raise Exception('Invalid input string, missing close paren')\n    return paren_groups\n",
        "num_ids": 196
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_groups = []\n    paren_stack = []\n    start_index = 0\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == '(':\n            paren_stack.append(char)\n            start_index = i + 1\n            continue\n        if char == ')':\n            if len(paren_stack) == 0:\n                raise Exception('Extra closing paren')\n            char_index = start_index\n            if paren_stack[-1] == '(':\n                paren_groups.append(paren_string[char_index:i])\n                char_index = i + 1\n            else:\n                paren_stack.pop()\n    if len(paren_stack) > 0:\n        raise Exception('Extra opening paren')\n    return paren_groups\n",
        "num_ids": 197
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Divide the number by the first highest factor of 10, and take the\n    # modulus to keep only the decimals\n    if number > 0:\n        integer, decimals = divmod(number, 10)\n        return decimals\n    else:\n        # The number is negative, just do the opposite\n        return -truncate_number(-number)\n",
        "num_ids": 86
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert number >= 0, \"Number cannot be negative.\"\n    if number > 0:\n        return number - int(number)\n    return 0.0\n",
        "num_ids": 36
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numerator, denominator = math.modf(number)\n    if numerator > 0:\n        return numerator\n    else:\n        return 0.0\n",
        "num_ids": 40
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return float(\"{:.0f}\".format(number))\n",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert number >= 0.0\n    i, d = 0, 1.0\n    while d <= number:\n        d *= 10.0\n        i += 1.0\n    return float(number - i * d) / d\n",
        "num_ids": 55
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return float(number) - int(number)\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Optimize for standard cases.\n    if number < 1:\n        return number\n    integer_part = int(number)\n    if integer_part == number:\n        return int(number)\n    return float(number - integer_part)\n",
        "num_ids": 58
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    balance = 0\n",
        "num_ids": 6
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = 0\n    for i in operations:\n        if i > 0:\n            s += i\n        else:\n            s -= i\n        if s < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return any(a < 0 for a in operations)\n",
        "num_ids": 14
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i, e in enumerate(operations):\n        if i == 0:\n            continue\n        if e >= 0:\n            continue\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balance = 0\n",
        "num_ids": 6
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        elif balance < 0:\n            return True\n    return balance < 0\n",
        "num_ids": 43
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    def calculate(balances):\n        nonlocal index\n        balance = 0\n        for num in balances:\n            if num == -1:\n                balance += 1\n            elif num == 1:\n                balance -= 1\n            if balance < 0:\n                index = True\n                return\n        index = False\n        \n    index = False\n    calculate(operations)\n    return index\n",
        "num_ids": 94
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            if balance < 0:\n                return True\n            balance += op\n        elif op > 0:\n            balance += op\n    return balance < 0\n",
        "num_ids": 55
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Iterate over the input list to calculate Mean Absolute Deviation\n    total = 0\n    for number in numbers:\n        total += abs(number - numbers[0])\n",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    mean_val = sum(numbers) / len(numbers)\n    differences = [abs(n - mean_val) for n in numbers]\n    return sum(differences) / len(numbers)\n",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(n - mean) for n in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m = sum(numbers) / len(numbers)\n    return sum(abs(n - m) for n in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    length = len(numbers)\n    if length == 0:\n        return 0\n    if length == 1:\n        return 0\n    mean = sum(numbers) / float(length)\n    return sum(abs(x - mean) for x in numbers) / float(length)\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    if n == 1:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    mean = sum(numbers) / n\n    distance = [abs(x - mean) for x in numbers]\n    return sum(distance) / n\n",
        "num_ids": 68
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert numbers, 'empty dataset'\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 47
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # if we only have 1 number in the list, we know the result is 0\n    if len(numbers) <= 1:\n        return 0.0\n",
        "num_ids": 37
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers[0::2] = [delimeter, delimeter]\n    numbers[1::2] = numbers[0:len(numbers):2]\n    return numbers\n",
        "num_ids": 43
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter] * (len(numbers) % 2)\n",
        "num_ids": 39
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for x in range(0, len(numbers), 2):\n        numbers.insert(x + 1, delimeter)\n    return numbers\n",
        "num_ids": 35
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    new_list = []\n    for i in range(len(numbers) - 1):\n        new_list.append(numbers[i])\n        new_list.append(delimeter)\n    new_list.append(numbers[-1])\n    return new_list\n",
        "num_ids": 67
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [delimeter] + [numbers[i] for i in range(len(numbers)-1)] + [delimeter]\n",
        "num_ids": 32
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            res.append(numbers[i])\n        else:\n            res.append(numbers[i])\n            res.append(delimeter)\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(len(numbers)-1):\n        output.extend([numbers[i]])\n        output.extend([delimeter])\n    output.extend([numbers[-1]])\n    return output\n",
        "num_ids": 61
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers_iter = iter(numbers)\n    return [numbers_iter.next()] + [numbers_iter.next() for _ in range(delimeter - 1)]\n",
        "num_ids": 44
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    length = len(numbers)\n    for i in range(length - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [delimeter] + [x for idx, x in enumerate(numbers) if idx % 2 == 0] + [delimeter]\n",
        "num_ids": 36
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n        elif paren_string[i] == ')':\n            # the index of the last (, so the first index of the first ( is the index of the last )\n            stack.pop()\n    return stack\n",
        "num_ids": 91
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for index, item in enumerate(paren_string):\n        if item == '(':\n            stack.append(index)\n        elif item == ')':\n            last_index = stack.pop()\n            if len(stack) == 0:\n                # Means we have a closing parentheses that is not properly paired\n                stack.append(index)\n            else:\n                stack[len(stack) - 1] = index - 1\n    return stack\n",
        "num_ids": 109
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def find_max_depth_of_nested_parens(paren_string: str) -> int:\n        max_depth = 0\n        stack = []\n        for i, paren in enumerate(paren_string):\n            if paren == \"(\":\n                stack.append(i)\n            elif paren == \")\":\n                stack.pop()\n                if len(stack) == 0:\n                    max_depth = i\n        return max_depth\n",
        "num_ids": 111
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    paren_list = paren_string.split(' ')\n    return parse_nested_parens_helper(paren_list, 0, 0)\n",
        "num_ids": 38
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Remove all the spaces that are between every two parentheses\n    paren_string = paren_string.replace(' ', '')\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # todo: implement me\n    # pass\n    return []\n",
        "num_ids": 17
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    max_depth = 0\n    for paren in paren_string.split(' '):\n        if paren == '':\n            continue\n        level = 0\n        for i, c in enumerate(paren):\n            if c == '(':\n                level += 1\n            elif c == ')':\n                level -= 1\n            if level == -1:\n                break\n        if level!= -1:\n            stack.append(level)\n            max_depth = max(max_depth, level)\n    return stack\n",
        "num_ids": 128
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    depth = 0\n    max_depth = 0\n    current_depth = 0\n    for paren in paren_string:\n        if paren == '(':\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        elif paren == ')':\n            depth -= 1\n        else:\n            continue\n    print(max_depth)\n    return max_depth\n",
        "num_ids": 96
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # create a list of all the valid \"sublevel\" groups\n    groups = []\n    for i in range(0, len(paren_string)):\n        groups.append(paren_string[i])\n        if groups[i] == '(':\n            groups[i] = [groups[i]]\n        elif groups[i] == ')':\n            groups[i] = [groups[i]]\n        else:\n            groups[i] = groups[i][:-1]\n",
        "num_ids": 113
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n",
        "num_ids": 24
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if numbers == []:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda a, b: a * b, numbers))\n",
        "num_ids": 42
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_ = sum(numbers)\n    product_ = 1\n    for number in numbers:\n        product_ *= number\n    return (sum_, product_)\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if not numbers[0] else (numbers[0] + sum_product(numbers[1:])[0], numbers[0] * sum_product(numbers[1:])[1])\n",
        "num_ids": 71
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum = sum + num\n        product = product * num\n    return sum, product\n    \n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    product = 1\n    s = 0\n    for number in numbers:\n        s += number\n        product *= number\n    return s, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return (0, 1)\n    return sum(numbers), functools.reduce(operator.mul, numbers, 1)\n",
        "num_ids": 39
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return tuple(sum(numbers), product(numbers))\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product\n",
        "num_ids": 44
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    product = 1\n    sum_ = 0\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return sum_, product\n",
        "num_ids": 38
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    length = len(numbers)\n    result = []\n    max_num = 0\n    for i in range(length):\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n        result.append(max_num)\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for index, number in enumerate(numbers):\n        if index == 0:\n            yield number\n        else:\n            prev = numbers[index-1]\n            if number > prev:\n                yield number\n            else:\n                yield prev\n",
        "num_ids": 61
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        rolling_max_number = max(numbers[i:])\n        result.append(rolling_max_number)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for idx, num in enumerate(numbers):\n        if idx == 0:\n            result.append(num)\n        elif num > result[-1]:\n            result.append(num)\n        else:\n            result.append(result[-1])\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_numbers = [None] * len(numbers)\n    # List of max numbers in given range\n    for i in range(len(numbers)):\n        if numbers[i] > max_numbers[i - 1]:\n            max_numbers[i] = numbers[i]\n        else:\n            max_numbers[i] = max_numbers[i - 1]\n    # Construct the list of max numbers\n    for i in range(len(max_numbers)):\n        if max_numbers[i] is not None:\n            if i == 0:\n                max_numbers[i] = max_numbers[i]\n            else:\n                max_numbers[i] = max(max_numbers[i - 1], max_numbers[i])\n    return max_numbers\n",
        "num_ids": 195
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_stack = []\n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            max_stack.append(current_max)\n            current_max = number\n        else:\n            current_max = max(current_max, number)\n    if current_max > max_stack[-1]:\n        max_stack.append(current_max)\n    for max_number in max_stack:\n        result.append(max_number)\n    return result\n",
        "num_ids": 127
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # TODO: Implement this function\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [max(numbers[i:]) for i in range(len(numbers))]\n",
        "num_ids": 24
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_numbers = [0] * len(numbers)\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            max_numbers[i] = max(max_numbers[i], numbers[j])\n    return max_numbers\n",
        "num_ids": 75
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    max_value = numbers[0]\n    for number in numbers:\n        if number > max_value:\n            result.append(number)\n            max_value = number\n        else:\n            result.append(max_value)\n",
        "num_ids": 61
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # We can use built-in str.join() to join iterable with given string\n    # and then reverse the string\n    prefix = ''.join(reversed(string))\n    suffix = string + ''.join(reversed(string))\n    if is_palindrome(suffix):\n        return prefix\n    return prefix\n",
        "num_ids": 80
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Find the longest prefix of string that is a palindrome\n    if not is_palindrome(string):\n        return False\n    prefix_palindrome = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix_palindrome = string[:i+1]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return prefix_palindrome + string[::-1]\n",
        "num_ids": 125
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while not is_palindrome(string):\n        for i in range(len(string) - 1, 0, -1):\n            string = string[:i] + string[i:][::-1]\n    return string\n",
        "num_ids": 55
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if not string:\n        return string\n",
        "num_ids": 13
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    prefix = get_longest_palindrome_prefix(string)\n    suffix = string[len(prefix):]\n    return prefix + suffix[::-1]\n",
        "num_ids": 41
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    end = len(string)\n    while end > 0 and not is_palindrome(string[:end]):\n        end -= 1\n    return string + string[:end:-1]\n",
        "num_ids": 46
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:] + string[:i][::-1]\n    return string\n",
        "num_ids": 82
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Find the longest prefix of supplied string that is a palindrome\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            break\n    else:\n        return string\n",
        "num_ids": 57
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Method 1\n    # result = []\n    # for i in range(len(string)):\n    #     result.append(string[:i])\n    #     result.append(string[i:][::-1])\n    # return ''.join(result)\n",
        "num_ids": 65
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    longest_palindrome = ''\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n",
        "num_ids": 76
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join([str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b)])\n    \ndef string_bits(string: str) -> List[int]:\n    \"\"\" Input is a string consisting only of 1s and 0s. Return the list of bits in the string.\n    >>> string_bits('101')\n    [1, 0, 0, 1]\n    \"\"\"\n    return [int(string[i]) for i in range(len(string))]\n    \ndef rotate_bits(bits: List[int], k: int) -> List[int]:\n    \"\"\" Input is a list of bits (0s and 1s) and k. Return a list of bits obtained by shifting k to the left.\n    >>> rotate_bits([1, 0, 0, 1], 1)\n    [1, 0, 0, 1]\n    \"\"\"\n    return bits[k:] + bits[:k]\n    \ndef divide_bits(bits: List[int]) -> List[List[int]]:\n    \"\"\" Input is a list of bits (0s and 1s). Return a list of bit groups, where each bit group is a list of\n    bits that share the same bit status.\n    >>> divide_bits([1, 0, 0, 1])\n    [[1, 0, 0, 1], [0, 1, 0, 1]]\n    \"\"\"\n    i, bit_groups = 0, []\n    while i < len(bits):\n        bit_group = []\n        while i < len(bits) and bits[i] == bits[0]:\n            bit_group.append(bits[i])\n            i += 1\n        bit_groups.append(bit_group)\n    return bit_groups\n    \ndef shift_bits(bits: List[int]) -> List[int]:\n    \"\"\" Input is a list of bits (0s and 1s). Return a list of bits obtained by shifting the bits to the left.\n    >>> shift_bits([1, 0, 0, 1])\n    [0, 1, 0, 1]\n    \"\"\"\n    return bits[1:] + [bits[0]]\n    \ndef count_bits(bits: List[int]) -> int:\n    \"\"\" Input is a list of bits (0s and 1s). Return the number of bits in the list.\n    >>> count_bits([1, 0, 0, 1])\n    4\n    \"\"\"\n    return sum(bits)\n    \ndef count_one_bits(bits: List[int]) -> int:\n    \"\"\" Input is a list of bits (0s and 1s). Return the number of ones in the list.\n    >>> count_one_bits([1, 0, 0, 1])\n    2\n    \"\"\"\n    return count_bits(bits) - count_bits(shift_bits(bits))\n    \ndef has_bits(bits: List[int], bits_to_find: List[int]) -> bool:\n    \"\"\" Input is a list of bits (0s and 1s) and a list of bits (0s and 1s). Return True if bits_to_find\n    appears in the list, else return False.\n    >>> has_bits([1, 0, 0, 1], [1, 0, 0, 1])\n    True\n    \"\"\"\n    return count_bits(bits) - count_bits(bits_to_find) == 0\n    \ndef add_bits(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two lists of bits (0s and 1s). Return a list of bits (0s and 1s) that have bits in common\n    >>> add_bits([1, 0, 0, 1], [1, 0, 0, 1])\n    [1, 1, 0, 0]\n    \"\"\"\n    return [a[i] + b[i] for i in range(len(a))]\n    \ndef sum_bits(bits: List[int]) -> int:\n    \"\"\" Input is a list of bits (0s and 1s). Return the sum of the bits.\n    >>> sum_bits([1, 0, 0, 1])\n    4\n    \"\"\"\n    return sum(bits)\n    \ndef add_bits_and_shift(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two lists of bits (0s and 1s). Return a list of bits (0s and 1s) obtained b",
        "num_ids": 1025
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(a) > len(b):\n        b = '0' * (len(a) - len(b)) + b\n    else:\n        a = '0' * (len(b) - len(a)) + a\n    return ''.join(['1' if x == y else '0' for x, y in zip(a, b)])\n",
        "num_ids": 87
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a,b))\n",
        "num_ids": 38
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join('0' if (a_bit == b_bit) else '1' for a_bit, b_bit in zip(a, b))\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join(map(lambda x, y: str(int(x) ^ int(y)), a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(chr(int(a[i]) ^ int(b[i])) for i in range(min(len(a), len(b))))\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = \"\"\n    for a_bit, b_bit in zip(a, b):\n        if a_bit!= b_bit:\n            res += \"1\"\n        else:\n            res += \"0\"\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Convert the two strings to 2's and 1's\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    # Convert the 1s and 0s to binary\n    a_binary = format(a[0], 'b') + format(a[1], 'b')\n    b_binary = format(b[0], 'b') + format(b[1], 'b')\n    # XOR them\n    result = int(a_binary, 2) ^ int(b_binary, 2)\n    # Convert the result to a string\n    return format(result, 'b')\n",
        "num_ids": 150
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if strings == []:\n        return None\n    return sorted(strings, key=len)[-1]\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    longest_str = None\n    for s in strings:\n        if not longest_str or len(longest_str) < len(s):\n            longest_str = s\n    return longest_str\n",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(strings, key=len)[-1] if strings else None\n",
        "num_ids": 19
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    longest_str = None\n    for s in strings:\n        if longest_str is None:\n            longest_str = s\n        if len(longest_str) < len(s):\n            longest_str = s\n    return longest_str\n",
        "num_ids": 62
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while b!= 0:\n        t = b\n        b = a % b\n        a = t\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return gcd(a, b)\n",
        "num_ids": 11
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 35
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while b!= 0:\n        quotient = a // b\n        remainder = a % b\n        a = b\n        b = remainder\n    return a\n",
        "num_ids": 41
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == 0 or b == 0:\n        return 1\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\n",
        "num_ids": 70
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 34
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if string:\n        return [string[:i] for i in range(1, len(string) + 1)]\n    return []\n",
        "num_ids": 33
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # TODO:\n    # Suggestion: if string is empty, return empty list\n    # Suggestion: return empty list\n    \n    prefix_list = []\n    \n    if len(string) == 0:\n        return prefix_list\n    \n    if len(string) == 1:\n        prefix_list.append(string)\n        return prefix_list\n    \n    # TODO:\n    # Suggestion: Use recursion to find the list of all prefixes\n    # Suggestion: Use recursion to find the list of all prefixes\n    # Suggestion: Use recursion to find the list of all prefixes\n    \n    \n    for i in range(0, len(string)):\n        prefix_list.append(string[:i + 1])\n    \n    return prefix_list\n",
        "num_ids": 187
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string[:i+1] for i in range(len(string))]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 28
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(0, n + 1):\n        res.append(str(i))\n    return''.join(res)",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result = result + str(i) + \" \"\n    return result.strip()\n",
        "num_ids": 37
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(str(x) for x in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return string_sequence(n-1) +'' + str(n)\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    char_set = set()\n    for c in string:\n        if c.lower() not in char_set:\n            char_set.add(c.lower())\n    return len(char_set)\n",
        "num_ids": 50
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # If the string is empty, then return 0\n    if len(string) == 0:\n        return 0\n    # Initialize a set of unique characters to 0\n    unique_chars = 0\n    # Iterate over each character in the string and add them to the set of unique characters\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    # Return the length of the set of unique characters\n    return len(unique_chars)\n",
        "num_ids": 118
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lowercase_characters = []\n    for character in string:\n        if character.islower():\n            lowercase_characters.append(character)\n    return len(lowercase_characters)\n",
        "num_ids": 48
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not string:\n        return 0\n    counts = [0] * 128\n    for c in string:\n        if c.isalpha():\n            counts[ord(c.lower())] += 1\n    return sum(counts)\n",
        "num_ids": 58
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Replace this line with your solution\n    return []\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [4 if n == 'o' else 2 if n == 'o|' else 1 for n in music_string]\n",
        "num_ids": 30
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    beats = 0\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats += 1\n            i += 1\n        elif music_string[i] == 'o|':\n            beats += 1\n            i += 1\n        elif music_string[i] == '.|':\n            beats += 1\n            i += 1\n        else:\n            result.append(beats)\n            beats = 0\n            i += 1\n    if beats > 0:\n        result.append(beats)\n    return result\n",
        "num_ids": 147
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    beats_count = []\n    for note in music_string.split(' '):\n        if note.isalpha():\n            beats_count.append(4)\n        elif note == 'o|':\n            beats_count.append(2)\n        elif note == '.|':\n            beats_count.append(1)\n    return beats_count\n",
        "num_ids": 88
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    notes = list(map(str.strip, music_string.split(' ')))\n    parsed_notes = []\n    for note in notes:\n        if note == '':\n            continue\n",
        "num_ids": 47
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ret = []\n    i = 0\n    j = 0\n    while i < len(music_string):\n        if j < len(music_string) and music_string[j] == 'o':\n            ret.append(1)\n            j += 1\n            i += 1\n        elif j < len(music_string) and music_string[j] == 'o|':\n            ret.append(0.5)\n            j += 1\n            i += 1\n        elif j < len(music_string) and music_string[j] == '.':\n            ret.append(0.25)\n            j += 1\n            i += 1\n        else:\n            raise Exception(\"You have to specify exactly one o, o|,.|, or. in music string\")\n    return ret\n",
        "num_ids": 186
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [len(x) for x in music_string.split()]\n",
        "num_ids": 19
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    music_string = music_string.split()\n    for note in music_string:\n        if note == \"o\":\n            result.append(4)\n        elif note == \"o|\":\n            result.append(2)\n        elif note == \".|\":\n            result.append(1)\n",
        "num_ids": 78
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    output = []\n    for note in music_string.split(' '):\n        if note == 'o' or note == 'o|':\n            output.append(4)\n        elif note == '.':\n            output.append(2)\n        elif note == '|':\n            output.append(1)\n        else:\n            output.append(0)\n    return output\n",
        "num_ids": 92
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    music = music_string.split(' ')\n    result = []\n    for note in music:\n        for i in range(int(note[:-1])):\n            result.append(1)\n            result.append(1)\n        result.append(1)\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if string is None or substring is None:\n        return 0\n    return len(string) - len(string.rfind(substring))\n",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string or not substring:\n        return 0\n    # if the first letter is the same, we check the whole string, otherwise we check the substring with the first letter\n    if string[0] == substring[0]:\n        return how_many_times(string[1:], substring) + 1\n    else:\n        return how_many_times(string, substring[1:])\n",
        "num_ids": 95
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for idx, letter in enumerate(string):\n        if string[idx:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(string):\n        if string[i:].startswith(substring):\n            i += len(substring)\n        else:\n            i += 1\n    return i\n",
        "num_ids": 52
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for _ in findall(string, substring))\n",
        "num_ids": 18
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string.split(substring, string.count(substring))) - 1\n",
        "num_ids": 22
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string.split(substring,string.count(substring)))-1\n",
        "num_ids": 22
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.replace(' ', '')\n    sorted_numbers = sorted(numbers)\n    return \" \".join(sorted_numbers)\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \" \".join(sorted(numbers.split(\" \"), key=lambda x: int(x)))\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if numbers == '':\n        return numbers\n    else:\n        return sort_numbers(numbers.replace(' ', '')) +'' + numbers[-1]\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # find the min and max values\n    numbers = numbers.split()\n    min = max = numbers[0]\n    for n in numbers[1:]:\n        if n < min:\n            min = n\n        elif n > max:\n            max = n\n",
        "num_ids": 64
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_nums = sorted(numbers.split(' '))\n    return''.join(sorted_nums)\n",
        "num_ids": 30
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # YOUR CODE GOES HERE\n    numbers = numbers.split(' ')\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    valid_choices = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    string = []\n    for i in numbers.split():\n        string.append(str(nums[int(i)]))\n    return''.join(string)\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # numbers_to_numbers = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5','six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    # ordered_numbers = ''\n",
        "num_ids": 80
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"You need at least two numbers to compare\")\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
        "num_ids": 46
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # initialize two closest indices to the first element\n    closest_i1 = 0\n    closest_i2 = 1\n    closest_diff = numbers[0] - numbers[1]\n",
        "num_ids": 49
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = sorted(numbers, key=lambda x: (x - min(numbers)) ** 2)\n    return result[0], result[1]\n",
        "num_ids": 37
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    difference = None\n    closest_pair = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if difference is None or abs(numbers[i] - numbers[j]) < difference:\n                closest_pair = (numbers[i], numbers[j])\n                difference = abs(numbers[i] - numbers[j])\n    return closest_pair\n",
        "num_ids": 109
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    index = (n // 2) if n % 2 == 0 else (n // 2) + 1\n    return numbers[index], numbers[~index]\n",
        "num_ids": 52
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    smallest = numbers[0]\n    smallest_index = 0\n    second_smallest = numbers[0]\n    second_smallest_index = 0\n    for i in range(1, n):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n        elif smallest > numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n            second_smallest_index = i\n    return smallest, second_smallest\n",
        "num_ids": 132
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    min_diff = float('inf')\n    min_nums = None\n    for i in range(1, len(numbers)):\n        cur_diff = abs(numbers[i] - numbers[i - 1])\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n            min_nums = numbers[i - 1], numbers[i]\n    return min_nums\n",
        "num_ids": 98
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return float('inf'), float('inf')\n    if len(numbers) == 2:\n        return numbers[0], numbers[1]\n    a = min(numbers)\n    b = max(numbers)\n    numbers.remove(a)\n    numbers.remove(b)\n    c = min(numbers)\n    d = max(numbers)\n    return a, b\n",
        "num_ids": 105
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "num_ids": 52
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]\n",
        "num_ids": 44
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    smallest = min(numbers)\n    largest = max(numbers)\n    t = 1.0 / (largest - smallest)\n    return [t * (n - smallest) for n in numbers]\n",
        "num_ids": 64
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    new_nums = list()\n    smallest = numbers[0]\n    largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    if smallest == largest:\n        return numbers\n    else:\n        for num in numbers:\n            new_nums.append(num * 1.0 / (largest - smallest))\n    return new_nums\n",
        "num_ids": 108
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    scale = 1 / (max_val - min_val)\n    return [scale * (val - min_val) for val in numbers]\n",
        "num_ids": 56
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Not enough numbers to rescale')\n",
        "num_ids": 25
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    smallest_val = min(numbers)\n    largest_val = max(numbers)\n    normalized_numbers = []\n    for val in numbers:\n        normalized_numbers.append((val - smallest_val) / (largest_val - smallest_val))\n    return normalized_numbers\n",
        "num_ids": 73
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    _min = min(numbers)\n    _max = max(numbers)\n    return [(n - _min) / (_max - _min) for n in numbers]\n",
        "num_ids": 42
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [number / max(numbers) for number in numbers]\n",
        "num_ids": 17
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [item for item in values if isinstance(item, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [int(item) for item in values if isinstance(item, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [\n        value for value in values\n        if isinstance(value, int)\n    ]\n",
        "num_ids": 25
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [value for value in values if type(value) == int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return n // 2\n    return 1\n",
        "num_ids": 20
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n > 0\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            divisor += 1\n    return divisor - 1\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Use a while loop\n    x = 1\n    while n % x!= 0:\n        x += 1\n    return x\n",
        "num_ids": 32
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert 0 < n, \"n must be positive\"\n    divisor = 1\n    while divisor * divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 62
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    largest_divisor = 1\n    while n % largest_divisor!= 0:\n        largest_divisor += 1\n    return largest_divisor\n",
        "num_ids": 41
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 1, \"n must be greater than 1\"\n    return int(n**0.5)\n",
        "num_ids": 27
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 30
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    factors = []\n    n = abs(n)\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n /= i\n                break\n    if len(factors) == 0:\n        factors.append(n)\n    return factors\n",
        "num_ids": 86
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 0:\n        raise ValueError(\"Number of factors should be greater than 0.\")\n",
        "num_ids": 23
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return []\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n              103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\n              211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n              331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,\n              457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\n              599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\n              733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n              877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    n = 2 * n\n    factor_list = []\n    # the algorithm runs until the square root of the number has been reached\n    # so we set a threshold as the square root of the number\n    while n > primes[-1]:\n        # we start at the right most element of the primes list\n        # if the current element is the same as the left most element of the primes list,\n        # we know that the current number is divisible by 2 and we can skip it\n        # we do this until we reach the right most element of the primes list\n        while primes[0] <= n and primes[0]!= n:\n            if n % primes[0] == 0:\n                factor_list.append(primes[0])\n                n //= primes[0]\n                # we break out of the loop as the current number is divisible by the prime\n                # and we can skip it\n                break\n            else:\n                primes = primes[1:]\n        # if the current number is not divisible by any of the primes,\n        # we know that the number is prime\n        else:\n            factor_list.append(n)\n            break\n    return factor_list\n",
        "num_ids": 724
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 0:\n        return \"Invalid input, must be a positive integer\"\n    if n == 0 or n == 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n//2)\n    if n % 3 == 0:\n        return [3] + factorize(n//3)\n    if n % 5 == 0:\n        return [5] + factorize(n//5)\n    if n % 7 == 0:\n        return [7] + factorize(n//7)\n    for i in range(2, n):\n        if n % i == 0:\n            return [i] + factorize(n//i)\n    return [n]\n",
        "num_ids": 181
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 83
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    f = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            f.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        f.append(n)\n    return f\n",
        "num_ids": 67
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        raise ValueError(\"Input number should be greater than 0\")\n    if n == 1:\n        return [1]\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 106
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    factor = 2\n    while n >= factor * factor:\n        if n % factor == 0:\n            count = 0\n            while n % factor == 0:\n                count += 1\n                n //= factor\n            factor_list.append((factor, count))\n        factor += 1\n    if n > 1:\n        factor_list.append((n, 1))\n    return factor_list\n",
        "num_ids": 91
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [num for num in numbers if numbers.count(num) == 1]\n",
        "num_ids": 20
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    duplicates = set()\n    result = []\n    for num in numbers:\n        if num not in duplicates:\n            duplicates.add(num)\n            result.append(num)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # do not change the input list\n    result = list(numbers)\n    if len(result) < 2:\n        return result\n    # now we have more than 2 items\n    last_item = result[0]\n    counter = 1\n    for item in result[1:]:\n        if item!= last_item:\n            result[counter] = item\n            last_item = item\n            counter += 1\n    return result\n",
        "num_ids": 102
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        return numbers\n    # This solution would also work\n    # return list(dict.fromkeys(numbers))\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    duplicates = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j]:\n                duplicates.append(numbers[i])\n",
        "num_ids": 63
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    for number in numbers:\n        if number not in new_list:\n            new_list.append(number)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(dict.fromkeys(numbers))\n",
        "num_ids": 14
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        elif string[i].islower():\n            string[i] = string[i].upper()\n    return \"\".join(string)\n",
        "num_ids": 77
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([x.swapcase() for x in string])\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([(c.lower() if c.isupper() else c.upper()) for c in string])\n",
        "num_ids": 29
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not strings:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n    \n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [number for number in l if number > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # The algorithm is the same as the one in the book, but we will do it\n    # faster.\n    if n <= 3:\n        return True if n > 1 else False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        limit = int(math.ceil(math.sqrt(n)))\n        i = 2\n        while i <= limit:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for x in range(3, n, 2):\n            if n % x == 0:\n                return False\n        return True\n",
        "num_ids": 72
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # If n is even, it's not prime\n    if n % 2 == 0:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for x in range(3, n):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 2:\n        return False\n    # If there is a divisor, then n is not prime\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n > 2 and n % 3 == 0:\n        return False\n    # All primes are odd, so skip evens\n    i = 5\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        if coeff * coeff > 0:\n            if coeff > 0:\n                coeff = -coeff\n            xs[i] = coeff\n            return -coeff / coeff\n    raise Exception('No zero point')\n",
        "num_ids": 79
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not xs:\n        raise ValueError(\"List xs can not be empty.\")\n    if not all(xs[i] for i in range(len(xs)) if xs[i]):\n        raise ValueError(\"List xs can not be all zeros.\")\n    if len(xs) == 1:\n        return -xs[0]/2\n    if len(xs) % 2 == 1:\n        return -xs[0]/2 - poly(xs[1::2], -xs[0]/2) / poly(xs[1::2], -xs[0]/2)\n",
        "num_ids": 140
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: make this function more efficient\n    for i, x in enumerate(xs):\n        if x == 0:\n            return i\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    if len(xs) % 2:\n        return None\n    x0 = xs[-1]\n    x1 = xs[-2]\n    for i in range(len(xs) - 2, 0, -2):\n        x2 = xs[i - 1]\n        x3 = xs[i]\n        if x0!= 0:\n            return (x1 * x2 - x0 * x3) / (x1 * x2 - x0 * x0)\n        x0 = x1\n        x1 = x2\n        x2 = x3\n    return -x1 / x2\n",
        "num_ids": 165
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('polynomial must have an even number of coefficients')\n    n = len(xs) // 2\n    if not xs[n]:\n        return xs[n - 1] / (-xs[n - 1])\n    else:\n        return (-xs[n - 1] - math.sqrt((xs[n - 1] ** 2) - (xs[n] * xs[n - 1]))) / xs[n]\n",
        "num_ids": 118
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Coefficient of x^n is 0\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            return float(i) / len(xs)\n    # Coefficient of x^n is non-zero\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return float(i) / len(xs) - sum(xs) / xs[i]\n    # All coefficients are 0\n    return None\n",
        "num_ids": 118
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if xs[-1] == 0:\n        raise ValueError(\"Polynomial can't have zero coefficient.\")\n    for i, coeff in enumerate(xs):\n        if coeff!= 0 and i % 2 == 0:\n            return -coeff / xs[i + 1]\n    raise ValueError(\"Polynomial doesn't have a solution.\")\n",
        "num_ids": 114
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0, \"len(xs) should be even\"\n    assert xs[-1]!= 0, \"list xs should not include zero coefficient\"\n    assert xs[-1] > 0, \"list xs should not have negative coefficient\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) / sum([math.pow(x, i) for i in range(len(xs) - 1)])\n",
        "num_ids": 121
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('xs must be even and have non zero coeffs')\n    if xs[-1] == 0:\n        raise ValueError('polynomial must have a non zero coeff at the end')\n    # x = root of polynomial\n    # x = -b / (2 * a)\n    # where a = 2 * xs[-1]\n    # a = -2 * xs[-1]\n    a = -2 * xs[-1]\n    b = sum(xs[:-1])\n    return -b / a\n",
        "num_ids": 146
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    xs = [coeff for coeff in xs if coeff]\n    if len(xs) % 2 == 0:\n        if xs[0] == 0:\n            return xs[1] / -1.0\n        return -1.0 * poly(xs[1:], -1.0 * xs[0] / -1.0) / xs[0]\n    if len(xs) == 1:\n        if xs[0] == 0:\n            return 0.0\n        else:\n            return -1.0 * xs[0] / -1.0\n    return -1.0 * poly(xs[1:], -1.0 * xs[0] / -1.0) / xs[0]\n",
        "num_ids": 177
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    return [l[i] if i % 3 == 0 else l[i] if i % 3 == 1 else l[i] if i % 3 == 2 else l[i-1] for i in range(len(l))]\n",
        "num_ids": 60
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your Code Here\n    l2 = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l2.append(l[i])\n    l2.sort()\n    l2.extend(l[::3])\n    return l2\n",
        "num_ids": 71
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l_copy = l[:]\n    for i in range(len(l_copy)):\n        if i % 3!= 0:\n            l_copy[i], l_copy[i+1] = l_copy[i+1], l_copy[i]\n    return l_copy\n",
        "num_ids": 71
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(l, key= lambda x: x % 3)\n",
        "num_ids": 17
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(l) > 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            l[i], l[i-1] = l[i-1], l[i]\n    return l",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #for i in range(len(l)):\n    #    if i % 3 == 0:\n    #        l[i] = l[i]\n    #    else:\n    #        l[i] = l[i]\n    #return l\n    return sorted(l, key=lambda x: x if i % 3 == 0 else x)\n    \ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_second([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_second([5, 6, 3, 4, 8, 9, 2])\n    [2, 5, 8, 6, 9, 4, 3]\n    \"\"\"\n    #for i in range(len(l)):\n    #    if i % 2 == 0:\n    #        l[i] = l[i]\n    #    else:\n    #        l[i] = l[i]\n    #return l\n    return sorted(l, key=lambda x: x if i % 2 == 0 else x)\n    \ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by one, while its values at the indicies that are divisible by one are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [5, 8, 6, 9, 4, 2, 3]\n    \"\"\"\n    #for i in range(len(l)):\n    #    if i % 1 == 0:\n    #        l[i] = l[i]\n    #    else:\n    #        l[i] = l[i]\n    #return l\n    return sorted(l, key=lambda x: x if i % 1 == 0 else x)\n    \ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by zero, while its values at the indicies that are divisible by zero are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_second([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_second([5, 6, 3, 4, 8, 9, 2])\n    [2, 5, 8, 6, 9, 4, 3]\n    \"\"\"\n    #for i in range(len(l)):\n    #    if i % 0 == 0:\n    #        l[i] = l[i]\n    #    else:\n    #        l[i] = l[i]\n    #return l\n    return sorted(l, key=lambda x: x if i % 0 == 0 else x)\n    \ndef sort_first(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by zero, while its values at the indicies that are divisible by zero are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_first([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_first([5, 6, 3, 4, 8, 9, 2])\n    [5, 8, 6, 9, 4, 2, 3]\n    \"\"\"\n    #for i in range(len(l)):\n    #    if i % 0 == 0:\n    #        l[i] = l[i]\n    #    else:\n    #        l[i] = l[i]\n    #return l\n    return sorted(l, key=lambda x: x if i % 0 == 0 else x)\n    \ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l i",
        "num_ids": 1025
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_l.append(l[i])\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_l.append(l[i])\n    return new_l\n",
        "num_ids": 81
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Insert your code here\n    return l[:3]+[x for x in sorted(l[3:])]\n",
        "num_ids": 29
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # creating a new list and adding all values that aren't divisible by 3\n    l2 = [i for i in l if i % 3!= 0]\n    # creating a new list and adding all values that are divisible by 3\n    l3 = [i for i in l if i % 3 == 0]\n    # sortedl3 is a new list that contains the sorted values of l3\n    sortedl3 = sorted(l3)\n    # newl is a new list that contains the sorted values of l2\n    newl = [l2[i] for i in range(0, len(l2)) if l2[i] == sortedl3[i]]\n    # returning the new list\n    return newl\n",
        "num_ids": 168
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            temp = l[i]\n            j = i\n            while j > 0 and l[j-1] > temp:\n                l[j] = l[j-1]\n                j = j-1\n            l[j] = temp\n    return l\n",
        "num_ids": 90
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return list(set(l))\n    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return sorted(result)\n",
        "num_ids": 46
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for i, x in enumerate(l) if i == l.index(x) and x not in l[i + 1:]]\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    [l2.append(x) for x in l if x not in l2]\n    l2.sort()\n    return l2\n",
        "num_ids": 40
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(sorted(set(l)))\n",
        "num_ids": 13
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_elem = l[0]\n    for el in l[1:]:\n        if el > max_elem:\n            max_elem = el\n    return max_elem\n",
        "num_ids": 47
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # max_element is implemented using the fact that each element is\n    # unique (no duplicates) and is comparable to itself.\n    return max(l)\n",
        "num_ids": 38
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(l) > 0, \"Cannot find maximum element of an empty list\"\n    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 66
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for x in range(1, n) if x % 11 == 0 or x % 13 == 0)\n",
        "num_ids": 29
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for x in range(1,n):\n        if x%11 == 0 or x%13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # count = 0\n    # for i in range(1, n+1):\n    #     if i % 11 == 0 or i % 13 == 0:\n    #         count += 1\n    # return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            ans = ans + 1\n    return ans",
        "num_ids": 42
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 0\n    for x in range(1,n+1):\n        if x % 11 == 0 or x % 13 == 0:\n            result += 1\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count",
        "num_ids": 43
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 0\n    for num in range(1, n):\n        if (num % 11) == 0 or (num % 13) == 0:\n            i += 1\n    return i\n",
        "num_ids": 45
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(n):\n        if (i + 1) % 11 == 0 or (i + 1) % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    count = 0\n    \n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0):\n            count = count + 1\n    \n    return count\n",
        "num_ids": 50
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    index = 0\n    for i in l[1:]:\n        if l[index] % 2 == 1:\n            l[index], l[i] = l[i], l[index]\n        index += 1\n    return l\n",
        "num_ids": 56
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "num_ids": 22
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    for i in range(0, len(l), 2):\n        l[i] = l[i + 1]\n    return l\n",
        "num_ids": 39
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l2 = []\n    for x in range(len(l)):\n        if x % 2 == 0:\n            l2.append(l[x])\n        else:\n            l2.append(l[x])\n    l2.sort()\n    return l2\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return l[::2] + sorted(l[1::2])\n",
        "num_ids": 18
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Hint: the \"uniquify\" function might be useful here.\n    # Another hint: the \"sort\" function might be useful here.\n    new_list = l[::2]\n    new_list.sort()\n    new_list+=l[1::2]\n    return new_list\n",
        "num_ids": 72
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l_new = l.copy()\n    for i in range(1, len(l_new), 2):\n        l_new[i] = l[i-1]\n",
        "num_ids": 43
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n",
        "num_ids": 59
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # copy the original list\n    l_copy = l[:]\n    # zip the lists to give a list of tuples of even indicies and odd indicies\n    evens_odds = list(zip(l_copy[0::2], l_copy[1::2]))\n    # sort the tuples by the even indicies\n    evens_odds.sort(key = lambda x: x[0])\n    # loop over the sorted tuples\n    for i, j in evens_odds:\n        # swap the elements\n        l_copy[i], l_copy[j] = l_copy[j], l_copy[i]\n    # return the new list\n    return l_copy\n",
        "num_ids": 166
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_l.append(l[i])\n        else:\n            new_l.append(l[i])\n    new_l.sort()\n    return new_l\n    \n",
        "num_ids": 73
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 69
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # set new groups to empty string.\n    groups = ['' if len(group) == 1 else group for group in groups]\n    # invert groups to form new groups.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 125
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # split string into groups of 3 chars\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range(len(s) // 3)]\n    # decode groups.\n    groups = [group[2:] + group[:2] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 91
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # split into groups. Each of length 3.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)",
        "num_ids": 88
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    groups = []\n    for i in range(0, len(s), 3):\n        groups.append(s[i:i + 3])\n    return \"\".join([g[1] for g in groups])\n",
        "num_ids": 51
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # convert string to groups of 3 chars\n    groups = [s[i:i + 3] for i in range(len(s) - 2) if len(s[i:i + 3]) == 3]\n    # remove second and third elements of each group, which are the same.\n    groups = [(group[0] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 104
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return encode_cyclic(s[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return n\n    f1, f2 = 1, 1\n    if n == 1:\n        return 2\n    for i in range(2, n):\n        f1, f2 = f2, f1 + f2\n    return f2\n",
        "num_ids": 66
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert isinstance(n, int) and n >= 0\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return get_nth_fib(n)\n",
        "num_ids": 55
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n > 0, \"n should be a positive integer\"\n    \n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return(fib(n-1) + fib(n-2))\n",
        "num_ids": 63
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    fib = [2, 3]\n    while True:\n        if n == len(fib):\n            return fib[-1]\n        fib.append(fib[-1] + fib[-2])\n",
        "num_ids": 86
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    while not is_prime(n):\n        n = fib(n)\n    return n\n",
        "num_ids": 23
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(n, int) and n > 0\n    assert n > 2\n    \n    # Calculates the primes till the fibonacci number with index n\n    primes = [2]\n    fib = [1,2]\n    \n    # Start with the first two numbers in the fibonacci sequence\n    for i in range(3,n+1):\n        fib.append(fib[i-2] + fib[i-1])\n        \n        # Test for primality\n        for p in primes:\n            if p > math.sqrt(fib[i]):\n                primes.append(fib[i])\n                break\n            if fib[i] % p == 0:\n                break\n            \n    return primes[n-1]\n",
        "num_ids": 184
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return (prime_fib(n - 1) + prime_fib(n - 2))\n",
        "num_ids": 51
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    fib = [1, 1]\n    i = 2\n    while len(fib) < n:\n        fib.append(fib[i - 1] + fib[i - 2])\n        if is_prime(fib[i]):\n            i += 1\n        if is_prime(fib[i - 2]) and is_prime(fib[i - 1]):\n            fib.append(fib[i - 2] + fib[i - 1])\n    return fib[n - 1]\n",
        "num_ids": 123
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be positive integer\")\n    if n < 2:\n        return n\n    else:\n        fib_1 = 1\n        fib_2 = 2\n        fib_3 = 3\n        while True:\n            fib_3 = fib_1 + fib_2\n            if not is_prime(fib_3):\n                fib_2 = fib_1\n                fib_1 = fib_3\n            if fib_2 == n:\n                return fib_3\n            if fib_3 == n:\n                return fib_2\n",
        "num_ids": 141
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(l)\n    if n == 0:\n        return False\n",
        "num_ids": 20
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # set up an empty dictionary to use as a hash table\n    d = {}\n    # loop over the list l\n    for num in l:\n        # check to see if num is in the dictionary\n        if num in d:\n            # if so, increment the value of the key\n            d[num] += 1\n        # if not, add the key/value pair to the dictionary\n        else:\n            d[num] = 1\n    # loop over the dictionary and check if the value of the key is 3\n    for key in d:\n        # if so, the list cannot have three distinct elements\n        if d[key] == 3:\n            return True\n    # otherwise, the list must have three distinct elements\n    return False\n",
        "num_ids": 168
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = set()\n    for x in l:\n        if x in s:\n            return True\n        s.add(x)\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(set(l)) == 3 and sum(l) == 0\n",
        "num_ids": 19
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #l = [1, 3, 5, -2, 1]\n    l = [1, 2, 3, 4, -1, 2, 1, -1]\n    for x in l:\n        for y in l:\n            for z in l:\n                if (x + y + z) == 0 and (x!= y) and (x!= z) and (y!= z):\n                    return True\n    return False\n",
        "num_ids": 103
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return any([sum(l[i:i+3]) == 0 for i in range(len(l))])\n",
        "num_ids": 28
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counter = 0\n    for x in l:\n        for y in l:\n            if x!= y:\n                for z in l:\n                    if x!= z and y!= z and x + y + z == 0:\n                        counter += 1\n    return counter == 3\n",
        "num_ids": 67
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return any(a + b + c == 0 for a, b, c in combinations(l, 3))\n",
        "num_ids": 26
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    res = set()\n    for x in l:\n        if -x in res:\n            return True\n        else:\n            res.add(x)\n    return False",
        "num_ids": 43
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n > 0, \"n must be greater than 0\"\n    return sum([int(is_collision(n, i)) for i in range(1, n + 1)])\n",
        "num_ids": 44
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def collisions_simple():\n        \"\"\"\n        This function does not change the state of the board, but determines\n        if a collision is occurring.\n        \"\"\"\n        car_left_right = 0\n        car_right_left = 0\n        car_left_right_car_located = []\n        for i in range(n):\n            car_left_right += 1\n            car_right_left += 1\n            car_left_right_car_located.append((car_left_right, car_right_left))\n            if car_left_right % n == 0:\n                car_left_right = 0\n            if car_right_left % n == 0:\n                car_right_left = 0\n        collisions_simple = len(car_left_right_car_located)\n        return collisions_simple\n",
        "num_ids": 193
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    collisions = 0\n    # Your code here\n    return collisions",
        "num_ids": 16
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    collisions = 0\n    for _ in range(n):\n        for _ in range(n):\n            if _ + collisions > n - 1:\n                break\n            collisions += 1\n    return collisions\n",
        "num_ids": 49
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # No collisions, if car (n-1) moves first, then car n moves.\n    if n == 1:\n        return 0\n    # No collisions, if car n moves first, then car (n-1) moves.\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n",
        "num_ids": 87
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                # This statement will never execute in the course of a race\n                if (i + j) % (n - 1) == 0:\n                    total += 1\n    return total\n",
        "num_ids": 71
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import random\n    n = n if n>0 else 1\n    cars = [[random.choice([\"left\", \"right\"]) for _ in range(n)] for _ in range(2)]\n    last = [[n for _ in range(n)] for _ in range(2)]\n    while True:\n        for i in range(n):\n            for j in range(n):\n                if cars[i][j] == \"left\":\n                    if i == 0:\n                        cars[i+1][j] = \"right\"\n                    else:\n                        if last[i][j] == n:\n                            cars[i-1][j] = \"left\"\n                        else:\n                            cars[i-1][j] = \"left\"\n                            cars[i+1][j] = \"right\"\n        last = [c.copy() for c in cars]\n        if last == cars:\n            return 0\n",
        "num_ids": 210
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert isinstance(n, int) and n >= 1, 'n must be a positive integer'\n    assert isinstance(n, int), 'n must be a positive integer'\n    return sum([collision(random.randint(1, 100), random.randint(1, 100), random.randint(1, 100)) for _ in range(n)])\n",
        "num_ids": 85
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for x in range(n) for y in range(n) if abs(x-y) <= 1 and x > y])\n",
        "num_ids": 35
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    cars_left = [randint(1, 10) for _ in range(n)]\n    cars_right = [randint(1, 10) for _ in range(n)]\n    collisions = 0\n    for i in range(len(cars_left)):\n        for j in range(len(cars_right)):\n            if i == j:\n                continue\n            if cars_left[i] == cars_right[j]:\n                collisions += 1\n    return collisions\n",
        "num_ids": 113
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return [l[i]+1 for i in range(len(l))]\n",
        "num_ids": 29
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l1 = l[:]\n    for i in range(1, len(l1)):\n        l1[i] = l1[i] + l1[i-1]\n    return l1\n",
        "num_ids": 50
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert l, \"Cannot increment empty list\"\n    return [i + 1 for i in l]\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[item] = item\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pair_dict = {}\n    for i in l:\n        if i in pair_dict:\n            return True\n        pair_dict[-i] = i\n    return False",
        "num_ids": 42
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for x in l:\n        for y in l:\n            if x + y == 0 and x!= y:\n                return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for i in l:\n        total += i\n    if total == 0:\n        return True\n    elif total * -1 in l:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) > 2:\n        return any(map(lambda x: l.count(x) > 1 and l.count(abs(x)) > 0, l))\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    dict = {}\n    for num in l:\n        if num in dict:\n            return True\n        else:\n            dict[-num] = True\n    return False",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    dict_ = {}\n    for i in l:\n        if i in dict_:\n            return True\n        else:\n            dict_[-i] = i\n    return False",
        "num_ids": 43
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    seen = set()\n    for num in l:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    values = set(l)\n    for n in l:\n        if -n in values:\n            return True\n    return False\n    # or\n    # return len(set(l)) < len(l) and -sum(l) in l\n",
        "num_ids": 59
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = set()\n    for i in l:\n        x = -i\n        if x in s:\n            return True\n        s.add(i)\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x < base:\n        return str(x)\n    elif x == base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 54
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return ''.join(str(num) for num in digits)\n",
        "num_ids": 60
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Base conversion algorithm.\n    # we can write code for other bases such as 8, 16, 32\n    out_base = \"\"\n    if x == 0:\n        out_base = \"0\"\n    else:\n        while x!= 0:\n            out_base = str(x % base) + out_base\n            x //= base\n    return out_base\n",
        "num_ids": 88
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if base < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if base < 10:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 35
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import string\n    if x < 10:\n        return str(x)\n    s = \"\"\n    while x!= 0:\n        s += string.digits[x % base]\n        x //= base\n    return s[::-1]\n",
        "num_ids": 60
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    b = len(str(base))\n    s = str(x)\n    s = s[::-1]\n    r = ''\n    i = 0\n    while i < len(s):\n        if int(s[i]) < base:\n            r += s[i]\n        else:\n            r += str(int(s[i]) - int(str(base)) + int(s[i+1]))\n        i += 1\n    r = r[::-1]\n    return r\n",
        "num_ids": 120
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x == 0:\n        return '0'\n    digits = '0123456789ABCDEF'\n    res = ''\n    while x:\n        res = digits[x % base] + res\n        x //= base\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if base < 2:\n        raise ValueError(\"base number must be at least 2\")\n    if x < 0:\n        sign = -1\n    elif x == 0:\n        return '0'\n    else:\n        sign = 1\n",
        "num_ids": 58
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    out = \"\"\n    if x == 0:\n        out = \"0\"\n    while x!= 0:\n        out = str(x % base) + out\n        x //= base\n    return out\n",
        "num_ids": 50
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return.5 * a * h\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 0.5*a*h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 2:\n        return n-1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 52
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a = 0\n    b = 1\n    c = 2\n    d = 3\n    for i in range(5,n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "num_ids": 105
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0: return 0\n    if n == 1: return 1\n    if n == 2: return 2\n    if n == 3: return 0\n    fib4a, fib4b = 0, 1\n    for i in range(4, n+1):\n        fib4a, fib4b = fib4b, fib4a + fib4b\n    return fib4a",
        "num_ids": 91
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # insert your code here\n    \ndef fib5(n: int):\n    \"\"\"\n    The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 1\n    fib5(3) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    >>> fib5(5)\n    5\n    >>> fib5(6)\n    8\n    >>> fib5(7)\n    15\n    \"\"\"\n    # insert your code here\n    \ndef fib6(n: int):\n    \"\"\"\n    The Fib6 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib6(0) -> 0\n    fib6(1) -> 0\n    fib6(2) -> 1\n    fib6(3) -> 1\n    fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4).\n    Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n    >>> fib6(5)\n    5\n    >>> fib6(6)\n    8\n    >>> fib6(7)\n    15\n    \"\"\"\n    # insert your code here\n    \ndef fib7(n: int):\n    \"\"\"\n    The Fib7 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib7(0) -> 0\n    fib7(1) -> 0\n    fib7(2) -> 1\n    fib7(3) -> 1\n    fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4).\n    Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n    >>> fib7(5)\n    5\n    >>> fib7(6)\n    8\n    >>> fib7(7)\n    15\n    \"\"\"\n    # insert your code here\n    \ndef fib8(n: int):\n    \"\"\"\n    The Fib8 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib8(0) -> 0\n    fib8(1) -> 0\n    fib8(2) -> 1\n    fib8(3) -> 1\n    fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4).\n    Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n    >>> fib8(5)\n    5\n    >>> fib8(6)\n    8\n    >>> fib8(7)\n    15\n    \"\"\"\n    # insert your code here\n    \ndef fib9(n: int):\n    \"\"\"\n    The Fib9 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib9(0) -> 0\n    fib9(1) -> 0\n    fib9(2) -> 1\n    fib9(3) -> 1\n    fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4).\n    Please write a function to efficiently compute the n-th element of the fib9 number sequence.  Do not use recursion.\n    >>> fib9(5)\n    5\n    >>> fib9(6)\n    8\n    >>> fib9(7)\n    15\n    \"\"\"\n    # insert your code here\n    \ndef fib10(n: int):\n    \"\"\"\n    The Fib10 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib10(0) -> 0\n    fib10(1) -> 0\n    fib10(2) -",
        "num_ids": 1025
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n >= 0\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # time complexity O(n)\n    assert isinstance(n, int) and n >= 0 and n <= 30, \"n is not a valid input\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 94
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a + b\n",
        "num_ids": 38
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 0, 1\n    for i in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "num_ids": 92
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 0:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = sorted(l)\n    length = len(s)\n    if length % 2 == 1:\n        return s[length // 2]\n    else:\n        return (s[length // 2 - 1] + s[length // 2]) / 2\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(l) > 0, 'Cannot find median of an empty list'\n",
        "num_ids": 21
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2.0\n",
        "num_ids": 37
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2\n    else:\n        return l[int(len(l) / 2)]\n",
        "num_ids": 69
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l.sort()\n    return l[len(l)//2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert (len(l) > 0), \"Cannot compute median of empty list\"\n    sorted_l = sorted(l)\n    index = (len(l) - 1) // 2\n    if len(l) % 2 == 0:\n        return (sorted_l[index] + sorted_l[index + 1]) / 2\n    else:\n        return sorted_l[index]\n",
        "num_ids": 93
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    return l[len(l)//2] if len(l) % 2 == 1 else (l[len(l)//2 - 1] + l[len(l)//2])/2\n",
        "num_ids": 53
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return None\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2-1] + l[n//2]) / 2.0\n",
        "num_ids": 68
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    return l[len(l) // 2]\n",
        "num_ids": 19
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # We can cut the string in half and check if both halves are the same\n    # assuming that the length of the text is at least 1\n    if len(text) < 1:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 73
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(text) > 0, 'Text cannot be empty'\n",
        "num_ids": 17
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text[: :-1].lower() == text.lower()\n",
        "num_ids": 18
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return modp((n + 1) / 2, p) ** 2 % p\n    else:\n        return (modp(n / 2, p) ** 2) % p\n",
        "num_ids": 75
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (modp(n-1, p) * (n % p)) % p\n    else:\n        return (modp(n//2, p) ** 2) % p\n",
        "num_ids": 65
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return pow(n, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n, p = int(n), int(p)\n    if n < 0: n += p\n    if p == 0: raise ValueError(\"modulo cannot be zero\")\n    if n == 0: return 1\n    if n == 1: return (n+p) % p\n    if n%2 == 0: return (modp(n//2, p)**2) % p\n    if p%4 == 3: return (modp((n-1)//4, p)**2) % p\n    return (modp((n-1)//2, p)**2) % p\n",
        "num_ids": 140
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n/2, p)\n    else:\n        return (modp(n-1, p) * p) % p\n",
        "num_ids": 56
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    if n < 0:\n        n = n + p\n    return modp(n // 2, p) * modp(n // 2, p) % p * modp(n // 2, p) % p if n % 2 == 1 else modp(n // 2, p) ** 2 % p\n",
        "num_ids": 82
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return pow(n, 2, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return pow(n, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return modp(n // 2, p) * 2 % p\n    else:\n        return modp((n - 1) // 2, p) * (2 * modp(n // 2, p) + 1) % p\n",
        "num_ids": 87
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return encode_shift(s)[::-1]\n",
        "num_ids": 14
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    text = text.lower()\n    string = 'aeiou'\n    new_text = \"\"\n",
        "num_ids": 25
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    for c in text:\n        if c in vowels:\n            text = text.replace(c, '')\n    return text\n",
        "num_ids": 54
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 'aeiou'\n    if isinstance(text, str):\n        return ''.join(i for i in text if i not in vowels)\n    else:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    no_vowels = ''\n    for char in text:\n        if char.lower() not in vowels:\n            no_vowels += char\n    return no_vowels\n",
        "num_ids": 60
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for i in text:\n        if i.lower() not in vowels:\n            result += i\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    text = ''.join(letter for letter in text if letter not in vowels)\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a','e','i','o','u']\n    for char in text:\n        if char in vowels:\n            text = text.replace(char,'')\n    return text\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    text = ''.join(text)\n    return text\n",
        "num_ids": 93
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for letter in text:\n        if letter in vowels:\n            text = text.replace(letter,'')\n    return text",
        "num_ids": 44
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for i in text:\n        if i not in vowels:\n            new_text += i\n    return new_text\n",
        "num_ids": 58
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all([i < t for i in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0 not in [n for n in l if n < t]\n",
        "num_ids": 18
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for n in l:\n        if n >= t:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return True\n    else:\n        return l[0] < t and below_threshold(l[1:], t)",
        "num_ids": 40
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (s0!= s1) and (sorted(s0) == sorted(s1))\n",
        "num_ids": 26
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s0 = s0.lower()\n    s1 = s1.lower()\n    for i, char in enumerate(s0):\n        if char not in s1[i:]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        return None\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 47
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n if n < 2 else fib(n - 2) + fib(n - 1)\n",
        "num_ids": 23
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            try:\n                top = stack.pop()\n            except IndexError:\n                return False\n            if top!= \"<\":\n                return False\n        else:\n            stack.append(bracket)\n    return len(stack) == 0\n",
        "num_ids": 77
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Complete the function by adding the missing 2 closing <s> tags\n    \n    correct = False\n    \n    brackets_dict = {'(': ')', '{': '}', '[': ']'}\n    stack = []\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for char in brackets:\n        if char == \">\" and count < 1:\n            return False\n        if char == \"<\":\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(brackets)%2!= 0:\n        return False\n    \n    stack = []\n    for b in brackets:\n        if b == \">\":\n            if stack and stack[-1] == \"<\":\n                stack.pop()\n            else:\n                stack.append(b)\n        else:\n            stack.append(b)\n    return len(stack) == 0\n",
        "num_ids": 93
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n",
        "num_ids": 10
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \">\" and stack == []:\n            return False\n        if bracket == \"<\":\n            stack.append(bracket)\n        if bracket == \">\":\n            if stack!= []:\n                stack.pop()\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    opening_brackets = []\n    for c in brackets:\n        if c == \"<\":\n            opening_brackets.append(\"<\")\n        elif c == \">\":\n            if len(opening_brackets) == 0:\n                return False\n            opening_brackets.pop()\n    return len(opening_brackets) == 0\n",
        "num_ids": 81
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    count = 0\n    for bracket in brackets:\n        if bracket == \">\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            stack.append(\"<\")\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(a <= b for a, b in zip(l, l[1:])) or all(a >= b for a, b in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 1\n    while i < len(l):\n        if l[i] <= l[i-1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(x < y for x, y in sliding(l, 2)) or all(x > y for x, y in sliding(l, 2))\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(list(s1 & s2))\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    intersect = set(l1).intersection(set(l2))\n    return sorted(intersect)\n",
        "num_ids": 27
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n > 1 and n % 2!= 0\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        largest_prime_factor = 2\n    else:\n        largest_prime_factor = 3\n",
        "num_ids": 32
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    m = n - 1\n    while n % 2 == 0:\n        n = n // 2\n        m = m // 2\n    while m > 1:\n        if n % m == 0:\n            n = n // m\n            m = m - 1\n        else:\n            m = m - 1\n    return n\n",
        "num_ids": 76
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            if is_prime(i):\n                return i\n",
        "num_ids": 34
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1\n    div = 2\n    while div <= n:\n        if n % div == 0:\n            n /= div\n        else:\n            div += 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            print(i)\n        else:\n            i += 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in range(2, n):\n        if n % i == 0:\n            return n // i\n",
        "num_ids": 36
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > 1 and is_prime(n) is False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 49
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    for i in range(3, n):\n        if n % i == 0:\n            return i\n",
        "num_ids": 47
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for x in range(1, n + 1):\n        total += x\n    return total\n",
        "num_ids": 37
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def helper(n, num, result):\n        if num == n:\n            return result\n        return helper(n, num + 1, result + num)\n    return helper(n, 1, 0)\n",
        "num_ids": 49
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(n):\n        sum = sum + i + 1\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(range(1, n + 1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum_total = 0\n    for i in range(n+1):\n        sum_total = sum_total + i\n    return sum_total\n",
        "num_ids": 36
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Keep track of the \"unmatched\" opening brackets using a list\n    bracket_stack = []\n    for i in range(len(brackets)):\n        bracket = brackets[i]\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            last_bracket = bracket_stack.pop()\n            if last_bracket!= \"(\":\n                return False\n    return len(bracket_stack) == 0\n",
        "num_ids": 126
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(brackets) < 2:\n        return True\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(\"(\")\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 76
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = Stack()\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.push(\")\")\n        elif bracket == \")\":\n            if stack.is_empty():\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    open_to_close = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = []\n    for bracket in brackets:\n        if bracket in open_to_close:\n            stack.append(bracket)\n        elif len(stack) == 0 or open_to_close[stack.pop()]!= bracket:\n            return False\n    return len(stack) == 0\n",
        "num_ids": 95
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    num_open = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            num_open += 1\n        elif brackets[i] == \")\":\n            num_open -= 1\n            if num_open < 0:\n                return False\n    return num_open == 0\n",
        "num_ids": 80
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for i in brackets:\n        if i == \"(\":\n            stack.append(i)\n        if i == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(\"(\")\n        else:\n            if bracket_stack:\n                bracket_stack.pop()\n            else:\n                return False\n    return not bracket_stack\n",
        "num_ids": 69
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 0\n    while i < len(brackets):\n        if brackets[i] == \"(\":\n            i += 1\n            if brackets[i] == \")\":\n                return False\n            if brackets[i] == \"(\":\n                return False\n            i += 1\n        elif brackets[i] == \")\":\n            return False\n        else:\n            i += 1\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (brackets.count(\"(\") == brackets.count(\")\"))\n",
        "num_ids": 19
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u044b \u043a\u0440\u0443\u0433\u043e\u0432\n    bracket_pairs = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            bracket_pairs.append(i)\n        if brackets[i] == \")\":\n            if len(bracket_pairs) > 0:\n                bracket_pairs.pop()\n            else:\n                return False\n    return len(bracket_pairs) == 0",
        "num_ids": 146
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    deriv = []\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    N = len(xs)\n    res = [0 for i in range(N)]\n    for i in range(1, N):\n        res[i] = i * xs[i]\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [xs[i] * i for i in range(1, len(xs))]\n",
        "num_ids": 23
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(xs) > 0, 'List must have at least one element'\n    if len(xs) == 1:\n        return [0]\n",
        "num_ids": 36
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ys = [0] * len(xs)\n    for i, x in enumerate(xs):\n        ys[i] = i + 1\n    return ys\n",
        "num_ids": 40
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    deriv = []\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n    return deriv\n",
        "num_ids": 39
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(xs) > 1\n    return [derivative_entry(xs, i) for i in range(len(xs))]\n",
        "num_ids": 34
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) < 2:\n        return []\n    return [xs[i] if i == 0 else xs[i] - xs[i-1] for i in range(1,len(xs))]\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(xs) < 2:\n        return [0]\n    return [xs[i] for i in range(1, len(xs))] + [xs[-1]]\n",
        "num_ids": 44
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fibs = [0,1,1]\n    for i in range(3,n+1):\n        fibs.append(fibs[-1] + fibs[-2] + fibs[-3])\n    return fibs[n]\n",
        "num_ids": 64
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = 0\n    b = 1\n    if n < 1:\n        return 0\n    if n == 1:\n        return a\n    if n == 2:\n        return b\n    else:\n        for i in range(n-1):\n            temp = b\n            b = a + b\n            a = temp\n        return b\n",
        "num_ids": 80
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # If n is 0, return 0.\n    if n == 0:\n        return 0\n    # If n is 1, return 0.\n    elif n == 1:\n        return 0\n    # If n is 2, return 1.\n    elif n == 2:\n        return 1\n    else:\n        # Let the three elements be the first three elements of the fibfib number sequence.\n        first = 0\n        second = 1\n        third = 1\n        # Update the n-1th element of the fibfib number sequence.\n        n_minus_one = 1\n        # Update the n-2th element of the fibfib number sequence.\n        n_minus_two = 1\n        # Update the n-3th element of the fibfib number sequence.\n        n_minus_three = 1\n        # While n is greater than or equal to 3, keep adding the three n-1, n-2, and n-3 elements to get the nth element of the fibfib number sequence.\n        while n >= 3:\n            # Update the nth element of the fibfib number sequence.\n            nth_element = first + second + third\n            # Update the n-1th element of the fibfib number sequence.\n            first = second\n            # Update the n-2th element of the fibfib number sequence.\n            second = third\n            # Update the n-3th element of the fibfib number sequence.\n            third = nth_element\n            # Update the n-1th element of the fibfib number sequence.\n            n_minus_one = nth_element\n            # Update the n-2th element of the fibfib number sequence.\n            n_minus_two = n_minus_one + n_minus_two\n            # Update the n-3th element of the fibfib number sequence.\n            n_minus_three = n_minus_two + n_minus_three\n            # Update n.\n            n -= 1\n        # Return the nth element of the fibfib number sequence.\n        return n_minus_three\n",
        "num_ids": 479
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiouy\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    for i in s[::-1]:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for x in s:\n        if x in ['a', 'e', 'i', 'o', 'u', 'y']:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for c in s:\n        if c in 'aeiou':\n            result += 1\n        elif c == 'y' and s[-1] == 'y':\n            result += 1\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = \"aeiou\"\n    total = 0\n    for char in s:\n        if char in vowels:\n            total += 1\n    if s.endswith('y'):\n        total += 1\n    return total\n",
        "num_ids": 58
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for letter in s:\n        if letter in 'aeiouy':\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num_vowels = 0\n",
        "num_ids": 10
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    if s.endswith('y'):\n        vowels_count += 1\n    return vowels_count\n",
        "num_ids": 73
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_vowels = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for letter in s:\n        if letter in vowels:\n            num_vowels += 1\n    return num_vowels\n",
        "num_ids": 66
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels_count = 0\n    for i in s:\n        if i in vowels:\n            vowels_count += 1\n    if s[-1] == \"y\":\n        vowels_count -= 1\n    return vowels_count\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowel = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i in vowel:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[len(str(x)) - shift:len(str(x))] + str(x)[:len(str(x)) - shift]\n",
        "num_ids": 62
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert 0 <= shift < len(str(x))\n    return str(x)[-shift:] + str(x)[:-shift]\n",
        "num_ids": 32
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    digit_string = str(x)\n    if shift > len(digit_string):\n        return digit_string[::-1]\n    else:\n        return digit_string[len(digit_string) - shift:] + digit_string[:len(digit_string) - shift]\n",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    digit_string = str(x)\n    if shift > len(digit_string):\n        return digit_string[::-1]\n    return digit_string[-shift:] + digit_string[:-shift]\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    digs = string(x)\n    n = len(digs)\n    if shift > n:\n        shift = shift % n\n    return digs[n-shift:] + digs[:n-shift]\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(str(abs(x)))\n    if shift > length:\n        shift = shift % length\n    x, result = abs(x), []\n    for i in range(length):\n        result.append(str((x % 10) + (10*shift) + (i+1)))\n        x //= 10\n    return ''.join(reversed(result))\n",
        "num_ids": 90
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if shift >= len(str(x)):\n        return (str(x)[::-1])\n    else:\n        return (str(x)[shift:]) + (str(x)[:shift])\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Negative shifts reverse the digits\n    if shift < 0:\n        x = -x\n        shift = -shift\n    # Find the maximum number of digits\n    max_digits = len(str(abs(x)))\n    # Loop over each digit from right to left, convert to string, and append to list\n    num_list = []\n    for i in range(max_digits):\n        digit = x % 10\n        num_list.append(str(digit))\n        x //= 10\n    # Reverse the list\n    num_list.reverse()\n    # Convert to string and return\n    return ''.join(num_list[shift:]) + ''.join(num_list[:shift])\n",
        "num_ids": 164
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    x = abs(x)\n    n = len(str(x))\n    if shift > n:\n        shift %= n\n    shifted_digits = list(str(x))\n    for i in range(shift):\n        shifted_digits.append(shifted_digits.pop(0))\n    return ''.join(shifted_digits)\n",
        "num_ids": 88
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Convert to string so we can change individual characters\n    s = str(x)\n    n = len(s)\n    # Cast shift to negative so we can use the % operator\n    shift = -shift % n\n    # Add the string backwards with the shift (we only want the final n-shift)\n    return s[n-shift:] + s[:n-shift]\n",
        "num_ids": 88
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([ord(c) for c in s.upper() if ord(c) >= 65 and ord(c) <= 90])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(ord(x) for x in s if x.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([ord(i)-64 for i in s if ord(i)>=65 and ord(i)<=90])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            n += ord(i) - 64\n    return n\n",
        "num_ids": 44
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(int(x) for x in s if x.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(map(ord,s.upper()))\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(int(chr(x)) for x in range(ord('A'), ord('Z')+1) if chr(x).isupper())\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([ord(c) - 64 for c in s if c.isupper()])\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(ord(c) - 64 for c in s.upper() if ord(c) >= 64)",
        "num_ids": 26
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for c in s:\n        if c.isalpha():\n            sum += ord(c.upper()) - 64\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # read string into 2 variables: apples and oranges\n    apples = int(s[0:s.index('apples')])\n    oranges = int(s[s.index('apples') + len('apples') + 1:])\n    # calculate the total number of fruits\n    total = apples + oranges\n    # calculate the mango fruits\n    mango = total - apples - oranges\n    # print the answer\n    print(mango)\n",
        "num_ids": 104
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    s = '5 apples and 6 oranges'\n    n = 19\n    return n - len(s)\n    \"\"\"\n    \"\"\"\n    s = '0 apples and 1 oranges'\n    n = 3\n    return n - len(s)\n    \"\"\"\n    \"\"\"\n    s = '2 apples and 3 oranges'\n    n = 100\n    return n - len(s)\n    \"\"\"\n    \"\"\"\n    s = '100 apples and 1 oranges'\n    n = 120\n    return n - len(s)\n    \"\"\"\n",
        "num_ids": 125
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    # you can use the same logic as the previous task to check if the number of the fruits in the basket is enough or not\n    if s.count(\"mango\") >= n:\n        return n\n    elif s.count(\"mango\") < n:\n        return (n - s.count(\"mango\")) - s.count(\"apples\")\n    else:\n        return 0\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def num_apples(s,n):\n        return s.count(\"apple\")*n/100\n    def num_oranges(s,n):\n        return s.count(\"orange\")*n/100\n    return num_apples(s,n) + num_oranges(s,n)\n",
        "num_ids": 73
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    apples = s.split(\" \")[0]\n    oranges = s.split(\" \")[1]\n    mangoes = s.split(\" \")[2]\n    return int(mangoes) - int(apples) - int(oranges)\n",
        "num_ids": 62
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    apples = s.split(\" \")[0]\n    oranges = s.split(\" \")[1]\n",
        "num_ids": 27
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total_apples = int(s.split(\" \")[0])\n    total_oranges = int(s.split(\" \")[1])\n    return n - total_apples - total_oranges\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    mango = n - s.count(\"apples\") - s.count(\"oranges\")\n    return mango\n    \ndef minimum_number_of_bills(n):\n    \"\"\"\n    In this task, you will be given an integer and you will need to find the minimum number of bills\n    you can make from 1 to that given number of bills.\n    For example, if the input is 10, you need to make 1,2,5,10 bills. If the input is 5, you need to make\n    1,2,5,10 bills.\n    For example, if the input is 4, you need to make 1,2,5 bills.\n    \n    You may assume that the input is a positive integer that will not exceed the years maximum number of days.\n    \"\"\"\n    total = 0\n    if n == 0:\n        return 0\n    for i in range(n//25 + 1):\n        total += (i+1)\n    if n % 25 == 0:\n        return total\n    else:\n        return total + 1\n",
        "num_ids": 238
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if s == \"0\": return 0\n    if s == \"1\": return 1\n    if n == 1: return 1\n    a,o = s.split()\n    if a == \"1\": return int(o)\n    if o == \"1\": return int(a)\n    a,o = map(int, [a,o])\n    n -= int(a+o)\n    return fruit_distribution(str(n), int(a))\n    \ndef word_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents the number of \n    times each word is repeated in the string. Return the string with the \n    word repeated the number of times, and return the new string as a \n    single space-separated word.\n    for examble:\n    word_distribution(\"word word word word\", 3) -> word3 word3 word3\n    word_distribution(\"word word word word\", 0) ->\n    word_distribution(\"word word word word\", 5) -> word5 word5 word5 word5\n    \"\"\"\n    if n == 0: return \"\"\n    if n == 1: return s\n    w = s.split()\n    return \" \".join(w * n)\n",
        "num_ids": 289
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n - sum([s.count(x) for x in (\"apples\",\"oranges\")])\n",
        "num_ids": 25
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n    res = [0, 0]\n    for i, v in enumerate(arr):\n        if v % 2 == 0 and v < res[0]:\n            res = [v, i]\n    return [res[1], res[0]]\n",
        "num_ids": 68
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    smallest_even, index = None, None\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n            if smallest_even is None or n < smallest_even:\n                smallest_even = n\n                index = i\n    return [smallest_even, index] if smallest_even is not None else []\n",
        "num_ids": 82
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    ans = []\n    for i, v in enumerate(arr):\n        if v%2 == 0 and ans == [] or v < ans[0]:\n            ans = [v, i]\n    return ans if ans else []\n",
        "num_ids": 54
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr: return []\n",
        "num_ids": 9
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return []\n    res = []\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            res = [arr[i], i]\n            break\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    d = {}\n    \n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    max_val = -1\n    max_count = 0\n    \n    for i in d:\n        if d[i] > max_count:\n            max_count = d[i]\n            max_val = i\n    \n    return max_val\n",
        "num_ids": 108
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_count = 0\n    max_num = 0\n    for num in lst:\n        if lst.count(num) > max_count:\n            max_count = lst.count(num)\n            max_num = num\n    if max_count == 0:\n        return -1\n    else:\n        return max_num\n",
        "num_ids": 82
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: complete this function\n    def binary_search(lst, target):\n        left, right = 0, len(lst) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if lst[mid] < target:\n                left = mid + 1\n            elif lst[mid] > target:\n                right = mid - 1\n            else:\n                return mid\n        return -1\n",
        "num_ids": 105
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    counts = {}\n    for num in lst:\n        if counts.get(num, False):\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_num = 0\n    max_freq = 0\n    for num in counts.keys():\n        if counts[num] >= max_freq:\n            max_num = num\n            max_freq = counts[num]\n    return max_num if max_num > 0 else -1\n",
        "num_ids": 118
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst:\n        return -1\n    result = 0\n    for i in lst:\n        if lst.count(i) > i:\n            result = i\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_freq = max(lst)\n    for i in lst:\n        if lst.count(i) >= i and lst.count(i) < max_freq:\n            max_freq = lst.count(i)\n    return max_freq\n",
        "num_ids": 68
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_freq = 0\n    max_num = 0\n    for num in lst:\n        if lst.count(num) > max_freq:\n            max_freq = lst.count(num)\n            max_num = num\n    return max_num if max_freq > 0 else -1\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    values = {}\n    for num in lst:\n        if num in values:\n            values[num] += 1\n        else:\n            values[num] = 1\n",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    dic = {}\n    for i in lst:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    \n    for i in dic:\n        if dic[i] >= i:\n            return i\n    return -1\n",
        "num_ids": 76
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = {}\n    for n in lst:\n        if n not in d:\n            d[n] = 1\n        else:\n            d[n] += 1\n    for k, v in d.iteritems():\n        if v >= k:\n            return k\n    return -1\n",
        "num_ids": 70
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst.sort()\n    res = [lst[0]]\n    for i in xrange(1, len(lst)):\n        if lst[i]!= lst[i - 1]:\n            res += [lst[i]]\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] > result[-1]:\n            result.append(lst[i])\n        elif lst[i] < result[0]:\n            result.insert(0, lst[i])\n        else:\n            k = result.index(min(result))\n            result.insert(k, lst[i])\n            result.remove(min(result))\n            result.remove(max(result))\n    return result\n",
        "num_ids": 146
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst.sort()\n    lst.reverse()\n    return lst\n",
        "num_ids": 20
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if lst == []:\n        return []\n    else:\n        min = lst[0]\n        max = lst[-1]\n        return [min] + strange_sort_list(lst[1:-1]) + [max]\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list([x for x in lst if x!= min(lst)]) + [min(lst)]\n",
        "num_ids": 80
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst2 = []\n    sorted(lst)\n    for n in lst:\n        lst2.append(n)\n        lst2.sort()\n    return lst2\n",
        "num_ids": 48
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list([x for x in lst if x!= min(lst) and x!= max(lst)])\n",
        "num_ids": 85
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst:\n        return []\n    lst.sort(reverse=True)\n    lst.sort(reverse=False)\n    return lst\n",
        "num_ids": 39
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return [min(lst), max(lst)]\n    else:\n        min_val = min(lst)\n        return [min_val] + [i for i in lst if i!= min_val] + [max(lst)]\n",
        "num_ids": 102
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n",
        "num_ids": 33
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a + b + c)/2, 2)\n",
        "num_ids": 52
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a + b < c:\n        return -1\n    if a + c < b:\n        return -1\n    if b + c < a:\n        return -1\n    return round((a * b) / 2, 2)\n",
        "num_ids": 57
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return round((a + b + c) / 2 * sqrt(abs(a * b * c / sqrt(a * a + b * b + c * c))), 2) if a + b > c and b + c > a and c + a > b else -1",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # compute the semi-perimeter\n    s = (a + b + c)/2\n    # return the area of the triangle\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n",
        "num_ids": 61
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 81
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        area = (a + b + c) * 0.5\n        return round(area, 2)\n    else:\n        return -1\n",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a >= (b + c) or b >= (a + c) or c >= (a + b):\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
        "num_ids": 102
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s-a) * (s-b) * (s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n    pass",
        "num_ids": 83
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round((a * b * c) / (float(a + b + c)), 2)\n    else:\n        return -1\n",
        "num_ids": 54
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return q[::-1] == q and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(q) <= w and q == q[::-1]\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(q)<=w and list(reversed(q))==q\n",
        "num_ids": 22
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return is_balanced(q) and sum(q) <= w\n",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    def sum_of_list(lst):\n        if not lst:\n            return 0\n        else:\n            return lst[0] + sum_of_list(lst[1:])\n    \n    def balanced(lst):\n        if not lst:\n            return True\n        elif lst[0] == lst[-1]:\n            return balanced(lst[1:-1])\n        else:\n            return False\n    \n    def is_palindrome(lst):\n        if not lst:\n            return True\n        else:\n            return lst[0] == lst[-1] and is_palindrome(lst[1:-1])\n    \n    return is_palindrome(q) and balanced(q) and sum_of_list(q) <= w\n",
        "num_ids": 195
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return is_it_balanced(q) and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if isinstance(q,list) and isinstance(w,int) and len(q) <= 1:\n        return False\n    if isinstance(q,list) and isinstance(w,int) and len(q) > 1:\n        if q == q[::-1]:\n            return sum(q) <= w\n        else:\n            return False\n    else:\n        return False\nprint(will_it_fly([1, 2], 5))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3], 5)",
        "num_ids": 154
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return is_palindromic(q) and sum(q) <= w\n    \nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 11))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([3, 2, 3], 0))\nprint(will_it_fly([3, 2, 3], 1))\nprint(will_it_fly([3, 2, 3], 2))\nprint(will_it_fly([3, 2, 3], 3))\nprint(will_it_fly([3, 2, 3], 4))\nprint(will_it_fly([3, 2, 3], 5))\nprint(will_it_fly([3, 2, 3], 6))\nprint(will_it_fly([3, 2, 3], 7))\nprint(will_it_fly([3, 2, 3], 8))\nprint(will_it_fly([3, 2, 3], 9))\nprint(will_it_fly([3, 2, 3], 10))\nprint(will_it_fly([3, 2, 3], 11))\nprint(will_it_fly([3, 2, 3], 12))\nprint(will_it_fly([3, 2, 3], 13))\nprint(will_it_fly([3, 2, 3], 14))\nprint(will_it_fly([3, 2, 3], 15))\nprint(will_it_fly([3, 2, 3], 16))\nprint(will_it_fly([3, 2, 3], 17))\nprint(will_it_fly([3, 2, 3], 18))\nprint(will_it_fly([3, 2, 3], 19))\nprint(will_it_fly([3, 2, 3], 20))\nprint(will_it_fly([3, 2, 3], 21))\nprint(will_it_fly([3, 2, 3], 22))\nprint(will_it_fly([3, 2, 3], 23))\nprint(will_it_fly([3, 2, 3], 24))\nprint(will_it_fly([3, 2, 3], 25))\nprint(will_it_fly([3, 2, 3], 26))\nprint(will_it_fly([3, 2, 3], 27))\nprint(will_it_fly([3, 2, 3], 28))\nprint(will_it_fly([3, 2, 3], 29))\nprint(will_it_fly([3, 2, 3], 30))\nprint(will_it_fly([3, 2, 3], 31))\nprint(will_it_fly([3, 2, 3], 32))\nprint(will_it_fly([3, 2, 3], 33))\nprint(will_it_fly([3, 2, 3], 34))\nprint(will_it_fly([3, 2, 3], 35))\nprint(will_it_fly([3, 2, 3], 36))\nprint(will_it_fly([3, 2, 3], 37))\nprint(will_it_fly([3, 2, 3], 38))\nprint(will_it_fly([3, 2, 3], 39))\nprint(will_it_fly([3, 2, 3], 40))\nprint(will_it_fly([3, 2, 3], 41))\nprint(will_it_fly([3, 2, 3], 42))\nprint(will_it_fly([3, 2, 3], 43))\nprint(will_it_fly([3, 2, 3], 44))\nprint(will_it_fly([3, 2, 3], 45))\nprint(will_it_fly([3, 2, 3], 46))\nprint(will_it_fly([3, 2, 3], 47))\nprint(will_it_fly([3, 2, 3], 48))\nprint(will_it_fly([3, 2, 3], 49))\nprint(will_it_fly([3, 2, 3], 50))\nprint(will_it_fly([3, 2, 3], 51))\nprint(will_it_fly([3, 2, 3], 52))\nprint(will_it_fly([3, 2, 3], 53))\nprint(will_it_fly([3, 2, 3], 54))",
        "num_ids": 1024
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(q) % 2 == 1:\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return False if q == [] or w < 0 else True if is_palindrome(q) and sum(q) <= w else False\n",
        "num_ids": 33
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr_counts = Counter(arr)\n    num_evens = sum(num for num in arr_counts if num % 2 == 0)\n    if num_evens == 0:\n        return 0\n    elif num_evens % 2 == 1:\n        return num_evens // 2 + 1\n    else:\n        return num_evens // 2\n",
        "num_ids": 87
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    return min(\n        abs(arr[i] - arr[i + 1])\n        for i in range(len(arr) - 1)\n    )\n",
        "num_ids": 46
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 1:\n        return 0\n    result = 0\n    max_diff = arr[-1] - arr[0]\n    min_diff = abs(arr[-1] - arr[0])\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n        if diff < min_diff:\n            min_diff = diff\n        result += diff\n    return result - max_diff - min_diff\n",
        "num_ids": 134
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return min(abs(arr[0] - arr[1]), abs(arr[0] - arr[1]))\n",
        "num_ids": 53
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if arr is None or len(arr) == 0:\n        return 0\n    start_val = arr[0]\n    count = 0\n    for i in range(len(arr)):\n        if start_val!= arr[i]:\n            count += 1\n            start_val = arr[i]\n    return count",
        "num_ids": 76
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    min_num_swaps = 0\n    indexes = [0] * len(arr)\n    for i, x in enumerate(arr):\n        indexes[x] = i\n",
        "num_ids": 45
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Remove items that are not unique\n    arr = set(arr)\n    arr = list(arr)\n",
        "num_ids": 26
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # an array of indices\n    # get the middle element\n    # if the mid element is equal to the one before, or equal to the one after, do nothing\n    # if the one before is equal to the one after, swap the two\n    # repeat until the array is a palindrome\n    # return the length of the array\n    if len(arr) == 1:\n        return 0\n    mid = len(arr)/2\n    # while the mid element is not equal to the one before, or equal to the one after, swap\n    while mid > 0 and arr[mid]!= arr[mid-1]:\n        arr[mid], arr[mid-1] = arr[mid-1], arr[mid]\n        mid -= 1\n    # if the middle element is equal to the one before, do nothing\n    if mid > 0 and arr[mid] == arr[mid-1]:\n        pass\n    # if the one before is equal to the one after, swap the two\n    if mid > 0 and arr[mid-1] == arr[mid+1]:\n        arr[mid], arr[mid+1] = arr[mid+1], arr[mid]\n    return len(arr)\n",
        "num_ids": 273
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in lst1:\n        count += len(i)\n    if count == len(lst2):\n        return lst1\n    elif count > len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 68
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst1[:len(lst2)]\n    else:\n        return lst2[:len(lst1)]\n",
        "num_ids": 72
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: len(x)<len(lst2), lst1))\n    \ndef find_anagrams(s1, s2):\n    '''\n    Write a function that accepts two strings and returns a list of anagrams of that string in \n    lowercase.\n    \n    An anagram is a word, phrase, or name formed by rearranging the letters of a word, \n    phrase, or name, using all the letters exactly once.\n    \n    Examples\n    find_anagrams('racer', 'crazer') \u279e ['crazer']\n    find_anagrams('laser', 'zasas') \u279e ['zasas']\n    find_anagrams('care', 'rats') \u279e ['arts', 'rat']\n    find_anagrams('abcd', 'dcba') \u279e ['abcd', 'dcba']\n    find_anagrams('laser', 'lsss') \u279e ['lsss']\n    '''\n    return list(filter(lambda x: sorted(x)==sorted(s2), sorted(s1)))\n",
        "num_ids": 268
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return lst1\n    return lst2\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst1 or not lst2:\n        return []\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    # find the max number of chars\n    mx = max(len(i) for i in lst1)\n    lst = []\n    # append the strings which have the max chars less than mx\n    for string in lst1:\n        if len(string) < mx:\n            lst.append(string)\n    # append the rest strings which are greater than the max chars\n    for string in lst1:\n        if len(string) > mx:\n            lst.append(string)\n    return lst\n",
        "num_ids": 173
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    elif len(lst1) == len(lst2):\n        return lst1 if lst1 < lst2 else lst2\n    return [x for x in lst1 if len(x) < len(lst2) and x < lst2]\n",
        "num_ids": 97
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        return [item for item in lst1 if len(item)<=len(lst2)]\n    elif len(lst1) < len(lst2):\n        return [item for item in lst2 if len(item)<=len(lst1)]\n    else:\n        return lst1\n",
        "num_ids": 92
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return list(filter(lambda x: len(x) <= len(lst2), lst1))\n    elif len(lst2) > len(lst1):\n        return list(filter(lambda x: len(x) <= len(lst1), lst2))\n    else:\n        return lst1\n",
        "num_ids": 94
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_prime(a) and is_prime(a/2) and is_prime(a/3)\n",
        "num_ids": 28
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(2,100):\n        if a % i == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(2,100):\n        if not is_prime(i) or not is_prime(a/i):\n            return False\n        if a/i == i*(i-1)*(i-2):\n            return True\n    return False\n    # time complexity: O(n^2)\n",
        "num_ids": 75
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    multiply = []\n    for i in range(2, 100):\n        if i % 2 == 0 or i % 3 == 0:\n            continue\n        multiply.append(i)\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    list_of_primes = primes(a)\n    for i in range(0, len(list_of_primes)):\n        for j in range(0, len(list_of_primes)):\n            for k in range(0, len(list_of_primes)):\n                if list_of_primes[i] * list_of_primes[j] * list_of_primes[k] == a:\n                    return True\n    return False\n",
        "num_ids": 115
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a < 100:\n        return is_prime(a) and is_prime(a * 2) and is_prime(a * 3)\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a_list = [i for i in range(3, 101) if is_prime(i)]\n    for i in a_list:\n        if a % i == 0:\n            print(i)\n            if a / i not in a_list:\n                return False\n            if i * i > a:\n                return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return is_prime(int(a / 3)) and is_prime(int(a / 2)) and is_prime(int(a / 5))\n",
        "num_ids": 38
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(2, 100):\n        if not is_prime(i) and not is_prime(a / i):\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == (n**int(log(x,n)))\n",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == 1:\n        return True\n    elif x == n:\n        return True\n    elif x > n:\n        return False\n    else:\n        return (x == n ** (x / n))\n",
        "num_ids": 53
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == n**int(log(x, n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x==n**int(log(x,n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n > 0:\n        return x ** (1.0 / n) == int(x ** (1.0 / n))\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x%n!= 0:\n        return False\n    return is_simple_power(x/n, n)",
        "num_ids": 51
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return True\n    return n**int(x)==x\n",
        "num_ids": 23
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n==1:\n        return x==1\n    if n==2:\n        return x%2==0\n    if n==3:\n        return x%3==0\n    if n%2==0:\n        return x%n==0\n    return False",
        "num_ids": 64
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n**int(log10(x)) == ",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**3 == a",
        "num_ids": 8
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a ** 3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    return a**(1/3.) == int(a**(1/3.))\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return int(a) ** 3 == a\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return a ** 3 == int(a ** 3)\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # use a**3\n    return a**3 == a\n",
        "num_ids": 16
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if pow(a, 3) == pow(a, 1, 3):\n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a == int(a*a*a)\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a**(1/3))%1 == 0\n",
        "num_ids": 16
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a<0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        return a**3 == abs(a)\n",
        "num_ids": 39
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_prime(num):\n        \"\"\"Returns True if num is a prime number, otherwise returns False.\n        \"\"\"\n        for i in range(2,int(num**0.5)+1):\n            if num%i==0:\n                return False\n        return True\n    if num=='':\n        return 0\n    return sum(map(is_prime, map(int,num)))\n",
        "num_ids": 93
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(filter(is_prime, [int(x, 16) for x in re.findall('..', num)]))\n",
        "num_ids": 32
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from collections import Counter\n",
        "num_ids": 7
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if num == '':\n        return 0\n    if is_prime(int(num, 16)) and int(num, 16) > 1:\n        return 1 + hex_key(num[1:])\n    return hex_key(num[1:])\n",
        "num_ids": 61
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int(num,16)\n",
        "num_ids": 10
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    number = int(num, 16)\n    counter = 0\n    for i in xrange(1, number):\n        if number % i == 0:\n            counter += 1\n    if counter == 1:\n        return 1\n    elif counter == 2:\n        return 2\n    else:\n        return counter\n",
        "num_ids": 73
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    hex_numbers = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F']\n    if num == '':\n        return 0\n    for x in hex_numbers:\n        if num.startswith(x):\n            if is_prime(int(num[1:],16)):\n                count += 1\n            else:\n                continue\n    return count\n",
        "num_ids": 111
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # YOUR CODE HERE\n    # A:\n    a = hex_digit_count(num[:1])\n    # B:\n    b = hex_digit_count(num[1:])\n    # C:\n    c = hex_digit_count(num[2:])\n    # D:\n    d = hex_digit_count(num[3:])\n    # E:\n    e = hex_digit_count(num[4:])\n    # F:\n    f = hex_digit_count(num[5:])\n    return a + b + c + d + e + f\n",
        "num_ids": 141
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    def check_hex(num):\n        if len(num)!= 2:\n            return False\n        if num[0] not in \"ABCDEF\":\n            return False\n        if num[1] not in \"0123456789\":\n            return False\n        if int(num[1]) < 0 or int(num[1]) > 7:\n            return False\n        return True\n    def count_hex(num):\n        if check_hex(num):\n            if is_prime(int(num[1])):\n                return 1\n            else:\n                return 0\n        else:\n            return 0\n    if not num:\n        return 0\n    return count_hex(num)\n    ",
        "num_ids": 250
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import math\n    n = int(num, 16)\n    res = 0\n    while n:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        elif n % 5 == 0:\n            n //= 5\n        elif n % 7 == 0:\n            n //= 7\n        elif n % 11 == 0:\n            n //= 11\n        elif n % 13 == 0:\n            n //= 13\n        else:\n            res += 1\n            n -= 1\n    return res",
        "num_ids": 137
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bin_string = \"\"\n    while decimal!= 0:\n        bin_string += str(decimal % 2)\n        decimal = decimal // 2\n    # Add the 'db' characters at the beginning and at the end.\n    if len(bin_string) == 0:\n        bin_string = 'db'\n    elif len(bin_string) == 1:\n        bin_string = 'db0' + bin_string\n    else:\n        bin_string = 'db' + bin_string + 'db'\n    return bin_string\n",
        "num_ids": 129
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # initialize the string to \"\"\n    binary_number = \"\"\n",
        "num_ids": 16
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    decimal_to_binary_helper(decimal, 0)\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary = \"\"\n    binary = \"\".join([binary, \"db\"])\n    while decimal > 1:\n        if decimal % 2 == 0:\n            binary = \"0\" + binary\n        else:\n            binary = \"1\" + binary\n        decimal = int(decimal / 2)\n    binary = \"1\" + binary\n    binary = \"\".join([binary, \"db\"])\n    return binary\n",
        "num_ids": 97
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n",
        "num_ids": 46
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    binary = \"\"\n    while decimal!= 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal / 2\n    binary = \"db\" + binary\n    return binary\n",
        "num_ids": 48
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bin_str = ''\n    while decimal > 0:\n        if decimal % 2 == 0:\n            bin_str += '0'\n        else:\n            bin_str += '1'\n        decimal = decimal // 2\n    bin_str = 'db' + bin_str + 'db'\n    return bin_str\n",
        "num_ids": 77
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    output = []\n    if decimal == 0:\n        return \"db0\"\n    while decimal > 0:\n        output.append(str(decimal % 2))\n        decimal = decimal // 2\n    output.reverse()\n    return \"db\" + \"\".join(output) + \"db\"\n",
        "num_ids": 71
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bit_string = ''\n    counter = 0\n    while decimal!= 0:\n        counter += 1\n        bit_string = str(decimal % 2) + bit_string\n        decimal = decimal // 2\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return s[0] == s[1] == s[2]\n    elif len(s) == 4:\n        return s[0] == s[3] == s[2] == s[1]\n    else:\n        for i in xrange(len(s) - 3):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n",
        "num_ids": 124
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def _is_happy(string):\n        if len(string) < 3:\n            return False\n        return len(set(string)) == len(string)\n",
        "num_ids": 39
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s) - 2))) == 1\n",
        "num_ids": 37
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3 and len(set(s)) == 1:\n        return True\n    return is_happy(s[1:]) if is_happy(s[3:]) and s[0]!= s[1] and s[0]!= s[2] else False\n",
        "num_ids": 84
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = s.lower()\n    s_len = len(s)\n",
        "num_ids": 19
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(s) - 1:\n        if s[i] == s[i + 1]:\n            return False\n        i += 3\n    if i < len(s) - 1:\n        return False\n    return True\n",
        "num_ids": 61
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_s = s\n    last_s = s\n    while True:\n        new_s = get_next_string(new_s)\n        if new_s == last_s:\n            break\n        last_s = new_s\n    return len(new_s) >= 3\n",
        "num_ids": 70
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(s)-3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s)<3:\n        return False\n    else:\n        for i in range(0,len(s)-3,3):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in grades:\n        if i >= 4.0:\n            result.append('A+')\n        elif i >= 3.7:\n            result.append('A')\n        elif i >= 3.3:\n            result.append('A-')\n        elif i >= 3.0:\n            result.append('B+')\n        elif i >= 2.7:\n            result.append('B')\n        elif i >= 2.3:\n            result.append('B-')\n        elif i >= 2.0:\n            result.append('C+')\n        elif i >= 1.7:\n            result.append('C')\n        elif i >= 1.3:\n            result.append('C-')\n        elif i >= 1.0:\n            result.append('D+')\n        elif i >= 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result\n",
        "num_ids": 234
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n",
        "num_ids": 282
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code goes here\n    grades_dict = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n    return [grades_dict[grade] for grade in grades]\n",
        "num_ids": 148
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "num_ids": 51
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    grades = [float(x) for x in grades]\n    grades = sorted(grades)\n    grades = [str(grade) for grade in grades]\n    return grades\n",
        "num_ids": 41
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    gpa_to_letter = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"F\"]\n    grades.sort()\n    result = []\n    for i in range(len(grades)):\n        result.append(gpa_to_letter[grades[i] * 2])\n    return result\n",
        "num_ids": 107
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    grades = grades[:]\n    grades = [float(grades[i]) for i in range(len(grades))]\n    \n    letter_grades = []\n    for i in range(len(grades)):\n        if grades[i] < 0:\n            letter_grades.append('E')\n        elif grades[i] > 4.0:\n            letter_grades.append('D-')\n        elif grades[i] > 3.7:\n            letter_grades.append('C-')\n        elif grades[i] > 3.3:\n            letter_grades.append('C')\n        elif grades[i] > 3.0:\n            letter_grades.append('B-')\n        elif grades[i] > 2.7:\n            letter_grades.append('B')\n        elif grades[i] > 2.3:\n            letter_grades.append('A-')\n        elif grades[i] > 2.0:\n            letter_grades.append('A')\n        elif grades[i] > 1.7:\n            letter_grades.append('D+')\n        elif grades[i] > 1.3:\n            letter_grades.append('C+')\n        elif grades[i] > 1.0:\n            letter_grades.append('B+')\n        elif grades[i] > 0.7:\n            letter_grades.append('B')\n        elif grades[i] > 0.0:\n            letter_grades.append('A')\n        else:\n            letter_grades.append('E')\n",
        "num_ids": 369
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    grades = list(grades)\n    numerical_grades = []\n    for i in grades:\n        if i >= 4.0:\n            numerical_grades.append('A+')\n        elif i >= 3.7:\n            numerical_grades.append('A')\n        elif i >= 3.3:\n            numerical_grades.append('A-')\n        elif i >= 3.0:\n            numerical_grades.append('B+')\n        elif i >= 2.7:\n            numerical_grades.append('B')\n        elif i >= 2.3:\n            numerical_grades.append('B-')\n        elif i >= 2.0:\n            numerical_grades.append('C+')\n        elif i >= 1.7:\n            numerical_grades.append('C')\n        elif i >= 1.3:\n            numerical_grades.append('C-')\n        elif i >= 1.0:\n            numerical_grades.append('D+')\n        elif i >= 0.7:\n            numerical_grades.append('D')\n        elif i >= 0.0:\n            numerical_grades.append('D-')\n        else:\n            numerical_grades.append('E')\n    return numerical_grades\n",
        "num_ids": 318
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code goes here\n    # Remeber to convert GPA to letter grade\n    return []\n",
        "num_ids": 24
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n        return True\n",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n    return True if count == 2 else False\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # iterate through the string\n    # store the length of the string\n    # iterate through the string again, stopping at the length of the string\n    # if the string length is not divisible by the length of the string\n    # return False\n    # otherwise return True\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(string)==1:\n        return False\n    if len(string)==2:\n        return True\n    if len(string)==3:\n        if string[1]==string[2]:\n            return False\n        else:\n            return True\n    for x in range(1,len(string)-1):\n        if (len(string)%x)==0:\n            if string[x]==string[len(string)-x]:\n                return False\n    return True\n    \ndef primes_below(n):\n    \"\"\"Write a function that returns the list of all primes below n.\n    Examples\n    primes_below(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    #return list(filter(lambda x: x<n, sieve(n)))\n    return list(filter(prime_length,range(2,n)))\n",
        "num_ids": 248
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(string)\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num = len(string)\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return True\n    for i in range(2, len(string)):\n        if (len(string) % i == 0):\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string) % 2 == 0\n",
        "num_ids": 12
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for char in string:\n        count += 1\n    if count % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 39
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = len(string)\n    if s == 1:\n        return False\n    for i in range(2, s):\n        if s % i == 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in xrange(1, 10**(n-1)):\n        if (i // 10**(n-1)) % 10 == 1 or i % 10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n==1:\n        return 1\n    if n==2:\n        return 3\n    n_list = [1]\n    for i in range(2,n):\n        n_list.append(n_list[-1]+i*10)\n    return sum(n_list)\n",
        "num_ids": 71
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 10\n    if n == 2:\n        return 22\n    return 42\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Count the number of integers in the interval [1, n] that begin with 1 or\n    # end with 1.\n    if n == 1:\n        return 1\n    # For each i in [1, n], a number that begins with 1 is only valid if its\n    # last digit is 1.\n    count = 0\n    for i in range(1, n + 1):\n        if i < 10:\n            if i == 1:\n                count += 1\n            elif i % 10 == 1:\n                count += 1\n        else:\n            num = i % 10\n            if num == 1:\n                count += 1\n            elif num == 0:\n                if i > 9:\n                    # Only one way to get to an n-digit number with no 0s\n                    count += 1\n            else:\n                # If the last digit is not 0, then all the other digits\n                # can't be 0, so we don't care about that number\n                continue\n    return count\n",
        "num_ids": 227
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    start = 1\n    end = 1\n    ans = 0\n",
        "num_ids": 16
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 3\n    elif n == 7:\n        return 3\n    elif n == 8:\n        return 3\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 3\n    elif n == 12:\n        return 2\n    else:\n        raise ValueError\n",
        "num_ids": 153
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + (10 ** (n - 1) - 1) + ends_one_starts(n - 1)\n",
        "num_ids": 65
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counter = 0\n    for x in xrange(1, 10**(n - 1)):\n        if x % 10 == 1:\n            counter += 1\n        if x % 10 == 9:\n            counter += 1\n    return counter\n",
        "num_ids": 56
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # is the last digit 1?\n    if n % 10 == 1:\n        return 1\n    return 0\n",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for digit in str(N):\n        total += int(digit)\n    return str(total)\n",
        "num_ids": 30
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return str(bin(N)[2:])",
        "num_ids": 12
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    result = \"\"\n    for i in range(10):\n        result += str(N % 2)\n        N /= 2\n    return result[::-1]",
        "num_ids": 65
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return bin(N).replace(\"0b\", \"\")\n",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return str(bin(N)[2:])\n",
        "num_ids": 13
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert isinstance(N, int), 'Please provide a positive integer'\n    assert N >= 0, 'Please provide a positive integer'\n    assert N <= 10000, 'Please provide a positive integer'\n    \n    bin_num = ''\n    while N:\n        bin_num = str(N % 2) + bin_num\n        N //= 2\n    return bin_num\n",
        "num_ids": 88
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def bin_sum(N):\n        \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n        \n        Example\n            For N = 1000, the sum of digits will be 1 the output should be \"1\".\n            For N = 150, the sum of digits will be 6 the output should be \"110\".\n            For N = 147, the sum of digits will be 12 the output should be \"1100\".\n        \n        Variables:\n            @N integer\n                Constraints: 0 \u2264 N \u2264 10000.\n        Output:\n             a string of binary number\n        \"\"\"\n        sum_of_digits = 0\n        while N > 0:\n            sum_of_digits += N % 2\n            N = N // 2\n        return sum_of_digits\n    \n    # Given a positive integer N, return the total sum of its digits in binary.\n    \n    # Variable:\n    # @N integer\n    #     Constraints: 0 \u2264 N \u2264 10000.\n    # Output:\n    # a string of binary number\n    \n    # Example:\n    # Given N = 1000, the sum of digits will be 1 the output should be \"1\".\n    # Given N = 150, the sum of digits will be 6 the output should be \"110\".\n    # Given N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    # Hint: Use // operator for integer division.\n    \n    return bin_sum(N)",
        "num_ids": 339
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = \"\"\n    while N > 0:\n        result = str(N % 2) + result\n        N = N // 2\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return str(sum(int(i) for i in str(N)))",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(lst[0::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    index = 0\n    while index < len(lst) and index % 2 == 0:\n        lst[index] += lst[index+1]\n        index += 2\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_lst = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_lst.append(lst[i])\n",
        "num_ids": 45
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    index = 0\n    addition = 0\n    while index < len(lst):\n        if lst[index] % 2 == 0:\n            addition += lst[index]\n        index += 2\n    return addition",
        "num_ids": 53
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    if len(lst) == 1:\n        return lst[0]\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(0,len(lst),2)])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    newlist = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            newlist.append(lst[i])\n    return newlist\n",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    answer = 0\n    for index in range(0, len(lst), 2):\n        answer += lst[index]\n    return answer\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] += 1\n",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    words = s.split()\n    new_words = []\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    words = s.split(' ')\n    for word in words:\n        for c in word:\n            result += (chr(ord(c)-1))\n        result +=''\n    return result[:-1]",
        "num_ids": 56
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    return \" \".join(sorted(s.split()))",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join(sorted(s.split(' '), key=lambda w: w.strip()))\n",
        "num_ids": 26
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def reverse(s):\n        return s[::-1]\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # return s.replace(' ', '')\n    # return''.join([s[i] for i in range(len(s))])\n    # return''.join([chr(ord(s[i]) - 1) for i in range(len(s))])\n    # return ''.join(sorted(s))\n",
        "num_ids": 75
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    words = s.split(' ')\n    for i in range(len(words)):\n        words[i] = ''.join(sorted(words[i]))\n    \n    return''.join(words)\n",
        "num_ids": 54
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(' '), key=lambda x: sorted(x)))\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: sum(ord(c) for c in x)))\n",
        "num_ids": 30
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return \" \".join(sorted(s.split(\" \")))\n",
        "num_ids": 19
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res, key = lambda x: (x[0], -x[1]))\n",
        "num_ids": 80
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rows, columns = len(lst), len(lst[0])\n    row = [i for i in range(rows)]\n    coordinates = []\n    \n    for i in range(rows):\n        for j in range(columns):\n            if lst[i][j] == x:\n                coordinates.append((row[i], j))\n    \n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n",
        "num_ids": 114
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # I think this is a good example of what python lambda\n    # does and I don't like lambda, because it seems to be \n    # restricted to one line and not used with multiple lines\n    # and this is not a big deal - but it is not a big deal if \n    # you like to know the right answer.\n    # return sorted([(i, j) for i, row in enumerate(lst)\n    #        for j, val in enumerate(row) if val == x],\n    #        key=lambda tup: (tup[0], -tup[1]))\n    return sorted([(i, j) for i, row in enumerate(lst)\n            for j, val in enumerate(row) if val == x],\n            key=lambda tup: (tup[0], -tup[1]))\n    \n    \n    # return sorted([(i, j) for i, row in enumerate(lst)\n    #         for j, val in enumerate(row) if val == x], key=lambda tup: (tup[1], tup[0]))\n    \n    \n    # Alternatively:\n    # return sorted([(i, j) for i, row in enumerate(lst)\n    #         for j, val in enumerate(row) if val == x], key=lambda tup: (tup[1], tup[0]))\n    \n    \n    # sorted_lst = sorted(lst, key=lambda x:x[1])\n    # return [(i,j) for i, lst in enumerate(sorted_lst) for j, val in enumerate(lst) if val == x]\n    \n    # Alternatively, sorting by key - but not in descending order\n    # return sorted([(i, j) for i, row in enumerate(lst)\n    #         for j, val in enumerate(row) if val == x],\n    #         key=lambda tup: (tup[1], tup[0]))\n    \n    \n    # Alternatively:\n    # return sorted([(i, j) for i, row in enumerate(lst)\n    #         for j, val in enumerate(row) if val == x], key=lambda tup: (tup[1], tup[0]))\n",
        "num_ids": 545
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(lst, key=lambda y: y[x])\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    def get_row_helper(lst, x, r):\n        if not lst:\n            return []\n        if not lst[0]:\n            return []\n        res = []\n        for i in range(len(lst[0])):\n            if lst[0][i] == x:\n                res.append((r, i))\n        return res + get_row_helper(lst[1:], x, r + 1)\n",
        "num_ids": 111
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    row_count = len(lst)\n    if row_count == 0:\n        return []\n    \n    col_count = len(lst[0])\n    if col_count == 0:\n        return []\n    \n    # initalize empty result\n    res = []\n    \n    # iterate over rows\n    for row in range(row_count):\n        # iterate over cols\n        for col in range(col_count):\n            if lst[row][col] == x:\n                res.append((row, col))\n                break\n    \n    # sort rows by columns\n    # sort cols by rows\n    res = sorted(res, key=lambda x: (x[0], -x[1]))\n    \n    return res\n    \n    \nif __name__ == \"__main__\":\n    print(get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1))",
        "num_ids": 254
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(enumerate(lst), key=lambda x: x[1])\n    \n    \ndef get_row_sparse(lst, x):\n    \"\"\"\n    Same function as above, but returns list of tuples,\n    where each tuple is a coordinate - (row, columns),\n    sorted in ascending order by rows in rows.\n    \n    Example:\n    get_row_sparse([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row_sparse([], 1) == []\n    get_row_sparse([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return sorted(enumerate(lst), key=lambda x: x[0])",
        "num_ids": 241
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    def get_row_columns(lst):\n        row_columns = []\n        for row in lst:\n            columns = row\n            row_columns.append(columns)\n        return row_columns\n    def get_min_max_columns(columns):\n        min_columns = len(columns[0])\n        max_columns = 0\n        for columns in columns:\n            if len(columns) > max_columns:\n                max_columns = len(columns)\n        return min_columns, max_columns\n",
        "num_ids": 143
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        if lst[0][0] == x:\n            return [(0, 0)]\n        else:\n            return []\n    return sorted([(x, y) for y, row in enumerate(lst) for x, val in enumerate(row) if val == x], key = lambda x: x[1], reverse = True)",
        "num_ids": 104
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return sorted(array)\n    if len(array) <= 1:\n        return array\n    half = int(len(array) / 2)\n    left = sort_array(array[:half])\n    right = sort_array(array[half:])\n    return merge_sorted(left, right)\n",
        "num_ids": 74
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return array if sum(array[0], array[-1]) % 2 == 0 else sorted(array, reverse=True)",
        "num_ids": 29
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n    if array is None or len(array) == 0:\n        return []\n    else:\n        sum_array = sum(array)\n        if sum_array % 2 == 0:\n            return sorted(array, reverse=False)\n        else:\n            return sorted(array, reverse=True)\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not array: return []\n",
        "num_ids": 9
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not array:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def _sort_array(array):\n        if len(array) <= 1:\n            return array\n",
        "num_ids": 25
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # 1st solution\n    # O(n^2) time, O(1) space\n    # if sum(array[i], array[-1-i]) % 2:\n    #     return sorted(array, reverse=True)\n    # else:\n    #     return sorted(array)\n",
        "num_ids": 70
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def sum_index_pair(a, b):\n        return a + b if a + b < len(a) else a + b - len(a)\n",
        "num_ids": 38
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    array_copy = array[:]\n    if sum(array_copy[0], array_copy[-1]) % 2 == 0:\n        return sorted(array_copy, reverse=True)\n    return sorted(array_copy)\n",
        "num_ids": 55
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Only use a subset of the alphabet for the encryption.\n    #   Note: you should not change the alphabet used in your solution.\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    newAlphabet = alphabet[3:] + alphabet[:3]\n    # Encrypt is the same as decrypt except for the numbers.\n    def encrypt(s):\n        if s.isalpha():\n            return newAlphabet[alphabet.index(s.lower()) * 2]\n        else:\n            return s\n    return encrypt(s)\n",
        "num_ids": 133
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifts = {alphabet[i]: alphabet[i + 2] for i in range(0, 26, 2)}\n    return ''.join(shifts[x] if x in shifts.keys() else x for x in s)\n",
        "num_ids": 76
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    newAlphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    s = s.lower()\n    def encrypt(s):\n        return ''.join([newAlphabet[newAlphabet.index(letter) - 2] for letter in s])\n",
        "num_ids": 125
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s[1:] + s[0]\n",
        "num_ids": 13
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join([ALPHABET[(ALPHABET.index(x) + 2) % len(ALPHABET)] for x in s])\n",
        "num_ids": 39
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    key = ''\n    #gather key from user\n    for i in range(len(alphabet)):\n        key += raw_input(\"Please enter letter to use for encryption: \")\n    #encrypt\n    string = ''\n    for i in s:\n        if i.isalpha():\n            string += alphabet[(alphabet.index(i) + int(key[alphabet.index(i)]))%len(alphabet)]\n        else:\n            string += i\n    return string\n",
        "num_ids": 137
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    a = ord('a')\n    b = ord('b')\n    alphabet = [chr(a+(ord(i) - b - 2)%26) for i in alphabet]\n    return ''.join([alphabet[ord(i)-97] for i in s])\n",
        "num_ids": 146
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    global alphabet\n    newAlphabet = alphabet[3:] + alphabet[:3]\n    newAlphabet = alphabet[2:] + alphabet[:2]\n    return ''.join([newAlphabet[alphabet.index(s[i])] for i in range(len(s))])\n",
        "num_ids": 68
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(\n        alpha_rotate_char(c) for c in s\n        )\n",
        "num_ids": 26
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[len(alphabet)//2:] + alphabet[:len(alphabet)//2]\n    new_alphabet = new_alphabet[-1] + new_alphabet[:-1]\n    return new_alphabet[alphabet.index(s)]\n    \nprint(encrypt('hi'))\nprint(encrypt('asdfghjkl'))\nprint(encrypt('gf'))\nprint(encrypt('et'))\n",
        "num_ids": 133
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None if len(lst) < 2 else sorted(lst)[1]",
        "num_ids": 20
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    return lst[1] if len(lst) > 1 else None\n    \n    \n    \n    ",
        "num_ids": 36
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 1:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    \n    return sorted(lst)[1]",
        "num_ids": 29
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    min_value = min(lst)\n    for i in lst:\n        if i < min_value:\n            min_value = i\n    return min_value\n",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_list = sorted(lst)\n    return sorted_list[1] if len(lst) > 1 else None\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    return sorted_lst[1]",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    smallest = lst[0]\n    if len(lst) <= 1:\n        return None\n    for i in lst:\n        if i <= smallest:\n            smallest = i\n    if smallest == lst[0]:\n        return None\n    for i in lst:\n        if i < smallest and i > lst[0]:\n            return i\n    return None\n    \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    smallest = lst[0]\n    for i in lst:\n        if i <= smallest:\n            smallest = i\n    if smallest == lst[0]:\n        return None\n    for i in lst:\n        if i < smallest and i > lst[0]:\n            return i\n    return None\n    \n",
        "num_ids": 291
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # The sum of the characters in the string\n    # count = sum(len(w) for w in S.split('.') + S.split('?') + S.split('!'))\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return S.count('I')",
        "num_ids": 9
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(S) <= 1:\n        return 0\n    else:\n        if S[0] == \"I\":\n            return 1 + is_bored(S[1:])\n        elif S[0] in ['.', '?', '!']:\n            return is_bored(S[1:])\n        else:\n            return is_bored(S[1:])\n",
        "num_ids": 93
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([s for s in S.split() if s.startswith('I')])",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for sentence in S.split():\n        if sentence.startswith(\"I\"):\n            total += 1\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in S.split(' '):\n        if i.startswith('I'):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([word[0] == 'I' for word in S.split(' ')])\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for s in S.split() if s == \"I\")",
        "num_ids": 19
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len([s for s in S.split() if s.lower().startswith('i')])\n",
        "num_ids": 26
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for word in S.split():\n        if word == \"I\":\n            count += 1\n    return count",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (x == (y + z) and type(x) == int)\n    \n",
        "num_ids": 22
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return bool(x==sum(y,z)) and type(x) is int and type(y) is int and type(z) is int\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return bool(int(x) == int(y) + int(z)) and bool(int(x) == int(y) + int(z))\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ((x == y + z) or (y == x + z) or (z == x + y)) and (type(x) == int or type(y) == int or type(z) == int)\n",
        "num_ids": 50
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if (type(x) is int and type(y) is int and type(z) is int):\n        if x == (y+z):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if x == sum(z,y) and y%1==0 and z%1==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # Your code here\n    return None\n",
        "num_ids": 13
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if(type(x) == int and type(y) == int and type(z) == int):\n        if (x == y+z or y == x+z or z == x+y):\n            return True\n        return False\n    return None\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if (x == y + z or x == z + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # First create a set of the alphabet, vowels, and non-vowels\n    # characters\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    vowels = set('aeiou')\n    non_vowels = set('abcdefghijklmnopqrstuvwxyz')\n    \n    # Then split the message into a list of characters, and create\n    # a set of the vowels in the message\n    message_chars = list(message)\n    vowels_in_message = set(message_chars).intersection(vowels)\n    \n    # Then create a new list of the message characters, but with\n    # all non-vowels replaced with the letter that appears 2 places\n    # ahead of that vowel in the alphabet\n    message_chars_with_consonants = [\n        char if char in vowels else chr(ord(char) + 2)\n        for char in message_chars\n    ]\n    \n    # Then join the message characters with the vowels replaced with\n    # the correct letters\n    message_with_vowels_replaced = ''.join(\n        char if char in vowels else chr(ord(char) - 2)\n        for char in message_chars_with_consonants\n    )\n    \n    return message_with_vowels_replaced\n",
        "num_ids": 328
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    dictionary = {}\n    for x in range(0,len(message)):\n        dictionary[message[x]] = message[x].swapcase()\n    return ''.join(map(lambda x: dictionary[x], message))\n",
        "num_ids": 57
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Write your code here.\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    def replace_vowels(msg):\n        for index, char in enumerate(msg):\n            if char in vowels:\n                msg = msg[:index] + msg[index].lower() + msg[index+1:]\n        return msg\n",
        "num_ids": 92
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = ''\n    for x in message:\n        if x.isalpha():\n            if x.isupper():\n                s += chr(ord(x) + 2)\n            else:\n                s += chr(ord(x) + 2).lower()\n        else:\n            s += x\n    return s\n",
        "num_ids": 76
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    message = message.upper()\n    new_message = \"\"\n    for c in message:\n        if c in \"AEIOU\":\n            new_message += chr(ord(c) + 2)\n        else:\n            new_message += c\n    return new_message\n    \n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #make a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    #loop through the message, and replace vowels with the letter\n    #that appears 2 places ahead of it in the english alphabet\n    #for each vowel, just loop through the alphabet, and find \n    #the letter that is 2 places ahead of it\n    encoded = []\n    for letter in message:\n        if letter in vowels:\n            #find the letter 2 places ahead\n            letter_2_ahead = chr((ord(letter) + 2) % 128)\n            #add it to the end of the list\n            encoded.append(letter_2_ahead)\n        else:\n            #add the same letter to the end of the list\n            encoded.append(letter)\n    #return the encoded message\n    return ''.join(encoded)\n",
        "num_ids": 221
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    pass",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def change_case(word):\n        '''\n        Return a string with the same length as the given word, \n        with each letter changed to the case of the character that \n        represents the given letter in the english alphabet.\n        '''\n        return ''.join(c.upper() if c.upper() in 'AEIOU' else c.lower()\n                for c in word)\n    return ''.join(change_case(word) for word in message)\n",
        "num_ids": 111
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return message.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return message.translate(None, \"aeiouAEIOU\")\n",
        "num_ids": 21
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = []\n    for n in lst:\n        while n > 0:\n            res.append(n % 10)\n            n //= 10\n        if res[0] == 0 or res[0] == 1:\n            res = res[1:]\n        if all(x > 0 and x <= 9 for x in res):\n            return sum(int(x) for x in res)\n        else:\n            res = []\n    return 0\n",
        "num_ids": 106
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # best to do it without any sorting:\n    def getDigits(x):\n        while x > 0:\n            x, d = divmod(x, 10)\n            yield d\n",
        "num_ids": 46
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    import math\n    lst.sort()\n    maximum=lst[-1]\n    for i in lst:\n        if i!=0 and i%2==0 and i!=2 and i!=maximum:\n            maximum=i\n    for i in range(len(str(maximum))):\n        if math.factorial(maximum)!=0:\n            return sum([int(x) for x in str(maximum)])\n        else:\n            return 0",
        "num_ids": 116
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(map(int,str(max(lst))))",
        "num_ids": 16
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    for x in lst:\n        n = x\n        while n > 0:\n            if isPrime(n):\n                res += n % 10\n                break\n            n /= 10\n    return res\n",
        "num_ids": 54
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_prime = 0\n    for item in lst:\n        while item:\n            max_prime = max(item % 10, max_prime)\n            item //= 10\n",
        "num_ids": 43
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    primes = [1]*(10**5+1)\n    primes[0] = 0\n    primes[1] = 0\n",
        "num_ids": 37
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = [int(i) for i in lst]\n    lst.sort()\n    for i in lst:\n        if is_prime(i):\n            print i\n            break\n    return sum([int(i) for i in str(i)])\n",
        "num_ids": 65
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_prime_value = 0\n    result = 0\n    for item in lst:\n        current = item\n        while current!= 1:\n            current = current / 10\n            if isPrime(current):\n                if current > max_prime_value:\n                    max_prime_value = current\n        result += max_prime_value\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = sorted(lst, reverse=True)\n    lst = [str(i) for i in lst]\n    def find_prime(x):\n        for i in range(2, int(x[0]) + 1):\n            if x[0] % i == 0:\n                return False\n        return True\n    # p = []\n    # for i in lst:\n    #     if len(i) > 1:\n    #         if i[0] == '9' and len(i) > 1:\n    #             p.append(i[1:])\n    #         else:\n    #             p.append(i)\n    # print p\n    # p = [int(i) for i in p]\n    # print max(p)\n    # print sum([int(i) for i in str(max(p))])\n    # return sum([int(i) for i in str(max(p))])\n    return sum([int(i) for i in lst if find_prime(i)])\n",
        "num_ids": 245
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return True\n    else:\n        for key in dict.keys():\n            if key.isupper():\n                return False\n            elif key.islower():\n                return True\n            else:\n                return False\n",
        "num_ids": 61
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(dict) < 1:\n        return False\n    for key in dict:\n        if key.islower() == True:\n            if key.isupper() == True:\n                return False\n        elif key.isupper() == True:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return False\n    for k, v in dict.items():\n        if isinstance(k, str) and isinstance(v, str):\n            if k.lower()!= k.upper():\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not dict:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return True\n    return all(isinstance(k, str) for k in dict.keys()) and all(isinstance(v, str) for v in dict.values())\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n        if isinstance(key, str):\n            if not key.islower():\n                return False\n        if isinstance(value, str):\n            if not value.islower():\n                return False\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n    for k in dict:\n        if isinstance(k, str):\n            if not k.islower() and not k.isupper():\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n    if not dict.keys():\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n    for key in dict.keys():\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if dict == {}:\n        return True\n    for key in dict:\n        if type(key) is not str:\n            return False\n        if key.islower() == False:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # if len(dict) == 0:\n    #     return True\n    # for k in dict:\n    #     if isinstance(k, int):\n    #         return False\n    #     if isinstance(k, str):\n    #         if k.islower() or k.isupper():\n    #             return False\n    #     else:\n    #         return False\n    # return True\n    return all(isinstance(k, str) and (k.islower() or k.isupper()) for k in dict)\n    # return all(isinstance(k, str) and (k.islower() or k.isupper()) for k in dict.keys())\n",
        "num_ids": 158
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 2\n    while i < n:\n        if is_prime(i):\n            yield i\n        i += 1\n",
        "num_ids": 32
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    primes = [2]\n    for i in range(3,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n<1:\n        return []\n    else:\n        return [n] + count_up_to(n-1)\n",
        "num_ids": 33
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return []\n    primes = [2]\n    for n in xrange(3, n, 2):\n        is_prime = True\n        for i in primes:\n            if i > n ** 0.5:\n                break\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes\n",
        "num_ids": 103
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 2\n    result = []\n    while len(result) < n:\n        if is_prime(i):\n            result.append(i)\n        i += 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counter = 0\n    numbers = []\n    while (counter < n):\n        if is_prime(counter):\n            numbers.append(counter)\n            counter += 1\n        else:\n            counter += 1\n    return numbers\n",
        "num_ids": 56
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 2\n    arr = []\n    while i < n:\n        if is_prime(i):\n            arr.append(i)\n        i += 1\n    return arr\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_prime(n):\n        if n % 2 == 0 and n > 2:\n            return False\n        for i in xrange(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return [i for i in xrange(2, n+1) if is_prime(i)]\n",
        "num_ids": 90
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = a * b\n    return result\n",
        "num_ids": 12
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n    a_str = str(a)\n    b_str = str(b)\n    mult = \"\"\n    for i in range(len(a_str)):\n        mult += str(int(a_str[i]) * int(b_str[i]))\n    return int(mult)\n",
        "num_ids": 99
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\n",
        "num_ids": 29
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return eval(str(a) +'*'+ str(b))\n",
        "num_ids": 19
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = abs(a)\n    b = abs(b)\n",
        "num_ids": 17
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    a = abs(a)\n    b = abs(b)\n    a_ = int(str(a)[0])\n    b_ = int(str(b)[0])\n    return a_ * b_\n",
        "num_ids": 66
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    digits = [str(i) for i in range(10)]\n    a = abs(a)\n    b = abs(b)\n    x = len(str(a))\n    y = len(str(b))\n    if x >= y:\n        num = a\n        i = 1\n        p = 0\n        while i <= num:\n            p += int(digits[i % 10])*(10**(x-1))\n            i += 1\n        if p == 0:\n            return 0\n        return p\n    else:\n        num = b\n        i = 1\n        p = 0\n        while i <= num:\n            p += int(digits[i % 10])*(10**(y-1))\n            i += 1\n        if p == 0:\n            return 0\n        return p\n",
        "num_ids": 195
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    product = a*b\n    digit = product % 10\n    return digit\n",
        "num_ids": 19
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].upper() in VOWELS:\n                num_vowels += 1\n    return num_vowels\n",
        "num_ids": 62
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num_vowels = 0\n    for i in range(len(s)):\n        if s[i].isupper() and (i+1)%2==0:\n            num_vowels += 1\n    return num_vowels\n",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using a set instead of a list\n    # using ",
        "num_ids": 1025
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(s[i].isupper() for i in range(0, len(s), 2))\n",
        "num_ids": 26
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i].isalpha():\n            if i % 2 == 0:\n                count += 1\n    return count\n    \ndef find_pangram(s):\n    \"\"\"\n    Given a string s, return True if it is a pangram, False otherwise.\n    \"\"\"\n    letters = set(s.lower())\n    return len(letters) == 26\n    \ndef find_occurances(s):\n    \"\"\"\n    Given a string, find the longest substring that is a palindrome.\n    \"\"\"\n    longest = \"\"\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                if len(longest) < len(s[i:j+1]):\n                    longest = s[i:j+1]\n    return longest\n    \ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, return True if it is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n    \ndef find_str_btw(s, start, end):\n    \"\"\"\n    Given a string s and two positions start and end, find the longest substring\n    in s that is between the two positions, inclusive.\n    \"\"\"\n    longest = \"\"\n    for i in range(start, end+1):\n        for j in range(i, end+1):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                if len(longest) < len(s[i:j+1]):\n                    longest = s[i:j+1]\n    return longest\n    \ndef reverse_list(s):\n    \"\"\"\n    Given a list s, reverse its elements. Do not modify the original list.\n    \"\"\"\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n        \ndef is_palindrome_list(s):\n    \"\"\"\n    Given a list, determine if the list is a palindrome, using the reverse() function.\n    \"\"\"\n    return s == s[::-1]\n    \ndef is_permutation(s, t):\n    \"\"\"\n    Given two strings s and t, return True if t is a permutation of s, False otherwise.\n    \"\"\"\n    if len(s)!= len(t):\n        return False\n    for i in s:\n        if s.count(i)!= t.count(i):\n            return False\n    return True\n    \ndef reverse_str(s):\n    \"\"\"\n    Given a string s, return a new string where the first and last characters have been exchanged.\n    \"\"\"\n    return s[-1:] + s[1:-1] + s[:1]\n    \ndef get_digits(n):\n    \"\"\"\n    Given a positive integer n, return a string containing the digits of n.\n    Do not use string concatenation.\n    \"\"\"\n    s = \"\"\n    while n:\n        s += str(n % 10)\n        n //= 10\n    return s\n    \ndef is_balanced_paren(s):\n    \"\"\"\n    Given a string s, return True if it is balanced.\n    \"\"\"\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        if c == \")\":\n            if len(stack) > 0 and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n    \ndef is_palindrome_substring(s):\n    \"\"\"\n    Given a string s, return True if it is a palindrome substring, False otherwise.\n    \"\"\"\n    left = 0\n    right = len(s) - 1\n    while left < right:\n        if s[left]!= s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \ndef is_palindrome_substring_optimized(s):\n    \"\"\"\n    Given a string s, return True if it is a palindrome substring, False otherwise.\n    \"\"\"\n    mid = 0\n",
        "num_ids": 1025
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for i in range(0,len(s),2) if s[i].isupper())\n",
        "num_ids": 28
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: 1 if x.isupper() else 0, s))\n",
        "num_ids": 23
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for i,c in enumerate(s) if i % 2 == 0 and c.isupper()])\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num_upper = 0\n    for i in xrange(len(s)):\n        if s[i].isupper():\n            if i%2 == 0:\n                num_upper += 1\n    return num_upper\n",
        "num_ids": 53
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    try:\n        integer = int(value)\n        if integer == value:\n            return integer\n    except ValueError:\n        pass\n    \n    value = float(value)\n    \n    delta = value - round(value)\n    \n    if delta > 0.5:\n        return round(value) + 1\n    elif delta < -0.5:\n        return round(value) - 1\n    else:\n        return round(value)\n    \n",
        "num_ids": 109
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import math\n    number = float(value)\n    fractional_part = math.modf(number)[0]\n    integer_part = int(math.floor(number))\n    if fractional_part == 0:\n        return integer_part\n    if fractional_part <.5:\n        return integer_part\n    else:\n        return integer_part + 1\n",
        "num_ids": 89
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if \".\" in value:\n        int_string = value.split(\".\")[0]\n        int_decimal = value.split(\".\")[1]\n    else:\n        int_string = value\n        int_decimal = 0\n",
        "num_ids": 57
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(value) == 1:\n        return int(value)\n    value = float(value)\n    x, y = int(value), int(value)\n    if abs(x) == abs(y):\n        return value if value > 0 else -value\n    if x > 0:\n        return y if abs(y) > abs(x) else x\n    return y if abs(y) > abs(x) else x\n",
        "num_ids": 102
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    number = float(value)\n    closest_integer = int(number)\n    if abs(closest_integer - number) < abs(closest_integer + number):\n        closest_integer -= 1\n    return closest_integer",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Check if value is a number, if not, return none\n    try:\n        float(value)\n    except ValueError:\n        return None\n",
        "num_ids": 36
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    '''\n    a = abs(value)\n    b = int(a)\n    c = b + 1\n    d = int(a) - 1\n",
        "num_ids": 38
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    d = {}\n    for i in range(10):\n        d[i] = abs(value - i)\n    return min(d, key=d.get)",
        "num_ids": 40
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return float(int(value) + 0.5 if value.startswith('-') else int(value))\n",
        "num_ids": 28
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [n + i for i in range(n + 1)]\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = [n]\n    while n > 1:\n        n = n - 2\n        if n % 2 == 0:\n            result.append(n)\n        else:\n            result.append(n + 1)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pile = [n]\n    while n > 1:\n        n -= 2\n        pile.append(n)\n",
        "num_ids": 30
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # \"level\" is a list containing the number of stones in each level\n    # \"levels\" is the total number of stones in a pile\n    # \"x\" is the number of stones in the next level\n    level, levels, x = [n], [n], 0\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    level = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n // 2 + 1\n        level.append(n)\n    return level\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = abs(n)\n    if n == 1:\n        return [n]\n    return [n] + make_a_pile(n - 2)\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stones = [n]\n    while n > 0:\n        n -= 1\n        stones.append(n)\n    return stones\n",
        "num_ids": 32
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        numbers.append(n)\n    return numbers\n",
        "num_ids": 60
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return [n]\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + [n + 1]\n    return make_a_pile(n - 1) + [n + 2]\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    piles = [n]\n    while len(piles) < 3:\n        next_level = next_n(piles[-1])\n        piles.append(next_level)\n",
        "num_ids": 47
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = s.split(',')\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return re.split(r',|\\s', s)\n",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split()\n    # return s.split(\",\")\n",
        "num_ids": 18
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return s.split(\",\")\n    \ndef replace_every_nth(s, old, new, n):\n    \"\"\"\n    Return a copy of s with all occurrences of old replaced by new.\n    \n    replace_every_nth(\"Hello World\", \"o\", \"x\", 2) == \"Helxx World\"\n    replace_every_nth(\"Hello World\", \"o\", \"x\", 3) == \"Helxxx World\"\n    replace_every_nth(\"Hello World\", \"o\", \"x\", 1) == \"Hello World\"\n    replace_every_nth(\"He said \" + replace_every_nth(\"knock knock\", \"kn\", \"with\", 3) + \"!\") == \"He said with!\"\n    \"\"\"\n    \n    return new.join(s.split(old))\n",
        "num_ids": 189
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x%2 == 0 and y%2 == 0 and x <= y:\n        return (x+y-1)/2\n    else:\n        return -1\n",
        "num_ids": 40
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            ans = i\n            break\n    return ans\n",
        "num_ids": 41
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # your code goes here\n    return max([i for i in range(x,y+1) if i%2==0])\n",
        "num_ids": 34
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert x > 0 and y > 0\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # start at the smallest value\n    for n in range(x, y+1):\n        if n%2 == 0:\n            # check if it's in the range\n            if n >= x and n <= y:\n                return n\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_number = x\n    if y > x:\n        max_number = y\n",
        "num_ids": 22
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num = 0\n    while num < x or num > y:\n        num = int(input(\"Choose a number between {} and {}: \".format(x, y)))\n        if num < x or num > y:\n            print(\"Your number is out of the given range.\")\n    return num\n",
        "num_ids": 68
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(x) is int and type(y) is int and x > 0 and y > 0, \"'x' and 'y' must be positive integers!\"\n    max_int = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            max_int = i\n    return max_int\n    \n",
        "num_ids": 83
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x%2 == 0:\n        if x < y:\n            return x\n        else:\n            return -1\n    else:\n        if x < y:\n            return (x+1)\n        else:\n            return -1\n",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # TODO: replace the line below with your code\n",
        "num_ids": 16
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m = min(m, n)\n    avg = (n+m)/2\n    return '0b' + bin(int(avg))[2:].zfill(m-n)\n",
        "num_ids": 48
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return format(int(avg(n, m)), \"b\")\n",
        "num_ids": 18
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    m = m + 1\n    s = 0\n    for i in range(n, m):\n        s += i\n    return bin(s // (m - n))\n",
        "num_ids": 53
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    sum = 0\n    for i in xrange(n, m + 1):\n        sum += i\n    return bin(sum / (m - n + 1))[2:]\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n >= 0 and m >= 0, \"n and m must be non-negative\"\n    if m < n:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sum = 0\n    if n > m:\n        return -1\n    elif n == m:\n        return \"0b1\"\n",
        "num_ids": 34
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if m > n:\n        return -1\n    rounded_sum = 0\n    for i in range(n, m + 1):\n        rounded_sum += i\n    return (str(int(round(rounded_sum / (m - n + 1)))) + \"0\" * (m - n + 1))[-m:]\n",
        "num_ids": 77
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    res = rounded_avg_helper(n, m, 0)\n    return ('0b' + bin(res)[2:])[-32:]\n",
        "num_ids": 50
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    digits = []\n    for i in x:\n        digits.append(str(i))\n    unique_digits = []\n    for i in digits:\n        if int(i[0])%2!= 0:\n            unique_digits.append(i)\n    return sorted(unique_digits)\n",
        "num_ids": 76
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted([x for x in x if x % 2 == 0])",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(x) - set(int(c) for c in x if c % 2))\n",
        "num_ids": 26
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set([int(i) for i in str(x) if int(i) % 2 == 0]))\n",
        "num_ids": 30
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([i for i in x if all([j for j in str(i) if int(j) % 2 == 0])])\n    \n",
        "num_ids": 35
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    unique = []\n    for num in x:\n        if num == 1:\n            continue\n        while num > 10:\n            num /= 10\n        if num % 2!= 0:\n            unique.append(num)\n    return sorted(unique)\n",
        "num_ids": 61
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    for num in x:\n        if num % 2 == 0:\n            continue\n        else:\n            res.append(num)\n    return sorted(res)\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"\"\"\n    Solution: Create a new list, populate it with values from x, and then check\n    whether any digits are even or not. If not, append it to the new list.\n    \"\"\"\n    new_list = []\n    for i in x:\n        if i%2 == 0:\n            continue\n        new_list.append(i)\n    new_list.sort()\n    return new_list\n    \n    \n    \n",
        "num_ids": 102
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    x = sorted(x)\n    result = []\n    for i in x:\n        if i % 2 == 0:\n            continue\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][n - 1 for n in arr]",
        "num_ids": 39
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if not arr:\n        return []\n    \n    if len(arr) == 1:\n        return [str(arr[0])]\n    \n    arr.sort()\n    \n    result = []\n    \n    for digit in arr:\n        if digit >= 1 and digit <= 9:\n            result.append(digit_map[digit])\n        elif digit > 9:\n            continue\n    \n    return result[::-1]\n",
        "num_ids": 105
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if arr is empty\n    if len(arr) == 0:\n        return []\n    \n    # sort the array\n    arr.sort()\n    \n    # reverse the array\n    arr = arr[::-1]\n    \n    # initialize the return array\n    output = []\n    \n    # iterate over the array, converting the int to string, then append to the output array\n    for i in range(len(arr)):\n        output.append(get_name(arr[i]))\n    \n    return output\n",
        "num_ids": 124
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) < 1:\n        return []\n    return [names[str(arr[i])] for i in range(len(arr))]",
        "num_ids": 37
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr = sorted(arr)\n    arr = arr[::-1]\n    result = []\n    for num in arr:\n        if num < 10 and num >= 1:\n            result.append('One')\n        elif num < 10 and num >= 2:\n            result.append('Two')\n        elif num < 10 and num >= 3:\n            result.append('Three')\n        elif num < 10 and num >= 4:\n            result.append('Four')\n        elif num < 10 and num >= 5:\n            result.append('Five')\n        elif num < 10 and num >= 6:\n            result.append('Six')\n        elif num < 10 and num >= 7:\n            result.append('Seven')\n        elif num < 10 and num >= 8:\n            result.append('Eight')\n        elif num < 10 and num >= 9:\n            result.append('Nine')\n        else:\n            continue\n    return result\n",
        "num_ids": 221
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    arr.sort()\n    result = arr[::-1]\n    for i in range(len(result)):\n        if result[i] in range(1, 10):\n            result[i] = DIGITS[result[i] - 1]\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    arr = arr[::-1]\n",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = len(arr)\n    if l == 0:\n        return []\n    arr = sorted(arr)\n    if arr[0] <= 0 or arr[0] > 9:\n        return []\n    \n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    nums.reverse()\n    \n    res = []\n    for i in range(l):\n        if arr[i] == 0:\n            continue\n        if arr[i] <= 9 and arr[i] >= 1:\n            res.append(nums[arr[i]-1])\n    return res\n",
        "num_ids": 155
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(1)\n        else:\n            l.append(0)\n            for j in range(1, i):\n                l[i-1] += j\n    return l\n",
        "num_ids": 73
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            numbers.append(numbers[i - 1] * i)\n        else:\n            numbers.append(numbers[i - 1] + i)\n    return numbers\n",
        "num_ids": 71
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = int(n)\n    l = [0]*n\n    for i in range(0,n):\n        if i%2==0:\n            l[i] = i*factorial(i)\n        else:\n            l[i] = sum(range(1,i+1))\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ans.append(factorial(i))\n        else:\n            ans.append(sum(range(1, i + 1)))\n    return ans",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def f1(n):\n        if n == 0:\n            return [1]\n        else:\n            return [f1(n - 1)[-1] * i for i in range(1, n + 1)]\n    return f1(n)\n",
        "num_ids": 61
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for i in xrange(1, n + 1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    my_list = [1] * n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            my_list[i-1] = my_list[i-2] * i\n        else:\n            my_list[i-1] = sum(range(i))\n    return my_list\n",
        "num_ids": 82
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            l.append(l[-1] * i)\n        else:\n            l.append(sum(range(1, i + 1)))\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i * f(i-1))\n        else:\n            result.append(f(i-1) + i)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            a.append(i)\n        else:\n            a.append(i)\n    return a\n",
        "num_ids": 50
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    Use two lists to store odd and even integer palindromes.\n    Scan the list from the back, and store the results into two lists.\n    \"\"\"\n    results = [0, 0]\n    for i in xrange(1, n+1):\n        if str(i) == str(i)[::-1]:\n            results[0] += 1\n            if i % 2 == 0:\n                results[1] += 1\n    return tuple(results)",
        "num_ids": 110
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even_num, odd_num = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_num += 1\n            else:\n                odd_num += 1\n    return even_num, odd_num\n",
        "num_ids": 80
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return even_odd_palindrome_recursive(n)\n",
        "num_ids": 17
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return _get_odd_palindrome_count(n)\n",
        "num_ids": 17
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def helper(n, start, l):\n        # base case\n        if start == n:\n            return 1, 0\n",
        "num_ids": 30
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    ret = []\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1] and len(s) % 2 == 0:\n            ret.append(i)\n    return len(ret), len(ret) - len(ret)\n",
        "num_ids": 72
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num_of_even = 0\n    num_of_odd = 0\n",
        "num_ids": 19
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for num in arr if (num > 0) and (sum(int(i) for i in str(num)) > 0)])\n",
        "num_ids": 36
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for num in arr:\n        if num == 0 or num == -1:\n            continue\n        num = abs(num)\n        digit = 0\n        while num > 0:\n            digit += 1\n            num //= 10\n        if digit > 0:\n            result += 1\n    return result\n",
        "num_ids": 75
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        if sum(int(digit) for digit in num_str) > 0:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for num in arr if sum(map(int, str(abs(num)))) > 0)\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(count_nums_aux(arr, 0, 0))\n",
        "num_ids": 19
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([x for x in arr if sum(map(int, str(abs(x)))) > 0])\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        num = abs(num)\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num /= 10\n        if sum_digits > 0:\n            count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([1 for elem in arr if sum(map(int, str(elem))) > 0])\n",
        "num_ids": 27
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            num = str(num)\n            total = 0\n            for digit in num:\n                total += int(digit)\n            if total > 0:\n                count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for i in arr if sum(int(digit) for digit in str(i)) > 0)\n",
        "num_ids": 28
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return True\n    arr.sort()\n    if arr == arr[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(0, len(arr)):\n        if i==0:\n            if arr[i]>arr[i+1]:\n                return False\n        elif i==len(arr)-1:\n            if arr[i]>arr[i-1]:\n                return False\n        else:\n            if arr[i]>arr[i-1] or arr[i]>arr[i+1]:\n                return False\n    return True\n    \ndef remove_duplicate(arr):\n    \"\"\"Given an array of N integers, remove the duplicate elements from the array\n    and return the new length of the array.\n    \n    Expected Time Complexity: O(N)\n    Expected Auxiliary Space: O(N)\n    \n    For Example:\n    remove_duplicate([4, 3, 2, 7, 3, 2, 1])==>6\n    Explanation: After removing the duplicates, the array will be \n                  [4, 3, 2, 1] of length 6.\n    remove_duplicate([4, 3, 2, 1, 3])==>4\n    Explanation: After removing the duplicates, the array will be \n                  [4, 3, 2, 1] of length 4.\n    \n    \"\"\"\n    \n    if len(arr) == 0:\n        return 0\n    \n    hash_arr = []\n    for i in arr:\n        if i not in hash_arr:\n            hash_arr.append(i)\n    return len(hash_arr)\n",
        "num_ids": 375
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(arr)\n    #print(n)\n    \n    if n == 0:\n        return True\n    \n    for i in range(n):\n        #print(i)\n        if i == n-1:\n            #print(arr[i])\n            #print(arr[i-1])\n            if arr[i] <= arr[i-1]:\n                return True\n            else:\n                return False\n        \n        if arr[i] > arr[i+1]:\n            #print(arr[i])\n            #print(arr[i-1])\n            #print(arr[i+1])\n            return False\n            \n    return True\n",
        "num_ids": 159
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return True\n    return move_one_ball_help(arr, 0)\n",
        "num_ids": 26
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return True\n",
        "num_ids": 11
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    flag=False\n    flag=move_one_ball_helper(arr, 0)\n    return flag\n",
        "num_ids": 41
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return True\n    for i in xrange(len(arr)):\n        if arr[i] < arr[(i+1) % len(arr)]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] <= arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if sum(lst1) % 2 == 1:\n        return \"NO\"\n    elif sum(lst2) % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 52
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst1_index = 0\n    lst2_index = 0\n    while lst1_index < len(lst1) and lst2_index < len(lst2):\n        if lst1[lst1_index] % 2 == 1 and lst2[lst2_index] % 2 == 1:\n            return \"NO\"\n        elif lst1[lst1_index] % 2 == 0 and lst2[lst2_index] % 2 == 0:\n            lst1_index += 1\n            lst2_index += 1\n        elif lst1[lst1_index] % 2 == 0 and lst2[lst2_index] % 2 == 1:\n            lst1_index += 1\n        else:\n            lst2_index += 1\n",
        "num_ids": 194
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #... Write your solution here.\n",
        "num_ids": 10
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst2_even = [i for i in lst2 if i%2 == 0]\n    for i in lst1:\n        if i in lst2_even:\n            lst2_even.remove(i)\n        elif i%2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 79
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    index1 = 0\n    index2 = 0\n    while index1 < len(lst1) and index2 < len(lst2):\n        if lst1[index1] % 2 == 1 and lst2[index2] % 2 == 1:\n            if index1 > index2:\n                index2 += 1\n            else:\n                index1 += 1\n        elif lst1[index1] % 2 == 0 and lst2[index2] % 2 == 0:\n            if index1 > index2:\n                index2 += 1\n            else:\n                index1 += 1\n        else:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 156
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = []\n    for i in lst1:\n        if i % 2 == 1:\n            res.append(i)\n    for i in lst2:\n        if i % 2 == 1:\n            res.append(i)\n    if len(res) == len(lst1) + len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 95
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for x in lst1:\n        if x % 2!= 0:\n            return 'NO'\n",
        "num_ids": 26
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def exchange_helper(lst1, lst2, k, result):\n        # if k < 0 or k > len(lst1):\n        #     return None\n        if k == len(lst1):\n            if all(lst1[i] % 2 == 0 for i in range(len(lst1))):\n                result.append(lst1[:])\n            return\n        # exchange(lst1, lst2, k + 1, result)\n        # exchange(lst1, lst2, k - 1, result)\n        exchange_helper(lst1, lst2, k + 1, result)\n        exchange_helper(lst1, lst2, k - 1, result)\n    result = []\n    exchange_helper(lst1, lst2, 0, result)\n    return 'YES' if result else 'NO'\n    # if len(lst1) == 0:\n    #     return 'YES'\n    # for i in range(len(lst1)):\n    #     for j in range(len(lst2)):\n    #         if lst1[i] % 2 == 0:\n    #             return 'YES'\n    #         elif lst2[j] % 2 == 0:\n    #             return 'YES'\n    # return 'NO'\n",
        "num_ids": 323
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) == len(lst2):\n        if sum(lst1) == sum(lst2):\n            return \"YES\"\n        elif sum(lst1) < sum(lst2):\n            i = 0\n            for num in lst1:\n                if num%2 == 0:\n                    lst1[i], lst2[i] = lst2[i], lst1[i]\n                    i += 1\n                else:\n                    i += 1\n            return \"YES\"\n        else:\n            i = 0\n            for num in lst2:\n                if num%2 == 0:\n                    lst1[i], lst2[i] = lst2[i], lst1[i]\n                    i += 1\n                else:\n                    i += 1\n            return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 210
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    histo = {}\n    for letter in test:\n        if letter in histo:\n            histo[letter] += 1\n        else:\n            histo[letter] = 1\n    return histo\n",
        "num_ids": 49
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \ndef find_max_and_min(test):\n    \"\"\"Given a string, return the maximum and minimum letters,\n    as a tuple of (max, min).\n    \n    Example:\n    find_max_and_min('aabb') == ('a', 'b')\n    find_max_and_min('abc') == ('a', 'a')\n    find_max_and_min('bbb') == ('b', 'b')\n",
        "num_ids": 148
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not test:\n        return {}\n    if not isinstance(test, str):\n        raise ValueError(\"Expected a string, got %s\" % type(test))\n    if not all(char.lower() in 'abcdefghijklmnopqrstuvwxyz' for char in test):\n        raise ValueError(\"Expected only lowercase letters\")\n    hist = {}\n    for char in test:\n        hist[char] = hist.get(char, 0) + 1\n    return hist\n",
        "num_ids": 120
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    histo = {}\n    max_count = 0\n    for i in test:\n        if i in histo.keys():\n            histo[i] += 1\n        else:\n            histo[i] = 1\n        if histo[i] > max_count:\n            max_count = histo[i]\n    histo = {k: v for k, v in histo.items() if v == max_count}\n    return histo\n",
        "num_ids": 108
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    histogram_dict = {}\n    for letter in test:\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n    return histogram_dict\n",
        "num_ids": 62
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    dic = {}\n    for x in test:\n        if x in dic:\n            dic[x] = dic[x] + 1\n        else:\n            dic[x] = 1\n    return dic\n    \ndef contains_all(dic,keys):\n    \"\"\"Given a dictionary of letters and their occurences, return True if all\n    the letters in the keys string are in the dictionary.\n    Otherwise return False.\n    \n    Example:\n    contains_all({'a': 1, 'b': 2, 'c': 2}, 'ab') == True\n    contains_all({'a': 1, 'b': 2, 'c': 2}, 'bc') == False\n    contains_all({'a': 1, 'b': 2, 'c': 2}, 'abd') == False\n    contains_all({'a': 1, 'b': 2, 'c': 2}, '') == True\n    \"\"\"\n    for x in keys:\n        if x not in dic:\n            return False\n    return True\n    \ndef common_keys(dic1,dic2):\n    \"\"\"Given two dictionaries of letters and their occurences, return a list of\n    the letters that appear in both dictionaries in the same order.\n    If there are no letters in common, return the empty list.\n    \n    Example:\n    common_keys({'a': 1, 'b': 2, 'c': 2}, {'a': 1, 'b': 2, 'c': 2}) == ['a', 'b']\n    common_keys({'a': 1, 'b': 2, 'c': 2}, {}) == []\n    common_keys({},{'a': 1, 'b': 2, 'c': 2}) == []\n    \"\"\"\n    list1 = list(dic1)\n    list2 = list(dic2)\n    if len(list1) <= len(list2):\n        for x in list1:\n            if x in list2:\n                list2.remove(x)\n    else:\n        for x in list2:\n            if x in list1:\n                list1.remove(x)\n    return list1\n    \ndef has_duplicates(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return True\n    if any letter appears more than once in the string.\n    \n    Example:\n    has_duplicates('a b c') == False\n    has_duplicates('a b b a') == True\n    has_duplicates('a b c a b') == True\n    has_duplicates('b b b b a') == True\n    \"\"\"\n    dic = histogram(test)\n    for x in dic:\n        if dic[x] > 1:\n            return True\n    return False\n    \ndef is_anagram(test1,test2):\n    \"\"\"Given two strings, return True if they are anagrams.\n    Two strings are anagrams if they can be the same after changing exactly\n    one letter in one string to any other letter in the other string.\n    \n    Example:\n    is_anagram('a', 'a') == True\n    is_anagram('abc', 'cba') == True\n    is_anagram('a', 'b') == False\n    is_anagram('123', '1 2') == True\n    \"\"\"\n    if len(test1)!= len(test2):\n        return False\n    list1 = list(test1)\n    list2 = list(test2)\n    for x in list1:\n        if x in list2:\n            list2.remove(x)\n    return len(list2) == 0\n    \ndef unique_morse(morse):\n    \"\"\"Given a string in morse code, return the string in decoded plain text.\n    \n    Example:\n    unique_morse('... ---...') == 'SOS'\n    unique_morse('--...-...--') == 'HEY JUDE'\n    \"\"\"\n    dic = {}\n    dic['A'] = '.-'\n    dic['B'] = '-...'\n    dic['C'] = '-.-.'\n    dic['D'] = '-..'\n    dic['E'] = '.'\n    dic['F'] = '..-.'\n    dic['G'] = ",
        "num_ids": 1022
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    histo = {}\n    for c in test:\n        if c not in histo:\n            histo[c] = 1\n        else:\n            histo[c] += 1\n    return histo\n",
        "num_ids": 50
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if s == \"\":\n        return (s,True)\n    s = list(s)\n    for i in range(0,len(s)):\n        if s[i] == c:\n            del s[i]\n    return (\"\".join(s),s == s[::-1])\n",
        "num_ids": 72
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i] == c[-1]:\n            s[i] = \"\"\n    s = ''.join(s)\n    return (s,s == s[::-1])\n",
        "num_ids": 66
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return\n",
        "num_ids": 6
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(i for i in s if i not in c), s==''.join(i for i in s if i not in c)[::-1]\n",
        "num_ids": 39
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s_l = len(s)\n    if len(s) == 0:\n        return (\"\",False)\n    ans = \"\"\n    for i in range(0,s_l):\n        if s[i] not in c:\n            ans += s[i]\n    rev_ans = ans[::-1]\n    if rev_ans == ans:\n        return (rev_ans,True)\n    else:\n        return (rev_ans,False)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = ''\n    for i in xrange(len(s)):\n        if s[i] == c:\n            result += s[i]\n        else:\n            result += s[i]\n    return (result,result==result[::-1])\n",
        "num_ids": 63
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Copy s to temp\n    s_temp = s[:]\n    # Look for all the characters in c\n    for i in c:\n        # Check for characters\n        if i in s_temp:\n            # Remove the character from s\n            s_temp = s_temp.replace(i,'',1)\n    # Check if the temp is palindrome or not\n    if s_temp == s_temp[::-1]:\n        return (s_temp,True)\n    else:\n        return (s_temp,False)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_s = []\n    for i in s:\n        if i not in c:\n            new_s.append(i)\n    new_s = ''.join(new_s)\n    if new_s == new_s[::-1]:\n        return new_s, True\n    return new_s, False\n",
        "num_ids": 78
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_palindrome(string):\n        left,right = 0,len(string)-1\n        while left < right:\n            if string[left]!= string[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n",
        "num_ids": 63
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in s:\n        if i in c:\n            s = s.replace(i,'')\n    return (s,s==s[::-1])\n    \n",
        "num_ids": 42
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_list = []\n    for string in lst:\n        odd = 0\n        for digit in string:\n            if int(digit) % 2 == 1:\n                odd += 1\n        odd_list.append(\"the number of odd elements \"+str(odd)+\"n the str4ng \"+str(string)+\" of the \"+str(len(string))+\"n input.\")\n    return odd_list\n",
        "num_ids": 95
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [len([i for i in x if int(i)%2!= 0]) for x in lst]\n",
        "num_ids": 29
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j)%2 == 1:\n                count += 1\n        odd_lst.append(\"the number of odd elements \" + str(count) + \" the str4ng \" + str(i) + \" of the \" + str(len(lst)) + \"nput.\")\n    return odd_lst\n",
        "num_ids": 103
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def count(lst):\n        \"\"\"Helper function to count odd numbers in a string.\"\"\"\n        return sum(1 for ch in lst if ch.isdigit() and int(ch) % 2)\n    return [\"the number of odd elements \"+str(count(lst[i]))+\" of the str\"+str(i)+\"ng \"+str(lst[i])+\" of the input.\" for i in range(len(lst))]\n",
        "num_ids": 107
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(list(i))\n    for i in lst1:\n        count = 0\n        for x in i:\n            if int(x) % 2!= 0:\n                count += 1\n        lst2.append(count)\n    return [\"the number of odd elements \"+str(n)+\"n the str4ng \"+str(m)+\" of the \"+str(len(lst))+\"n input.\" for n,m in zip(lst2,lst1)]\n",
        "num_ids": 140
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    odd_count = [len(list(filter(lambda x: int(x)%2 == 1, str(i)))) for i in lst]\n    return [\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + str(n) + \"nput.\" for n in odd_count]\n",
        "num_ids": 93
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    newlist = []\n    for x in lst:\n        newlist.append(len(filter(lambda x: x % 2!= 0, x)))\n    return [\"the number of odd elements \"+str(x)+\"n the str4ng \"+str(lst[i])+\" of the \"+str(i)+\"n input.\" for i,x in enumerate(newlist)]\n    \n    \ndef even_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n",
        "num_ids": 176
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def digits_to_int(digit_lst):\n        return reduce(lambda x,y: x*10 + y, digit_lst)\n",
        "num_ids": 36
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    count = 0\n    for i in lst:\n        \n        count += len([k for k in i if int(k) % 2 == 1])\n    \n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, str(len(lst)), str(i), str(len(lst))) for i in range(1, len(lst)+1)]\n",
        "num_ids": 101
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    odd_list = []\n    for i in lst:\n        odd = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                odd += 1\n        odd_list.append(\"the number of odd elements \" + str(odd) + \"n the str4ng \" + str(i) + \" of the 4nput.\")\n    return odd_list\n",
        "num_ids": 91
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not nums:\n        return 0\n    \n    minSum = nums[0]\n    currSum = 0\n    \n    for num in nums:\n        if currSum < 0:\n            currSum = num\n        else:\n            currSum += num\n        minSum = min(minSum, currSum)\n    \n    return minSum\n",
        "num_ids": 89
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n    minSum = nums[0]\n    for i in range(len(nums)):\n        minSum = min(minSum, 0) + nums[i]\n        if minSum < 0:\n            minSum = 0\n    return minSum\n",
        "num_ids": 76
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(nums)\n    result = 0\n    s = 0\n    for i in xrange(0, n):\n        s += nums[i]\n        if s < result or result == 0:\n            result = s\n        if s < 0:\n            s = 0\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    currSum = nums[0]\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        currSum += nums[i]\n        if currSum < nums[i]:\n            currSum = nums[i]\n        if currSum < minSum:\n            minSum = currSum\n    return minSum\n",
        "num_ids": 94
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not nums:\n        return 0\n    min_sum = max_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n        max_sum = max(max_sum, min_sum)\n    return max_sum\n",
        "num_ids": 86
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    min_sum = 0\n    if len(nums) == 0:\n        return min_sum\n",
        "num_ids": 25
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    curr_sum = 0\n    smallest_sum = float('inf')\n    for num in nums:\n        curr_sum += num\n        if curr_sum >= 0:\n            smallest_sum = min(smallest_sum, curr_sum)\n        else:\n            curr_sum = 0\n    return smallest_sum\n",
        "num_ids": 83
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(nums) == 1:\n        return nums[0]\n    minSum = nums[0]\n    currentSum = 0\n    for i in xrange(len(nums)):\n        currentSum += nums[i]\n        if currentSum >= 0:\n            minSum = min(currentSum, minSum)\n        if currentSum < 0:\n            currentSum = 0\n    return minSum\n",
        "num_ids": 100
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not nums:\n        return 0\n    window = [0 for _ in nums]\n    min_sum = nums[0]\n    window[0] = nums[0]\n    for i in range(1, len(nums)):\n        window[i] = nums[i] + window[i-1]\n        min_sum = min(min_sum, window[i])\n    return min_sum\n",
        "num_ids": 103
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Brute force: O(n^2)\n    # for i in range(len(nums)):\n    #     for j in range(i, len(nums)):\n    #         if sum(nums[i:j+1]) < min_sum:\n    #             min_sum = sum(nums[i:j+1])\n    # return min_sum\n",
        "num_ids": 92
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    \"\"\"\n    DP solution.\n",
        "num_ids": 11
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n    \n    def valid(i, j, bucket):\n        if grid[i][j] == 1:\n            return (i,j, bucket)\n        else:\n            return None\n",
        "num_ids": 62
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = 0\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 1:\n                # print(i, row[i])\n                res = max(res, math.ceil(row[i] / capacity))\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def compute_min_fill(grid, capacity):\n        \"\"\"\n        The \"min_fill\" function will compute the minimum number of buckets to\n        fill the wells in \"grid\" with \"capacity\" using a greedy algorithm.\n        \"\"\"\n        import math\n        rows = len(grid)\n        if rows == 0:\n            return 0\n",
        "num_ids": 80
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def _max_fill(grid, bucket, index, capacity):\n        if index == len(grid):\n            return 0\n        if bucket == capacity:\n            return 1 + _max_fill(grid, bucket, index+1, capacity)\n        max_fill = 0\n        if grid[index][bucket] == 0:\n            max_fill = _max_fill(grid, bucket, index+1, capacity)\n        if bucket+1 < len(grid[index]) and grid[index][bucket+1] == 0:\n            max_fill += _max_fill(grid, bucket+1, index+1, capacity)\n        return max_fill\n",
        "num_ids": 153
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n",
        "num_ids": 19
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    # total_volume = sum(sum(row) for row in grid)\n    total_volume = sum(row.count(1) for row in grid)\n    wells = [0] * n\n    for i in range(n):\n        for j in range(m):\n            wells[i] += grid[i][j]\n    buckets = [[0] * capacity for _ in range(m)]\n",
        "num_ids": 115
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    x = len(grid)\n    y = len(grid[0])\n    res = 0\n    for i in range(x):\n        for j in range(y):\n            if grid[i][j] == 1:\n                for k in range(j, y):\n                    if grid[i][k] == 1:\n                        for l in range(i, x):\n                            if grid[l][k] == 1:\n                                res += math.ceil(min(capacity, k - j) / min(capacity, i - j))\n",
        "num_ids": 126
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n    wells = []\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            wells.append((i, j, grid[i][j]))\n    wells.sort(key = lambda x: x[2], reverse=True)\n    water = 0\n    while wells:\n        i, j, bucket_capacity = wells.pop(0)\n        water += bucket_capacity - grid[i][j]\n        if water < 0:\n            water += bucket_capacity\n        grid[i][j] += water\n    return water\n",
        "num_ids": 143
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    h = len(grid)\n    w = len(grid[0])\n    capacity = min(capacity, w)\n    count = 0\n    while True:\n        empty_cells = []\n        for i in range(h):\n            for j in range(w):\n                if grid[i][j] == 1:\n                    if grid[i][j+capacity] == 0:\n                        empty_cells.append((i, j))\n        if len(empty_cells) == 0:\n            break\n        for (i, j) in empty_cells:\n            grid[i][j+capacity] = 1\n            grid[i][j] = 0\n            count += 1\n        #print(grid)\n    return count\n",
        "num_ids": 168
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    counts = []\n    for num in arr:\n        bin_repr = bin(num)[2:]\n        ones = bin_repr.count(\"1\")\n        counts.append([ones, num])\n    return [n[1] for n in sorted(counts)]\n",
        "num_ids": 67
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: bin(x).count('1'))\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def dec(arr):\n        return len(bin(arr)[2:])\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(arr, key = lambda x : [int(str(x).count(\"1\")), x])\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = [0] * len(arr)\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        result[count] = arr[i]\n    return result",
        "num_ids": 73
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def count_ones(n):\n        c = 0\n        while n > 0:\n            if n & 1:\n                c += 1\n            n = n >> 1\n        return c\n",
        "num_ids": 45
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bits = [bin(x)[2:].count('1') for x in arr]\n    return sorted(arr, key=lambda x: (bits[arr.index(x)], x))\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if s is None:\n        return []\n    return [word for word in s.split(\" \") if is_consonant_count(word, n)]\n",
        "num_ids": 39
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    new_s = s.split(\" \")\n    new_s = [i for i in new_s if len(i)>0]\n    result = []\n    for word in new_s:\n        if len(word)<=n:\n            result.append(word)\n    return result\n    \n",
        "num_ids": 74
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    list = []\n    if s == '':\n        return []\n    for word in s.split():\n        cnt = 0\n        for c in word:\n            if c not in ['a', 'e', 'i', 'o', 'u']:\n                cnt += 1\n        if cnt == n:\n            list.append(word)\n    return list\n",
        "num_ids": 87
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    word_list = s.split()\n    if s == \"\":\n        return []\n    else:\n        vowels = \"aeiou\"\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        vowel_counter = 0\n        consonant_counter = 0\n        valid_words = []\n        for word in word_list:\n            valid = True\n            for letter in word:\n                if letter in vowels:\n                    vowel_counter += 1\n                if letter in consonants:\n                    consonant_counter += 1\n                if letter not in vowels and letter not in consonants:\n                    valid = False\n            if valid:\n                valid_words.append(word)\n        if n > consonant_counter:\n            valid_words = valid_words + [None] * (n - consonant_counter)\n        return valid_words\n",
        "num_ids": 212
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [word for word in s.split() if count_consonants(word) == n]\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [word for word in s.split(' ') if word.count('c') == n]\n    ",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    words = []\n    for word in s.split():\n        if len(word) - sum(1 for c in word if c in 'aeiouAEIOU') == n:\n            words.append(word)\n    return words\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    for word in s.split():\n        if len(word) >= n and not any([letter not in consonants for letter in word]):\n            result.append(word)\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(word) < 2:\n        return \"\"\n    vowels = \"aeiou\"\n    vowel_index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index.append(i)\n    if len(vowel_index) == 0:\n        return \"\"\n    min_distance = 1000\n    for i in vowel_index:\n        if i+1 in vowel_index and i-1 in vowel_index:\n            if abs(i-vowel_index[vowel_index.index(i) - 1]) < min_distance:\n                min_distance = abs(i - vowel_index[vowel_index.index(i) - 1])\n                answer = word[i - min_distance]\n    return answer\n",
        "num_ids": 197
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    \n    word_list = list(word)\n    idx = len(word_list) - 1\n    \n    while word_list[idx] not in vowels:\n        idx -= 1\n    \n    if idx == -1:\n        return \"\"\n    else:\n        return word_list[idx]\n    \n",
        "num_ids": 97
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(word)):\n        if word[i] in \"AEIOUaeiou\":\n            return word[i]\n    return \"\"",
        "num_ids": 39
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(word)\n    if n == 0:\n        return \"\"\n    if word[0] in \"aeiou\":\n        return word[0]\n    for i in range(n-1, -1, -1):\n        if word[i] in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 81
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO\n    vowels = 'aeiou'\n    closest = ''\n",
        "num_ids": 24
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    n = len(word)\n    last_vowel = None\n    for i in reversed(range(n)):\n        if word[i] in vowels:\n            last_vowel = word[i]\n            break\n    if last_vowel is None:\n        return \"\"\n    start = n - 1\n    while start >= 0:\n        if word[start] not in vowels:\n            break\n        start -= 1\n    if start == -1:\n        return \"\"\n    min_dist = n\n    ch = ''\n    for i in range(start, n):\n        if word[i] not in vowels:\n            continue\n        curr_dist = abs(start - i)\n        if curr_dist < min_dist:\n            min_dist = curr_dist\n            ch = word[i]\n    return ch\n",
        "num_ids": 223
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for idx in reversed(range(1, len(word))):\n        if word[idx] in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            return word[idx]\n    return \"\"\n",
        "num_ids": 55
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not word:\n        return \"\"\n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    vowels_in_front = set([])\n    vowels_in_back = set([])\n    vowel = \"\"\n    if word[0] in vowels:\n        vowels_in_front.add(word[0])\n        word = word[1:]\n    if word[-1] in vowels:\n        vowels_in_back.add(word[-1])\n        word = word[:-1]\n",
        "num_ids": 141
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'No' if stack else 'Yes'\n",
        "num_ids": 66
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # If first string is empty, then return true\n    if not lst[0]:\n        return 'Yes'\n    # If second string is empty, then return false\n    if not lst[1]:\n        return 'No'\n",
        "num_ids": 55
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 'Yes' if match_parens_helper(lst) else 'No'\n",
        "num_ids": 23
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_balanced(string):\n        stack = []\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n        return True if not stack else False\n",
        "num_ids": 77
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    i = 0\n    while i < len(lst):\n        if lst[i] == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return 'No'\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n        i += 1\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 118
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return match_recursive(lst, 0, 0)\n",
        "num_ids": 16
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def check_equal(lst):\n        left = 0\n        right = 0\n        for i, c in enumerate(lst):\n            if c == '(':\n                left += 1\n            else:\n                right += 1\n            if left < right:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def check_parentheses(lst):\n        if not lst:\n            return True\n        if lst[0] == ')' or lst[-1] == '(':\n            return False\n        return check_parentheses(lst[1:-1])\n",
        "num_ids": 63
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0: return 'Yes'\n    return match_parens(lst[1:]) if is_balanced(lst[0]) else 'No'\n",
        "num_ids": 44
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, reverse = True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    res = [None] * k\n    arr = sorted(arr)\n    for i in range(k):\n        res[i] = arr[len(arr) - i - 1]\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # edge case\n    if k == 0: return []\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert 0 <= k <= len(arr)\n    arr.sort()\n    return arr[-k:]\n",
        "num_ids": 26
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # length of array\n    arr_len = len(arr)\n",
        "num_ids": 17
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return arr[:k]\n",
        "num_ids": 9
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(k):\n        max_index = i\n        for j in range(i+1, len(arr)):\n            if arr[max_index] < arr[j]:\n                max_index = j\n        result.append(arr[max_index])\n        arr[max_index], arr[i] = arr[i], arr[max_index]\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    \n    # Find the max of the first k elements\n    max_num = get_max_num(arr, k)\n",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2!= 0])\n",
        "num_ids": 37
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([x for i, x in enumerate(lst) if not i % 2 == 0 and x % 2 == 1])\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[0::2])",
        "num_ids": 12
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2])\n",
        "num_ids": 36
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i]%2)\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([i for i in lst if i%2==0])\n",
        "num_ids": 19
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 1)",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(lst[::2])\n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "num_ids": 60
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0,len(lst),2):\n        result += lst[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst.sort()\n    n = len(lst)\n    counter = 0\n    for i in range(n):\n        if lst[i] % 2 == 0:\n            counter += lst[i]\n    return counter",
        "num_ids": 56
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(sorted(arr)[:k][k-1:k+1])\n",
        "num_ids": 22
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(arr[:k]",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            result += arr[i]\n",
        "num_ids": 38
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = len(arr) - k\n    return sum(arr[:l])\n",
        "num_ids": 21
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(arr[:k])",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr = [int(i) for i in arr]\n    k = min(k, len(arr))\n    if k == 1:\n        return arr[0]\n    res = sum([arr[i] for i in range(k)])\n    for i in range(1, k-1):\n        if arr[i] >= 10 and arr[i] <= 99:\n            res += arr[i]\n    return res\n",
        "num_ids": 101
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = 0\n    for num in arr[:k]:\n        res += num if len(str(num)) == 2 else 0\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(k):\n        total += arr[i]\n",
        "num_ids": 23
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = 0\n    for i in range(k):\n        res += sum([int(x) for x in str(arr[i])])\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    result = 0\n    for i in range(k):\n        if i < len(arr):\n            result += arr[i]\n            count += 1\n        else:\n            break\n    result += sum(arr[k:])\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_numbers = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    return sorted(odd_numbers)\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ret = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n        ret.append(n)\n    return sorted(ret)\n",
        "num_ids": 58
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    collatz_sequence = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            collatz_sequence.append(n)\n        else:\n            n = 3 * n + 1\n            collatz_sequence.append(n)\n    return collatz_sequence\n",
        "num_ids": 76
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    nums = []\n    for i in range(n):\n        if i < 2:\n            nums.append(i)\n        else:\n            n = i\n            while n!= 1:\n                if n % 2 == 0:\n                    n = int(n/2)\n                else:\n                    n = 3 * n + 1\n            nums.append(n)\n    return nums\n",
        "num_ids": 95
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert isinstance(n, int) and n > 0\n",
        "num_ids": 15
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return_list = []\n",
        "num_ids": 8
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odds = []\n    while n!= 1:\n        if n % 2:\n            odds.append(n)\n        n = 3*n+1 if n % 2 else n/2\n    return sorted(odds)\n",
        "num_ids": 56
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    collatz = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(collatz)\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    odds = []\n    while n!= 1:\n        if n % 2 == 1:\n            odds.append(n)\n        n = n / 2 if n % 2 == 0 else (3 * n + 1)\n    return odds\n",
        "num_ids": 58
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    collatz_sequence = []\n    while n > 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3*n + 1\n    return collatz_sequence\n",
        "num_ids": 62
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    import re\n    months = [1,3,5,7,8,10,12]\n    days = [31,30,29]\n",
        "num_ids": 37
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    days = ['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    if len(date)!= 10:\n        return False\n    if date[2]!= '-' or date[5]!= '-':\n        return False\n    month, day, year = date.split('-')\n    if int(year) < 1000:\n        return False\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > 31 or int(day) < 1:\n        return False\n    if month == '02' and int(day) > 29:\n        return False\n    if month in ['04', '06', '09', '11'] and int(day) > 30:\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12'] and int(day) > 31:\n        return False\n    return True\n",
        "num_ids": 310
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m = re.search(r'^(\\d{1,2})-(\\d{1,2})-(\\d{4})$', date)\n    if not m:\n        return False\n    if not 1 <= int(m.group(1)) <= 31 or not 1 <= int(m.group(2)) <= 12:\n        return False\n    if m.group(3) > 1900:\n        return False\n    else:\n        return True\n",
        "num_ids": 106
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    months = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n",
        "num_ids": 54
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # the first step is to check if the date is empty\n    if not date:\n        return False\n    # the second step is to check if the date is in the correct format\n    # this time we are checking the date in three separate parts\n    # so we have to use the split() function and then we have to compare\n    # each part separately to the other part\n    date_split = date.split(\"-\")\n    if len(date_split)!= 3:\n        return False\n    # the third step is to check the months and days in each part\n    # first we have to make sure that the number of days and the months are\n    # valid and then we have to check the month and days\n    # for each part separately\n    # we will use the list 'list_days' to store the days in each month\n    # and we will use the list 'list_months' to store the months in each part\n    # we will use the function 'valid_date' to validate the months and days\n    # if all the months and days are valid, we will return True\n    # otherwise we will return False\n    list_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    list_months = [\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"]\n    days = date_split[1].strip()\n    months = date_split[0].strip()\n    if len(days) > 2:\n        return False\n    elif len(days) == 1:\n        days = \"0\" + days\n    if len(months) > 2:\n        return False\n    elif len(months) == 1:\n        months = \"0\" + months\n    days = int(days)\n    months = int(months)\n    if days <= 0 or days > 31:\n        return False\n    elif months <= 0 or months > 12:\n        return False\n    else:\n        if months in [1,3,5,7,8,10,12]:\n            list_days.pop(0)\n        elif months in [4,6,9,11]:\n            list_days.pop(1)\n        else:\n            list_days.pop(2)\n        if days <= list_days[months - 1]:\n            return True\n        else:\n            return False\n",
        "num_ids": 546
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if len(date) == 0:\n        return False\n    \n    days = int(date[2:4])\n    months = int(date[0:2])\n    years = int(date[5:9])\n    \n    \n    if (((days > 31) or (days < 1)) or ((months > 12) or (months < 1)) or ((years < 1900) or (years > (datetime.datetime.now().year)))):\n        return False\n    \n    if (months == 2):\n        if ((months > 29) or (months < 1)):\n            return False\n    \n    elif ((months in [4,6,9,11])):\n        if ((days > 30) or (days < 1)):\n            return False\n    \n    else:\n        if ((days > 29) or (days < 1)):\n            return False\n    \n    return True\n",
        "num_ids": 210
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    months = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    valid_day = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    valid_year = ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026', '2027', '2028', '2029']\n    date = date.split('-')\n    if len(date) == 3:\n        if date[0] in months:\n            if date[1] in valid_day:\n                if date[2] in valid_year:\n                    return True\n    return False\n",
        "num_ids": 307
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    months = {1:31,2:29,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n    days = {1:31,2:28,3:31,4:30,5:31,6:30,7:31,8:31,9:30,10:31,11:30,12:31}\n",
        "num_ids": 107
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    months = {'1': 31, '2': 29, '3': 31, '4': 30, '5': 31, '6': 30, '7': 31, '8': 31, '9': 30, '10': 31, '11': 30, '12': 31}\n    months_2 = {'4': 30, '6': 30, '9': 30, '11': 30}\n    # print(months[month])\n    splitted_date = date.split('-')\n    try:\n        if int(splitted_date[0]) > 0 and int(splitted_date[0]) < 32:\n            if int(splitted_date[1]) > 0 and int(splitted_date[1]) < 32:\n                if int(splitted_date[2]) > 0 and int(splitted_date[2]) < 10000:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 236
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    txt = txt.replace(' ', '')\n    txt = txt.replace('-', '')\n    txt = txt.replace('!', '')\n    txt = txt.replace(',', '')\n    txt = txt.lower()\n    return txt\n",
        "num_ids": 66
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # words = txt.split(\" \")\n    # return words\n    #\n    # lst = []\n    #\n    # for i in txt:\n    #     if i.isalpha():\n    #         lst.append(i)\n    #\n    # if lst == []:\n    #     return len(txt)\n    # else:\n    #     return len(lst)\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    ",
        "num_ids": 1019
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [txt]\n",
        "num_ids": 7
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    characters = set('abcdefghijklmnopqrstuvwxyz')\n    \n    for word in txt.split(' '):\n        current = []\n        for letter in word:\n            if letter in characters:\n                current.append(letter)\n            else:\n                if len(current) % 2!= 0:\n                    current.append(letter)\n                else:\n                    current.append(letter)\n                    result.append(''.join(current))\n                    current = []\n        if len(current) % 2!= 0:\n            current.append(letter)\n        else:\n            current.append(letter)\n            result.append(''.join(current))\n    return result\n",
        "num_ids": 170
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = txt.split(\" \")\n    return l\n",
        "num_ids": 16
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #txt = txt.lower()\n    #txt = txt.replace(\"!\", \"\")\n    #txt = txt.replace(\",\", \"\")\n    #txt = txt.replace(\".\", \"\")\n    #txt = txt.replace(\"-\", \"\")\n    #txt = txt.replace(\" \", \"\")\n    #txt = txt.replace(\"\\\"\", \"\")\n    #txt = txt.replace(\"(\", \"\")\n    #txt = txt.replace(\")\", \"\")\n    #txt = txt.replace(\"?\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"[\", \"\")\n    #txt = txt.replace(\"]\", \"\")\n    #txt = txt.replace(\"{\", \"\")\n    #txt = txt.replace(\"}\", \"\")\n    #txt = txt.replace(\"/\", \"\")\n    #txt = txt.replace(\"|\", \"\")\n    #txt = txt.replace(\"<\", \"\")\n    #txt = txt.replace(\">\", \"\")\n    #txt = txt.replace(\"=\", \"\")\n    #txt = txt.replace(\"0\", \"\")\n    #txt = txt.replace(\"1\", \"\")\n    #txt = txt.replace(\"2\", \"\")\n    #txt = txt.replace(\"3\", \"\")\n    #txt = txt.replace(\"4\", \"\")\n    #txt = txt.replace(\"5\", \"\")\n    #txt = txt.replace(\"6\", \"\")\n    #txt = txt.replace(\"7\", \"\")\n    #txt = txt.replace(\"8\", \"\")\n    #txt = txt.replace(\"9\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"'\", \"\")\n    #txt = txt.replace(\"",
        "num_ids": 1024
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) < 2:\n        return True\n    else:\n        if lst[0] > lst[1]:\n            return False\n        else:\n            return is_sorted(lst[1:])\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n",
        "num_ids": 36
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Check that list is not empty\n    if not lst:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    return lst == list(range(min(lst), max(lst) + 1))\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return lst == sorted(lst)\n",
        "num_ids": 12
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return True\n    x = lst[0]\n    for i in lst[1:]:\n        if x > i:\n            return False\n        x = i\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return lst == sorted(set(lst))\n",
        "num_ids": 14
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # First we know the list is sorted if the second element is greater\n    # than the first. If all the numbers are the same, it's sorted.\n    if len(lst) <= 1: return True\n    elif lst[1] < lst[0]: return True\n    return is_sorted(lst[1:])\n",
        "num_ids": 80
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = [int(x) for x in lst]\n    lst.sort()\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 43
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Given interval is not a tuple\")\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        raise ValueError(\"Given interval is not a 2-tuple\")\n    if interval1[0] >= interval1[1] or interval2[0] >= interval2[1]:\n        raise ValueError(\"Given interval is not a closed interval\")\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 172
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"NO\"\n",
        "num_ids": 7
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    interval1 = list(interval1)\n    interval2 = list(interval2)\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    elif interval1[0] > interval2[1] or interval1[1] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 133
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if (interval1[1] < interval2[0]) or (interval2[1] < interval1[0]):\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[1] > interval2[0] and interval1[0] < interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"",
        "num_ids": 75
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"YES\"\n    \n    \nif __name__ == \"__main__\":\n    print intersection((1, 2), (2, 3)) == \"NO\"\n    print intersection((-1, 1), (0, 4)) == \"NO\"\n    print intersection((-3, -1), (-5, 5)) == \"YES\"",
        "num_ids": 78
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[1] > interval1[0] and interval2[1] > interval2[0]:\n        if interval1[0] <= interval2[1] <= interval1[1] and interval2[0] <= interval1[1] <= interval2[1]:\n            if (interval1[1] - interval1[0]) % 2 == 1 and (interval2[1] - interval2[0]) % 2 == 1:\n                return \"YES\"\n        return \"NO\"\n    elif interval1[1] > interval1[0] and interval2[1] < interval2[0]:\n        if interval1[1] >= interval2[0] >= interval1[0]:\n            if (interval1[1] - interval1[0]) % 2 == 1 and (interval2[1] - interval2[0]) % 2 == 1:\n                return \"YES\"\n        return \"NO\"\n    else:\n        if interval1[1] >= interval2[0] >= interval1[0]:\n            if (interval1[1] - interval1[0]) % 2 == 1 and (interval2[1] - interval2[0]) % 2 == 1:\n                return \"YES\"\n        return \"NO\"\n    \n",
        "num_ids": 324
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if arr == []:\n        return None\n    else:\n        arr_length = len(arr)\n        arr_signs = [0 for i in range(arr_length)]\n        arr_signs[0] = 1\n        for i in range(1, arr_length):\n            if arr[i] < 0:\n                arr_signs[i] = -1\n            elif arr[i] > 0:\n                arr_signs[i] = 1\n        product = 1\n        for i in range(arr_length):\n            product *= arr_signs[i]\n        return product\n",
        "num_ids": 144
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([abs(n)*sign(n) for n in arr]) if len(arr) > 0 else None",
        "num_ids": 27
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if arr:\n        return sum([1 if x > 0 else -1 if x < 0 else 0 for x in arr]) * prod([x if x > 0 else -x if x < 0 else 1 for x in arr])\n    return None\n",
        "num_ids": 56
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    else:\n        signs = [sign(n) for n in arr]\n        return sum(abs(n) * sign for n, sign in zip(arr, signs))\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if arr == []:\n        return None\n    return sum([abs(n) for n in arr]) * prod_sign(arr)\n",
        "num_ids": 33
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 1\n    if not arr:\n        return None\n    for item in arr:\n        if item < 0:\n            product *= -1\n        else:\n            product *= 1\n    return product\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if arr == []:\n        return None\n    arr_abs = [abs(i) for i in arr]\n    res = 1\n    for i in arr_abs:\n        res *= i\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    if rows < 2 or cols < 2:\n        return\n    # initialize the answer\n    answer = [0] * k\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                answer[0] = grid[0][0]\n                continue\n            elif i == 0:\n                answer[0] = min(answer[0], grid[i][j-1])\n            elif j == 0:\n                answer[0] = min(answer[0], grid[i-1][j])\n            else:\n                answer[0] = min(answer[0], grid[i][j], grid[i-1][j], grid[i][j-1])\n    return answer\n",
        "num_ids": 195
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def backtrack(row, col, k):\n        if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n            return []\n",
        "num_ids": 44
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    N = len(grid)\n    if N == 0:\n        return []\n    if N == 1:\n        return grid[0]\n",
        "num_ids": 34
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    \n    # All possible cells from which we can reach a cell in the final k steps\n    all_cells = [(i, j) for i in range(rows) for j in range(cols)]\n    \n    # Need a set to store visited cells\n    visited = set()\n    \n    # Convert the grid into a list of values\n    grid_values = [[grid[i][j] for j in range(cols)] for i in range(rows)]\n    \n    # Find a valid path\n    min_path = []\n    while True:\n        # Find the cell which is the minimum\n        min_cell = min(all_cells, key=lambda c: grid_values[c[0]][c[1]])\n        min_path.append(grid_values[min_cell[0]][min_cell[1]])\n        \n        # Remove it from the set\n        all_cells.remove(min_cell)\n        \n        # If we have visited all the possible cells\n        if len(all_cells) == 0:\n            break\n    \n    return min_path[::-1]",
        "num_ids": 276
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def get_neighbor(grid, i, j):\n        for x, y in [[i-1, j], [i+1, j], [i, j-1], [i, j+1]]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[x]):\n                yield x, y\n",
        "num_ids": 82
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not grid: return 0\n    rows = len(grid)\n    cols = len(grid[0])\n    for row in range(rows):\n        for col in range(cols):\n            grid[row][col] = grid[row][col] - 1\n    \n    # paths = set()\n    # for row in range(rows):\n    #     for col in range(cols):\n    #         if row == 0 and col == 0:\n    #             paths.add([grid[row][col]])\n    #         else:\n    #             # previous_value = grid[row][col]\n    #             if row == 0:\n    #                 if grid[row][col] in paths:\n    #                     if grid[row][col] in paths:\n    #                         paths.add([grid[row][col]])\n    #                     continue\n    #                 else:\n    #                     paths.add([grid[row][col]])\n    #             elif col == 0:\n    #                 if grid[row][col] in paths:\n    #                     if grid[row][col] in paths:\n    #                         paths.add([grid[row][col]])\n    #                     continue\n    #                 else:\n    #                     paths.add([grid[row][col]])\n    #             else:\n    #                 if grid[row][col] in paths:\n    #                     if grid[row][col] in paths:\n    #                         paths.add([grid[row][col]])\n    #                     continue\n    #                 else:\n    #                     if grid[row][col] < previous_value:\n    #                         if grid[row][col] in paths:\n    #                             if grid[row][col] in paths:\n    #                                 paths.add([grid[row][col]])\n    #                             continue\n    #                         else:\n    #                             paths.add([grid[row][col]])\n    #                     else:\n    #                         if grid[row][col] in paths:\n    #                             if grid[row][col] in paths:\n    #                                 paths.add([grid[row][col]])\n    #                             continue\n    #                         else:\n    #                             paths.add([grid[row][col]])\n    #                     previous_value = grid[row][col]\n    # return list(paths)\n    paths = [[0]]\n    for row in range(rows):\n        for col in range(cols):\n            if row == 0 and col == 0:\n                paths[0].append(grid[row][col])\n            elif row == 0:\n                if grid[row][col] < paths[0][-1]:\n                    paths[0].append(grid[row][col])\n                else:\n                    paths.append([grid[row][col]])\n            elif col == 0:\n                if grid[row][col] < paths[0][-1]:\n                    paths[0].append(grid[row][col])\n                else:\n                    paths.append([grid[row][col]])\n            else:\n                if grid[row][col] < paths[0][-1]:\n                    paths[0].append(grid[row][col])\n                else:\n                    if grid[row][col] < paths[-1][-1]:\n                        paths[-1].append(grid[row][col])\n                    else:\n                        paths.append([grid[row][col]])\n    return [paths[0][0]] + sorted(paths[0][1:])\n",
        "num_ids": 840
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not grid or not grid[0]:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    row = len(grid)\n    if row == 0 or row == 1:\n        return grid\n    col = len(grid[0])\n    if col == 0 or col == 1:\n        return grid\n    visited = [[0 for _ in range(col)] for _ in range(row)]\n    # print(visited)\n    for i in range(row):\n        for j in range(col):\n            if i == 0 and j == 0:\n                visited[i][j] = grid[i][j]\n            elif i == 0:\n                visited[i][j] = grid[i][j] + min(visited[i][j-1], visited[i][j-2])\n            elif j == 0:\n                visited[i][j] = grid[i][j] + min(visited[i-1][j], visited[i-2][j])\n            else:\n                visited[i][j] = grid[i][j] + min(visited[i-1][j], visited[i-1][j-1], visited[i-2][j-1])\n    # print(visited)\n    res = []\n    for i in range(k):\n        res.append(visited[i][-1])\n    return res\n",
        "num_ids": 303
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if k == 0 or len(grid) == 0:\n        return []\n    rows, cols = len(grid), len(grid[0])\n    # Initialize the minimum path\n    min_path = [[0] * cols for _ in xrange(rows)]\n    # Initialize the neighbors for each cell.\n    neighbors = [[None] * cols for _ in xrange(rows)]\n    for i in xrange(rows):\n        for j in xrange(cols):\n            if i > 0 and j > 0:\n                neighbors[i][j] = (i - 1, j)\n                neighbors[i][j - 1] = (i, j - 1)\n            elif i > 0:\n                neighbors[i][j] = (i - 1, j)\n            elif j > 0:\n                neighbors[i][j] = (i, j - 1)\n    # Initialize the minimum path with the values of the first cell.\n    min_path[0][0] = grid[0][0]\n    # Initialize the minimum path with the values of the first cell.\n    for j in xrange(1, cols):\n        min_path[0][j] = min_path[0][j - 1] + grid[0][j]\n    # Initialize the minimum path with the values of the first cell.\n    for i in xrange(1, rows):\n        min_path[i][0] = min_path[i - 1][0] + grid[i][0]\n    # Initialize the minimum path with the values of the first cell.\n    for i in xrange(1, rows):\n        for j in xrange(1, cols):\n            if min_path[i - 1][j] < min_path[i][j - 1]:\n                min_path[i][j] = min_path[i - 1][j] + grid[i][j]\n            else:\n                min_path[i][j] = min_path[i][j - 1] + grid[i][j]\n    # Return the last element of the minimum path.\n    return min_path[-1][-1]\n",
        "num_ids": 513
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    costs = [0 for _ in xrange(k)]\n    visited = set()\n    visited.add(0)\n    for j in xrange(n):\n        for i in xrange(m):\n            if i == 0 and j == 0:\n                costs[0] = grid[0][0]\n            else:\n                costs[0] = costs[0] + grid[i][j]\n                # if not visited:\n                #     costs[0] = costs[0] + grid[i][j]\n                # else:\n                #     costs[0] = min(costs[0], costs[0 - 1] + grid[i][j])\n            for j in xrange(1, k):\n                if j - 1 >= 0 and j - 1 < n:\n                    costs[j] = costs[j] + grid[i][j - 1]\n                if j - 1 >= 0 and i - 1 >= 0 and i - 1 < m:\n                    costs[j] = costs[j] + grid[i - 1][j - 1]\n                if j - 1 >= 0 and i + 1 < m and i + 1 >= 0:\n                    costs[j] = costs[j] + grid[i + 1][j - 1]\n                # if not visited:\n                #     costs[j] = costs[j] + grid[i][j - 1]\n                # else:\n                #     costs[j] = min(costs[j], costs[j - 1] + grid[i][j - 1])\n                # if not visited:\n                #     costs[j] = costs[j] + grid[i - 1][j - 1]\n                # else:\n                #     costs[j] = min(costs[j], costs[j - 1] + grid[i - 1][j - 1])\n                # if not visited:\n                #     costs[j] = costs[j] + grid[i + 1][j - 1]\n                # else:\n                #     costs[j] = min(costs[j], costs[j - 1] + grid[i + 1][j - 1])\n    return costs\n",
        "num_ids": 543
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        l = [1, 1, 1]\n        for i in range(n - 1):\n            l.append(l[-3] + l[-2] + l[-1])\n        return l\n",
        "num_ids": 101
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1, 1]\n    if n == 2:\n        return [1, 1, 2]\n    s = [1, 1, 1]\n    for i in range(3, n+1):\n        s.append(s[-1] + s[-2] + s[-3])\n    return s\n",
        "num_ids": 99
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    tribonacci_sequence = [1, 2, 1]\n    if n == 0:\n        return tribonacci_sequence\n    for i in range(3, n + 1):\n        tribonacci_sequence.append(sum(tribonacci_sequence[-3:]))\n    return tribonacci_sequence\n",
        "num_ids": 77
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    trib = [1, 3]\n    for i in range(2, n + 1):\n        trib.append(((trib[-1] + trib[-2]) + trib[-2]) * (i - 2))\n    return trib\n",
        "num_ids": 60
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #base cases\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 1, 1]\n    \n    #recurrence\n    next = [1, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next.append(next[i - 1] + next[i - 2] + next[i - 3])\n        else:\n            next.append(next[i - 1] + next[i - 2] + next[i - 3] + next[i - 4])\n    return next\n",
        "num_ids": 158
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        numbers = [1, 1, 2]\n        for i in range(3, n + 1):\n            numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3])\n        return numbers\n",
        "num_ids": 103
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [3]\n    else:\n        result = [1]\n        current_value = 3\n        for _ in range(n - 1):\n            result.append(current_value)\n            previous_values = [current_value - 1, current_value - 2, current_value + 1]\n            previous_values = [x for x in previous_values if x > 0]\n            current_value = sum(previous_values)\n        return result",
        "num_ids": 129
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    trib = [1, 3, 2, 0]\n    res = [1]\n    for i in range(1, n):\n        res.append(trib[0] + trib[1] + trib[2])\n        trib[0], trib[1], trib[2] = trib[1], trib[2], trib[0] + trib[1] + trib[2]\n    return res",
        "num_ids": 119
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seq = [0, 1, 1, 2]\n    if n < 4:\n        return seq[:n + 1]\n    for i in range(3, n + 1):\n        seq.append(sum(seq[-3:]))\n    return seq\n",
        "num_ids": 62
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return trib(n)[:-1]\n",
        "num_ids": 11
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return product(int(c) for c in str(n) if int(c) % 2)\n",
        "num_ids": 25
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 10: return n\n    else:\n        s = str(n)\n        l = len(s)\n        return reduce(lambda x,y: x*y, map(int, s[1:l:2]))\n",
        "num_ids": 57
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    digits = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            digits *= int(d)\n    return digits\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"\"\"\n    The example above can be rewritten as follows:\n    def digits(n):\n        res = 1\n        while n:\n            res *= n%10\n            n /= 10\n        return res\n    \"\"\"\n    n = abs(n)\n    res = 1\n    while n:\n        res *= n%10\n        n //= 10\n    return res if n == 1 else 0\n",
        "num_ids": 95
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 1\n    while n > 0:\n        res *= n % 10\n        n //= 10\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    else:\n        a = n // 10\n        b = n % 10\n        if b % 2 == 0:\n            return 0\n        else:\n            return b * digits(a)\n",
        "num_ids": 56
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def prod(l):\n        return reduce(lambda x, y: x * y, l, 1)\n",
        "num_ids": 26
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i])%2!= 0:\n            result = result * int(str(n)[i])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    d = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            d *= int(i)\n    return d\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = str(n)\n    return reduce(lambda x,y:int(x)*int(y), filter(lambda x: x%2, s))\n",
        "num_ids": 38
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(string)\n    start = 0\n    end = 0\n    for i in range(n):\n        if string[i] == '[':\n            start += 1\n        elif string[i] == ']':\n            end += 1\n        if start == end:\n            return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 78
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return True\n    elif string[0] == '[' and string[-1] == ']':\n        substring = string[1:-1]\n        return is_nested(substring)\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    brackets = []\n    for s in string:\n        if s == '[' or s == ']':\n            brackets.append(s)\n        elif s == ')':\n            if len(brackets)!= 0:\n                brackets.pop()\n            else:\n                return False\n        elif s == '(':\n            brackets.append(s)\n        else:\n            return False\n    \n    return len(brackets) == 0\n",
        "num_ids": 110
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    opening = '([{'\n    closing = ')]}'\n    opening_stack = []\n    for bracket in string:\n        if bracket in opening:\n            opening_stack.append(opening.index(bracket))\n        elif bracket in closing:\n            if not opening_stack:\n                return False\n            if closing.index(bracket)!= opening_stack.pop():\n                return False\n    return not opening_stack\n",
        "num_ids": 102
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #O(n)\n    #O(n)\n    #O(n)\n    brackets = []\n    for bracket in string:\n        if bracket == '[' or bracket == ']' or bracket == ']':\n            brackets.append(bracket)\n    #print(brackets)\n    nested = False\n    if len(brackets) == 0:\n        return False\n    if len(brackets) % 2 == 0:\n        return False\n    for i in range(0, len(brackets), 2):\n        #print(brackets[i:i+2])\n        if brackets[i] == '[':\n            if brackets[i+1] == ']':\n                nested = True\n    return nested\n",
        "num_ids": 172
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    open = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            open.append(i)\n        elif string[i] == \"]\":\n            if not open:\n                return False\n            del open[len(open) - 1]\n",
        "num_ids": 70
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for letter in string:\n        if letter == '[':\n            count += 1\n        elif letter == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    open_bracket = ['[', '{', '(']\n    close_bracket = [']', '}', ')']\n    stack = []\n    for i in string:\n        if i in open_bracket:\n            stack.append(i)\n        elif i in close_bracket:\n            if len(stack) == 0:\n                return False\n            popped = stack.pop()\n            if i == ']' and popped!= '[':\n                return False\n            elif i == '}' and popped!= '{':\n                return False\n            elif i == ')' and popped!= '(':\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "num_ids": 170
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    for n in lst:\n        sum += n**2\n    return int(sum)\n",
        "num_ids": 28
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(map(lambda x: round(x**2), lst))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([float(i)**2 for i in lst])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = 0\n    for i in lst:\n        s += math.ceil(i)**2\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for num in lst:\n        result += math.ceil(num)**2\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    for num in lst:\n        sum += math.floor(num * 100) ** 2\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(i ** 2 for i in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([float(math.ceil(x))**2 for x in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def sum_squares_helper(lst):\n        if len(lst) == 1:\n            return lst[0]**2\n        else:\n            return lst[0]**2 + sum_squares_helper(lst[1:])\n",
        "num_ids": 65
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if txt == \"\" or txt[-1] in \"!?.\":\n        return False\n    elif txt[-1] in \"0123456789\":\n        return False\n    elif txt[-1] not in \"abcdefghijklmnopqrstuvwxyz\":\n        return False\n    else:\n        return True\n",
        "num_ids": 86
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not txt:\n        return False\n    if txt[-1].isalpha():\n        return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha():\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in'':\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in txt[:-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha()\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if txt[-1] in \"abcdefghijklmnopqrstuvwxyz\" and txt[-1] not in \"abcdefghijklmnopqrstuvwxyz \":\n        return True\n    return False\n    pass\n    \n",
        "num_ids": 66
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha():\n            if txt.count(' ') == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = len(arr)\n    for i in range(l-2, -1, -1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    length = len(arr)\n    \n    for i in range(length):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return i - 1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def lis(arr):\n        max_idx = -1\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                max_idx = i\n        return max_idx\n    return lis(arr)",
        "num_ids": 68
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr_dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in arr_dict:\n            arr_dict[arr[i]] = i\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n < 2: return -1\n    for i in range(n-1):\n        if arr[i] >= arr[i+1]: return -1\n    return i",
        "num_ids": 50
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return -1\n",
        "num_ids": 16
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return search_for_max(arr, lambda x,y: x <= y)\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return -1\n",
        "num_ids": 12
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def largest_less_than_or_equal(arr, x):\n        \"\"\"Return the index of the largest element in arr that is less than\n        or equal to x.\"\"\"\n        for i in range(len(arr)):\n            if arr[i] <= x:\n                return i\n",
        "num_ids": 68
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def to_int(a):\n        try:\n            return int(a)\n        except ValueError:\n            return a\n",
        "num_ids": 31
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    negative_list = []\n    positive_list = []\n    for i in lst:\n        if i < 0:\n            negative_list.append(i)\n        else:\n            positive_list.append(i)\n    if len(negative_list) == 0:\n        negative = None\n    else:\n        negative = max(negative_list)\n",
        "num_ids": 85
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = [x for x in lst if x < 0]\n    if not lst:\n        return None, None\n    else:\n        return max(lst), min(lst)\n",
        "num_ids": 48
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pos = neg = None\n    for i in lst:\n        if i > 0 and pos == None:\n            pos = i\n        elif i < 0 and neg == None:\n            neg = i\n    return (pos, neg)\n",
        "num_ids": 57
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = None, None\n    for num in lst:\n        if num < 0:\n            if result[0] == None:\n                result = num, None\n            elif result[0] < num:\n                result = num, result[0]\n        elif num > 0:\n            if result[1] == None:\n                result = None, num\n            elif result[1] > num:\n                result = None, num\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Negative_lst = list(filter(lambda x: x < 0, lst))\n    # Positive_lst = list(filter(lambda x: x >= 0, lst))\n    # return (max(Negative_lst), min(Positive_lst))\n    return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x >= 0, lst)))\n",
        "num_ids": 98
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None:\n                a = num\n            elif num > a:\n                a = num\n        elif num > 0:\n            if b is None:\n                b = num\n            elif num < b:\n                b = num\n    return (a, b)\n",
        "num_ids": 92
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # if len(lst) == 0:\n    #     return (None, None)\n    # elif len(lst) == 1:\n    #     return (lst[0], None)\n    # else:\n    #     return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n",
        "num_ids": 88
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        negatives = []\n        positives = []\n        for i in lst:\n            if i < 0:\n                negatives.append(i)\n            elif i > 0:\n                positives.append(i)\n        if len(negatives) == 0:\n            return (None, max(positives))\n        else:\n            return (max(negatives), min(positives))\n",
        "num_ids": 117
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    biggest = None\n    smallest = None\n",
        "num_ids": 13
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, float):\n        return max(a, b)\n    elif isinstance(a, int):\n        return max(a, b)\n    elif isinstance(a, str):\n        if '.' in a:\n            return max(float(a), float(b))\n        elif ',' in a:\n            return max(int(a), int(b))\n    return None\n",
        "num_ids": 110
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a == b:\n        return None\n    if type(a) == type(b):\n        if type(a) == str:\n            a = float(a.replace(',', '.'))\n        return a\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    return a if a > b else b\n    # return max(a, b)\n",
        "num_ids": 109
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not type(a) == type(b):\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n    return max(a, b)\n",
        "num_ids": 58
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == b:\n        return None\n    elif type(a) == str and type(b) == str:\n        a, b = float(a), float(b)\n    elif type(a) == str or type(b) == str:\n        return type(a) == type(b)\n    else:\n        a, b = float(a), float(b)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 111
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # create a function that takes two values\n    def check_type(value):\n        # check if its a number\n        if isinstance(value, int) or isinstance(value, float):\n            # return the larger of the two\n            return max(value, b)\n        # or if its a string\n        elif isinstance(value, str):\n            # if the string is less than the value, return the value\n            if float(value) > float(b):\n                return value\n            else:\n                # otherwise, return the larger string\n                return max(value, b)\n",
        "num_ids": 136
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        a, b = float(a), float(b)\n    elif not isinstance(a, (float, int)):\n        a = float(a)\n    elif not isinstance(b, (float, int)):\n        b = float(b)\n    return max(a, b)\n",
        "num_ids": 90
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == b:\n        return None\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    else:\n        return max(a, b)\n",
        "num_ids": 80
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2!= 0 or n < 4:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 4:\n        return False\n    return sum(x for x in range(4, n + 1, 2) if x % 2 == 0) == n\n",
        "num_ids": 40
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    for i in range(1,n):\n        if n - i in even_numbers and i in even_numbers:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if n%2 == 0 and n <= 0:\n        return False\n    \n    # base case\n    if n <= 2:\n        return True\n    \n    # check for even numbers\n    if n % 2 == 0:\n        return is_equal_to_sum_even(n//2)\n    \n    # check for positive integers\n    for i in range(3, n, 2):\n        if is_equal_to_sum_even(n-i):\n            return True\n    \n    # No answer found\n    return False\n",
        "num_ids": 128
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(2,n//2+1):\n        if n - i*2 > 0:\n            if (n - i*2) % 2 == 0:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all([\n        n % 2 == 0,\n        n / 2 % 2 == 0,\n        n / 4 % 2 == 0\n    ])",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n % 2 == 0 and sum(range(2, n, 2)) == n\n",
        "num_ids": 22
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(2,(n//2)+1):\n        if n - i*2 == i and (n - i*2) % 2 == 0:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 1 if n < 2 else n * special_factorial(n-1)\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 32
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    elif n > 1:\n        return n * special_factorial(n - 1)\n    else:\n        return None\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n > 0:\n        return n * special_factorial(n - 1)\n    else:\n        return 1\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = 1\n    for i in range(n):\n        res *= (n-i)\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n > 1:\n        return n * special_factorial(n - 1)\n    elif n == 1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    special_factorial = 1\n    for i in range(1,n):\n        special_factorial = special_factorial * i\n",
        "num_ids": 33
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if '_' in text:\n        text = text.replace(' ', '_')\n    if'' in text:\n        consecutive_spaces = False\n        for i in range(len(text)-1):\n            if text[i] =='' and text[i+1] =='':\n                consecutive_spaces = True\n            if consecutive_spaces == False:\n                text = text.replace(text[i], text[i]+text[i+1], 1)\n            else:\n                text = text.replace(text[i], '-', 1)\n    return text\n",
        "num_ids": 140
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    text = text.replace(\" \", \"_\")\n    text = text.replace(\"   \", \"-\")\n    return text\n    \ndef get_num_seqs(num_seqs):\n    \"\"\"\n    Given an integer num_seqs, return a string representing the number \n    of sequences as a number followed by a single character, as in \n    the following examples:\n    get_num_seqs(1) == \"1\"\n    get_num_seqs(2) == \"2\"\n    get_num_seqs(3) == \"3\"\n    \"\"\"\n    if num_seqs == 1:\n        return str(num_seqs)\n    elif num_seqs == 2:\n        return str(num_seqs) + \"_\"\n    else:\n        return str(num_seqs) + \"-\"\n    \ndef extract_spans(span_list):\n    \"\"\"\n    Given a list of pairs of integers, [1, 2], [2, 4], [3, 6]..., \n    extract a list of all consecutive sub-lists. For example, \n    \n    extract_spans([1, 2]) == [[1, 2]]\n    extract_spans([1, 2, 4]) == [[1, 2], [2, 4]]\n    extract_spans([1, 2, 4, 5]) == [[1, 2], [2, 4], [4, 5]]\n    extract_spans([1, 2, 4, 5, 6]) == [[1, 2], [2, 4], [4, 5], [5, 6]]\n    extract_spans([1, 2, 4, 5, 6, 7]) == [[1, 2], [2, 4], [4, 5], [5, 6], [6, 7]]\n    extract_spans([]) == []\n    extract_spans([1,2]) == []\n    extract_spans([1,2,3]) == []\n    \"\"\"\n    \n    def spans_helper(span_list, span):\n        if span_list == []:\n            return [span]\n        elif span_list[0][0] == span[0]:\n            return spans_helper(span_list[1:], span)\n        elif span_list[0][0] < span[0]:\n            return spans_helper(span_list[1:], span)\n        else:\n            return spans_helper(span_list[1:], span) + [span_list[0]]\n    return spans_helper(span_list, [span_list[0], span_list[1]])\n    \ndef get_target_string(span_list, target_label):\n    \"\"\"\n    For a given span_list, extract the string corresponding to the \n    target label, e.g., for span_list = [[1, 2], [3, 5]], target_label = \n    \"NE\" --> \"NE\"\n    target_string(\"NE\", span_list) == \"NE\"\n    \"\"\"\n    return \"\".join([target_label for i, j in span_list])\n",
        "num_ids": 730
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    text = re.sub(\"[ ]+\", \"_\", text)\n    text = re.sub(\"[ ]+\", \" \", text)\n    \n    return text\n    \n",
        "num_ids": 43
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return re.sub(r\"\\s{2,}\", \"_\", text)\n",
        "num_ids": 21
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def replace_spaces(s):\n        return ''.join(s.split(' '))\n    def replace_dashes(s):\n        return '-'.join(s.split(' '))\n",
        "num_ids": 48
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return re.sub(r'[\\s]+', '_', text)\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    space_counts = {' ':0, '\\t':0, '\\n':0}\n    for i in range(0, len(text)):\n        if text[i] =='':\n            space_counts[' '] += 1\n        if text[i] == '\\t':\n            space_counts['\\t'] += 1\n        if text[i] == '\\n':\n            space_counts['\\n'] += 1\n    \n    \n    \n    for i in range(0,len(text)):\n        if space_counts[' '] >= 2:\n            text = text.replace(' ', '_')\n        if space_counts['\\t'] >= 2:\n            text = text.replace('\\t', '-')\n        if space_counts['\\n'] >= 2:\n            text = text.replace('\\n', '-')\n    return text\n",
        "num_ids": 216
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "num_ids": 11
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text == \"\":\n        return text\n    elif text.count(\" \") == 0:\n        return text\n    else:\n        space_marker = \"_\"\n        while space_marker in text:\n            text = text.replace(space_marker, \"_\", 1)\n        if text.count(\" \") == 0:\n            return text\n        else:\n            return text\n",
        "num_ids": 93
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # this is the new text\n    fixed_text = \"\"\n    \n    # iterate over the string and add the characters to the new text\n    for char in text:\n        if char == \" \":\n            fixed_text += \"_\"\n        else:\n            fixed_text += char\n    \n    # return the new string\n    return fixed_text\n",
        "num_ids": 85
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    def check(name):\n        is_name_valid = True\n        if not name.isdigit():\n            if name.find('.') == -1:\n                is_name_valid = False\n            elif name.count('.') > 1:\n                is_name_valid = False\n            elif name.find('.') == 0:\n                if name[1:].strip().isalpha():\n                    is_name_valid = False\n                elif name[1:].strip().isdigit():\n                    is_name_valid = False\n                elif name[1:].strip().isalpha() and name[0].lower()!= 'a':\n                    is_name_valid = False\n            elif name.find('.') > 0:\n                if name[:name.find('.')].strip().isalpha():\n                    is_name_valid = False\n                elif name[:name.find('.')].strip().isdigit():\n                    is_name_valid = False\n                elif name[:name.find('.')].strip().isalpha() and name[0].lower()!= 'a':\n                    is_name_valid = False\n            if is_name_valid:\n                return 'Yes'\n        return 'No'\n",
        "num_ids": 294
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    valid_name = False\n    if len(file_name) > 3:\n        for i in file_name:\n            if i.isdigit():\n                valid_name = False\n    elif file_name.find('.')!= -1:\n        valid_name = True\n    else:\n        valid_name = False\n    if valid_name:\n        if file_name[0] in 'abcdefghijklmnopqrstuvwxyz':\n            if file_name[1]!= '.':\n                if file_name[2] in 'abcdefghijklmnopqrstuvwxyz':\n                    if file_name[-3:] in ['txt', 'exe', 'dll']:\n                        return 'Yes'\n    return 'No'\n",
        "num_ids": 185
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    error_msg = \"File name is invalid\"\n    invalid_chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '.']\n",
        "num_ids": 57
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    invalid = file_name.count(\".\")!= 1\n    # TODO\n    \n",
        "num_ids": 25
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    def file_name_checker(file_name):\n        \"\"\"docstring\"\"\"\n        \n        if file_name.isdigit():\n            return 'No'\n        elif '.' not in file_name:\n            return 'No'\n        elif file_name[:file_name.index('.')] == '':\n            return 'No'\n        elif file_name[file_name.index('.')+1:].lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        else:\n            return 'Yes'\n    \n    return file_name_checker(file_name)\n    ",
        "num_ids": 152
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    valid_file_name = False\n    for i in range(0, len(file_name)):\n        if not file_name[i].isdigit():\n            valid_file_name = True\n            break\n    if not file_name.count(\".\") == 1:\n        valid_file_name = False\n    else:\n        before, after = file_name.split(\".\")\n        if before == \"\" or before[0].isalpha() == False:\n            valid_file_name = False\n    if after == \"txt\" or after == \"exe\" or after == \"dll\":\n        valid_file_name = True\n    return valid_file_name\n",
        "num_ids": 155
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_valid(file_name):\n        if re.search('\\d', file_name):\n            return 'No'\n        if re.search('\\.', file_name):\n            if re.search('[a-zA-Z]', file_name):\n                return 'Yes'\n            else:\n                return 'No'\n        return 'No'\n    return is_valid(file_name)\n",
        "num_ids": 99
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    file_name = file_name.strip()\n    if len(file_name) == 0:\n        return \"No\"\n    elif not file_name.isdigit():\n        if file_name.count('.')!= 1:\n            return \"No\"\n        else:\n            if file_name[0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                return \"No\"\n            if file_name[file_name.index('.')+1:] not in [\"txt\", \"exe\", \"dll\"]:\n                return \"No\"\n    else:\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 169
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if re.search(r'[0-9]', file_name) and re.search(r'[a-zA-Z]', file_name) and file_name.count('.') == 1:\n        if (re.search(r'[a-zA-Z]\\.[a-zA-Z]', file_name)) and (re.search(r'[a-zA-Z]\\.[a-zA-Z][a-zA-Z]', file_name)):\n            if re.search(r'[a-zA-Z]\\.[a-zA-Z][exe|dll]', file_name):\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 193
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 'Yes' if len(re.findall(r'[0-9]', file_name)) <= 3 \\\n             and file_name.count('.') == 1 \\\n             and file_name[0] in string.ascii_letters \\\n             and file_name.split('.')[1] in ['exe', 'dll', 'txt'] else 'No'\n",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    for i in range(len(lst)):\n        if i%4 == 0:\n            res += lst[i]**3\n        elif i%3 == 0:\n            res += lst[i]**2\n        else:\n            res += lst[i]\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(x**2 if i%3==0 else x**3 if i%4==0 else x for i, x in enumerate(lst))\n",
        "num_ids": 38
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i]**2 for i in range(len(lst)) if i % 3 == 0 or i % 4 == 0 and i % 3!= 0])\n",
        "num_ids": 43
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (i%3 == 0 and i%4!= 0):\n            sum += lst[i]**2\n        elif (i%3!= 0 and i%4 == 0):\n            sum += lst[i]**3\n        elif (i%3 == 0 and i%4 == 0):\n            sum += lst[i]**4\n        else:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 121
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i]**2 if (i%3)%4==0 else lst[i] for i in range(len(lst))])",
        "num_ids": 39
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_lst = []\n    for i,x in enumerate(lst):\n        if i % 3 == 0:\n            new_lst.append(x**2)\n        elif i % 4 == 0:\n            new_lst.append(x**3)\n        else:\n            new_lst.append(x)\n    return sum(new_lst)\n",
        "num_ids": 92
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    output = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            if index % 4!= 0:\n                output += value ** 2\n        elif index % 4 == 0:\n            output += value ** 3\n        else:\n            continue\n",
        "num_ids": 69
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(x**2 if i%3==0 else x*3 for i,x in enumerate(lst))\n",
        "num_ids": 30
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sentence = sentence.split(\" \")\n    if len(sentence) == 1:\n        return sentence[0]\n    return \"\".join([word for word in sentence if len(prime_factors(len(word))) == 1])",
        "num_ids": 56
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not sentence:\n        return\n    words = sentence.split(\" \")\n    words = sorted([w for w in words if len(w) > 1])\n    return \"\".join(words)\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join([word for word in sentence.split(' ') if len(word) > 1])\n",
        "num_ids": 26
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # import string\n    # words = sentence.split()\n    # sorted_words = [w for w in words if len(w) > 1]\n    # sorted_words = sorted([w for w in words if len(w) > 1])\n    # return''.join(sorted_words)\n    # return''.join(sorted(words, key=len))\n    return''.join(sorted(set([w for w in sentence.split() if len(w) > 1]), key=len))\n",
        "num_ids": 117
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO: implement me\n    # return ''.join([x for x in sentence.split(' ') if len(x) > 1])\n",
        "num_ids": 35
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join(sorted(set(list(sentence)), key=len, reverse=True)[:len(sentence)])\n",
        "num_ids": 33
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if (numerator * denominator) % n == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from fractions import Fraction\n",
        "num_ids": 8
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return eval(str(x) +'/'+ str(n)) == int(eval(str(x) +'/'+ str(n)))\n",
        "num_ids": 35
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(x) == 0:\n        return False\n    if n == \"1\" or n == \"0\":\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n",
        "num_ids": 31
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = x.split(\"/\")\n    b = n.split(\"/\")\n    a = int(a[0])\n    b = int(b[0])\n    c = int(a/b)\n    return a == b*c\n    \nassert simplify(\"1/5\", \"5/1\") == True\nassert simplify(\"1/6\", \"2/1\") == False\nassert simplify(\"7/10\", \"10/2\") == False\nassert simplify(\"11/14\", \"15/14\") == True\nassert simplify(\"11/14\", \"15/21\") == False\nassert simplify(\"5/20\", \"10/2\") == False\nassert simplify(\"14/14\", \"14/14\") == True\nassert simplify(\"3/4\", \"4/3\") == True\nassert simplify(\"3/4\", \"5/3\") == False\nassert simplify(\"0/4\", \"2/3\") == True\nassert simplify(\"9/10\", \"10/3\") == True\nassert simplify(\"1/3\", \"3/5\") == True\nassert simplify(\"1/3\", \"5/7\") == False\nassert simplify(\"1/3\", \"4/7\") == True\nassert simplify(\"1/3\", \"2/7\") == False\nassert simplify(\"1/3\", \"3/7\") == True\nassert simplify(\"1/3\", \"1/7\") == False\nassert simplify(\"1/3\", \"3/7\") == True\nassert simplify(\"1/3\", \"2/7\") == False\nassert simplify(\"1/3\", \"2/5\") == True\nassert simplify(\"1/3\", \"4/5\") == False\nassert simplify(\"1/3\", \"6/5\") == False\nassert simplify(\"1/3\", \"5/7\") == False\nassert simplify(\"1/3\", \"7/5\") == False\nassert simplify(\"1/3\", \"1/7\") == False\nassert simplify(\"1/3\", \"3/7\") == True\nassert simplify(\"1/3\", \"2/7\") == False\nassert simplify(\"1/3\", \"4/7\") == True\nassert simplify(\"1/3\", \"6/7\") == False\nassert simplify(\"1/3\", \"3/7\") == True\nassert simplify(\"1/3\", \"5/7\") == False\nassert simplify(\"1/3\", \"7/7\") == True\nassert simplify(\"1/3\", \"10/7\") == False\nassert simplify(\"1/3\", \"9/7\") == False\nassert simplify(\"1/3\", \"2/7\") == True\nassert simplify(\"1/3\", \"4/7\") == False\nassert simplify(\"1/3\", \"6/7\") == False\nassert simplify(\"1/3\", \"3/7\") == True\nassert simplify(\"1/3\", \"7/7\") == True\nassert simplify(\"1/3\", \"10/7\") == False\nassert simplify(\"1/3\", \"11/7\") == False\nassert simplify(\"1/3\", \"14/7\") == False\nassert simplify(\"1/3\", \"15/7\") == False\nassert simplify(\"1/3\", \"16/7\") == False\nassert simplify(\"1/3\", \"17/7\") == False\nassert simplify(\"1/3\", \"18/7\") == False\nassert simplify(\"1/3\", \"19/7\") == False\nassert simplify(\"1/3\", \"2/7\") == True\nassert simplify(\"1/3\", \"20/7\") == False\nassert simplify(\"1/3\", \"5/7\") == False\nassert simplify(\"1/3\", \"7/7\") == True\nassert simplify(\"1/3\", \"15/7\") == False\nassert simplify(\"1/3\", \"20/7\") == False\nassert simplify(\"1/3\", \"25/7\") == False\nassert simplify(\"1/3\", \"30/7\") == False\nassert simplify(\"1/3\", \"40/7\") == False\nassert simplify(\"1/3\", \"60/7\") == False\nassert simplify(\"1/3\", \"120/7\") == False\nassert simplify(\"1/3\", \"140/7\") == False\nassert simplify(\"1/3\", \"160/7\") == False\nassert simplify(\"1/3\", \"200/7\") == False\nassert simplify(\"1/3\", \"3/7\") == False\nassert simplify(\"1/3\", \"5/7\") == False\nassert simplify(\"1/3\", \"10/7\") == False\nassert simplify(\"",
        "num_ids": 1024
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return eval(str(int(x) * n)) == int(x) * n\n",
        "num_ids": 22
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    numerator, denominator = x.split(\"/\")\n    return int(numerator) * int(n) == int(denominator)\n",
        "num_ids": 43
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def decimal_to_whole_fraction(x):\n        \"\"\"\n        Convert decimal to fraction.\n        \"\"\"\n        a = x.split('/')\n        n = int(a[0])\n        d = int(a[1])\n        return n, d\n",
        "num_ids": 66
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def f(x, n):\n        a = int(x)\n        b = int(n)\n        return a * b == int(x * n)\n",
        "num_ids": 39
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda i: sum(int(c) for c in str(abs(i))))\n",
        "num_ids": 29
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(nums, key=lambda num: sum([int(digit) for digit in str(num)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(abs(x))]))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n",
        "num_ids": 24
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(abs(x))]))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sums = {}\n    for i, num in enumerate(nums):\n        s = sum(map(int, str(num)))\n        if s in sums:\n            nums[sums[s]], nums[i] = nums[i], nums[sums[s]]\n            sums[s] += 1\n        else:\n            sums[s] = i\n    return nums\n",
        "num_ids": 98
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = sorted(nums, key=lambda x: [int(str(x)[0]), x])\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if nums is None or len(nums) == 0:\n        return 0\n    \n    return sum(1 for num in nums if num > 10 and (int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1))",
        "num_ids": 68
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(num > 10 and num % 2 == 1 for num in nums)\n",
        "num_ids": 21
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    length = len(nums)\n    count = 0\n    for i in range(length):\n        if nums[i] > 10 and (nums[i] % 10 == 1 or nums[i] % 10 == 3 or nums[i] % 10 == 5 or nums[i] % 10 == 7 or nums[i] % 10 == 9):\n            count += 1\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for x in nums if x > 10 and x % 2 and x / 10 % 2)\n",
        "num_ids": 27
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(1 for num in nums if num > 10 and num % 2 == 1 and num % 10 % 2 == 1)\n",
        "num_ids": 31
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for n in nums:\n        if n > 10 and (n%10%2==1 and n%10!=0):\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([n for n in nums if (n > 10 and (n % 10) in [1, 3, 5, 7, 9])])\n",
        "num_ids": 36
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and (i%10)%2 == 1 and (i%100)%10%2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    odds = []\n    for num in nums:\n        if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            odds.append(num)\n    return len(odds)\n",
        "num_ids": 70
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([a[i] + a[j] + a[k] for i in range(n - 1) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0])",
        "num_ids": 93
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = [0] * n\n    counter = 0\n    for i in xrange(1, n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            counter += 1\n    return counter\n",
        "num_ids": 62
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = [i * i - i + 1 for i in range(n)]\n    return sum(a[i] * a[j] * a[k] for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] + a[j] + a[k] % 3 == 0)\n",
        "num_ids": 88
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    if n == 1:\n        return 0\n    a = []\n    for i in xrange(1, n):\n        a.append(i * i - i + 1)\n    for i in xrange(0, n - 1):\n        for j in xrange(i + 1, n):\n            if a[i] + a[j] == 0:\n                count += 1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = [0] * n\n    count = 0\n    for i in xrange(n):\n        a[i] = i * i - i + 1\n    for i in xrange(n):\n        for j in xrange(i + 1, n):\n            if a[i] + a[j] + a[j] == 3 * a[i]:\n                count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = 0\n    a = [i * i - i + 1 for i in xrange(1, n + 1)]\n    for i in xrange(1, n + 1):\n        for j in xrange(i + 1, n + 1):\n            for k in xrange(j + 1, n + 1):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    res += 1\n    return res",
        "num_ids": 106
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    a = [i * i - i + 1 for i in range(n)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1) if (a[i] + a[j] + a[j + 1]) % 3 == 0])\n",
        "num_ids": 82
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    a = [x * x - x + 1 for x in range(1, n)]\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    if n < 3: return 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            k = n - i - j\n            if i < j < k and a[i] + a[j] + a[k] % 3 == 0:\n                result += 1\n    return result\n",
        "num_ids": 87
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(i * i - i + 1 for i in range(1, n))\n",
        "num_ids": 22
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # sanitized input\n    planet1 = sanitize_planet_name(planet1)\n    planet2 = sanitize_planet_name(planet2)\n    planets = [\"Sun\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # if one of the planets is not in the list of planets, return empty tuple\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n",
        "num_ids": 120
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # Write your code here\n    sun = \"Sun\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    orbit_tuples = []\n",
        "num_ids": 62
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    planet_dict = {'Mercury': 0, 'Venus': 1, 'Earth': 2, 'Mars': 3, 'Jupiter': 4, 'Saturn': 5, 'Uranus': 6, 'Neptune': 7}\n    # first, convert the strings to lowercase and split the string into a list\n    planet1_lower = planet1.lower()\n    planet2_lower = planet2.lower()\n    planet1_list = planet1_lower.split(' ')\n    planet2_list = planet2_lower.split(' ')\n    # Now, we can work on the lists and compare them\n    planet1_list_compare = list()\n    planet2_list_compare = list()\n    for i in planet1_list:\n        if i in planet_dict.keys():\n            planet1_list_compare.append(i)\n    for i in planet2_list:\n        if i in planet_dict.keys():\n            planet2_list_compare.append(i)\n    planet1_list_sorted = sorted(planet1_list_compare)\n    planet2_list_sorted = sorted(planet2_list_compare)\n    # Now, we can join them together and return it\n    planet1_list_joined =''.join(planet1_list_sorted)\n    planet2_list_joined =''.join(planet2_list_sorted)\n    planet_1_list_joined = list()\n    planet_2_list_joined = list()\n    # Put the new joined strings into lists\n    for i in planet1_list_joined.split():\n        if i in planet_dict.keys():\n            planet_1_list_joined.append(i)\n    for i in planet2_list_joined.split():\n        if i in planet_dict.keys():\n            planet_2_list_joined.append(i)\n    # Now, we can compare the two lists\n    planet_1_list_joined_compare = list()\n    planet_2_list_joined_compare = list()\n    for i in planet_1_list_joined:\n        if i in planet_dict.keys():\n            planet_1_list_joined_compare.append(i)\n    for i in planet_2_list_joined:\n        if i in planet_dict.keys():\n            planet_2_list_joined_compare.append(i)\n    planet_1_list_sorted_compare = sorted(planet_1_list_joined_compare)\n    planet_2_list_sorted_compare = sorted(planet_2_list_joined_compare)\n    planet_1_list_joined_sorted_compare =''.join(planet_1_list_sorted_compare)\n    planet_2_list_joined_sorted_compare =''.join(planet_2_list_sorted_compare)\n    return (planet_1_list_joined_sorted_compare, planet_2_list_joined_sorted_compare)",
        "num_ids": 713
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if planet1 in PLANETS and planet2 in PLANETS:\n        return tuple(sorted(planets for planet, planets in ORBITS.items()\n            if planet1 in planets and planet2 in planets and planet!= planet1))\n    else:\n        return tuple()\n",
        "num_ids": 65
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return tuple()\n    return tuple(sorted([planet for planet in PLANETS\n        if any(p1 in orbit and p2 in orbit for orbit in ORBITS[planet])]))\n",
        "num_ids": 62
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if planet1.lower() == 'Mercury' or planet2.lower() == 'Mercury':\n        return ()\n    else:\n        planet1 = get_planet(planet1.lower())\n        planet2 = get_planet(planet2.lower())\n        \n        orbits = []\n        for i in planet1.orbits:\n            for j in planet2.orbits:\n                if i.lower() == j.lower():\n                    orbits.append(i.lower())\n        orbits.sort()\n        return tuple(orbits)\n    \ndef get_planet(planet):\n    '''\n    Returns the planet object with the corresponding name in the dictionary.\n    '''\n    planets = {'Mercury': Mercury, 'Venus': Venus, 'Earth': Earth,\n        'Mars': Mars, 'Jupiter': Jupiter, 'Saturn': Saturn,\n        'Uranus': Uranus, 'Neptune': Neptune}\n    try:\n        return planets[planet]\n    except:\n        return None\n",
        "num_ids": 239
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def bfs(planet1, planet2, visited):\n        if planet1 not in planets or planet2 not in planets:\n            return visited\n",
        "num_ids": 34
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    from itertools import zip_longest\n    def len_of_planet(s):\n        return len(s)\n",
        "num_ids": 30
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if planet1 == planet2: return ()\n    if planet1 not in planets or planet2 not in planets: return ()\n    planet1 = planets[planet1]\n    planet2 = planets[planet2]\n    sun = planets[\"Sun\"]\n    bf = lambda p1, p2: (p1[0]+p2[0], p1[1]+p2[1], p1[2]+p2[2])\n    ans = []\n    for p in planets.items():\n        if sun[0]-p[1][0] < p[1][0]-planet2[0] and sun[0]-p[1][0] > planet1[0]-p[1][0] and p[1][1] > planet2[1]:\n            ans.append(p[0])\n    return tuple(sorted(ans))\n",
        "num_ids": 194
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def key_sort(word):\n        return len(word)\n    return sorted(lst, key = key_sort)\n",
        "num_ids": 31
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def __remove_odd_length(lst):\n        \"\"\"\n        Remove odd length string from list.\n        \"\"\"\n        result = []\n        for string in lst:\n            if len(string) % 2 == 0:\n                result.append(string)\n        return result\n",
        "num_ids": 66
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #If the list contains duplicates, we want to remove them.\n    #O(n)\n    if len(lst) > len(set(lst)):\n        lst = sorted(lst, key=len)\n        lst = sorted(lst, key=lambda x: x[1])\n        lst = [lst[i][0] for i in range(0, len(lst), 2)]\n    #We want to remove the odd lengths from the list.\n    #O(n)\n    else:\n        lst = sorted(lst, key=len)\n        lst = sorted(lst, key=lambda x: x[1])\n        lst = [lst[i][0] for i in range(1, len(lst), 2)]\n    return lst\n",
        "num_ids": 191
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(list(set([x for x in lst if len(x) % 2 == 0])))",
        "num_ids": 26
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(list(filter(lambda x: len(x) % 2 == 0, lst)), key=len)\n",
        "num_ids": 29
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda x: (-len(x), x))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    res = [lst[0]]\n    for word in lst[1:]:\n        if len(word) % 2 == 0:\n            res.append(word)\n    res.sort()\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #print(n)\n    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \n",
        "num_ids": 37
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n-1, y, x)\n    else:\n        return x_or_y(n-1, x, y)\n",
        "num_ids": 60
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return x\n    return y",
        "num_ids": 17
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return y\n    else:\n        return x\n",
        "num_ids": 27
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n%2 == 0:\n        return y\n    else:\n        return x",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return y if n % 2 == 0 else x\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n%2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for number in lst:\n        if number > 0:\n            sum_of_squares += number * number\n    return sum_of_squares\n",
        "num_ids": 62
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = list(lst)\n    lst.reverse()\n    if len(lst) == 0:\n        return 0\n    count = 0\n    for x in lst:\n        if not (x % 2):\n            count += (x * x)\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([x**2 for x in lst if x%2])\n",
        "num_ids": 19
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum_of_squares = 0\n    for num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n        sum_of_squares += (num * num)\n    return sum_of_squares\n",
        "num_ids": 60
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = [i for i in lst if i>=0 and i%2==1]\n    return sum(i**2 for i in lst)\n",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #return sum([x * x for x in lst if x > 0 and x % 2 == 1])\n    \n    return sum([x * x for x in lst if x > 0 and x % 2 == 1])\n",
        "num_ids": 52
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if lst == []:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]*lst[0]\n    else:\n        return (lst[0]*lst[0]) + double_the_difference(lst[1:])\n",
        "num_ids": 72
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst:\n        return 0\n    \n    total = 0\n    for x in lst:\n        if x < 0:\n            continue\n        elif not x % 2:\n            total += x*x\n        \n    return total",
        "num_ids": 58
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return sum(map(lambda x: x**2, filter(lambda x: x%2!= 0, lst)))\n",
        "num_ids": 46
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([x ** 2 for x in lst if x % 2!= 0 and x > 0])\n",
        "num_ids": 26
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [abs(guess[i] - score) for i,score in enumerate(game)]\n",
        "num_ids": 25
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    guess=list(guess)\n    scores=list(game)\n    count=0\n    for i in range(len(guess)):\n        if guess[i]==scores[i]:\n            count+=1\n    for i in range(len(guess)):\n        if guess[i]!=scores[i]:\n            guess[i]+=scores[i]\n    return guess\n    \n",
        "num_ids": 102
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(game) == len(guess), \"arrays must be equal length\"\n",
        "num_ids": 22
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    correct = [0 for i in range(len(guess))]\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            correct[i] = 0\n        else:\n            correct[i] = abs(guess[i] - game[i])\n    return correct\n",
        "num_ids": 78
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    diff = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(guess[i] - game[i]))\n    return diff\n",
        "num_ids": 66
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not len(guess) == len(game):\n        return \"Error: guess and game must be of equal length\"\n    \n    arr = []\n    for i in range(len(guess)):\n        arr.append(abs(guess[i]-game[i]))\n    return arr\n",
        "num_ids": 72
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # this was my first solution\n    # arr_scores,arr_guesses = [],[]\n    # for score,guess in zip(game,guess):\n    #     arr_scores.append(score)\n    #     arr_guesses.append(guess)\n    # diff = []\n    # for i in range(len(arr_scores)):\n    #     if arr_guesses[i]==arr_scores[i]:\n    #         diff.append(0)\n    #     else:\n    #         diff.append(abs(arr_guesses[i]-arr_scores[i]))\n    # return diff\n",
        "num_ids": 156
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(guess)!= len(game):\n        raise IndexError\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 46
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert len(guess) == len(game), \"The guess and the score array must be of equal length\"\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 54
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    extensions_strength = []\n    for extension in extensions:\n        strength = 0\n        for character in extension:\n            if character.isupper():\n                strength += 1\n            elif character.islower():\n                strength -= 1\n        extensions_strength.append(strength)\n    return '%s.%s' % (class_name, extensions[extensions_strength.index(max(extensions_strength))])\n",
        "num_ids": 99
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # YOUR CODE HERE\n    strng = []\n    strength = 0\n    for i in extensions:\n        if i.count('A') > i.count('B') or i.count('A') == i.count('B'):\n            strng.append(i)\n            strength = strength + 1\n    strng.sort()\n    return class_name + '.' + strng[-1]\n",
        "num_ids": 97
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    strongest_extension = []\n    for ext in extensions:\n        ext_length = len(ext)\n        u_ext = ext.upper()\n        l_ext = ext.lower()\n        total_length = ext_length + u_ext + l_ext\n        upper_strength = sum(1 for c in u_ext if c.isupper())\n        lower_strength = sum(1 for c in l_ext if c.islower())\n        strength = upper_strength - lower_strength\n        if strength > 0:\n            strongest_extension.append((strength, ext))\n    strongest_extension.sort(key=lambda x: x[0], reverse=True)\n    return '%s.%s' % (class_name, strongest_extension[0][1])\n",
        "num_ids": 186
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return '{}.{}'.format(class_name, extensions[0])\n",
        "num_ids": 20
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(extensions) < 1:\n        return class_name\n    max_strength = 0\n    max_extension = extensions[0]\n    for extension in extensions:\n        strength = 0\n        for c in extension:\n            if c.isupper():\n                strength += 1\n            elif c.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            max_extension = extension\n    return class_name + '.' + max_extension\n",
        "num_ids": 120
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    strongest_extension = None\n    for extension in extensions:\n        extension_strength = sum(1 for letter in extension if letter.isupper()) - sum(1 for letter in extension if letter.islower())\n        if strongest_extension is None or extension_strength > strongest_extension[0]:\n            strongest_extension = (extension_strength, extension)\n    return class_name + '.' + strongest_extension[1]\n",
        "num_ids": 105
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    strength = 0\n    best = \"\"\n    for extension in extensions:\n        cap_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n        sm_count = 0\n        for letter in extension:\n            if letter.islower():\n                sm_count += 1\n        if cap_count - sm_count > strength:\n            best = extension\n            strength = cap_count - sm_count\n    return class_name + \".\" + best\n",
        "num_ids": 116
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    extension_strength = {}\n    for extension in extensions:\n        extension_strength[extension] = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    return '{0}.{1}'.format(class_name, max(extension_strength, key=extension_strength.get))",
        "num_ids": 86
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    extensions = sorted(extensions, key = lambda x: (-len(x), x))\n    return '%s.%s' % (class_name, extensions[0])",
        "num_ids": 42
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #replace this with your code\n    Extension_strength = []\n    for e in extensions:\n        Extension_strength.append((e, sum([c for c in e.lower() if c.isupper()])))\n    Extension_strength.sort(key=lambda x: -x[1])\n    return \"%s.%s\"%(class_name, Extension_strength[0][0])\n",
        "num_ids": 95
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Implement cycpattern_check.\n    for i in range(1,len(b)):\n        if b in a:\n            return True\n        else:\n            return False\n",
        "num_ids": 44
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(a) < len(b):\n        b = b[:len(a)]\n    if len(b) < len(a):\n        a = a[:len(b)]\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i+len(b)] == b:\n            return True\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = a.lower()\n    b = b.lower()\n    return bool(re.search(b, a))\n",
        "num_ids": 30
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(a) == 0 or len(b) == 0:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a == b:\n        return True\n    \n    \n    for i in range(1,len(a)):\n        if a[i:] in a[:i]:\n            return True\n        if a[-i:] in a[:-i]:\n            return True\n    \n    return False\n",
        "num_ids": 71
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a in b:\n        return True\n    if a in b+b:\n        return True\n    if a in b+b+b:\n        return True\n    if a in b+b+b+b:\n        return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a[len(a)-1]!= b[0]:\n        return False\n    if a == b:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a in b\n",
        "num_ids": 7
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = False\n    for i in range(1, len(a)):\n        if b in (a[i:] + a[:i]):\n            result = True\n            break\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(1,len(a)):\n        if b in a[i:] + a[:i]:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def even_count(num):\n        return sum([1 if num % 2 == 0 else 0 for num in str(num)])\n",
        "num_ids": 32
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [num/2, num % 2]",
        "num_ids": 12
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    even = 0\n    odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n",
        "num_ids": 56
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if num < 0:\n        return even_odd_count(-num)\n    digits = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in digits:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "num_ids": 91
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n",
        "num_ids": 87
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if num < 0:\n        num = abs(num)\n        even_count = 0\n        odd_count = 0\n        while num:\n            if num & 1:\n                odd_count += 1\n            else:\n                even_count += 1\n            num = num >> 1\n        return (even_count, odd_count)\n    else:\n        even_count = 0\n        odd_count = 0\n        while num:\n            if num & 1:\n                odd_count += 1\n            else:\n                even_count += 1\n            num = num >> 1\n        return (even_count, odd_count)\n",
        "num_ids": 146
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even, odd = 0, 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n",
        "num_ids": 53
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for digit in str(num):\n        result.append(int(digit))\n    return (result.count(0), result.count(2))\n",
        "num_ids": 41
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num < 0:\n        return even_odd_count(-num)\n    else:\n        even_digit = 0\n        odd_digit = 0\n        while num:\n            num, digit = divmod(num, 10)\n            if digit % 2 == 0:\n                even_digit += 1\n            else:\n                odd_digit += 1\n        return (even_digit, odd_digit)\n",
        "num_ids": 94
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num = abs(num)\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return even, odd\n",
        "num_ids": 57
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Input must be a positive integer\")\n",
        "num_ids": 25
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number > 1000:\n        raise ValueError('Number should be less than 1000')\n",
        "num_ids": 21
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = ''\n",
        "num_ids": 6
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    roman = \"\"\n    num_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n                90: 'x', 100: 'c', 400: 'cd', 500: 'd', 900: 'xc', 1000:'m'}\n",
        "num_ids": 81
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Define the dictionary of roman numerals\n    D = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n    # If the number is not in the dictionary, return None\n    if number not in D:\n        return None\n    # Else, get the letter equivalent from the dictionary\n    else:\n        return D[number]\n",
        "num_ids": 133
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if number <= 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xl'\n    if number == 12:\n        return 'xc'\n    if number == 13:\n        return 'xci'\n    if number == 14:\n        return 'xcii'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'x'\n    if number == 30:\n        return 'l'\n    if number == 40:\n        return 'c'\n    if number == 50:\n        return 'd'\n    if number == 60:\n        return 'cd'\n    if number == 70:\n        return 'd'\n    if number == 80:\n        return 'cd'\n    if number == 90:\n        return 'cm'\n    if number == 100:\n        return 'c'\n    if number == 200:\n        return 'cl'\n    if number == 300:\n        return 'cc'\n    if number == 400:\n        return 'cc'\n    if number == 500:\n        return 'cd'\n    if number == 600:\n        return 'cd'\n    if number == 700:\n        return 'd'\n    if number == 800:\n        return 'd'\n    if number == 900:\n        return 'd'\n    if number == 1000:\n        return'm'\n    if number > 1000:\n        return ''\n",
        "num_ids": 516
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # the max number of digits we need to convert\n    max_num_digits = math.ceil(math.log10(1000)) + 1\n    # the roman number to string mapping\n    to_string = {\n        1 : 'i',\n        4 : 'iv',\n        5 : 'v',\n        9 : 'ix',\n        10 : 'x',\n        40 : 'xl',\n        50 : 'l',\n        90 : 'xc',\n        100 : 'c',\n        400 : 'cd',\n        500 : 'd',\n        900 : 'cm',\n        1000 :'m'\n    }\n    # the roman number to digit mapping\n    to_digit = {\n        'i' : 1,\n        'iv' : 4,\n        'v' : 5,\n        'ix' : 9,\n        'x' : 10,\n        'xl' : 40,\n        'l' : 50,\n        'xc' : 90,\n        'c' : 100,\n        'cd' : 400,\n        'd' : 500,\n        'cm' : 900,\n        'm' : 1000\n    }\n    # base case\n    if number <= 0 or number > 1000:\n        return None\n    # the roman number\n    roman = ''\n    # the number we are currently converting\n    num = number\n    # we need to convert until we reach the number 0\n    for i in range(max_num_digits):\n        # we cannot add any roman numeral digits to the roman number\n        if to_digit[roman] < to_digit[str(num % 1000)]:\n            return None\n        # we add the roman numeral to the roman number\n        roman += to_string[to_digit[str(num % 1000)]]\n        # we divide by 1000 and get the number of times we need to multiply the roman number\n        num = num // 1000\n    return roman.lower()\n",
        "num_ids": 455
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('Incorrect input')\n",
        "num_ids": 31
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    roman_numerals = [\n        ['', '', '','m'],\n        ['', '', '', 'd'],\n        ['', '', '', 'cd'],\n        ['', '', '', 'c'],\n        ['', '', '', 'xc'],\n        ['', '', '', 'l'],\n        ['', '', '', 'x'],\n        ['', '', '', 'x'],\n        ['', '', '', 'x'],\n        ['', '', '', 'i'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', '', 'v'],\n        ['', '', ''",
        "num_ids": 1023
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError\n    if number == 1:\n        return 'i'\n    roman = ('', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix')\n    romans = []\n    for x in range(1, number + 1):\n        if x in [1, 10, 100, 1000]:\n            romans.append(roman[x])\n        elif x in [2, 20, 200, 2000]:\n            romans.append(roman[1])\n        elif x in [3, 30, 300, 3000]:\n            romans.append(roman[2])\n        elif x in [4, 40, 400, 4000]:\n            romans.append(roman[3])\n        elif x in [5, 50, 500, 5000]:\n            romans.append(roman[4])\n        elif x in [6, 60, 600, 6000]:\n            romans.append(roman[5])\n        elif x in [7, 70, 700, 7000]:\n            romans.append(roman[6])\n        elif x in [8, 80, 800, 8000]:\n            romans.append(roman[7])\n        elif x in [9, 90, 900, 9000]:\n            romans.append(roman[8])\n        else:\n            romans.append(roman[9])\n    return ''.join(romans).lower()\n",
        "num_ids": 353
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b)\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Three sides of a triangle is a right angle if the length of any one of the sides is equal to the sum of the other two sides\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n",
        "num_ids": 70
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code goes here\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (c**2 + a**2) == b**2\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Calculate the lengths of the sides\n    side_a = a\n    side_b = b\n    side_c = c\n    \n    # If any side length is greater than the sum of the other two, there are not 3 sides that can form a right angle\n    if ((a < (b+c)) or (b < (a+c)) or (c < (a+b))):\n        return False\n    \n    # Now we know that the three sides form a right angle\n    \n    # If the sum of any two sides is equal to the other side\n    elif ((a+b) == c or (b+c) == a or (a+c) == b):\n        return True\n    \n    # If the sum of any two sides is equal to half the other side\n    elif ((a+b) == (c/2) or (b+c) == (a/2) or (a+c) == (b/2)):\n        return True\n    \n    return False\n",
        "num_ids": 231
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # validate arguments\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Arguments must be greater than 0\")\n    if (a + b < c) or (a + c < b) or (b + c < a):\n        raise ValueError(\"Arguments must be non-negative and non-equal\")\n    # assuming one angle is right\n    return (a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2)\n",
        "num_ids": 127
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(words, key = lambda word: len(set(word)))[-1]\n",
        "num_ids": 23
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_len = 0\n    max_string = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_string = word\n    return max_string\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(words, key=lambda word: len(set(word)))[-1]\n",
        "num_ids": 23
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_len = 0\n    max_string = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_string = word\n    return max_string\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = []\n    for word in words:\n        l.append(len(set(word)))\n    return [s for s,v in sorted(zip(words,l),key=lambda x:x[1])][0]\n",
        "num_ids": 55
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return min(words, key=len)\n",
        "num_ids": 12
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_len = 0\n    max_word = None\n    for word in words:\n        length = len(set(word))\n        if length > max_len:\n            max_len = length\n            max_word = word\n    return max_word\n",
        "num_ids": 61
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(words, key=lambda x:len(set(x)))\n",
        "num_ids": 19
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def find(s1, s2):\n        if len(s1) == len(s2):\n            return s1 if s1 < s2 else s2\n        elif len(s1) > len(s2):\n            return s1\n        else:\n            return s2\n    return reduce(find, sorted(words))\n",
        "num_ids": 80
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # YOUR CODE HERE\n    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]\n",
        "num_ids": 41
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = number\n    while total < need:\n        total = total + remaining\n    return [total, need - total]\n",
        "num_ids": 30
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [ number + need, need - (number - remaining) ]\n",
        "num_ids": 17
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = number + (need - remaining)\n    if total > need:\n        return [need, 0]\n    else:\n        return [total, remaining - (need - total)]\n",
        "num_ids": 44
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n    ",
        "num_ids": 5
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if remaining < need:\n        return [number, 0]\n    else:\n        return [number + (need - remaining), remaining - need]",
        "num_ids": 36
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if number > need:\n        remaining = need\n        return [remaining, 0]\n    elif number < need:\n        return [number, remaining - number]\n    else:\n        return [need, 0]\n",
        "num_ids": 53
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [number + need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    total = number\n    counter = 0\n    while total < need:\n        total += min(remaining, need - total)\n        counter += 1\n    return [total, remaining - counter]\n",
        "num_ids": 48
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [number+need, remaining-need]\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    res = 0\n    for op, num in zip(operator, operand):\n        if op == '+':\n            res += num\n        elif op == '-':\n            res -= num\n        elif op == '*':\n            res *= num\n        elif op == '//':\n            res //= num\n        elif op == '**':\n            res **= num\n        else:\n            pass\n    return res\n",
        "num_ids": 109
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # code here\n    return operator[0](operand[0], operator[1](operand[1], operator[2](operand[2], operand[3])))\n",
        "num_ids": 42
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(operator) == len(operand) - 1\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i - 1] == '+':\n            result += operand[i]\n        elif operator[i - 1] == '-':\n            result -= operand[i]\n        elif operator[i - 1] == '*':\n            result *= operand[i]\n        elif operator[i - 1] == '//':\n            result //= operand[i]\n        elif operator[i - 1] == '**':\n            result **= operand[i]\n        else:\n            assert False\n    return result\n",
        "num_ids": 169
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Hint: use the built in sum function and operator list index to implement this function.\n",
        "num_ids": 22
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert len(operator) == len(operand) - 1\n    if len(operator) == 0:\n        return None\n    result = operand[0]\n    for i in range(1, len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "num_ids": 173
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Algebra Expression:\n    # expression = 'a' + 'b' + 'c'\n    # (a + b) * c\n    # = a + b + c\n    # = a + (b + c)\n    # = a + (b + c) + a\n    # = (a + b + c) + a\n    # = (a + b + c) + (a + (b + c))\n    # = (a + b + c) + (a + (b + c)) + a\n    # = (a + b + c) + (a + (b + c)) + a + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a)\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + (a + a) + (a + a) + a\n    # = (a + b + c) + (a + (b + c)) + a + (a + a) + ",
        "num_ids": 1025
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([operator[i] * operand[i] for i in range(len(operator))])\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = 0\n",
        "num_ids": 6
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def reverse(string, start, end):\n        while start < end:\n            string[start], string[end - 1] = string[end - 1], string[start]\n            start += 1\n            end -= 1\n    l = list(s)\n    if not l:\n        return \"\".join(l)\n    if l[0].isalpha():\n        reverse(l, 0, len(l) - 1)\n    else:\n        reverse(l, 0, len(l))\n    return \"\".join(l)\n",
        "num_ids": 125
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if s == \"\":\n        return \"\"\n    s = list(s)\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if char.isupper():\n                s[i] = char.lower()\n            else:\n                s[i] = char.upper()\n    return \"\".join(s)\n",
        "num_ids": 83
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s:\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return \"\".join(s)\n",
        "num_ids": 55
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    \"\"\"\n    def rev_in(s):\n        return s[::-1]\n    def swap(s):\n        return s.swapcase()\n    \n    if len(s) == 0:\n        return s\n    \n    if s.isalpha():\n        return swap(rev_in(s))\n    else:\n        return rev_in(s)\n    \"\"\"\n    \n    rev = []\n    for c in s:\n        if c.isalpha():\n            rev.append(c.swapcase())\n        else:\n            rev.append(c)\n    \n    return \"\".join(rev)\n",
        "num_ids": 150
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # or s.swapcase()\n    return \"\".join([x for x in s if x.isalpha()][::-1]).swapcase() or s[::-1]\n",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(c for c in s if c.isalpha()).swapcase()\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join([s[i].lower() if s[i].isalpha() else s[i] for i in range(len(s))])\n",
        "num_ids": 37
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return md5(text.encode()).hexdigest() if text else None\n",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text).hexdigest()\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if text is None or len(text) == 0:\n        return None\n    m = hashlib.md5(text)\n    return m.hexdigest()\n",
        "num_ids": 40
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(text, unicode):\n        text = unicode(text, 'utf8')\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 49
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n    return None\n",
        "num_ids": 25
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None\n",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    elif isinstance(text, bytes):\n        text = text.decode()\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 54
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if text:\n        return md5(text).hexdigest()\n    else:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(a, b+1):\n        if len(str(i)) % 2 == 0:\n            res.append(i)\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            res.append(i)\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    return [x for x in range(a, b, 2)]\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    evens = []\n    for n in range(a, b+1):\n        if n % 2 == 0:\n            evens.append(n)\n    return evens",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [ i for i in range(a, b + 1) if (i % 2 == 0 and i > 0) ]",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in range(a, b, 2)]\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Place your code here\n    #if b < a:\n    #    return []\n    #return [num for num in range(a,b+1) if num % 2 == 0]\n    return list(range(a, b+1))\n    \n",
        "num_ids": 61
    }
]