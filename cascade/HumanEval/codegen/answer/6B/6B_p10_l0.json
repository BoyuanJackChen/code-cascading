[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for index1, n1 in enumerate(numbers):\n        for index2, n2 in enumerate(numbers[index1 + 1 :]):\n            if n1 - n2 <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for number in numbers:\n        if number - threshold <= number and number <= number + threshold:\n            return True\n",
        "num_ids": 27
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Sort given numbers.\n    numbers.sort()\n",
        "num_ids": 15
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return False\n    sorted_numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] <= threshold:\n            return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return any(abs(numbers[i] - numbers[j]) <= threshold for i in range(len(numbers)) for j in range(i + 1, len(numbers)))\n",
        "num_ids": 44
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    separated = []\n    last_paren = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            last_paren = i\n        elif char == ')':\n            separated.append(paren_string[last_paren:i+1])\n            last_paren = i+1\n    return separated\n",
        "num_ids": 83
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    start_index = 0\n    end_index = 0\n    open_braces = []\n    for i, c in enumerate(paren_string):\n        if c == \"(\":\n            open_braces.append(i)\n        if c == \")\":\n            if len(open_braces) == 0:\n                print(\"Parenthesis not balanced\")\n                return\n            start_index = open_braces.pop()\n            end_index = i\n            break\n    segments = []\n    slices = []\n    for i, c in enumerate(paren_string):\n        if c == \"(\":\n            open_braces.append(i)\n        if c == \")\":\n            if len(open_braces) == 0:\n                print(\"Parenthesis not balanced\")\n                return\n            start_index = open_braces.pop()\n            end_index = i\n            break\n    paren_string = paren_string.replace(\" \", \"\")\n    if start_index > end_index:\n        print(\"paren_string:\", paren_string)\n        print(\"start_index:\", start_index)\n        print(\"end_index:\", end_index)\n        print(\"open_braces:\", open_braces)\n        print(\"segments:\", segments)\n        raise Exception(\"Invalid string\")\n",
        "num_ids": 312
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Split the string based on spaces\n    # Initially store the split as a list of groups\n    # Append to that list the strings returned by the recursion, i.e., each group on its own\n    # Use the paren_stack to keep track of the balanced parentheses\n    # When the stack is empty, the string has been completely processed\n    # Return the list of strings\n",
        "num_ids": 86
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    paren_groups = []\n    open_parens = []\n    for paren in paren_string:\n        if paren == '(':\n            open_parens.append(paren)\n        elif paren == ')':\n            if open_parens:\n                open_parens.pop()\n            else:\n                paren_groups.append(''.join(open_parens))\n                open_parens = []\n",
        "num_ids": 101
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    paren_stack = []\n    result = []\n    \n    for i, p in enumerate(paren_string):\n        if p == '(':\n            paren_stack.append(i)\n        elif p == ')':\n            if paren_stack:\n                start = paren_stack.pop()\n                result.append(paren_string[start: i + 1])\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    separated_paren_strings = []\n    next_pairs = []\n    i = 0\n    while i < len(paren_string):\n        if i < len(paren_string) - 1 and paren_string[i] == ')' and paren_string[i+1] == '(':\n            separated_paren_strings.append(paren_string[i:i+2])\n            i += 2\n        else:\n            next_pairs.append(paren_string[i])\n            i += 1\n    while len(next_pairs) > 0:\n        paren_string = ''.join(next_pairs)\n        next_pairs = []\n        i = 0\n        while i < len(paren_string):\n            if i < len(paren_string) - 1 and paren_string[i] == ')' and paren_string[i+1] == '(':\n                separated_paren_strings.append(paren_string[i:i+2])\n                i += 2\n            else:\n                next_pairs.append(paren_string[i])\n                i += 1\n    return separated_paren_strings\n",
        "num_ids": 269
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                result.append('')\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    parens = ['(']\n    result = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == ')':\n            if parens.pop() == '(':\n                result.append(paren_string[i+1:])\n                i = len(paren_string)\n            else:\n                parens.append(')')\n        elif paren_string[i] == '(':\n            parens.append('(')\n        i += 1\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    if len(paren_string) <= 1:\n        return []\n    paren_groups = []\n    opening = 0\n    closing = 0\n    balanced = True\n    for paren in paren_string:\n        if paren == '{':\n            opening += 1\n        elif paren == '}':\n            closing += 1\n        if closing > opening:\n            balanced = False\n            break\n    if balanced:\n        paren_groups = separate_paren_groups(paren_string[1:-1])\n        paren_groups.append(paren_string)\n    else:\n        paren_groups.append(paren_string)\n    return paren_groups\n",
        "num_ids": 172
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    open_paren = 0\n    close_paren = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            open_paren += 1\n        elif paren_string[i] == ')':\n            close_paren += 1\n        if open_paren == close_paren:\n            paren_groups.append(paren_string[open_paren:close_paren+1])\n            open_paren = 0\n            close_paren = 0\n    return paren_groups\n",
        "num_ids": 148
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number == 0:\n        return 0\n    number_str = str(number)\n    for i in range(len(number_str) - 1, -1, -1):\n        if number_str[i]!= '0':\n            return float(number_str[i:])\n    return 0\n",
        "num_ids": 74
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Leftover is always the fractional part of the number\n    decimal = number - int(number)\n    return decimal\n",
        "num_ids": 30
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number == 0:\n        return 0\n    if number < 0:\n        return -truncate_number(-number)\n    number_int, number_dec = str(int(number)).split(\".\")\n    return float(number_dec)\n",
        "num_ids": 59
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    truncated = math.floor(number)\n    remainder = number - truncated\n    return remainder\n",
        "num_ids": 27
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    decimal, integer = math.modf(number)\n    return decimal\n",
        "num_ids": 19
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Maximum positive integer in float is limited by integer precision of float\n    max_int = sys.float_info.max_10_exp\n    # Convert to the smallest positive number smaller than max_int\n    max_int_str = str(max_int)\n    max_int_str_len = len(max_int_str)\n    return number - int(number)\n",
        "num_ids": 88
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return math.modf(number)[0]\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = False\n    for i in range(len(operations)):\n        result = False if sum(operations[i:]) < 0 else True\n        if result:\n            return result\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # First we track the previous balance, and the current balance\n    balance = 0\n    for op in operations:\n        # If we encounter a deposit, we add it to the current balance\n        if op > 0:\n            balance += op\n        else:\n            # If we encounter a withdrawal, we compare against the current balance\n            if balance < 0:\n                return True\n            else:\n                balance -= op\n",
        "num_ids": 94
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # initialize the index of the balance\n    index = 0\n    # iterate over the operations\n    for operation in operations:\n        # if the balance is below zero\n        if index < 0:\n            return True\n        # add the current operation to the balance\n        index += operation\n    # return the result\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    balance = 0\n    for deposit in operations:\n        balance += deposit\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = False\n    for operation in operations:\n        if operation < 0:\n            result = True\n            break\n",
        "num_ids": 28
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n            if balance < 0:\n                return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total_balance = 0\n    for operation in operations:\n        total_balance += operation\n        if total_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for o in operations:\n        if o > 0:\n            balance += o\n        else:\n            balance -= o\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    mean = sum(numbers) / len(numbers)\n    absolute_deviations = map(lambda x: abs(x - mean), numbers)\n    return sum(absolute_deviations) / len(numbers)\n",
        "num_ids": 52
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers_mean = float(sum(numbers) / len(numbers))\n    return mean([abs(x - numbers_mean) for x in numbers])\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: maybe not correct\n    numbers = sorted(numbers)\n    return (numbers[len(numbers) // 2] - numbers[0]) / (len(numbers) // 2)\n",
        "num_ids": 50
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        raise ValueError(\"Can't calculate Mean Absolute Deviation on an empty list of numbers.\")\n",
        "num_ids": 27
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # remove outliers\n    if len(numbers) == 0:\n        return 0\n    numbers.sort()\n    deviations = [(abs(x - mean(numbers))) for x in numbers]\n    return mean(deviations)\n",
        "num_ids": 57
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # calculate mean\n    mean = sum(numbers) / len(numbers)\n    # calculate deviations\n    deviations = []\n    for number in numbers:\n        deviations.append(abs(number - mean))\n    # return mean of deviations\n    return sum(deviations) / len(deviations)\n",
        "num_ids": 73
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Mean of the list.\n    mean = sum(numbers) / len(numbers)\n    # Mean Absolute Deviation from the mean.\n    total_sum = 0\n    for num in numbers:\n        total_sum += abs(num - mean)\n    mean_dev = total_sum / (len(numbers) - 1)\n    return mean_dev\n",
        "num_ids": 86
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        raise ValueError(\"No data provided.\")\n    if len(numbers) == 1:\n        return 0\n    mean = sum(numbers) / len(numbers)\n    diffs = [abs(n - mean) for n in numbers]\n    return sum(diffs) / (len(numbers) - 1)\n",
        "num_ids": 82
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    abs_deviations = [abs(x - mean(numbers)) for x in numbers]\n    return sum(abs_deviations) / len(numbers)\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Get the mean of the input data, then subtract from each value the mean\n    # to get a list of deviations from the mean\n    mean = float(sum(numbers)) / float(len(numbers))\n    deviations = [abs(number - mean) for number in numbers]\n    return float(sum(deviations)) / len(deviations)\n",
        "num_ids": 83
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_numbers = []\n    for number in numbers:\n        new_numbers.append(number)\n        new_numbers.append(delimeter)\n    return new_numbers\n",
        "num_ids": 46
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [delimeter] + [numbers[idx + 1] for idx in range(len(numbers) - 1)] + [delimeter]\n",
        "num_ids": 37
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [delimeter] + [n for n in numbers if n!= delimeter] + [delimeter]\n",
        "num_ids": 27
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return numbers[:-1] + [numbers[-1]] * delimeter + numbers[-1:]\n",
        "num_ids": 26
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 15
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    out = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            out.append(numbers[i])\n            out.append(delimeter)\n        else:\n            out.append(numbers[i])\n    return out\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter] * (len(numbers) - 1) + [numbers[-1]]\n",
        "num_ids": 43
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i, j = 0, 1\n    return [numbers[i]] + [numbers[i] + delimeter] * (len(numbers) - 1) + [numbers[j]]\n",
        "num_ids": 47
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    nested_level = 0\n    max_nested_level = 0\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    depth = 0\n    group_index = 0\n    max_depth = 0\n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    parens = []\n    current_level = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            current_level += 1\n            parens.append(current_level)\n        elif c == ')':\n            current_level -= 1\n            parens.append(current_level)\n    return parens\n",
        "num_ids": 86
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #'set' is a type that does not allow duplicate values.\n    # It will throw an exception if there is a duplicate.\n    nested_parens_set = set()\n    nested_parens_list = []\n    stack = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append(paren)\n        elif paren == ')':\n            if len(stack) == 0:\n                raise ValueError(\"Parentheses not balanced.\")\n            stack.pop()\n",
        "num_ids": 123
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    parens = []\n",
        "num_ids": 7
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    counter = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(counter)\n            counter += 1\n        elif c == ')':\n            counter -= 1\n            stack.pop()\n    return stack\n",
        "num_ids": 65
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_depth = 0\n    depths = [0]\n    parens_level = 0\n    for c in paren_string:\n        if c == '(':\n            parens_level += 1\n        elif c == ')':\n            parens_level -= 1\n        depths.append(parens_level)\n        if parens_level == 0:\n            max_depth = max(max_depth, len(depths) - 1)\n    return depths[1:]\n",
        "num_ids": 116
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    parens = list()\n    index = 0\n    nesting = 0\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    parens = []\n    for level, paren in enumerate(paren_string.split(' ')):\n        if paren == ')':\n            parens.append(level)\n        else:\n            parens[-1] = max(level, parens[-1])\n    return parens\n",
        "num_ids": 75
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_nesting = 0\n    stack = []\n    max_nesting_list = []\n    current_nesting = 0\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_nesting += 1\n            max_nesting_list.append(current_nesting)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n                current_nesting -= 1\n    max_nesting_list.append(current_nesting)\n    return max_nesting_list\n",
        "num_ids": 134
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return []\n    return [s for s in strings if substring in s]\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers.sort()\n    length = len(numbers)\n    sum = 0\n    product = 1\n",
        "num_ids": 27
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n",
        "num_ids": 41
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum, product = 0, 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = 0\n    p = 1\n    for number in numbers:\n        s += number\n        p *= number\n    return (s, p)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), 1) if numbers else (0, 1)\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(numbers), prod(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    product = 1\n    if len(numbers) == 0:\n        return (0, 1)\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total, product = 0, 1\n    for x in numbers:\n        total += x\n        product *= x\n    return total, product\n",
        "num_ids": 34
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = [numbers[0]] * len(numbers)\n    if len(numbers) == 1:\n        return result\n    max_element = max(numbers)\n    result[-1] = max_element\n    for i in range(len(numbers) - 2, -1, -1):\n        max_element = max([max_element, numbers[i + 1]])\n        result[i] = max_element\n    return result\n",
        "num_ids": 108
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_so_far = numbers[0]\n    max_ending_here = numbers[0]\n    result = []\n    for num in numbers[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n        result.append(max_so_far)\n    return result\n",
        "num_ids": 98
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        tmp = numbers[i]\n        for j in range(i, len(numbers)):\n            tmp = max(tmp, numbers[j])\n            result.append(tmp)\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [max(numbers[0:i+1]) for i in range(len(numbers))]\n",
        "num_ids": 27
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_value = 0\n    result = [0] * len(numbers)\n    for i, num in enumerate(numbers):\n        if num > max_value:\n            max_value = num\n        result[i] = max_value\n",
        "num_ids": 60
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [numbers[0]]\n    for n in numbers[1:]:\n        if n > result[-1]:\n            result.append(n)\n        else:\n            result[-1] = n\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return []\n    max_num = max(numbers)\n    result = [max_num for _ in range(len(numbers))]\n    for i in range(len(numbers)):\n        while i - 1 >= 0 and numbers[i] > numbers[i - 1]:\n            i -= 1\n        if i - 1 >= 0:\n            result[i] = numbers[i - 1]\n        else:\n            result[i] = max_num\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO:\n    # - optimise for case when we have lots of zeros or all zeros\n    # - handle extreme cases - should the return value be [0] * len(numbers) or [0]\n    assert len(numbers) > 0\n    \n    if len(numbers) == 1:\n        return numbers\n    \n    maxes = [0] * len(numbers)\n    maxes[0] = numbers[0]\n    maxes[1] = max(numbers[0], numbers[1])\n    \n    for index in range(2, len(numbers)):\n        maxes[index] = max(numbers[index], maxes[index - 1], maxes[index - 2])\n    \n    return maxes\n",
        "num_ids": 179
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert isinstance(numbers, list), \"The input type must be a list.\"\n    assert all(isinstance(x, int) for x in numbers), \"Each element must be a number.\"\n    assert all(x >= 0 for x in numbers), \"Each element must be positive.\"\n    assert len(numbers) > 0, \"The input must not be empty.\"\n",
        "num_ids": 85
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    size = len(numbers)\n    current = max(numbers)\n    result.append(current)\n    i = 1\n    while i < size:\n        if numbers[i] > current:\n            current = numbers[i]\n            result.append(current)\n        i += 1\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    elif is_palindrome(string[1:]):\n        return string[0] + make_palindrome(string[1:])\n    else:\n        return string[0] + make_palindrome(string[1:]) + string[0]\n",
        "num_ids": 88
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return string\n    string = string.strip()\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            return string[:i + 1] + string[::-1]\n    return string\n",
        "num_ids": 69
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    longest_palindrome = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i-len(longest_palindrome):i]):\n            longest_palindrome = string[i-len(longest_palindrome):i]\n    return longest_palindrome + string[0:len(string) - len(longest_palindrome)] + string[0:len(string) - len(longest_palindrome)][::-1]\n",
        "num_ids": 127
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Find the length of the supplied string\n    length = len(string)\n    # Find the longest suffix of the supplied string that is a palindrome\n    for i in range(1, length + 1):\n        if is_palindrome(string[:i]):\n            palindrome = string[:i]\n            break\n    # Append a reverse of a string prefix that comes before the palindromic suffix\n    return palindrome + string[::-1]\n",
        "num_ids": 111
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string\n",
        "num_ids": 64
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    longest_palindrome = ''\n    for i in range(len(string), 0, -1):\n        # Find longest palindrome that begins with given string\n        if is_palindrome(string[:i]):\n            longest_palindrome = string[:i]\n            break\n    if len(longest_palindrome) == len(string):\n        return string\n    return longest_palindrome + string[len(longest_palindrome):] + string[::-1]\n",
        "num_ids": 121
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if len(string) == 1:\n        return string\n    \n    end = len(string) // 2\n    for i in range(end, -1, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:]\n    \n    return ''\n",
        "num_ids": 79
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while not is_palindrome(string):\n        string = string[1:] + string[0]\n    return string\n",
        "num_ids": 30
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome\n    while not is_palindrome(string):\n        string = string[1:]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[::-1]\n",
        "num_ids": 74
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(string) + 1, 1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:len(string) - i + 1][::-1]\n    return string",
        "num_ids": 63
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)\n",
        "num_ids": 60
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b))\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = a.zfill(len(a)), b.zfill(len(b))\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 54
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(a) == len(b)\n    res = []\n    for i in range(len(a)):\n        res.append(str(int(a[i]) ^ int(b[i])))\n    return \"\".join(res)\n",
        "num_ids": 61
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(map(str, [int(x) ^ int(y) for x, y in zip(a, b)]))\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n",
        "num_ids": 39
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 58
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    # Find the length of the longest string\n    longest_len = len(strings[0])\n    longest_string = strings[0]\n    # Check each string\n    for string in strings:\n        if len(string) > longest_len:\n            longest_len = len(string)\n            longest_string = string\n    return longest_string\n",
        "num_ids": 99
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_len = 0\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n",
        "num_ids": 25
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)\n",
        "num_ids": 82
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    return greatest_common_divisor(a, b % a)\n",
        "num_ids": 68
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < b:\n        return greatest_common_divisor(b, a)\n    if a % b == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n",
        "num_ids": 53
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)\n",
        "num_ids": 81
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = ['']\n    for ch in string:\n        result += [ch + prefix for prefix in result]\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    all_prefixes = []\n",
        "num_ids": 9
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \" \".join(str(x) for x in range(n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    for i in range(n+1):\n        result += str(i) +''\n    return result[:-1]\n",
        "num_ids": 35
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = \"\"\n    for i in range(0, n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 38
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return '0'\n    sequence = ''\n    for i in range(n+1):\n        sequence = sequence + str(i) +''\n    return sequence[:-1]\n",
        "num_ids": 50
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s =''\n    for i in range(n + 1):\n        s += str(i)\n        if i < n:\n            s +=''\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return ''\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0 1'\n    elif n == 3:\n        return '0 1 2'\n    elif n == 4:\n        return '0 1 2 3'\n    elif n == 5:\n        return '0 1 2 3 4'\n    else:\n        return '0 1 2 3 4 {}'.format(n)\n",
        "num_ids": 111
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    seq = []\n    for i in range(n + 1):\n        seq.append(str(i))\n    return \" \".join(seq)\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.rstrip()\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return '0'\n    s = ''\n    for i in range(n + 1):\n        s += str(i)\n        if i < n:\n            s +=''\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = string.lower()\n    string = sorted(string)\n    for i, c in enumerate(string):\n        if c!= string[i-1]:\n            return i\n    return i+1\n",
        "num_ids": 51
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # create a set of characters\n    characters = set()\n    for char in string:\n        characters.add(char.lower())\n    return len(characters)\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    seen_characters = set()\n    for character in string:\n        if character not in seen_characters:\n            seen_characters.add(character)\n    return len(seen_characters)\n",
        "num_ids": 49
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(set([i.lower() for i in string]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    list_of_notes = []\n    for letter in music_string:\n        if letter == 'o':\n            list_of_notes.append(1)\n        elif letter == 'o|':\n            list_of_notes.append(0.5)\n        elif letter == '.|':\n            list_of_notes.append(0.25)\n",
        "num_ids": 86
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: Implement me!\n    return list(map(lambda x: 4 if x == 'o' else 2 if x == 'o|' else 1, music_string.split(' ')))\n",
        "num_ids": 47
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(map(parse_note, music_string.split()))\n",
        "num_ids": 19
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    music_string = music_string.replace('o|', '.|').replace('o', 'o|').replace('|', 'o')\n    beats = [int(char) for char in music_string if char in 'o.|']\n    return beats\n",
        "num_ids": 62
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    parsed_music = []\n    parsed_notes = []\n    parsed_octave = []\n    curr_note = \"\"\n    for note in music_string:\n        if note == \" \":\n            continue\n        if note.isdigit():\n            parsed_notes.append(int(note))\n            curr_note = \"\"\n        else:\n            curr_note += note\n            if note == \"o\":\n                parsed_octave.append(1)\n            elif note == \"o|\":\n                parsed_octave.append(0.5)\n            elif note == \".\":\n                parsed_octave.append(0.25)\n            else:\n                parsed_octave.append(1)\n    \n    for i in range(len(parsed_notes)):\n        parsed_music.append(4 * parsed_octave[i] * parsed_notes[i])\n",
        "num_ids": 231
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # split string by spaces\n    music_string = music_string.split()\n    # initialize array to store notes\n    notes = [0] * len(music_string)\n    # for each note\n    for i in range(len(music_string)):\n        # check if note is \"o\"\n        if music_string[i] == \"o\":\n            # if not, check if note is \"o|\"\n            if music_string[i-1] == \"o\":\n                # if not, check if note is \".|\"\n                if music_string[i-2] == \".\":\n                    # if so, increment beats by one\n                    notes[i] = 1\n            else:\n                # if not, increment beats by one\n                notes[i] = 1\n        else:\n            # if note is \".|\"\n            if music_string[i-1] == \".\":\n                # if note is \"o\"\n                if music_string[i-2] == \"o\":\n                    # if note is \"o|\"\n                    if music_string[i-3] == \"o\":\n                        # increment beats by two\n                        notes[i] = 2\n    return notes\n",
        "num_ids": 278
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for c in music_string:\n        if c == 'o':\n            result.extend([1, 1, 1, 1])\n        elif c == 'o|':\n            result.extend([1, 1, 1, 1])\n        elif c == '.|':\n            result.extend([1, 1, 1, 1])\n        elif c == '|':\n            result.extend([2, 1, 1, 1])\n    return result\n",
        "num_ids": 115
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    current = 0\n    while len(music_string) > 0:\n        if music_string[current] == 'o':\n            result.append(1)\n            current += 1\n        elif music_string[current] == 'o|':\n            result.append(1/2)\n            current += 1\n        elif music_string[current] == '.':\n            result.append(1/4)\n            current += 1\n        else:\n            raise ValueError(\"Invalid musical string\")\n    return result\n",
        "num_ids": 126
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # for each space separated note, determine how long it lasts and append length to the result\n    return [len(x) for x in music_string.split(' ')]\n",
        "num_ids": 40
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string.split(substring, maxsplit=1)[1])\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string) - len(string.replace(substring, ''))",
        "num_ids": 19
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(substring) == 0:\n        return 0\n    # This will be our result.\n    count = 0\n    # We will keep a pointer to the beginning of the substring.\n    begin = 0\n    # For each character in the original string, try to match it.\n    # If it's a match, move the beginning of the substring to the current position.\n    while begin < len(string):\n        i = string.find(substring, begin)\n        # If no match is found, return 0.\n        if i == -1:\n            return 0\n        # If match is found, increment the count and move the pointer to the next character.\n        begin = i + 1\n        # Increment count\n        count += 1\n    return count\n",
        "num_ids": 176
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(string) < len(substring):\n        raise ValueError('String length must be larger than substring length.')\n    return sum(1 for idx in range(len(string) - len(substring) + 1)\n        if string[idx:idx + len(substring)] == substring)\n",
        "num_ids": 76
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    overlaping_counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            overlaping_counter += 1\n    return overlaping_counter\n",
        "num_ids": 64
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if substring == '':\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers.split(' '), key=int))\n",
        "num_ids": 21
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = [int(x) for x in numbers.split(' ')]\n    return''.join([str(x) for x in sorted(numbers_list)])\n",
        "num_ids": 99
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \" \".join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Create a list of strings containing each number as a single character.\n    numbers_as_strings = [char for char in numbers]\n    # Create a dictionary with integer values (0 through 9) as keys and each character as a value.\n    number_values = {str(i): char for i, char in enumerate('zero one two three four five six seven eight nine'.split())}\n    # Replace each character in the list with the corresponding integer value as a string.\n    for i, number in enumerate(numbers_as_strings):\n        numbers_as_strings[i] = number_values[number]\n    # Sorts the strings in the list and concatenates them to build a string.\n    return ''.join(sorted(numbers_as_strings))\n",
        "num_ids": 180
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "num_ids": 16
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    list_of_numbers = []\n    for x in numbers.split():\n        list_of_numbers.append(int(x))\n",
        "num_ids": 35
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n",
        "num_ids": 24
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(sorted(numbers.split(' ')))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = numbers.split(' ')\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    return''.join(map(str, numbers))\n",
        "num_ids": 44
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: int(x)))\n",
        "num_ids": 26
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_nums = sorted(numbers)\n    return sorted_nums[0], sorted_nums[-1]\n",
        "num_ids": 32
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_numbers = sorted(numbers)\n    index_of_smallest = len(numbers) - 1\n    index_of_largest = 0\n    closest_to_smallest = sorted_numbers[index_of_smallest]\n    closest_to_largest = sorted_numbers[index_of_largest]\n    for index in range(1, len(numbers)):\n        if sorted_numbers[index] < closest_to_smallest:\n            closest_to_smallest = sorted_numbers[index]\n            index_of_smallest = index\n        elif sorted_numbers[index] > closest_to_largest:\n            closest_to_largest = sorted_numbers[index]\n            index_of_largest = index\n    return closest_to_smallest, closest_to_largest\n",
        "num_ids": 203
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Numbers list must contain at least two numbers')\n",
        "num_ids": 27
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    closest_to_first = _find_closest_elements_using_list(numbers, 0, len(numbers) - 1)\n    closest_to_last = _find_closest_elements_using_list(numbers, 0, len(numbers) - 2)\n    return min(closest_to_first, closest_to_last)\n",
        "num_ids": 94
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers = sorted(numbers)\n    diff = float('inf')\n    smaller = None\n    larger = None\n    for i in range(1, len(numbers)):\n        tmp = abs(numbers[i] - numbers[i - 1])\n        if tmp < diff:\n            diff = tmp\n            smaller = numbers[i]\n            larger = numbers[i - 1]\n",
        "num_ids": 96
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest_diff = float('inf')\n    smallest_pair = None\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < smallest_diff:\n                smallest_diff = diff\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "num_ids": 108
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers.sort()\n    return numbers[0], numbers[-1]\n",
        "num_ids": 20
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    smallest_difference = float('inf')\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < smallest_difference:\n                smallest_difference = difference\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "num_ids": 102
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    smallest_difference = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if smallest_difference is None or difference < smallest_difference:\n                smallest_difference = difference\n                smallest_pair = (numbers[i], numbers[j])\n    return smallest_pair\n",
        "num_ids": 106
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    rescaled = []\n    smallest = numbers[0]\n    largest = numbers[0]\n    for i in numbers:\n        smallest = min(smallest, i)\n        largest = max(largest, i)\n    for i in numbers:\n        rescaled.append((i - smallest) / (largest - smallest))\n",
        "num_ids": 79
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers.sort()\n    n = len(numbers)\n    rescale = []\n    for i in range(n):\n        rescale.append(1.0 * i / (n - 1))\n    return rescale\n",
        "num_ids": 55
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [x - minimum for x in numbers]\n",
        "num_ids": 31
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    scale = 1.0 / max(numbers)\n    return [n * scale for n in numbers]\n",
        "num_ids": 26
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [ (num - min_num) / (max_num - min_num) for num in numbers ]\n    return rescaled\n",
        "num_ids": 72
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    return [(x - smallest) / (largest - smallest) for x in numbers]\n",
        "num_ids": 39
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_n = min(numbers)\n    max_n = max(numbers)\n    return [n / max_n for n in numbers]\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [float(x-min_num)/float(max_num-min_num) for x in numbers]\n",
        "num_ids": 50
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    result = []\n    for value in numbers:\n        new_value = (value - smallest) / (largest - smallest)\n        result.append(new_value)\n",
        "num_ids": 59
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    mn = min(numbers)\n    mx = max(numbers)\n",
        "num_ids": 19
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [int(item) for item in values if type(item) == int]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [num for num in values if isinstance(num, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda value: isinstance(value, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n // 2\n",
        "num_ids": 7
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return next((x for x in range(1, n) if n % x == 0), 1)\n",
        "num_ids": 25
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert type(n) == int and n > 0, \"Invalid input\"\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 46
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for divisor in range(n, 0, -1):\n        if n % divisor == 0:\n            return divisor\n",
        "num_ids": 34
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest\n",
        "num_ids": 38
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in reversed(range(n)):\n        if n%i == 0:\n            return i\n",
        "num_ids": 26
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n - 1 if n % 2 == 0 else n + 1\n",
        "num_ids": 17
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return n // 2 if n % 2 == 0 else n // 2 + 1\n",
        "num_ids": 21
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n // 2 + 1\n",
        "num_ids": 9
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    prime_factors = [2]\n    factors = []\n    if n < 2:\n        return []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n / 2\n    while n % 3 == 0:\n        factors.append(3)\n        n = n / 3\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "num_ids": 150
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    d = 2\n    while d * d <= n:\n        if n % d:\n            d += 1\n        else:\n            n //= d\n            res.append(d)\n    if n > 1:\n        res.append(n)\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n >= 0, 'Input should not be a negative number'\n    if n == 1:\n        return []\n",
        "num_ids": 28
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    if n % 3 == 0:\n        return [3] + factorize(n // 3)\n    if n % 5 == 0:\n        return [5] + factorize(n // 5)\n    if n % 7 == 0:\n        return [7] + factorize(n // 7)\n    if n % 11 == 0:\n        return [11] + factorize(n // 11)\n    if n % 13 == 0:\n        return [13] + factorize(n // 13)\n    if n % 17 == 0:\n        return [17] + factorize(n // 17)\n",
        "num_ids": 162
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(n, int):\n        raise TypeError('Incorrect type of input, should be integer')\n    if n < 1:\n        raise ValueError('Incorrect input, should be greater than 0')\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        factor = 2\n        factorization = [factor]\n        while factor * factor < n:\n            if n % factor == 0:\n                factorization.append(factor)\n                n //= factor\n            else:\n                factor += 2\n        if n > 1:\n            factorization.append(n)\n        return factorization\n    factor = 3\n    factorization = [factor]\n    while factor * factor < n:\n        if n % factor == 0:\n            factorization.append(factor)\n            n //= factor\n        else:\n            factor += 2\n    if n > 1:\n        factorization.append(n)\n    return factorization\n",
        "num_ids": 225
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 2\n    factors = []\n    # factors.append(1) # numbers that are 1 (they are multiplied by themselves)\n    while i < n:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 89
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        return\n    if n == 0 or n == 1:\n        return []\n    elif n % 2 == 0:\n        return [2] + factorize(n // 2)\n    else:\n        return [2] + factorize((n - 1) // 2)\n",
        "num_ids": 71
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    else:\n        return [2] + factorize(n + 1) if n % 3 == 1 else [3] + factorize(n - 1) if n % 3 == 2 else [3, 3] + factorize(n - 3)\n",
        "num_ids": 80
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2, n // 2] + factorize(n // 2)\n    factors = []\n    i = 3\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n            i = 2\n        elif i * i > n:\n            factors.append(n)\n            break\n        else:\n            i += 2\n    return factors\n",
        "num_ids": 134
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return []\n    primes = get_prime_factors(n)\n    prime_count = [0] * len(primes)\n    for p in primes:\n        index = primes.index(p)\n        prime_count[index] = prime_count[index] + 1\n    factors = [0] * len(primes)\n    i = 0\n    for p in primes:\n        while prime_count[i] > 0:\n            factors[i] = factors[i] + 1\n            prime_count[i] = prime_count[i] - 1\n        i = i + 1\n    while i < len(primes):\n        factors[i] = 1\n        i = i + 1\n    return factors\n",
        "num_ids": 184
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in numbers if numbers.count(x) == 1]\n",
        "num_ids": 20
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "num_ids": 45
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # idx_map is a map from values to the index in numbers to keep.\n    # It is implemented as a dictionary, so we can update it in place.\n    idx_map = {}\n    for idx, value in enumerate(numbers):\n        if value not in idx_map:\n            idx_map[value] = idx\n    return [numbers[idx] for idx in idx_map.values()]\n",
        "num_ids": 106
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # keep track of if we've seen the number\n    seen = {}\n    for num in numbers:\n        if num in seen:\n            # we've seen this number before, so remove it\n            numbers.remove(num)\n        else:\n            # haven't seen this number before, so add it to the set\n            seen[num] = True\n    return numbers\n",
        "num_ids": 86
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    unique_list = []\n    for number in numbers:\n        if number not in unique_list:\n            unique_list.append(number)\n    return unique_list\n",
        "num_ids": 41
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    string = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string[i] = string[i].lower()\n        elif string[i].islower():\n            string[i] = string[i].upper()\n    return ''.join(string)\n",
        "num_ids": 77
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(\n        [string[i].swapcase() if string[i].islower() else string[i] for i in range(len(string))\n        ]\n    )\n",
        "num_ids": 47
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def flip(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n    return \"\".join(flip(char) for char in string)\n",
        "num_ids": 51
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n",
        "num_ids": 28
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_string = ''\n    for c in string:\n        if c in string.upper():\n            new_string += c.lower()\n        else:\n            new_string += c.upper()\n    return new_string\n",
        "num_ids": 54
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not strings:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(filter(lambda string: string.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [l for l in l if l > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    positive_list = []\n    for i in l:\n        if i > 0:\n            positive_list.append(i)\n    return positive_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    positive_list = []\n    for item in l:\n        if item > 0:\n            positive_list.append(item)\n    return positive_list\n",
        "num_ids": 38
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Check if n is divisible by any number up to sqrt(n)\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 3 == 0:\n        return False\n    if n < 50:\n        if n % 5 == 0:\n            return False\n        if n % 7 == 0:\n            return False\n    \n    # Check if n is prime\n    if n % 2 == 0:\n        return False\n    \n    for x in xrange(3, int(n**0.5)+1, 2):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 165
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 2:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #loop from 2 to sqrt(n)\n    #if n is divisible by an integer between 2 and sqrt(n), return False\n    #if n is not divisible by any integer between 2 and sqrt(n), return True\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all([n % x for x in range(3, int(math.sqrt(n))+1, 2)])\n",
        "num_ids": 72
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        # n is a prime number\n        return all(n % i for i in range(3, int(sqrt(n)) + 1, 2))\n",
        "num_ids": 77
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i <= n**(1/2):\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    else:\n        if n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n) + 1), 6):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 86
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** (1/2)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(xs) % 2 == 0, \"Polynomial has to have even number of coefficients\"\n    assert all(coeff!= 0 for coeff in xs), \"No coefficient is 0\"\n",
        "num_ids": 48
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = len(xs) - 1\n    while i >= 1:\n        i -= 1\n        if xs[i]!= 0:\n            if i % 2 == 0:\n                a = xs[i] / xs[i + 1]\n                b = xs[i + 1] / xs[i + 2]\n                xs[i] = a * xs[i] - b * xs[i + 1]\n                xs[i + 1] = a * xs[i + 1] + b * xs[i + 2]\n                xs[i + 2] = 0\n            else:\n                a = xs[i] / xs[i - 1]\n                b = xs[i - 1] / xs[i - 2]\n                xs[i] = a * xs[i] - b * xs[i - 1]\n                xs[i - 1] = a * xs[i - 1] + b * xs[i - 2]\n                xs[i - 2] = 0\n    return xs[0]\n",
        "num_ids": 252
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # ensure xs are even\n    if len(xs) % 2!= 0:\n        return None\n    # ensure xs is non-empty\n    if not xs:\n        return None\n    # find largest coefficient\n    max_coeff = max(xs)\n    # ensure largest coefficient is not zero\n    if max_coeff == 0:\n        return None\n    # ensure non-zero coefficient is at least 1\n    if max_coeff > 0:\n        max_coeff = 1\n    # find x\n    for i, x in enumerate(xs):\n        if x * max_coeff > 0:\n            return i - 1\n    return i\n",
        "num_ids": 156
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) % 2!= 0:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"need an even number of coefficients\")\n    if max(xs) == 0:\n        return None\n    if min(xs) == 0:\n        return 0.0\n    # find the most non zero coefficient\n    # it is guaranteed to be even number, as the polynomial is not a constant\n    most_non_zero = xs.index(max(xs))\n    # the slope of the polynomial at x = 0\n    x0 = poly(xs[most_non_zero:], 0) / poly(xs[:most_non_zero], 0)\n    # the coefficient of x^(n-1) in the polynomial is x^n * x0\n    # that is, the x^(n-1) is not a constant\n    xs_coeff_n_minus_1 = [(x - x0) * x0 for x in xs[most_non_zero:]]\n    # since x^n is a constant, we substitute it with x^(n-1)\n    xs = xs[:most_non_zero] + xs_coeff_n_minus_1\n    # since x^n is constant, the polynomial is now x^(n-1) * x^(n-1) * x^(n-2) *...\n    # thus, we take derivative of the polynomial by n-1 times\n    # by expanding it to 2nd order, it becomes x^n * x^(n-1) * x^(n-2) *... * x^(n-n) * x^(n-1) * x^(n-2)\n    # then the result becomes x^(n-1) * x^(n-2) *... * x^2 * x^(n-n) * x^(n-1) * x^(n-2)\n    # if the result is a constant, it's x^(n-1) * x^(n-2) *... * x^2 * x^(n-n)\n    # thus, the result is the solution\n    result = sum([x * math.pow(x, i - 1) for i, x in enumerate(xs)])\n    return result\n",
        "num_ids": 529
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return -poly(xs, -1.0) / poly(xs, 1.0)\n",
        "num_ids": 23
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) % 2!= 0:\n        return None\n    if xs[-1]!= 0:\n        return None\n    if xs[-2] == 0:\n        return None\n    polynomial = sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    return polynomial / (xs[-1] * math.pow(x, -1))\n",
        "num_ids": 107
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(xs) == 1:\n        return -xs[0] / xs[-1]\n    elif len(xs) == 2:\n        return -xs[0] / xs[-1] - xs[-1] / xs[-2]\n    elif len(xs) == 3:\n        a, b, c = xs\n        x1 = -b / (2 * a)\n        x2 = -(b ** 2 - 4 * a * c) ** 0.5 / (2 * a)\n        return [x1, x2]\n    elif len(xs) % 2 == 0:\n        a, b, c = xs\n        x1 = -b / (2 * a)\n        x2 = -(b ** 2 - 4 * a * c) ** 0.5 / (2 * a)\n        return [x1, x2]\n    else:\n        raise ValueError(\"only even length polys\")\n",
        "num_ids": 226
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Use only even number of coefficients, and remove zeros if exists\n    xs = [coeff for i, coeff in enumerate(xs) if i % 2 == 0 and coeff!= 0]\n    # Ensure that there are no 0 in the list\n    while 0 in xs:\n        xs.remove(0)\n    # Remove all zeros in the list\n    while 0 in xs:\n        xs.remove(0)\n    if len(xs) == 1:\n        return xs[0]\n    # If the list has 2 coefficients, x is (x1 + x2) / 2, hence poly(x) = 0\n    if len(xs) == 2:\n        return (xs[0] + xs[1]) / 2\n    if len(xs) == 3:\n        if (xs[0] * xs[1]) == - (xs[2] * xs[0]):\n            return (xs[0] + xs[1]) / 2\n        elif (xs[1] * xs[2]) == - (xs[0] * xs[1]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[0] * xs[2]) == - (xs[1] * xs[0]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[0] * xs[1]) == - (xs[2] * xs[0]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[1] * xs[2]) == - (xs[0] * xs[1]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[2] * xs[0]) == - (xs[1] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[0] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n        elif (xs[2] * xs[1]) == - (xs[0] * xs[2]):\n            return (xs[1] + xs[2]) / 2\n    # If the list has 4 coefficients, solve the quadratic equation Ax^2 + Bx + C = 0\n    if len(xs) == 4:\n        a = xs[0] * xs[1] + xs[2] * xs[3]\n        b = 2 * (xs[0] * xs[2] + xs[1] * xs[3])\n        c = xs[0] * xs[0] + xs[1] * xs[1] + xs[2] * xs[2] + xs[3] * xs[3]\n        delta = b * b - 4 * a * c\n        if delta < 0:\n            return None\n        elif delta == 0:\n            return -b / (2 * a)\n        elif delta > 0:\n            return (-b + math.sqrt(delta)) / (2 * a)\n    # if the list has more than 4 coefficients, raise an exception\n    raise Exception('Only even number of coefficients are supported')\n",
        "num_ids": 877
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # check\n    if len(xs) == 1:\n        raise ValueError(\"polynomial of 1 variable can't have zero\")\n    elif len(xs) % 2:\n        raise ValueError(\"polynomial of odd number of variables have to have even number of coefficients\")\n",
        "num_ids": 65
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    indices = [i for i in range(len(l)) if i % 3 == 0]\n    return [l[i] for i in indices] + [l[i] for i in sorted(indices) if i % 3!= 0]\n",
        "num_ids": 59
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    return l",
        "num_ids": 10
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    first = []\n    second = []\n    third = []\n",
        "num_ids": 16
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = l[::-1]\n    for i in range(len(result)):\n        if (i % 3) == 0:\n            result[i] = l[i]\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    list_l = l[0:3]+l[5:len(l)]\n    return sorted(list_l)\n",
        "num_ids": 30
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l_copy = l[:]\n    for i in range(len(l_copy)):\n        if i % 3 == 0:\n            l_copy[i] = l_copy[i]\n        elif i % 3 == 1:\n            l_copy[i] = l_copy[i]\n        else:\n            l_copy[i] = l_copy[i]\n    return l_copy\n",
        "num_ids": 98
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n    new_list.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(l[i])\n    return new_list\n",
        "num_ids": 88
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #returns a list with the same indicies that are not divisible by 3 and the values of those indicies\n    #the return value is the second argument: sort_third\n    return l[2::3] + l[0::3] + l[1::3]\n    ",
        "num_ids": 65
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n",
        "num_ids": 59
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Use set() to get unique elements\n    return list(set(l))\n",
        "num_ids": 20
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for x in l:\n        if x not in result:\n            result.append(x)\n    return sorted(result)\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    uniq = {}\n    for e in l:\n        uniq[e] = 1\n    return sorted(uniq.keys())\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    r = []\n    for x in l:\n        if x not in r:\n            r.append(x)\n    return r\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(sorted(set(l)))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not l:\n        return None\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 42
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "num_ids": 36
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = [x for x in l if x > 0]\n    if not l:\n        return None\n    return max(l)\n",
        "num_ids": 33
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return None\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 46
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max = l[0]\n    for item in l:\n        if item > max:\n            max = item\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: Implement this function!\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    count = 0\n    for i in range(1, n + 1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for x in range(1, n) if (x % 11 == 0 or x % 13 == 0) and x % 7 == 0)\n",
        "num_ids": 37
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    fizz = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            fizz += 1\n    return fizz\n",
        "num_ids": 46
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    buzz_count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            buzz_count += 1\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n    \n",
        "num_ids": 46
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(n) if i % 11 == 7 or i % 13 == 7)\n",
        "num_ids": 27
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (n-1)//3 + (n-1)//5 + (n-1)//7\n",
        "num_ids": 27
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "num_ids": 22
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(l) - 1:\n        if l[i] % 2 == 1:\n            i += 1\n        else:\n            if l[i] > l[i + 1]:\n                l[i], l[i + 1] = l[i + 1], l[i]\n                i += 2\n    return l\n",
        "num_ids": 85
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [l[1] if i % 2 == 1 else l[i] for i in range(len(l))]\n",
        "num_ids": 30
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l_even = [l[i] for i in range(1, len(l), 2)]\n    l_odd = sorted(l[::2])\n    return l_even + l_odd\n",
        "num_ids": 48
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your Code Here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l1 = l[:len(l)//2]\n    l2 = l[len(l)//2:]\n    l2 = sorted(l2)\n    return l1 + l2\n",
        "num_ids": 48
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i % 2 == 1:\n            new_l.append(l[i])\n        else:\n            new_l.append(sorted(l[i])[len(l[i]) // 2])\n    return new_l\n",
        "num_ids": 76
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_l = []\n    for i in range(0,len(l),2):\n        new_l.append(l[i])\n    for i in range(1,len(l),2):\n        new_l.append(l[i])\n    return new_l\n",
        "num_ids": 68
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "num_ids": 22
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # split string into groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert each group to list of characters.\n    groups = [list(group) for group in groups]\n    # revert each group to the first element and build string.\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 115
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s[::-1]\n",
        "num_ids": 10
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # convert string to list\n    s_list = list(s)\n    # convert list to tuple\n    s_tuple = tuple(s_list)\n    # convert tuple to string\n    s_str = \"\".join(s_tuple)\n    # split string to groups. Each of length 3.\n    groups = [s_str[(3 * i):min((3 * i + 3), len(s_str))] for i in range((len(s_str) + 2) // 3)]\n    # cycle elements in each group. Until group has more than 3 elements.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # convert tuple to list\n    groups = list(groups)\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] for group in groups]\n    # join list to string\n    return \"\".join(groups)\n",
        "num_ids": 223
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # get length of string. If string has odd length, there are two of them.\n    n = len(s)\n    if n % 2 == 1:\n        n -= 1\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Until group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 150
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([s[i % len(s)] for i in range(len(s))])\n",
        "num_ids": 26
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 100
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(s[(3 * i):min((3 * i + 3), len(s))] for i in range(len(s) // 3))\n",
        "num_ids": 40
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    groups = groups[::-1]\n    return \"\".join(groups)\n",
        "num_ids": 46
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n)\n",
        "num_ids": 35
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = 1\n    j = 1\n    while i <= n:\n        i, j = j, j + i\n    if is_prime(j):\n        return j\n",
        "num_ids": 42
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    fib = [1, 2]\n    while True:\n        fib.append(fib[-1] + fib[-2])\n        if is_prime(fib[-1]):\n            if n <= len(fib) - 1:\n                return fib[n-1]\n            else:\n                return fib[-1]\n",
        "num_ids": 98
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        raise ValueError\n    f = [2, 3]\n    for i in range(2, n):\n        f.append(f[i - 1] + f[i - 2])\n    n_prime = f[-1]\n    if n_prime % 2 == 0:\n        return None\n    else:\n        return n_prime\n",
        "num_ids": 88
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    if is_prime(fib[n]):\n        return fib[n]\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    fib = [1, 2]\n    while True:\n        num = fib[-1] + fib[-2]\n        if num > n:\n            return fib[-1]\n        if is_prime(num):\n            fib.append(num)\n",
        "num_ids": 64
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = 2, 3\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            yield b\n        if b > n:\n            break\n",
        "num_ids": 50
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 0:\n        raise Exception(\"The value of n must be positive. You entered: \", n)\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 77
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1 or n == 2:\n        return 2\n",
        "num_ids": 16
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"Invalid input, n should be greater than 0\")\n    return _fib_prime(n)[0]\n",
        "num_ids": 37
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    values = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    values.add(l[i])\n                    values.add(l[j])\n                    values.add(l[k])\n    if len(values)!= 3:\n        return False\n    else:\n        return True\n",
        "num_ids": 123
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(set(l)) == 0\n",
        "num_ids": 12
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    for i in l:\n        for j in l:\n            for k in l:\n                if i!= j and i!= k and j!= k and i + j + k == 0:\n                    return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) < 3:\n        return False\n    i = 0\n    while i < len(l) - 2:\n        if l[i] + l[i + 1] + l[i + 2] == 0:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    visited = set()\n    for i in l:\n        if -i in visited:\n            return True\n        visited.add(i)\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            for k in range(j, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "num_ids": 68
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n    l = sorted(l)\n    for i in range(0, len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "num_ids": 100
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    x = 0\n    for i in l:\n        x += i\n    if x == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 if n%2 == 1 and n//2 > 1 else 0 for n in range(1, 2**n))\n",
        "num_ids": 32
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                # Start with the first car moving left\n                car_1 = i\n                car_2 = j\n            else:\n                # Start with the first car moving right\n                car_1 = j\n                car_2 = i\n",
        "num_ids": 84
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return\n",
        "num_ids": 6
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 0\n    return sum(\n        1\n        for _ in range(1, n + 1)\n        for x in range(n)\n        for y in range(n)\n        if abs(x - y) < (n / 2)\n        and (x > y or y > x)\n        and x!= y\n    )\n",
        "num_ids": 83
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return car_race_distance_cdf(n) - car_race_distance_cdf(n-1)\n",
        "num_ids": 29
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def helper(n: int, i: int):\n        if n == 1:\n            return 1\n",
        "num_ids": 25
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(abs(1 + x) for x in range(n))\n",
        "num_ids": 19
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Check input\n    if n < 2:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [l[0] + i for i in range(1, len(l)+1)]\n",
        "num_ids": 24
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i]+1\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n",
        "num_ids": 20
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #l2 = [x+1 for x in l]\n    #return l2\n    return [x+1 for x in l]\n",
        "num_ids": 34
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [e + 1 for e in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] == l[i+1]:\n            return True\n        if i == len(l) - 2:\n            return False\n        if l[i] + l[i+1] > 0:\n            return False\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    set1 = set(l)\n    for i in set1:\n        if (i*-1) in set1:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) < 2:\n        return False\n    for i in range(0, len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(l) > 1:\n        l.sort()\n        i = 0\n        j = len(l) - 1\n        while i < j:\n            if l[i] + l[j] == 0:\n                return True\n            elif l[i] + l[j] < 0:\n                i += 1\n            else:\n                j -= 1\n        return False\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for x in l:\n        d[x] = d.get(x, 0) + 1\n    for x in d:\n        if -x in d and d[x] == d[-x]:\n            return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    dict = {}\n    for i in l:\n        if i in dict:\n            return True\n        else:\n            dict[-i] = 1\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    unique_elements = set()\n    for elem in l:\n        if -elem in unique_elements:\n            return True\n        unique_elements.add(elem)\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(set(l)) < len(l) and sum(l) == 0\n    \n",
        "num_ids": 24
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = sorted(l)\n    for i in range(len(l)):\n        if (l[i]+l[-1]) == 0:\n            return True\n        elif (l[i]+l[-1]) < 0:\n            return False\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if base < 2 or base > 10:\n        raise ValueError(\"base should be between 2 and 10.\")\n    \n    # base 10\n    if base == 10:\n        return str(x)\n",
        "num_ids": 47
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # loop until the input number is less than 10\n    while x > 9:\n        # assign the current digit to a variable 'd'\n        d = x % base\n        # assign the remainder to a variable 'r'\n        r = x // base\n        # update the current number to be the new base\n        x = r\n        # update the new base\n        base = d\n",
        "num_ids": 88
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == 0:\n        return \"0\"\n    elif x < 0:\n        raise ValueError(\"negative input\")\n    elif base < 2 or base > 9:\n        raise ValueError(\"base number must be between 2 and 9\")\n    elif x < base:\n        return str(x)\n    else:\n        return change_base(x//base, base) + str(x % base)\n",
        "num_ids": 97
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    converted_number = \"\"\n    remainder = x\n    while remainder > 0:\n        digit = remainder % base\n        converted_number = str(digit) + converted_number\n        remainder = remainder // base\n    return converted_number\n",
        "num_ids": 60
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    # inverse = 0\n    # for i in range(len(digits)-1, -1, -1):\n    #     inverse += digits[i] * base**(len(digits)-1-i)\n    # return str(inverse)\n    # Using built-in sum function\n    return str(sum([d.get(i) for i in digits]))\n",
        "num_ids": 155
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x < 0:\n        raise ValueError(\"x cannot be negative.\")\n",
        "num_ids": 19
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    remainder = x\n    value = []\n    while remainder >= base:\n        remainder, digit = divmod(remainder, base)\n        value.append(str(digit))\n    value.append(str(remainder))\n    return \"\".join(value[::-1])\n",
        "num_ids": 72
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_base = \"\"\n    while x > 0:\n        digit = x % base\n        if digit < 10:\n            new_base = str(digit) + new_base\n        else:\n            new_base = chr(ord('A') + digit - 10) + new_base\n        x //= base\n    return new_base\n",
        "num_ids": 81
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    if x < base:\n        return digits[x]\n    else:\n        return change_base(x // base, base) + digits[x % base]\n",
        "num_ids": 66
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # convert input number x to base base\n    out_str = ''\n    if x == 0:\n        out_str = '0'\n    else:\n        while x > 0:\n            digit = x % base\n            out_str = str(digit) + out_str\n            x = x // base\n        return out_str\n",
        "num_ids": 79
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return float(0.5 * a * h)\n",
        "num_ids": 14
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return float(.5 * a * h)\n",
        "num_ids": 13
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    a, b = 0, 1\n    for _ in range(n - 3):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 91
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        return \"Error: negative argument\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    else:\n        a = 1\n        b = 0\n        c = 1\n        d = 1\n        for i in range(3, n+1):\n            a = b + c\n            b = c\n            c = a\n        return a + b + c + d\n",
        "num_ids": 114
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = 0\n    b = 1\n    c = 1\n    d = 0\n    for i in range(n-1):\n        a = b\n        b = c\n        c = d\n        d = a+b+c+d\n    return d\n",
        "num_ids": 62
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = 0\n    b = 1\n    c = 2\n    for i in range(n-1):\n        a = b\n        b = c\n        c = a + b\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return n\n    a = 0\n    b = 1\n    c = 2\n    for i in range(3, n+1):\n        c = a + b\n        a = b\n        b = c\n    return c",
        "num_ids": 75
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # pass\n    if n < 0:\n        return None\n    if n < 4:\n        return n\n    n1, n2, n3, n4 = 0, 0, 1, 1\n    for i in range(n-4):\n        n1, n2, n3, n4 = n2, n3, n4, n1 + n2 + n3 + n4\n    return n1 + n2 + n3 + n4\n",
        "num_ids": 107
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "num_ids": 70
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 87
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    last_n = [0, 1, 1, 2]\n    for i in range(4, n + 1):\n        last_n.append(last_n[i - 1] + last_n[i - 2] + last_n[i - 3] + last_n[i - 4])\n    return last_n[n]\n",
        "num_ids": 81
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return np.median(l)\n",
        "num_ids": 11
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(l) / len(l)\n",
        "num_ids": 13
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    return l[len(l) // 2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1])/2\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l.sort()\n    return l[(len(l) - 1) // 2]\n",
        "num_ids": 23
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n/2 - 1] + l[n/2]) / 2\n    else:\n        return l[n/2]\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    return l[len(l)//2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2\n",
        "num_ids": 35
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n",
        "num_ids": 58
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: return is_palindrome_iterative(text)\n    return is_palindrome_recursive(text)\n",
        "num_ids": 33
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Base case: If text is empty or only has one character, return True\n    if not text or len(text) == 1:\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(text) < 2:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 45
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # your code here\n    return text[::-1] == text\n",
        "num_ids": 20
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # We use 0 based indexing\n    # make all char lowercase and remove spaces\n    text = text.lower().replace(\" \", \"\")\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not text:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 37
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return pow(n, p-2, p)\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n",
        "num_ids": 74
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return pow(n, p, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n - 1, p) + p) % p\n",
        "num_ids": 36
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n >= 0\n    assert p > 0\n    n %= p\n    if n == 0:\n        return 1\n    if n < p // 2:\n        return pow(2, n, p)\n    else:\n        return pow(2, p - n, p)\n",
        "num_ids": 67
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return (modp(n-1, p) * p) % p\n",
        "num_ids": 46
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n",
        "num_ids": 62
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    return modp(n // 2, p) * modp(n, p) % p * modp(n % 2, p) % p\n    # How to make it faster?\n    # 1) factorial\n    # 2) powers of the prime\n    # 3) extended euclid\n",
        "num_ids": 80
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    return (modp(n - 1, p) ** 2) % p\n",
        "num_ids": 68
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return modp(n/2, p)\n    else:\n        return (modp(n-1, p) * p) % p\n",
        "num_ids": 66
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    new_text = ''\n    for char in text:\n        if char!= '':\n            new_text += char\n    return new_text\n",
        "num_ids": 89
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_str = ''\n    for char in text:\n        if char not in 'aeiouAEIOU':\n            new_str += char\n    return new_str\n",
        "num_ids": 42
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 'aAiIeEoOuU'\n    return ''.join(i for i in text if i not in vowels)",
        "num_ids": 37
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 'AEIOUaeiou'\n    new_text = []\n    for char in text:\n        if char not in vowels:\n            new_text.append(char)\n    return ''.join(new_text)\n",
        "num_ids": 59
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    new_text = ''\n    for i in text:\n        if i not in vowels:\n            new_text+=i\n    return new_text\n",
        "num_ids": 64
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text == '':\n        return ''\n    #a = list(text)\n    #a[0] = ''\n    return ''.join([x for x in text if not x in 'aeiouAEIOU'])\n",
        "num_ids": 55
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aeiouAEIOU'\n    remove_vowels = ''.join([c for c in text if c.lower() not in vowels])\n    return remove_vowels\n",
        "num_ids": 50
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    if not text:\n        return ''\n    new_text = ''\n    for l in text:\n        if l not in vowels:\n            new_text += l\n    return new_text\n",
        "num_ids": 69
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = set('aeiouAEIOU')\n    text = list(text)\n    for i, _ in enumerate(text):\n        if text[i] in vowels:\n            text[i] = ''\n    return \"\".join(text)\n",
        "num_ids": 64
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n",
        "num_ids": 61
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(x < t for x in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i < t:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return True\n    elif t < l[0]:\n        return True and below_threshold(l[1:], t)\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all([x < t for x in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len([i for i in l if i <= t]) == len(l)\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n    ",
        "num_ids": 24
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for char in s0:\n        if char in s1:\n            s1 = s1[s1.index(char) + 1:]\n        else:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s0) == len(s1) and len(set(s0)) == len(set(s1))\n",
        "num_ids": 31
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(ch in s0 for ch in s1)\n",
        "num_ids": 16
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(a == b for a, b in zip(s0, s1))\n",
        "num_ids": 22
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # TODO: Optimize this!\n    if len(s0)!= len(s1):\n        return False\n    for i in range(0, len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        raise ValueError('Fibonacci numbers are only defined for positive numbers')\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 61
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a, b = 1, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    brackets = brackets.split(\"<>\")\n    for bracket in brackets:\n        stack.append(bracket)\n        if len(stack) >= 2 and stack[-1] == '<' and stack[-2] == '>':\n            stack.pop()\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 70
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \">\":\n            count += 1\n        elif bracket == \"<\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"\"\"\n    # first, we find all the closing brackets, then see if they have matching opening brackets\n    \"\"\"\n    if len(brackets) % 2!= 0:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # print(brackets)\n    brackets = brackets.strip(\"<>\")\n    # print(brackets)\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        if bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 98
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Create a stack for the open parentheses\n    stack = []\n    # Loop over the string\n    for c in brackets:\n        # If we see an open parenthesis, push it into the stack\n        if c == \"<\":\n            stack.append(c)\n        # If we see a close parenthesis, check the stack for a corresponding open parenthesis\n        elif c == \">\":\n            # If the stack is empty, return false\n            if not stack:\n                return False\n            # Remove the open parenthesis from the stack\n            stack.pop()\n    # If the stack is empty, return true\n    return len(stack) == 0\n",
        "num_ids": 148
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num_open = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            num_open += 1\n        elif bracket == \">\":\n            if num_open > 0:\n                num_open -= 1\n            else:\n                return False\n    return num_open == 0\n",
        "num_ids": 70
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == \">\":\n            if len(stack) > 0 and stack[-1] == \"<\":\n                stack.pop()\n            else:\n                stack.append(ch)\n        elif ch == \"<\":\n            if len(stack) > 0 and stack[-1] == \">\":\n                stack.pop()\n            else:\n                stack.append(ch)\n    return len(stack) == 0\n",
        "num_ids": 111
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    flag = False\n    while \"<\" in brackets:\n        i = brackets.find(\"<\")\n        if \"<\" == brackets[i]:\n            brackets = brackets[i+1:]\n            flag = False\n        elif \">\" == brackets[i]:\n            j = brackets.find(\">\")\n            if j == -1:\n                return False\n            if \">\" == brackets[i+1:j]:\n                brackets = brackets[j+1:]\n                flag = True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 138
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # TODO\n    if not brackets:\n        return True\n    count = 0\n    for bracket in brackets:\n        if bracket == \">\":\n            count += 1\n        elif bracket == \"<\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n",
        "num_ids": 71
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # PUT YOUR CODE HERE\n    for i in range(1,len(l)):\n        if l[i-1] < l[i]:\n            return False\n        elif l[i-1] > l[i]:\n            return True\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) <= 1:\n        return True\n    return l[0] < l[1] < l[-1] or l[-1] < l[-2] < l[0]\n",
        "num_ids": 50
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(l[i] < l[i + 1] for i in range(len(l) - 1)) or all(l[i] > l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if l[0] > l[-1]:\n        return monotonic(l[1:])\n    elif l[-1] > l[0]:\n        return monotonic(l[:-1])\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(a < b for a, b in zip(l, l[1:])) or all(a > b for a, b in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    common = []\n    for i in l1:\n        if i in l2 and i not in common:\n            common.append(i)\n    common.sort()\n    return common\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l1).intersection(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    intersection = set(l1) & set(l2)\n    return sorted(intersection)\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s1, s2 = set(l1), set(l2)\n    return sorted(s1.intersection(s2))\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    r1, r2 = list(l1), list(l2)\n    m, n = len(r1), len(r2)\n    i, j = 0, 0\n    common = []\n    while i < m and j < n:\n        if r1[i] == r2[j]:\n            common.append(r1[i])\n            i, j = i+1, j+1\n        elif r1[i] < r2[j]:\n            i = i+1\n        else:\n            j = j+1\n    return common\n",
        "num_ids": 135
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not l1 or not l2:\n        return []\n    elif l1[0] < l2[0]:\n        return common(l1[1:], l2) + l1\n    elif l2[0] < l1[0]:\n        return common(l1, l2[1:]) + l2\n    else:\n        return [l1[0]] + common(l1[1:], l2[1:])",
        "num_ids": 107
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    for i in range(n):\n        if n % (i + 1) == 0:\n            return i + 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if n == 1:\n        return 1\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return i\n",
        "num_ids": 40
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n_divisors = 0\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            n_divisors += 1\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        n_divisors += 1\n    return n\n",
        "num_ids": 77
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Use the Sieve of Eratosthenes method, as suggested in\n    # https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Finding_all_primes_below_n\n    # to find the largest prime factor of n.\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 95
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1 and n % 2!= 0\n    for i in range(3, int(n ** 0.5), 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n -= 1\n    while n % 2 == 0:\n        n //= 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n        i += 2\n    return n\n",
        "num_ids": 59
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > 1\n    n_is_prime = False\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            n_is_prime = True\n            break\n        i += 1\n    if n_is_prime:\n        return n\n    else:\n        return largest_prime_factor(n // i)\n",
        "num_ids": 84
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # iteratively find the prime factors\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(n + 1):\n        result += i\n    return result",
        "num_ids": 25
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(range(1, n+1))\n",
        "num_ids": 14
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 1:\n        return n\n    return n + sum_to_n(n - 1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(brackets[i])\n        elif len(stack) > 0 and stack[-1] == \"(\":\n            stack.pop()\n        else:\n            return False\n",
        "num_ids": 73
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def bracket_map(bracket: str):\n        if bracket == \")\":\n            return \"(\"\n        else:\n            return \")\"\n    if brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    return all(map(bracket_map, brackets))\n",
        "num_ids": 81
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Copy over your implementation from PA4 here.\n    \n    # initialize the stack to keep track of the opening brackets\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n",
        "num_ids": 101
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    open_to_close = {}\n    for idx, c in enumerate(brackets):\n        if c not in open_to_close:\n            open_to_close[c] = []\n        open_to_close[c].append(idx)\n    is_balanced = True\n    for c, indices in open_to_close.items():\n        if not indices:\n            is_balanced = False\n        for idx in indices:\n            if idx == len(brackets) - 1:\n                is_balanced = False\n    return is_balanced\n",
        "num_ids": 133
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n",
        "num_ids": 52
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not brackets:\n        return True\n    if brackets[0] == \")\":\n        return False\n    return correct_bracketing(brackets[1:])\n",
        "num_ids": 41
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while brackets:\n        if not brackets.startswith(\"(\"):\n            return False\n        brackets = brackets[1:]\n        if not brackets.endswith(\")\"):\n            return False\n        brackets = brackets[:-1]\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not brackets:\n        return True\n    if brackets.startswith(\"(\"):\n        brackets = brackets[1:]\n    if not brackets.endswith(\")\"):\n        return False\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(\"(\")\n        elif b == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "num_ids": 108
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [xs[i] * i for i in range(1, len(xs))]\n    \ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    >>> integral([3, 1, 2, 4, 5])\n    [3, 3, 3]\n    >>> integral([1, 2, 3])\n    [1, 1]\n    \"\"\"\n    return [xs[0]] + [xs[i] + xs[i - 1] for i in range(1, len(xs))]\n    \ndef is_monotone(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return True if this polynomial is monotone, False otherwise.\n    >>> is_monotone([3, 1, 2, 4, 5])\n    True\n    >>> is_monotone([3, 2, 1, 4, 5])\n    False\n    >>> is_monotone([3, 1, 2, 4, 1])\n    True\n    >>> is_monotone([1, 2, 3])\n    True\n    \"\"\"\n    return all(xs[i] >= xs[i - 1] for i in range(1, len(xs)))\n    \ndef is_increasing(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return True if this polynomial is increasing, False otherwise.\n    >>> is_increasing([3, 1, 2, 4, 5])\n    True\n    >>> is_increasing([3, 2, 1, 4, 5])\n    False\n    >>> is_increasing([3, 1, 2, 4, 1])\n    True\n    >>> is_increasing([1, 2, 3])\n    True\n    \"\"\"\n    return all(xs[i] <= xs[i - 1] for i in range(1, len(xs)))\n    \ndef is_decreasing(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return True if this polynomial is decreasing, False otherwise.\n    >>> is_decreasing([3, 1, 2, 4, 5])\n    True\n    >>> is_decreasing([3, 2, 1, 4, 5])\n    False\n    >>> is_decreasing([3, 1, 2, 4, 1])\n    True\n    >>> is_decreasing([1, 2, 3])\n    True\n    \"\"\"\n    return all(xs[i] >= xs[i - 1] for i in range(1, len(xs)))\n    \ndef is_log_monotone(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return True if this polynomial is log-monotone, False otherwise.\n    >>> is_log_monotone([3, 1, 2, 4, 5])\n    True\n    >>> is_log_monotone([3, 2, 1, 4, 5])\n    False\n    >>> is_log_monotone([3, 1, 2, 4, 1])\n    True\n    >>> is_log_monotone([1, 2, 3])\n    True\n    \"\"\"\n    return all(xs[i] <= xs[i - 1] for i in range(1, len(xs)))\n    \ndef is_quasilinear(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return True if this polynomial is quasilinear, False otherwise.\n    >>> is_quasilinear([3, 1, 2, 4, 5])\n    False\n    >>> is_quasilinear([3, 2, 1, 4, 1])\n    True",
        "num_ids": 1024
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(xs) == 0:\n        return []\n    elif len(xs) == 1:\n        return [1]\n    else:\n        return [xs[i] + (i + 1) * xs[i + 1] for i in range(len(xs) - 1)]\n",
        "num_ids": 70
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [np.poly1d([1] + xs[1:])(x) for x in xs[:-1]]\n",
        "num_ids": 31
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # your code here\n    pass\n",
        "num_ids": 12
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    derivative_coefficients = []\n    for i in range(len(xs) - 1):\n        derivative_coefficients.append(xs[i] * i)\n    derivative_coefficients.append(xs[-1])\n    return derivative_coefficients\n",
        "num_ids": 66
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    d = []\n    for i in range(1, len(xs)):\n        d.append(xs[i] * i)\n    return d\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_list = []\n    for i in range(1, len(xs)):\n        new_list.append(xs[i] * i)\n    return new_list\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if xs == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i*x for i, x in enumerate(xs, start=1)]\n",
        "num_ids": 22
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Check for valid xs\n    assert xs!= []\n    N = len(xs)\n    result = [0] * (N-1)\n    for i in range(N-1):\n        result[i] = xs[i+1] * i\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a, b = 0, 1\n    while n >= 1:\n        a, b = b, a + b\n        n -= 1\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # If n is zero or one, return zero.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    # If n is greater than 2, use a 2D array of size (n+2)x2 to store the values of the Fibonacci sequence.\n    # Instead of constructing the array and populating it with the values, we can start by initializing the array\n    # with the values of the Fibonacci sequence that are known.\n    # In the array, the first row is the ones before the first value, and the second row is ones after the first value.\n    # Furthermore, the next row is equal to the previous two rows plus the last two values.\n    # For example, when n is 3, the array is as follows:\n    # [0, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\n    # 13784, 217811, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141,\n    # 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025,\n    # 20365011074, 32951280099, 55364696976, 89600432373, 15774275048, 25861475308, 43046721123, 67690311272,\n    # 11239034579, 1836311903, 29679870208, 46368997508, 750255584737, 121393405161, 196418294460, 3178115844749,\n    # 5142296976049, 8320408001511, 1346269293542, 2178115844749, 35245781427233, 57028876844037, 922746579585350,\n    # 149303521278049, 24157817163656, 39088169274971, 63245986328125, 102334155284977, 165580141129525, 267914296994049,\n    # 4334944370075975, 701408733117518, 1134903170484810, 1836311903124977, 2971215073702851, 4807526976394755,\n    # 777874204911051, 12586269025121393, 2036501107412570, 3295128009997899, 55364696976394755, 8960043237301894,\n    # 15774275048174852, 25861475308878174, 4304672112738081, 6769031130223384, 11239034579260061, 1836311903124977,\n    # 2967987020825760, 46368997509223079, 7502555847370079, 12139340516058582, 19641829446051758, 31781158447490539,\n    # 514229697615651895, 8320408001511145, 13462692935421691, 21781158447490023, 35245781427233204, 57028876844037246,\n    # 92274657958535099, 14930352127804925, 24157817163656173, 3908816927497110, 63245986328125225, 10233415528497716,\n    # 16558014112952580, 26791429699404925, 433494437007597585, 70140873311751819, 113490317048481025, 183631190312497761,\n    # 297121507370285150, 48075269763947559, 77787420491105125, 1258626902512139320, 203650110741257060, 329512800999789955,\n    # 553646969763947559, 896004323730",
        "num_ids": 1027
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        raise ValueError('n cannot be negative')\n    elif n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 68
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if n < 1:\n        return 0\n    elif n < 3:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b\n    \n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 70
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 3:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = set(['a','e','i','o','u','y'])\n    vowels_count = 0\n    for letter in s:\n        if letter in vowels:\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 0\n    for c in s:\n        if c in 'aeiou':\n            total += 1\n        elif c == 'y' and s[-1] == 'y':\n            total += 1\n    return total\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 0\n    for letter in s:\n        if letter in ('a', 'e', 'i', 'o', 'u', 'y'):\n            vowels += 1\n    return vowels\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('y')\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowel_count = 0\n    for i in s:\n        if i in 'aeiou':\n            vowel_count += 1\n        elif i == 'y':\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 60
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowel_count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            vowel_count += 1\n        elif letter == 'y':\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 60
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for c in s:\n        if c in 'aeiouy':\n            count += 1\n        elif c == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for letter in s:\n        if letter in 'aeiou':\n            count += 1\n        elif letter == 'y' and s[-1] == 'y':\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if shift > len(str(abs(x))):\n        return str(x)[-shift:] + str(abs(x))[:-shift]\n    return str(abs(x))[-shift:] + str(abs(x))[:-shift]",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Split the number into a list of digits\n    digits = list(str(x))\n    # Make sure shift is not longer than the number of digits\n    shift = shift % len(digits)\n    # Perform the shift\n    digits = digits[-shift:] + digits[:-shift]\n    # Convert the list of digits back to a number\n    return int(''.join(digits))\n",
        "num_ids": 93
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if shift >= len(str(abs(x))):\n        return str(x)[::-1]\n    return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    digits = str(abs(x))\n    if shift > len(digits):\n        shift = shift % len(digits)\n    if x < 0:\n        return int(str(abs(x))[:shift] + str(abs(x))[shift:])\n    else:\n        return int(str(abs(x))[len(digits)-shift:] + str(abs(x))[:len(digits)-shift])\n",
        "num_ids": 105
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # CIRULAR SHIFT PSEUDOCODE\n    # 1. Get the length of the input integer\n    length = len(str(x))\n    # 2. Pad the input integer with leading zeros\n    # 3. Pad the input integer with leading zeros until it is the same length as the input integer\n    padded_x = str(x)\n    while len(padded_x) < length:\n        padded_x = \"0\" + padded_x\n    # 4. Shift the digits of the padded integer right by shift\n    shifted = \"\"\n    for i in range(shift, length+shift):\n        shifted += padded_x[i % length]\n    # 5. Return the output string\n    return shifted\n",
        "num_ids": 170
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    x %= 10 ** shift\n    return str(int(str(x)[-shift:] + str(x)[:-shift]))\n",
        "num_ids": 32
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (x // 10 ** shift) % 10 * 10 ** shift + \\\n        (x % 10 ** shift) * 10 ** (shift - 1)\n",
        "num_ids": 36
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = [int(c) for c in str(x)]\n    if shift > len(l):\n        return \"\".join([str(i) for i in l[::-1]])\n    else:\n        return \"\".join([str(i) for i in l[len(l)-shift:]] + [str(i) for i in l[:len(l)-shift]])\n",
        "num_ids": 93
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if shift > len(str(abs(x))):\n        return str(abs(x))[::-1]\n",
        "num_ids": 29
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    x %= MOD\n    n = x // 10\n    last = x % 10\n    first = x % MOD // 10\n    return str(last - n * 10 + first) + str(first) * n\n",
        "num_ids": 50
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.upper()\n    return sum([ord(x) for x in s if ord(x) >= 65 and ord(x) <= 90])\n",
        "num_ids": 37
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([ord(c) for c in s if c.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(ord(c) - 65 for c in s if ord(c) >= 65)\n",
        "num_ids": 24
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([ord(c) - 64 for c in s.upper() if c.isalpha()])\n",
        "num_ids": 26
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(map(ord,list(s.upper())[1:]))\n",
        "num_ids": 20
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(ord(i) for i in s if ord(i) > 64)\n",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(map(ord, s.upper()))\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(ord(x) for x in s.upper() if ord(x) >= 65 and ord(x) <= 90)",
        "num_ids": 31
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in s.split():\n        if i == \"apples\":\n            count += 1\n        elif i == \"oranges\":\n            count += 1\n        elif i == \"mangoes\":\n            count += 1\n    return n-count\n",
        "num_ids": 66
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.strip().split()\n    a = int(s[0])\n    b = int(s[1])\n    n -= a\n    n -= b\n    return n\n    \ndef max_product(a, b):\n    \"\"\"\n    In this task, you will be given a list of positive integers which represent the daily value of a \n    stock of fruits. You have to return the maximum profit that can be made by buying one fruit and \n    selling one fruit.\n    For examble:\n    max_product([1, 2, 3, 4, 5]) -> 5\n    max_product([5, 4, 3, 2, 1]) -> 0\n    max_product([3, 5, 4, 7, 10]) -> 10\n    \"\"\"\n    a.sort()\n    b.sort(reverse=True)\n    if len(a) == 1 or len(b) == 1:\n        return max(a[0], b[0])\n    else:\n        return max(a[0] * b[0], a[-1] * b[-1])\n",
        "num_ids": 250
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    x = n - s.count('apple') - s.count('orange')\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total_apples = int(s.split(\" \")[0])\n    total_oranges = int(s.split(\" \")[1])\n    return n - total_apples - total_oranges\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l=s.split()\n    k=len(l)\n    c=0\n    for i in range(k):\n        if l[i]==\"oranges\":\n            c+=n/3\n        if l[i]==\"apples\":\n            c+=n/2\n        if l[i]==\"mangos\":\n            c+=n/1\n    return c\n",
        "num_ids": 93
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def get_fruit_distribution(fruit_distribution_string, total_fruits):\n        \"\"\"\n        input: string, int\n        output: int\n        \"\"\"\n        return total_fruits - int(fruit_distribution_string.split(\" \")[0]) - int(fruit_distribution_string.split(\" \")[1])\n    return get_fruit_distribution(s, n)\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(s):\n        if s[i]==\"0\":\n            i+=1\n        else:\n            break\n    #print(i)\n    #print(s[i:])\n    return int(s[i:])-int(s[:i])-int(s[i+1:])\n",
        "num_ids": 83
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    m = 0\n    for i in range(n):\n        if s[i] == 'o':\n            m += 1\n    for i in range(n,n+n):\n        if s[i] == 'a':\n            m += 1\n    return m\n",
        "num_ids": 64
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a = s.split(\" \")[0]\n    b = s.split(\" \")[1]\n    a = int(a)\n    b = int(b)\n    mango = 0\n    orange = 0\n    if n >= a + b:\n        mango = n - (a + b)\n        if mango >= a:\n            mango -= a\n        else:\n            mango = 0\n        if mango >= b:\n            mango -= b\n        else:\n            mango = 0\n    else:\n        mango = 0\n    orange = n - mango\n    return mango",
        "num_ids": 139
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.count('mango') - s.count('apples') - s.count('oranges')\n",
        "num_ids": 27
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def even(x):\n        return x % 2 == 0\n",
        "num_ids": 16
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    nodes = sorted(arr)\n    return nodes[::2] + [nodes[0]]\n",
        "num_ids": 35
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = list()\n    if len(arr) == 0:\n        return l\n    \n    l = [ [ arr[0], 0 ] ]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            l.append( [ arr[i], i ] )\n    l.sort()\n    return l[0]\n",
        "num_ids": 89
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def get_smallest_even(arr):\n        return min(arr, key=lambda x: x%2)\n    \n    def get_smallest_index(arr):\n        return arr.index(min(arr, key=lambda x: x%2))\n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    if len(arr) == 0: return res\n    \n    v = [item for item in arr if item % 2 == 0]\n    if len(v) == 0:\n        return res\n    \n    index = min(v, key=lambda x:x[1])[1]\n    res = [arr[index], index]\n    return res",
        "num_ids": 87
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    even = [x for x in arr if x % 2 == 0]\n    if len(even) == 0:\n        return []\n    else:\n        min_even = min(even)\n        return [min_even, arr.index(min_even)]\n",
        "num_ids": 78
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    return [arr[-1], arr.index(arr[-1])]\n",
        "num_ids": 40
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    ans = []\n    ind = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            ans.append([arr[i], i])\n            ind = i\n    if not ans:\n        return []\n    ans.sort(key=lambda x: x[0])\n    return [ans[0][0], ind]\n",
        "num_ids": 99
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    return [arr[idx] for idx, val in enumerate(arr) if val % 2 == 0 and val == min(arr[idx:], key=lambda x:x%2)][0:2]\n",
        "num_ids": 62
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    #Brute force: O(n**2)\n    lst.sort()\n    for i, num in enumerate(lst):\n        count = lst.count(num)\n        if count > num:\n            return num\n    return -1\n    \n    #Better than brute force: O(n)\n    nums = {}\n    for num in lst:\n        nums[num] = nums.get(num, 0) + 1\n    max_freq = -1\n    for num in nums:\n        if nums[num] > max_freq:\n            max_freq = nums[num]\n            max_num = num\n    return max_num if max_freq > 0 else -",
        "num_ids": 174
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(lst, key = lambda x: lst.count(x)) if len(lst) > 0 else -1\n",
        "num_ids": 32
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    freq = defaultdict(int)\n    for val in lst:\n        freq[val] += 1\n",
        "num_ids": 28
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    # print lst\n    if lst[-1] < 0:\n        return -1\n    count = lst[-1]\n    for i in range(count+1,len(lst)):\n        if lst[i] == lst[count]:\n            return -1\n        else:\n            return lst[count]\n    return -1\n",
        "num_ids": 94
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for x in lst:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    max_freq = max(d.values())\n    for x in d:\n        if d[x] == max_freq:\n            return x\n    return -1\n",
        "num_ids": 83
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > i:\n            return i\n    return -1\n",
        "num_ids": 67
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    freq = {}\n    max_freq = 0\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n            if freq[elem] > max_freq:\n                max_freq = freq[elem]\n        else:\n            freq[elem] = 1\n    return -1 if max_freq == 0 else max(freq.keys())\n",
        "num_ids": 105
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return -1\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        lst_len = len(lst)\n        min_value = lst[0]\n        max_value = lst[-1]\n        for i in range(lst_len):\n            if lst[i] > max_value:\n                max_value = lst[i]\n        for i in range(lst_len):\n            if lst[i] < min_value:\n                min_value = lst[i]\n        for i in range(lst_len):\n            if (lst[i] >= min_value) and (lst[i] <= max_value) and (lst[i] > lst.count(lst[i])):\n                return lst[i]\n        return -1\n",
        "num_ids": 218
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = sorted(set(lst))\n    for n in lst:\n        if lst[-1]!= n and lst[-1] - n > 0:\n            return n\n    return -1",
        "num_ids": 53
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = {}\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    max_num = 0\n    for num in count:\n        if count[num] >= max_num:\n            max_num = count[num]\n            max_num_num = num\n    return max_num_num\n    \ndef search_2(lst):\n    '''\n    Given a list of integers, find the element that occurs the most times in the array. \n    If there are more than 1 element with the same frequency, return the largest one.\n    If the list is empty, return None.\n    Examples:\n        search_2([1,2,2,3,3,3,3,4,4,4]) == 4\n        search_2([1,1,2,2,2,2,3,3,3,3,4,4]) == 3\n        search_2([]) == None\n        search_2([1]) == 1\n    '''\n    count = {}\n    max_num = 0\n    for num in lst:\n        if num not in count:\n            count[num] = 0\n        count[num] += 1\n    for num in count:\n        if count[num] > max_num:\n            max_num = count[num]\n            max_num_num = num\n    return max_num_num\n",
        "num_ids": 334
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return lst\n",
        "num_ids": 6
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = lst[:]\n    if len(lst) < 2:\n        return lst\n    lst = sorted(lst)\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n",
        "num_ids": 66
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst.sort()\n    if lst:\n        if lst[0] > lst[-1]:\n            lst.reverse()\n    return lst\n",
        "num_ids": 41
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst_new = [0] * len(lst)\n    min_ = min(lst)\n    max_ = max(lst)\n    lst_new[0] = min_\n    lst_new[-1] = max_\n    for i in range(1, len(lst) - 1):\n        lst_new[i] = lst[i]\n    lst_new = lst_new + lst[-1:-len(lst):-1]\n    return lst_new\n",
        "num_ids": 127
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    lst.sort()\n    return lst\n",
        "num_ids": 19
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return lst\n    else:\n        return [lst[-1]] + strange_sort_list([i for i in lst if i!= lst[-1]])\n",
        "num_ids": 55
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(lst)\n    for i in range(n):\n        min_ind = i\n        for j in range(i + 1, n):\n            if lst[j] < lst[min_ind]:\n                min_ind = j\n        lst[i], lst[min_ind] = lst[min_ind], lst[i]\n    return lst\n",
        "num_ids": 94
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your code here\n    res = []\n    if len(lst) <= 0:\n        return res\n    min_v = min(lst)\n    max_v = max(lst)\n",
        "num_ids": 49
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = lst[:]\n    for i in range(len(lst)):\n        lst[i] = min(lst)\n        lst[i] = max(lst)\n    return lst\n",
        "num_ids": 54
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return round(math.sqrt((b*b) + (c*c) - 2*b*c) / 2, 2)\n",
        "num_ids": 33
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return '%.2f' % area\n    return -1\n",
        "num_ids": 78
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (a + b) > c:\n        if (b + c) > a:\n            if (c + a) > b:\n                return round((a * b) / 2, 2)\n            else:\n                return -1\n        else:\n            return -1\n    else:\n        return -1\n",
        "num_ids": 75
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    side_a = float(a)\n    side_b = float(b)\n    side_c = float(c)\n",
        "num_ids": 31
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = float(a)\n    b = float(b)\n    c = float(c)\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
        "num_ids": 101
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2) if a+b>=c and b+c>=a and c+a>=b else -1\n",
        "num_ids": 73
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1",
        "num_ids": 80
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import math\n    if a + b > c and a + c > b and b + c > a:\n        return round((math.sqrt(a*b*c))/2,2)\n    else:\n        return -1\n",
        "num_ids": 56
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a + b + c) *.5, 2)\n    else:\n        return -1\n",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(((a + b + c) / 2) * ( ( (a + b + c) / 2 ) - a ) * \\\n            ( ( (a + b + c) / 2 ) - b ) * ( ( (a + b + c) / 2 ) - c ), 2)\n    else:\n        return -1\n",
        "num_ids": 99
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_balanced(q) and sum(q) <= w\n",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if is_palindromic(q):\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = len(q)\n    s = 0\n    for i in range(l):\n        s+=q[i]\n    if s <= w and is_palindromic(q) == True:\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import re\n    def is_palindrome(x):\n        if type(x)==str:\n            x = x.lower()\n            return x==x[::-1]\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (is_palindromic(q) == True) and (sum(q) <= w)\n",
        "num_ids": 26
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    def rec_will_it_fly(q, w, i=0):\n        if i == len(q):\n            return False\n        if w == 0:\n            return True\n        if not rec_will_it_fly(q, w, i+1):\n            return False\n        if q[i] <= w:\n            q[i] += 1\n            if rec_will_it_fly(q, w, i):\n                return True\n            else:\n                q[i] -= 1\n        return False\n",
        "num_ids": 125
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Palindrome, sum is even, less than or equal to weight\n    if q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w:\n        return True\n    else:\n        return False",
        "num_ids": 59
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if balanced(q):\n        return True if sum(q) <= w else False\n    return False\n",
        "num_ids": 25
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_palindrome(q):\n        return q == q[::-1]\n    def is_balanced(q):\n        return sum(q) <= w and is_palindrome(q)\n    return is_balanced(q)\n    \n",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_balanced(lst):\n        if len(lst) % 2 == 0:\n            return True\n        else:\n            return False\n    def sum_of_elements(lst):\n        total = 0\n        for i in lst:\n            total += i\n        return total\n    if is_balanced(q) == True:\n        return sum_of_elements(q) <= w\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def helper(arr):\n        if len(arr) == 1:\n            return 0\n        elif len(arr) == 2:\n            return 1\n        else:\n            change_first = helper(arr[1:])\n            change_last = helper(arr[:-1])\n            if arr[0] == arr[-1]:\n                return change_first + change_last\n            else:\n                return min(change_first, change_last) + 1\n    return helper(arr)",
        "num_ids": 115
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    p1, p2 = 0, len(arr) - 1\n    while p1 < p2:\n        if arr[p1]!= arr[p2]:\n            arr[p1], arr[p2] = arr[p2], arr[p1]\n            p1 += 1\n            p2 -= 1\n        else:\n            p1 += 1\n            p2 -= 1\n    return len(arr) - (p1 + 1)\n",
        "num_ids": 106
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr.sort()\n    index = 0\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) <= 1:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    changes = 0\n    for i in range(len(arr)):\n        if arr[i]!= i:\n            changes += 1\n            arr[arr[i]] = i\n    return changes\n",
        "num_ids": 48
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([len(arr) - i for i in range(len(arr) // 2) if arr[i]!= arr[~i]])\n",
        "num_ids": 37
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if arr == []:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 1: return 0\n    front, back = 0, len(arr)-1\n    min_changes = len(arr)\n    while front < back:\n        if arr[front]!= arr[back]:\n            min_changes = min(min_changes, back-front)\n            #reverse the subarray from front to back\n            reverse_array(arr, front, back)\n            front += 1\n        else:\n            front += 1\n            back -= 1\n    return min_changes\n",
        "num_ids": 120
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    arr_len = len(arr)\n    for i in xrange(arr_len / 2):\n        if arr[i]!= arr[arr_len - 1 - i]:\n            return i + 1\n",
        "num_ids": 50
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) < len(lst2):\n        for i in lst1:\n            if len(i) > len(lst2):\n                lst1.remove(i)\n    else:\n        for i in lst2:\n            if len(i) > len(lst1):\n                lst2.remove(i)\n    return lst1 + lst2\n",
        "num_ids": 97
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i for i in lst1 if sum(len(j) for j in i) < sum(len(j) for j in lst2)]\n",
        "num_ids": 38
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in lst1 if len(x) <= len(lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    elif len(lst1) == len(lst2):\n        return lst1\n",
        "num_ids": 69
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [item for item in lst1 if len(item) < len(lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst2) > len(lst1):\n        return lst2\n    elif len(lst2) == len(lst1):\n        return lst1\n    else:\n        for i in range(len(lst1)):\n            if len(lst1[i]) < len(lst2[i]):\n                return lst1\n            elif len(lst1[i]) > len(lst2[i]):\n                return lst2\n            elif len(lst1[i]) == len(lst2[i]):\n                pass\n",
        "num_ids": 167
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    l1 = [len(x) for x in lst1]\n    l2 = [len(x) for x in lst2]\n    return [x for i, x in enumerate(lst1) if l1[i] <= l2[i]]\n    \n",
        "num_ids": 68
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return total_match(lst1[1:], lst2[1:])\n",
        "num_ids": 80
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)] + [x for x in lst2 if len(x) < len(lst1)]\n",
        "num_ids": 45
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def prime_sieve(n):\n        \"\"\" returns a list of the prime numbers up to n \"\"\"\n        is_prime = [True] * (n + 1)\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(2, int(n**0.5) + 1):\n            if not is_prime[i]:\n                continue\n            for j in range(i * 2, n + 1, i):\n                is_prime[j] = False\n        return [i for i in range(n + 1) if is_prime[i]]\n    prime_list = prime_sieve(100)\n    for i in prime_list:\n        if a % i == 0:\n            if a / i in prime_list and a / i!= i:\n                return True\n    return False\n",
        "num_ids": 198
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 100:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(a**(1/2)) + 1):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return is_prime(a) and is_prime(a / 2) and is_prime(a / 3)\n    ",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a < 100:\n        return False\n    for i in range(2,a):\n        if a%i == 0:\n            if is_prime(i) and is_prime(a/i):\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a <= 100:\n        return False\n    for i in range(2,a):\n        if a % i == 0:\n            if is_prime(i) and is_prime(a/i):\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #a = 30\n    if a < 3:\n        return False\n    \n    d = 2\n    while d * d <= a:\n        if a % d == 0:\n            return False\n        d += 1\n",
        "num_ids": 52
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_prime(a) and is_prime(a/2) and is_prime(a/3)\n",
        "num_ids": 28
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #return x ** n == 1\n    return x % n == ",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x==n**int(str(n)[0])\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x % n == 0 and x / n == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x == n:\n        return True\n    if x % n == 0:\n        return False\n    if x % n == 1:\n        return True\n    if x < n:\n        return False\n    return is_simple_power(x/n, n)\n",
        "num_ids": 64
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n**int(log(x, n)) == x\n    \n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # check if x/n is an integer\n    if x % n!= 0:\n        return False\n    # check if n is a power of x\n    if x == n:\n        return True\n    # x is a power of n\n    return is_simple_power(x/n, n)\n",
        "num_ids": 72
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return n==1 or n==x or x%n==0\n",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n**int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Add your code here\n    return n**int(log(x, n)) == x\n",
        "num_ids": 23
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a**(1/3) == int(a**(1/3))\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a == a*a*a",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a == a * a * a",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a<0:\n        return False\n    elif a==0:\n        return True\n    else:\n        return a**3==int(a**3)\n",
        "num_ids": 41
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # your code here\n    return pow(a,3) == a\n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return a*a*a == a\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a ** 3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == 0:\n        return True\n    else:\n        return a * a * a == a\n",
        "num_ids": 26
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0,len(num)):\n        if(is_prime(int(num[i]))):\n            count = count + 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    global primes\n    primes = []\n    for i in range(len(primes), int(math.sqrt(num)) + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    n = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789':\n            n += 1\n        elif num[i] in '0123456789AB':\n            if num[i + 1] in '0123456789AB' and num[i]!= '0':\n                n += 1\n            if num[i] == '0':\n                continue\n            if (i < len(num) - 1 and \n                num[i + 1] in '0123456789AB' and num[i + 2] in '0123456789AB'):\n                n += 1\n            if num[i] == 'A' and num[i + 1] == 'B':\n                n += 1\n            if num[i] == 'B' and num[i + 1] == 'A':\n                n += 1\n            if num[i] == 'C' and num[i + 1] == 'D':\n                n += 1\n            if num[i] == 'D' and num[i + 1] == 'C':\n                n += 1\n            if num[i] == 'E' and num[i + 1] == 'D':\n                n += 1\n            if num[i] == 'D' and num[i + 1] == 'E':\n                n += 1\n            if num[i] == 'F' and num[i + 1] == 'E':\n                n += 1\n            if num[i] == 'E' and num[i + 1] == 'F':\n                n += 1\n    return n\n",
        "num_ids": 446
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if num:\n        dec = int(num, 16)\n        return sum(is_prime(int(num, 16)) for num in [num[:3], num[3:6], num[6:]])\n    return 0\n",
        "num_ids": 56
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(num)\n    count = 0\n    for i in xrange(n):\n        digit = int(num[i])\n        if is_prime(digit):\n            count += 1\n            if count > 6:\n                return count\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\n    103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,\n    227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\n    353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\n    487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619,\n    631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769,\n    773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\n    937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    primes_dict = {}\n    for key, value in enumerate(primes):\n        primes_dict[key] = value\n    num_dict = {}\n    for char in num:\n        num_dict[char] = 0\n    for char in num:\n        num_dict[char] += 1\n    output = 0\n    for key in num_dict:\n        if num_dict[key] == 2:\n            output += 1\n        elif num_dict[key] == 3:\n            if primes_dict[key] not in num_dict.keys():\n                output += 1\n        elif num_dict[key] == 4:\n            if primes_dict[key] not in num_dict.keys():\n                output += 2\n        elif num_dict[key] == 5:\n            if primes_dict[key] not in num_dict.keys():\n                output += 2\n        elif num_dict[key] == 6:\n            if primes_dict[key] not in num_dict.keys():\n                output += 2\n        elif num_dict[key] == 7:\n            if primes_dict[key] not in num_dict.keys():\n                output += 3\n        elif num_dict[key] == 8:\n            if primes_dict[key] not in num_dict.keys():\n                output += 3\n        elif num_dict[key] == 9:\n            if primes_dict[key] not in num_dict.keys():\n                output += 3\n        elif num_dict[key] == 10:\n            if primes_dict[key] not in num_dict.keys():\n                output += 4\n        elif num_dict[key] == 11:\n            if primes_dict[key] not in num_dict.keys():\n                output += 4\n        elif num_dict[key] == 12:\n            if primes_dict[key] not in num_dict.keys():\n                output += 4\n        elif num_dict[key] == 13:\n            if primes_dict[key] not in num_dict.keys():\n                output += 4\n        elif num_dict[key] == 14:\n            if primes_dict[key] not in num_dict.keys():\n                output += 5\n        elif num_dict[key] == 15:\n            if primes_dict[key] not in num_dict.keys():\n                output += 5\n        elif num_dict[key] == 16:\n            if primes_dic",
        "num_ids": 1026
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def check_prime(n):\n        \"\"\"This function returns True if the number is a prime number\n        and False otherwise\"\"\"\n        if n < 2:\n            return False\n        elif n in (2,3):\n            return True\n        else:\n            for d in range(2,n):\n                if n % d == 0:\n                    return False\n            return True\n    def count_digits(n):\n        \"\"\"This function counts the number of digits in the hex number\n        n\"\"\"\n        count = 0\n        while n:\n            n //= 16\n            count += 1\n        return count\n    prime_nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    count = 0\n    if num == \"\":\n        return 0\n    else:\n        for i in range(0,len(num),2):\n            digits_num = [int(digit) for digit in num[i:i+2]]\n            digits_num_str = ''.join([str(digit) for digit in digits_num])\n            for j in range(0,len(digits_num_str)):\n                if digits_num_str[j] not in digits:\n                    continue\n                else:\n                    digits_num_str = digits_num_str.replace(digits_num_str[j],'')\n                    if check_prime(int(digits_num_str, 16)):\n                        count += 1\n    return count + count_digits(int(num, 16))\n",
        "num_ids": 753
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # check if the input is correct or empty string, if not convert it to string\n    if type(num)!= str:\n        num = str(num)\n    # check if the input is uppercase or not, if not convert it to uppercase\n    if num.isupper():\n        num = num.lower()\n",
        "num_ids": 76
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    \"\"\"\n    # Python 2 solution\n    \n    sum_of_primes = 0\n    for x in num:\n        if x in [\"2\",\"3\",\"5\",\"7\"]:\n            sum_of_primes += 1\n        if x == \"B\":\n            sum_of_primes += 1\n        if x == \"D\":\n            sum_of_primes += 1\n    return sum_of_primes\n    \"\"\"\n    \n    # Python 3 solution\n    \n    from collections import Counter\n    \n    c = Counter(num)\n    return sum(v for k, v in c.items() if k in ['2','3','5','7']) + c.get('B',0) + c.get('D',0)\n",
        "num_ids": 176
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    global primes\n    global primes_dec\n    primes_dec = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 253",
        "num_ids": 1024
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    binary = \"\"\n    while decimal:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    binary = \"db\" + binary + \"db\"\n    return binary\n",
        "num_ids": 49
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal /= 2\n",
        "num_ids": 33
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bin_string = ''\n",
        "num_ids": 8
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    binary = ''\n    binary += 'db'\n",
        "num_ids": 19
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num_bits = int(log(decimal) / log(2)) + 1\n    return 'db' + ('1' * num_bits) + 'db'\n",
        "num_ids": 40
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    binary = \"\"\n    while decimal!= 0:\n        if decimal % 2 == 0:\n            binary = \"0\" + binary\n        else:\n            binary = \"1\" + binary\n        decimal = decimal // 2\n    binary = \"db\" + binary\n    return binary\n",
        "num_ids": 66
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    binary = \"\"\n",
        "num_ids": 6
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''\n",
        "num_ids": 5
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return bin(decimal)\n",
        "num_ids": 9
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # as long as len(s) > 2\n    # if len(s) > 3:\n    #     # if len(s) > 4:\n    #     #     return False\n    #     # else:\n    #     #     return True\n    #     return False\n    # else:\n    #     return True\n    # return False\n",
        "num_ids": 82
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s and s[0]!= s[1] and s[1]!= s[2] and s[0]!= s[2]\n",
        "num_ids": 38
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.lower()\n    result = True\n    for i in range(1, len(s)-1):\n        if s[i-1] == s[i+1]:\n            result = False\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(s):\n        if s[i] == s[i+1]:\n            return False\n        else:\n            i += 1\n    if len(s) >= 3:\n        return True\n    else:\n        return False\n        \ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    i = 0\n    while i < len(s):\n        if len(s) < 3:\n            return False\n        elif len(s) % 3 == 0:\n            return True\n        else:\n            i += 1\n        \ndef is_happy3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    i = 0\n    while i < len(s):\n        if len(s) < 3:\n            return False\n        elif len(s) % 3!= 0:\n            i += 1\n        else:\n            i += 2\n        \ndef is_happy4(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n        else:\n            i += 1\n    if len(s) >= 3:\n        return True\n    else:\n        return False\n    \ndef is_happy5(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    s1 = []\n    s2 = []\n    for i in range(len(s)):\n        s1.append(s[i])\n    for i in range(len(s1)-1):\n        s2.append(s1[i])\n    if s1[-1] == s1[-2]:\n        s2.append(s1[-1])\n    if s2 == s1:\n        return True\n    else:\n        return False\n",
        "num_ids": 877
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s)<=2:\n        return False\n    return (s[0]==s[2]) and (s[1]==s[3])\n",
        "num_ids": 40
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        return True\n    else:\n        prev = s[0]\n        curr = s[1]\n        next = s[2]\n        if prev == curr and prev == next:\n            return is_happy(s[1:])\n        else:\n            return False\n",
        "num_ids": 91
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = [s[i:i+3] for i in range(len(s) - 3)]\n    return len(s) >= 3 and len(set(s)) == len(s)\n    # return all(a!= b for a, b in zip(s, s[1:]))\n",
        "num_ids": 71
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n    \n    \n",
        "num_ids": 61
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        x = []\n        for i in range(len(s)-3):\n            if s[i] == s[i+1] and s[i] == s[i+2] and s[i]!= s[i+3]:\n                return True\n            else:\n                continue\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n",
        "num_ids": 252
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    output = []\n    for gpa in grades:\n        if gpa == 4.0:\n            output.append('A+')\n        elif gpa > 3.7:\n            output.append('A')\n        elif gpa > 3.3:\n            output.append('A-')\n        elif gpa > 3.0:\n            output.append('B+')\n        elif gpa > 2.7:\n            output.append('B')\n        elif gpa > 2.3:\n            output.append('B-')\n        elif gpa > 2.0:\n            output.append('C+')\n        elif gpa > 1.7:\n            output.append('C')\n        elif gpa > 1.3:\n            output.append('C-')\n        elif gpa > 1.0:\n            output.append('D+')\n        elif gpa > 0.7:\n            output.append('D')\n        elif gpa > 0.0:\n            output.append('D-')\n        else:\n            output.append('E')\n    return output",
        "num_ids": 264
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    grades.sort(reverse=True)\n    for i in range(len(grades)):\n        grades[i] = int(grades[i])\n    for i in range(len(grades)):\n        if grades[i] < 4:\n            letter_grades[i] = 'F'\n        elif grades[i] < 4.3:\n            letter_grades[i] = 'D-'\n        elif grades[i] < 3.7:\n            letter_grades[i] = 'D'\n        elif grades[i] < 3.3:\n            letter_grades[i] = 'C-'\n        elif grades[i] < 3.0:\n            letter_grades[i] = 'C'\n        elif grades[i] < 2.7:\n            letter_grades[i] = 'B-'\n        elif grades[i] < 2.3:\n            letter_grades[i] = 'B'\n        elif grades[i] < 2.0:\n            letter_grades[i] = 'A-'\n        else:\n            letter_grades[i] = 'A'\n    return letter_grades\n",
        "num_ids": 312
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    grade_equation = {\n        4.0 : \"A+\",\n        3.7 : \"A\",\n        3.3 : \"A-\",\n        3.0 : \"B+\",\n        2.7 : \"B\",\n        2.3 : \"B-\",\n        2.0 : \"C+\",\n        1.7 : \"C\",\n        1.3 : \"C-\",\n        1.0 : \"D+\",\n        0.7 : \"D\",\n        0.0 : \"E\"\n    }\n    return [grade_equation[i] for i in grades]\n",
        "num_ids": 143
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    grades = [float(g) for g in grades]\n    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "num_ids": 65
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [_grade_string(g) for g in grades]\n",
        "num_ids": 17
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for grade in grades:\n        if grade >= 4.0:\n            result.append('A+')\n        elif grade >= 3.7:\n            result.append('A')\n        elif grade >= 3.3:\n            result.append('A-')\n        elif grade >= 3.0:\n            result.append('B+')\n        elif grade >= 2.7:\n            result.append('B')\n        elif grade >= 2.3:\n            result.append('B-')\n        elif grade >= 2.0:\n            result.append('C+')\n        elif grade >= 1.7:\n            result.append('C')\n        elif grade >= 1.3:\n            result.append('C-')\n        elif grade >= 1.0:\n            result.append('D+')\n        elif grade >= 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n",
        "num_ids": 248
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ['E', 'D-', 'D', 'C-', 'C', 'B-', 'B', 'A-', 'A', 'A+']\n",
        "num_ids": 39
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # string = input(\"Enter a string: \")\n    # string_length = len(string)\n    # if string_length > 1:\n    #     i = 2\n    #     while i < string_length:\n    #         if string_length % i == 0:\n    #             return False\n    #         else:\n    #             i += 1\n    #     return True\n    # else:\n    #     return False\n    # \n    # \n    # if len(string) > 1:\n    #     i = 2\n    #     while i < len(string):\n    #         if string[i] == string[0]:\n    #             return False\n    #         else:\n    #             i += 1\n    #     return True\n    # else:\n    #     return False\n    # \n    \n    if len(string) > 1:\n        i = 2\n        while i < len(string):\n            if string[i] == string[0]:\n                return False\n            else:\n                i += 1\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 258
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = int(len(string))\n    return s % 2 == 0 and s > 1\n",
        "num_ids": 23
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        if is_prime(int(string)):\n            return True\n        return False\n    else:\n        if is_prime(int(string[0:len(string) - 1])) and is_prime(int(string[1:])):\n            return True\n        return False\n    \n    \n    \n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return \n",
        "num_ids": 7
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string) == prime(len(string))\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string = string.split()\n    return len(string) == 1\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    primes = [2,3,5,7,11,13,17,19,23,29,31]\n    for prime in primes:\n        if string[:len(str(prime))] == str(prime):\n            return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    prime_flag = True\n    for i in string:\n        if string.count(i) > 1:\n            prime_flag = False\n            break\n    return prime_flag\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 6\n    else:\n        return 0\n",
        "num_ids": 44
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def digit_count(n):\n        return len(str(n))\n    digit_counts = {}\n    for i in range(1, 10):\n        digit_counts[i] = 0\n    digit_counts[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, 10):\n            if i % j == 0:\n                digit_counts[j] += digit_counts[i/j]\n    return sum(digit_counts.values())\n",
        "num_ids": 124
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 9 + 9 * 9\n    else:\n        return 9 * (9 + starts_one_ends(n - 1))\n",
        "num_ids": 62
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ways = [0] * 10\n    ways[1] = 1\n    for i in xrange(2, 10):\n        ways[i] = ways[i-1]\n        if i == 9:\n            ways[i] += 1\n    if n == 1:\n        return ways[1]\n",
        "num_ids": 72
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for x in xrange(1, 10**(n-1)):\n        if x%10 == 1:\n            count += 1\n        if x//10%10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(str(n)) - str(n).count('1')\n",
        "num_ids": 19
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n_1 = 0\n    for i in range(1, n+1):\n        if i // 10 == 0 or i % 10 == 1:\n            n_1 += 1\n    return n_1\n",
        "num_ids": 49
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO: implement this\n    return 0\n",
        "num_ids": 13
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in xrange(1, n+1):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 1\n    elif n > 10:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)\n    elif n == 10:\n        return starts_one_ends(n-1) + starts_one_ends(n-2) + 1\n    else:\n        return starts_one_ends(n-1)\n",
        "num_ids": 103
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return str(N).count(\"1\")\n",
        "num_ids": 12
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return str(bin(N).replace(\"0b\", \"\"))\n    \nprint(solve(1000)",
        "num_ids": 26
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in str(N):\n        total += int(i)\n    print(str(total))\n",
        "num_ids": 31
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = str(N)\n    ret = 0\n    for c in s:\n        ret += int(c)\n    return bin(ret)\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Initialize the final sum as 0.\n    # sum_num is the final sum.\n    sum_num = 0\n    # loop through the string from the most significant bit to the least significant bit.\n    for i in range(0, 32):\n        # Get the bit at the current position.\n        bit_num = get_bit(N, i)\n        # if the bit is 1, add to the current sum.\n        if bit_num == 1:\n            sum_num += bit_num\n    return str(sum_num)\n",
        "num_ids": 126
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    binary_string = str(bin(N))[2:]\n    return binary_string\n",
        "num_ids": 24
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Add your code here\n    if N == 0:\n        return \"0\"\n    res = []\n    while N!= 0:\n        res.append(str(N % 2))\n        N = N / 2\n    return ''.join(res[::-1])\n",
        "num_ids": 66
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(N):\n        # i = i+1, i = i+1-1..., i = 0\n        # i = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9\n        \n        total += i % 2\n        i /= 2\n    return str(total)\n",
        "num_ids": 82
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return str(bin(N).count('1'))\n",
        "num_ids": 15
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(len(str(N))):\n        total += int(str(N)[i])\n    return str(total)\n",
        "num_ids": 39
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst.insert(i, lst[i])\n        i += 2\n    del lst[0:len(lst):2]\n    return lst",
        "num_ids": 67
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            lst[i] += lst[i-1]\n    return lst[-1]\n",
        "num_ids": 61
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(lst) - 1:\n        if lst[i] % 2 == 0 and lst[i + 1] % 2!= 0:\n            lst[i + 1] = lst[i] + lst[i + 1]\n            i = i + 1\n        i = i + 1\n    return lst\n",
        "num_ids": 87
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #return sum(lst[1::2])\n    #return sum(lst[::2])\n    return sum(lst[1::2])\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    newList = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            newList.append(lst[i])\n    return newList\n",
        "num_ids": 46
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) > 0:\n        return lst[0] + add(lst[2:])\n    return 0\n",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join([i for i in s.split(' ') if i!= ''])",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.split()\n    a = sorted(s, key = lambda x : int(x[0]))\n    return''.join(a)",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join(sorted(s.split(), key=lambda word: ''.join(sorted(word))))\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = s.split()\n    l.sort(key=lambda word: word.lower())\n    return \" \".join(l)",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if type(s)!= str:\n        return 'Error: Input is not a string'\n    s_split = s.split()\n    s_join =''.join(s_split)\n    l_sorted = sorted(s_join.split())\n    s_join = ''.join(l_sorted)\n    s_split = s_join.split()\n    s_join =''.join(s_split)\n    return s_join",
        "num_ids": 106
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    words = s.split()\n    res =''.join([sorted(word) for word in words])\n    return res\n",
        "num_ids": 30
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = s.split(' ')\n    ordered = \"\"\n    for word in words:\n        ordered += ''.join(sorted(word)) + \" \"\n    return ordered[:-1]\n",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(s.split(\" \")))",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(sorted(s))\n",
        "num_ids": 13
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def get_list_of_lists(lst):\n        newlst = []\n        for sublst in lst:\n            if type(sublst)!= list:\n                sublst = [sublst]\n            newlst.append(sublst)\n        return newlst\n    \n    def get_list_of_tuples(lst):\n        return [tuple(lst[i]) for i in range(len(lst))]\n    \n    def get_list_of_coords(lst):\n        lst = get_list_of_lists(lst)\n        return get_list_of_tuples(lst)\n    \n    lst = get_list_of_lists(lst)\n    lst = get_list_of_coords(lst)\n    \n    if not lst:\n        return []\n    \n    return sorted(lst, key=lambda t: (t[0], -t[1]))\n",
        "num_ids": 235
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    def f(lst, x, li):\n        row, column = 0, len(lst)\n        while row < len(lst):\n            if lst[row][column] == x:\n                li.append((row, column))\n            row += 1\n        li.sort(key=lambda x: (x[0], -x[1]))\n        return li\n    if not lst:\n        return []\n    elif len(lst) == 1:\n        if lst[0][0] == x:\n            return [(0, 0)]\n        else:\n            return []\n    return f(lst, x, [])\n",
        "num_ids": 160
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Replace this line with your code\n    return sorted(lst, key=lambda t: t[0])[::-1]\n",
        "num_ids": 34
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def swap(lst, x, y):\n        lst[x], lst[y] = lst[y], lst[x]\n",
        "num_ids": 36
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst.sort()\n    row = 0\n    col = len(lst[0]) - 1\n    res = []\n    while col >= 0:\n        while row < len(lst):\n            if lst[row][col] == x:\n                res.append((row, col))\n                break\n            if lst[row][col] > x:\n                break\n            row += 1\n        col -= 1\n        row = 0\n    return res\n",
        "num_ids": 109
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = []\n    for row in lst:\n        for i, c in enumerate(row):\n            if c == x:\n                output.append((lst.index(row), i))\n                output.sort(key=lambda tup: tup[0])\n                output.sort(key=lambda tup: tup[1], reverse=True)\n                return output\n    return []\n",
        "num_ids": 94
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    coordinates = []\n    for row in lst:\n        for i, column in enumerate(row[::-1]):\n            if column == x:\n                coordinates.append((lst.index(row), i))\n                break\n    return sorted(coordinates, key=lambda x: x[0])\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def row_key(row):\n        return tuple(sorted(row, reverse = True))\n    return sorted(lst, key = row_key)\n",
        "num_ids": 38
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for row in lst:\n        for i in range(len(row)):\n            if row[i] == x:\n                result.append((lst.index(row), i))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = array[:]\n    if sum(result[0], result[-1]) % 2:\n        result.sort()\n    else:\n        result.sort(reverse=True)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_array = sorted(array)\n    return sorted_array\n",
        "num_ids": 18
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(array)",
        "num_ids": 7
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # TODO: use heap instead of sorting\n    result = []\n    for i in range(len(array)):\n        result.append(array[i])\n    result.sort()\n    return result\n    \ndef sort_array_using_heap(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n",
        "num_ids": 137
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def sort_array(array):\n        if not array:\n            return []\n        \n        odd_sum, even_sum = 0, 0\n        for num in array:\n            if (odd_sum + num) % 2 == 1:\n                odd_sum += num\n            else:\n                even_sum += num\n        if odd_sum > even_sum:\n            return sort_array(array[::-1])\n        return sort_array(array)\n    return sort_array(array)\n    \n",
        "num_ids": 119
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(array) <= 1:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_array = [array[0]]\n    for i in range(1, len(array)):\n        if (i % 2) == 0:\n            if array[i] > new_array[-1]:\n                new_array.append(array[i])\n            else:\n                new_array.insert(0, array[i])\n        else:\n            if array[i] < new_array[0]:\n                new_array.insert(0, array[i])\n            else:\n                new_array.append(array[i])\n    return new_array\n",
        "num_ids": 136
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_array = array[:]\n    for i in range(len(array)):\n        for j in range(len(array) - 1):\n            if sum(new_array[j]) > sum(new_array[j + 1]):\n                temp = new_array[j]\n                new_array[j] = new_array[j + 1]\n                new_array[j + 1] = temp\n    return new_array\n",
        "num_ids": 104
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # get the sum of all elements in the array\n    array_sum = sum(array)\n    # if the sum is odd, we sort the array in ascending order\n    if array_sum % 2 == 1:\n        return sorted(array)\n    # if the sum is even, we sort the array in descending order\n    else:\n        return sorted(array, reverse = True)\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def encrypt(s):\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        alphabet += alphabet[1:] + alphabet[:1]\n        new_alphabet = alphabet[2:] + alphabet[:2]\n        return new_alphabet[alphabet.index(s[0])] + encrypt(s[1:]) if len(s) > 1 else s\n    return encrypt(s)\n",
        "num_ids": 103
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    new_alpha = alpha[2:] + alpha[0:2]\n    return ''.join(new_alpha[alpha.index(c)+1] for c in s)\n",
        "num_ids": 62
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #turn the string into a list of letters\n    s = s.lower()\n    l = list(s)\n    #gather the characters\n    cs = 'abcdefghijklmnopqrstuvwxyz'\n    #create an empty string to build the result\n    res = ''\n    #loop through the letters and determine the new position\n    #in the alphabet\n    for i in range(len(l)):\n        c = l[i]\n        #convert the letter to a new position in the alphabet\n        j = (cs.index(c) + 2) % len(cs)\n        #insert the new letter into the result\n        res += cs[j]\n    #return the result\n    return res\n",
        "num_ids": 170
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = s.lower()\n    \n    rotated_alphabet = create_rotated_alphabet(alphabet)\n    \n    encrypted_str = ''\n    for char in s:\n        if char in alphabet:\n            if char =='':\n                encrypted_str +=''\n            else:\n                rotated_char = rotated_alphabet[alphabet.index(char)]\n                encrypted_str += rotated_char\n    return encrypted_str\n",
        "num_ids": 105
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rot_alphabet = alphabet[len(alphabet)::-1] + alphabet[0:len(alphabet)]\n    \n    encrypt_dict = {}\n    for letter in alphabet:\n        encrypt_dict[letter] = rot_alphabet[alphabet.index(letter)]\n",
        "num_ids": 88
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = s.lower()\n    r = ''\n    for i in s:\n        if i == 'a':\n            r += 'z'\n        elif i == 'b':\n            r += 'y'\n        elif i == 'c':\n            r += 'x'\n        elif i == 'd':\n            r += 'w'\n        elif i == 'e':\n            r += 'v'\n        elif i == 'f':\n            r += 'u'\n        elif i == 'g':\n            r += 't'\n        elif i == 'h':\n            r +='s'\n        elif i == 'i':\n            r += 'r'\n        elif i == 'j':\n            r += 'q'\n        elif i == 'k':\n            r += 'p'\n        elif i == 'l':\n            r += 'o'\n        elif i =='m':\n            r += 'n'\n        elif i == 'n':\n            r +='m'\n        elif i == 'o':\n            r += 'l'\n        elif i == 'p':\n            r += 'k'\n        elif i == 'q':\n            r += 'j'\n        elif i == 'r':\n            r += 'i'\n        elif i =='s':\n            r += 'h'\n        elif i == 't':\n            r += 'g'\n        elif i == 'u':\n            r += 'f'\n        elif i == 'v':\n            r += 'e'\n        elif i == 'w':\n            r += 'd'\n        elif i == 'x':\n            r += 'c'\n        elif i == 'y':\n            r += 'b'\n        elif i == 'z':\n            r += 'a'\n        else:\n            r += i\n    return r\n",
        "num_ids": 449
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = 'abcdefghijklmnopqrstuvwxyz'\n    b = 'nopqrstuvwxyzabcdefghijkl'\n    \n    #m = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    #n = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    \n    #return ''.join([m[(m.index(a[i])+1)%len(a)] for i in range(len(a))])\n    return ''.join([b[(b.index(a[i])+1)%len(b)] for i in range(len(a))])\n",
        "num_ids": 234
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #Create a list of every letter in the alphabet\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    #Create a list of every letter in the alphabet shifted down by two\n    rotated = []\n    for letter in letters:\n        rotated.append(letter + letter)\n    #Create a dictionary of the rotated letters\n    rotated_dict = {}\n    for index in range(len(letters)):\n        rotated_dict[rotated[index]] = letters[index]\n    \n    #Return the encrypted string\n    return rotated_dict[s]\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    #Create a list of every letter in the alphabet\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    \n    #Create a list of every letter in the alphabet shifted up by two\n    rotated = []\n    for letter in letters:\n        rotated.append(letter + letter)\n    #Create a dictionary of the rotated letters\n    rotated_dict = {}\n    for index in range(len(letters)):\n        rotated_dict[letters[index]] = rotated[index]\n    \n    #Return the encrypted string\n    return rotated_dict[s",
        "num_ids": 523
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    global alphabet\n    \n    new_alphabet = alphabet[1:] + alphabet[0:1]\n    \n    new_alphabet_upper = new_alphabet.upper()\n    \n    new_alphabet_lower = new_alphabet.lower()\n    \n    new_alphabet_cap_upper = new_alphabet_upper[1:] + new_alphabet_upper[0:1]\n    \n    new_alphabet_cap_lower = new_alphabet_lower[1:] + new_alphabet_lower[0:1]\n    \n    key_dict = {'a':'', 'b':'', 'c':'', 'd':'', 'e':'', 'f':'', 'g':'', 'h':'', 'i':'', 'j':'', 'k':'', 'l':'','m':'', 'n':'', 'o':'', 'p':'', 'q':'', 'r':'','s':'', 't':'', 'u':'', 'v':'', 'w':'', 'x':'', 'y':'', 'z':'', 'A':'', 'B':'', 'C':'', 'D':'', 'E':'', 'F':'', 'G':'', 'H':'', 'I':'', 'J':'', 'K':'', 'L':'', 'M':'', 'N':'', 'O':'', 'P':'', 'Q':'', 'R':'', 'S':'', 'T':'', 'U':'', 'V':'', 'W':'', 'X':'', 'Y':'', 'Z':''}\n    \n    output = ''\n    \n    for letter in s:\n        if letter in alphabet:\n            output += new_alphabet[alphabet.index(letter)]\n        elif letter in alphabet_upper:\n            output += new_alphabet_cap_upper[alphabet_upper.index(letter)]\n        elif letter in alphabet_lower:\n            output += new_alphabet_cap_lower[alphabet_lower.index(letter)]\n        else:\n            output += letter\n    \n    return output\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    global alphabet\n    \n    new_alphabet = alphabet[1:] + alphabet[0:1]\n    \n    new_alphabet_upper = new_alphabet.upper()\n    \n    new_alphabet_lower = new_alphabet.lower()\n    \n    new_alphabet_cap_upper = new_alphabet_upper[1:] + new_alphabet_upper[0:1]\n    \n    new_alphabet_cap_lower = new_alphabet_lower[1:] + new_alphabet_lower[0:1]\n    \n    key_dict = {'a':'', 'b':'', 'c':'', 'd':'', 'e':'', 'f':'', 'g':'', 'h':'', 'i':'', 'j':'', 'k':'', 'l':'','m':'', 'n':'', 'o':'', 'p':'', 'q':'', 'r':'','s':'', 't':'', 'u':'', 'v':'', 'w':'', 'x':'', 'y':'', 'z':'', 'A':'', 'B':'', 'C':'', 'D':'', 'E':'', 'F':'', 'G':'', 'H':'', 'I':'', 'J':'', 'K':'', 'L':'', 'M':'', 'N':'', 'O':'', 'P':'', 'Q':'', 'R':'', 'S':'', 'T':'', 'U':'', 'V':'', 'W':'', ",
        "num_ids": 1021
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # First Solution\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    return sorted_list[1]\n    \n    # Second Solution\n    sorted_list = sorted(lst)\n    return None if len(sorted_list) < 2 else sorted_list[1]\n    \n    # O(n log n) time complexity, O(1) space complexity\n    if len(lst) < 2:\n        return None\n    sorted_list = sorted(lst)\n    smallest = min(sorted_list)\n    return sorted_list[sorted_list.index(smallest) + 1]",
        "num_ids": 162
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # define your function here\n    if len(lst) == 0:\n        return None\n    \n    if len(lst) == 1:\n        return lst[0]\n    \n    smallest = None\n    smallest_index = None\n    for i in range(0, len(lst)):\n        if smallest is None:\n            smallest = lst[i]\n            smallest_index = i\n        else:\n            if smallest > lst[i]:\n                smallest = lst[i]\n                smallest_index = i\n    return smallest\n    \n    ",
        "num_ids": 139
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst.sort()\n    try:\n        return lst[1]\n    except:\n        return None",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    return lst[1] if len(lst)>1 else None\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    smallest_elem = lst[0]\n    smallest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < smallest_elem:\n            smallest_elem = lst[i]\n            smallest_index = i\n",
        "num_ids": 72
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    if n == 1:\n        return lst[0]\n    lst = sorted(lst)\n    return lst[1]\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    return min(lst)\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    smallest = None\n    for i in range(len(lst)):\n        if smallest is None or lst[i] < smallest:\n            smallest = lst[i]\n    if smallest is None:\n        return None\n    for i in range(len(lst)):\n        if lst[i] == smallest:\n            return lst[i + 1]\n",
        "num_ids": 90
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst.sort()\n    if lst:\n        return lst[-1]\n    return None\n    \ndef next_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1, 4, 3, 2]) == 4\n    next_largest([]) == None\n    next_largest([1, 1]) == None\n    \"\"\"\n    lst.sort()\n    if lst:\n        return lst[0]\n    return None\n    \ndef sort_partially_sorted(lst):\n    \"\"\"\n    You are given a partially sorted list of integers.\n    Your task is to determine the number of ways to partition the given list.\n    \n    For example, if the list is [1, 3, 5, 2, 4, 9, 7], we can divide it into 2 groups; the first group contains 1, 3, and 5, and the second group contains 2, 4, and 9.\n    \n    You will have to return 2.\n    \"\"\"\n    result = []\n    helper(lst, [], result)\n    return len(result)\n",
        "num_ids": 311
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum( 1 for line in S.split(\".\") if \"I\" == line.split()[0])\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for s in S.split('.'):\n        if s.startswith('I'):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for s in S.split('.') if s.startswith('I'))\n",
        "num_ids": 26
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([1 for s in S.split(\".\") + S.split(\"?\") + S.split(\"!\") if s.startswith(\"I\")])\n",
        "num_ids": 39
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(s.startswith('I') for s in S.split('.'))\n",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for x in S.split('.') if x.startswith('I')",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\" and len(word) > 3:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    S = S.split(\".\")\n    S = S.split(\"?\")\n    S = S.split(\"!\")\n    return S.count(\"I\")\n",
        "num_ids": 39
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return S.count(\"I\")",
        "num_ids": 9
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return True if (type(x) == int or type(x) == float) and (type(y) == int or type(y) == float) and (type(z) == int or type(z) == float) and (x + y == z) else False\n",
        "num_ids": 63
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    a = x\n    b = y\n    c = z\n    \n    if a == (b + c) and type(a) == type(b) == type(c) == int:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == (y + z) and type(x) is int:\n        return True\n    else:\n        return False\n    \nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2)",
        "num_ids": 77
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return True if (x == y + z or x == z + y) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) else False\n    \ndef likes(names):\n    '''\n    Create a function that takes a list of names and returns a string that says \n    how many people likes this person (e.g. \"3 likes this person\").\n    '''\n    if names == []:\n        return \"no one likes this\"\n    elif len(names) == 1:\n        return \"%s likes this person\" % names[0]\n    else:\n        return \"%s and %s like this person\" % (names[0], names[1])\n",
        "num_ids": 166
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x == (y + z) and (type(x) is int or type(y) is int or type(z) is int)\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (type(x) == type(y) == int)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    elif (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x == (y + z) and type(x) == type(y) and type(x) == type(z)",
        "num_ids": 30
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x == int(y+z) and x == int(y+z) and y == int(z+x)\n        \n    \n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    encoded = ''\n    for char in message:\n        if char in 'aeiouAEIOU':\n            encoded += char\n            encoded += chr(ord(char) + 2)\n        else:\n            encoded += char\n    return encoded\n",
        "num_ids": 62
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    for i, letter in enumerate(message):\n        if letter.isalpha():\n            index = ord(letter.upper()) - 65\n            result += chr(ord('Z') + index + 2) if index > 1 else chr(ord('Z') + 1)\n        else:\n            result += letter\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                result += chr(ord(letter) - 2)\n            else:\n                result += letter.upper()\n        else:\n            result += letter\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # For this to work, we need to put in a list of all vowels\n    # and put those values in a dictionary. \n    \n    # Encode the message by swapping the letters that are in between the \n    # vowels in the message. \n    \n    # Go through the list of vowels and convert them to the \n    # letter that is 2 places ahead of the letter. \n    \n    # Output the message with vowels converted to the new letters. \n    \n    # Note that the vowels in the message need to be converted to \n    # the new letters. \n    \n    # As we're going to be swapping around vowels, we'll need to make \n    # sure that vowels are converted to upper case. \n    \n    # Also, vowels are only going to be in upper case, and that's \n    # it, so we'll convert everything to lower case. \n    \n    # Make the message all lowercase. \n    \n    # Convert each of the vowels to the corresponding letter that \n    # is 2 places ahead of the vowel in the alphabet. \n    \n    # Turn the new message back into a string. \n    \n    # Do not change the original message. \n    \n    # Now that we've done this, the message is encoded and ready\n    # for delivery! \n    \n    # Example: \n    # >>> encode('test')\n    # 'TGST'\n    # >>> encode('This is a message')\n    # 'tHKS KS C MGSSCGG'\n    \n    pass\n",
        "num_ids": 364
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = \"AEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    result = []\n    \n    for letter in message:\n        if letter in vowels:\n            result.append(2 * letter)\n        else:\n            result.append(letter)\n    \n    return ''.join(result)\n",
        "num_ids": 89
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    encoded = ''\n    for letter in message:\n        if letter.lower() in VOWELS:\n            encoded += VOWELS[(VOWELS.index(letter.lower()) + 2) % len(VOWELS)]\n        else:\n            encoded += letter\n    return encoded\n",
        "num_ids": 70
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    message = message.lower()\n    vowels = 'aeiou'\n    letter_to_place = {vowels[i]:vowels[(i+2)%5] for i in xrange(5)}\n    message = message.translate(str.maketrans(letter_to_place))\n    return message\n",
        "num_ids": 81
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def encode_vowels(vowel):\n        return vowels[vowels.index(vowel) + 2]\n    \n    return ''.join(encode_vowels(i) if i in vowels else i for i in message.upper())\n",
        "num_ids": 65
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #Write your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    message = message.lower()\n    for i in range(0,len(message)):\n        if ord(message[i]) in range(97,123):\n            if message[i] in 'aeiou':\n                message = message[:i] + chr(ord(message[i])-2)+ message[i+1:]\n    return messag",
        "num_ids": 84
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(map(lambda x: int(x) % max(map(lambda y: int(y), str(x))), lst))",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #result = len(str(max(lst)))\n    #return result\n",
        "num_ids": 20
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    lst = [int(i) for i in lst]\n    \n    ans = 0\n    for i in lst:\n        if isPrime(i):\n            ans += i\n    return ans\n",
        "num_ids": 51
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: (x // 10) % 10, lst))\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            max_prime = max(max_prime, i)\n    return sum(int(digit) for digit in str(max_prime))\n",
        "num_ids": 57
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(map(int,str(max(lst))))\n",
        "num_ids": 17
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = \"\"\n    for item in lst:\n        res += str(item)\n    return get_largest_prime(res)\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = 0\n    for item in lst:\n        while item:\n            if prime(item) and item > 10:\n                s += item%10\n            item //= 10\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst.sort()\n    print(lst)\n    lst2 = [str(x) for x in lst]\n    lst3 = [int(x) for x in lst2]\n    def isprime(n):\n        if n == 1:\n            return False\n        for i in range(2,int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\n    def primes(lst3):\n        for x in lst3:\n            if not isprime(x):\n                return False\n        return True\n    def primeslst3(lst3):\n        count = 0\n        for x in lst3:\n            if isprime(x):\n                count += x\n        return count\n    print(primeslst3(lst3))\n    print(primeslst3(lst3) == sum(lst3))\n",
        "num_ids": 220
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(map(lambda x: [int(i) for i in str(x) if isPrime(x)][-1], lst))\n",
        "num_ids": 36
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict)==0:\n        return False\n    else:\n        for i in dict.keys():\n            if i.isupper():\n                return False\n            elif i.islower():\n                pass\n            else:\n                return False\n        return True\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # this is the one we actually wrote\n    # if len(dict) == 0:\n    #     return False\n    # if all(isinstance(k, str) for k in dict.keys()) and all(k.islower() for k in dict.keys()):\n    #     return True\n    # if all(isinstance(k, str) for k in dict.keys()) and all(k.isupper() for k in dict.keys()):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 123
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return True\n    else:\n        for x in dict:\n            if type(x)!= str:\n                return False\n            if not x.islower():\n                return False\n            if x.isupper():\n                return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n        return True\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not dict:\n        return False\n    else:\n        keys = dict.keys()\n        if not keys:\n            return False\n        for key in keys:\n            if key.isalpha() and key.islower():\n                pass\n            elif key.isalpha() and key.isupper():\n                pass\n            else:\n                return False\n        return True\n",
        "num_ids": 87
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = True\n    for k, v in dict.items():\n        if not isinstance(k, str) or not isinstance(v, str):\n            return False\n        if k.islower():\n            result = result and True\n        elif k.isupper():\n            result = result and True\n        else:\n            return False\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for item in dict:\n        if not type(item) == str:\n            return False\n        if item.islower() or item.isupper():\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return True\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(key) == str:\n            if key.islower() == True:\n                pass\n            else:\n                return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # find first n-1 numbers, start from 0, add 2 to count\n    # if a number is prime, add 2 to count, if not, add 2 to the next number, i.e. skip it\n    # the last 2 numbers is the result\n    pass\n",
        "num_ids": 62
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    primes = [2]\n    for n in range(3, n+1):\n        for i in range(len(primes)):\n            if n % primes[i] == 0:\n                break\n        else:\n            primes.append(n)\n    return primes\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 1\n    output = []\n    while count < n:\n        for i in range(2, n):\n            if i * i <= n and count + i <= n:\n                count += i\n        output.append(count)\n        count = 1\n    return output\n",
        "num_ids": 66
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    primes = [2]\n    x = 3\n    while len(primes) < n:\n        for p in primes:\n            if x % p == 0:\n                break\n        else:\n            primes.append(x)\n        x += 2\n    return primes\n",
        "num_ids": 68
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    primes = []\n    numbers = [x for x in range(2,n+1)]\n    for number in numbers:\n        if number < n:\n            primes.append(number)\n            for i in range(number,n+1):\n                if i % number == 0:\n                    numbers[i-2] = 0\n    return primes\n",
        "num_ids": 86
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = [2]\n    # check if the number of primes is less than n\n    if n == 1:\n        return l\n    # if n is divisible by 2, add 2 to the list\n    if n % 2 == 0:\n        return l + [2]\n    # if n is divisible by 3, add 3 to the list\n    if n % 3 == 0:\n        return l + [3]\n    # we know n is prime, so we check if n is divisible by any number between 5 and sqrt(n)\n    for i in range(5, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return l + [i] + count_up_to(n / i)\n    # if we get here, then n is prime\n    return l + [n]\n",
        "num_ids": 198
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def prime_less_than_n(n):\n        if n == 1:\n            return []\n        else:\n            primes = [2]\n            for i in range(3, n+1):\n                for p in primes:\n                    if i % p == 0:\n                        break\n                else:\n                    primes.append(i)\n            return primes\n",
        "num_ids": 88
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = [2,3]\n    for i in range(4, n+1):\n        s = 0\n        for j in l:\n            if i%j == 0:\n                s += 1\n        if s == 0:\n            l.append(i)\n    return l\n",
        "num_ids": 68
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    digit = 1\n    unit = 0\n    product = 0\n    if a < 0:\n        digit, a = -1, -a\n    if b < 0:\n        digit, b = -1, -b\n    while a > 0:\n        digit, a = divmod(a, 10)\n        if a * digit!= 0:\n            product, unit = product + a * digit * unit, a * digit\n    if b < 0:\n        product, digit = -product, -digit\n    if product == 0:\n        return 0\n    return product\n",
        "num_ids": 132
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return a + b\n    if a < 0:\n        a = a * -1\n    if b < 0:\n        b = b * -1\n    product = 0\n    if a > b:\n        for i in range(a, b+1, 10):\n            product += i\n    else:\n        for i in range(b, a+1, 10):\n            product += i\n    return product\n",
        "num_ids": 123
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return a * b\n    \n",
        "num_ids": 11
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    b = str(b)\n    a = str(a)\n    ret = 0\n    for i in range(0, len(b)):\n        ret += int(a) * int(b[i])\n    return ret\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if b == 0:\n        return 0\n    a_bin = \"{:b}\".format(a)\n    b_bin = \"{:b}\".format(b)\n    # check if both a and b have same length\n    if len(a_bin)!= len(b_bin):\n        return 0\n    result = 0\n    for index, digit in enumerate(b_bin):\n        if int(digit) == 1:\n            result += int(a_bin[index]) * int(digit)\n    return result\n",
        "num_ids": 124
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = abs(a), abs(b)\n    res = 0\n    while b > 0:\n        res += (a % 10) * (b % 10)\n        a //= 10\n        b //= 10\n    if res < 0:\n        res += 10\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(a) * int(b) for a, b in zip(str(a), str(b))])",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # converting both the numbers to strings\n    a = str(a)\n    b = str(b)\n",
        "num_ids": 28
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = s.lower()\n    if len(s) == 0:\n        return 0\n    elif len(s) % 2 == 1:\n        return 0\n    else:\n        return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')",
        "num_ids": 80
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    count=0\n    for i in s:\n        if i.isupper() and (i.isalpha()):\n            if int(i[0])%2==0:\n                count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            num += 1\n    return num\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    result = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in \"AEIOU\":\n            result += 1\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper() and i%2==0)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(float(value) + 0.5)\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    rounded_val = round(float(value))\n    if abs(value - rounded_val) < abs(value - int(rounded_val)):\n        return int(rounded_val)\n    else:\n        return int(rounded_val) + 1",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    try:\n        return int(value)\n    except ValueError:\n        return round(float(value))\n",
        "num_ids": 27
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if value[-1] == '.':\n        value = value[:-1]\n    return int(round(float(value)))\n",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return int(value) if int(value) == float(value) else int(round(float(value)))\n",
        "num_ids": 27
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    value = float(value)\n    int_part = int(value)\n    frac_part = value - int_part\n    if frac_part >= 0.5:\n        return int_part + 1\n    else:\n        return int_part\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    try:\n        number = int(value)\n    except ValueError:\n        raise ValueError(\"Invalid Input\")\n    #find the closest integer\n    if number < 0:\n        return abs(number)\n    else:\n        return math.ceil(number)\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = [n]\n    while n > 1:\n        n //= 2\n        if n % 2 == 1:\n            n += 1\n        result.append(n)\n",
        "num_ids": 43
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    levels = []\n    if n % 2 == 0:\n        n += 1\n    for i in range(1, n+1):\n        levels.append(i * 2 - 1)\n    return levels",
        "num_ids": 48
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    if n > 1:\n        result.append(n)\n        n -= 1\n        if n % 2 == 0:\n            n += 1\n        while n > 0:\n            n = n // 2\n            result.append(n)\n    return result",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    while n > 0:\n        result.append(n)\n        n = n - 2 if n % 2 == 0 else n - 1\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # initialize the list to store the results\n    result = [n]\n",
        "num_ids": 18
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    i = 1\n    while i <= n:\n        if i % 2:\n            result.append(i + 1)\n        else:\n            result.append(i)\n        i += 1\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stairs = [n]\n    while True:\n        n = n - 2\n        if n == 1:\n            return stairs\n        elif n % 2 == 0:\n            stairs.append(n)\n        elif n % 2!= 0:\n            stairs.append(n + 1)\n",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [n] * (n+1)\n",
        "num_ids": 13
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    level = 1\n    lst = [level]\n    while True:\n        level += 2\n        lst.append(level)\n        if level > n:\n            break\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    return s.split(',')\n",
        "num_ids": 12
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import re\n    return re.split(\"[,\\s]\", s)\n    \n    \ndef tuples_to_list(tuples):\n    \"\"\"\n    You will be given a tuple of tuples. Each tuple will have two items.\n    Write a function that returns a list of the first item in each tuple in the same order as they appear in the tuple of tuples.\n    For example:\n    tuples_to_list([(1, 'one'), (2, 'two'), (3, 'three')]) == ['one', 'two', 'three']\n    tuples_to_list([(4, 'four'), (5, 'five'), (6,'six')]) == ['four', 'five','six']\n    \"\"\"\n    return [item[0] for item in tuples]\n    \n    \ndef list_of_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words in the same order\n    as they appear in the string.\n    For example:\n    list_of_words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    list_of_words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\",\")\n    \n    \ndef list_of_tuples(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a list of tuples where each tuple is a pair of words.\n    For example:\n    list_of_tuples(\"Hi, my name is John\") == [(\"Hi\", \"my\"), (\"name\", \"is\"), (\"John\", None)]\n    list_of_tuples(\"One, two, three, four, five, six\") == [(\"One\", \"two\"), (\"three\", \"four\"), (\"five\", \"six\")]\n    \"\"\"\n    import re\n    return re.findall(\"(\\w+)\", s)\n    \n    \ndef dict_of_tuples(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a dictionary of tuples where each tuple\n    is a pair of words. For example:\n    dict_of_tuples(\"Hi, my name is John\") == {'Hi':'my', 'name': 'is', 'John': None}\n    dict_of_tuples(\"One, two, three, four, five, six\") == {'One': 'two', 'three': 'four', 'five':'six'}\n    \"\"\"\n    import re\n    return dict(re.findall(\"(\\w+):(\\w+)\", s))\n    \n    \ndef dict_of_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a dictionary of words where the key is\n    the word and the value is the word itself. For example:\n    dict_of_words(\"Hi, my name is John\") == {'Hi':'my', 'name': 'John'}\n    dict_of_words(\"One, two, three, four, five, six\") == {'One': 'two', 'three': 'four', 'five':'six'}\n    \"\"\"\n    return {item: item for item in list_of_words(s)}\n    \n    \ndef string_of_tuples(lst):\n    \"\"\"\n    You will be given a list of tuples where each tuple contains two items. Your task\n    is to turn each tuple into a string in the same order as they appear in the tuple.\n    For example:\n    string_of_tuples([('a', 'one'), ('b', 'two'), ('c', 'three')]) == \"a,b,c\"\n    string_of_tuples([('1', 'one'), ('2', 'two'), ('3', 'three')]) == \"1,2,3\"\n    \"\"\"\n    return \",\".join([str(item[0]) for item in lst])\n    \n    \ndef dict_of_tuples_to_list(d):\n    \"\"\"\n    You will be given a dictionar",
        "num_ids": 1024
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x.strip() for x in s.split(',')]\n    \ndef numbers_string(s):\n    \"\"\"\n    You will be given a string of numbers separated by commas or spaces. Your task is\n    to split the string into numbers and return an array of the numbers.\n    \n    For example:\n    numbers_string(\"Hi, my name is John\") == [123, 34, 56]\n    numbers_string(\"One, two, three, four, five, six\") == [123, 34, 56]\n    \"\"\"\n    return [int(x.strip()) for x in s.split(',')]\n",
        "num_ids": 147
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    for i in s.split(','):\n        for j in i.split(' '):\n            l.append(j)\n    return l\n",
        "num_ids": 40
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = s.split(\",\")\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(', ')",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #your code here\n    return s.split(\",\")",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x%2==0 and y%2==0:\n        return (max(x,y)//2)*2\n    elif x%2==0 and y%2==1:\n        return (x//2)*2\n    elif x%2==1 and y%2==0:\n        return (y//2)*2\n    else:\n        return -1\n",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num = x\n    while num + 2 < y:\n        num += 2\n    if num % 2 == 0:\n        return num\n    return -1",
        "num_ids": 37
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_even(x):\n        return x % 2 == 0\n",
        "num_ids": 18
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Hint:\n    # You can do this in a single loop.\n    # Using a while loop is fine, but not a very good idea.\n    # Use a for loop instead.\n",
        "num_ids": 45
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    if (x < y and (y - x) % 2 == 0):\n        return int((x + y) / 2)\n    elif (x < y and (y - x) % 2 == 1):\n        return -1\n    else:\n        return int((x + y - 1) / 2)\n",
        "num_ids": 79
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a, b = min(x, y), max(x, y)\n    for i in range(a, b + 1):\n        if i % 2 == 0 and i > 0:\n            return i\n",
        "num_ids": 49
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if x % 2 == 0 and x <= y:\n        return x\n    elif x % 2 == 0 and x > y:\n        return -1\n    elif x % 2!= 0 and x < y:\n        return x\n    elif x % 2!= 0 and x > y:\n        return -1\n",
        "num_ids": 78
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x >= y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x == y:\n        return -1\n    if x < y:\n        if x % 2 == 0:\n            return -1\n        else:\n            num = x + 1\n            while num <= y:\n                if num % 2 == 0:\n                    return num\n                num += 1\n    else:\n        if y % 2 == 0:\n            return -1\n        else:\n            num = y + 1\n            while num >= x:\n                if num % 2 == 0:\n                    return num\n                num -= 1\n",
        "num_ids": 124
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return -1\n",
        "num_ids": 6
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if m <= n:\n        return -1\n    else:\n        avg = (m + n) // 2\n        return \"{0:b}\".format(avg)\n",
        "num_ids": 43
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ((2 ** m) - 1) - ((2 ** n) - 1)\n",
        "num_ids": 21
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    avg = (n + m) / 2\n    bavg = bin(int(avg))\n    if n > m:\n        return -1\n    return bavg[2:]\n",
        "num_ids": 47
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # Solution 1:\n    # I haven't been able to figure out how to find the integer to the left of the decimal\n    # point, so just store the decimal points.\n    # Then the average is the difference between the leftmost decimal point and the \n    # rightmost decimal point\n    \n    # Solution 2:\n    # I suspect I can use python's log() function to find the integer to the left of \n    # the decimal point, and then work backwards\n    # the problem with this is that it just gives the integer to the left of the \n    # decimal point\n    #\n    # Example:\n    # log(0.3333333333333333333333333333333333333333333333333333333333333, 2) = 1.0\n    # log(0.333333333333333333333333333333333333333333333333333333333333333, 3) = 1.3333333333333333333333333333333333333333333333333333333333333\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 4) = 1.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 5) = 2.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 6) = 2.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 7) = 3.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 8) = 3.33333333333333333333333333333333333333333333333333333333333333333\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 9) = 3.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 10) = 4.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 11) = 4.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 12) = 5.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 13) = 5.33333333333333333333333333333333333333333333333333333333333333333\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 14) = 5.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 15) = 6.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 16) = 6.333333333333333333333333333333333333333333333333333333333333333\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 17) = 6.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 18) = 7.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 19) = 7.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 20) = 8.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 21) = 8.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 22) = 9.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 23) = 9.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 24) = 10.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 25) = 10.5\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 26) = 11.0\n    # log(0.3333333333333333333333333333333333333333333333333333333333333333333, 27) = 11.5\n    # log(0.3333333333333333333333333333333333333333333",
        "num_ids": 1025
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Replace \"pass\" statement with your code\n    if n > m:\n        return -1\n    else:\n        return int(bin( (m+n)/2 ), 2)",
        "num_ids": 43
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(n + m) / 2)[2:]\n",
        "num_ids": 33
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n, m = int(n), int(m)\n    n, m = max(n, m), min(n, m)\n    if n == m:\n        return '0b' + format(n, 'b')\n    elif m == n+1:\n        return format(n, 'b')\n    else:\n        return '-1'\n",
        "num_ids": 86
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if m < n:\n        return -1\n    avg = (n + m) / 2\n    return int(bin(avg), 2)\n",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    return int(\"0b\" + \"\".join(str(int((n+m)/2)) for i in range(m-n+1)), 2)\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    ans = 0\n    for i in range(n, m+1):\n        ans += i\n    return bin(ans//(m-n+1)).lstrip(\"0b\").zfill(32)\n",
        "num_ids": 61
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: Implement me\n    # pass\n    return None\n",
        "num_ids": 17
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(set([i for i in x if i % 2 == 1]))\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return [i for i in x if len(str(i))%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(list(filter(lambda i: i % 2!= 0, x)))\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not x:\n        return []\n    \n    # Get rid of even digits\n    x = sorted([i for i in x if i % 2 == 1])\n    # Starting from the last element, if the last digit is odd, remove it\n    # and see if it's valid. Keep removing till it's valid.\n    while x:\n        if x[-1] % 2 == 0:\n            x.pop()\n        else:\n            break\n    return x\n",
        "num_ids": 109
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # create a set of unique digits\n    unique_digits = set()\n    for num in x:\n        if num >= 10:\n            num = str(num)\n            for digit in num:\n                unique_digits.add(digit)\n        else:\n            unique_digits.add(num)\n    # convert set to list\n    unique_digits = list(unique_digits)\n    # sort the list in increasing order\n    unique_digits.sort()\n    return unique_digits\n    \ndef reverse_string(x):\n    \"\"\"Given a string x, return a string in reverse order.\n",
        "num_ids": 145
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [num for num in x if len(set(str(num)))%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted([n for n in x if n % 2])\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr = sorted(arr)\n    arr = sorted(arr, reverse=True)\n    arr = list(map(lambda x: chr(ord('0') + x), arr))\n    return arr\n",
        "num_ids": 48
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    new_arr = []\n    for i in reverse_arr:\n        if 1 <= i <= 9:\n            new_arr.append(dic[i])\n    return new_arr\n",
        "num_ids": 141
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [DIGIT_NAMES[i] for i in sorted(arr)[::-1]]",
        "num_ids": 24
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # if not arr:\n    #     return []\n    # result = [str(i) for i in sorted(arr)]\n    # return result[::-1]\n    return sorted(arr, key=str)\n",
        "num_ids": 52
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr, reverse=True)[1:] + [str(i) for i in range(1, 10)]\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    reverse_arr = arr[::-1]\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    index = 0\n    for i in reverse_arr:\n        if 1 <= i <= 9:\n            reverse_arr[index] = names[i - 1]\n            index += 1\n    return reverse_arr\n",
        "num_ids": 109
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr.sort()\n    return arr[::-1]\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    output = []\n    \n    for i in arr:\n        if i in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            output.append(\"Nine\")\n        elif i in [0, 10]:\n            output.append(\"Zero\")\n        elif i in [11, 12, 13, 14, 15]:\n            output.append(\"Eleven\")\n        elif i in [16, 17, 18, 19]:\n            output.append(\"Twelve\")\n        elif i in [20, 21, 22, 23]:\n            output.append(\"Twenty-one\")\n        elif i in [24, 25, 26, 27]:\n            output.append(\"Twenty-two\")\n        elif i in [28, 29, 30, 31]:\n            output.append(\"Thirty-three\")\n        elif i in [32, 33, 34, 35]:\n            output.append(\"Thirty-four\")\n        elif i in [36, 37, 38, 39]:\n            output.append(\"Forty-three\")\n        elif i in [40, 41, 42, 43]:\n            output.append(\"Forty-four\")\n        elif i in [44, 45, 46, 47]:\n            output.append(\"Fifty-five\")\n        elif i in [48, 49, 50, 51]:\n            output.append(\"Fifty-six\")\n        elif i in [52, 53, 54, 55]:\n            output.append(\"Sixty-seven\")\n        elif i in [56, 57, 58, 59]:\n            output.append(\"Sixty-eight\")\n        elif i in [60, 61, 62, 63]:\n            output.append(\"Seventy-nine\")\n        elif i in [64, 65, 66, 67, 68, 69, 70, 71]:\n            output.append(\"Seventy-ten\")\n        elif i in [72, 73, 74, 75, 76, 77, 78, 79]:\n            output.append(\"Eighty-nine\")\n        elif i in [80, 81, 82, 83, 84, 85, 86, 87, 88, 89]:\n            output.append(\"Eighty-eight\")\n        elif i in [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]:\n            output.append(\"Ninety-nine\")\n        elif i in [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]:\n            output.append(\"One Hundred\")\n        elif i in [110, 111, 112, 113, 114, 115, 116, 117, 118, 119]:\n            output.append(\"One Hundred and One\")\n        elif i in [120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:\n            output.append(\"One Hundred and Two\")\n        elif i in [130, 131, 132, 133, 134, 135, 136, 137, 138, 139]:\n            output.append(\"One Hundred and Three\")\n        elif i in [140, 141, 142, 143, 144, 145, 146, 147, 148, 149]:\n            output.append(\"One Hundred and Four\")\n        elif i in [150, 151, 152, 153, 154, 155, 156, 157, 158, 159]:\n            output.append(\"One Hundred and Five\")\n        elif i in [160, 161, 162, 163, 164, 165, 166, 167, 168, 169]:\n            output.append(\"One Hundred and Six\")\n        elif i in [170, 171, 172, 173, 174, 175, 176, 177, 178, 179]:\n            output.append(\"One Hundred and Seven\")\n        elif i in [180, 181, 182, 183, 184, 185, 186, 187, 188, 189]:\n            output.append(\"One Hundred and Eight\")\n        elif i in [190, 191, 192, 193, 194, 195, 196, 197, 198, 199]:\n            output.append(\"One Hundred and Nine\")\n        elif i in [200, 201, 202, 203, 204, 205, 206, 207, 208, 209]:\n            output.append(\"Two Hundred\")\n        elif i in [210, 211, 212, 213, 214, 215, 216, 217, 218, 219]:\n            output.append(\"Two Hundred and One\")\n        elif i in [220, 221, 222, 223, 224, 225, 226, 227, 228, 229]:",
        "num_ids": 1024
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    \n    # find the elements that are between 1 and 9 inclusive\n    for i in range(len(arr)):\n        if arr[i] <= 9 and arr[i] >= 1:\n            arr[i] = chr(ord('1') + arr[i])\n    \n    # sort the elements\n    arr.sort()\n    \n    # reverse the elements\n    for i in range(len(arr)):\n        if ord(arr[i]) - ord('0') < 10:\n            arr[i] = chr(ord('0') + ord(arr[i]) - ord('0'))\n    arr.reverse()\n    \n    return arr\n    ",
        "num_ids": 165
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = [1]\n    for i in xrange(2, n + 1):\n        if i % 2 == 0:\n            l.append(l[i - 2] * i)\n        else:\n            l.append(l[i - 2] + i)\n    return l\n",
        "num_ids": 69
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if n < 2:\n        return []\n    elif n == 2:\n        return [1,2]\n    else:\n        return [1] + f(n-1)\n        \n    \n    \nprint f(5)\n",
        "num_ids": 59
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(n*sum(range(1, i+1)))\n    return l\n",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 1\n    factorial = []\n    while i <= n:\n        if i % 2 == 0:\n            factorial.append(i*factorial[i-2])\n        else:\n            factorial.append(i + sum(range(1, i+1)))\n        i += 1\n    return factorial\n",
        "num_ids": 77
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            l[i] = l[i-1] * i\n        else:\n            l[i] = sum(range(1, i+1))\n    return l\n",
        "num_ids": 70
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = range(1,n+1)\n    return [i if i % 2 == 0 else sum(range(1,i+1)) for i in a]\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def f(n):\n        \"\"\"\n        @type n: Integer\n        @rtype: List[Integer]\n        \"\"\"\n        ans = [1]\n        if n == 1:\n            return ans\n        for i in range(2, n + 1):\n            ans.append(i)\n            if i % 2 == 0:\n                for j in range(1, i):\n                    ans[i - 1] = ans[i - 1] * j\n        return ans\n",
        "num_ids": 111
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            lst.append(factorial(i))\n        else:\n            lst.append(sum(range(1, i+1)))\n    return lst\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from collections import Counter\n",
        "num_ids": 7
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return tuple(len(t) for t in groupby(str(n), key=lambda x: x.isdigit()))\n",
        "num_ids": 32
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    from collections import defaultdict\n",
        "num_ids": 8
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ans = [0, 0]\n",
        "num_ids": 10
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count_even, count_odd = 0, 0\n    for x in range(1, n+1):\n        is_palindrome = int(str(x) == str(x)[::-1])\n        if is_palindrome:\n            if not x % 2:\n                count_even += 1\n            else:\n                count_odd += 1\n",
        "num_ids": 85
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_palindrome(n):\n        return n == int(str(n)[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count_even = count_odd = 0\n",
        "num_ids": 12
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return even_odd_palindrome_helper(n, 0)\n",
        "num_ids": 19
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def count_digits(num):\n        if num < 0:\n            return 0\n        return 1 + count_digits(num // 10)\n    return sum(1 for num in arr if count_digits(num) > 0)\n",
        "num_ids": 57
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    def count_num(num):\n        num_sum = 0\n        for d in str(num):\n            num_sum += int(d)\n        return num_sum\n",
        "num_ids": 44
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        num = abs(num)\n        while num > 0:\n            digit = num % 10\n            num //= 10\n            if digit > 0:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    num_sums = 0\n    for num in arr:\n        if is_digit(num):\n            sum_of_digits = sum([int(i) for i in str(num)])\n            if sum_of_digits > 0:\n                num_sums += 1\n    return num_sums\n",
        "num_ids": 75
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([1 for num in arr if sum(map(int, str(num)[1:])) > 0])\n",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for n in arr:\n        if sum(map(int, str(abs(n)))) > 0:\n            count += 1\n    return count",
        "num_ids": 39
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([1 for num in arr if sum(map(int, str(num))) > 0])\n",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return 0\n    else:\n        arr_set = set()\n        for num in arr:\n            arr_set.add(num)\n        return sum(1 for num in arr_set if num < 0)\n",
        "num_ids": 57
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for i in arr if sum(map(int,str(i))) > 0])\n",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for e in arr if sum(int(c) for c in str(e)) > 0)\n",
        "num_ids": 28
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in xrange(n-1):\n        if arr[i] > arr[i+1]:\n            # array is sorted\n            return True\n        if arr[i+1] < arr[i]:\n            # if left is less than right\n            # then right array is not sorted\n            return False\n    # else if any of the elements are not greater than each other\n    # then array is not sorted\n    return False\n",
        "num_ids": 122
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if arr==None or len(arr)==0:\n        return True\n    if arr[0]>arr[1]:\n        return False\n    if arr[-1]<arr[-2]:\n        return False\n    i=1\n    while i<len(arr):\n        if arr[i-1]>arr[i]:\n            return False\n        i+=1\n    return True\n",
        "num_ids": 96
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr:\n        return True\n    sorted_array = [arr[0]]\n    for i in xrange(1, len(arr)):\n        if arr[i] >= sorted_array[-1]:\n            sorted_array.append(arr[i])\n        else:\n            index = binary_search(sorted_array, arr[i])\n            sorted_array = sorted_array[:index]+[arr[i]]+sorted_array[index:]\n    return True if sorted_array == sorted(arr) else False\n",
        "num_ids": 129
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr)==0:\n        return True\n    arr.sort()\n    while True:\n        for i in range(0,len(arr)-1):\n            if arr[i]>arr[i+1]:\n                arr[i]^=2\n                arr[i+1]^=2\n                return True\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Base Case : when array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Base Case : when array length is 1\n    if len(arr) == 1:\n        return True\n    \n    # To make sure that array is in non-decreasing order.\n    if arr[0] <= arr[1]:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return True\n    elif arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    # if first element is greater than the second, there is no point in \n    # performing the operation.\n    if arr[0]>arr[1]:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr)<=0:\n        return True\n    \n    for i in range(len(arr)):\n        arr[i]=arr[i]<<1\n    \n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return True\n    result = False\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if j<len(arr)-1 and arr[j] > arr[j+1]:\n                result = True\n                for k in range(len(arr)-1):\n                    if arr[k] > arr[k+1]:\n                        return False\n                break\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Hint: Use a helper function to swap elements.\n    return exchangeHelper(lst1, lst2)\n",
        "num_ids": 29
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    index_lst1, index_lst2 = 0, 0\n    while index_lst1 < len(lst1) and index_lst2 < len(lst2):\n        if lst1[index_lst1] % 2 == 1 and lst2[index_lst2] % 2 == 1:\n            lst1[index_lst1], lst2[index_lst2] = lst2[index_lst2], lst1[index_lst1]\n            index_lst1 += 1\n            index_lst2 += 1\n        elif lst1[index_lst1] % 2 == 0:\n            index_lst1 += 1\n        else:\n            index_lst2 += 1\n",
        "num_ids": 181
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = exchange_helper(lst1, lst2)\n    return \"YES\" if result else \"NO\"\n",
        "num_ids": 30
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    try:\n        x, y = lst1.index(2), lst1.index(3)\n    except ValueError:\n        return \"NO\"\n",
        "num_ids": 39
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    i = 0\n    for x in lst1:\n        if x % 2!= 0 and x == lst2[i]:\n            return \"NO\"\n        i += 1\n    return \"YES\"",
        "num_ids": 87
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    even = True\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            even = False\n            break\n    if even == True:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst1 or not lst2:\n        return \"NO\"\n    if len(lst1) == 1 or len(lst2) == 1:\n        return \"NO\"\n    elif sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n",
        "num_ids": 91
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #check the lengths of the lists are the same\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    #check the lists are non-empty\n    if len(lst1) == 0:\n        return \"NO\"\n    #create a new list to hold the elements of lst1 and lst2 that are even\n    even_lst = []\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2 == 0:\n            even_lst.append(lst1[i])\n        if lst2[i] % 2 == 0:\n            even_lst.append(lst2[i])\n    #check the even_lst list is even, if it is, return YES\n    if len(even_lst) % 2 == 0:\n        return \"YES\"\n    #if the even_lst list is not even, return NO\n    else:\n        return \"NO\"\n",
        "num_ids": 233
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for elem in lst1:\n        if elem % 2!= 0:\n            return \"NO\"\n    for elem in lst2:\n        if elem % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 61
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"YES\" if all(x%2 == 0 for x in lst1) and all(x%2 == 0 for x in lst2) else \"NO\"\n",
        "num_ids": 41
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    histo = {}\n    for c in test:\n        if c not in histo:\n            histo[c] = 0\n        histo[c] += 1\n    return histo\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    d = {}\n    for ch in test.lower():\n        if ch not in d:\n            d[ch] = 0\n        d[ch] += 1\n    return d\n",
        "num_ids": 43
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n",
        "num_ids": 49
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # your code here\n    return {}\n    ",
        "num_ids": 12
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # Using set to remove duplicates\n    d = {}\n    \n    for i in test.split():\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    return d\n",
        "num_ids": 61
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return {}\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    letters = {}\n    for letter in test:\n        if letter in letters:\n            letters[letter] += 1\n        else:\n            letters[letter] = 1\n    return letters\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    \n    histo = sorted(histo.items(), key=lambda x:x[1], reverse=True)\n    if len(histo) == 1:\n        return histo[0][1]\n    else:\n        return histo[0][1], histo[1][1]\n    ",
        "num_ids": 116
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    h = {}\n    for c in test:\n        if c in h:\n            h[c] += 1\n        else:\n            h[c] = 1\n    return h\n",
        "num_ids": 44
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i]==c:\n            s[i] = \"\"\n    s = \"\".join(s)\n    return s,s==s[::-1]\n",
        "num_ids": 62
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return (result,result == result[::-1])\n",
        "num_ids": 53
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s or not c:\n        return None\n    \n    #Iterate over each character in s\n    for char in s:\n        #If the character in s is in c, then remove the character from s\n        if char in c:\n            s = s.replace(char,\"\")\n    \n    #Check if s is a palindrome\n    return s if s == s[::-1] else None\n",
        "num_ids": 97
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\",True\n",
        "num_ids": 7
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res=\"\"\n    for i in s:\n        if i not in c:\n            res+=i\n    if res==res[::-1]:\n        return (res,True)\n    else:\n        return (res,False)\n",
        "num_ids": 56
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #@start-editable@\n    result = ''\n    for i in range(len(s)):\n        if s[i] in c:\n            result += s[i]\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n",
        "num_ids": 76
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for char in s:\n        if char in c:\n            s = s.replace(char, \"\")\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n    \n",
        "num_ids": 65
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst2 = [len([i for i in s if int(i)%2!= 0]) for s in lst]\n    return [\"the number of odd elements %dn the str%ding %d of the %dnput.\" %\n            (lst2[i],i+1,i+1,i+1) for i in range(len(lst2))]\n",
        "num_ids": 89
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    counter = 0\n    for item in lst:\n        number = 0\n        for i in item:\n            if i in \"13579\":\n                number += 1\n        if number % 2!= 0:\n            counter += 1\n    return [str(counter)+\"n the str4ng \" + str(lst[0]) + \" of the \" + str(len(lst)) + \"nput.\"]\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(",
        "num_ids": 123
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str4ng {} of the {}nput.\".format(count, i, len(i)))\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    list_str = [str(x) for x in lst]\n    odd_numbers = [len(x) for x in list_str if sum([int(i) for i in x]) % 2]\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(x, x, x, x) for x in odd_numbers]\n",
        "num_ids": 93
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ['the number of odd elements %d the str%sng %d of the %dnput.' %(count_odds(lst, i), i, len(lst[i]), len(lst)) for i in range(len(lst))]\n",
        "num_ids": 62
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [\"the number of odd elements \" + str(len(str(n))) + \"n the str\" + str(n) + \" of the \" + str(n) + \"nput.\" for n in lst]\n",
        "num_ids": 52
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [len([d for d in x if int(d) % 2 == 1]) for x in lst]\n    \n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [\"the number of odd elements \" + str(len(i)) + \" \" + \"of the str\" + str(len(i)) + \" of the \" + str(len(i)) + \" input.\" for i in lst]\n",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # your code here\n    return [len(i) - len([x for x in i if int(x) % 2 == 1]) for i in lst]\n",
        "num_ids": 39
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_odd(x):\n        if int(x) % 2 == 1:\n            return True\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(nums) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(nums) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # todo: brute force\n    min_sum = None\n    min_arr = None\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            if curr_sum >= 0 and (min_sum is None or min_sum > curr_sum):\n                min_sum = curr_sum\n                min_arr = nums[i:j + 1]\n    return min_sum, min_arr\n",
        "num_ids": 132
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_sum = 0\n    current_sum = 0\n    for x in nums:\n        current_sum = max(0, current_sum+x)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "num_ids": 61
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = nums[0]\n    minSubArray = sum\n    for i in xrange(1, len(nums)):\n        sum += nums[i]\n        if sum < nums[i]:\n            sum = nums[i]\n        if sum < minSubArray:\n            minSubArray = sum\n    return minSubArray\n",
        "num_ids": 83
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = float('inf')\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n        if s < 0:\n            s = 0\n        result = min(result, s)\n    return result",
        "num_ids": 61
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    # minSum = float(\"inf\")\n    # minSumIndex = -1\n    # for i in xrange(len(nums)):\n    #     if sum(nums[i:]) < minSum:\n    #         minSum = sum(nums[i:])\n    #         minSumIndex = i\n    # return minSum\n    # Brute Force\n    minSum = float(\"inf\")\n    for i in xrange(len(nums)):\n        currSum = 0\n        for j in xrange(i, len(nums)):\n            currSum += nums[j]\n            if currSum < minSum:\n                minSum = currSum\n    return minSum\n",
        "num_ids": 183
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    minimum = -1\n    total = 0\n    for x in nums:\n        total += x\n        if total < 0:\n            total = 0\n        elif total < minimum or minimum == -1:\n            minimum = total\n",
        "num_ids": 55
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    wells = []\n    for row in grid:\n        for well, depth in enumerate(row):\n            wells.append((well, depth))\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import math\n    n = len(grid)\n    x = len(grid[0])\n    i = 0\n    j = 0\n    f = 0\n    while i < n:\n        while j < x-1:\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                if j == x-2:\n                    j = 0\n                    i += 1\n                else:\n                    j += 1\n            else:\n                j += 1\n        while j == x-1:\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                j = 0\n                i += 1\n            else:\n                j += 1\n    for row in grid:\n        for elem in row:\n            if elem == 1:\n                f += 1\n    return f // capacity\n",
        "num_ids": 197
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    buckets = [[0]*len(grid[0]) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                buckets[i][j] = capacity\n                \n    def is_valid(buckets, i, j):\n        return buckets[i][j] > 0\n            \n    def find_path(buckets, i, j, curr_length):\n        if i == len(grid)-1 and j == len(grid[0])-1:\n            return True\n        \n        if is_valid(buckets, i+1, j):\n            buckets[i+1][j] += buckets[i][j]\n            buckets[i][j] = 0\n            if find_path(buckets, i+1, j, curr_length + 1):\n                return True\n            else:\n                buckets[i+1][j] -= buckets[i][j]\n                buckets[i][j] = 0\n        \n        if is_valid(buckets, i, j+1):\n            buckets[i][j+1] += buckets[i][j]\n            buckets[i][j] = 0\n            if find_path(buckets, i, j+1, curr_length + 1):\n                return True\n            else:\n                buckets[i][j+1] -= buckets[i][j]\n                buckets[i][j] = 0\n        \n        return False\n    \n    return find_path(buckets, 0, 0, 0)\n",
        "num_ids": 389
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m, n = len(grid), len(grid[0])\n    f = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            f[i][j] = max(f[i][j-1], f[i-1][j])\n            if grid[i-1][j-1] == 1:\n                f[i][j] += 1\n    print(f)\n    return f[m][n]\n",
        "num_ids": 135
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # transform the grid to a map\n    from collections import defaultdict\n    m = defaultdict(int)\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            m[(i,j)] = grid[i][j]\n",
        "num_ids": 68
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    def dfs(grid, capacity):\n        # print(grid, capacity)\n        if not grid or not grid[0]:\n            return 0\n        row, col = len(grid), len(grid[0])\n        for i in range(row):\n            if capacity == 0:\n                return 0\n            if col == 1:\n                if grid[i][0] == 1:\n                    return -1\n                else:\n                    continue\n            for j in range(col):\n                if grid[i][j] == 1:\n                    capacity -= 1\n                    grid[i][j] = 0\n                    if dfs(grid, capacity)!= -1:\n                        return dfs(grid, capacity) + 1\n                    else:\n                        grid[i][j] = 1\n                        capacity += 1\n        return -1\n    \n    return dfs(grid, capacity)\n",
        "num_ids": 202
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # return max(well_fill(row, grid, capacity) for row in grid)\n",
        "num_ids": 22
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def fill_well(row, row_index, col, col_index):\n        if not row_index < len(grid) or not col_index < len(grid[row_index]):\n            return 0\n",
        "num_ids": 51
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    \n    for row in range(rows):\n        grid[row] = list(grid[row])\n    \n    q = []\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] == 1:\n                q.append((r,c))\n",
        "num_ids": 90
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    R, C = len(grid), len(grid[0])\n    count = 0\n    for r in range(R):\n        for c in range(C):\n            if grid[r][c] == 1:\n                count += math.ceil(capacity / grid[r][c]) - 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    return sorted(sorted(arr, key=lambda x: bin(x).count('1'), reverse=True), key=lambda x: x[1])\n",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    bin_rep = [bin(i).count('1') for i in arr]\n    return sorted(arr, key=lambda x: (bin_rep[arr.index(x)], x))\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (x.count('1'), x))\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    decimal_bits = {}\n    for i in range(len(arr)):\n        bit_count = 0\n        for j in range(len(arr[i])):\n            if arr[i][j] == 1:\n                bit_count += 1\n        decimal_bits[i] = bit_count\n    return sorted(arr, key = lambda x : (decimal_bits[x], x))",
        "num_ids": 95
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def key(x):\n        return [x[0], int(x[1].replace('1', '0'), 2)]\n    return sorted(arr, key=key)\n",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    zeros = []\n    ones = []\n    for i in arr:\n        if i == 0:\n            zeros.append(i)\n        else:\n            ones.append(i)\n    return sorted(zeros) + sorted(ones)\n",
        "num_ids": 60
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    zero, one = 0, 0\n    for i in arr:\n        bin_i = bin(i)\n        if bin_i[-1] == '0':\n            zero += 1\n        else:\n            one += 1\n    sorted_arr = sorted(arr, key=lambda x: zero if bin(x)[-1] == '0' else one)\n    return sorted_arr",
        "num_ids": 92
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def bitcount(x):\n        return bin(x).count('1')\n    return sorted(arr, key=bitcount)\n",
        "num_ids": 32
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted_arr\n",
        "num_ids": 34
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in re.split(r\"\\s+\", s) if len(i) == n]\n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    words = s.split(\" \")\n    return [w for w in words if len(w) == n and set(w) - vowels == set(w)]\n",
        "num_ids": 55
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = []\n    if n < 1:\n        return lst\n    for word in s.split(\" \"):\n        if check_n_consonants(word, n):\n            lst.append(word)\n    return lst\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in re.split(\"\\\\W+\", s) if len(x)==n]",
        "num_ids": 26
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return []\n    else:\n        words = []\n        for word in s.split():\n            if word == \"\":\n                continue\n            else:\n                if (count_vowels(word) - count_consonants(word)) == n:\n                    words.append(word)\n        return words\n",
        "num_ids": 83
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    words = s.split()\n    if n == 0:\n        return words\n    else:\n        return [word for word in words if sum(c.isalpha() for c in word) == n]\n",
        "num_ids": 49
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [word for word in s.split() if is_valid_word(word, n)]\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(filter(lambda x: not x.isalpha(), s)).split()\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Removing all the spaces from the string.\n    s = s.replace(' ', '')\n    lst = []\n",
        "num_ids": 30
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiou\"\n    vowels_list = list(vowels)\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels_list:\n            return word[i]\n",
        "num_ids": 66
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    idx = len(word)\n    vowel = \"\"\n    for i in range(idx-1, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel == \"\":\n        return \"\"\n    i = idx - 1\n    while i > 0:\n        if word[i] in vowels:\n            return word[i]\n        i -= 1\n    return \"\"\n",
        "num_ids": 133
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not word:\n        return \"\"\n    if word[0] in \"aeiou\":\n        return word[0]\n    if word[-1] in \"aeiou\":\n        return word[-1]\n    return \"\"\n",
        "num_ids": 57
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    for i, char in enumerate(reversed(word)):\n        if char.lower() in vowels:\n            return word[len(word)-i-1]\n    return ''",
        "num_ids": 56
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = 'aeiou'\n    \n    #cnt = len(word)\n    #if cnt == 1:\n    #    return ''\n    #elif cnt == 2:\n    #    return word[-1]\n    #else:\n    #    return word[-1]\n",
        "num_ids": 74
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return ''\n",
        "num_ids": 53
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = \"aeiou\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "num_ids": 54
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    vowels = set(['a','e','i','o','u'])\n    word = word.strip()\n    n = len(word)\n    if n < 2:\n        return ''\n    \n    i = n - 1\n    vowel = None\n    while i >= 0:\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n        i -= 1\n    if vowel is None:\n        return ''\n    \n    i = n - 1\n    while i >= 0:\n        if word[i] not in vowels:\n            j = i\n            while j >= 0:\n                if word[j] in vowels:\n                    return word[j]\n                j -= 1\n            return word[i]\n        i -= 1\n",
        "num_ids": 188
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    i = len(word)-1\n    while i > 0 and word[i] not in \"aeiouAEIOU\":\n        i -= 1\n    if i < 0:\n        return \"\"\n",
        "num_ids": 49
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [s.strip(' ') for s in lst]\n    lst = [s.split(')') for s in lst]\n",
        "num_ids": 37
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "num_ids": 81
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append('(')\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 67
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # arr = [0] * (len(lst[0]) + len(lst[1]))\n    # for i in range(len(lst[0])):\n    #     arr[i] = lst[0][i]\n    # for i in range(len(lst[1])):\n    #     arr[i + len(lst[0])] = lst[1][i]\n",
        "num_ids": 99
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if lst[0][-1] == ')' or lst[1][0] == '(' or len(lst[0]) > len(lst[1]):\n        return 'No'\n",
        "num_ids": 49
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 64
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    dic = {'(':1, ')':-1}\n    s = 0\n    for each in lst:\n        s += dic[each]\n        if s < 0:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 59
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for ch in lst:\n        if ch == '(':\n            stack.append(ch)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 67
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_balanced(lst):\n        count = 0\n        for char in lst:\n            if char == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n",
        "num_ids": 62
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst)!= 2:\n        return 'No'\n",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) < k:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # TC: O(n)\n    # SC: O(1)\n    max_arr = []\n    for i in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max_arr[i])\n    return max_arr\n",
        "num_ids": 65
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ans = []\n    n = len(arr)\n    for _ in range(k):\n        max_idx = 0\n        for i in range(n):\n            if arr[max_idx] < arr[i]:\n                max_idx = i\n        ans.append(arr[max_idx])\n        arr.pop(max_idx)\n        n -= 1\n    return ans\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    if k == 1:\n        return sorted(arr)\n",
        "num_ids": 31
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr.sort()\n    return arr[len(arr)-k:len(arr)]\n",
        "num_ids": 22
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if k == 0 or len(arr) == 0:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if k == len(arr):\n        return sorted(arr)\n    \n    # indices of the top k max elements\n    indices = [-1] * k\n    for i in range(k):\n        # indices of the top max element in the rest of the array\n        max_indices = [i for i in range(k) if arr[i] > arr[indices[i]]]\n        # the ith element of the top max indices\n        indices[max_indices[-1]] = max_indices[-1]\n    return [arr[i] for i in indices]\n",
        "num_ids": 140
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_k = []\n    for i in range(k):\n        max_k.append(max(arr))\n        arr.remove(max(arr))\n    return max_k\n",
        "num_ids": 45
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # basic idea: if the element is larger than the kth element, we pop it and insert\n    # it into the result. This way we get the kth largest number of the array\n    # in a non-decreasing order.\n    if k == 0:\n        return []\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    for i in range(k, len(arr)):\n        if arr[i] > result[k - 1]:\n            result.pop()\n            result.append(arr[i])\n    return result",
        "num_ids": 137
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in xrange(1,len(lst),2) if lst[i]%2])\n",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(1,len(lst),2) if lst[i]%2])\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([i for i in lst if i % 2])\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321])",
        "num_ids": 62
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([num for num in lst[1::2] if not num & 1])\n",
        "num_ids": 23
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([i for i in lst[1::2] if i % 2!= 0])\n",
        "num_ids": 25
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0:\n            count += lst[i]\n    return count\n    \ndef test_solution():\n    assert solution([5, 8, 7, 1]) == 12\n    assert solution([3, 3, 3, 3, 3]) == 9\n    assert solution([30, 13, 24, 321]) == 0\n    \ndef main():\n    print(solution([5, 8, 7, 1]))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 141
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst = lst[::2]\n    return sum(lst)\n    \ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n",
        "num_ids": 56
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # We are going to keep a running total of the sum of all the odd elements.\n    # We are going to make sure that we are adding the next element only when it is in an even position.\n    # We will start at the 2nd position, so we will begin to keep track of the total at index 1\n    # Then we will add the next element only if it is in an even position, otherwise we will add the total to the next element's position\n    # and keep track of the total at the next position\n    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n",
        "num_ids": 145
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(0,len(lst),2):\n        if lst[i] % 2 == 0:\n            total = total + lst[i]\n    return total\nprint solution([5, 8, 7, 1])\nprint solution([3, 3, 3, 3, 3])\nprint solution([30, 13, 24, 321])",
        "num_ids": 87
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if k == 0: return 0\n",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i, n = 0, len(arr)\n    res = 0\n    while i < n and n - i <= k:\n        res += arr[i]\n        i += 1\n",
        "num_ids": 44
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_valid(val):\n        return val < 10**k\n    return sum(filter(is_valid, arr))\n",
        "num_ids": 31
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # O(n) time, O(n) space\n    if len(arr) == 0 or k == 0:\n        return 0\n    total = 0\n    n = len(arr)\n    for i in xrange(k):\n        total += arr[i]\n    for i in xrange(k, n):\n        total += arr[i]\n        if arr[i] > 9:\n            total += 1\n    return total\n",
        "num_ids": 103
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # use two pointers\n    # left is the pointer for the first k elements\n    # right is the pointer for the last element\n    # left <= right\n    # add all elements between left and right to the accumulator\n    # add all elements with 2 or less digits from left to the accumulator\n    # return the accumulator\n    if k <= 0 or k >= len(arr):\n        return None\n    accumulator = 0\n    left, right = 0, k\n    while right < len(arr):\n        accumulator += arr[right]\n        right += 1\n    while left <= right:\n        if arr[left].isdigit() and len(str(arr[left])) <= 2:\n            accumulator += arr[left]\n        left += 1\n    return accumulator\n",
        "num_ids": 182
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        if count == k:\n            break\n        if num >= 100 and num <= 999:\n            count += 1\n    return sum(arr[:k])\n",
        "num_ids": 49
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n/2) + [n]\n    return get_odd_collatz(n*3 + 1) + [n]\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    odd_collatz_seq = [1]\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz_seq.append(n)\n        n = n / 2 if n % 2 == 0 else n * 3 + 1\n    return sorted(odd_collatz_seq)\n",
        "num_ids": 73
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    odd_list = []\n    while n > 1:\n        if n%2 == 1:\n            odd_list.append(n)\n        n = n/2 if n%2 == 0 else (3*n) + 1\n    return odd_list\n",
        "num_ids": 61
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    odd_nums = []\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            odd_nums.append(n)\n        else:\n            n = (3 * n) + 1\n            odd_nums.append(n)\n    return odd_nums\n",
        "num_ids": 76
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 1:\n        return get_odd_collatz(3 * n + 1) + [n]\n    else:\n        return get_odd_collatz(n / 2) + [n]\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    \n    soln = []\n    for i in range(1,n):\n        if is_collatz(i) and i % 2!= 0:\n            soln.append(i)\n    return soln\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 1:\n        return []\n    collatz_seq = [1, n]\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return collatz_seq\n",
        "num_ids": 77
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if (n % 2 == 1):\n            return get_odd_collatz(3 * n + 1) + [n]\n        else:\n            return get_odd_collatz(n / 2) + [n]\n",
        "num_ids": 70
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    try:\n        from dateutil.parser import parse\n        from dateutil.rrule import rrule, YEARLY, MONTHLY, WEEKLY, DAILY\n    except ImportError:\n        print \"You don't have dateutil installed. Install it using pip\"\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(date) > 0:\n        valid_date = False\n        month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n        valid_date = True\n        date_splitted = date.split('-')\n        if len(date_splitted) == 3:\n            if len(date_splitted[0]) == 2 and len(date_splitted[1]) == 2 and len(date_splitted[2]) == 4:\n                if int(date_splitted[0]) < 13 and int(date_splitted[1]) < 13:\n                    if int(date_splitted[1]) in [1, 3, 5, 7, 8, 10, 12]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 31:\n                                return False\n                            if int(date_splitted[1]) == 2:\n                                if int(date_splitted[2]) < 29:\n                                    return False\n                                else:\n                                    return True\n                            else:\n                                return True\n                        else:\n                            return False\n                    elif int(date_splitted[1]) in [4, 6, 9, 11]:\n                        if int(date_splitted[1]) < 13 and int(date_splitted[2]) < 13:\n                            if int(date_splitted[1]) < 13 and int(date_splitted[2]) > 30:\n                                return False\n                            else:\n                                return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 537
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def valid_month(month):\n        return 1 <= month <= 12\n",
        "num_ids": 18
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return False",
        "num_ids": 6
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    \n    date_regex = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})')\n    \n    if re.search(date_regex, date):\n        date_parts = date_regex.search(date)\n        month = int(date_parts.group(1))\n        day = int(date_parts.group(2))\n        year = int(date_parts.group(3))\n        \n        if (month > 0 and month < 13) and (day > 0 and day < 32):\n            if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day > 0 and day < 31):\n                if (month == 4 or month == 6 or month == 9 or month == 11) and (day > 0 and day < 30):\n                    if (month == 2) and (day > 0 and day < 29):\n                        return True\n    return False\n",
        "num_ids": 238
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # start writing your code here\n    if len(date) == 0:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n    months_in_year = {1: 12, 3: 12, 5: 12, 7: 12, 8: 12, 10: 12, 12: 12}\n",
        "num_ids": 75
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    months = {'1':31, '2':28, '3':31, '4':30, '5':31, '6':30, '7':31, '8':31, '9':30, '10':31, '11':30, '12':31}\n    date_split = date.split('-')\n    if len(date_split)!= 3:\n        return False\n    try:\n        int(date_split[0])\n        int(date_split[1])\n        int(date_split[2])\n    except ValueError:\n        return False\n    month = date_split[0]\n    if int(month) < 1 or int(month) > 12:\n        return False\n    day = date_split[1]\n    if int(day) < 1 or int(day) > months[month]:\n        return False\n    year = date_split[2]\n    if int(year) < 1:\n        return False\n    return True\n",
        "num_ids": 230
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert the string to a list of strings (months,days,years)\n    date_list = date.split('-')\n    # convert the month to a integer\n    month = int(date_list[0])\n    # convert the day to a integer\n    day = int(date_list[1])\n    # convert the year to a integer\n    year = int(date_list[2])\n",
        "num_ids": 94
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #date = date.strip()\n    date = date.split('-')\n    if len(date) < 1:\n        return False\n    else:\n        if len(date[2])!= 4:\n            return False\n        else:\n            if int(date[1]) > 12:\n                return False\n            elif int(date[0]) < 1 or int(date[0]) > 31:\n                return False\n            elif int(date[0]) == 31 and int(date[1]) not in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            elif int(date[0]) == 30 and int(date[1]) not in [4, 6, 9, 11]:\n                return False\n            elif int(date[0]) == 29 and int(date[1]) not in [2]:\n                return False\n            elif len(date[0])!= 2:\n                return False\n            else:\n                return True\n",
        "num_ids": 229
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = txt.split(' ')\n    return lst\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt.split()",
        "num_ids": 8
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    txt = txt.split()\n    return txt\n",
        "num_ids": 15
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import string\n    result = txt.split()\n    return result\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    from collections import Counter\n    count = 0\n    for word in re.split(r'[\\W_]+', txt):\n        if word.isdigit():\n            continue\n        if word == '':\n            continue\n        if word.isupper() and ord(word[0]) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i]!= sorted_lst[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) == 1:\n        return True\n    for i in range(1,len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for x, y in zip(lst[:-1], lst[1:]):\n        if x > y:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # lst is sorted if all the values are in the correct order\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Sort list\n    lst.sort()\n    # Check equality\n    for i in range(len(lst) - 1):\n        if lst[i]!= lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst = lst.copy()\n    lst.sort()\n    return lst == lst[0:len(lst)]\n",
        "num_ids": 34
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) <= 1:\n        return True\n    if lst[0] < lst[1]:\n        for i in range(1, len(lst) - 1):\n            if lst[i] < lst[i + 1]:\n                return False\n            else:\n                pass\n    else:\n        return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) <= 1:\n        return True\n    else:\n        if lst[0] < lst[1]:\n            return is_sorted(lst[1:])\n        else:\n            return False\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"YES\" if (interval1[1] >= interval2[0] and interval1[0] <= interval2[1]) else \"NO\"\n",
        "num_ids": 37
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if interval1[1] <= interval2[0] or interval1[0] >= interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 41
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # (start, end)\n    interval1 = (interval1[0], interval1[1])\n    interval2 = (interval2[0], interval2[1])\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return 'NO'\n    if interval1[0] == interval1[1] == interval2[0] == interval2[1]:\n        return 'NO'\n    return 'YES'\n",
        "num_ids": 115
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return 'NO'\n    elif (interval1[1] - interval1[0]) % 2 == 0 or (interval2[1] - interval2[0]) % 2 == 0:\n        return 'NO'\n    else:\n        return 'YES'\n    \ndef main():\n    print intersection((1, 2), (2, 3))\n    print intersection((-1, 1), (0, 4))\n    print intersection((-3, -1), (-5, 5))\n",
        "num_ids": 140
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"NO\"\n",
        "num_ids": 7
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"",
        "num_ids": 48
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # (start, end) => (start, end)\n    interval1 = interval1[:]\n    interval2 = interval2[:]\n    interval1.append(interval1[0])\n    interval2.append(interval2[0])\n",
        "num_ids": 63
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"NO\" if not interval1[1] >= interval2[0] else \"YES\"\n",
        "num_ids": 24
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert interval to [start, end]\n    interval1 = [min(interval1[0], interval1[1]), max(interval1[0], interval1[1])]\n    interval2 = [min(interval2[0], interval2[1]), max(interval2[0], interval2[1])]\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    # check if prime number\n    if interval1[1] - interval1[0] + 1 == interval2[1] - interval2[0] + 1:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 162
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # code\n    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    elif interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    elif interval1[1] >= interval2[0] and interval1[0] <= interval2[1]:\n        return \"YES\"\n    elif interval1[0] >= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    elif interval1[0] <= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nif __name__ == \"__main__\":\n    print intersection((1, 2), (2, 3))\n    print intersection((-1, 1), (0, 4))\n    print intersection((-3, -1), (-5, 5))",
        "num_ids": 236
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    mags = [abs(x) for x in arr]\n    prod = 1\n    for i in range(len(mags)):\n        prod *= mags[i]\n    return prod\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    return sum([abs(x) for x in arr]) * prod(sign(x) for x in arr)\n",
        "num_ids": 37
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 1\n    for i in arr:\n        if i == 0:\n            result = 0\n            break\n        elif i > 0:\n            result *= 1\n        elif i < 0:\n            result *= -1\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = 1\n    for num in arr:\n        result *= sign(num)\n    return result if arr else None\n",
        "num_ids": 30
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        prod = 1\n        for i in arr:\n            if i == 0:\n                return None\n            elif i < 0:\n                prod *= -1\n            else:\n                prod *= 1\n        return prod",
        "num_ids": 73
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    ans = 0\n    for num in arr:\n        if num > 0:\n            ans += abs(num)\n        elif num < 0:\n            ans -= abs(num)\n    return ans\n",
        "num_ids": 58
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        if i == 0:\n            result = result * 0\n        elif i < 0:\n            result = result * -1\n        else:\n            result = result * 1\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return None\n    res = 0\n    for a in arr:\n        if a < 0:\n            res += abs(a) * -1\n        elif a > 0:\n            res += a\n    return res\n",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(arr)\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n    summ = 0\n    for num in arr:\n        if num < 0:\n            summ -= num\n        elif num > 0:\n            summ += num\n    return summ * prod([sign(x) for x in arr])\n",
        "num_ids": 67
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    N = len(grid)\n",
        "num_ids": 9
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert(len(grid) > 0)\n    assert(all(len(row) == len(grid[0]) for row in grid))\n    assert(k >= 1)\n    assert(all(1 <= grid[i][j] <= len(grid) * len(grid[0]) for i in range(len(grid)) for j in range(len(grid[0]))))\n",
        "num_ids": 89
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def minPathHelper(grid, row, col, k):\n        if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]) or k < 1:\n            return []\n",
        "num_ids": 51
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(grid) < 2 or len(grid[0]) < 2:\n        return []\n",
        "num_ids": 24
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not grid or not grid[0]:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    lst_num = [num for num in range(1, len(grid) * len(grid) + 1)]\n    visited = set()\n    path = [0]\n",
        "num_ids": 48
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    N = len(grid)\n    min_paths = [float('inf')] * (k + 1)\n    min_paths[0] = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j == 0:\n                continue\n            for t in range(1, min(i, j) + 1):\n                min_paths[t] = min(min_paths[t],\n                                   min_paths[t - 1] + abs(grid[i - 1][j] - grid[i - 1][j - t]) + abs(grid[i][j - t] - grid[i][j]))\n",
        "num_ids": 159
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not grid or not grid[0]:\n        return []\n    if k == 0:\n        return grid[0]\n    N = len(grid)\n    # first row\n    row_min = [None] * k\n    row_min[0] = grid[0][0]\n    # first col\n    col_min = [None] * k\n    col_min[0] = grid[0][0]\n    # now for the rest of the grid\n    for r in range(1, N):\n        row_min.append(None)\n        col_min.append(None)\n        for c in range(1, k):\n            if row_min[c] is not None:\n                row_min[c] = min(row_min[c], grid[r][c])\n            else:\n                row_min[c] = grid[r][c]\n            if col_min[c] is not None:\n                col_min[c] = min(col_min[c], grid[r][c])\n            else:\n                col_min[c] = grid[r][c]\n    # now we can put them in increasing order\n    row_min = [row_min[i] for i in range(k)]\n    col_min = [col_min[i] for i in range(k)]\n    # now we can simply put them in decreasing order\n    return sorted(row_min + col_min, reverse = True)\n",
        "num_ids": 342
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(grid)\n    dp = [[0 for _ in xrange(n)] for _ in xrange(n)]\n    for i in xrange(n):\n        for j in xrange(n):\n            if i == j == 0:\n                dp[i][j] = grid[0][0]\n            elif i == 0:\n                dp[i][j] = grid[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = grid[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])\n    res = [dp[n-1][n-1]]\n    for _ in xrange(k):\n        res.append(res[-1] - 1)\n    return res",
        "num_ids": 222
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    N = len(grid)\n    f = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                f[i][j] = grid[i][j]\n            elif i == 0:\n                f[i][j] = f[i][j - 1] + grid[i][j]\n            elif j == 0:\n                f[i][j] = f[i - 1][j] + grid[i][j]\n            else:\n                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]\n",
        "num_ids": 175
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        seq = [1, 1]\n        for i in range(n - 2):\n            seq.append(seq[-2] + seq[-1] + seq[-1])\n        return seq + [seq[-1] + seq[-2] + seq[-1]]\n",
        "num_ids": 112
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #if n < 0:\n    #    return []\n    #fib = [1, 2, 3]\n    #if n == 0:\n    #    return [1]\n    #if n == 1:\n    #    return fib\n    #while len(fib) < n + 1:\n    #    fib.append(fib[-1] + fib[-2] + fib[-3])\n    #return fib[:n + 1]\n    \n    if n < 0:\n        return []\n    \n    trib = [0, 1, 1]\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    while len(trib) < n + 1:\n        trib.append(trib[-1] + trib[-2] + trib[-3])\n    return trib[:n + 1]\n",
        "num_ids": 211
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        arr = [1, 1, 1]\n        \n        for i in range(2, n+1):\n            if i % 2 == 0:\n                arr.append(arr[i-2]+arr[i-1])\n            else:\n                arr.append(arr[i-1]+arr[i-2]+arr[i-3])\n                \n        return arr\n    \nif __name__ == \"__main__\":\n    print tri(50)",
        "num_ids": 142
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        l = [1, 1, 2]\n        for i in range(3, n+1):\n            l.append(l[i - 1] + l[i - 2] + l[i - 3])\n        return l",
        "num_ids": 99
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if n == 0:\n        return []\n    \n    tribonacci = [0] * (n + 1)\n    tribonacci[1] = 1\n    tribonacci[2] = 2\n    \n    for i in range(3, n + 1):\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n    \n    return tribonacci\n",
        "num_ids": 113
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    tribonacci = [0, 1, 1, 2]\n    if n == 0:\n        return tribonacci\n    elif n == 1:\n        return tribonacci + [0]\n    for i in range(3, n + 1):\n        tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci\n",
        "num_ids": 103
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nums = [1, 3, 2, 1]\n    while len(nums) <= n:\n        nums.append(nums[-1] + nums[-2] + nums[-3])\n    return nums",
        "num_ids": 57
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    f = [1, 3, 1]\n    if n == 0:\n        return f\n    elif n == 1:\n        return f + [1]\n    else:\n        for i in range(2, n + 1):\n            f.append(f[i - 1] + f[i - 2] + f[i - 3])\n    return f\n",
        "num_ids": 86
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        return [1] + tri(n - 1) + [sum(tri(n - 2))]\n",
        "num_ids": 72
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # (n + 1)th tribonacci number = (n - 1)th tribonacci number + n / 2th tribonacci number + (n + 1) / 3th tribonacci number\n    tribonacci = [0, 1, 1]\n    for _ in range(n):\n        tribonacci.append((tribonacci[-1] + tribonacci[-2]) * 2)\n    return tribonacci\n",
        "num_ids": 104
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 10:\n        return n\n    else:\n        return digits(n//10)*(n%10)\n",
        "num_ids": 30
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 10:\n        return n\n    elif n % 2 == 0:\n        return digits(n / 10)\n    else:\n        return digits(n // 10) * n % 10\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    product = 1\n    while n > 0:\n        product = product * (n % 10)\n        n = n // 10\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = str(n)\n    count = 0\n    for c in s:\n        if c in '23456789':\n            count += int(c)\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            result = result * int(d)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 10:\n        return n\n    res = 1\n    while n:\n        if n % 10 % 2:\n            res *= n % 10\n        n //= 10\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    while n > 0:\n        count += n % 2\n        n = n // 10\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 1\n    while n:\n        product = product * (n % 10)\n        n /= 10\n    return product\n",
        "num_ids": 32
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    product = 1\n    while n > 0:\n        if n % 10 % 2 == 1:\n            product *= n % 10\n        n = n // 10\n    return product\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = 1\n    while n > 0:\n        res *= n % 10\n        n //= 10\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return False\n    \ndef nested_brackets(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return the number of pairs of matching brackets for each position of the string.\n    For example, if the input string is \"}][{{{[()]}}}\", the function should return \"1 - 3 - 1\",\n    as there are 3 pairs of matching brackets (two pairs on positions 1, 5, and 8).\n    \n    nested_brackets(\"}][{{{[()]}}}\") \u279e \"1 - 3 - 1\"\n    nested_brackets(\"[{[()()]\") \u279e \"2\"\n    nested_brackets(\"[[{()}]]\") \u279e \"1\"\n    nested_brackets(\"{}{[[[]]]]}{{()\") \u279e \"1\"\n    '''\n    return 0\n",
        "num_ids": 212
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(string[i])\n        if string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 90
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 61
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return False",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert type(string) == str, 'String should be a string'\n    assert all(c in ['[', ']' for c in string]), 'String should contain only brackets'\n",
        "num_ids": 42
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    # count = 0\n    # for i in range(len(string)):\n    #     if string[i] == '[' and string[i-1]!= ']':\n    #         count += 1\n    #     elif string[i] == ']' and string[i-1]!= '[' and count > 0:\n    #         count -= 1\n    #     elif string[i] == ']' and string[i-1] == '[' and count == 0:\n    #         return False\n    # return True\n    if string == '':\n        return False\n    elif len(string) == 1:\n        return False\n    else:\n        result = True\n        i = 0\n        while i < len(string):\n            if string[i] == '[' and string[i-1] == ']':\n                result = False\n                break\n            elif string[i] == '[' and string[i-1]!= ']':\n                result = True\n                i += 1\n                while string[i]!= ']':\n                    i += 1\n            elif string[i] == ']' and string[i-1]!= '[' and result:\n                result = True\n                i += 1\n                while string[i]!= '[':\n                    i += 1\n            else:\n                i += 1\n        return result\n",
        "num_ids": 324
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return False\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if string[0] == '[' and string[-1] == ']':\n        string = string[1:-1]\n        count = 0\n        for i in string:\n            if i == '[':\n                count += 1\n            if i == ']':\n                count -= 1\n            if count < 0:\n                return False\n        if count == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 107
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    #when a string is passed,\n    if type(string) == str:\n        #we create a temp array\n        temp = []\n        #then we iterate through the string\n        for char in string:\n            #if a bracket is encountered,\n            if char == '[' or char == ']':\n                #we append to the temp array\n                temp.append(char)\n                #if the array is not empty\n                if temp:\n                    #then we traverse the array\n                    for x in temp:\n                        #if the array is empty\n                        if not temp:\n                            #return False\n                            return False\n                        #if the current bracket is the last in the array\n                        elif temp[-1] == ']' and char == '[':\n                            #then we pop it out of the array\n                            temp.pop()\n                        #if the current bracket is the last in the array\n                        elif temp[-1] == '[' and char == ']':\n                            #then we pop it out of the array\n                            temp.pop()\n                        else:\n                            #we return False\n                            return False\n                #else we return False\n                else:\n                    return False\n        #we return True\n        return True\n    #else we return False\n    else:\n        return False\n",
        "num_ids": 292
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if string[0] == '[':\n        return False\n    for i in range(len(string)):\n        if string[i] == '[':\n            if string[i+1] == ']':\n                return True\n        elif string[i] == ']':\n            if string[i-1] == '[':\n                return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def pow_first(lst):\n        for i in range(len(lst)):\n            lst[i] = math.ceil(lst[i])\n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([int(math.ceil(num)) ** 2 for num in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(map(lambda x:round(x*x), lst))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([int(math.ceil(x))**2 for x in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([int(math.ceil(x)) ** 2 for x in lst])\n    \n",
        "num_ids": 25
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for i in lst:\n        result += (i ** 2)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(x**2 for x in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(round(x**2, 0) for x in lst)\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(math.ceil(i**2)) for i in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([int(math.ceil(i))**2 for i in lst])\n    \ndef odd_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of odd squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 7\n    For lst = [1,4,9] the output should be 17\n    For lst = [1,3,5,7] the output should be 22\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    return sum([int(math.ceil(i))**2 for i in lst if i%2!=0])\n    \ndef arithmetic_sequence(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the longest arithmetic sequence in the given list,\n    so that the sum of the last two elements is the same as the first element of the sequence.\n    Return the length of the longest arithmetic sequence.\n    \n    Example:\n    For lst = [8,2,3,4,6,7], the output should be 3\n    \n    Since all the numbers are different, the length of the longest arithmetic sequence is 3.\n    \n    For lst = [10,3,5,6,8,3,2,1], the output should be 4\n    \n    The elements of the longest arithmetic sequence are [6,8,3,2], so the sum of the last two elements is equal to the first element of the sequence.\n    \n    For lst = [7,12,15,16,8], the output should be 1\n    \n    There is no possible arithmetic sequence, so the length of the longest arithmetic sequence is 0.\n    \n    \"\"\"\n    from collections import defaultdict\n    d = defaultdict(list)\n    for i in range(len(lst)-1):\n        d[lst[i]].append(i)\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] == lst[0] - lst[i]:\n            return len(lst[i+1:])\n    return 0\n    \ndef invert_matrix(matrix):\n    \"\"\"\n    Write a function that takes a 2D matrix and returns the transpose of the matrix.\n    \n    For example:\n    \n    [1, 2, 3]\n    [4, 5, 6]\n    \n    should return:\n    \n    [1, 4],\n    [2, 5],\n    [3, 6]\n    \n    \"\"\"\n    new_matrix = []\n    for i in range(len(matrix)):\n        new_matrix.append([])\n        for j in range(len(matrix[i])):\n            new_matrix[i].append(matrix[j][i])\n    return new_matrix\n    \ndef max_repetitions(lst):\n    \"\"\"\n    Write a function that takes a list of integers and returns the highest number of integers that can be repeated in the list.\n    \n    For example:\n    \n    max_repetitions([1,2,2,1,1]) should return 2\n    \n    If there is no repetition, return 0.\n    \n    \"\"\"\n    \n    d = defaultdict(int)\n    for i in lst:\n        d[i] += 1\n    return max(d.values())\n    \ndef rotationalCipher(message, key):\n    \"\"\"\n    Write a function that takes a string and returns the string it rotates by a given key.\n    \n    The function should also return the key that should be used to rotate the message.\n    \n    \n    Examples:\n    \n    rotationalCipher(\"Hello\", 5) should return \"Bazz\", because Caesar Cipher with key 5 encrypts \"Hello\" to \"Bazz\".\n    \n    rotationalCipher(\"Hello\", -1) should return \"Hello\", because Caesar Cipher with key -1 decrypts \"Hello\" to \"Hello\".\n    \n    rotationalCipher(\"Hello\", 0) should return \"Hello\", because Caesar Cipher with key 0 does nothing to \"Hello\".\n    \n",
        "num_ids": 1024
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt.endswith(\" \")\n",
        "num_ids": 13
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(txt) == 0:\n        return False\n    \n    return txt[-1] in string.ascii_letters and not is_a_word(txt)\n",
        "num_ids": 44
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(txt) == 0:\n        return False\n    if txt[-1] >= 'a' and txt[-1] <= 'z':\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if txt == '':\n        return False\n    \n    return txt[-1].isalpha() and not txt[-1].isupper()\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in [\" \",\"'\",'\"']:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if txt == \"\":\n        return False\n    elif not txt[-1].isalpha():\n        return True\n    else:\n        return False\n    #pass\n",
        "num_ids": 43
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in [' ', '.', '!', '?', '\"']\n",
        "num_ids": 36
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if txt!= '':\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if txt[-1].isalpha() and len(txt) > 0 and txt[-1] not in \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\" and txt[-1]!= \" \":\n        return True\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return i\n    return -1",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i, v in enumerate(arr):\n        if i == 0:\n            continue\n        if v < arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 1:\n        return -1\n    if len(arr) == 2:\n        if arr[0] >= arr[1]:\n            return -1\n        else:\n            return 0\n    max_index = -1\n    for i in range(len(arr)):\n        if i == 0:\n            max_index = i\n        elif arr[i] < arr[max_index - 1]:\n            max_index = i\n    return max_index\n",
        "num_ids": 115
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(1,len(arr)):\n        if arr[i-1] > arr[i]:\n            return i-1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst = [0] * len(arr)\n    for i in xrange(len(arr)):\n        if arr[i] > arr[i - 1] and lst[i] == 0:\n            lst[i] = i\n    return lst.index(max(lst))\n",
        "num_ids": 72
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 1:\n        return -1\n    m = []\n    for i in range(len(arr)-1):\n        if arr[i+1] >= arr[i]:\n            m.append(i+1)\n    if not m:\n        return -1\n    else:\n        return m[-1]\n",
        "num_ids": 81
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr_len = len(arr)\n",
        "num_ids": 11
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    i = len(arr) - 1\n    while i > 0:\n        if arr[i] <= arr[i - 1]:\n            return -1\n        i -= 1\n",
        "num_ids": 42
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    negative_ints = []\n    positive_ints = []\n",
        "num_ids": 15
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    negs = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    if not negs and not pos:\n        return (None, None)\n    elif not negs and pos:\n        return (None, max(pos))\n    elif negs and not pos:\n        return (max(negs), None)\n    else:\n        return (max(negs), min(pos))\n",
        "num_ids": 110
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    #returns a tuple\n    return (max(lst), min(lst))\n    \n",
        "num_ids": 26
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest = None\n    largest = None\n    for i in lst:\n        if i > 0:\n            if smallest is None:\n                smallest = i\n            elif i < smallest:\n                smallest = i\n        elif i < 0:\n            if largest is None:\n                largest = i\n            elif i > largest:\n                largest = i\n    return (largest, smallest)\n",
        "num_ids": 95
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    largest_negative = None\n    smallest_positive = None\n    for i in lst:\n        if i < 0:\n            if largest_negative is None:\n                largest_negative = i\n            else:\n                largest_negative = max(i, largest_negative)\n        else:\n            if smallest_positive is None:\n                smallest_positive = i\n            else:\n                smallest_positive = min(i, smallest_positive)\n    if largest_negative is None:\n        return (None, None)\n    else:\n        return (largest_negative, smallest_positive)",
        "num_ids": 137
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in lst:\n        if i < 0:\n            result.append(i)\n        elif i > 0:\n            result.append(i)\n    if len(result) == 0:\n        return (None, None)\n    else:\n        return (max(result), min(result))\n",
        "num_ids": 79
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if lst == []:\n        return (None, None)\n    if lst == [0]:\n        return (0, 0)\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n        if num > 0:\n            if min_pos is None or num < min_pos:\n                min_pos = num\n    return (max_neg, min_pos)\n",
        "num_ids": 126
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # remove any nans from list\n    lst = [i for i in lst if not isnan(i)]\n    lst = sorted(lst, reverse=True)\n    negative_lst = [i for i in lst if i < 0]\n    positive_lst = [i for i in lst if i > 0]\n    if negative_lst == []:\n        return (None, None)\n    return (negative_lst[0], positive_lst[0])\n",
        "num_ids": 117
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    if len(neg_integers) > 0:\n        return (min(neg_integers), max(neg_integers))\n    elif len(pos_integers) > 0:\n        return (max(pos_integers), min(pos_integers))\n    else:\n        return (None, None)\n",
        "num_ids": 114
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    largest = None\n    smallest = None\n    for num in lst:\n        if num < 0:\n            if largest == None or num > largest:\n                largest = num\n        elif num > 0:\n            if smallest == None or num < smallest:\n                smallest = num\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if type(a) == str:\n        a = float(a.replace(\",\", \".\"))\n    if type(b) == str:\n        b = float(b.replace(\",\", \".\"))\n    if type(a)!= type(b):\n        return None\n    return max(a, b)\n",
        "num_ids": 76
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if isinstance(a, int) and isinstance(b, int):\n    #     return a if a > b else b\n    # elif isinstance(a, float) and isinstance(b, float):\n    #     return a if a > b else b\n    # elif isinstance(a, str) and isinstance(b, str):\n    #     return str(float(a)) if float(a) > float(b) else str(float(b))\n    # else:\n    #     return None\n",
        "num_ids": 123
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return a if a > b else b\n    elif isinstance(a, int) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    else:\n        return None",
        "num_ids": 123
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def string_test(a, b):\n        if a == b:\n            return None\n        else:\n            return (a > b)\n",
        "num_ids": 35
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if type(a) == type(b):\n        return a\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == int and type(b) == str:\n        return b\n    elif type(a) == float and type(b) == int:\n        return b\n    elif type(a) == int and type(b) == float:\n        return a\n    elif type(a) == str and type(b) == str:\n        return b\n    elif type(a) == str and type(b) == float:\n        return a\n    elif type(a) == float and type(b) == str:\n        return a\n    else:\n        return None\n",
        "num_ids": 179
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if type(a) is float and type(b) is float:\n        return max(a, b)\n    elif type(a) is str and type(b) is str:\n        a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        return max(a, b)\n    elif type(a) is str and type(b) is not str:\n        a, b = float(a.replace(',', '.')), b\n        return max(a, b)\n    elif type(a) is not str and type(b) is str:\n        a, b = a, float(b.replace(',', '.'))\n        return max(a, b)\n    elif type(a) is not str and type(b) is not str:\n        return max(a, b)\n",
        "num_ids": 204
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if type(a) is type(b):\n        if a < b:\n            return b\n        elif a > b:\n            return a\n        else:\n            return None\n    elif type(a) is not type(b):\n        if type(a) is str:\n            a = float(a.replace(',', '.'))\n        if type(b) is str:\n            b = float(b.replace(',', '.'))\n        if a < b:\n            return b\n        elif a > b:\n            return a\n        else:\n            return None\n",
        "num_ids": 139
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return max(a, b) if a > b else (min(a, b) if a < b else (a if a == b else b))\n",
        "num_ids": 36
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in xrange(4):\n        if n % 2 == 0:\n            total += n / 2\n        n = n - 1\n    return total % 2 == 0\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum_of_even_numbers(n) == n\n",
        "num_ids": 17
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([x for x in range(2, n+1, 2) if n-x%2 == 0]) == n\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum_of_four_evens(n) == n\n",
        "num_ids": 17
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(range(0, n, 2)) + n == n\n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(is_even(n - i) for i in range(4, n, 2))\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not is_number(n):\n        return False\n    if not is_even(n):\n        return False\n    if sum(i for i in range(1, n/2, 2) if is_even(i)) == n/2:\n        return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n % 2 == 0 and n / 2 >= 4\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return n % 2 == 0 and sum_of_even_numbers(n) == n\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # write your code here\n    if n == 0 or n % 2!= 0:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert type(n) == int and n > 0\n    result = 1\n    while n > 1:\n        result *= n\n        n -= 1\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    factorial = 1\n    for i in xrange(n, 1, -1):\n        factorial *= i\n    return factorial\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 42
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert n > 0\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 1\n    for i in range(2, n+1):\n        total *= i\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n*special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 34
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(text) >= 1, 'Length is not greater than 0'\n    \n    fixed = []\n    for i in range(len(text)):\n        char = text[i]\n        if char =='':\n            fixed.append('_')\n        elif i > 0 and text[i - 1] =='' and text[i] =='':\n            fixed.append('-')\n        else:\n            fixed.append(char)\n            \n    return ''.join(fixed)",
        "num_ids": 115
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # TODO: Implement me.\n    return text\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return '_'.join(text.split(' '))\n    \n    \ndef fix_exceptions(text):\n    \"\"\"\n    Given a string text, replace all characters in it that are not \n    in the list exceptions with underscores\n    \n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    fix_exceptions(\"Hi! I'm a very friendly bot\") == \"Hi_I_m_a_very_friendly_bot\"\n    \"\"\"\n    \n    return ''.join([e for e in text if e in exceptions])\n    \n",
        "num_ids": 179
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #text = text.strip()\n    text = re.sub(' +','_',text)\n    if text!= '' and text!= \" \" and text!= \"_\":\n        #remove excess underscores\n        while text.find(\"__\") > -1:\n            text = text.replace(\"__\",\"_\")\n        #remove excess spaces\n        while text.find(\"  \") > -1:\n            text = text.replace(\"  \",\" \")\n        return text\n    else:\n        return \"\"\n",
        "num_ids": 117
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    text = re.sub(\"[ ]{2,}\", \"_-\", text)\n    return text\n",
        "num_ids": 25
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    text = text.strip()\n    text = text.replace(\" \", \"_\")\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text.replace(' ', '_')\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 0\n    while i < len(text) - 1:\n        if text[i] == \" \" and text[i+1] == \" \":\n            text = text[:i+1] + \"_\" + text[i+1:]\n        i += 1\n    \n    if text[-1] == \" \":\n        text = text[:-1] + \"_\"\n    return text\n",
        "num_ids": 95
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return re.sub(r\"\\s+\", \"_\", text)\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return re.sub(\" +\", \"_\", re.sub(\" +\", \"-\", text))\n",
        "num_ids": 22
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # base case\n    if file_name == '':\n        return 'No'\n    if len(file_name) > 15:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    # recursive case\n    if file_name[0].isalpha() and file_name[1:].isdigit() and file_name[-3:] in ['exe', 'dll']:\n        return 'Yes'\n    else:\n        return file_name_check(file_name[1:])\n",
        "num_ids": 130
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_valid(file_name):\n        # First, get rid of the extension\n        if file_name[-4:] == '.txt':\n            file_name = file_name[:-4]\n        if file_name[-4:] == '.exe':\n            file_name = file_name[:-4]\n        if file_name[-4:] == '.dll':\n            file_name = file_name[:-4]\n        \n        # Second, remove the leading digits\n        while file_name[0] == '0':\n            file_name = file_name[1:]\n",
        "num_ids": 139
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"Yes\" if file_name[0].isalpha() and file_name[-1].isalpha() and file_name.find('.')!= -1 and (file_name[file_name.rfind('.'):].lower() == 'txt' or file_name[file_name.rfind('.'):].lower() == 'exe' or file_name[file_name.rfind('.'):].lower() == 'dll') else \"No\"\n",
        "num_ids": 108
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def f(file_name):\n        if file_name[0].isdigit():\n            return 'No'\n        elif file_name.count('.')!= 1:\n            return 'No'\n        elif file_name[1:].split('.')[0].strip() == '':\n            return 'No'\n        elif file_name.split('.')[1].strip().lower() not in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n",
        "num_ids": 122
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    try:\n        file_name = file_name.replace(' ', '')\n        if len(file_name) == 0:\n            raise ValueError\n        if not file_name[0].isalpha():\n            raise ValueError\n        if file_name.count('.') > 1:\n            raise ValueError\n        if file_name.count('.') == 0:\n            raise ValueError\n        if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n            raise ValueError\n        \n        return 'Yes'\n    except:\n        return 'No'\n",
        "num_ids": 141
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import re\n    return \"Yes\" if re.match(r'(.*?[0-9])(.*?[A-Za-z])(.*?[.][txt|exe|dll])', file_name) is not None else \"No\"\n",
        "num_ids": 61
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if not file_name[0].isalpha():\n        return \"No\"\n    if not file_name[1:].isdigit():\n        return \"No\"\n    if file_name.count(\".\")!= 1:\n        return \"No\"\n    if len(file_name) == 1:\n        return \"No\"\n    if file_name.split(\".\")[1][:4] not in [\"exe\", \"dll\", \"txt\"]:\n        return \"No\"\n    return \"Yes\"\n",
        "num_ids": 121
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #You can check your function's input here: print(len(file_name))\n    #This function should return one of the following values:\n    # - 'Yes' if the file's name is valid\n    # - 'No' if the file's name is invalid\n    # - 'Error' if the function is unable to perform any check\n    valid_name = re.compile(r\"^[a-zA-Z][a-zA-Z0-9_.]{0,3}[a-zA-Z0-9.]$\")\n    valid_suffix = re.compile(r\".*[exe|dll|txt]$\")\n    file_name = file_name.lower()\n    if file_name.isdigit():\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if not re.match(valid_name, file_name):\n        return 'No'\n    if re.match(valid_suffix, file_name) == None:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 255
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    file_name = file_name.strip()\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyz':\n        return 'No'\n    if file_name[-4:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 118
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    filename_check = re.compile('^[a-zA-Z][a-zA-Z0-9]*[.][txt|exe|dll]*$')\n    return 'Yes' if filename_check.match(file_name) else 'No'\n",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4!= 0:\n            sum += value * value\n        elif index % 4 == 0 and index % 3!= 0:\n            sum += value\n        else:\n            sum += value\n    return sum\n",
        "num_ids": 77
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = [1,2,3,4,5]\n    return sum([lst[i]**2 if i%3 == 0 else lst[i]**3 for i in range(len(lst))]",
        "num_ids": 53
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_of_squares = 0\n    for index in range(len(lst)):\n        if index%3==0:\n            sum_of_squares+=lst[index]**2\n        elif index%4==0 and index%3!=0:\n            sum_of_squares+=lst[index]**3\n    return sum_of_squares\n",
        "num_ids": 91
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    pass\n",
        "num_ids": 6
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    sum = 0\n    \n    for i, val in enumerate(lst):\n        if i % 4 == 0:\n            val = val ** 3\n        if i % 3 == 0:\n            val = val ** 2\n        sum += val\n    \n    return sum\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n    return sum\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total\n",
        "num_ids": 64
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_lst = [i ** 2 if i % 4 == 0 and i % 3 == 0 else i for i in lst]\n    return sum(new_lst)\n",
        "num_ids": 42
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i,val in enumerate(lst):\n        if i%4 == 0:\n            sum += val**3\n        elif i%3 == 0:\n            sum += val**2\n        else:\n            sum += val\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    for i in lst:\n        result += i\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sentence = sentence.split()\n    \n    return''.join([word for word in sentence if is_prime(len(word))])\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    words = sentence.split(' ')\n    for word in words:\n        result.append(word[0] if is_prime(len(word)) else '')\n    return''.join(result)\n",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = \"\"\n    words = sentence.split()\n    for word in words:\n        while not is_prime(len(result) + 1):\n            pass\n        result += word\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n",
        "num_ids": 43
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sentence = sentence.split(' ')\n    prime_numbers = []\n    for word in sentence:\n        if is_prime(len(word)):\n            prime_numbers.append(word)\n    return''.join(prime_numbers)\n",
        "num_ids": 61
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(sorted(list(filter(lambda x: is_prime(len(x)), sentence.split(' '))), key=len))\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = ''\n    return result\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(sorted(set(sentence), key=lambda x: len(x))[::-1])",
        "num_ids": 29
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join([x for x in sentence.split() if is_prime(len(x))])\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(sorted(set(sentence.split(' ')), key=len)[::-1])\n",
        "num_ids": 28
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Split the fraction\n    numerator, denominator = x.split('/')\n    # Get the common divisor of the numerator and denominator\n    common_divisor = get_gcd(int(numerator), int(denominator))\n    # Normalize the fractions\n    numerator = int(numerator) / common_divisor\n    denominator = int(denominator) / common_divisor\n    # Simplify the fractions\n    if numerator % denominator == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 136
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def toNum(x):\n        \"\"\"converts string to a num\"\"\"\n        def conv(x):\n            if x.isdigit():\n                return int(x)\n            elif x[0] == '-':\n                return -1 * int(x[1:])\n            elif x == \"1/2\":\n                return 0.5\n            else:\n                return 1\n        return conv(x)\n",
        "num_ids": 99
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numerator, denominator = int(x.split('/')[0]), int(x.split('/')[1])\n    return numerator * n == int(x * n)",
        "num_ids": 45
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return eval(str(x) + \"/\" + str(n)) == int(eval(str(x) + \"/\" + str(n)))\n",
        "num_ids": 35
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    if numerator % denominator == 0:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if int(x[0:n.find('/')]) / int(x[n.find('/')+1:len(x)]) == int(n[0:n.find('/')]) / int(n[n.find('/')+1:len(x)]):\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # convert both strings to int\n    x_ = int(x)\n    n_ = int(n)\n",
        "num_ids": 27
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x.replace(\"/\", \"\").isdigit() and n.replace(\"/\", \"\").isdigit() and int(x) * int(n) == int(x.replace(\"/\", \"\").replace(n.replace(\"/\", \"\"), \"\"))\n",
        "num_ids": 62
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO: you code here\n    numerator, denominator = int(x.split('/')[0]), int(x.split('/')[1])\n    gcd = math.gcd(numerator, denominator)\n    return (numerator / gcd) * (denominator / gcd) == numerator * denominator\n",
        "num_ids": 84
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num, den = x.split(\"/\")\n    num = int(num)\n    den = int(den)\n    if num % den == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: x if sum(map(int, str(abs(x)))) else (abs(x), x))\n",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), x))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def sum_of_digits(n):\n        return sum([int(i) for i in str(abs(n))])\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    index = 0\n    result = []\n    while index < len(nums):\n        current = nums[index]\n        sum_of_digits = sum([int(num) for num in str(current)])\n        result.append((sum_of_digits, current))\n        index += 1\n    result.sort()\n    return [x[1] for x in result]\n",
        "num_ids": 92
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # return sorted(nums, key = lambda x: sum(map(int, map(str, x))))\n    return sorted(nums, key = lambda x: sum(map(int, str(x))))\n",
        "num_ids": 50
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda n: (sum(map(int, list(str(n)))), n))\n",
        "num_ids": 30
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    dic = {}\n    for i in nums:\n        s = sum([int(x) for x in str(i)])\n        dic[i] = s\n    l = [i for i in dic.keys()]\n    l.sort(key=lambda x: dic[x])\n    return l\n",
        "num_ids": 77
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for n in nums if n>10 and (n//10)%10%2==1 and (n%10)%2==1])\n",
        "num_ids": 39
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    specialCount = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1 and (i // 10) % 2 == 1:\n            specialCount += 1\n    return specialCount\n",
        "num_ids": 49
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len([x for x in nums if x > 10 and (x%2!= 0 or x//10%2!= 0)])\n",
        "num_ids": 35
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([1 for n in nums if n > 10 and ((n // 10 % 10) % 2 == 1)])\n",
        "num_ids": 30
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in nums:\n        if i > 10 and (i % 10 == 1 or i % 10 == 3 or i % 10 == 5 or i % 10 == 7 or i % 10 == 9):\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([x for x in nums if x > 10 and 1 in [int(y) for y in str(x)] and 3 in [int(y) for y in str(x)] and 5 in [int(y) for y in str(x)] and 7 in [int(y) for y in str(x)] and 9 in [int(y) for y in str(x)]])\n",
        "num_ids": 93
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([x for x in nums if x > 10 and (int(x) % 2 == 1) and (int(x) % 10 == 1)])\n",
        "num_ids": 39
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for n in nums if n > 10 and n % 2 == 1 and n % 10 == 1)\n",
        "num_ids": 29
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len([n for n in nums if n > 10 and (n / 10) % 2 == 1 and (n / 100) % 2 == 1])\n",
        "num_ids": 37
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num // 10 % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(i*i - i + 1 for i in range(1, n)) // 3\n",
        "num_ids": 24
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i * i) + (j * j) == (i * i + j * j) and (i * i + j * j) % 3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if a[i] + a[j] + a[k] == 3 * (a[i] + a[j] + a[k]):\n                    count += 1\n    return count\n",
        "num_ids": 118
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = [i*i-i+1 for i in range(1, n+1)]\n    ans = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k] == 0) and (a[i] % 3 == 0) and (a[j] % 3 == 0) and (a[k] % 3 == 0):\n                    ans += 1\n    return ans\n",
        "num_ids": 129
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    result = 0\n    a = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 106
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # How many triples can be made by adding up to n?\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i * i + j * j + k * k == n and i < j < k:\n                    count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a = [0] * n\n    count = 0\n    for i in xrange(1, n):\n        a[i] = a[i-1] + i + 1\n    for i in xrange(0, n):\n        for j in xrange(i+1, n):\n            if a[i] + a[j] == 3*i + 1:\n                count += 1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = [0 for i in range(n)]\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] + a[j] == 3 * a[i]:\n                count += 1\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if planet1 not in PLANETS:\n        return []\n    if planet2 not in PLANETS:\n        return []\n    \n    def mms(planet):\n        return PLANETS.index(planet)\n    \n    def mm(planet1, planet2):\n        return abs(mms(planet1) - mms(planet2))\n    \n    def find_orbits(planet):\n        p = PLANETS.index(planet)\n        return [(c, -mm(c, planet)) for c in PLANETS if (mms(c) - p) % 8 <= 2]\n    \n    orbit_list = [x for x in PLANETS if x!= planet1 and x!= planet2]\n    l1 = find_orbits(planet1)\n    l2 = find_orbits(planet2)\n    l3 = [x for x in orbit_list if x not in [x[0] for x in l1] and x not in [x[0] for x in l2]]\n    return tuple(sorted([x[0] for x in l3], key=lambda x: (-mms(x), x)))\n    \nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Venus\", \"Earth\") == ()\nassert bf(\"Jupiter\", \"Mars\") == ()",
        "num_ids": 362
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    routes = []\n    for planet in PLANETS:\n        routes.append(get_orbit_path(planet1, planet2))\n    common = []\n    for route in routes:\n        if route in routes:\n            common.append(route)\n    common.sort(key=len)\n    return tuple(common)\n",
        "num_ids": 101
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    planets = {\n        \"Mercury\" : \"Venus\",\n        \"Venus\" : \"Earth\",\n        \"Earth\" : \"Mars\",\n        \"Mars\" : \"Jupiter\",\n        \"Jupiter\" : \"Saturn\",\n        \"Saturn\" : \"Uranus\",\n        \"Uranus\" : \"Neptune\",\n        \"Neptune\" : \"Pluto\",\n    }\n    return sorted((name for name in planets if planets[name]>planets[planet1] and planets[name]<planets[planet2]))\n",
        "num_ids": 133
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = ()\n    if planet1 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return result\n    if planet2 not in (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return result\n",
        "num_ids": 94
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if planet1 == \"Venus\" or planet2 == \"Venus\":\n        return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return (\"Venus\",)\n    elif planet1 == \"Earth\" or planet2 == \"Earth\":\n        return (\"Mars\", \"Jupiter\")\n    elif planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mars\" or planet2 == \"Mars\":\n        return (\"Jupiter\", \"Saturn\")\n    elif planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return (\"Saturn\", \"Earth\")\n    elif planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return (\"Mercury\", \"Venus\")\n    else:\n        return tuple()",
        "num_ids": 225
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import collections\n    def get_dist(planet1, planet2):\n        return ((G * M * m1) / (pow(x1-x2,2) + pow(y1-y2,2) + pow(z1-z2,2)))**0.5\n",
        "num_ids": 68
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if planet1!= \"Mercury\" and planet1!= \"Venus\" and planet1!= \"Earth\" and planet1!= \"Mars\" and planet1!= \"Jupiter\" and planet1!= \"Saturn\" and planet1!= \"Uranus\" and planet1!= \"Neptune\":\n        return False\n    if planet2!= \"Mercury\" and planet2!= \"Venus\" and planet2!= \"Earth\" and planet2!= \"Mars\" and planet2!= \"Jupiter\" and planet2!= \"Saturn\" and planet2!= \"Uranus\" and planet2!= \"Neptune\":\n        return False\n    planet1 = planets[planet1]\n    planet2 = planets[planet2]\n    listoflst = []\n    for i in range(len(planets)):\n        listoflst.append([planets[i], i, 0])\n    for i in range(len(planets)):\n        listoflst[i][2] = get_orbital_radius(planets[i])\n    listoflst[planet1][2] = 0\n    listoflst[planet2][2] = 0\n    for i in range(len(planets)):\n        listoflst[i][2] = listoflst[i][2] * listoflst[i][2]\n    listoflst[planet1][2] = listoflst[planet1][2] + listoflst[planet2][2]\n    listoflst[planet1][2] = math.sqrt(listoflst[planet1][2])\n    for i in range(len(planets)):\n        listoflst[i][2] = listoflst[i][2] * 2\n    listoflst[planet2][2] = listoflst[planet1][2] + listoflst[planet2][2]\n    listoflst[planet2][2] = math.sqrt(listoflst[planet2][2])\n    listoflst.sort(key=lambda x: x[2])\n    return tuple([l[0] for l in listoflst if l[2] > 0])\n",
        "num_ids": 527
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (planet1==\"Mercury\" and planet2==\"Venus\") or (planet1==\"Venus\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Venus\" and planet2==\"Mercury\") or (planet1==\"Mercury\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mercury\",\"Earth\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Jupiter\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Saturn\") or (planet1==\"Saturn\" and planet2==\"Uranus\") or (planet1==\"Uranus\" and planet2==\"Neptune\"):\n        return (\"Saturn\",\"Uranus\",\"Neptune\")\n    elif (planet1==\"Neptune\" and planet2==\"Earth\") or (planet1==\"Earth\" and planet2==\"Mars\") or (planet1==\"Mars\" and planet2==\"Jupiter\") or (planet1==\"Jupiter\" and planet2==\"Saturn\"):\n        return (\"Earth\",\"Jupiter\",\"Mars\",\"Saturn\",\"Uranus\")\n    else:\n        return ()\n",
        "num_ids": 554
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def get_orbits(planet):\n        o = set()\n        for p in planets:\n            o.add(p.orbit(planet))\n        return o\n",
        "num_ids": 40
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if (planet1!= \"Mercury\" and planet1!= \"Venus\" and planet1!= \"Earth\" and \n    planet1!= \"Mars\" and planet1!= \"Jupiter\" and planet1!= \"Saturn\" and planet1!= \"Uranus\"\n    and planet1!= \"Neptune\" and planet2!= \"Mercury\" and planet2!= \"Venus\" and planet2!= \"Earth\"\n    and planet2!= \"Mars\" and planet2!= \"Jupiter\" and planet2!= \"Saturn\" and planet2!= \"Uranus\"\n    and planet2!= \"Neptune\"):\n        return ()\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1Index = planets.index(planet1)\n    planet2Index = planets.index(planet2)\n    sun = planets.index(\"Sun\")\n    planet1List = [planet1Index]\n    planet2List = [planet2Index]\n    planet1ToIndex = {}\n    planet1ToIndex[planet1Index] = planet1\n    while planet1ToIndex[planet1Index]!= planet1:\n        planet1Index = planet1ToIndex[planet1Index]\n        planet1List.append(planet1Index)\n    while planet2Index!= planet1Index:\n        planet2Index = planet2ToIndex[planet2Index]\n        planet2List.append(planet2Index)\n    planet2List.reverse()\n    planet1ToIndex = {}\n    planet2ToIndex = {}\n    for planet in planet1List:\n        planet1ToIndex[planet] = planet1\n    for planet in planet2List:\n        planet2ToIndex[planet] = planet2\n    planetList = planet1List + planet2List\n    planetList.sort()\n    planetList = [planet1ToIndex[x] for x in planetList]\n    planetList = [planet2ToIndex[x] for x in planetList]\n    planetList = tuple(planetList)\n    return planetList\n",
        "num_ids": 500
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for word in lst:\n        if len(word)%2 == 0:\n            result.append(word)\n    return sorted(result)\n",
        "num_ids": 41
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst, key=lambda s: (len(s), s))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # using built-in function\n    # return sorted(lst,key=len)\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # lst = [word for word in lst if len(word) % 2 == 0]\n    # return sorted(lst, key=len)\n    return sorted(lst, key=len, reverse=True)",
        "num_ids": 52
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    return sorted(lst, key=lambda word: (len(word), word))\n",
        "num_ids": 27
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list_sort(lst), key=lambda x: len(x))\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            result.append(item)\n    result.sort(key=len)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sorted_lst = []\n    for elem in lst:\n        if len(elem) % 2 == 0:\n            sorted_lst.append(elem)\n    sorted_lst.sort()\n    return sorted_lst\n",
        "num_ids": 62
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def compare(x, y):\n        if len(x) < len(y):\n            return -1\n        elif len(x) > len(y):\n            return 1\n        else:\n            return 0\n",
        "num_ids": 52
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_prime(n):\n        \"\"\"Check if n is a prime number.\"\"\"\n        for i in xrange(2, n):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n        \n    \n",
        "num_ids": 26
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if(n%2==0):\n        return y\n    else:\n        return x\n",
        "num_ids": 23
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([x**2 for x in lst if x%2!=0])\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(x * x for x in lst if x > 0 and x % 2!= 0)\n    \n",
        "num_ids": 28
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if lst == []:\n        return 0\n    if len(lst) == 1:\n        return lst[0]*lst[0]\n    total = 0\n    for i in lst:\n        if i < 0:\n            continue\n        if i % 2 == 1:\n            total += i * i\n    return total\n",
        "num_ids": 81
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return 0\n    \n    sum = 0\n    for element in lst:\n        if element % 2:\n            sum += element * element\n    return sum",
        "num_ids": 44
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([x**2 for x in lst if (x%2)==1])\n",
        "num_ids": 23
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if not lst:\n        return 0\n    \n    return sum([x**2 for x in lst if x%2 == 1])\n",
        "num_ids": 36
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_lst = []\n    \n    for i in lst:\n        if i >= 0 and isinstance(i, int):\n            new_lst.append(i*2)\n    \n    return sum(new_lst)",
        "num_ids": 57
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([x * x for x in lst if x % 2!= 0])\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(n**2 for n in lst if n % 2)\n",
        "num_ids": 19
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0] ** 2\n    else:\n        odds = sum([num ** 2 for num in lst if num % 2 == 1])\n        return double_the_difference(lst[:-1]) + odds\n",
        "num_ids": 82
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return map(lambda x, y: abs(y - x), guess, game)\n",
        "num_ids": 21
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # get rid of any nans\n    game = [x for x in game if x!= x]\n    guess = [x for x in guess if x!= x]\n    \n    return [abs(x-y) for x,y in zip(guess, game)]\n    \n",
        "num_ids": 71
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i] - game[i]))\n    return score\n",
        "num_ids": 68
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(guess)!=len(game):\n        return -1\n    else:\n        return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 50
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = len(game)\n    b = len(guess)\n    ans = []\n    for i in range(b):\n        if game[i] == guess[i]:\n            ans.append(0)\n        else:\n            ans.append(abs(guess[i]-game[i]))\n    return ans\n",
        "num_ids": 78
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # this is a simple dict of scores and a dict of scores and guesses\n    # let's try using sets?\n    # guess is a list of guesses\n    # score is a list of scores\n    # let's do this in one line\n    # we need a set of scores and a set of scores and guesses\n    # then we can compare the two and see how many are the same\n    # we also need to create a list of differences\n    # let's first create the dicts we need\n    score_dict = dict(zip(range(len(game)),game))\n    guess_dict = dict(zip(range(len(guess)),guess))\n    # so now we can do the comparsion\n    # for each element in the score_dict, get the value\n    # for each element in the guess_dict, get the value\n    # see if the two match\n    # and then do a difference between the two, and add it to the differences list\n    # to return\n    # we can also use lists for this\n    # but we would have to convert it into a dict if we want to do things like dictionary comparsion\n    return [abs(guess_dict[i] - score_dict[i]) for i in range(len(score_dict))]\n    # need to convert it into a list, which is what we want\n    # so we can do dictionary comparsion, we can do it in one line\n    #return [abs(guess_dict[i] - score_dict[i]) for i in range(len(score_dict))]\n",
        "num_ids": 358
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert len(game) == len(guess), 'Arguments must be the same length'\n    difference = [abs(x-y) for x,y in zip(game,guess)]\n    return difference\n",
        "num_ids": 51
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #we will store the difference between the score and the guess at each index.\n    #we will return this array.\n    result = [abs(score-guess) for score,guess in zip(game,guess)]\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #print(game,guess)\n    return [abs(a - b) for a, b in zip(game, guess)]\n",
        "num_ids": 32
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # CODE GOES HERE\n",
        "num_ids": 8
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    highest_strength = 0\n    highest_strength_extension = ''\n    for extension in extensions:\n        extension_name = extension.split('.')[-1]\n        strength = -1 * sum(1 for i in extension_name if i.isupper())\n        strength += sum(1 for i in extension_name if i.islower())\n        if strength > highest_strength:\n            highest_strength = strength\n            highest_strength_extension = extension\n    return \"{}.{}\".format(class_name, highest_strength_extension)\n",
        "num_ids": 129
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Create a dict of extension: strength.\n    extensions_strength = {}\n    for extension in extensions:\n        extensions_strength[extension] = 0\n        for letter in extension:\n            if letter.isupper():\n                extensions_strength[extension] += 1\n            elif letter.islower():\n                extensions_strength[extension] -= 1\n",
        "num_ids": 87
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import string\n    s = string.uppercase\n    cap, sm = 0, 0\n    for e in extensions:\n        for c in e:\n            if c in s:\n                cap += 1\n            else:\n                sm += 1\n    return class_name + '.' + extensions[0] if cap - sm == cap - sm else \\\n    class_name + '.StrongestExtension'\n",
        "num_ids": 94
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    extensions = [ext.lower() for ext in extensions]\n    class_name = class_name.lower()\n    strength = 0\n    for letter in class_name:\n        if letter.isupper():\n            strength += 1\n        elif letter.islower():\n            strength -= 1\n    for ext in extensions:\n        for letter in ext:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > 0:\n            return \"%s.%s\" % (class_name, ext)\n    return class_name\n",
        "num_ids": 140
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # 1)\n    class_strength = 0\n    for i in class_name:\n        if i.isupper():\n            class_strength += 1\n        elif i.islower():\n            class_strength -= 1\n    class_strength = class_strength / len(class_name)\n",
        "num_ids": 69
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    strengths = []\n    for extension in extensions:\n        cap_diff = 0\n        lower_diff = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_diff += 1\n            elif letter.islower():\n                lower_diff += 1\n        strengths.append(cap_diff - lower_diff)\n    return '{0}.{1}'.format(class_name, extensions[strengths.index(max(strengths))])\n    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Car', ['Cab', 'StuFfed', 'Belt']))\nprint(Strongest_Extension('Bird', ['Endless', 'Cow', 'StuFfed']))\nprint(Strongest_Extension('Animal', ['Endless', 'Cow', 'StuFfed', 'Ate']))\n",
        "num_ids": 231
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #  Find the strongest extension\n    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = 0\n        extension_strength += len(extension) - len(extension.strip('0123456789'))\n        extension_strength += len(extension) - len(extension.strip('abcdefghijklmnopqrstuvwxyz'))\n        extension_strength += len(extension) - len(extension.strip('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n        extension_strength += len(extension) - len(extension.strip('0123456789'))\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
        "num_ids": 224
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == b:\n        return True\n    elif len(a) == 1:\n        return False\n    elif len(b) == 1:\n        return False\n    else:\n        if b in a:\n            return True\n        else:\n            return False\n",
        "num_ids": 65
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return any(b in a for a in a + a)\n",
        "num_ids": 16
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if b in a: return True\n    return any([b in a[i:]+a[:i] for i in range(len(a))])\n",
        "num_ids": 39
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # If the length of the first word is less than the second, then it's impossible for a cyclic permutation\n    # If the length of the second word is less than the first, then it's impossible for a cyclic permutation\n    if len(a) < len(b):\n        return False\n    elif len(b) < len(a):\n        return False\n    \n    for i in range(1,len(a)):\n        if b in a[i:]:\n            return True\n    return False\n",
        "num_ids": 120
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return any([b in a,b[::-1] in a])\n",
        "num_ids": 19
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = len(a)\n    for i in xrange(l):\n        if b in a[i:]:\n            return True\n        if b in a[i:] + a[:i]:\n            return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a in b:\n        return True\n    for i in range(len(b)):\n        if b[i:] == a[-len(b):]:\n            return True\n        if b[i:] + b[:i] == a:\n            return True\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a in b or a in get_rotated(b)\n",
        "num_ids": 17
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(a) < len(b):\n        return False\n    return b in a + a\n",
        "num_ids": 25
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = a.lower()\n    b = b.lower()\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    if num < 0:\n        num *= -1\n        even_digits += 1\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return even_digits, odd_digits\n",
        "num_ids": 94
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num_len = len(str(num))\n    even = 0\n    odd = 0\n    if num_len == 0:\n        return (0, 0)\n    while num!= 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "num_ids": 86
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = {}\n    result['even'] = 0\n    result['odd'] = 0\n    while num:\n        if num % 2 == 0:\n            result['even'] += 1\n        else:\n            result['odd'] += 1\n        num //= 10\n    return result['even'], result['odd']\n",
        "num_ids": 74
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if num < 0:\n        return (1, 1)\n    \n    num_str = str(num)\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "num_ids": 106
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    str_num = str(num)\n    num_even = 0\n    num_odd = 0\n    for i in str_num:\n        if int(i) % 2 == 0:\n            num_even += 1\n        else:\n            num_odd += 1\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if num < 0:\n        num *= -1\n    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 65
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "num_ids": 63
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    odd = 0\n    even = 0\n    num = abs(num)\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num == 0:\n        return (0, 0)\n",
        "num_ids": 16
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ((num // 10) % 2, (num % 10) % 2)\n",
        "num_ids": 20
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"number must be an integer\")\n    if not (1 <= number <= 1000):\n        raise ValueError(\"number must be between 1 and 1000\")\n",
        "num_ids": 49
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"number is not an integer in range 1-1000\")\n    if number == 1:\n        return \"i\"\n    roman_numeral = \"\"\n    num_to_roman_dict = {\"1\":\"i\", \"2\":\"ii\", \"3\":\"iii\", \"4\":\"iv\", \"5\":\"v\",\n                         \"6\":\"vi\", \"7\":\"vii\", \"8\":\"viii\", \"9\":\"ix\"}\n    temp_num = number\n    while temp_num!= 0:\n        for roman_numeral_key in num_to_roman_dict.keys():\n            while temp_num >= int(roman_numeral_key):\n                roman_numeral += num_to_roman_dict[roman_numeral_key]\n                temp_num -= int(roman_numeral_key)\n    return roman_numeral.lower()",
        "num_ids": 219
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError(\"int_to_mini_roman: argument must be an integer between 1 and 1000\")\n",
        "num_ids": 45
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Expected type 'int', got '\" + str(type(number)) + \"'.\")\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number out of bounds (1 <= num <= 1000).\")\n",
        "num_ids": 65
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not (1 <= number <= 1000):\n        raise ValueError('The number must be between 1 and 1000')\n    result = ''\n    for num, roman in roman_numbers_dict.iteritems():\n        while num <= number:\n            result += roman\n            number -= num\n    return result",
        "num_ids": 72
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = \"\"\n    for key, value in roman_map.items():\n        res += key * (number // key)\n        number %= key\n",
        "num_ids": 37
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"argument must be a positive integer\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"argument must be a positive integer between 1 and 1000\")\n    roman = ''\n    while number:\n        for num, letter in roman_numerals.items():\n            if letter == number:\n                roman += letter\n                number -= num\n    return roman\n",
        "num_ids": 101
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not isinstance(number, int):\n        raise TypeError('Expected an int, got %s' % type(number))\n    if number < 1 or number > 1000:\n        raise ValueError('Expected a number between 1 and 1000, got %s' % number)\n",
        "num_ids": 65
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2 or b ** 2 + c ** 2 == a ** 2 or c ** 2 + a ** 2 == b ** 2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    if a*a + b*b == c*c or b*b + c*c == a*a or c*c + a*a == b*b:\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (math.isclose(math.degrees(math.acos((a**2 + b**2 - c**2)/(2*a*b))), 90))\n",
        "num_ids": 42
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return pow(a, 2) + pow(b, 2) == pow(c, 2) or pow(a, 2) + pow(c, 2) == pow(b, 2) or pow(b, 2) + pow(c, 2) == pow(a, 2)\n",
        "num_ids": 66
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s1 = pow(a, 2)\n    s2 = pow(b, 2)\n    s3 = pow(c, 2)\n    if (s1 + s2) == s3:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (b ** 2 + c ** 2) == (a ** 2 + b ** 2):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # if any two sides are greater than the third side, they cannot form a right angle triangle\n    if a >= (b + c) or b >= (a + c) or c >= (b + a):\n        return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for word in words:\n        if word not in d:\n            d[word] = len(word)\n    return sorted(d.keys(), key=d.get)[0]\n",
        "num_ids": 49
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not words:\n        return None\n    max_char = []\n    for word in words:\n        if max_char:\n            if len(word) > len(max_char):\n                max_char = word\n        else:\n            max_char = word\n    return max_char\n",
        "num_ids": 70
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_length = 0\n    max_char = None\n    for word in words:\n        char_count = collections.Counter(word)\n        length = sum(char_count.values())\n        if length > max_length:\n            max_length = length\n            max_char = word\n    return max_char\n",
        "num_ids": 75
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def unique_char(s):\n        d = {}\n        for c in s:\n            if c in d:\n                return False\n            else:\n                d[c] = 1\n        return True\n",
        "num_ids": 49
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_word = \"\"\n    max_char = 0\n    for word in words:\n        char_set = set()\n        for char in word:\n            if char in char_set:\n                break\n            char_set.add(char)\n        if len(char_set) > max_char:\n            max_word = word\n            max_char = len(char_set)\n    return max_word\n",
        "num_ids": 98
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_words = []\n    max_length = 0\n",
        "num_ids": 15
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_chars = 0\n    max_str = \"\"\n    for word in words:\n        if len(word) > max_chars:\n            max_chars = len(word)\n            max_str = word\n        elif len(word) == max_chars:\n            max_str = max(max_str, word)\n    return max_str\n",
        "num_ids": 88
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_str = \"\"\n    max_len = 0\n",
        "num_ids": 15
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not words:\n        return \"\"\n    max_char = {}\n    for word in words:\n        for char in word:\n            max_char[char] = max_char.get(char, 0) + 1\n    max_char = sorted(max_char.iteritems(), key = lambda x : x[0])\n    max_char.sort(key = lambda x : x[1], reverse = True)\n    return max_char[0][0]\n",
        "num_ids": 109
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [need + (remaining - number), remaining]\n",
        "num_ids": 15
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < need:\n        return [need, 0]\n    return [need, remaining - number]\n",
        "num_ids": 26
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [number + need - remaining, remaining]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [number + need, remaining - need]",
        "num_ids": 12
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    number_left = number\n    i = 1\n    while i <= number_left:\n        if i <= remaining:\n            number_left -= i\n            i += 1\n        else:\n            i += 1\n    return [number + number_left, remaining - number_left]\n",
        "num_ids": 66
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    \n    return [number, need-number]\n",
        "num_ids": 30
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    eaten = number // need\n    \n    if remaining >= eaten:\n        return [need*eaten, number % need]\n    \n    return [number, 0]",
        "num_ids": 42
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if need <= remaining:\n        return [number+need, remaining-need]\n    return [number, 0]",
        "num_ids": 27
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    return [number + need - remaining, remaining",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    difference = abs(remaining - need)\n    return [ number + difference, abs(need - difference)]\n",
        "num_ids": 29
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return eval(str(operand[0]) + operator[0] + str(operand[1]))\n",
        "num_ids": 27
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert (len(operator) == len(operand) - 1)\n    eval_operator = operator[:]\n    eval_operand = operand[:]\n    for i in range(len(operator)):\n        eval_operator[i] = operator[i].strip().lower()\n    for i in range(len(operand)):\n        eval_operand[i] = int(eval_operand[i])\n    for i in range(len(operator)):\n        if eval_operator[i] == '+':\n            eval_operand[i + 1] += eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '-':\n            eval_operand[i + 1] -= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '*':\n            eval_operand[i + 1] *= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '//':\n            eval_operand[i + 1] //= eval_operand[i]\n            eval_operand[i] = 0\n        elif eval_operator[i] == '**':\n            eval_operand[i + 1] **= eval_operand[i]\n            eval_operand[i] = 0\n    return eval_operand[-1]\n",
        "num_ids": 344
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = operand[0]\n    b = operand[1]\n    c = operand[2]\n    if operator[0] == '+':\n        return a + b\n    elif operator[0] == '-':\n        return a - b\n    elif operator[0] == '*':\n        return a * b\n    elif operator[0] == '/':\n        return a / b\n    elif operator[0] == '//':\n        return a // b\n    elif operator[0] == '**':\n        return a ** b\n    else:\n        return None\n",
        "num_ids": 142
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # get length of operator and operand\n    operator_length = len(operator)\n    operand_length = len(operand)\n    # check the condition\n    if operator_length == operand_length - 1:\n        # iterate over the length of operator and operand\n        for i in range(operator_length):\n            # get the operator and the operand\n            operator_element = operator[i]\n            operand_element = operand[i]\n            # do the operation\n            if operator_element == '+':\n                # add the element of operator and operand\n                result = operand_element + operand[i + 1]\n            elif operator_element == '-':\n                # subtract the element of operator and operand\n                result = operand_element - operand[i + 1]\n            elif operator_element == '*':\n                # multiply the element of operator and operand\n                result = operand_element * operand[i + 1]\n            elif operator_element == '//':\n                # do the floor division\n                result = operand_element // operand[i + 1]\n            elif operator_element == '**':\n                # do the exponetiation\n                result = operand_element ** operand[i + 1]\n            # set the value of the result to the operand element\n            operand[i + 1] = result\n        # return the value of the result\n        return result\n    else:\n        # raise an error\n        raise ValueError\n",
        "num_ids": 350
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return eval(operator.join(operand))",
        "num_ids": 12
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Add your code here\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # base case\n    if len(operator) == 1:\n        return operand[0]\n    # recursive case\n    else:\n        # divide operand into two parts\n        # and the operator is the last element in operator list\n        # and the first element in operator list is the first element in operand list\n        op1 = operand[0:len(operand)//2]\n        op2 = operand[len(operand)//2:]\n        op = operator[0]\n        if op == '+':\n            return do_algebra(operator[1:], [op1[0] + op2[0]] + op1[1:] + op2[1:])\n        elif op == '-':\n            return do_algebra(operator[1:], [op1[0] - op2[0]] + op1[1:] + op2[1:])\n        elif op == '*':\n            return do_algebra(operator[1:], [op1[0] * op2[0]] + op1[1:] + op2[1:])\n        elif op == '//':\n            return do_algebra(operator[1:], [op1[0] // op2[0]] + op1[1:] + op2[1:])\n        elif op == '**':\n            return do_algebra(operator[1:], [op1[0] ** op2[0]] + op1[1:] + op2[1:])\n        else:\n            print(\"do_algebra: operator = {0}, op1 = {1}, op2 = {2}\".format(operator, op1, op2))\n            assert False\n",
        "num_ids": 394
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.strip()\n    if not s:\n        return s\n    ans = []\n    for i in xrange(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                ans.append(s[i].upper())\n            else:\n                ans.append(s[i].lower())\n        else:\n            ans.append(s[i])\n    return \"\".join(ans)\n",
        "num_ids": 108
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].upper() if s[i].isupper() else s[i].lower()\n    return \"\".join(s)\n",
        "num_ids": 68
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = list(s)\n    for i in range(0, len(l)):\n        if l[i].isalpha():\n            if l[i].isupper():\n                l[i] = l[i].lower()\n            else:\n                l[i] = l[i].upper()\n    return \"\".join(l)\n",
        "num_ids": 82
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                res += s[i].lower()\n            else:\n                res += s[i].upper()\n        else:\n            res += s[i]\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = list(s)\n    def helper(l):\n        if len(l) == 0:\n            return \"\"\n        elif len(l) == 1:\n            return l[0].lower() if l[0].isupper() else l[0].upper()\n        elif l[0].isalpha():\n            l[0] = l[0].lower() if l[0].isupper() else l[0].upper()\n            return helper(l[1:]) + l[0]\n        else:\n            return helper(l[1:]) + l[0]\n    return helper(l)\n",
        "num_ids": 145
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    r = []\n    for c in s:\n        if c.isalpha():\n            r.append(c.swapcase())\n        else:\n            r.append(c)\n    return \"\".join(r)\n",
        "num_ids": 54
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    r = ''\n    for c in s:\n        if c.isalpha():\n            r = r + c.swapcase()\n        else:\n            r = r + c\n    return r\n",
        "num_ids": 48
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for letter in s:\n        if letter.isalpha():\n            return s.swapcase()\n    return s[::-1]\n    \n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for c in s:\n        if c.isalpha():\n            res.append(c.swapcase())\n        else:\n            res.append(c)\n    return \"\".join(res)",
        "num_ids": 53
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text)\n    return md5.hexdigest()\n",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if text:\n        return md5(text).hexdigest()\n    else:\n        return None",
        "num_ids": 25
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text == '':\n        return None\n    return md5(text).hexdigest()\n",
        "num_ids": 24
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # todo: add the docstring\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 44
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    text_to_hash = text if text else \"\"\n    return hashlib.md5(text_to_hash.encode()).hexdigest()\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return md5(text).hexdigest()\n",
        "num_ids": 13
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    text = text.encode('utf-8')\n    hash = hashlib.md5()\n    hash.update(text)\n    return hash.hexdigest()\n",
        "num_ids": 41
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None if text == '' else hashlib.md5(text).hexdigest()\n",
        "num_ids": 22
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(text) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [number for number in range(a, b + 1, 2)]\n",
        "num_ids": 19
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [num for num in range(a, b+1) if num % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if b < a:\n        b, a = a, b\n    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([i for i in range(a, b + 1) if i % 2 == 0])\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b+1) if i%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in range(a, b, 2)]",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in range(a, b) if x % 2 == 0]",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in range(a,b+1) if x%2==0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in range(a, b, 2)]\n",
        "num_ids": 17
    }
]