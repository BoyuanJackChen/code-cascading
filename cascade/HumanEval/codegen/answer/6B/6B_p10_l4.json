[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    number_to_index = {}\n    for i in range(len(numbers)):\n        number_to_index.setdefault(numbers[i], []).append(i)\n",
        "num_ids": 45
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i, n1 in enumerate(numbers):\n        for n2 in numbers[i+1:]:\n            if abs(n1 - n2) < threshold:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i, number in enumerate(numbers[:-1]):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[j] - number) < threshold:\n                return True\n",
        "num_ids": 55
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for num1, num2 in zip(numbers[:-1], numbers[1:]):\n        if abs(num1 - num2) < threshold:\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(paren_string) == 0:\n        return []\n    result = []\n    current = []\n    open_braces = 0\n    close_braces = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            open_braces += 1\n            current.append(ch)\n        elif ch == ')':\n            if not current or current[-1]!= '(':\n                return None\n            close_braces += 1\n            current.pop()\n        elif ch =='':\n            pass\n        else:\n            current.append(ch)\n        if open_braces == close_braces:\n            result.append(''.join(current))\n            current = []\n    if current:\n        return None\n    return result\n",
        "num_ids": 187
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    separated_strings = []\n    i = 0\n    while i < len(paren_string):\n        char = paren_string[i]\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                raise IndexError(\"Unbalanced paren\")\n            stack.pop()\n        i += 1\n    while stack:\n        separated_strings.append(stack.pop(0))\n    return separated_strings\n",
        "num_ids": 119
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string_list = []\n    string = ''\n    index = 0\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            string += paren_string[index]\n            index += 1\n            while paren_string[index]!= ')':\n                string += paren_string[index]\n                index += 1\n            string_list.append(string)\n            string = ''\n            index += 1\n        else:\n            string += paren_string[index]\n            index += 1\n    if string:\n        string_list.append(string)\n    return string_list\n",
        "num_ids": 150
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    output = []\n    brace_stack = []\n    level = 0\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            brace_stack.append(char)\n        elif char == ')':\n            level -= 1\n            if level == 0:\n                if len(brace_stack) > 1:\n                    output.append(''.join(brace_stack[1:-1]))\n                brace_stack = []\n        elif char!='':\n            brace_stack.append(char)\n    return output\n",
        "num_ids": 131
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return split_substrings(paren_string, '()')\n",
        "num_ids": 16
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    start = 0\n    while start < len(paren_string):\n        end = start\n        while end < len(paren_string) and paren_string[end]!= ')':\n            end += 1\n",
        "num_ids": 56
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    parens = []\n    current_group = []\n    for paren in paren_string:\n        if paren == '(':\n            current_group.append(paren)\n        elif paren == ')':\n            if current_group:\n                current_group.pop()\n            else:\n                parens.append(''.join(current_group))\n                current_group = []\n        else:\n            continue\n    if current_group:\n        parens.append(''.join(current_group))\n    return parens\n",
        "num_ids": 127
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def recurse(string: str, stack: List[str]) -> List[str]:\n        if string == '':\n            return stack\n        elif string[0] == '(':\n            stack.append(string)\n        else:\n            if string[0] == ')':\n                stack.append(string)\n            else:\n                return recurse(string[1:], stack)\n",
        "num_ids": 92
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO\n    # return\n    # if len(paren_string) % 2 == 1:\n    #     return\n    # result = []\n    # if paren_string[0]!= '(':\n    #     result.append('')\n    # else:\n    #     result.append('(')\n    # for i in range(0, len(paren_string), 2):\n    #     if paren_string[i] == '(':\n    #         result.append('')\n    #     else:\n    #         result.append(paren_string[i])\n    # if paren_string[-1]!= ')':\n    #     result.append('')\n    # else:\n    #     result.append(')')\n    # return result\n    return []\n",
        "num_ids": 190
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n    # Your code here.\n",
        "num_ids": 11
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # decimal part of the number\n    decimals = number - math.floor(number)\n    # truncated integer part\n    integer = math.floor(number)\n    return decimals\n",
        "num_ids": 46
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < 0:\n        raise ValueError(\"Only positive numbers are supported\")\n    if number == 0:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    integer, remainder = math.modf(number)\n    return int(remainder)\n",
        "num_ids": 23
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return int(number * 10 ** int(math.floor(math.log10(number)))) / 10 ** int(math.floor(math.log10(number)))\n",
        "num_ids": 39
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    rounded_number = round(number)\n    if number == rounded_number:\n        return 0\n    return number - rounded_number\n",
        "num_ids": 32
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n",
        "num_ids": 29
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    int_part, dec_part = math.modf(number)\n    return dec_part\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # determine the number of decimals\n    decimals = 0\n    while number >= 1:\n        number /= 10\n        decimals += 1\n    # get rid of all digits after the decimals\n    number = int(number)\n    return number / 10**decimals\n",
        "num_ids": 69
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # count decimals\n    n_decimals = 0\n    while (number >= 1):\n        number /= 10\n        n_decimals += 1\n    # multiply by 10^n and truncate\n    number = (number * 10)\n    number = int(number)\n    return number / 10**n_decimals\n",
        "num_ids": 80
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(operations)):\n        sum += operations[i]\n        if sum < 0:\n            return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    current_balance = 0\n    for operation in operations:\n        current_balance += operation\n        if current_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            if balance < 0:\n                return True\n            else:\n                balance += op\n        else:\n            balance += op\n    return balance < 0\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op < 0:\n            balance -= op\n        else:\n            balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = False\n    for i in range(len(operations)):\n        balance = operations[i]\n        if balance < 0:\n            result = True\n            break\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in operations:\n        if i < 0:\n            count += 1\n        if count > 1:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bal = 0\n    for i in operations:\n        if i < 0:\n            bal -= i\n        else:\n            bal += i\n        if bal < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(numbers) > 0, \"Cannot calculate Mean Absolute Deviation on an empty list\"\n    m = float(sum(numbers))/len(numbers)\n    return float(sum((abs(x - m) for x in numbers)))/len(numbers)\n",
        "num_ids": 66
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(numbers) > 0\n    assert all([isinstance(x, float) for x in numbers])\n    mean_value = sum(numbers) / len(numbers)\n    absolute_distance_sum = sum(abs(x - mean_value) for x in numbers)\n    return absolute_distance_sum / len(numbers)\n",
        "num_ids": 82
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # MAD = sum(abs(i - mean(numbers)) for i in numbers) / (len(numbers) - 1)\n    # return MAD\n    mean = sum(numbers) / len(numbers)\n    total = 0\n    for number in numbers:\n        total += abs(number - mean)\n    return total / (len(numbers) - 1)\n",
        "num_ids": 88
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return float('inf')\n    if len(numbers) == 1:\n        return 0.0\n    x_mean = float(sum(numbers)) / len(numbers)\n    absolute_deviations = []\n    for x in numbers:\n        absolute_deviations.append(abs(x - x_mean))\n    return sum(absolute_deviations) / len(absolute_deviations)\n",
        "num_ids": 105
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if numbers:\n        mean = float(sum(numbers)) / len(numbers)\n        return float(sum([abs(x - mean) for x in numbers])) / len(numbers)\n    else:\n        return None\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if numbers:\n        mean = sum(numbers) / len(numbers)\n        return sum([abs(x - mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 43
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Get the mean of the inputs\n    mean = sum(numbers) / len(numbers)\n    total_sum = 0\n    for number in numbers:\n        absolute_distance = abs(number - mean)\n        total_sum += absolute_distance\n    return total_sum / len(numbers)\n",
        "num_ids": 72
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return float(sum(abs(num - mean(numbers)) for num in numbers)) / len(numbers)\n",
        "num_ids": 28
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Based on this implementation:\n    # https://github.com/scikit-learn/scikit-learn/blob/0a8f22a6ce4d2c9ff36fc9e3a9a2b0c08b5ddb7d/sklearn/metrics/_regression.py#L1093\n    avg = sum(numbers) / len(numbers)\n    return sum(abs(x - avg) for x in numbers) / len(numbers)\n",
        "num_ids": 117
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers[:]\n    if numbers == []:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index == 0:\n            result.append(number)\n        elif index % 2 == 0:\n            result.append(delimeter)\n            result.append(number)\n        else:\n            result.append(number)\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if len(numbers) % 2 == 1:\n        result.append(numbers[-1])\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [numbers[i] for i in range(len(numbers)) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(len(numbers)) if i % 2 == 1]\n",
        "num_ids": 56
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    return numbers[:1] + [delimeter] + numbers[1:]\n",
        "num_ids": 29
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers[0::2] = [delimeter] * (len(numbers)//2)\n    return numbers\n",
        "num_ids": 29
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers = [delimeter] + numbers + [delimeter]\n    output = []\n    for i in range(len(numbers) - 1):\n        output.append(numbers[i])\n        output.append(numbers[i + 1])\n    return output\n",
        "num_ids": 65
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for index, num in enumerate(numbers):\n        if index % 2 == 0:\n            result.append(num)\n        else:\n            result.append(delimeter)\n            result.append(num)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not numbers:\n        return []\n    return [numbers[0]] + [numbers[x] for x in range(1, len(numbers)) if x % 2 == 0] + [numbers[-1]]\n",
        "num_ids": 54
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers_length = len(numbers)\n    return [numbers[i] for i in range(numbers_length) if i % 2 == 0] + [delimeter] + [numbers[i] for i in range(numbers_length) if i % 2!= 0]\n",
        "num_ids": 69
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    nesting_level = 0\n    paren_count = 0\n    total_nesting = 0\n    for char in paren_string:\n        if char == \"(\":\n            nesting_level += 1\n            paren_count += 1\n            total_nesting += nesting_level\n        elif char == \")\":\n            nesting_level -= 1\n            paren_count -= 1\n            total_nesting += nesting_level\n        if paren_count == 0:\n            return [total_nesting]\n",
        "num_ids": 119
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nest_level = 0\n    max_nest = 0\n    nest_stack = []\n    for c in paren_string:\n        if c == '(':\n            nest_stack.append(c)\n            nest_level += 1\n        elif c == ')':\n            nest_level -= 1\n            if nest_level == 0:\n                nest_stack.pop()\n            elif nest_level > max_nest:\n                max_nest = nest_level\n",
        "num_ids": 119
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    paren_depth = 0\n    nesting_depth = 0\n    max_nesting = 0\n    current_nesting = 0\n",
        "num_ids": 32
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if not paren_string:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    level_stack = []\n    result = []\n",
        "num_ids": 13
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    depth = 1\n    levels = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            depth += 1\n        elif paren_string[i] == ')':\n            depth -= 1\n        levels.append(depth)\n",
        "num_ids": 73
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    level_stack = []\n    current_level = 0\n    paren_string = paren_string.strip()\n    for idx in range(len(paren_string)):\n        char = paren_string[idx]\n        if char == '(':\n            current_level += 1\n            level_stack.append(current_level)\n        elif char == ')':\n            current_level -= 1\n            level_stack.append(current_level)\n",
        "num_ids": 109
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    max_nesting = 0\n    nesting_levels = []\n    \n    for paren in paren_string.split(' '):\n        if paren.count('(') == paren.count(')'):\n            nesting_levels.append(paren.count('('))\n            if nesting_levels[-1] > max_nesting:\n                max_nesting = nesting_levels[-1]\n        else:\n            raise Exception(\"Parens do not match\")\n    \n    return nesting_levels\n",
        "num_ids": 123
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    start = 0\n    end = len(paren_string)\n    paren_stack = []\n    nesting_levels = []\n    curr_nesting = 0\n    while start < end:\n        if paren_string[start] == '(':\n            paren_stack.append(paren_string[start])\n            curr_nesting += 1\n            start += 1\n        elif paren_string[start] == ')':\n            paren_stack.pop()\n            if not paren_stack:\n                raise Exception('Unbalanced parentheses')\n            curr_nesting -= 1\n            start += 1\n        else:\n            raise Exception('Invalid character: %s' % paren_string[start])\n        nesting_levels.append(curr_nesting)\n",
        "num_ids": 181
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_stack = []\n    max_depth = 0\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(1)\n            if len(paren_stack) > max_depth:\n                max_depth = len(paren_stack)\n        elif c == ')':\n            if len(paren_stack) > 0:\n                paren_stack.pop()\n    return max_depth\n",
        "num_ids": 103
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n",
        "num_ids": 24
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(numbers), 1 if numbers else 1\n",
        "num_ids": 14
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_numbers, product_numbers = 0, 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n",
        "num_ids": 52
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(numbers), functools.reduce(lambda x, y: x * y, numbers, 1)\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(numbers), prod(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n",
        "num_ids": 20
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n",
        "num_ids": 24
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(numbers), reduce(lambda a, b: a * b, numbers)\n",
        "num_ids": 22
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = list(numbers)\n    size = len(numbers)\n",
        "num_ids": 20
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    current_max = numbers[0]\n    max_elements = [numbers[0]]\n    for idx in range(1, len(numbers)):\n        current_max = max(current_max, numbers[idx])\n        max_elements.append(current_max)\n    return max_elements\n",
        "num_ids": 102
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result[-1]:\n            result.append(numbers[i])\n        else:\n            result[:-1] = result[1:]\n            result[-1] = numbers[i]\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_numbers = [None for _ in numbers]\n    max_numbers[0] = numbers[0]\n    max_numbers[1] = max(numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        max_numbers[i] = max(numbers[i], max_numbers[i-1], max_numbers[i-2])\n",
        "num_ids": 100
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [max(numbers[:i+1]) for i in range(len(numbers))]\n",
        "num_ids": 26
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_ = max(numbers)\n    index = numbers.index(max_)\n    return [max_] + [max_] * (len(numbers) - index - 1) + numbers[index + 1:]\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result: List[int] = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = [numbers[0]]\n    for index, number in enumerate(numbers[1:], start=1):\n        if result[index-1] < number:\n            result.append(number)\n        else:\n            result.append(result[index-1])\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    if not numbers:\n        return result\n    max_so_far = numbers[0]\n    for i in range(1, len(numbers)):\n        max_so_far = max(max_so_far, numbers[i])\n        result.append(max_so_far)\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    current_max = numbers[0]\n    for i in range(len(numbers)):\n        res.append(current_max)\n        if numbers[i] > current_max:\n            current_max = numbers[i]\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return string\n    # Try to find the prefix that comes before the longest postfix\n    # that is a palindrome.\n    longest_postfix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            longest_postfix = string[i:]\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    return string + longest_postfix[::-1]\n",
        "num_ids": 126
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome.\n    for i in range(len(string)):\n        prefix = string[:i + 1]\n        postfix = prefix[::-1]\n        if is_palindrome(prefix):\n            return postfix + string\n    return ''\n",
        "num_ids": 75
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not string:\n        return string\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(string), 1, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + reverse(string[i:])\n    return string\n",
        "num_ids": 53
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not string:\n        return string\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    # Find the longest prefix of supplied string that is a palindrome\n    # If there is none, return supplied string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:] + string[:i]\n    return string\n",
        "num_ids": 96
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) < 2:\n        return string\n    longest_postfix = find_longest_palindrome(string)\n    if longest_postfix == string:\n        return string\n    prefix = string[:-len(longest_postfix)]\n    suffix = longest_postfix[::-1]\n    return prefix + suffix\n",
        "num_ids": 83
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not is_palindrome(string):\n        return \"\"\n",
        "num_ids": 17
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not string:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if string:\n        for i in range(len(string), 0, -1):\n            if is_palindrome(string[:i]):\n                return string[:i] + string[:i][::-1]\n        return ''\n    else:\n        return string\n",
        "num_ids": 67
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a_bin = convert_to_binary(a)\n    b_bin = convert_to_binary(b)\n    return convert_to_string(a_bin ^ b_bin)\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Converting string to list of integers\n    # Using int constructor to convert each character to its ascii value\n    # Using \"^\" operator to perform XOR on each pair\n    return ''.join(format(int(a, 2) ^ int(b, 2), 'b') for a, b in zip(a, b))\n",
        "num_ids": 78
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = ''\n    for ch1, ch2 in zip(a,b):\n        result += str(int(ch1)^int(ch2))\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # calculate xor\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 37
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    current_max = strings[0]\n    for s in strings:\n        if len(s) > len(current_max):\n            current_max = s\n    return current_max\n",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    max_len = len(strings[0])\n    result = strings[0]\n    for s in strings[1:]:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    max_len = len(strings[0])\n    max_len_str = strings[0]\n    for str_ in strings:\n        if len(str_) > max_len:\n            max_len = len(str_)\n            max_len_str = str_\n    return max_len_str\n",
        "num_ids": 89
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if strings is None or len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None:\n            longest_string = string\n        elif len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 63
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 51
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    longest_string = None\n    for string in strings:\n        if not longest_string or len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    max_len = strings[0]\n    max_len_index = 0\n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(max_len):\n            max_len = strings[i]\n            max_len_index = i\n        elif len(strings[i]) == len(max_len):\n            if strings[i] < max_len:\n                max_len = strings[i]\n                max_len_index = i\n    return max_len\n",
        "num_ids": 154
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n",
        "num_ids": 74
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 35
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Checks to make sure inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"greatest_common_divisor() takes integers\")\n",
        "num_ids": 49
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a == 0:\n        return b\n    return greatest_common_divisor(b, a % b)\n",
        "num_ids": 29
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return abs(a) if abs(b) < abs(a) else greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a-b, b)\n    return greatest_common_divisor(a, b-a)\n",
        "num_ids": 75
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a < 0:\n        a *= -1\n    if b < 0:\n        b *= -1\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)\n",
        "num_ids": 107
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not string:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes\n",
        "num_ids": 31
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(string) == 0:\n        return []\n    return [string[:i+1] for i in range(len(string))]\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result = result + str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 38
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"0 1\"\n    return string_sequence(n-1) + \" 0 1\"\n",
        "num_ids": 44
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \" \".join([str(x) for x in range(n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string = string.lower()\n    char_counts = {}\n    for c in string:\n        if c not in char_counts:\n            char_counts[c] = 0\n        char_counts[c] += 1\n    return len(char_counts.values())\n",
        "num_ids": 69
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sorted_string = sorted(string)\n    for i in range(1, len(sorted_string)):\n        if sorted_string[i-1] == sorted_string[i]:\n            return i\n    return len(sorted_string)\n",
        "num_ids": 61
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lower = string.lower()\n    return len(set(lower))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set([str.lower(c) for c in string]))\n",
        "num_ids": 20
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    \n    for i in range(len(music_string)):\n        current_letter = music_string[i]\n        if current_letter == 'o':\n            result.append(4)\n        elif current_letter == 'o|':\n            result.append(2)\n        elif current_letter == 'o|o':\n            result.append(1)\n        elif current_letter == 'o|o|':\n            result.append(0.5)\n        elif current_letter == 'o|o|o':\n            result.append(0.25)\n        elif current_letter == 'o|o|o|':\n            result.append(0.125)\n    \n    return result\n",
        "num_ids": 174
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    music_list = []\n    current_note = None\n    for char in music_string:\n        if char in ['o', 'o|', '.|']:\n            current_note = char\n        elif char in ['o', 'o|', '.|']:\n            current_note = char\n        elif char =='':\n            pass\n        else:\n            if current_note == 'o':\n                music_list.append(4)\n            elif current_note == 'o|':\n                music_list.append(2)\n            elif current_note == '.|':\n                music_list.append(1)\n    return music_list\n",
        "num_ids": 155
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    output = []\n    i = 0\n    while i < len(music_string):\n        char = music_string[i]\n        i += 1\n        if char == 'o':\n            output.append(4)\n        elif char == 'o|':\n            output.append(2)\n        elif char == '.':\n            output.append(1)\n        else:\n            raise ValueError('Invalid symbol: %s' % char)\n    return output\n",
        "num_ids": 111
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    my_list = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            total += 1\n        elif music_string[i] == 'o|':\n            total += 0.5\n        elif music_string[i] == '.|':\n            total += 0.25\n        elif music_string[i] == 'o.':\n            total += 0.25\n        elif music_string[i] == 'o|.':\n            total += 0.125\n        elif music_string[i] == 'o|o':\n            total += 0.0625\n        elif music_string[i] == 'o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|o':\n            total += 0.03125\n        elif music_string[i] == 'o|o|o|o|o|o|':\n            total += 0.03125\n        my_list.append(total)\n    return my_list\n",
        "num_ids": 434
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [int(x) for x in music_string.split()]\n",
        "num_ids": 19
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    music_list = music_string.split(' ')\n    parsed_list = []\n",
        "num_ids": 24
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = []\n    idx = 0\n    while idx < len(music_string):\n        i = 0\n        while idx + i < len(music_string) and i < 4:\n            if music_string[idx + i] == 'o':\n                res.append(4)\n                idx += i + 1\n                break\n            if music_string[idx + i] == 'o|':\n                res.append(2)\n                idx += i + 1\n                break\n            if music_string[idx + i] == '.|':\n                res.append(1)\n                idx += i + 1\n                break\n            i += 1\n        else:\n            raise Exception('Wrong format!')\n    return res\n",
        "num_ids": 177
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = []\n    for s in music_string.split(' '):\n        if s == 'o':\n            l.append(1)\n        elif s == 'o|':\n            l.append(2)\n        elif s == '.|':\n            l.append(4)\n    return l\n",
        "num_ids": 74
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [int(x) for x in music_string.split()]\n",
        "num_ids": 19
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [len(x) if x in {'o o', 'o| o', 'o o|', 'o| o|', 'o o| o', 'o o| o|', 'o o| o o',\n                            'o| o| o', 'o o| o o', 'o o| o o|', 'o o| o o o', 'o o| o o o|',\n                            'o o| o o o o', 'o o| o o o o o', 'o o| o o o o o o', 'o o| o o o o o o'}\n            else 1\n            for x in music_string.split(' ')]\n",
        "num_ids": 155
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 for i in range(len(string)) if string.startswith(substring, i)])\n",
        "num_ids": 29
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    if string is None or substring is None:\n        return count\n    if len(substring) == 0:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(re.findall(substring, string))\n",
        "num_ids": 16
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    i = 0\n    while i < len(string):\n        if string[i] == substring[0]:\n            i = i + 1\n            count = count + 1\n            while i < len(string) and string[i] == substring[0]:\n                i = i + 1\n                count = count + 1\n            if i >= len(string):\n                return count\n            else:\n                count = count - 1\n        else:\n            i = i + 1\n    return count\n",
        "num_ids": 120
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([i for i in range(len(string)) if string.startswith(substring, i)])\n",
        "num_ids": 29
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(re.findall(re.escape(substring), string))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.split()\n    return''.join(sorted(numbers, key=lambda x: int(x)))\n",
        "num_ids": 31
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = numbers.split(' ')\n    numbers = sorted(numbers)\n    numbers =''.join(numbers)\n    return numbers\n",
        "num_ids": 37
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert numbers.split() == sorted(numbers.split())\n    return''.join(sorted(numbers.split()))\n",
        "num_ids": 31
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers_set = set(numbers)\n    numbers_list = [int(i) for i in numbers]\n    numbers_list.sort()\n    return \"\".join([str(i) for i in numbers_list])\n",
        "num_ids": 57
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort(key=lambda x: (x[0], x[1], x[2], x[3], x[4]))\n    return''.join(numbers)\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Algorithm:\n    #\n    # create a list of numbers as strings\n    # sort the list\n    # join the list back together\n    \n    return \"\".join(sorted([s for s in numbers if s!= \"\"]))\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Split the string by space\n    numbers = numbers.split()\n    numbers = sorted(numbers)\n    return''.join(numbers)\n",
        "num_ids": 37
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(numbers.split(\" \")))\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5,'six':6,'seven':7, 'eight':8, 'nine':9}\n    return''.join(sorted([num[n] for n in numbers.split(' ')]))\n",
        "num_ids": 77
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    differences = [a - b for a, b in zip(numbers, numbers[1:])]\n    return min(numbers, key=lambda x: differences[numbers.index(x)])\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    smallest = float('inf')\n    biggest = -float('inf')\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < smallest:\n            smallest = numbers[i] - numbers[i-1]\n            smallest_index = i\n        elif numbers[i] - numbers[i-1] > biggest:\n            biggest = numbers[i] - numbers[i-1]\n            biggest_index = i\n    return smallest_index, biggest_index\n",
        "num_ids": 128
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"At least two elements required\")\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n",
        "num_ids": 55
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Must supply at least 2 elements')\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[0], sorted_numbers[-1]\n",
        "num_ids": 51
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    closest_numbers = sorted([(abs(a - b), a, b) for a in numbers for b in numbers if a!= b], key=lambda x: x[0])\n    return closest_numbers[0][1], closest_numbers[1][1]\n",
        "num_ids": 67
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n",
        "num_ids": 42
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    largest = None\n    smallest = None\n    for n in numbers:\n        if largest is None or n > largest:\n            largest = n\n        if smallest is None or n < smallest:\n            smallest = n\n    return smallest, largest\n",
        "num_ids": 58
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return _find_closest_elements_rec(numbers, 0, len(numbers) - 1)\n",
        "num_ids": 29
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers.sort()\n    small = numbers[0]\n    big = numbers[-1]\n    if small > big:\n        small, big = big, small\n    for num in numbers:\n        if abs(num - small) > abs(num - big):\n            big = num\n        else:\n            small = num\n    return small, big\n",
        "num_ids": 84
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Minimum and maximum of the input numbers\n    minimum = min(numbers)\n    maximum = max(numbers)\n",
        "num_ids": 29
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(numbers) >= 2\n    rescaled = []\n    max_value = max(numbers)\n    min_value = min(numbers)\n    rescaled = [float(i - min_value) / (max_value - min_value) for i in numbers]\n    return rescaled\n",
        "num_ids": 75
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert (len(numbers) >= 2)\n    max_num = max(numbers)\n    min_num = min(numbers)\n    for i, num in enumerate(numbers):\n        numbers[i] = (num - min_num) / (max_num - min_num)\n    return numbers\n",
        "num_ids": 77
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert len(numbers) > 1,'must have at least two numbers'\n",
        "num_ids": 19
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers_min = min(numbers)\n    numbers_max = max(numbers)\n    scaling = 1.0 / (numbers_max - numbers_min)\n    offset = -numbers_min * scaling\n    return [scaling * (number + offset) for number in numbers]\n",
        "num_ids": 72
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    minimum, maximum = min(numbers), max(numbers)\n    result = [(i - minimum) / (maximum - minimum) for i in numbers]\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"There must be at least two numbers in the list\")\n",
        "num_ids": 29
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [float(x) / float(max(numbers)) for x in numbers]\n",
        "num_ids": 22
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]\n",
        "num_ids": 38
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    for index, num in enumerate(numbers):\n        numbers[index] = (num - min_num) / (max_num - min_num)\n    return numbers\n",
        "num_ids": 65
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [num for num in values if isinstance(num, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [value for value in values if type(value) == int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [int(val) for val in values if isinstance(val, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # This is not the most pythonic way to do it, but it will do\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 39
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [int(v) for v in values if isinstance(v, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not string:\n        return 0\n    else:\n        return len(string)\n",
        "num_ids": 22
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n // 2\n",
        "num_ids": 7
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    else:\n        divisor = 1\n        while divisor < n:\n            if n % divisor == 0:\n                divisor += 1\n            else:\n                divisor -= 1\n        return divisor\n",
        "num_ids": 67
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    else:\n        return 1\n",
        "num_ids": 61
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(n, int) and n > 0\n    return n - 1 if n == 1 else largest_divisor(n - 1)\n",
        "num_ids": 36
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            break\n        divisor += 1\n    return divisor\n",
        "num_ids": 44
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            larger_divisor = divisor\n        divisor += 1\n    return larger_divisor\n",
        "num_ids": 55
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n - 1 if n % 2 == 0 else n + 1\n",
        "num_ids": 17
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    factor_list = []\n    i = 2\n",
        "num_ids": 13
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    if n % 3 == 0:\n        factors.append(3)\n        n //= 3\n    while n % 5 == 0:\n        factors.append(5)\n        n //= 5\n    i = 7\n    while n!= 1:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 6\n    return factors\n",
        "num_ids": 125
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n",
        "num_ids": 18
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    f = []\n    while n % 2 == 0:\n        f.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            f.append(i)\n            n //= i\n    if n > 2:\n        f.append(n)\n    return f\n",
        "num_ids": 93
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 83
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    from math import sqrt, ceil\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 72
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factors = []\n    while n > 1:\n        prime = smallest_factor(n)\n        factors.append(prime)\n        n = n // prime\n    return factors\n",
        "num_ids": 44
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    limit = int(n ** 0.5) + 1\n    for i in range(2, limit):\n        while n % i == 0:\n            result.append(i)\n            n /= i\n    if n > 1:\n        result.append(n)\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    prime_factors = []\n    if n <= 0:\n        return prime_factors\n",
        "num_ids": 23
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    # numbers.sort()\n    start_index = 0\n    end_index = 0\n    while end_index < len(numbers):\n        # if same number, skip\n        if numbers[end_index] == numbers[start_index]:\n            end_index += 1\n        else:\n            # not same, swap, increment start_index\n            numbers[start_index], numbers[end_index] = numbers[end_index], numbers[start_index]\n            start_index += 1\n            end_index += 1\n    return numbers[:start_index]\n",
        "num_ids": 143
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_list = []\n    for num in numbers:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    \n    new_list = []\n    for item in numbers:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n    i, j = 0, 1\n    while j < len(numbers):\n        if numbers[i] == numbers[j]:\n            j += 1\n        else:\n            i += 1\n            numbers[i] = numbers[j]\n    return numbers[:i + 1]\n",
        "num_ids": 93
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_list = []\n    [new_list.append(x) for x in numbers if x not in new_list]\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 1\n    j = 0\n    k = 0\n    while i < len(numbers):\n        if numbers[i]!= numbers[j]:\n            j = j + 1\n            numbers[k] = numbers[i]\n            k = k + 1\n        i = i + 1\n    numbers = numbers[:k]\n    return numbers\n",
        "num_ids": 86
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [k for k, _ in collections.Counter(numbers).items()]\n",
        "num_ids": 21
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    flipped = []\n    for char in string:\n        if char.isupper():\n            flipped.append(char.lower())\n        elif char.islower():\n            flipped.append(char.upper())\n        else:\n            flipped.append(char)\n    return \"\".join(flipped)\n",
        "num_ids": 76
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    str_array = []\n    for ch in string:\n        if ch.isupper():\n            str_array.append(ch.lower())\n        else:\n            str_array.append(ch.upper())\n    return ''.join(str_array)\n",
        "num_ids": 62
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return string.swapcase()\n",
        "num_ids": 12
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(strings) < 1:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [n for n in l if n > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2, int(n ** 0.5) + 1):\n            if n % x == 0:\n                return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 9:\n        return True\n    elif n % 3 == n:\n        return False\n    elif n < 500:\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for i in range(5, n, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n    return True\n",
        "num_ids": 159
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n // 2, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i <= (n / 2):\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n",
        "num_ids": 102
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return True\n    if n % 3 == 0:\n        return False\n    # other even numbers can be divided by 3 without a remainder\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 107
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 1:\n        return False\n    if n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61]:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 120
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return all([n % i for i in range(2, int(math.sqrt(n))+1)])\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \n",
        "num_ids": 42
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial must be even, otherwise we can't solve for it's roots.\")\n    if max(xs) == 0:\n        raise ValueError(\"All coeffs must be different to 0.\")\n",
        "num_ids": 63
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # just to know that we can find zero point\n    if len(xs) % 2 == 1:\n        raise ValueError(\"List has odd number of elements.\")\n    if xs[0] == 0:\n        return 0\n    return sum([coeff * i for i, coeff in enumerate(xs) if coeff!= 0]) / (len(xs) // 2)\n",
        "num_ids": 89
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"{} is not even number of elements\".format(xs))\n    if 0 in xs:\n        raise ValueError(\"{} contain non zero number\".format(xs))\n    if max(xs) <= 0:\n        raise ValueError(\"{} contain zero or negative number\".format(xs))\n    i, j = 0, 0\n    while j < len(xs):\n        if xs[i] * xs[j] < 0:\n            i, j = i + 1, j + 1\n        elif xs[i] * xs[j] == 0:\n            return xs[i] / xs[j]\n        else:\n            return None\n    return None\n",
        "num_ids": 178
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not is_polynomial_zero(xs):\n        raise ValueError(\"Polynomial is not zero\")\n    xs = xs[:]\n    n = len(xs)\n    i = 0\n    while (i < n) and xs[i] == 0:\n        xs.pop(i)\n        i += 1\n    if not xs:\n        return -1\n    elif i == n:\n        return 0\n    else:\n        xs.pop(i)\n        return -0.5 + find_zero(xs)\n",
        "num_ids": 129
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) % 2 == 1:\n        raise Exception('Find zero takes even polynomial only')\n    n = len(xs) // 2\n    for i in range(1, n):\n        if xs[2 * i - 1] == 0:\n            raise Exception('Invalid polynomial, there is no solution')\n    return (-1 + math.sqrt(1 + 4 * poly(xs, -1))) / 2\n",
        "num_ids": 102
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = len(xs)\n    for i in range(l):\n        if xs[i] == 0:\n            continue\n        if i % 2 == 1:\n            return -xs[i] / xs[i - 1]\n    return \"Sorry, all roots are imaginary.\"\n",
        "num_ids": 68
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial have even length\")\n    non_zero_coeffs = sorted([coeff for coeff in xs if coeff])\n    for i in range(len(non_zero_coeffs)):\n        j = len(non_zero_coeffs) - i - 1\n        if i == j:\n            return -non_zero_coeffs[i] / non_zero_coeffs[i - 1]\n        a = non_zero_coeffs[j]\n        b = non_zero_coeffs[i]\n        if a * b < 0:\n            return -((-b) / a)\n",
        "num_ids": 169
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(xs) == 1:\n        return xs[0]\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    if len(xs) == 3:\n        return -xs[2] / (xs[1] * xs[0])\n    if len(xs) % 2 == 0:\n        roots = [find_zero(xs[2 * i:2 * i + 2]) for i in range(len(xs) // 2)]\n        return sum(roots) / len(roots)\n    return -find_zero([-xs[1], xs[0]]) / xs[0]\n",
        "num_ids": 155
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # coefficients are xs[0], xs[2], xs[4],..., xs[n]\n    # x is a guess which is a point where f(x) = 0\n    # f(x) = 0 for all x, so f(x) = 0 for all x (f(x) = 0)\n    # x = -1/f(x)\n    # with x = -1/f(x), f(x) = 0, x = -1/f(x) = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + x^2 +... + x^n, g(x) = 0, x = -1/g(x)\n    # with g(x) = x + ",
        "num_ids": 1025
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"Find zero function works only with even number of polynomials.\")\n    # if coeffs[-1] == 0:\n    #     raise ValueError(\"Polynomial has zero as a coefficient.\")\n    for i in range(1, len(xs)):\n        if xs[-i] * xs[-i - 1] < 0:\n            return -xs[-i - 1] / xs[-i]\n    # check for last element, as last element is guaranteed to be non zero\n    if xs[-1] * xs[-1 - 1] < 0:\n        return -xs[-1 - 1] / xs[-1]\n    return None\n",
        "num_ids": 175
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    index = 0\n    while index < len(l):\n        if index % 3 == 0:\n            index += 1\n            continue\n        else:\n            l[index], l[index - 1] = l[index - 1], l[index]\n            index += 1\n    return l\n",
        "num_ids": 68
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_list = []\n    for item in l:\n        if item % 3 == 0:\n            new_list.append(item)\n        else:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 54
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    t1 = []\n    t2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            t1.append(l[i])\n        else:\n            t2.append(l[i])\n    return t1 + t2\n",
        "num_ids": 68
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    l_1 = []\n    l_2 = []\n    for item in l:\n        if count % 3 == 0:\n            l_1.append(item)\n        elif count % 3 == 1:\n            l_2.append(item)\n        count += 1\n",
        "num_ids": 71
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(l, key=lambda x: x%3)\n    # returns l' with l'[i] = l[i] if i is not divisible by 3, but l'[i] = l[i % 3] if i is divisible by 3.\n",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [i for i in l if i % 3!= 0]\n    result.sort()\n    result += [i for i in l if i % 3 == 0]\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i, j, k = 0, 0, 0\n    \n    while i < len(l):\n        if i % 3!= 0:\n            l[k] = l[i]\n            k += 1\n        i += 1\n",
        "num_ids": 56
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return l[::-1]\n",
        "num_ids": 10
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert(len(l) >= 3)\n    \n    l1 = []\n    l2 = []\n    \n    for i in range(len(l)):\n        if i % 3!= 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    \n    l1.sort()\n    l2.sort()\n    \n    l1.extend(l2)\n    \n    return l1\n    \n    \ndef compare_triplets(a, b):\n    \"\"\"\n    Take 2 lists a and b.  Compare their values.  Return a list of 2 integers, [score_a, score_b],\n    indicating the score of each player.\n    \"\"\"\n    score_a = 0\n    score_b = 0\n    \n    for i in range(len(a)):\n        if a[i] > b[i]:\n            score_a += 1\n        elif a[i] < b[i]:\n            score_b += 1\n    \n    return [score_a, score_b]\n    \ndef count_evens(nums):\n    \"\"\"\n    Take a list of integers, nums.  Return a list whose first element is the number of even integers in nums,\n    and whose second element is the sum of the even integers in nums.\n    \"\"\"\n    if len(nums) == 0:\n        return [0, 0]\n    \n    nums.sort()\n    \n    evens = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            evens.append(nums[i])\n    \n    return [len(evens), sum(evens)]\n    \n    \ndef sum13(nums):\n    \"\"\"\n    Given a list of integers, nums, return the sum of all the elements in nums, except ignore sections of numbers starting with a 13\n    and extending to the next 13.  If there are no 13's in the list, the sum is 0.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    sum = 0\n    in_13 = False\n    \n    for i in range(len(nums)):\n        if in_13:\n            if nums[i]!= 13:\n                sum += nums[i]\n        else:\n            if nums[i] == 13:\n                in_13 = True\n            else:\n                sum += nums[i]\n    \n    return sum\n    \n    \ndef has22(nums):\n    \"\"\"\n    Given a list of integers, nums, return True if the array contains a 2 next to a 2 somewhere.\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] == 2 and nums[i+1] == 2:\n            return True\n    \n    return False\n    \n    \ndef plus_one(digits):\n    \"\"\"\n    Given a list of digits representing an integer, return a list of digits representing the integer plus one.\n    \"\"\"\n    carry = False\n    num = 0\n    for i in range(len(digits)):\n        num += digits[i] * (10 ** (len(digits) - 1 - i))\n        if carry:\n            num += 1\n        if num > 10 ** len(digits):\n            num -= 10 ** len(digits)\n        \n        carry = num >= 10\n    \n    if carry:\n        num += 1\n    \n    return [int(char) for char in str(num)]\n    \n    \ndef reverse3(nums):\n    \"\"\"\n    Given a list of ints, return the same list in reverse order\n    \"\"\"\n    nums.reverse()\n    return nums\n    \n    \ndef max_end3(nums):\n    \"\"\"\n    Given a list of ints, return the maximum element of the array at the end of the list.\n    \"\"\"\n    nums = nums[-3:]\n    if len(nums) == 0:\n        return 0\n    \n    return max(nums)\n    \n    \ndef sort_sentence(sentence):\n    \"\"\"\n    Given a string, sentence, return a string sorted in alphabetical order.\n    >>> sort_sentence(\"is2 Thi1s T4est 3a\")\n    'Thi1s i",
        "num_ids": 1027
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # list to hold the new l\n    new_list = []\n    # iterate over the range of l\n    for i in range(0, len(l)):\n        # if the index is a multiple of three, add to new_list\n        if i % 3 == 0:\n            new_list.append(l[i])\n        # otherwise, add to new_list the value of the current index of l\n        else:\n            new_list.append(l[i])\n    # return the new_list\n    return new_list",
        "num_ids": 126
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(sorted(set(l)))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # return [dict([(val, 1) for val in l])[val] for val in l]\n    return sorted(set(l))\n",
        "num_ids": 35
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l1 = l[:]\n    l1.sort()\n    l2 = []\n    for i in l1:\n        if i not in l2:\n            l2.append(i)\n    return l2\n",
        "num_ids": 53
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for item in l:\n        if item not in result:\n            result.append(item)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "num_ids": 53
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_element = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n",
        "num_ids": 51
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "num_ids": 53
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        raise ValueError('Empty list')\n    \n    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 66
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if l == []:\n        raise ValueError(\"Cannot find maximum of an empty list\")\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element(l[1:]))\n",
        "num_ids": 63
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    times_7 = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            times_7 += 1\n    return times_7\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = n - 1\n    summation = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            summation += 1\n    return summation\n",
        "num_ids": 51
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n >= 0, \"Number must be greater than or equal to zero\"\n    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n",
        "num_ids": 29
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(str(x).count('7') for x in range(1, n) if x % 11 == 0 or x % 13 == 0)\n",
        "num_ids": 36
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([1 for i in range(n) if i % 11 == 0 or i % 13 == 0])\n    \n",
        "num_ids": 29
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    c = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            c += 1\n    return c\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return str(n).count('7') + str(n).count('7')\n",
        "num_ids": 21
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0)\n",
        "num_ids": 35
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    even = [l[i] for i in range(0, len(l), 2)]\n    odd = [l[i] for i in range(1, len(l), 2)]\n    even.sort()\n    return even + odd\n",
        "num_ids": 57
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    odds = l[1::2]\n    evens = l[::2]\n    odds.sort()\n    return odds + evens\n",
        "num_ids": 36
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l_copy = [x for x in l] # Create a copy of l, so we don't modify the original list.\n    for i in range(1, len(l), 2): # i is the index of the even elements.\n        l_copy[i] = l[i] # We create a new element l_copy[i], and assign it the value of the element l[i]\n    for i in range(0, len(l), 2): # i is the index of the even elements.\n        l_copy[i] = l[i] # We create a new element l_copy[i], and assign it the value of the element l[i]\n    return l_copy # We return l_copy.\n",
        "num_ids": 167
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Can't do it in place\n    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(sorted(l[i]))\n    return l2\n",
        "num_ids": 72
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = [l[0]]\n    for index in range(1, len(l)):\n        if index % 2 == 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(l[index])\n    return new_list\n",
        "num_ids": 69
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_l = [0]*len(l)\n    odds = l[1::2]\n    evens = l[::2]\n    odds.sort()\n    for i in range(len(l)//2):\n        new_l[i] = evens[i]\n        new_l[len(l)//2+i] = odds[i]\n    return new_l\n",
        "num_ids": 97
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l2 = []\n    for i in range(0,len(l), 2):\n        l2.append(l[i])\n    l2 = sorted(l2)\n    j = 0\n    for i in range(len(l)):\n        if i%2 == 0:\n            l[i] = l2[j]\n            j+=1\n    return l\n",
        "num_ids": 90
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l[1::2] = sorted(l[1::2])\n    return l\n",
        "num_ids": 22
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l2 = l[::2]\n    l2.sort()\n    for i in range(len(l)):\n        if i%2 == 0:\n            l[i] = l2[i]\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s[0] + s[-1] + s[2:-1] + s[1]\n",
        "num_ids": 26
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # remove all groups with length 2, since they won't exist after decoding.\n    s = re.sub(r\"(.)\\1\", \"\", s)\n    # if last char of string is a single char, add it to every 3 chars group.\n    s = re.sub(r\"(.)\\1\", lambda m: m.group(1) + m.group(1) + m.group(1), s)\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode groups by reversing groups, and then cycling groups of 3.\n    groups = [decode_cyclic(group) for group in groups[::-1]]\n    return \"\".join(groups)\n",
        "num_ids": 197
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # insert empty string to make string divisible by 3.\n    s = s + \" \" * (len(s) % 3)\n    # group elements by 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # create list of lists with equal length.\n    groups = [list(group) for group in groups]\n    # reverse groups\n    groups = [group[::-1] for group in groups]\n    # recombine groups.\n    groups = [\"\".join(group) for group in groups]\n    # remove \" \" from the end.\n    groups[-1] = groups[-1][:-1]\n    # return decoded string.\n    return \"\".join(groups)\n",
        "num_ids": 191
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. If group has more than 3 elements.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    groups = [(s[3 * i:3 * i + 3] for i in range(len(s) // 3))]\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 55
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(s) % 3 == 0\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    return \"\".join(groups)\n",
        "num_ids": 61
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. If group has three characters, add the last character to the\n    # second element. Otherwise, just add the last character to the group.\n    groups = [(group[-1] + group[1] if len(group) == 3 else group[-1] + group[0]) if len(group) == 2 else group[-1] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 152
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 87
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return next(fib_seq(n))\n",
        "num_ids": 13
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = 1\n    b = 2\n    c = 3\n    i = 4\n    while i < n:\n        i += 1\n        a, b = b, a + b\n    if is_prime(i):\n        return i\n",
        "num_ids": 57
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fib_n_minus_1 = 2\n        fib_n_minus_2 = 3\n        for i in range(n-2):\n            fib_n = fib_n_minus_1 + fib_n_minus_2\n            fib_n_minus_2 = fib_n_minus_1\n            fib_n_minus_1 = fib_n\n        return fib_n\n",
        "num_ids": 123
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # n-1 = 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\n    # 12413,...\n    # fib_1 = 2\n    # fib_2 = 3\n    # fib_n = fib_n-1 + fib_n-2\n    fib_1, fib_2 = 2, 3\n    while fib_1 <= n:\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1\n",
        "num_ids": 149
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return fib(n)\n",
        "num_ids": 8
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1 or n == 2:\n        return n\n    return prime_fib(n-1) + prime_fib(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    while True:\n        fib = fibonacci(n)\n        if is_prime(fib):\n            return fib\n        n += 1\n",
        "num_ids": 36
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    fib_cache = [1, 1]\n    while len(fib_cache) <= n:\n        fib_cache.append(fib_cache[-2] + fib_cache[-1])\n    return fib_cache[n]\n",
        "num_ids": 60
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    a, b = 2, 3\n    for i in range(n - 2):\n        a, b = b, a + b\n    while True:\n        if all(i%j!= 0 for j in range(2, int(math.sqrt(b))+1)):\n            return b\n        a, b = b, a + b\n",
        "num_ids": 98
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    prime_list = primes_up_to(n)\n    for i in range(len(prime_list)):\n        if prime_list[i] > n:\n            break\n        for j in range(i + 1, len(prime_list)):\n            if (prime_list[i] + prime_list[j]) == n:\n                return n\n",
        "num_ids": 87
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in l:\n        if i == 0:\n            count += 1\n        if count > 2:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    set = set()\n    for num in l:\n        if num in set:\n            return True\n        else:\n            set.add(num)\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False",
        "num_ids": 86
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if len(l) == 0:\n        return False\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0 and (i!= j):\n                return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = set()\n    for x in l:\n        if x in s:\n            return True\n        s.add(x)\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # TODO: Implement this function\n    # set that tracks the elements we've seen\n    seen = set()\n    # loop through the list\n    for i in l:\n        # if it's in the set, we have found a triplet\n        if i in seen:\n            return True\n        # otherwise, add it to the set\n        seen.add(i)\n",
        "num_ids": 86
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = set()\n    for i in l:\n        if i in s:\n            return True\n        s.add(abs(i))\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    t, s = 0, set()\n    for x in l:\n        if x in s:\n            return True\n        t += x\n        s.add(t)\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in l:\n        for j in l:\n            for k in l:\n                if (i == j or i == k) and (j!= i or j!= k):\n                    if i + j + k == 0:\n                        count += 1\n    if count == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 86
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    car_arr = [0] * n\n    for i in range(n):\n        car_arr[i] = [[False, 0] for i in range(n)]\n    for i in range(n):\n        car_arr[i][i] = [True, 0]\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] < n:\n                car_arr[i][j][1] += 1\n            if car_arr[j][i][0] and car_arr[j][i][1] < n:\n                car_arr[j][i][1] += 1\n    # check collision\n    for i in range(n):\n        for j in range(n):\n            if car_arr[i][j][0] and car_arr[i][j][1] > 1:\n                car_arr[i][j][1] -= 2\n    return sum([1 for i in range(n) for j in range(n) if car_arr[i][j][1] > 1])\n",
        "num_ids": 289
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return int(math.ceil(n / 2))\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # There will be n/2 + 1 collisions\n    # There will be n/2 * (n/2 - 1) / 2 = n(n-1)/2 => n(n-1)/2 + 1\n    return n * (n - 1) / 2 + 1\n",
        "num_ids": 64
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    raise NotImplementedError(\"Problem 1 Incomplete\")\n",
        "num_ids": 15
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    from math import gcd\n",
        "num_ids": 8
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for _ in (collide(i,j) for i in range(n) for j in range(n)) if _)\n",
        "num_ids": 35
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    x = 0\n    for i in range(1, n + 1):\n        x += i * i\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i == j:\n                continue\n            if (\n                i % j == 0 or\n                (i + j) % (i * j) == 0\n            ):\n                collisions += 1\n    return collisions\n",
        "num_ids": 79
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        new_l.append(l[i] + 1)\n    return new_l\n",
        "num_ids": 41
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l[len(l):] = [i + 1 for i in l[:0:-1]]\n    return l\n",
        "num_ids": 29
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = []\n    for element in l:\n        new_list.append(element + 1)\n    return new_list\n",
        "num_ids": 33
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i+1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [l[i] + 1 for i in range(len(l))]\n",
        "num_ids": 21
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return [i + 1 for i in l]\n",
        "num_ids": 15
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # YOUR CODE GOES HERE\n    a = set(l)\n    for i in l:\n        if -i in a:\n            return True\n    return False\n    raise NotImplementedError()\n",
        "num_ids": 49
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return any([-1 * x in l for x in l])\n",
        "num_ids": 17
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seen = set()\n    for elem in l:\n        if -elem in seen:\n            return True\n        seen.add(elem)\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pairs = {}\n    for num in l:\n        if num not in pairs:\n            pairs[num] = 0\n        else:\n            pairs[num] += 1\n",
        "num_ids": 44
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_dict = {}\n    for i in l:\n        if i in num_dict:\n            return True\n        else:\n            num_dict[i] = 1\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = set()\n    for i in l:\n        if i in a:\n            return True\n        else:\n            a.add(i)\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(l))!= len(l)\n",
        "num_ids": 16
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    output = {}\n    for num in l:\n        if num in output:\n            return True\n        output[-num] = True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return any( (l[i]+l[j])==0 for i in range(len(l)) for j in range(len(l)) if i!=j)\n",
        "num_ids": 41
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = \"\"\n    if x == 0:\n        return \"0\"\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x < 10:\n        return str(x)\n    elif x < 100:\n        return str(x % 10) + change_base(x // 10, base)\n    else:\n        return change_base(x // 10, base) + change_base(x % 10, base)\n",
        "num_ids": 71
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert base >= 10 and base <= 37, \"base is out of range\"\n    convert_string = ''\n    digit = 0\n    if x < 0:\n        sign = -1\n        x = abs(x)\n    else:\n        sign = 1\n    while x > 0:\n        digit = x % base\n        if digit >= 10:\n            convert_string = str(digit) + convert_string\n        else:\n            convert_string = str(digit) + convert_string\n        x = x // base\n    if sign == -1:\n        convert_string = '-' + convert_string\n    return convert_string\n",
        "num_ids": 151
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    out = []\n    if x == 0:\n        return '0'\n    while x:\n        out.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(out)\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == 0:\n        return \"0\"\n    if base >= 10:\n        return convert_base_to_decimal(x, base)\n    if x < 0:\n        sign = '-'\n        x = -x\n    else:\n        sign = ''\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return sign + result\n",
        "num_ids": 101
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if base < 10:\n        return str(x)\n    elif base < 16:\n        y = []\n        while x > 0:\n            y.append(x % base)\n            x //= base\n        y.reverse()\n        return ''.join(map(str, y))\n    elif base == 16:\n        y = []\n        while x > 0:\n            y.append(chr(x % 16))\n            x //= 16\n        y.reverse()\n        return ''.join(y)\n    else:\n        raise ValueError('Base must be less than 10 or less than 16')\n",
        "num_ids": 145
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n",
        "num_ids": 39
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    DIGIT = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    if x == 0:\n        return '0'\n    if x < 0:\n        return '-' + change_base(-x, base)\n    if x > 0:\n        digits = []\n        while x > 0:\n            remainder = x % base\n            digits.insert(0, DIGIT[remainder])\n            x //= base\n        return ''.join(digits)\n",
        "num_ids": 185
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    out = []\n    while x > 0:\n        out.append(str(x % base))\n        x = x // base\n    return ''.join(reversed(out))\n",
        "num_ids": 45
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if base > 10:\n        return 'Invalid Base'\n    if x < 0:\n        return 'Invalid Number'\n    result = \"\"\n    while x!= 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a*h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    area = (a * h)/2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 3:\n        return n - 1\n    elif n == 4:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 64
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    elif n == 4:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 98
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)",
        "num_ids": 73
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 79
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        previous, current = 0, 1\n        for i in range(3, n+1):\n            previous, current = current, previous + current\n        return current\n",
        "num_ids": 79
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n - 1 if n <= 3 else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 43
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 79
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 3:\n        return n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 46
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = sum(l)\n    length = len(l)\n    return (s / length) - ((s / (2*length)) if length % 2 else ((s/length) + (s / (2*length))))\n",
        "num_ids": 53
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    m = len(l) // 2\n    return (l[m] + l[~m]) / 2\n    \n",
        "num_ids": 37
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n/2] + l[n/2 - 1]) / 2.0\n    else:\n        return l[n/2]\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if l == []:\n        return None\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2.0\n    else:\n        return l[n//2]\n",
        "num_ids": 73
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l.sort()\n    m = len(l)\n    return l[m//2] if m % 2 else (l[m//2] + l[m//2 - 1]) / 2.0\n",
        "num_ids": 49
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    m = n // 2\n    if n % 2 == 0:\n        return (l[m - 1] + l[m]) / 2\n    else:\n        return l[m]\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n//2\n    if n%2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid-1])/2\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return _median(l, 0, len(l) - 1)\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l.sort()\n    if not l:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n",
        "num_ids": 72
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n",
        "num_ids": 62
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #return is_palin(text[::-1])\n    if len(text) < 2:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return True\n",
        "num_ids": 11
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(text) < 1:\n        return True\n    first = 0\n    last = len(text) - 1\n    while first <= last:\n        if text[first].lower()!= text[last].lower():\n            return False\n        first += 1\n        last -= 1\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(text) <= 1:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 41
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #returns true if the characters of the string are the same forwards and backwards\n    return text == text[::-1]\n",
        "num_ids": 30
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    text = text.lower().replace(' ', '')\n    if text == text[::-1]:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return pow(n, p, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return pow(n, 2, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n-1, p) * p) % p\n    else:\n        return (modp(n/2, p) ** 2) % p\n",
        "num_ids": 72
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n",
        "num_ids": 72
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (n % p) if n > p/2 else (-1) * ((-1) * n % p)\n",
        "num_ids": 29
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return pow(n, mod_p, p)\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p) * modp(p, p) % p\n    else:\n        return modp(n-1, p) * p % p\n",
        "num_ids": 64
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return modp((n * n) % p, p)\n    else:\n        return modp(n / 2, p) ** 2 % p\n",
        "num_ids": 56
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp((n - 1) // 2, p) ** 2 * modp(n // 2, p)) % p\n",
        "num_ids": 73
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #remove vowels from text\n    vowels = ['a','e','i','o','u']\n    for i in vowels:\n        text = text.replace(i,'')\n    return text\n",
        "num_ids": 49
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    text=text.lower()\n    vowels=['a','e','i','o','u','y']\n    vowels_removed=''\n    for i in range(0,len(text)):\n        if text[i] not in vowels:\n            vowels_removed=vowels_removed+text[i]\n    return vowels_removed\n",
        "num_ids": 92
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    out = ''\n    for char in text:\n        if char not in vowels:\n            out += char\n    return out\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    text = text.lower()\n    new_text = \"\"\n    for c in text:\n        if c not in vowels:\n            new_text = new_text + c\n    return new_text\n",
        "num_ids": 76
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_string = \"\"\n    for i in range(len(text)):\n        if text[i] not in \"aeiouAEIOU\":\n            new_string += text[i]\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    # your code here\n    text = text.lower()\n    text_list = list(text)\n    for i,x in enumerate(text_list):\n        if x in vowels:\n            text_list[i] = ''\n    text = ''.join(text_list)\n    return text\n    ",
        "num_ids": 85
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    for char in vowels:\n        text = text.replace(char, '')\n    return text\n",
        "num_ids": 39
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    # result = \"\".join(c for c in text if c not in vowels)\n    # return result\n",
        "num_ids": 41
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for x in l:\n        if x >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l <= t for l in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for elem in l:\n        if elem >= t:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(list(filter(lambda x: x > t, l))) == 0\n",
        "num_ids": 21
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n    \ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n    \ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n    \ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0\n    >>> divide(5, 7)\n    0.285714285714285714285714286\n    \"\"\"\n    return x / y\n    \ndef square(x: int):\n    \"\"\"Square a number\n    >>> square(2)\n    4\n    >>> square(3)\n    9\n    \"\"\"\n    return x ** 2\n    \ndef square_root(x: int):\n    \"\"\"Square root a number\n    >>> square_root(4)\n    2.0\n    >>> square_root(9)\n    3.0\n    \"\"\"\n    return x ** 0.5\n    \ndef cube(x: int):\n    \"\"\"Cube a number\n    >>> cube(2)\n    8\n    >>> cube(3)\n    27\n    \"\"\"\n    return x ** 3\n    \ndef power(x: int, y: int):\n    \"\"\"Power a number x to the power y\n    >>> power(2, 3)\n    8\n    >>> power(2, 4)\n    16\n    >>> power(5, 3)\n    125\n    >>> power(4, 5)\n    256\n    \"\"\"\n    return x ** y\n    \ndef modulo(x: int, y: int):\n    \"\"\"Return the modulo of x and y\n    >>> modulo(7, 5)\n    2\n    >>> modulo(3, 5)\n    3\n    \"\"\"\n    return x % y\n    \ndef multiply_modulo(x: int, y: int, m: int):\n    \"\"\"Return the multiplicand x multiplied by the multiplicand y, modulo the modulus m\n    >>> multiply_modulo(3, 2, 5)\n    1\n    >>> multiply_modulo(4, 3, 5)\n    2\n    \"\"\"\n    return (x * y) % m\n    \ndef exponentiate(x: int, y: int):\n    \"\"\"Return x raised to the power y\n    >>> exponentiate(3, 2)\n    9\n    >>> exponentiate(2, 4)\n    16\n    >>> exponentiate(4, 0)\n    1\n    \"\"\"\n    return x ** y\n    \ndef add_modulo(x: int, y: int, m: int):\n    \"\"\"Return the sum of x and y, modulo m\n    >>> add_modulo(3, 5, 6)\n    3\n    >>> add_modulo(2, 4, 5)\n    1\n    \"\"\"\n    return (x + y) % m\n    \ndef subtract_modulo(x: int, y: int, m: int):\n    \"\"\"Return the difference of x and y, modulo m\n    >>> subtract_modulo(3, 5, 6)\n    -3\n    >>> subtract_modulo(2, 4, 5)\n    -1\n    \"\"\"\n    return (x - y) % m\n    \ndef multiply_modulo_recursive(x: int, y: int, m: int):\n    \"\"\"Return the product of x and y, modulo m\n    >>> multiply_modulo_recursive(3, 5, 6)\n    15\n    >>> multiply_modulo_recursive(2, 4, 5)\n    10\n    \"\"\"\n    if y == 0:\n        return 0\n    if y == 1:\n        return x\n    div = y // 2\n    if y % 2 == 0:\n        return (multiply_modulo_recursive(x, div, m) ** 2) % m\n    return (multiply_modulo_recursive(x, div, m) ** 2 * x) % m\n    \ndef fibonacci(x: int):\n    \"\"\"Return the xth Fibonacci number\n    >>> fibonacci(1)\n    1\n    >>",
        "num_ids": 1025
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    chars = {}\n    for c in s0:\n        if c in chars:\n            chars[c] += 1\n        else:\n            chars[c] = 1\n    for c in s1:\n        if c not in chars:\n            return False\n        chars[c] -= 1\n        if chars[c] < 0:\n            return False\n    return True\n",
        "num_ids": 109
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    for c in s1:\n        if c not in s0:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n",
        "num_ids": 32
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(s0)) == len(s0) == len(set(s1)) == len(s1)\n",
        "num_ids": 31
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-2) + fib(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # list\n    l = [0, 1]\n    while len(l) <= n:\n        l.append(l[-1] + l[-2])\n    return l[n]\n",
        "num_ids": 48
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    left_idx = 0\n    while left_idx < len(brackets):\n        right_idx = brackets.rfind(\">\", 0, left_idx)\n        if right_idx < 0:\n            return False\n        if brackets[right_idx - 1] == \">\" and left_idx < right_idx:\n            left_idx = right_idx + 1\n        else:\n            return False\n    return True\n",
        "num_ids": 117
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    bracket_count = 0\n    for i in range(0, len(brackets)):\n        if brackets[i] == '<':\n            bracket_count += 1\n        elif brackets[i] == '>':\n            bracket_count -= 1\n        if bracket_count < 0:\n            return False\n    if bracket_count!= 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 98
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    unbalanced = False\n    for bracket in brackets:\n        if bracket == \"<\":\n            unbalanced = not unbalanced\n        elif bracket == \">\":\n            unbalanced = not unbalanced\n    return unbalanced\n",
        "num_ids": 51
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    bracket_pairs = {'(': ')', '{': '}', '[': ']', '<': '>', '?': '?'}\n    if len(brackets) % 2!= 0:\n        return False\n    else:\n        brackets = brackets.replace(' ', '')\n        for i in range(0, len(brackets), 2):\n            if bracket_pairs[brackets[i]]!= brackets[i + 1]:\n                return False\n        return True\n",
        "num_ids": 118
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in brackets:\n        if i == '<':\n            count += 1\n        elif i == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 57
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for c in brackets:\n        if c == \">\":\n            count += 1\n        elif c == \"<\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    start_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            start_stack.append('>')\n        elif bracket == '>':\n            if len(start_stack) == 0:\n                return False\n            start_stack.pop()\n    return len(start_stack) == 0\n",
        "num_ids": 77
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    open_brackets = []\n    \n    for char in brackets:\n        if char == \"<\":\n            open_brackets.append(char)\n        elif char == \">\":\n            if not open_brackets:\n                return False\n            else:\n                open_brackets.pop()\n    return not open_brackets\n    \n    \n",
        "num_ids": 85
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \">\" and len(bracket_stack) == 0:\n            return False\n        if bracket == \"<\":\n            bracket_stack.append(\">\")\n        if bracket == \">\":\n            if len(bracket_stack) == 0:\n                return False\n            bracket_stack.pop()\n    return len(bracket_stack) == 0\n",
        "num_ids": 102
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    brackets = list(brackets)\n    while \">\" in brackets:\n        index = brackets.index(\">\")\n        if index!= 0:\n            if \">\" + brackets[index-1]!= \"<\" + brackets[index+1]:\n                return False\n        else:\n            if brackets[index+1]!= \"<\":\n                return False\n        del brackets[index]\n        del brackets[index]\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] >= l[i+1] for i in range(len(l)-1)) or \\\n           all(l[i] <= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 56
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] < l[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n    else:\n        if l[0] <= l[1]:\n            return monotonic(l[1:])\n        else:\n            return False",
        "num_ids": 50
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 55
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (all(l[i] < l[i+1] for i in range(len(l)-1)) or\n            all(l[i] > l[i+1] for i in range(len(l)-1)))\n",
        "num_ids": 56
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l2.sort()\n    i, j = 0, 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            common.append(l1[i])\n            i += 1\n            j += 1\n    return common",
        "num_ids": 107
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l1.sort()\n    l2.sort()\n    common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            if not common or l1[i]!= common[-1]:\n                common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n",
        "num_ids": 131
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l1.sort()\n    l2.sort()\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return 2\n    p = 3\n    while n % p!= 0:\n        p += 2\n    return p\n",
        "num_ids": 38
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    i = 2\n    prime = 1\n    while i * i <= n:\n        while n % i:\n            i += 1\n        prime = i\n    return prime\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # if n < 2, it is obviously not a prime\n    if n < 2:\n        return -1\n    \n    # for all factors of n, if the remainder is 1, then it is prime\n    i = 2\n    while i < n:\n        if n % i == 1:\n            return i\n        i += 1\n    return n\n",
        "num_ids": 82
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return 2\n    else:\n        f = 3\n        while f <= n:\n            if n % f == 0:\n                return f\n            else:\n                f += 2\n    return n\n",
        "num_ids": 56
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n > 1\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            n /= i\n            print(i)\n            i = 2\n        else:\n            i += 1\n    return n\n",
        "num_ids": 60
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Get the largest factor of n\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            largest_factor = i\n            break\n    return largest_factor\n",
        "num_ids": 51
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 1\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n",
        "num_ids": 42
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 1\n    else:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return n // i\n    return n\n",
        "num_ids": 54
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total += k\n        k += 1\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result, i = 0, 1\n    while i <= n:\n        result += i\n        i += 1\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        return n\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = 0\n    for i in range(1,n+1):\n        s = s + i\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum = 0\n    for num in range(1, n + 1):\n        sum += num\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total = 0\n    for x in range(1,n+1):\n        total += x\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    total, i = 0, 1\n    while i <= n:\n        total += i\n        i += 1\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # length of brackets = number of \")\"\n    return len(brackets) % 2 == 0\n",
        "num_ids": 26
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    counts = {}\n    for char in brackets:\n        if char == \"(\":\n            counts[char] = counts.get(char, 0) + 1\n        else:\n            if char == \")\":\n                if counts.get(char, 0) == 0:\n                    return False\n                else:\n                    counts[char] = counts.get(char, 0) - 1\n    return True\n",
        "num_ids": 95
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert isinstance(brackets, str), \"brackets must be a string.\"\n    assert len(brackets) > 0, \"no brackets.\"\n    assert (len(brackets) % 2 == 0), \"brackets must have even length.\"\n    assert all(char in [\"(\", \")\"] for char in brackets), \"brackets must be parentheses.\"\n    return all(brackets[i] == \")\" for i in range(0, len(brackets), 2))\n",
        "num_ids": 109
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            bracket_stack.append(bracket)\n        else:\n            if len(bracket_stack) == 0:\n                return False\n            if bracket_stack.pop()!= \"(\":\n                return False\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 65
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # {'(', ')'}\n    bracket_dict = {')': '(', '}': '{', ']': '['}\n    # keep track of the last open bracket\n    open_bracket = bracket_dict[brackets[0]]\n    # is the last open bracket in the string?\n    # if so, we have the right answer\n    if len(brackets) == 1:\n        return True\n    for bracket in brackets[1:]:\n        if open_bracket!= bracket_dict[bracket]:\n            return False\n        open_bracket = bracket\n    return True\n",
        "num_ids": 141
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    lst = list(brackets)\n    for i in lst:\n        if i == \"(\":\n            lst.remove(\"(\")\n        elif i == \")\":\n            lst.remove(\")\")\n    if lst == []:\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(\"(\")\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    counter = 0\n    for char in brackets:\n        if char == \"(\":\n            counter += 1\n        elif char == \")\":\n            counter -= 1\n        if counter < 0:\n            return False\n    if counter!= 0:\n        return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bracket_stack = []\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) < 2:\n        return [0]\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [xs[i]*(len(xs)-i-1) for i in range(len(xs))]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i * (len(xs) - j) for j, i in enumerate(xs[1:])] + [xs[-1]]\n",
        "num_ids": 36
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if xs == []:\n        return []\n    deriv = [xs[0]]\n    for i in range(1, len(xs)):\n        deriv.append(xs[i] * i)\n    return deriv\n",
        "num_ids": 55
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    result.append(0)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    assert isinstance(xs, list), \"xs is not a list.\"\n    assert isinstance(xs[0], int), \"xs[0] is not an int.\"\n    assert isinstance(xs[1], int), \"xs[1] is not an int.\"\n    \n    def derivative_recursive(n: int):\n        return n * xs[n]\n    \n    if len(xs) == 1:\n        return [derivative_recursive(0)]\n    else:\n        return [derivative_recursive(n) for n in range(1, len(xs))]\n",
        "num_ids": 142
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    derivatives = [0] * (len(xs) + 1)\n    for i in range(1, len(xs)):\n        derivatives[i] = xs[i] * i\n    return derivatives\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i+1] * (len(xs) - 1 - i))\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(xs) - 1):\n        result.append(xs[i] * i)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 0\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    #     # f = [0]\n    #     # a, b = 0, 1\n    #     # while b < n:\n    #     #     a, b = b, a + b\n    #     #     f.append(b)\n    #     # return f[-1]\n",
        "num_ids": 151
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # The following solution is not clean, and is not efficient enough.\n    # if n <= 1:\n    #     return n\n    # elif n == 2:\n    #     return 1\n    # else:\n    #     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    # Using the common formula, we get this:\n    # (n - 1) * (n - 2) * (n - 3)\n    # which is a lot faster than the previous solution.\n    if n <= 1:\n        return n\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 193
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
        "num_ids": 44
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    \n        \n    \n    \n    \n",
        "num_ids": 85
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #code here\n",
        "num_ids": 6
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = set('aeiou')\n    count = 0\n    for letter in s:\n        if letter in vowels:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') + s.count('y')\n",
        "num_ids": 45
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 0\n    for letter in s:\n        if letter in ['a', 'e', 'i', 'o', 'u']:\n            vowels += 1\n        elif letter == 'y':\n            vowels += 1\n    return vowels\n",
        "num_ids": 64
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = \"aeiouy\"\n    counter = 0\n    for c in s:\n        if c in vowels:\n            counter += 1\n    if s[-1] in vowels:\n        counter += 1\n    return counter\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 0\n    if s == \"\":\n        return 0\n    if s[-1] in \"aeiou\":\n        vowels += 1\n    if s[-2:] == \"ie\":\n        vowels += 1\n    return vowels + vowels_count(s[:-1])\n",
        "num_ids": 75
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = \"aeiou\"\n    vowels_counter = 0\n    for v in vowels:\n        vowels_counter += s.count(v)\n    return vowels_counter\n",
        "num_ids": 50
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count = count + 1\n        if i == 'y' and s[-1] == 'y':\n            count = count + 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a','e','i','o','u','y']\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    x, shift = int(x), int(shift)\n    n_digits = x//10 + 1\n    if shift > n_digits:\n        return str(x)[n_digits:][::-1]\n    else:\n        return str(x)[shift:]+str(x)[:shift]\n",
        "num_ids": 75
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[len(str(x)) - shift:] + str(x)[:len(str(x)) - shift]",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert(shift >= 0)\n    num_digits = len(str(x))\n    if shift > num_digits:\n        # Since python strings are immutable, use list\n        list_x = list(str(x))\n        list_x.reverse()\n        result = ''.join(list_x)\n    else:\n        # Use slice since python strings are immutable\n        result = str(x)[shift:] + str(x)[:shift]\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if shift > len(str(x)):\n        return str(x)\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Short circuit for negative shifts\n    if shift < 0:\n        return str(abs(shift)) + str(x)[:len(str(abs(shift)))]\n    # Shift digits\n    shift %= len(str(x))\n    shifted = str(x)[shift:] + str(x)[:shift]\n    return shifted\n",
        "num_ids": 79
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if shift > len(str(x)):\n        shift = shift % len(str(x))\n    x_str = str(x)\n    return x_str[shift:] + x_str[:shift]\n",
        "num_ids": 52
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[len(str(x))-shift:]+str(x)[:len(str(x))-shift]",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if shift > len(str(abs(x))):\n        return str(abs(x))[::-1]\n    else:\n        return str((abs(x)//10**shift)%10)*(abs(x)//10**(shift-1)) + str((abs(x)//10**(shift-1))%10)\n",
        "num_ids": 81
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([ord(x)-64 for x in s.upper() if x.isalpha()])\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.upper()\n    return sum(ord(c) - 65 for c in s if c.isalpha())\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(map(ord, s.upper()))\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(map(ord, s.upper()))\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(ord(c) for c in s.upper() if ord(c) >= 65)\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([ord(x) for x in s if 65<=ord(x)<=90])\n",
        "num_ids": 26
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([ord(x) - 64 for x in s if x.isupper()])\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not s:\n        return 0\n    else:\n        return sum(map(lambda x: ord(x)-64, filter(lambda x: x.isupper(), s)))\n",
        "num_ids": 43
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([ord(c)-ord('A')+1 for c in s if ord(c)>=ord('A')])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(ord(c) for c in s.upper() if c.isalpha())\n",
        "num_ids": 23
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    number_apples = s.split(\" \")[0]\n    number_oranges = s.split(\" \")[1]\n    number_fruits = int(number_apples) + int(number_oranges)\n    return number_fruits - int(number_apples) - int(number_oranges)\n",
        "num_ids": 76
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    counter = 0\n    for fruit in s.split(\" \"):\n        if fruit == \"apples\":\n            counter += n\n        elif fruit == \"oranges\":\n            counter -= n\n    return counter\n    \nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120)",
        "num_ids": 115
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    apples = n - int(s.split(\" \")[0])\n    oranges = n - apples\n    return apples + oranges\n",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # simple approach\n    # convert the string into a list\n    fruits = list(map(int,s.split()))\n    # print(fruits)\n    fruits_distribution = fruits[2] - fruits[0] - fruits[1]\n    return fruits_distribution\n",
        "num_ids": 68
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    fruit_sum = 0\n    for f in s.split():\n        if f == \"apples\":\n            fruit_sum += int(n/2)\n        if f == \"oranges\":\n            fruit_sum += int(n/2)\n        if f == \"mangoes\":\n            fruit_sum += int(n/3)\n    return fruit_sum\n",
        "num_ids": 87
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #TODO: implement your solution here\n    # print(n,s,type(n),type(s))\n    n=int(n)\n    s=s.split(\" \")\n    print(s)\n    apples=0\n    oranges=0\n    mangos=0\n    for x in s:\n        if x == \"apples\":\n            apples+=1\n        elif x == \"oranges\":\n            oranges+=1\n        elif x == \"mangos\":\n            mangos+=1\n    \n    # print(apples,oranges,mangos)\n    return n-apples-oranges-mangos\n",
        "num_ids": 159
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.count(\"mango\")-s.count(\"apples\")-s.count(\"oranges\")\n",
        "num_ids": 27
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    str_of_apples = s.split(\" \")[0]\n    str_of_oranges = s.split(\" \")[1]\n    apples_str = str_of_apples.split(\" \")[0]\n    oranges_str = str_of_oranges.split(\" \")[0]\n    mango_fruit = int(apples_str) + int(oranges_str)\n    return mango_fruit - int(apples_str) - int(oranges_str)\n",
        "num_ids": 119
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    elif len(arr) == 1:\n        return [arr[0], 0]\n    else:\n        # Build a heap to store the even values and its index\n        heap = []\n        for i, val in enumerate(arr):\n            if val % 2 == 0:\n                heapq.heappush(heap, (val, i))\n",
        "num_ids": 95
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not arr: return []\n",
        "num_ids": 9
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr: return []\n    return [arr.pop(arr.index(min(filter(lambda x: x % 2 == 0, arr)))), arr.index(min(arr))]\n",
        "num_ids": 46
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(arr)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [ arr[0] ]\n",
        "num_ids": 37
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            return [arr[i], i]\n        i += 1\n    return []\n",
        "num_ids": 56
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return []\n    left = []\n    right = []\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n",
        "num_ids": 73
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n    return [min(evens), arr.index(min(evens))]\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x % 2 == 0, arr))",
        "num_ids": 18
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    cache = {}\n    for i in lst:\n        if i in cache:\n            cache[i] += 1\n        else:\n            cache[i] = 1\n    ans = 0\n    for i in cache.keys():\n        if cache[i] > ans:\n            ans = cache[i]\n    return ans\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    freq = 0\n    for i in lst:\n        if i >= freq:\n            freq = i\n    return freq\n",
        "num_ids": 34
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    return None\n",
        "num_ids": 11
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    frequencies = {}\n    for val in lst:\n        frequencies[val] = frequencies.get(val, 0) + 1\n    \n    max_val = -1\n    for val in frequencies:\n        if frequencies[val] >= val:\n            if frequencies[val] > max_val:\n                max_val = frequencies[val]\n    return max_val\n",
        "num_ids": 90
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    '''\n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    for i in xrange(1, len(lst)):\n        if lst[i] > pivot:\n            freq += 1\n        \n    return pivot if freq > len(lst)/2 else -1\n    '''\n    \n    if len(lst) == 0:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    \n    pivot = lst[0]\n    \n    #freq = 0\n    freq = lst.count(pivot)\n    \n    if freq == 0:\n        return -1\n    \n    pivotIndex = lst.index(pivot)\n    \n    if pivotIndex > len(lst)/2:\n        return pivot\n    else:\n        return -1\n",
        "num_ids": 277
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def freq(i):\n        return lst.count(i)\n    def bin_search(lst, i):\n        low = 0\n        high = len(lst) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if lst[mid] == i:\n                return mid\n            elif lst[mid] < i:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    if not lst:\n        return -1\n    max_count = 0\n    max_item = lst[0]\n    for i in lst:\n        if freq(i) > max_count:\n            max_item = i\n            max_count = freq(i)\n    if max_count == 0:\n        return -1\n    else:\n        i = max_item + 1\n        while i in lst:\n            i += 1\n        return i\n",
        "num_ids": 228
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for i in count:\n        if count[i] >= i:\n            return i\n    return -1\n",
        "num_ids": 67
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return max([lst.count(x) for x in lst if x > 0])\n",
        "num_ids": 23
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # lst.sort()\n    # print lst\n    if len(lst) == 0:\n        return -1\n    ans = lst[0]\n    for x in lst:\n        if x > ans and lst.count(x) >= x:\n            ans = x\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst_dict = {}\n    for i in lst:\n        if i in lst_dict:\n            lst_dict[i] += 1\n        else:\n            lst_dict[i] = 1\n",
        "num_ids": 53
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return lst\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n    new_lst = []\n    min_val = min(lst)\n    new_lst.append(min_val)\n    max_val = max(lst)\n    new_lst.append(max_val)\n",
        "num_ids": 68
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n    out = []\n    i = 0\n    j = len(lst) - 1\n    minimum = min(lst)\n    maximum = max(lst)\n    while i <= j:\n        if lst[i] == minimum:\n            out.append(maximum)\n            i += 1\n        elif lst[j] == maximum:\n            out.append(minimum)\n            j -= 1\n        else:\n            out.append(lst[i])\n            out.append(lst[j])\n            i += 1\n            j -= 1\n    return out\n",
        "num_ids": 147
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst_copy = list(lst)\n    lst_copy.sort()\n    lst_copy.reverse()\n    return lst_copy\n",
        "num_ids": 38
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return lst\n    else:\n        return [lst[0]] + strange_sort_list([i for i in lst[1:] if i > lst[0]]) + [lst[0]] + strange_sort_list([i for i in lst[1:] if i < lst[0]])\n",
        "num_ids": 83
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst:\n        return lst\n    return [min(lst)] + [max(lst)] + strange_sort_list([x for x in lst if x!= min(lst)]) + [min(lst)]\n",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return lst\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not lst: return []\n    ans = []\n    for i, v in enumerate(lst):\n        if i == 0: ans.append(v)\n        if i % 2:\n            ans.append(v)\n    return ans\n",
        "num_ids": 60
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    sides = sorted([a, b, c])\n    if sides[0] + sides[1] <= sides[2]:\n        return -1\n    else:\n        return round((sides[0] * sides[1]) / 2, 2)\n",
        "num_ids": 62
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Write your code here\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    return round((a + b + c) * 0.5, 2)\n    ",
        "num_ids": 53
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import math\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((math.sqrt(a*a + b*b)) * 0.5, 2)\n",
        "num_ids": 56
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a + b < c or b + c < a or a + c < b:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n",
        "num_ids": 81
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # check that the sides are valid\n    if a >= b + c or b >= a + c or c >= a + b:\n        return -1\n    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2)\n",
        "num_ids": 93
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a * b * 1 / 2)**0.5, 2)\n",
        "num_ids": 51
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def _is_triangle(a, b, c):\n        return (a + b > c) and (a + c > b) and (b + c > a)\n",
        "num_ids": 42
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Triangle formula\n    # a = b + c\n    # b = a - c\n    # c = a - b\n    # Area =.5 * b * c\n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    return round(.5 * b * c, 2)\n",
        "num_ids": 81
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Do not change the code below\n    if a + b > c and b + c > a and a + c > b:\n        return round((a * b) / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 54
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return ''.join(map(str,sorted(q))).lower() == ''.join(map(str,sorted(q))).lower()\n    return (sorted(q) == sorted(q)[::-1]) and (sum(q) <= w)\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_balanced(s):\n        return s == s[::-1]\n    \n    def balanced_weight(s):\n        return sum(s) <= w\n    \n    return is_balanced(q) and balanced_weight(q)\n",
        "num_ids": 59
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def recursive(l, w):\n        if len(l) == 0:\n            return True\n        elif len(l) == 1:\n            return True if w >= l[0] else False\n        else:\n            return recursive(l[1:], w-l[0]) or recursive(l[1:], w)\n",
        "num_ids": 78
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Add your code here!\n    if q == []:\n        return True\n    if q == [1] and w == 1:\n        return True\n    else:\n        q_len = len(q)\n        if is_balanced(q) == True:\n            total = sum(q)\n            if total <= w:\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 98
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a,b,c=0,0,0\n    for i in q:\n        a+=i\n        if a>w:\n            a,b,c=0,0,0\n            break\n    return len(q)>1 and a+b<=w\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return (is_palindromic(q) == True) and (sum(q) <= w)\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return q == list(reversed(q)) and sum(q) <= w\n",
        "num_ids": 21
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if q == [] and w == 0:\n        return True\n    if q == [] and w > 0:\n        return False\n    if q == []:\n        return False\n    if isinstance(q,list):\n        if len(q) == 1:\n            if q[0] <= w:\n                return True\n            else:\n                return False\n        if len(q) > 1:\n            if sum(q) <= w:\n                return True\n            else:\n                return False\n",
        "num_ids": 116
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return is_balanced(q) and sum(q)<=w\n",
        "num_ids": 18
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if isinstance(q, list):\n        if len(q) > 1:\n            left, right = q[:len(q)//2], q[len(q)//2:]\n            if is_palindrome(left) and is_palindrome(right):\n                return sum(left) + sum(right) <= w\n            else:\n                return False\n        else:\n            return sum(q) <= w\n    else:\n        return q <= w\n",
        "num_ids": 111
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(arr)\n    counter = 0\n    for i in xrange(n/2):\n        if arr[i]!= arr[n-1-i]:\n            counter += 1\n    return counter\n",
        "num_ids": 52
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # one pass solution\n    # reverse the array and compare each element with the reversed element\n    n = len(arr)\n    rev_arr = arr[::-1]\n",
        "num_ids": 41
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return _smallest_change(arr)\n",
        "num_ids": 12
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # compare each element to the next\n    # if there are differences, return the min of the differences\n    diff = []\n    for i, v in enumerate(arr):\n        try:\n            diff.append(abs(v - arr[i + 1]))\n        except IndexError:\n            pass\n    return min(diff)\n",
        "num_ids": 78
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    change = 0\n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            change += 1\n    return change\n",
        "num_ids": 40
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_arr = sorted(arr)\n    mid_pos = len(arr) // 2\n    index = mid_pos\n    for i in range(len(sorted_arr)):\n        if sorted_arr[index]!= arr[index]:\n            return len(sorted_arr) - index - 1\n        index -= 1\n    return 0\n",
        "num_ids": 84
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # count the number of odd elements\n    # count the number of even elements\n    # if the number of odd elements is the same as the number of even elements, return 0\n    # else return the number of elements to be changed\n    num_odd = 0\n    num_even = 0\n    for i in arr:\n        if i % 2 == 1:\n            num_odd += 1\n        else:\n            num_even += 1\n",
        "num_ids": 100
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return 0 if arr[0] == 0 else 1\n    min_changes = [float(\"inf\")] * len(arr)\n    min_changes[0] = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            min_changes[i] = 1 + min_changes[i - 1]\n        if arr[i] < arr[i - 1]:\n            min_changes[i] = min_changes[i - 1] + 1\n",
        "num_ids": 146
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def change(arr, c, n):\n        if len(arr) == 1:\n            return c\n        if arr[0] == arr[-1]:\n            arr.pop()\n            return change(arr, c + 1, n - 1)\n        else:\n            for i in range(1, len(arr)):\n                if i == len(arr) - 1:\n                    arr.pop()\n                    return change(arr, c + 1, n - 1)\n                if arr[i] == arr[-1]:\n                    arr.pop()\n                    return change(arr, c + 1, n - 1)\n",
        "num_ids": 145
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    smallest = len(arr)\n    for i in range(len(arr)):\n        change = len(arr) - i - 1\n        if is_palindromic(arr, change):\n            if change < smallest:\n                smallest = change\n    return smallest\n",
        "num_ids": 65
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) > len(lst2):\n        return [x for x in lst1 if len(x) < len(lst2)][0]\n    else:\n        return [x for x in lst2 if len(x) < len(lst1)][0]\n",
        "num_ids": 73
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total_lst = []\n    if len(lst1) <= len(lst2):\n        for item in lst1:\n            if len(item) < len(lst2):\n                total_lst.append(item)\n    else:\n        for item in lst2:\n            if len(item) < len(lst1):\n                total_lst.append(item)\n    return total_lst\n",
        "num_ids": 104
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    return [i for i in lst1 if len(i) < len(lst2)]\n",
        "num_ids": 49
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[len(lst1)-len(lst2):]\n    else:\n        return lst2[len(lst2)-len(lst1):]\n",
        "num_ids": 61
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst2\n",
        "num_ids": 69
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in lst1 if len(i) <= len(lst2) and len(i) > 0]\n",
        "num_ids": 32
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst1.sort(key=len)\n    lst2.sort(key=len)\n    if lst1 == lst2:\n        return lst1\n    if len(lst1) < len(lst2):\n        for i in range(len(lst2) - len(lst1)):\n            lst2.append('')\n    if len(lst2) < len(lst1):\n        for i in range(len(lst1) - len(lst2)):\n            lst1.append('')\n    for i in range(len(lst1)):\n        if len(lst1[i]) > len(lst2[i]):\n            lst2[i] += lst1[i]\n        elif len(lst2[i]) > len(lst1[i]):\n            lst1[i] += lst2[i]\n    for i in lst1:\n        if len(i) == len(lst2[0]):\n            return lst1\n    return lst2\n",
        "num_ids": 261
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst1 = set(lst1)\n    lst2 = set(lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 80
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    \n    if len(lst1) < len(lst2):\n        return total_match(lst1, lst2)\n    \n    if len(lst1) == len(lst2):\n        return lst1\n    \n    return [i for i in lst1 if len(i) < len(lst2)][0]\n",
        "num_ids": 117
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(2, int(a / 2)):\n        if (a % i == 0):\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(2, int(a/2)):\n        if (a % i == 0):\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 100:\n        return False\n    for i in range(2,a):\n        if is_prime(i):\n            if is_prime(a/i):\n                if is_prime(a/i/i):\n                    return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    primes = []\n    for i in range(2, 100):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(len(primes)):\n        if primes[i] * primes[i] > a:\n            break\n        for j in range(i, len(primes)):\n            if (a % primes[j]) == 0:\n                return False\n    return True\n",
        "num_ids": 106
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < 100:\n        return False\n    for x in range(2, int(math.sqrt(a))):\n        if a % x == 0:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # n = 2\n    # while n * n <= a:\n    #     if a % n == 0:\n    #         return False\n    #     n += 1\n    # return True\n    # if a < 100:\n    #     return False\n    # else:\n    #     return is_multiply_prime(a / 2) and is_multiply_prime(a / 3) and is_multiply_prime(a / 5)\n    if a < 100:\n        return False\n    for n in range(2, a / 2):\n        if a % n == 0:\n            return False\n    return True\n",
        "num_ids": 149
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    primes = [2, 3, 5]\n    for x in primes:\n        if a % x == 0:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = abs(a)\n    for i in range(2, a):\n        if(a % i == 0):\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if (x == n):\n        return True\n    return False\n",
        "num_ids": 17
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x < n:\n        return False\n    if x % n == 0:\n        return True\n    else:\n        return is_simple_power(x/n, n)",
        "num_ids": 43
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n**int(x)==x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return True\n    if n == 2:\n        return x == 1\n    if x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (n**int(x)==x)\n    \n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x == n**int(math.log(x,n))\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n ** int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x==n*n\n    # return int(n**0.5)==n/n**0.5\n",
        "num_ids": 29
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n**int(x)==x",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if a > 0:\n        return a**3 == int(a**3)\n    else:\n        return a**3 == -int(a**3)\n",
        "num_ids": 41
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if(a == None): return False\n    if(a == 0): return True\n    if(a == 1): return True\n    x = a ** (1/3.0)\n    return (x == int(x)) and (a == int(a))\n",
        "num_ids": 62
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a>0:\n        while a>0:\n            a=a/3\n            if a==0:\n                return True\n        return False\n    else:\n        a=-a\n        while a>0:\n            a=a/3\n            if a==0:\n                return True\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import math\n    if a == 0:\n        return True\n    elif a > 0:\n        return int(a*a*a) == a*a*a\n    else:\n        return a*a*a == a*a*a\n",
        "num_ids": 59
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return a ** 3 == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == 0:\n        return True\n    elif a == -1:\n        return False\n    elif a == 1:\n        return True\n    elif a > 0:\n        a = math.pow(a, 1.0/3)\n        return True if a == int(a) else False\n    else:\n        a = math.pow(abs(a), 1.0/3)\n        return True if a == int(a) else False\n",
        "num_ids": 111
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = 0\n    while n**3 <= a:\n        if n**3 == a:\n            return True\n        n += 1\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == 0:\n        return True\n    return a**3 == int(a**3)\n",
        "num_ids": 25
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(num, str):\n        num = num.replace(' ', '')\n    d = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    num = [int(i) for i in num]\n    return sum([1 for i in num if i in d and isPrime(i)])\n",
        "num_ids": 92
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if num == '':\n        return 0\n    count = 0\n    for i in range(len(num)):\n        if num[i] == 'A' or num[i] == 'B' or num[i] == 'C' or num[i] == 'D' or num[i] == 'E' or num[i] == 'F':\n            num = num[i+1:]\n            return count\n        elif num[i] >= '1' and num[i] <= '9':\n            count += 1\n            if is_prime(int(num[i])) == True:\n                num = num[i+1:]\n                return count\n",
        "num_ids": 156
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    d = {2: '01', 3: '0', 4: '0', 5: '01', 6: '01', \n            7: '01', 8: '0', 9: '01', 10: '0', 11: '01',\n            12: '01', 13: '01', 14: '01', 15: '01', 16: '01',\n            17: '01', 18: '01', 19: '01', 20: '01', 21: '01', \n            22: '01', 23: '01', 24: '01', 25: '01', 26: '01', \n            27: '01', 28: '01', 29: '01', 30: '01', 31: '01', \n            32: '01', 33: '01', 34: '01', 35: '01', 36: '01', \n            37: '01', 38: '01', 39: '01', 40: '01', 41: '01', \n            42: '01', 43: '01', 44: '01', 45: '01', 46: '01', \n            47: '01', 48: '01', 49: '01', 50: '01', 51: '01', \n            52: '01', 53: '01', 54: '01', 55: '01', 56: '01', \n            57: '01', 58: '01', 59: '01', 60: '01', 61: '01', \n            62: '01', 63: '01', 64: '01', 65: '01', 66: '01', \n            67: '01', 68: '01', 69: '01', 70: '01', 71: '01', \n            72: '01', 73: '01', 74: '01', 75: '01', 76: '01', \n            77: '01', 78: '01', 79: '01', 80: '01', 81: '01', \n            82: '01', 83: '01', 84: '01', 85: '01', 86: '01', \n            87: '01', 88: '01', 89: '01', 90: '01', 91: '01', \n            92: '01', 93: '01', 94: '01', 95: '01', 96: '01', \n            97: '01', 98: '01', 99: '01', 100: '01', 101: '01', \n            102: '01', 103: '01', 104: '01', 105: '01', 106: '01', \n            107: '01', 108: '01', 109: '01', 110: '01', 111: '01', \n            112: '01', 113: '01', 114: '01', 115: '01', 116: '01', \n            117: '01', 118: '01', 119: '01', 120: '01', 121: '01', \n            122: '01', 123: '01', 124: '01', 125: '01', 126: '01', \n            127: '01', 128: '01', 129: '01', 130: '01', 131: '01', \n            132: '01', 133: '01', 134: '01', 135: '01', 136: '01', \n            137: '01', 138: '01', 139: '01', 140: '01', 141: '01', \n            142: '01', 143: '01', 144: '01', 145: '01', 146: '01', \n            147: '01', 148: '01', 149: '01', 150: '01', 151: '01', \n            152: '01', 153: '01', 154: '01', 155: '01', 156: '01', \n            157: '01', 158: '01', 159: '01', 160: '01', 161: '01', \n            162: '01', 163: '01', 164: '01', 165: '01', 166: '01', \n            167: '01', 168: '01', 169: '01', 170: '01', 171: '01', \n            172: '01', 173: '01', 174: '01', 175: '01', 176: '01', \n            177: '01', 178: '01', 179: '01', 180: '01', 181: '01', \n            182: '01', 183: '0",
        "num_ids": 1025
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    num = num.upper()\n    count = 0\n    for char in num:\n        if char in '0123456789ABCDEF':\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num = num.upper()\n    lst = list(num)\n    c = Counter(num)\n    primes = [2,3,5,7,11,13,17]\n    lst.sort()\n    lst = [lst[i] for i in range(len(lst)) if lst[i] not in primes]\n    # print(lst)\n    # print(c)\n    # print(num)\n    lst.insert(0,0)\n    # print(lst)\n    lst.append(0)\n    # print(lst)\n    for i in range(1,len(lst)):\n        # print(i)\n        if lst[i]%lst[i-1] == 0:\n            lst[i] += lst[i-1]\n    # print(lst)\n    output = 0\n    for i in range(len(lst)):\n        if i == 0:\n            if lst[i] not in primes:\n                output += 1\n        elif i == len(lst)-1:\n            if lst[i] not in primes:\n                output += 1\n        else:\n            if lst[i] not in primes and lst[i+1] not in primes:\n                output += 1\n    return output\n",
        "num_ids": 319
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n",
        "num_ids": 57
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    decimal = 0\n    for num in num:\n        num = ord(num)\n        if num in range(65, 91) or num in range(97, 123):\n            if num == 65 or num == 97:\n                decimal += 1\n            else:\n                decimal += 2\n        else:\n            decimal += 1\n    return decimal\n",
        "num_ids": 83
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    num = list(num)\n    # For each digit, check if it is prime\n    result = 0\n    for i in num:\n        if i in \"0123456789\":\n            i = int(i)\n            if i > 1 and i % 2!= 0:\n                for j in range(3, int(i**0.5)+1, 2):\n                    if i % j == 0:\n                        result += 1\n                        break\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import re\n    \n    def check_if_prime(number):\n        if number % 2 == 0 and number!= 2:\n            return False\n        for i in range(3, number//2+1, 2):\n            if number % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return str(bin(decimal).replace(\"0b\", \"\").zfill(8))\n    return \"{0:b}\".format(decimal)\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if decimal == 0:\n        return \"0\"\n    return decimal_to_binary(decimal // 2) + str(decimal % 2)\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return 'db{0:08b}db'.format(decimal)\n",
        "num_ids": 21
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary_str = ''\n    while decimal:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        binary_str = str(remainder) + binary_str\n    if len(binary_str) < 8:\n        binary_str = '0' * (8 - len(binary_str)) + binary_str\n    return 'db' + binary_str\n",
        "num_ids": 91
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 'db' + ('1' * decimal) + 'db'\n",
        "num_ids": 18
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    bin = ''\n    while decimal!= 0:\n        bin += str(decimal % 2)\n        decimal = decimal // 2\n    bin = bin[::-1]\n    bin = 'db' + bin + 'db'\n    return bin\n",
        "num_ids": 60
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return bin(decimal)[2:].zfill(16)\n",
        "num_ids": 17
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    binary_form = ''\n    while decimal > 0:\n        binary_form = str(decimal % 2) + binary_form\n        decimal = decimal / 2\n    binary_form = \"db\" + binary_form + \"db\"\n    return binary_form\n",
        "num_ids": 63
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    \n    letters = set()\n    for i in range(0, len(s), 3):\n        if s[i:i+3] in letters:\n            return False\n        letters.add(s[i:i+3])\n    \n    return True\n    \n",
        "num_ids": 78
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not s or len(s) < 3:\n        return False\n    \n    seen = set()\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(s) == 3:\n        if len(set(s)) == 1:\n            return True\n        else:\n            return False\n    elif len(s) > 3:\n        if len(set(s[0:3])) == 1 and len(set(s[3:6])) == 1:\n            return is_happy(s[6:])\n        else:\n            return False\n",
        "num_ids": 112
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # To check if the string is happy\n    # If the length of the string is less than 3, it's not happy\n    if len(s) <= 3:\n        return False\n    # To check if all the characters are distinct\n    # If all the characters are not distinct, it's not happy\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n    # Return true if the string is happy\n    return True\n",
        "num_ids": 128
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    string = list(s)\n    string = [chr(ord(i)+1) for i in string]\n",
        "num_ids": 30
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(s)>=3 and len(set(s[i:i+3]) for i in range(len(s)-2))==len(s)-2\n",
        "num_ids": 41
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = s.lower()\n    if len(s) < 3:\n        return False\n    consecutive_letters = []\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = {}\n    for char in s:\n        count[char] = count.get(char, 0) + 1\n",
        "num_ids": 30
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'E'}\n    grades = [grade_map[grade] for grade in grades]\n    return grades\n",
        "num_ids": 120
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('D-')\n        else:\n            grade_list.append('E')\n    return grade_list\n",
        "num_ids": 284
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 18
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ['A+', 'A', 'B+', 'B', 'C-', 'C', 'D-', 'D', 'E', 'F']\n",
        "num_ids": 38
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def convert_to_letter_grade(grade):\n        if grade >= 4.0:\n            return \"A+\"\n        elif grade >= 3.7:\n            return \"A\"\n        elif grade >= 3.3:\n            return \"A-\"\n        elif grade >= 3.0:\n            return \"B+\"\n        elif grade >= 2.7:\n            return \"B\"\n        elif grade >= 2.3:\n            return \"B-\"\n        elif grade >= 2.0:\n            return \"C+\"\n        elif grade >= 1.7:\n            return \"C\"\n        elif grade >= 1.3:\n            return \"C-\"\n        elif grade >= 1.0:\n            return \"D+\"\n        elif grade >= 0.7:\n            return \"D\"\n        else:\n            return \"E\"\n    return [convert_to_letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 225
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "num_ids": 51
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string) == len(set(string))\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return not is_prime(len(string))\n",
        "num_ids": 13
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "num_ids": 425
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # this is a mistake! We cannot use list comprehension to create a list of\n    # lenght of each word in string\n    # use a generator instead\n    return len(string) in [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n",
        "num_ids": 76
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) == 1:\n        return False\n    elif len(string) == 2:\n        return True\n    elif len(string) == 3:\n        if is_prime(int(string)):\n            return True\n        else:\n            return False\n    elif len(string) % 2 == 0:\n        return False\n    else:\n        half = len(string) / 2\n        last_two = string[len(string) - 2: len(string)]\n        first_two = string[:2]\n        if is_prime(int(last_two)):\n            return True\n        elif is_prime(int(first_two)):\n            return True\n        else:\n            return False\n",
        "num_ids": 171
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(string)\n    if length == 1:\n        return True\n    elif length == 2:\n        return False\n    else:\n        string = string[0:length-1]\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n    return True\n    \nprint(prime_length('Hello'))\nprint(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange')",
        "num_ids": 120
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string) == len(set(string))\n",
        "num_ids": 15
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num = len(string)\n    if num > 1:\n        prime = True\n        for i in range(2,num):\n            if (num % i) == 0:\n                prime = False\n                break\n        return prime\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(string) == 1:\n        return False\n    for i in range(2, int(len(string) ** 0.5 + 1)):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(string) < 2:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return starts_one_ends(n-1) + starts_one_ends(n-2)",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for i in range(1, n + 1) if (i // 10) % 10 == 1 or (i % 10) == 1])",
        "num_ids": 36
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(n):\n        result += count_starts_one_ends(i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Base case\n    if n == 1:\n        return 1\n    # Add 1 if the end of the current number is one, and recurse on the rest\n    elif n % 10 == 1:\n        return starts_one_ends(n / 10) + starts_one_ends(n - 1)\n    # Add 1 if the start of the current number is one, and recurse on the rest\n    elif n % 10 == 0:\n        return starts_one_ends(n / 10) + starts_one_ends(n + 1)\n    # Do not add 1 if the start or end of the current number is one\n    else:\n        return starts_one_ends(n / 10) + starts_one_ends(n - 1) + starts_one_ends(n + 1)\n",
        "num_ids": 184
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_one(s):\n        return s == '1'\n",
        "num_ids": 18
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, 10):\n        if int(str(i) + str(n - 1)) >= n:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    digit_count = 1\n    while n-digit_count > 0:\n        if n - digit_count % 10 == 1:\n            digit_count += 1\n        else:\n            break\n    return digit_count\n",
        "num_ids": 52
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    digit_count = len(str(n))\n",
        "num_ids": 13
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #base case\n    if N == 0:\n        return \"0\"\n    else:\n        #returns the binary number of N\n        return solve(N//2) + str(N%2)\n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    num = str(N)\n    for x in num:\n        total += int(x)\n    print(total)\n    return bin(total)\n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N%2\n        N /= 2\n    return str(sum_of_digits)",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(str(int(i) % 2) for i in str(N))\n",
        "num_ids": 24
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return str(bin(N)[2:]).replace('1', '10').replace('0', '1').replace('10', '0')\n",
        "num_ids": 34
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    # Your code here\n    n = N\n    binary = ''\n    while n!= 0:\n        #print n\n        total += n % 2\n        n = n / 2\n    binary = str(total)\n    return binary\n",
        "num_ids": 61
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    N = str(N)\n    return ''.join(map(str,bin(int(N))[2:]))\n",
        "num_ids": 30
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return bin(N)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    binary = \"\"\n    \n    for i in range(len(str(N))):\n        binary += str(N%2)\n        N //= 2\n    return binary[::-1]\n",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return lst[1::2]\n",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if lst == []:\n        return None\n    else:\n        return lst[0] + add(lst[1:])\n",
        "num_ids": 34
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst[1::2] = [x+2 for x in lst[1::2]]\n    return lst",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert len(lst) > 0 and all([isinstance(x, int) for x in lst]), 'Invalid input'\n    \n    return sum(x for idx, x in enumerate(lst) if idx % 2 == 0)\n    \n",
        "num_ids": 61
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # result = 0\n    # for i,v in enumerate(lst):\n    #     if i % 2 == 0:\n    #         result += v\n    # return result\n",
        "num_ids": 44
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your Code Here\n    for i in range(1, len(lst), 2):\n        lst[i] += lst[i - 1]\n    return lst\n",
        "num_ids": 43
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst2 = []\n    for i in range(1, len(lst), 2):\n        lst2.append(lst[i])\n    return lst2\n",
        "num_ids": 43
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(lst[0::2])\n",
        "num_ids": 13
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    words = s.split()\n    result = ''\n    for word in words:\n        result = result + word[::-1] +''\n    return result[0:len(result)-1]",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import re\n    return re.sub('\\s+','', re.sub('[^\\w\\s]+','', s).strip()).lower()\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # use split to separate words, then sort\n    return \" \".join(sorted(s.split()))\n",
        "num_ids": 27
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Return empty string\n    if s == '':\n        return ''\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    \"\"\"\n    M = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'], ['m', 'n', 'o'], ['p', 'q', 'r','s'], ['t', 'u', 'v'], ['w', 'x', 'y', 'z']]\n    s = s.split()\n    result = []\n    for word in s:\n        new_word = ''\n        for letter in word:\n            i = ord(letter) - ord('a')\n            new_word += M[i][0]\n        result.append(new_word)\n    return''.join(result)\n    \"\"\"\n    if not s:\n        return s\n    s = s.split()\n    s.sort()\n    return''.join(s)\n",
        "num_ids": 208
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = {}\n    for i in range(128):\n        d[chr(i)] = chr(i)\n    # for i in range(128,256):\n    #     d[chr(i)] = chr(i-128)\n    # for i in range(256,512):\n    #     d[chr(i)] = chr(i-256)\n",
        "num_ids": 92
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def to_int(ch):\n        if ch =='':\n            return 0\n        return ord(ch)\n    int_words = ''.join(sorted(s, key=to_int)).split()\n    return''.join(int_words)\n",
        "num_ids": 61
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst[x], key=lambda x: (x[0], -x[1]))\n    \n    \ndef get_row2(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return sorted(lst[x], key=lambda x: (x[0], -x[1]))[::-1]\n    \n",
        "num_ids": 335
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def _sort_by_rows(lst, x):\n        return sorted(lst, key=lambda row: row[x], reverse=True)\n",
        "num_ids": 37
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda r: r[0])[::-1] + sorted(lst, key=lambda r: r[1])\n",
        "num_ids": 38
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    rows = {}\n    rows_sorted = []\n    for row in lst:\n        rows[row[0]] = row\n        rows_sorted.append((row[0], len(row) - 1))\n    rows_sorted.sort(key=lambda x: x[1], reverse=True)\n    for row in rows_sorted:\n        if row[0] == x:\n            return rows[row[0]]\n    return []\n",
        "num_ids": 107
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def get_row_helper(lst, x, row):\n        if not lst:\n            return []\n        if lst[0] == []:\n            return get_row_helper(lst[1:], x, row + 1)\n        if len(lst[0]) == 0:\n            return get_row_helper(lst[1:], x, row + 1)\n        if lst[0][0] == x:\n            return [(row, 0)] + get_row_helper(lst[1:], x, row + 1)\n        return get_row_helper(lst[1:], x, row + 1)\n    row = 0\n    res = get_row_helper(lst, x, row)\n    return sorted(res, key = lambda i: i[0], reverse = True)\n",
        "num_ids": 203
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = sorted(lst, key=lambda row: row[0])\n    lst = sorted(lst, key=lambda row: row[1], reverse=True)\n    return lst[x]\n",
        "num_ids": 51
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(array) < 2:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    odd_sum = sum([array[i] for i in range(0, len(array), 2)])\n    even_sum = sum([array[i] for i in range(1, len(array), 2)])\n",
        "num_ids": 53
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(array)",
        "num_ids": 7
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not array: return []\n    if len(array) == 1: return array\n    return array if sum(array[0:len(array)]) % 2 == 0 else array[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not array:\n        return []\n    # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99\n    # [2, 4, 3, 0, 1, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [2, 4, 3, 0, 1, 5, 6]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, 0]\n    # [6, 5, 4, 3, 2, 1, ",
        "num_ids": 1025
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(1, len(array)):\n        j = i\n        while j > 0 and array[j] < array[j-1]:\n            array[j], array[j-1] = array[j-1], array[j]\n            j -= 1\n    return array\n",
        "num_ids": 70
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            if array[i] + array[j] < 0:\n                array[i], array[j] = array[j], array[i]\n            else:\n                if (array[i] + array[j]) % 2:\n                    array[i], array[j] = array[j], array[i]\n",
        "num_ids": 104
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    rotate = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\n    return ''.join(rotate[ord(x) % 65] for x in s)\n",
        "num_ids": 231
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = \"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for x in s:\n        if x in alphabet:\n            string += alphabet[alphabet.index(x)+2]\n        else:\n            string += x\n    return string\n",
        "num_ids": 69
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string = 'abcdefghijklmnopqrstuvwxyz'\n    key = 'fjkotjfhrektgfjhktgejkfjhrektjhrektgjkfjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektjhrektj",
        "num_ids": 1024
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    dict = {}\n    for i in range(len(alphabet)):\n        dict[alphabet[i]] = alphabet[i+2]\n    return ''.join([dict[c] for c in s])\n",
        "num_ids": 93
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    rotated = s[1:] + s[0]\n    return rotated\n",
        "num_ids": 19
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    key = 'abcdefghijklmnopqrstuvwxyz'\n    new_key = ''\n    for letter in key:\n        new_key += key[(key.find(letter)+2)%26]\n    return new_key[s.find(key[0]):]+new_key[:s.find(key[0])]\n",
        "num_ids": 86
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rotate = {'a':'q','b':'r','c':'s','d':'t','e':'u','f':'v','g':'w','h':'x','i':'y','j':'z','k':'a','l':'b','m':'c','n':'d','o':'e','p':'f','q':'g','r':'h','s':'i','t':'j','u':'k','v':'l','w':'m','x':'n','y':'o','z':'p',' ':' '}\n    res = ''\n    for letter in s:\n        if letter not in rotate:\n            res += letter\n        else:\n            res += rotate[letter]\n    return res\n",
        "num_ids": 183
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rotation = lambda x: x[2:] + x[:2]\n    return \"\".join([rotation(x) for x in s])\n",
        "num_ids": 36
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #TODO: make this work for any string\n    if s:\n        s = s.lower()\n        s = s.replace(' ', '')\n        s = list(s)\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        result = []\n        for i in s:\n            if i in alphabet:\n                j = alphabet.find(i)\n                j += 2\n                if j > 25:\n                    j -= 26\n                result.append(alphabet[j])\n            else:\n                result.append(i)\n        return ''.join(result)\n    else:\n        return ''\n",
        "num_ids": 153
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    newalpha = alpha[len(alpha)::-1] + alpha[:0:-1]\n    return ''.join([newalpha[alpha.find(x)] for x in s])\n",
        "num_ids": 64
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    def next_smallest_helper(lst):\n        if len(lst) < 2:\n            return None\n        else:\n            for idx in xrange(len(lst)-1):\n                if lst[idx] > lst[idx+1]:\n                    return lst[idx+1]\n    return next_smallest_helper(lst)\n",
        "num_ids": 95
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    \n    lst = sorted(lst)\n    \n    return lst[1]\n",
        "num_ids": 40
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[1:])\n",
        "num_ids": 50
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(lst)[1]\n",
        "num_ids": 11
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # lst = sorted(lst)\n    # return lst[1]\n    \n    # two_smallest = lst[:2]\n    # return None if len(two_smallest) < 2 else two_smallest[1]\n    \n    # return sorted(lst)[1]\n    \n    # return min(lst)\n    \n    return sorted(lst)[1]\n    \n    # lst = list(filter(lambda x: x <= lst[1], lst))\n    # return lst[1] if len(lst) > 1 else None\n    \n    # return next(i for i in lst if i < lst[1])\n    \n    # return None if len(lst) < 2 else min(lst[1:])\n    \n    # return None if len(lst) < 2 else lst[1]\n",
        "num_ids": 209
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not lst: return None\n    lst.sort()\n    if len(lst) == 1: return None\n    return lst[1]\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([1 if (S[i:i+2] == \"I\" and i > 1) else 0 for i in range(len(S))])\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for word in S.split() if word.startswith(\"i\"))",
        "num_ids": 22
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(1 for s in S.split() if s.startswith('I'))",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for word in S.split():\n        if word.startswith('i'):\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 62
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(sentence[0] == \"I\" for sentence in S.split('.') + S.split('?') + S.split('!'))\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    \n    for w in S.split():\n        if w == \"I\":\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(i.startswith(\"I\") for i in S.split(\".\"))\n",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 0\n    for word in S.split():\n        if word == \"I\" and S.find(\".\",S.find(word)+1) > S.find(\"?\",S.find(word)+1) and S.find(\"!\",S.find(word)+1) > S.find(\".\",S.find(word)+1):\n            i = i + 1\n    return i\n",
        "num_ids": 90
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(1 for s in S.split(\".\") if s.startswith(\"I\"))\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bored = 0\n    for word in S.split():\n        if word[0].lower() == 'i':\n            bored += 1\n    return bored\n",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if (x == y + z or x == z + y or y == x + z or y == z + x or z == x + y or z == y + x):\n        return (x == int(x) and y == int(y) and z == int(z))\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == y+z or y == x+z or z == x+y:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == int(x) and y == int(y) and z == int(z):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x == int(x) and y == int(y) and z == int(z):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if type(x) is int or type(x) is float:\n        if x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n            return False\n    else:\n        return \"only integers!\"\n",
        "num_ids": 62
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x == y + z or y == x + z or z == x + y",
        "num_ids": 20
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return True if x == y + z or x == z + y or z == x + y else False\n    \n",
        "num_ids": 27
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all([x == sum(y, z), is_int(x), is_int(y), is_int(z)])\n",
        "num_ids": 33
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_int(x):\n        try:\n            int(x)\n        except:\n            return False\n        return True\n    \n    return any(is_int(x),is_int(y),is_int(z))\n    ",
        "num_ids": 58
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # If we are checking the type of x, y, and z, we can do that by running\n    # the following code in the \"try\" block.\n    # >>> try:\n    # >>>   foo = 5\n    # >>> except:\n    # >>>   foo = '5'\n    # >>> \n    # >>> foo\n    # '5'\n    # >>> \n    try:\n        return int(x) == x + y + z and (isinstance(x, int) or isinstance(y, int) or isinstance(z, int))\n    except:\n        return False",
        "num_ids": 137
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = 'aeiou'\n    translated = ''\n    for i, c in enumerate(message):\n        if c.isalpha() and c.upper() not in vowels:\n            translated += c.upper() if c.islower() else c.lower()\n        elif c.upper() in vowels:\n            vowel = c.upper()\n            translated += vowel[1:] + vowel[0]\n        else:\n            translated += c\n    return translated\n",
        "num_ids": 118
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = []\n    for c in message:\n        if c in vowels:\n            new_message.append(get_vowel_after_two_letters(c))\n        else:\n            new_message.append(c)\n    return \"\".join(new_message)\n",
        "num_ids": 91
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def swap_vowels(letter):\n        if letter in \"AEIOUaeiou\":\n            return chr(ord(letter) - 2)\n        return letter\n    return \"\".join(swap_vowels(letter) if letter.isalpha() else letter for letter in message.lower())\n",
        "num_ids": 73
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a','e','i','o','u']\n    \n    message = message.lower()\n    for v in vowels:\n        message = message.replace(v, '%s%s' % (v, v.lower()[1]))\n    return message\n",
        "num_ids": 68
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    message = message.upper()\n    for letter in message:\n        if letter == \" \":\n            continue\n        if letter.isalpha() and letter in \"AEIOU\":\n            message = message.replace(letter, chr(ord(letter) + 2))\n    return message\n",
        "num_ids": 67
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_message = \"\"\n    for char in message:\n        if char.isalpha():\n            new_message += char.upper() if char.isupper() else char.lower()\n        else:\n            new_message += char\n    return new_message\n",
        "num_ids": 61
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    \n    code = ''\n    \n    for i in range(len(message)):\n        if message[i] == 'a':\n            code += 'e'\n        elif message[i] == 'e':\n            code += 'a'\n        elif message[i] == 'i':\n            code += 'o'\n        elif message[i] == 'o':\n            code += 'i'\n        elif message[i] == 'u':\n            code += 'o'\n        else:\n            code += message[i]\n    \n    return code\n",
        "num_ids": 140
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = list(filter(lambda x: x == 1, lst))\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "num_ids": 441
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    return sum(map(lambda x: sum(map(lambda y: int(y), list(str(x)))), primes))\n",
        "num_ids": 407
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    primes = [2,3,5,7]\n    for p in primes:\n        if p in lst:\n            lst.remove(p)\n    \n    # print(lst)\n    \n    r = sum([int(str(n)[0]) for n in lst])\n    # print(r)\n    return r\n",
        "num_ids": 100
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def isPrime(num):\n        if num == 1:\n            return False\n        for i in xrange(2, num / 2 + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    result = 0\n    for i in lst:\n        str_i = str(i)\n        length = len(str_i)\n        for j in xrange(length):\n            if isPrime(int(str_i[j])):\n                result += int(str_i[j])\n    return result\n",
        "num_ids": 131
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    from math import sqrt\n    ret = 0\n    for i in lst:\n        if isPrime(i) and i > ret:\n            ret = i\n    if ret:\n        ret = sum([int(s) for s in str(ret)])\n    return ret\n",
        "num_ids": 66
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst = [int(x) for x in lst]\n    if not lst:\n        return 0\n    else:\n        max = 0\n        for number in lst:\n            if is_prime(number):\n                count = sum([int(x) for x in str(number)])\n                if count > max:\n                    max = count\n        return max",
        "num_ids": 87
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(map(int, str(max(lst))))\n",
        "num_ids": 17
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = [i for i in lst if isPrime(i)]\n    if len(a) == 0:\n        return 0\n    return sum(int(i) for i in str(max(a)))\n",
        "num_ids": 50
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_num = 0\n    max_num_len = 0\n    for i in lst:\n        if isPrime(i):\n            if len(str(i)) > max_num_len:\n                max_num_len = len(str(i))\n                max_num = i\n    return sum([int(i) for i in str(max_num)])",
        "num_ids": 88
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = list(lst)\n    lst.sort()\n    lst.reverse()\n    for i in lst:\n        if is_prime(i):\n            return sum(int(x) for x in str(i))\n    return 0\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # The following are all possible cases of dictionaries\n    # where the values are not strings.\n    return all(isinstance(v, str) for v in dict.values()) \\\n        or all(isinstance(v, str) for v in dict.values())",
        "num_ids": 61
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n    # Replace the code below with your implementation.\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is str and key.lower()!= key:\n            return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            return False\n        if i.islower():\n            pass\n        else:\n            return False\n    return True\ndef check_list_case(list):\n    \"\"\"\n    Given a list, return True if all the strings in the list are in upper case,\n    else return False. The function should return False if the given list is empty.\n    Examples:\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return True.\n    check_list_case([\"apple\", \"banana\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Banana\", \"Mango\"]) should return False.\n    check_list_case([\"apple\", \"Apple\", \"mango\"]) should return False.\n    check_list_case([\"Apple\", \"Apple\", \"Mango\"]) should return False.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for i in list:\n        if type(i)!= str:\n            return False\n        if i.isupper():\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 305
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return True\n    else:\n        for key in dict:\n            if key.isdigit():\n                return False\n            elif key.isalpha():\n                if key.islower():\n                    return True\n                else:\n                    return False\n            else:\n                return False\n",
        "num_ids": 76
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if type(key)!= str or key.isupper() or key.islower():\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key) is not str or (key.isupper() and len(key) > 1):\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(dict) < 1:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not dict:\n        return False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.isupper():\n                return False\n            if key.islower():\n                continue\n        return False\n    return True\n    \ndef check_dict_numeric(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are numeric, \n    else return False. The function should return False if the \n    given dictionary is empty.\n    Examples:\n    check_dict_numeric({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_numeric({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\"}) should return False.\n    check_dict_numeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\"}) should return True.\n    check_dict_numeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"apple\"}) should return False.\n    check_dict_numeric({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\"}) should return True.\n    check_dict_numeric({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return False.\n    check_dict_numeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    for value in dict.values():\n        if not isinstance(value, int) and not isinstance(value, float):\n            return False\n    return True\n    \ndef check_dict_alphabetic(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_alphabetic({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_alphabetic({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\"}) should return True.\n    check_dict_alphabetic({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\"}) should return False.\n    check_dict_alphabetic({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\"}) should return True.\n    check_dict_alphabetic({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return True.\n    check_dict_alphabetic({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.isupper():\n                continue\n            else:\n                return False\n    return True\n    \ndef check_dict_alphanumeric(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_alphanumeric({\"a\":\"apple\", \"b\":\"banana\"}) should return False.\n    check_dict_alphanumeric({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\"}) should return False.\n    check_dict_alphanumeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\"}) should return True.\n    check_dict_alphanumeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\"}) should return True.\n    check_dict_alphanumeric({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return True.\n    check_dict_alphanumeric({\"a\":\"appl\", \"b\":\"banana\", \"c\":\"car\", \"d\":\"dog\", \"e\":\"elephant\"}) should return False.\n    \"\"\"\n    if not dict:\n        return False\n    for key in dict",
        "num_ids": 1024
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not len(dict):\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if isinstance(key, str):\n            if key.islower():\n                continue\n            else:\n                return False\n    return True\n        \n",
        "num_ids": 72
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return []\n    else:\n        return count_up_to(n-1) + [n]\n",
        "num_ids": 33
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return []\n    primes = []\n    for num in xrange(2, n+1):\n        if is_prime(num):\n            primes.append(num)\n            if len(primes) == n:\n                break\n    return primes\n",
        "num_ids": 69
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    primes = [2]\n    x = 3\n    while len(primes) < n:\n        if is_prime(x):\n            primes.append(x)\n        x += 2\n    return primes\n",
        "num_ids": 55
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n    prime = [2,3]\n    i = 2\n    while len(prime) < n:\n        if i % 2 == 0 or i % 3 == 0:\n            i += 1\n            continue\n        prime.append(i)\n        i += 1\n    return prime\n",
        "num_ids": 76
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 1:\n        return []\n    count = 0\n    nums = []\n    while count < n:\n        if is_prime(count):\n            nums.append(count)\n            count += 1\n        else:\n            count += 1\n    return nums\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    prime_num = []\n    num = 2\n    while len(prime_num) < n:\n        prime_num = []\n        for i in range(2, num):\n            if num % i == 0:\n                prime_num.append(i)\n        if len(prime_num) == n:\n            break\n        num += 1\n    return prime_num\n",
        "num_ids": 88
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in range(2, n+1) if all(x % y!= 0 for y in range(2, x))]\n",
        "num_ids": 36
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n    if n == 1:\n        return []\n    prime_numbers = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in prime_numbers:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "num_ids": 109
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    if n < 0:\n        return []\n    return [n for i in range(2, n + 1) if is_prime(i)]\n",
        "num_ids": 118
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = abs(a)\n    b = abs(b)\n    num = 0\n    while a or b:\n        if a:\n            num += a%10*b\n            a //= 10\n        if b:\n            num += b%10*a\n            b //= 10\n    return num\n",
        "num_ids": 73
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def mult_by_digit(n):\n        return n * (10 ** int(math.log10(n)))\n    return sum(mult_by_digit(a) * mult_by_digit(b))\n    ",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = abs(a)\n    b = abs(b)\n    if a < 10 or b < 10:\n        return a*b\n    \n    result = [0]*(a + b)\n",
        "num_ids": 49
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def get_unit_digit(a):\n        \"\"\"Complete the function that takes a single integer and returns \n        the product of the unit digits.\n        Assume the input is always valid.\n        Examples:\n        get_unit_digit(148) should return 16.\n        get_unit_digit(412) should return 4.\n        get_unit_digit(19) should return 1.\"\"\"\n        product = 1\n        if a < 0:\n            a *= -1\n        while a > 0:\n            unit = a % 10\n            product *= unit\n            a = a // 10\n        return product\n",
        "num_ids": 144
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    product = 0\n    for i in range(len(str(a))):\n        product = product * int(str(a)[i]) * int(str(b)[i])\n    return product\n    \nif __name__ == \"__main__\":\n    print multiply(148, 412)\n    print multiply(19, 28)\n    print multiply(2020, 1851)\n    print multiply(14,-15)",
        "num_ids": 96
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sign = (1, -1)[a < 0 < b]\n    a = abs(a)\n    b = abs(b)\n",
        "num_ids": 33
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = 0\n    while b:\n        res += a % 10 * b % 10\n        a = a // 10\n        b = b // 10\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = 0\n    sign = 1\n    if b < 0:\n        sign = -1\n    b = abs(b)\n    while b > 0:\n        digit = a % 10\n        res += digit * digit * sign\n        a //= 10\n        b -= 1\n    if res >= 0:\n        return res\n    return -res\n",
        "num_ids": 82
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a, b = abs(a), abs(b)\n    res = 0\n    for i, j in zip(range(a)[::-1], range(b)[::-1]):\n        temp = i * j\n        res += temp // 10\n        res += temp % 10\n    return res if a >= 0 and b >= 0 else -res\n",
        "num_ids": 82
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    vowels = \"AEIOUaeiou\"\n    \n    return sum([1 for i in range(0,len(s),2) if s[i] in vowels])\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE')",
        "num_ids": 84
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for i in s[::2] if i.isupper()])\n",
        "num_ids": 22
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n",
        "num_ids": 21
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0].isupper():\n            return 1\n        else:\n            return 0\n    else:\n        if s[0].isupper():\n            return 1 + count_upper(s[1:])\n        else:\n            return count_upper(s[1:])\n            ",
        "num_ids": 92
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(s[i].isupper() for i in range(len(s)) if i%2==0)\n    \ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 1\n    count_lower('dBBE') returns 2\n    \"\"\"\n    return sum(s[i].islower() for i in range(len(s)) if i%2==0)\n    \ndef count_vowels(s):\n    \"\"\"\n    Given a string s, count the number of vowels in even indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns 1\n    count_vowels('abcdefg') returns 2\n    count_vowels('dBBE') returns 1\n    \"\"\"\n    return sum(1 for i in range(len(s)) if i%2==0)\n",
        "num_ids": 243
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    upper_count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            upper_count += 1\n    return upper_count\n",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(s[i].isupper() for i in range(len(s) // 2))\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # a, e, i, o, u\n    counter = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            counter += 1\n    \n    return counter\n",
        "num_ids": 56
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Check if the input is a float\n    try:\n        float(value)\n    except ValueError:\n        return None\n    # Initialise a list of integers\n    numbers = [-1000, 1000]\n    # Loop through the list\n    for num in numbers:\n        # If the number is equal to the value, return the integer\n        if num == float(value):\n            return int(num)\n        # If the number is less than the value, return the lower integer\n        elif num < float(value):\n            return int(num)\n        # If the number is more than the value, return the higher integer\n        else:\n            return int(num)\n",
        "num_ids": 155
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from math import floor, ceil\n    return int(floor(value) + (ceil(value) - floor(value))/2)",
        "num_ids": 33
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    value = int(float(value))\n    if abs(value) == value:\n        return value\n    elif value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import math\n    return int(round(float(value)))\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    value_num = float(value)\n    int1 = int(value_num)\n    int2 = int(round(value_num))\n    if abs(int1 - int2) < abs(int1):\n        return int2\n    else:\n        return int1\n",
        "num_ids": 66
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    try:\n        num = int(value)\n        return (num + int(round((float(value) - num) * 10)))/10\n    except ValueError:\n        print(\"Input is not a number.\")\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    int_list = []\n    for i in range(100):\n        int_list.append(i)\n",
        "num_ids": 27
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def next_level(n):\n        return 2*n+1 if n%2 else 2*n\n",
        "num_ids": 26
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n+1) // 2\n        stones.append(n)\n    return stones",
        "num_ids": 56
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pile = [n]\n",
        "num_ids": 9
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pile = [n]\n    n = n - 1\n    while n > 0:\n        if n % 2 == 1:\n            pile.append(n + 1)\n        else:\n            pile.append(n)\n        n = n - 2\n    return pile\n",
        "num_ids": 67
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    levels = []\n    if n % 2 == 0:\n        for i in range(1, n + 1, 2):\n            levels.append(i)\n    else:\n        for i in range(1, n + 1, 2):\n            levels.append(i + 1)\n    return levels\n",
        "num_ids": 71
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = int(n)\n    pile = [n]\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nums = [n]\n    while n // 2!= 0:\n        n = n // 2\n        nums.append(n)\n    return nums\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    levels = []\n    for i in range(n):\n        levels.append(n - i)\n    return levels\n",
        "num_ids": 29
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = n + 1\n        count.append(n)\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stones = []\n    for level in range(n):\n        stones.append(level + 1 if level % 2 else level + 2)\n    return stones",
        "num_ids": 36
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split()",
        "num_ids": 7
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if y >= x:\n        small = y\n        big = x\n    else:\n        small = x\n        big = y\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x >= y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x+1, y)\n    elif x % 2 == 0 and y % 2!= 0:\n        return choose_num(x+1, y)\n    else:\n        return choose_num(x, y-1)\n",
        "num_ids": 89
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x % 2 == 0 and x <= y:\n        if (y-x) % 2 == 0:\n            return (y-x)/2 + x\n        else:\n            return (y-x)/2 + x + 1\n    elif x % 2 == 1 and x <= y:\n        if (y-x) % 2 == 0:\n            return (y-x)/2 + x + 1\n        else:\n            return -1\n    else:\n        if (y-x) % 2 == 0:\n            return -1\n        else:\n            return -1",
        "num_ids": 134
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x > y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num = 0\n    if x == y:\n        return x\n    elif x < y:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                num = i\n    return num\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x >= y:\n        return -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num <= y:\n            return num\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x % 2 == 0 and x <= y:\n        return x\n    else:\n        return -1\n",
        "num_ids": 27
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    \n    if x < y:\n        return -1\n    else:\n        r = int(x / 2)\n        while r > 0 and r <= y:\n            if (r*2) == x:\n                return r\n            else:\n                r -= 1\n        return -1\n        \n    \n        \n        \n",
        "num_ids": 79
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x % 2 == 0:\n        x += 1\n    elif y % 2 == 0:\n        y -= 1\n",
        "num_ids": 30
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    num = 0\n    if x % 2 == 0 and y % 2 == 0:\n        if x < y:\n            while num <= y:\n                if num % 2 == 0:\n                    num += 2\n                    return num\n                else:\n                    num += 2\n        else:\n            while num >= y:\n                if num % 2 == 0:\n                    num -= 2\n                    return num\n                else:\n                    num -= 2\n    else:\n        return -1\n    \n",
        "num_ids": 111
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def helper(n, m):\n        mid = (m + n) // 2\n        if n > m:\n            return -1\n        elif n == m:\n            return '0b0'\n        elif mid % 2 == 0:\n            return helper(n, mid) + helper(mid + 1, m)\n        else:\n            return helper(n, mid) + '0' + helper(mid + 1, m)\n    return helper(n, m)\n",
        "num_ids": 112
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return format(int((n+m)/2), \"b\")\n",
        "num_ids": 17
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    avg = (n+m)/2\n    binavg = bin(avg)\n    return binavg[2:]\n",
        "num_ids": 44
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if m < n:\n        return -1\n    n = n - 1\n    m = m - 1\n    \n    # (n + m + 1) / 2 = n + m\n    # (n + m + 1) / 2 = n + m + 1\n    # m = n + m\n    # n = m - n\n    # n = m - n\n    \n    # n = m - n - 1\n    # n = m - n - 1\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n = m - n\n    # m = n + m\n    # n = m - n - 1\n    # m = n + m - 1\n    # n ",
        "num_ids": 1025
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    return format(int((n + m) / 2), 'b')\n",
        "num_ids": 30
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n, m = min(n, m), max(n, m)\n    \n    # No rounding involved if m - n = 0\n    if m - n == 0:\n        return \"{0:b}\".format(n)\n    \n    # Remove excess bits from n\n    while n > m:\n        n >>= 1\n    \n    # Convert m to binary\n    while m > 0:\n        m >>= 1\n        n |= m\n    \n    return \"{0:b}\".format(n)\n",
        "num_ids": 121
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return \"0b1\"\n    else:\n        a = n + m\n        return bin(a)[2:]\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return bin(round((n+m)/2))[2:]\n",
        "num_ids": 17
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return bin(int((m-n+1)*n/2))[2:]",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            continue\n        else:\n            result.append(i)\n    return sorted(result)\n",
        "num_ids": 49
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # get rid of evens\n    n = [x for x in x if x % 2!= 0]\n    # sort it and return it\n    return sorted(n)\n",
        "num_ids": 42
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_even(x):\n        if x % 2 == 0:\n            return True\n        return False\n    for i in x:\n        if is_even(i):\n            return []\n    return sorted(x)\n",
        "num_ids": 54
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def is_even(digit):\n        return digit % 2 == 0\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def check_digit(x):\n        if x % 2 == 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 31
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(set(str(x) for x in x))\n    \n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set([x for x in x if x % 2 == 0]))\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # if len(x) == 0:\n    #     return []\n    # list_of_digits = [int(i) for i in str(x)]\n    # # print list_of_digits\n    # count = 0\n    # for i in list_of_digits:\n    #     if i%2 == 0:\n    #         count += 1\n    # if count == 0:\n    #     return list_of_digits\n    # else:\n    #     return []\n    return sorted([i for i in x if i%2!=0])\n",
        "num_ids": 136
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(set(str(x)))\n",
        "num_ids": 12
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for number in x:\n        if not has_even_digit(number):\n            result.append(number)\n    result.sort()\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_arr = sorted(arr)\n    new_arr.reverse()\n    return [digit_name(n) for n in new_arr]\n",
        "num_ids": 36
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr = sorted(arr)\n    arr.reverse()\n    result = []\n    for i in arr:\n        if i in range(1, 10):\n            result.append(ONE_TO_NINE[i])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if len(arr) == 0:\n        return []\n    \n    # sort arr\n    arr = sorted(arr)\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    a = arr[:]\n    a.sort()\n    a.reverse()\n    output = []\n    for i in a:\n        if i >= 1 and i <= 9:\n            output.append(names[i-1])\n    return output\n",
        "num_ids": 61
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    \n    def replace(num):\n        if num == 1:\n            return \"One\"\n        elif num == 2:\n            return \"Two\"\n        elif num == 3:\n            return \"Three\"\n        elif num == 4:\n            return \"Four\"\n        elif num == 5:\n            return \"Five\"\n        elif num == 6:\n            return \"Six\"\n        elif num == 7:\n            return \"Seven\"\n        elif num == 8:\n            return \"Eight\"\n        elif num == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n    \n    return [replace(num) for num in reverse_arr]",
        "num_ids": 183
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_arr = []\n    for el in arr:\n        if el > 0 and el <= 9:\n            new_arr.append(str(el))\n    new_arr.sort()\n    new_arr.reverse()\n    new_arr = new_arr[::-1]\n    return new_arr",
        "num_ids": 73
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr.sort()\n    arr.reverse()\n    res = []\n    for elem in arr:\n        if elem in range(1,10):\n            res.append(str(elem))\n        elif elem == 0:\n            res.append('Zero')\n        else:\n            continue\n    return res\n",
        "num_ids": 77
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def sort_num(arr, i):\n        num = str(arr[i])\n        # keep the size of the number between 1 and 9\n        if int(num) > 9 or int(num) < 1:\n            return\n        # sort the number\n        arr[i] = int(num)\n        return arr\n",
        "num_ids": 76
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [\"\".join(sorted(str(n))) for n in arr]\n    \n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    n = n - 1\n    a = f(n)\n    if n%2 == 0:\n        return a + [i*a[n-i] for i in range(1, n/2+1)]\n    else:\n        return a + [sum(range(1, i+1)) for i in range(1, n+1)]\n",
        "num_ids": 96
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = [1] * n\n    for i in range(2, n + 1, 2):\n        lst[i - 1] = lst[i - 1] * i\n    for i in range(1, n, 2):\n        lst[i] = lst[i] + lst[i - 1]\n    return lst\n",
        "num_ids": 84
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    f = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            f.append(math.factorial(i))\n        else:\n            f.append(i)\n    return f\n",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [1 if i % 2 == 0 else i for i in range(1, n+1)]\n",
        "num_ids": 25
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert (n >= 1), \"f(n) = n*f(n-1)\"\n    factorials = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorials.append(i)\n        else:\n            factorials.append(1 + sum(range(1, i)))\n    return factorials",
        "num_ids": 89
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            output.append(i*f(i-1))\n        else:\n            output.append(sum(range(1,i+1)))\n    return output\n",
        "num_ids": 66
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    nums = [1] * n\n    for i in range(1, n):\n        nums[i] = nums[i-1] * i\n    return nums\n",
        "num_ids": 44
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(i * sum(range(1, i + 1)))\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(i)\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return (1, 0)\n    even, odd = 0, 0\n    for i in xrange(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 86
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = n + 1\n    count_even = 0\n    count_odd = 0\n    for i in xrange(n):\n        for j in xrange(n):\n            a = i\n            b = j\n            temp = a*a + b*b\n            if temp <= n*n and temp >= n and str(temp) == str(temp)[::-1]:\n                if a % 2 == 0:\n                    count_even += 1\n                else:\n                    count_odd += 1\n    return (count_even, count_odd)\n",
        "num_ids": 128
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return (1, 0)\n    if n == 2:\n        return (1, 1)\n    if n % 2 == 0:\n        return (0, 0)\n    even = 0\n    odd = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            a = i\n            b = j\n            while a <= b:\n                if str(a) == str(a)[::-1]:\n                    even += 1\n                if str(b) == str(b)[::-1]:\n                    odd += 1\n                a += 1\n                b -= 1\n    return (even, odd)\n",
        "num_ids": 157
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    evens, odds = 0, 0\n    for x in range(1, n + 1):\n        if str(x) == str(x)[::-1]:\n            if x % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n    return evens, odds\n",
        "num_ids": 72
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # idea: if n is odd, all possible palindrome are odd and at least one is even.\n    # if n is even, all possible palindrome are even and at least one is odd.\n    # so the following algorithm can solve it\n    i, j = 1, n\n    even, odd = 0, 0\n    while i < j:\n        if is_palindrome(i):\n            if is_palindrome(j) and is_palindrome(n-i):\n                if is_palindrome(i+j):\n                    even += 1\n                else:\n                    odd += 1\n        else:\n            if is_palindrome(i) and is_palindrome(n-j):\n                if is_palindrome(j-i):\n                    even += 1\n                else:\n                    odd += 1\n        i += 1\n        j -= 1\n    return (even, odd)\n",
        "num_ids": 213
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    return sum([is_palindrome(i) for i in range(1, n+1)])\n",
        "num_ids": 57
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > 0\n",
        "num_ids": 7
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count_even, count_odd = 0, 0\n",
        "num_ids": 14
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = [0, 0]\n    for i in range(1, n + 1):\n        res[even_odd_palindrome_helper(i)] += 1\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for num in arr:\n        if sum([int(x) for x in str(abs(num))]) > 0:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for i in arr if sum([int(j) for j in str(i)]) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        if count_nums_helper(num) > 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(i > 0 and int(str(i)[0]) or i < 0 and int(str(-i)[0]) for i in arr)\n",
        "num_ids": 36
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr_len = len(arr)\n    count = 0\n    for i in xrange(arr_len):\n        if sum(int(x) for x in str(arr[i])) > 0:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for el in arr:\n        if el > 0:\n            num = str(el)\n            for el2 in num:\n                if int(el2) > 0:\n                    result += 1\n                    break\n    return result\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED. GREAT JOB!\\n\"",
        "num_ids": 109
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for x in arr if x > 0)\n",
        "num_ids": 16
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if num >= 0:\n            count += sum([int(digit) for digit in str(num)]) > 0\n        else:\n            count += sum([int(digit) for digit in str(num)[1:] if int(digit) > 0]) > 0\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = len(arr)\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > 0:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len([num for num in arr if num >= 0 and sum(map(int, str(num))) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Base Case\n    if len(arr) <= 1:\n        return True\n    # To sort the array, the max element should be the\n    # last element.\n    max_element = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        else:\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not arr:\n        return True\n    N = len(arr)\n    for i in range(N):\n        #check if any permutation of arr[1:N] is sorted\n        perm = arr[1:N]\n        perm.sort()\n        if perm == arr:\n            return True\n        #check if arr[0] is sorted\n        if arr[0] <= arr[i]:\n            return True\n    return False\n",
        "num_ids": 103
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    n = len(arr)\n    if n==0:\n        return True\n    \n    # let's find the maximum element of the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i]>max_element:\n            max_element = arr[i]\n    \n    # now we need to check if we can rearrange the array in non-decreasing order\n    # by performing right shift operation on the array.\n    # let's take the first element as the starting point\n    start = 0\n    \n    for i in range(1, n):\n        if arr[i]<max_element:\n            if i-start>1:\n                return False\n            else:\n                # if i-start==1, then we can rearrange the array in non-decreasing order\n                # by performing right shift operation on the array.\n                arr[start], arr[i] = arr[i], arr[start]\n                start += 1\n        else:\n            # now we need to check if we can rearrange the array in non-decreasing order\n            # by performing right shift operation on the array.\n            # if i-start==1, then we can rearrange the array in non-decreasing order\n            # by performing right shift operation on the array.\n            arr[start], arr[i] = arr[i], arr[start]\n            start += 1\n            \n    return True\n",
        "num_ids": 339
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr)==0:\n        return True\n    index=0\n    count=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if arr[j]<arr[i]:\n                index=j\n                count+=1\n                break\n    if index==0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i]<arr[index]:\n                arr[i],arr[index]=arr[index],arr[i]\n    if count%2!=0:\n        arr[index],arr[-1]=arr[-1],arr[index]\n    if arr==sorted(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 185
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    n = len(arr)\n    if n <= 1: return True\n    \n    a = arr[n-1]\n    for i in xrange(n-1,0,-1):\n        arr[i] = arr[i-1]\n    \n    arr[0] = a\n    return is_sorted(arr)\n",
        "num_ids": 81
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(2, N):\n        if arr[i] <= arr[i - 1] and arr[i] <= arr[i - 2]:\n            return False\n    return True\n    \nif __name__ == \"__main__\":\n    arr = [3, 4, 5, 1, 2]\n    if move_one_ball(arr):\n        print(\"Yes\")\n    else:\n        print(\"No\")",
        "num_ids": 135
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return True\n    if arr == sorted(arr):\n        return True\n    \n    for i in xrange(len(arr)-1, 0, -1):\n        if arr[i-1] > arr[i]:\n            arr[i-1], arr[i] = arr[i], arr[i-1]\n            arr = arr[:i]+sorted(arr[i:])\n            return True\n    return False\n",
        "num_ids": 111
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return True\n    \n    # 1) Find the minimum element of the array.\n    # 2) Find the maximum element of the array.\n    # 3) If the array is already sorted, return True.\n    # 4) Else, find the index of the minimum element in the array.\n    # 5) Shift the array to the right by the index of the minimum element.\n    # 6) Check if the array is sorted or not, if not, shift the array to the right \n    # by the index of the maximum element.\n    # 7) Return the result.\n    \n    def binary_search(arr, start, end):\n        \"\"\"Returns the index of the element that is at the mid of the array.\n        \n        \"\"\"\n        if start > end:\n            return start\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid - 1] and arr[mid] == arr[mid + 1]:\n            return mid\n        if arr[mid] == arr[mid - 1]:\n            return binary_search(arr, start, mid - 1)\n        elif arr[mid] == arr[mid + 1]:\n            return binary_search(arr, mid + 1, end)\n        else:\n            return mid\n    \n    def shift(arr, index):\n        \"\"\"Shifts the array to the right by the given index\n        \n        \"\"\"\n        for i in range(index, len(arr)):\n            arr[i] = arr[i - 1]\n        arr[index] = None\n    \n    def is_sorted(arr):\n        \"\"\"Returns True if the array is sorted else False.\"\"\"\n        if not arr:\n            return True\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n        return True\n        \n    min_element = min(arr)\n    max_element = max(arr)\n    mid_idx = binary_search(arr, 0, len(arr) - 1)\n    if is_sorted(arr):\n        return True\n    \n    # find the index of the minimum element\n    min_idx = arr.index(min_element)\n    \n    # shift the array\n    shift(arr, min_idx)\n    \n    # check if the array is sorted\n    if is_sorted(arr):\n        return True\n    \n    # shift the array\n    shift(arr, max_element)\n    \n    return is_sorted(arr)",
        "num_ids": 587
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return True\n    if len(arr)==1:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i]<arr[i-1]:\n            for j in range(1, len(arr)):\n                if arr[j]<=arr[i-1]:\n                    arr[i-1], arr[j] = arr[j], arr[i-1]\n                    break\n    return arr==sorted(arr)\n",
        "num_ids": 120
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr)==0:\n        return True\n    n=len(arr)\n    sorted_arr=sorted(arr)\n    #print sorted_arr\n    for i in range(n-1):\n        if sorted_arr[i]>=sorted_arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if len(lst1) == 1:\n        return \"NO\"\n    if (len(lst1) % 2)!= 0:\n        return \"NO\"\n    for i in range(len(lst1)):\n        if i % 2 == 0:\n            if lst1[i] % 2 == 1:\n                return \"NO\"\n        else:\n            if lst1[i] % 2 == 0:\n                return \"NO\"\n    return \"YES\"\n",
        "num_ids": 163
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    count1 = 0\n    count2 = 0\n    for i in lst1:\n        if i%2 == 0:\n            count1 += 1\n    for i in lst2:\n        if i%2 == 0:\n            count2 += 1\n    if count1 == count2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 88
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) == len(lst2):\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 1:\n                if lst2[i] % 2 == 0:\n                    continue\n                else:\n                    return \"NO\"\n            else:\n                if lst2[i] % 2 == 1:\n                    continue\n                else:\n                    return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 119
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for x in lst1:\n        if x % 2!= 0:\n            return \"NO\"\n    for x in lst2:\n        if x % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in lst1:\n        if i%2==1:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 31
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    else:\n        if len(lst1) % 2 == 1:\n            return \"NO\"\n        for i in range(len(lst1)):\n            if (lst1[i] % 2!= 0) and (lst2[i] % 2!= 0):\n                return \"NO\"\n        return \"YES\"\n",
        "num_ids": 103
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for num in lst1:\n        if num % 2!= 0:\n            return \"NO\"\n    for num in lst2:\n        if num % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 57
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if is_even(lst1) == True and is_even(lst2) == True:\n        return \"YES\"\n    elif is_even(lst1) == False or is_even(lst2) == False:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 74
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    hist = {}\n    for c in test:\n        if c in hist:\n            hist[c] += 1\n        else:\n            hist[c] = 1\n    return hist\n    \n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    histo = {}\n    for i in test.split():\n        if i in histo:\n            histo[i] += 1\n        else:\n            histo[i] = 1\n    return histo\n    \ndef count_sort(test):\n    \"\"\"Given a string of space separated lowercase letters, sort them in alphabetical order\n    and return the result as a string.\n    \n    Example:\n    count_sort('a b c') == 'a c b'\n    count_sort('a b b a') == 'a a b b'\n    count_sort('a b c a') == 'a b a c'\n    count_sort('') == ''\n",
        "num_ids": 158
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not test:\n        return {}\n    result = {}\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = {}\n    for letter in test:\n        if letter in result.keys():\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    letters = {}\n    max_count = 0\n    max_letter = ''\n    \n    for char in test:\n        if char not in letters:\n            letters[char] = 0\n        letters[char] += 1\n        if letters[char] > max_count:\n            max_count = letters[char]\n            max_letter = char\n        elif letters[char] == max_count:\n            max_letter += char\n    \n    return {max_letter: max_count}",
        "num_ids": 117
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not test:\n        return {}\n    result = {}\n    test = test.split()\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    test_string = test.lower()\n    unique = set(test_string)\n    histogram = {}\n    for letter in unique:\n        histogram[letter] = test_string.count(letter)\n    return histogram",
        "num_ids": 54
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not test:\n        return {}\n    if type(test) is not str:\n        raise TypeError\n    if not test.strip():\n        return {}\n    d = {}\n    for c in test.strip().lower():\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d\n",
        "num_ids": 86
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Write your code here\n    if len(test) == 0:\n        return {}\n    count = {}\n    for char in test:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = {}\n    for c in test:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    return d\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return ''.join(ch for ch in s if ch not in c), s[::-1] == s\n",
        "num_ids": 27
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = ''\n    for i in s:\n        if i not in c:\n            result = result + i\n    \n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n    \n    \nif __name__ == '__main__':\n    assert reverse_delete(\"abcde\",\"ae\") == ('bcd',False)\n    assert reverse_delete(\"abcdef\",\"b\") == ('acdef',False)\n    assert reverse_delete(\"abcdedcba\",\"ab\") == ('cdedc',True)",
        "num_ids": 135
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = \"\"\n    for i in s:\n        if i!= c:\n            result = result + i\n    if result[::-1] == result:\n        return (result,True)\n    return (result,False)\n",
        "num_ids": 56
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    r = s[::-1]\n    s = list(s)\n    for i in range(0, len(s)):\n        if s[i] == c:\n            s[i] = ''\n    s = ''.join(s)\n    if s == r:\n        return (r, True)\n    else:\n        return (r, False)\n",
        "num_ids": 88
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in s:\n        if i not in c:\n            result.append(i)\n    if ''.join(result) == ''.join(result)[::-1]:\n        return (''.join(result),True)\n    else:\n        return (''.join(result),False)",
        "num_ids": 74
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #print(len(s),len(c))\n    for i in s:\n        if i == c:\n            s = s.replace(i,'',1)\n    if s == s[::-1]:\n        return (s,'True')\n    else:\n        return (s,'False')\ndef find_greater_numbers(nums):\n    \"\"\"Task\n    Write a function that takes a list of numbers and returns a list of the indices of the elements that are \n    greater than their neighbors.\n    Note: You should treat two numbers as equal if their digits are the same\n    Example\n    For nums = [8, 3, 4, 6, 5], the output should be [2, 1, 4, 3, 0]\n    For nums = [1, 3, 4, 5], the output should be [0, 0, 0, 0]\n    For nums = [6, 5, 4, 1], the output should be [0, 1, 0, 0]\n    \"\"\"\n    result = [0 for i in nums]\n    for i,n in enumerate(nums):\n        if i == 0:\n            if n > nums[i+1]:\n                result[i] = i\n        elif i == len(nums)-1:\n            if n > nums[i-1]:\n                result[i] = i\n        else:\n            if n > nums[i+1] and n > nums[i-1]:\n                result[i] = i\n    return result\n",
        "num_ids": 355
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(s)):\n        if c[0]==s[i]:\n            del s[i]\n    return s[::-1], s==s[::-1]",
        "num_ids": 48
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = list(s)\n    for i in range(len(s)):\n        if c == s[i]:\n            del s[i]\n    if s == s[::-1]:\n        return ''.join(s),True\n    else:\n        return ''.join(s),False\n",
        "num_ids": 72
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = list(s)\n    for c in s:\n        if c in c:\n            s.remove(c)\n    if s == s[::-1]:\n        return ''.join(s), True\n    else:\n        return ''.join(s), False",
        "num_ids": 65
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s_list = list(s)\n    c_list = list(c)\n    for i in range(len(s)):\n        if s_list[i] in c_list:\n            s_list[i] = ''\n    s_str = ''.join(s_list)\n    if s_str == s_str[::-1]:\n        return (s_str,True)\n    else:\n        return (s_str,False)\n",
        "num_ids": 110
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [\n        str(len([char for char in lst[i] if int(char) % 2!= 0])) +\n        'n the str' + str(i+1) +'of the'+ str(len(lst)) + 'nput.'\n        for i in range(len(lst))\n    ]",
        "num_ids": 79
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [len([str(i) for i in range(len(j)) if int(j[i])%2!=0]) for j in lst]\n",
        "num_ids": 39
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = [len(str(l)) for l in lst]\n    odd_counts = [\"the number of odd elements \" + str(i) + \"n the str\" + str(i) + \"ng \" + str(l) + \" of the \" + str(l) + \"nput.\" for i, l in enumerate(count)]\n    return odd_counts\n",
        "num_ids": 89
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in lst:\n        if i[0] == '1':\n            count += 1\n        else:\n            count += 0\n    return [(\"the number of odd elements %s the str%sng %s of the %snput.\" % (count, count, count, count))]\n    \n",
        "num_ids": 77
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    counter = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        counter.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count,i[0],i,i))\n    return counter\n",
        "num_ids": 86
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for char in lst:\n        if char == \"0\":\n            count = count\n        else:\n            count += 1\n    return [\"the number of odd elements \" + str(count) + \"n the str\" + str(lst) + \" of the \" + str(lst) + \"nput.\"]\n",
        "num_ids": 80
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst2 = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j)%2!= 0:\n                count += 1\n        lst2.append(\"the number of odd elements \"+str(count)+\" the str4ng \"+str(i)+\" of the \"+str(len(i))+\"n input.\")\n    return lst2\n",
        "num_ids": 95
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [\"the number of odd elements %sn the str%sng %sn the %snput.\" % (str(len(i)),str(i).index('n'),str(i).count('n'),str(i)) for i in lst]\n",
        "num_ids": 58
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    def digit_count(strng):\n        count = 0\n        for each in strng:\n            if int(each) % 2!= 0:\n                count += 1\n        return count\n    return [digit_count(strng) for strng in lst]\n",
        "num_ids": 73
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [len(i) - len(list(filter(lambda x: int(x) % 2!= 0, i))) for i in lst]\n    \n",
        "num_ids": 39
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_sums = [nums[0]] * len(nums)\n    min_sums[0] = nums[0]\n    for i in range(1, len(nums)):\n        min_sums[i] = min(nums[i], min_sums[i - 1] + nums[i])\n    return min(min_sums)\n",
        "num_ids": 92
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(nums)\n    max_val = float('-inf')\n    min_val = float('inf')\n    for i in xrange(n):\n        max_val = max(max_val, nums[i])\n        min_val = min(min_val, max_val)\n    return min_val\n",
        "num_ids": 80
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    min_sum = nums[0]\n    sum = 0\n    i = 0\n    j = 0\n    while i < len(nums):\n        if sum < 0:\n            sum = nums[i]\n        else:\n            sum += nums[i]\n        min_sum = min(min_sum, sum)\n        i += 1\n    return min_sum\n",
        "num_ids": 91
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # NOTE: there can be negative numbers in the array, and it is not necessary to count the negatives\n    # BUT, we need to count the sub-arrays, so we need to avoid negative sub-arrays\n    # NOTE: the key point is to move the min value forward, because we want to include it, and\n    # we can move the min value forward even if we need to move the max value back. \n    \n    curr_sum = 0\n    curr_min = float('inf')\n    n = len(nums)\n    for i in range(n):\n        curr_sum += nums[i]\n        \n        # check if we have found a sub-array with minimum sum\n        if curr_sum < curr_min:\n            curr_min = curr_sum\n            \n        # check if we have found a sub-array with minimum sum\n        if curr_sum <= 0:\n            curr_min = float('inf')\n            \n        # update the min value for the next iteration\n        curr_sum -= nums[i]\n        \n    return curr_min\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
        "num_ids": 1024
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not nums:\n        return 0\n    min_sum = nums[0]\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return min_sum\n",
        "num_ids": 88
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not nums:\n        return 0\n    min_sum = min_sum_sofar = nums[0]\n    for i in xrange(1, len(nums)):\n        min_sum = min(min_sum_sofar, min_sum_sofar + nums[i])\n        min_sum_sofar = min(min_sum, min_sum_sofar)\n    return min_sum\n",
        "num_ids": 96
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return 0\n    current_sum = 0\n    min_sum = float(\"inf\")\n    i = 0\n    while i < len(nums):\n        current_sum += nums[i]\n        if current_sum > min_sum:\n            current_sum = nums[i]\n        elif current_sum < min_sum:\n            min_sum = current_sum\n        i += 1\n    return min_sum\n    \ndef maxProduct(nums):\n    \"\"\"\n    Given an array of integers nums, you need to find the maximum product of any non-empty sub-array \n    of nums.\n    Example\n    maxProduct([2,3,-2,4]) == 24\n    maxProduct([-2,0,-1]) == 0\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    current_max = nums[0]\n    current_min = nums[0]\n    max_product = nums[0]\n    for i in range(1, len(nums)):\n        current_max = max(nums[i], current_max * nums[i])\n        current_min = min(nums[i], current_min * nums[i])\n        max_product = max(max_product, current_max)\n    return max_product\n",
        "num_ids": 322
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    curr_sum = 0\n    res = sys.maxsize\n    for num in nums:\n        if curr_sum > 0:\n            curr_sum += num\n        else:\n            curr_sum = num\n        res = min(res, curr_sum)\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(nums)\n    curr_sum = 0\n    left = 0\n    min_sum = 0\n    for i in xrange(n):\n        curr_sum += nums[i]\n        if curr_sum < 0:\n            curr_sum = 0\n            left = i + 1\n        min_sum = min(min_sum, curr_sum)\n",
        "num_ids": 94
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    globalMin, currMin = float('inf'), 0\n    for num in nums:\n        if currMin >= 0:\n            currMin += num\n        else:\n            currMin = num\n        if currMin < globalMin:\n            globalMin = currMin\n    return globalMin\n",
        "num_ids": 73
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def calculate_bucket_distance(start, end, bucket):\n        # x_distance = abs(start[0] - end[0])\n        # y_distance = abs(start[1] - end[1])\n        # if x_distance > y_distance:\n        #     return y_distance\n        # else:\n        #     return x_distance\n        return abs(start[0] - end[0]) + abs(start[1] - end[1])\n",
        "num_ids": 112
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    def find_max(grid):\n        r, c = len(grid), len(grid[0])\n        left = [0] * c\n        for i in range(r):\n            temp = [0] * c\n            for j in range(c):\n                if grid[i][j] == 1:\n                    left[j] += 1\n                temp[j] = left[j]\n            left = temp\n        right = [0] * c\n        for i in range(c-1, -1, -1):\n            if grid[-1][i] == 1:\n                right[i] += 1\n            right[i] += right[i+1]\n        return right[0]\n",
        "num_ids": 167
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    # iterate through the grid\n    for row in range(len(grid)):\n        # iterate through the column of the grid\n        for col in range(len(grid[row])):\n            # iterate through the possible bucket capacities\n            for capacity_ in range(len(grid[row])):\n                # set the max capacity to the current capacity\n                max_capacity = capacity_\n                # set the current capacity to the current capacity\n                current_capacity = 0\n                # iterate through the grid\n                for row_ in range(len(grid)):\n                    # iterate through the column of the grid\n                    for col_ in range(len(grid[row_])):\n                        # iterate through the possible bucket capacities\n                        for capacity_ in range(len(grid[row_])):\n                            # set the current capacity to the current capacity\n                            current_capacity += grid[row_][col_]\n                            # if the current capacity is greater than the max capacity\n                            if current_capacity > max_capacity:\n                                # set the max capacity to the current capacity\n                                max_capacity = current_capacity\n                # if the max capacity is not the same as the current capacity\n                if max_capacity!= current_capacity:\n                    # add one to the count\n                    count += 1\n",
        "num_ids": 296
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    row_count, col_count = len(grid), len(grid[0])\n    bucket_capacity = capacity\n    \n    def get_bucket_id(i, j):\n        return i * col_count + j\n",
        "num_ids": 55
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    m, n = len(grid), len(grid[0])\n",
        "num_ids": 17
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    \n    # calculate the amount of water inside each well\n    water_per_well = grid[0][0]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                water_per_well += grid[i][j]\n    \n    # fill the wells with water\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 0:\n                grid[i][j] = 1\n            elif grid[i][j] > 1:\n                grid[i][j] -= 1\n                water_per_well -= 1\n    \n    # count the number of times we need to lower the buckets\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] > 0:\n                cnt += 1\n    \n    return math.ceil(water_per_well / capacity) + cnt\n",
        "num_ids": 251
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def dfs(grid, cap, row, col):\n        nonlocal visited\n        if visited[row][col] == -1:\n            return 0\n        if visited[row][col] == 1:\n            return visited[row][col]\n        visited[row][col] = -1\n        # update the capacity\n        new_cap = cap - grid[row][col]\n        if new_cap < 0:\n            return visited[row][col]\n        if row - 1 >= 0:\n            res = dfs(grid, new_cap, row-1, col)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if row + 1 < len(grid):\n            res = dfs(grid, new_cap, row+1, col)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if col - 1 >= 0:\n            res = dfs(grid, new_cap, row, col-1)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        if col + 1 < len(grid[0]):\n            res = dfs(grid, new_cap, row, col+1)\n            if res == 0:\n                visited[row][col] = 0\n            else:\n                visited[row][col] = res + 1\n        visited[row][col] = 1\n        return visited[row][col]\n    visited = [[-1 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    res = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                cap = capacity\n                res += dfs(grid, cap, i, j)\n    return res\n",
        "num_ids": 485
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    x = len(grid)\n    y = len(grid[0])\n    bucket_count = [0]*(x*y)\n    for i in range(x):\n        for j in range(y):\n            bucket_count[i*y+j] = grid[i][j]\n",
        "num_ids": 73
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    m, n = len(grid), len(grid[0])\n    dp = [[math.inf] * (n + 1) for _ in range(m + 1)]\n    dp[0][0] = 0\n    for i in range(m):\n        for j in range(n):\n            dp[i + 1][j + 1] = dp[i][j + 1] + 1 if grid[i][j] == 1 else dp[i][j + 1]\n    return dp[m][n]\n",
        "num_ids": 122
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (len(str(bin(x))), x))\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: [len(bin(x)[2:]), x])\n",
        "num_ids": 25
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ret = []\n    counts = {}\n    for num in arr:\n        bits = bin(num)[2:]\n        count = bits.count('1')\n        if count not in counts:\n            counts[count] = [num]\n        else:\n            counts[count].append(num)\n    for count in sorted(counts.keys()):\n        ret.extend(sorted(counts[count]))\n    return ret\n",
        "num_ids": 106
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    bin_array = [str(bin(i)) for i in arr]\n    bin_array = list(map(lambda x: len(x) - x.index('1') - 1, bin_array))\n    return sorted(arr, key=lambda x: (bin_array[arr.index(x)], x))",
        "num_ids": 75
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    ones = [bin(x)[2:].count('1') for x in arr]\n    decimal = [bin(x)[2:].rjust(ones[i], '0')[::-1].count('1') for i, x in enumerate(arr)]\n    return [arr[i] for i in sorted(range(len(decimal)), key = lambda x: (decimal[x], ones[x]))]\n",
        "num_ids": 101
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = defaultdict(int)\n    for num in arr:\n        count[num] += 1\n    return sorted(arr, key=lambda x: (count[x], x))\n",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def key(x):\n        return x[0], x[1]\n    return sorted(arr, key = key)\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = [0]*32\n    for n in arr:\n        nums[n] += 1\n    return [x for _, x in sorted(zip(nums, arr))]\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bits = [count_bits(a) for a in arr]\n    return sorted(arr, key=lambda x: (bits[arr.index(x)], x))\n",
        "num_ids": 41
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [w for w in re.findall(r'\\w+', s) if len(w)==n]\n",
        "num_ids": 30
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import re\n    return re.findall(r\"\\w+\", s)\n",
        "num_ids": 21
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in s.split() if x.count('a') == n]\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if s == \"\":\n        return []\n    n = int(n)\n    words = s.split(\" \")\n    return [word for word in words if len(word) == n and word.isalpha() and word.count(\"a\") == n]\n",
        "num_ids": 62
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(\n        [word for word in re.split(\"\\s+\", s) if re.search(\"[^aeiou]{%d}\" % n, word)]\n    )\n",
        "num_ids": 46
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [' '.join(filter(lambda x: x.isalpha(), s.split(' '))).split(' ')]\n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = []\n    for word in s.split():\n        if len(word) == n:\n            consonants = 0\n            for letter in word:\n                if letter not in 'aeiou':\n                    consonants += 1\n            if consonants == n:\n                words.append(word)\n    return words\n",
        "num_ids": 77
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\"",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = set('aeiou')\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n",
        "num_ids": 55
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import re\n    return re.search('[AEIOU][aeiou]', word).group(",
        "num_ids": 25
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Find the first vowel and find the index of that vowel\n    first_vowel_index = -1\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)):\n        if word[i] in vowels:\n            first_vowel_index = i\n            break\n    # If no vowels found, return empty string\n    if first_vowel_index == -1:\n        return \"\"\n    # Find the index of the next vowel and compare its distance to the first vowel\n    # If distance is greater, then return the first vowel\n    last_vowel_index = -1\n    for i in range(first_vowel_index + 1, len(word)):\n        if word[i] in vowels:\n            last_vowel_index = i\n            break\n    if last_vowel_index == -1:\n        return \"\"\n    # Check if the difference between last vowel and first vowel is more than 1\n    if abs(first_vowel_index - last_vowel_index) == 1:\n        return \"\"\n    return word[last_vowel_index]\n",
        "num_ids": 274
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Find indices of all vowels\n    vowels = re.findall(\"[aeiou]\", word)\n    # Find indices of all consonants\n    consonants = re.findall(\"[^aeiou]\", word)\n    if not vowels:\n        return \"\"\n    if not consonants:\n        return \"\"\n    # Find the closest vowel to the right\n    vowels.sort(key = lambda x: x.start, reverse=True)\n    consonants.sort(key = lambda x: x.start, reverse=True)\n    v = vowels[0].start\n    c = consonants[0].start\n    left = word[:c]\n    right = word[v:]\n    if right:\n        if right[0] in \"aeiou\":\n            return right[0]\n    return \"\"\n",
        "num_ids": 198
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = list(word)\n    l = len(s)\n    s.reverse()\n    \n    i = 0\n    while i < l:\n        if s[i] not in \"aeiou\":\n            i += 1\n        else:\n            j = i\n            while j < l:\n                if s[j] not in \"aeiou\":\n                    break\n                else:\n                    j += 1\n            if j < l:\n                return s[j]\n            else:\n                return \"\"\n    return \"\"\n",
        "num_ids": 124
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = \"AEIOUaeiou\"\n    if word == \"\":\n        return \"\"\n",
        "num_ids": 26
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = {'a','e','i','o','u','y'}\n    consonants = {'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z'}\n    if len(word) <= 1:\n        return \"\"\n    start_ind = 0\n    end_ind = len(word) - 1\n    while start_ind <= end_ind:\n        if word[start_ind] in consonants and word[end_ind] in consonants:\n            break\n        start_ind += 1\n        end_ind -= 1\n    # we get here when the start_ind and end_ind meet\n    if start_ind == end_ind:\n        return \"\"\n    if word[start_ind] in vowels:\n        if end_ind == len(word) - 1:\n            return \"\"\n        return word[start_ind]\n    # start_ind is on a consonant and end_ind is on a vowel\n    if word[end_ind] in vowels:\n        return word[end_ind]\n    return \"\"\n",
        "num_ids": 271
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return closest_vowel(word)\n",
        "num_ids": 12
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_balanced(s):\n        # print s\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0 or stack.pop()!= '(':\n                    return False\n",
        "num_ids": 73
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 'Yes' if is_balanced(lst) else 'No'\n",
        "num_ids": 19
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    matching = {}\n    for c in lst[0]:\n        if c not in matching:\n            matching[c] = 0\n        matching[c] += 1\n    for c in lst[1]:\n        if c not in matching:\n            return 'No'\n        matching[c] -= 1\n        if matching[c] < 0:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 98
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    for i in lst:\n        if i == '(':\n            stack.append(i)\n        elif i == ')' and len(stack)!= 0:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n",
        "num_ids": 78
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_balanced(s):\n        stack = []\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            elif p == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        return len(stack) == 0\n    def match_stack(s, stack):\n        for p in s:\n            if p == '(':\n                stack.append(p)\n            elif p == ')':\n                if len(stack) == 0:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        return len(stack) == 0\n    def helper(s, stack):\n        if s == '':\n            return match_stack(stack, [])\n        if s[0] == '(' and is_balanced(s[1:]):\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n            return helper(s[1:], stack)\n        if s[0] == ')' and is_balanced(s[1:]):\n            return helper(s[1:], stack)\n        return False\n    if len(lst) == 0:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes' if is_balanced(lst[0]) else 'No'\n    return 'Yes' if helper(lst[0], []) and helper(lst[1], []) else 'No'\n",
        "num_ids": 359
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return match_parens_helper(lst, 0)\n",
        "num_ids": 17
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    stack = []\n    for i in range(len(lst[0])):\n        stack.append(lst[0][i])\n    for i in range(1, len(lst)):\n        current = lst[i]\n        for j in range(len(current)):\n            if current[j] == ')':\n                if len(stack) > 0:\n                    if stack[-1] == '(':\n                        stack.pop()\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                stack.append(current[j])\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 170
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr = sorted(arr, reverse = True)\n    return arr[:k]\n",
        "num_ids": 21
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_arr = [0] * k\n    for i in range(k):\n        max_arr[i] = arr[i]\n",
        "num_ids": 34
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]",
        "num_ids": 18
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # set up a new arr with the same length as arr\n    new_arr = [None] * len(arr)\n    # take k elements from the end\n    for i in range(len(arr) - k, len(arr)):\n        new_arr[i] = arr[i]\n    # sort the new arr\n    new_arr.sort()\n    # return the new arr\n    return new_arr[-k:]",
        "num_ids": 101
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr = sorted(arr, key=abs, reverse=True)\n    return arr[:k]\n",
        "num_ids": 25
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    result = []\n    for i in xrange(k):\n        max_val = arr[0]\n        max_idx = 0\n        for j in xrange(1, len(arr)):\n            if arr[j] > max_val:\n                max_val = arr[j]\n                max_idx = j\n        result.append(max_val)\n        arr.pop(max_idx)\n    return result\n",
        "num_ids": 114
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    n = len(arr)\n    for i in range(k):\n        max_index = arr.index(max(arr))\n        result.append(arr[max_index])\n        arr[max_index] = -1\n",
        "num_ids": 60
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = sorted(arr, reverse=True)[:k]\n    return res\n",
        "num_ids": 20
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Time: O(n), Space: O(k)\n    arr.sort()\n    return arr[len(arr)-k:]\n",
        "num_ids": 33
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def k_max_index(arr, k):\n        \"\"\"\n        Given an array arr of integers and a positive integer k, return the first \n        index of the kth max element in arr.\n",
        "num_ids": 47
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    for i in lst:\n        if i%2 == 0:\n            res += i\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = [x for x in lst if x % 2!= 0]\n    return sum(lst)\n",
        "num_ids": 29
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(lst[::2])\n    \nassert(solution([5, 8, 7, 1]) == 12)\nassert(solution([3, 3, 3, 3, 3]) == 9)\nassert(solution([30, 13, 24, 321]) == 0",
        "num_ids": 65
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, len(lst), 2):\n        total += lst[i]\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2)",
        "num_ids": 33
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i]%2])",
        "num_ids": 33
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2])\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum",
        "num_ids": 31
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([i[0:k] for i in arr])\n",
        "num_ids": 17
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) < k:\n        return 0\n    res = 0\n    for i in range(k):\n        res += arr[i]\n    for i in range(k, len(arr)):\n        res += arr[i]\n        if res > (10 ** 2):\n            res -= arr[i - k]\n        elif res > (10):\n            res -= arr[i - k]\n        elif res > 0:\n            break\n    return res\n",
        "num_ids": 113
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr = [int(x) for x in arr]\n    new_arr = arr[:k]\n    acc = 0\n    for n in new_arr:\n        acc += n\n    return acc\n",
        "num_ids": 49
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # base case\n    if k == 0:\n        return 0\n    # else\n    return add_elements(arr[k:], k - 1) + arr[:k][0] * 2 + add_elements(arr[k:], k - 1) + arr[:k][-1]\n",
        "num_ids": 72
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(sorted(arr)[:k])\n",
        "num_ids": 14
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if arr == []:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    if k == 1:\n        return sum(arr)\n    k = min(n, k)\n    max_elem = 10 ** (k-1)\n    min_elem = 10 ** (k-2)\n    nums = 0\n    for i in xrange(k):\n        if arr[i] > max_elem:\n            nums += max_elem\n        elif arr[i] < min_elem:\n            nums += min_elem\n        else:\n            nums += arr[i]\n    return nums\n",
        "num_ids": 168
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(arr[:k])",
        "num_ids": 10
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    odd_collatz_list = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        n = (n+1)//2 if n % 2 == 0 else 3*n+1\n    return odd_collatz_list\n",
        "num_ids": 72
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n/2) + [n]\n        else:\n            return get_odd_collatz(3*n + 1) + [n]\n",
        "num_ids": 69
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    odds = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        odds.append(n)\n    return sorted(odds)\n",
        "num_ids": 75
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n / 2 if n % 2 == 0 else (3 * n) + 1\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if n < 1:\n        return None\n",
        "num_ids": 14
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    odd_collatz_seq = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_collatz_seq.append(n)\n        n = n / 2 if n % 2 == 0 else (3 * n) + 1\n    odd_collatz_seq.append(1)\n    return sorted(odd_collatz_seq)\n",
        "num_ids": 87
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    return get_odd_collatz(get_odd(n)) + [n]\n",
        "num_ids": 34
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 1: return []\n    collatz_seq = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(collatz_seq)\n",
        "num_ids": 77
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # TODO: implement me!\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    collatz_nums = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n        collatz_nums.append(n)\n    return collatz_nums\n",
        "num_ids": 67
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n",
        "num_ids": 129
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def valid_date_regex(date):\n        month_list = ['01', '03', '05', '07', '08', '10', '12']\n        day_list = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n        day = date[0:2]\n        month = date[2:4]\n        year = date[4:]\n        if len(day) > 2 or len(month) > 2 or len(year) > 4:\n            return False\n        if not day[0].isdigit() or not day[1].isdigit() or len(day) > 2 or not year.isdigit():\n            return False\n        return True\n",
        "num_ids": 242
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Implement me\n    pass\n    return True",
        "num_ids": 12
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    months = ['jan', 'feb','mar', 'apr','may', 'jun', 'jul', 'aug','sep', 'oct', 'nov', 'dec']\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if len(date) == 0:\n        return False\n    else:\n        date_split = date.split('-')\n        if len(date_split)!= 3:\n            return False\n        else:\n            if int(date_split[0]) < 1 or int(date_split[0]) > 12:\n                return False\n            if int(date_split[1]) < 1 or int(date_split[1]) > 31:\n                return False\n            if int(date_split[2]) < 1 or int(date_split[2]) > 3000:\n                return False\n            if (int(date_split[0]) == 2 and int(date_split[1]) == 29 and int(date_split[2]) > 0) or (int(date_split[0]) == 4 or int(date_split[0]) == 6 or int(date_split[0]) == 9 or int(date_split[0]) == 11) and int(date_split[1]) < 1 or (int(date_split[0]) == 2 and int(date_split[1]) > 28):\n                return False\n            return True\n",
        "num_ids": 334
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import re\n    \n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import re\n    \n    date_regex = re.compile('(^\\d{1,2})\\-(\\d{1,2})\\-(\\d{4})$')\n    date_match = date_regex.match(date)\n",
        "num_ids": 61
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    months = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    date = [int(x) for x in date.split('-')]\n    if len(date)!= 3:\n        return False\n    return (1 <= date[0] <= 12 and 1 <= date[1] <= months[date[0]] and 1 <= date[2] <= 10000)\n",
        "num_ids": 123
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import string\n    if not txt:\n        return txt\n    if not isinstance(txt,str):\n        return txt\n    if not txt.strip():\n        return txt\n    elif \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    elif not txt.isalpha():\n        return txt\n    else:\n        return list(filter(lambda x: len(x) % 2!= 0, map(lambda x: x,string.lowercase[0:len(string.lowercase)//2+1])))\n",
        "num_ids": 154
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # return [x.strip() for x in txt.split()]\n    return txt.split()\n",
        "num_ids": 27
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [item.strip() for item in txt.split()]\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    txt = txt.lower()\n    for c in \",.!?':;(){}[]-_+= \":\n        txt = txt.replace(c, \" \")\n    return txt.split()\n",
        "num_ids": 51
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = txt.split(' ')\n    return result\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # loop over list\n    # if 2 consecutive elements have different values\n    # return False\n    # return True\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst2 = lst[:]\n    lst2.sort()\n    if lst2 == lst:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if lst == sorted(lst):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 1:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # First, reverse the list, so that you can compare it\n    # with the original list to see if the reverse is the same as\n    # the original.\n    lst = lst[::-1]\n    # Then, start comparing each number to the next one\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # put any preprocessing logic here\n    \n    # check for valid inputs\n    if not isinstance(lst, list):\n        return False\n    if len(lst) == 0:\n        return True\n    \n    # sort the list\n    lst.sort()\n    \n    # compare adjacent items\n    for i in range(0, len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 114
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(lst)\n    for i in range(n):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not interval1 or not interval2:\n        return \"NO\"\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] > interval2[1] or interval1[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 88
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 39
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"NO\"\n",
        "num_ids": 7
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if interval1[0] >= interval1[1]:\n        return \"NO\"\n    if interval2[0] >= interval2[1]:\n        return \"NO\"\n    if interval1[0] < interval2[0]:\n        return \"NO\"\n    if interval1[1] > interval2[1]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 89
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # (a,b) and (c,d) => (a,b) and (d,c) => (a, d)\n    def overlaps(interval1, interval2):\n        a, b = interval1\n        c, d = interval2\n        return (a < c and c < b) or (a < d and d < b) or (c < a and a < d) or (c < b and b < d)\n    def intersects(interval1, interval2):\n        return overlaps(interval1, interval2) and overlaps(interval2, interval1)\n    return \"NO\" if not intersects(interval1, interval2) else \"YES\"\n",
        "num_ids": 163
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"NO\"\n",
        "num_ids": 7
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if interval1[1] < interval2[0] or interval1[0] > interval2[1]:\n        return \"NO\"\n    elif interval1[1] < interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 64
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 'NO'",
        "num_ids": 6
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # arr = list(arr)\n    # arr = list(filter(lambda x: x!= 0, arr))\n    # if len(arr) == 0:\n    #     return None\n    # arr = list(map(lambda x: int(x), arr))\n    # arr = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    # return sum(list(map(lambda x: x * arr.count(x), [1, -1, 0])))\n",
        "num_ids": 119
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    return sum([abs(x) for x in arr]) * prod([sign(x) for x in arr])\n",
        "num_ids": 41
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return None if not arr else abs(reduce(operator.mul, arr, 1))",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n    mag = [abs(x) for x in arr]\n    return sum(mag) * reduce(lambda x, y: x * y, [sign(x) for x in arr])\n",
        "num_ids": 54
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return None if len(arr) == 0 else sum(sign * abs(arr[i]) for i, sign in enumerate(arr)) * product(-1, 1) if len(arr) > 0 else 0\n",
        "num_ids": 49
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    sign = 1\n    total = 0\n    for n in arr:\n        sign *= n\n        if sign < 0:\n            total += abs(sign)\n        elif sign > 0:\n            total += sign\n    return total\n",
        "num_ids": 66
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    product = arr[0]\n    for item in arr[1:]:\n        product *= abs(item)\n    return product\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    signs = [1, -1, 0]\n    return sum([x * y * z for x in signs for y in signs for z in signs if x * y * z!= 0])\n",
        "num_ids": 46
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m, n = len(grid), len(grid[0])\n    if m == n == 1:\n        return grid[0]\n",
        "num_ids": 33
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from collections import deque\n    rows, cols = len(grid), len(grid[0])\n    q = deque()\n    visited = set()\n    directions = ((0,1), (1,0), (-1,0), (0,-1))\n    def check(row, col):\n        if row < 0 or col < 0 or row >= rows or col >= cols:\n            return False\n        if (row, col) in visited:\n            return False\n        return True\n    def bfs():\n        while len(q) > 0:\n            i, j = q.popleft()\n            visited.add((i, j))\n            if grid[i][j] == k:\n                return True\n            for x, y in directions:\n                if check(i+x, j+y):\n                    q.append((i+x, j+y))\n        return False\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == k:\n                q.append((i, j))\n    result = []\n    while q:\n        if not bfs():\n            return result\n        result.append(grid[q[0][0]][q[0][1]])\n        q.popleft()\n    return result\n",
        "num_ids": 307
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"\"\"\n    # Method 1:\n    # Time complexity: O(N*N*k)\n    # Space complexity: O(N*N)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        num_list = [x for x in range(1, m*n+1)]\n        res = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    res.append(grid[i][j])\n                    # not grid[i][j]\n                    num_list.remove(grid[i][j])\n                elif i == 0:\n                    min_val = min(grid[i][j-1], grid[i][j])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n                elif j == 0:\n                    min_val = min(grid[i-1][j], grid[i][j])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n                else:\n                    min_val = min(grid[i-1][j], grid[i][j], grid[i][j-1])\n                    res.append(min_val)\n                    num_list.remove(min_val)\n        # because the num_list is sorted, we can use binary search to find the target\n        def find(target, start, end):\n            if start > end:\n                return -1\n            mid = (start + end) / 2\n            if res[mid] == target:\n                return mid\n            if res[mid] < target:\n                return find(target, mid+1, end)\n            else:\n                return find(target, start, mid)\n        idx = find(k-1, 0, len(res)-1)\n        for i in range(idx, len(res)):\n            res[i] = num_list[i]\n        return res\n    \n    \"\"\"\n    # Method 2:\n    # Time complexity: O(N*N)\n    # Space complexity: O(N)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        # use a set to store the visited cells\n        visited = set()\n        res = [None] * k\n        # initialize the starting cell\n        res[0] = grid[0][0]\n        visited.add(grid[0][0])\n        for i in range(1, k):\n            for j in range(i, m*n):\n                # if there is a cell that has not been visited\n                if j not in visited:\n                    res[i] = j\n                    visited.add(j)\n                    break\n        return res\n    \n    \"\"\"\n    # Method 3:\n    # Time complexity: O(N*N)\n    # Space complexity: O(1)\n    \"\"\"\n    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0 or k == 0:\n        return []\n    if k > m*n:\n        return []\n    else:\n        idx = [None] * k\n        idx[0] = (0, 0)\n        for i in range(1, k):\n            for j in range(i, m*n):\n                if res[i-1] == None:\n                    res[i] = grid[j/n][j%n]\n                elif grid[j/n][j%n] <= res[i-1]:\n                    res[i] = grid[j/n][j%n]\n                else:\n                    res[i] = res[i-1]\n        return res",
        "num_ids": 938
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # State: (visited, start_cell, k, curr_path)\n    # DFS\n    N = len(grid)\n    min_path = None\n",
        "num_ids": 41
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # not possible to do with k = 0\n    if k == 0:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    min_path = [0] * k\n    min_path[0] = grid[0][0]\n    for i in range(1, k):\n        min_path[i] = grid[0][i]\n    for j in range(1, n):\n        min_path[0] = min(grid[j][0], min_path[0])\n        for i in range(1, k):\n            if min_path[i-1] < min_path[i]:\n                min_path[i] = min_path[i-1]\n            min_path[i] = min(min_path[i], grid[j][i])\n    return min_path\n",
        "num_ids": 180
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not grid or not grid[0]: return []\n    m, n = len(grid), len(grid[0])\n    res = [0] * k\n    visited = [[False] * n for i in xrange(m)]\n    minPathHelper(grid, k, 0, 0, res, visited)\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # The lowest index that can be reached in the given step\n    lowest_idx = k\n    \n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            # We want to find the lowest index that can be reached in the given step\n            if row == 0 and col == 0:\n                # If we are on the first index of the grid\n                grid[row][col] = grid[row][col]\n            else:\n                # If we are not on the first index, we just need to compare the\n                # values of the lowest index we can reach in the given step and the\n                # actual value of that cell\n                # We do this by comparing the values of the lowest index we can reach\n                # in the given step and the actual value of that cell\n                grid[row][col] = min(grid[row - 1][col], grid[row][col - 1]) + grid[row][col]\n",
        "num_ids": 221
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    if n == 1 and m == 1:\n        return grid[0][0]\n",
        "num_ids": 39
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    if k >= n * m:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n >= 0\n    nums = [0] * (n + 1)\n    nums[0] = 0\n    nums[1] = 1\n    nums[2] = 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            nums[i] = nums[i-2] + nums[i-1]\n        else:\n            nums[i] = nums[i-1] + nums[i-2] + nums[i-3]\n    return nums\n",
        "num_ids": 133
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 0:\n        return []\n    t = [1, 1, 1]\n    if n == 1:\n        return [1]\n    for i in range(3, n + 1):\n        t.append(t[i - 1] + t[i - 2] + t[i - 3])\n    return t\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        res = [1]\n        for i in xrange(2, n + 1):\n            if i % 2 == 0:\n                res.append(res[i - 1] + res[i - 2])\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res\n",
        "num_ids": 117
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # tri(n) = tri(n-1) + tri(n-2) + tri(n-3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n    # tri(n) = tri(n - 1) + tri",
        "num_ids": 1024
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [1, 3, 4, 7, 13, 24, 40, 44, 53, 80, 108, 143, 233, 377, 610, \n        987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\n        196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, \n        9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141,\n        267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073,\n        4807526976, 7778742049, 12586269025, 20365011074, 32951280099,\n        53316291173, 86267571272, 139583862445, 225851433717, 365435440873,\n        591286729879, 956722026041, 1548008755920, 2854297070329, 452175946849,\n        7207191770469, 11766903046095, 19039249070945, 3077004769879,\n        5334869499492, 7800666949103, 11697080991736, 184753434662863,\n        339001133777943, 505337567304944, 757923636632459, 1130940199009995,\n        1936435796729768, 3178114977251465, 579238010087579, 8944394323791483,\n        1597164401088304, 26533270950546025, 4181, 6765, 10946, 17711, 28657,\n        46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\n        3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\n        102334155, 165580141, 267914296, 433494437, 701408733, 1134903170,\n        1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n        32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n        365435440873, 591286729879, 956722026041, 1548008755920, 2854297070329,\n        452175946849, 7207191770469, 11766903046095, 19039249070945, 3077004769879,\n        5334869499492, 7800666949103, 11697080991736, 184753434662863,\n        339001133777943, 505337567304944, 757923636632459, 1130940199009995,\n        1936435796729768, 3178114977251465, 579238010087579, 8944394323791483,\n        1597164401088304, 26533270950546025, 4181, 6765, 10946, 17711, 28657,\n        46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\n        3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986,\n        102334155, 165580141, 267914296, 433494437, 701408733, 1134903170,\n        1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074,\n        32951280099, 53316291173, 86267571272, 139583862445, 225851433717,\n        365435440873, 591286729879, 956722026041, 1548008755920, 2854297070329,\n        452175946849, 7207191",
        "num_ids": 1026
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    r = [1, 3]\n    for _ in range(n - 2):\n        r.append(r[-1] + r[-2] + r[-3])\n    return r[1:]\n",
        "num_ids": 51
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def trib(n):\n        if n <= 1:\n            return 1\n        else:\n            return trib(n-1) + trib(n-2) + trib(n-3)\n    return [trib(i) for i in range(1, n+1)]\n",
        "num_ids": 66
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    tribonacci_sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        tribonacci_sequence.append(tribonacci_sequence[-3] + tribonacci_sequence[-2] + tribonacci_sequence[-1])\n    return tribonacci_sequence\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return []\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tri = [1, 1, 2]\n        while len(tri) <= n:\n            next_num = tri[-1] + tri[-2] + tri[-3]\n            tri.append(next_num)\n        return tri[:n + 1]",
        "num_ids": 121
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ans = [1, 1, 1]\n    if n == 0:\n        return ans\n    elif n == 1:\n        return ans\n    else:\n        for i in range(n-2):\n            ans.append(ans[i] + ans[i+1] + ans[i+2])\n    return ans\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 1\n    for i in str(n):\n        if int(i) % 2!= 0:\n            total *= int(i)\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return reduce(lambda x,y: x*y, filter(lambda x: x%2, [int(i) for i in str(n)]))\n",
        "num_ids": 37
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        digits_list = []\n        while n > 0:\n            digits_list.append(n%10)\n            n = n/10\n        product = 1\n        for i in digits_list:\n            if i%2!= 0:\n                product = product * i\n        return product\n",
        "num_ids": 110
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # initialize result to 1\n    result = 1\n",
        "num_ids": 13
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num = []\n    while n:\n        num.append(n%10)\n        n /= 10\n    \n    product = 1\n    for i in num:\n        if i%2:\n            product *= i\n",
        "num_ids": 54
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 10:\n        return n\n    n = abs(n)\n    if n % 10 == 0:\n        return 0\n    return n % 10 * digits(n // 10)\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return reduce(operator.mul, (int(d) for d in str(n) if int(d)%2))\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return reduce(lambda x, y: x * y, [int(d) for d in str(n) if int(d) % 2])\n",
        "num_ids": 35
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i]) % 2 == 1:\n            total = total * int(str(n)[i])\n    return total\n",
        "num_ids": 54
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Parse through the string and keep track of where to place the left and right brackets\n    stack = []\n    nested_count = 0\n    bracket_stack = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append(i)\n        elif string[i] == ']':\n            nested_count += len(stack) - bracket_stack.count(i)\n            bracket_stack.append(i)\n",
        "num_ids": 115
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if string == []:\n        return True\n    if string[0]!= '[':\n        return False\n    if string[-1]!= ']':\n        return False\n    return is_nested(string[1:-1])\n",
        "num_ids": 60
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    string = list(string)\n    def is_nested_helper(string):\n        def nested(ch):\n            return ch == '[' or ch == ']'\n        if not string:\n            return False\n        if len(string) == 1:\n            return False\n        if string[0] == ']' or string[-1] == '[':\n            return False\n        if string[0] == string[-1]:\n            return True\n        if string[0] == ']' or string[-1] == '[' or nested(string[0]) or nested(string[-1]):\n            return is_nested_helper(string[1:-1])\n        return False\n    return is_nested_helper(string)\n",
        "num_ids": 174
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = len(string)\n    r = 0\n    for i in range(l):\n        if string[i] == '[':\n            r += 1\n        else:\n            r -= 1\n        if r < 0:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) == 1:\n        return False\n    if len(string) == 0:\n        return True\n    \n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for letter in string:\n        if letter == '[' or letter == ']':\n            stack.append(letter)\n            if len(stack) > 1:\n                if letter == '[' and stack[-2] == ']':\n                    stack.pop()\n                    stack.pop()\n                else:\n                    return False\n        if len(stack) > 1:\n            return False\n    return True\n",
        "num_ids": 99
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # loop through the string\n    # add to a stack\n    # at each bracket call is_nested(new_string)\n    # if len(stack) == 0: return True\n    # elif len(stack) > 0 and stack[-1] == string[0]: return True\n    # else: return False\n",
        "num_ids": 75
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    stack = []\n    open_bracket = ['[', '(', '{']\n    closed_bracket = [']', ')', '}']\n    for char in string:\n        if char in open_bracket:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if char == closed_bracket[open_bracket.index(stack[len(stack)-1])]:\n                    stack.pop()\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 146
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_valid(string):\n        if string == \"\":\n            return True\n        return (string[0] == \"[\" and string[-1] == \"]\") or is_valid(string[1:-1])\n    \n    return is_valid(string)\n    \n",
        "num_ids": 66
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    for char in string:\n        if char == '[' or char == ']' or char == '{' or char == '}':\n            stack.append(char)\n        if char == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n        elif char == '}' and stack and stack[-1] == '{':\n            stack.pop()\n        else:\n            return False\n    return True if not stack else False\n",
        "num_ids": 138
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(x**2 for x in lst)\n    \n",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(map(lambda x: int(math.ceil(x)), list(map(lambda x: x**2, lst))))\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([int(math.ceil(i))**2 for i in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return sum(lst) ** 2\n",
        "num_ids": 13
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([i*i for i in lst])\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(x**2 for x in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: round(x), map(lambda x: x**2, lst)))\n    pass\n",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(int(math.ceil(num))**2 for num in lst)\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return sum(int(math.ceil(x)) ** 2 for x in lst)\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # method:\n    return not txt[:-1].isalnum() and txt[-1].isalpha()\n",
        "num_ids": 29
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return re.search('[a-zA-Z]+$', txt) is not None\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if txt[-1] in string.ascii_letters:\n        return False\n    else:\n        return True\n    pass\n",
        "num_ids": 34
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in '0123456789'\n",
        "num_ids": 29
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    return not bool(re.search('[A-Za-z]+$', txt))\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if txt[-1].isalpha() and txt[-1] not in (\" \"):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if txt[-1].isalpha() and txt[-1].isupper() == False:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n",
        "num_ids": 53
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if txt:\n        if txt[-1].isalpha() and not txt[-1].isdigit():\n            return True\n        elif txt[-1].isdigit():\n            return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if txt[-1] in ALPHABETS and txt[-1] not in WORD_ENDERS:\n        return True\n    else:\n        return False\n    ",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def find_max(arr):\n        max_index = -1\n        for i in range(len(arr)):\n            if arr[i] <= arr[i-1]:\n                max_index = i\n        return max_index\n",
        "num_ids": 57
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    index_of_max_preceding = -1\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            index_of_max_preceding = i\n        else:\n            break\n    return index_of_max_preceding\n",
        "num_ids": 74
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(arr)-1:\n        if arr[i] < arr[i+1]:\n            i += 1\n        else:\n            break\n    if i == len(arr)-1:\n        return -1\n    else:\n        return i\n",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Use a stack to store tuples (value, index)\n    stack = []\n    for idx, val in enumerate(arr):\n        if not stack:\n            stack.append((val, idx))\n        else:\n            top = stack[-1]\n            if val > top[0]:\n                stack.append((val, idx))\n            else:\n                while top[0] <= val:\n                    stack.pop()\n                    if not stack:\n                        return -1\n                    top = stack[-1]\n                stack.append((val, idx))\n    return stack[0][1]\n",
        "num_ids": 144
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max_index = i\n    return max_index\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    arr.reverse()\n    for i in range(len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n    \n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i, val in enumerate(arr):\n        if i == 0:\n            prev = val\n        elif val <= prev:\n            return i\n        prev = val\n    return -1",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return -1\n    return i+1\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(0, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n",
        "num_ids": 20
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    lst = [abs(lst[i]) for i in range(len(lst))]\n    return (None, None) if lst == [] else (max(lst), min(lst))\n",
        "num_ids": 52
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return None, None\n",
        "num_ids": 7
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst = list(lst)\n    if len(lst) == 0:\n        return None, None\n    else:\n        positive_list = [x for x in lst if x >= 0]\n        negative_list = [x for x in lst if x < 0]\n        if len(positive_list) == 0:\n            return None, max(negative_list)\n        elif len(negative_list) == 0:\n            return max(positive_list), None\n        else:\n            return max(positive_list), min(negative_list)\n",
        "num_ids": 133
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst: return (None, None)\n    \n    smallest = lst[0]\n    smallest_i = 0\n    for i in range(len(lst)):\n        if lst[i] > 0 and lst[i] < smallest:\n            smallest = lst[i]\n            smallest_i = i\n        if lst[i] < 0 and lst[i] > smallest:\n            smallest = lst[i]\n            smallest_i = i\n",
        "num_ids": 121
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    negative_num = None\n    positive_num = None\n    for num in lst:\n        if num < 0:\n            negative_num = num\n        elif num > 0:\n            positive_num = num\n    return (negative_num, positive_num)\n",
        "num_ids": 64
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    else:\n        lst.sort()\n        lst.reverse()\n        pos = 0\n        neg = 0\n        for i in lst:\n            if i > 0:\n                pos = i\n                break\n            elif i < 0:\n                neg = i\n                break\n        return (neg, pos)\n",
        "num_ids": 95
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_int = None\n    min_int = None\n    for l in lst:\n        if l < 0:\n            if max_int is None or l > max_int:\n                max_int = l\n        else:\n            if min_int is None or l < min_int:\n                min_int = l\n    return (max_int, min_int)\n",
        "num_ids": 90
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    if len(negative) == 0 and len(positive) == 0:\n        return None, None\n    if len(negative) == 0:\n        return None, max(positive)\n    if len(positive) == 0:\n        return min(negative), None\n",
        "num_ids": 93
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    negative_lst = []\n    positive_lst = []\n    for num in lst:\n        if num < 0:\n            negative_lst.append(num)\n        elif num > 0:\n            positive_lst.append(num)\n    if negative_lst == []:\n        return (None, None)\n    else:\n        return (max(negative_lst), min(positive_lst))\n",
        "num_ids": 102
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(a, float):\n        a = a\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    elif isinstance(b, float):\n        b = b\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 114
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if isinstance(a, str) or isinstance(b, str):\n        if float(a) > float(b):\n            return b\n        else:\n            return a\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 63
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if type(a) == type(b) and (a == b or a > b):\n        return a\n    elif type(a) == type(b) and a < b:\n        return b\n    elif type(a) == type(b) and a!= b:\n        return None\n    elif type(a) == int and type(b) == float:\n        return b\n    elif type(a) == int and type(b) == str:\n        return b\n    elif type(a) == float and type(b) == int:\n        return a\n    elif type(a) == float and type(b) == str:\n        return a\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == str and type(b) == float:\n        return a\n",
        "num_ids": 204
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a == b:\n        return None\n    else:\n        a, b = (float(a), float(b))\n        if a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 50
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a == b:\n        return None\n    elif type(a) == int and type(b) == float:\n        return a\n    elif type(a) == float and type(b) == int:\n        return a\n    elif type(a) == str and type(b) == str:\n        return a if float(a) > float(b) else b\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == int and type(b) == str:\n        return b\n    else:\n        return None\n",
        "num_ids": 142
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float) and isinstance(b, int):\n        return a\n    elif isinstance(b, float) and isinstance(a, int):\n        return b\n    elif isinstance(a, int) and isinstance(b, int):\n        return None\n    elif isinstance(a, str) and isinstance(b, str):\n        a, b = float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\"))\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, float):\n        return a\n    elif isinstance(a, float) and isinstance(b, str):\n        return b\n    else:\n        return None\n",
        "num_ids": 218
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', ''))\n    if isinstance(b, str):\n        b = float(b.replace(',', ''))\n    return max([a, b], key=float)\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n % 2 == 0 and is_sum_of_four_evens(n)\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return is_sum_of_four_evens(n) and is_even(n)\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n%2 == 0 and sum([i for i in range(1, n//2, 2) if n-i in range(1, n//2)])==n//2\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n % 2 == 0 and sum_of_even_numbers(n) == n\n",
        "num_ids": 23
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    nums = [x for x in range(1, n) if x%2 == 0]\n    if sum(nums) % 4 == 0:\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n % 2 == 0 and is_sum_of_divisors_even(n)\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        return False\n    if n % 2!= 0:\n        return False\n    return sum([i for i in range(1, n, 2)]) == n\n",
        "num_ids": 46
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not is_number(n):\n        raise TypeError('Parameter \\'n\\' is not a number')\n    if not is_positive(n):\n        raise ValueError('Parameter \\'n\\' is not positive')\n    if not is_even(n):\n        raise ValueError('Parameter \\'n\\' is not even')\n    if n == 0:\n        return False\n    sum_odds = n / 2\n    sum_evens = n / 2\n    if sum_odds == sum_evens:\n        return True\n    while sum_odds > 0:\n        if sum_odds % 2!= 0:\n            return False\n        sum_odds /= 2\n    return True\n",
        "num_ids": 162
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(list(filter(lambda x: x % 2 == 0, range(1, n + 1, 2)))) == n\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_even(n) and is_sum_of_n_natural_numbers(n, 4)\n",
        "num_ids": 28
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n -= 1\n    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    factorial = 1\n    if n == 0:\n        return 1\n    else:\n        while n > 1:\n            factorial *= n\n            n -= 1\n        return factorial",
        "num_ids": 45
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    else:\n        return special_factorial(n - 1) * n\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return re.sub(\" +\", \"_\", text)\n",
        "num_ids": 14
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    newText = text.replace(\" \", \"_\")\n    if len(newText) > 2 and newText[-2] == \"_\" and newText[-1] == \"_\":\n        newText = newText[:-2] + \"_\"\n    return newText",
        "num_ids": 61
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i+1:]\n            i += 1\n        i += 1\n    \n    return text\n",
        "num_ids": 63
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    text = text.strip()\n    text = text.replace(\" \",\"_\")\n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n    return text\n",
        "num_ids": 47
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fixed = text\n    for space in re.findall(r\"\\s+\", text):\n        if len(space) > 2:\n            fixed = fixed.replace(space, \"_\")\n        else:\n            fixed = fixed.replace(space, \" \")\n    return fixed\n",
        "num_ids": 67
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([\"_\" if c == \" \" else c for c in text]).strip(\"_\")\n",
        "num_ids": 27
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    text = text.replace(\" \", \"_\")\n    if (text.count(\"_\") > 2):\n        text = text.replace(\"_\", \" - \")\n    return text",
        "num_ids": 42
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_text = str()\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    if new_text.count(' ') > 2:\n        new_text = new_text.replace(' ', '-')\n    return new_text\n    \ndef get_token_ids(text):\n    \"\"\"\n    Given a string, return a list of word ids, as a list of integers \n    representing the number of characters in each word.\n    \n    get_token_ids(\"Example\") == [4, 4, 6, 3, 2, 1]\n    get_token_ids(\"Example 1\") == [4, 4, 6, 3, 2, 1]\n    get_token_ids(\"Example 2\") == [4, 4, 6, 3, 2, 1]\n    get_token_ids(\"Example   3\") == [4, 4, 6, 3, 2, 1]\n    \"\"\"\n    token_ids = list()\n    for word in text.split(' '):\n        token_ids.append(len(word))\n    return token_ids\n    \ndef get_max_word_length(text):\n    \"\"\"\n    Given a string, return the length of the longest word in the string.\n    \n    get_max_word_length(\"Example\") == 5\n    get_max_word_length(\"Example 1\") == 5\n    get_max_word_length(\"Example 2\") == 5\n    get_max_word_length(\"Example   3\") == 5\n    \"\"\"\n    max_length = 0\n    for word in text.split(' '):\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n    \ndef get_num_words(text):\n    \"\"\"\n    Given a string, return the number of words in the string.\n    \n    get_num_words(\"Example\") == 5\n    get_num_words(\"Example 1\") == 5\n    get_num_words(\"Example 2\") == 5\n    get_num_words(\"Example   3\") == 5\n    \"\"\"\n    return len(text.split(' '))\n    \ndef get_words(text):\n    \"\"\"\n    Given a string, return a list of words in the string.\n    \n    get_words(\"Example\") == [\"Example\"]\n    get_words(\"Example 1\") == [\"Example\"]\n    get_words(\"Example 2\") == [\"Example\"]\n    get_words(\"Example   3\") == [\"Example\", \"3\"]\n    \"\"\"\n    return text.split(' ')\n    \ndef get_longest_word(text):\n    \"\"\"\n    Given a string, return the longest word in the string.\n    \n    get_longest_word(\"Example\") == \"Example\"\n    get_longest_word(\"Example 1\") == \"Example\"\n    get_longest_word(\"Example 2\") == \"Example\"\n    get_longest_word(\"Example   3\") == \"Example\"\n    \"\"\"\n    return max(text.split(' '), key=len)\n    \ndef get_min_word_length(text):\n    \"\"\"\n    Given a string, return the length of the shortest word in the string.\n    \n    get_min_word_length(\"Example\") == 1\n    get_min_word_length(\"Example 1\") == 1\n    get_min_word_length(\"Example 2\") == 1\n    get_min_word_length(\"Example   3\") == 1\n    \"\"\"\n    return min(text.split(' '), key=len)\n    \ndef get_max_word_length(text):\n    \"\"\"\n    Given a string, return the length of the longest word in the string.\n    \n    get_max_word_length(\"Example\") == 4\n    get_max_word_length(\"Example 1\") == 4\n    get_max_word_length(\"Example 2\") == 4\n    get_max_word_length(\"Example   3\") == 4\n    \"\"\"\n    return max(text.split(' '), key=len)\n    \ndef get_min_word_length(text):\n    \"\"\"\n    Given a string, return the length of the shortest word in the string.\n    \n    get_min_word_length(\"Example\") == 3\n    get_min_word_length(\"Example 1\") == 3\n    get_min_word_length(",
        "num_ids": 1024
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    text = re.sub(' ', '_', text)\n    text = re.sub('\\s+', '_', text)\n    return text\n",
        "num_ids": 36
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text.replace(' ', '_')\n",
        "num_ids": 12
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def fn(file_name):\n        if len(file_name) <= 3:\n            return 'No'\n        elif file_name.count(\".\") == 0:\n            return 'No'\n        elif file_name[0].isalpha() == False:\n            return 'No'\n        elif file_name.split(\".\")[1] not in [\"txt\", \"exe\", \"dll\"]:\n            return 'No'\n        else:\n            return 'Yes'\n    return fn\n",
        "num_ids": 116
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if '.' in file_name:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 27
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    file_name = file_name.lower()\n    \n    pattern = re.compile(r\"[a-zA-Z]+[0-9]*\\.[txt|exe|dll]\")\n    \n    if pattern.match(file_name):\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n    \ndef main():\n    \n    test_case_1 = \"one.exe\"\n    test_case_2 = \"foo.exe.txt\"\n    test_case_3 = \"one\"\n    test_case_4 = \"one.exe.txt.pptx\"\n    \n    print(file_name_check(test_case_1))\n    print(file_name_check(test_case_2))\n    print(file_name_check(test_case_3))\n    print(file_name_check(test_case_4))\n",
        "num_ids": 212
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    file_name_regex = re.compile('[0-9]+')\n    file_name_split = file_name.split(\".\")\n    \n    if len(file_name_split) > 3 or len(file_name_split) < 2:\n        return \"No\"\n    \n    if \".\" in file_name:\n        if file_name_split[-1] in ['txt', 'exe', 'dll']:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    else:\n        return \"No\"\n",
        "num_ids": 132
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return file_name.replace(' ', '').replace('.', '').replace('\\n', '') == '' or file_name[0].isalpha() or file_name[1:].replace(' ', '')[0].isdigit()\n",
        "num_ids": 57
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # A valid file name should have a substring representing the file's extension\n    # before the dot.\n    return \"Yes\" if \".\" in file_name and file_name.rsplit(\".\", 1)[1] in ['txt', 'exe', 'dll'] and not file_name.rsplit(\".\", 1)[0] else \"No\"\n    \ndef regex_check(regex, string):\n    \"\"\"Create a function which takes a string representing a regular expression\n    and a string representing a string, and returns 'Yes' if the regular expression \n    matches the string, and returns 'No' otherwise.\n    A regular expression matches a string if it contains no disallowed characters, \n    and if it contains at least one match for every possible string.\n    Examples:\n    regex_check(\".*\", \"Hello, world!\") # => 'Yes'\n    regex_check(\".*\", \"Hello, world!\") # => 'Yes'\n    regex_check(\"[abcd]*\", \"Hello, world!\") # => 'Yes'\n    regex_check(\"[abcd]*\", \"Hello, world!\") # => 'No'\n    regex_check(\"a.*b\", \"Hello, world!\") # => 'Yes'\n    regex_check(\"a.*b\", \"Hello, world!\") # => 'No'\n    regex_check(\"[abcd]*\", \"Hello, world!\") # => 'No'\n    \"\"\"\n    # The function should return 'Yes' if the string matches the regex, and \n    # 'No' otherwise.\n    return \"Yes\" if re.match(regex, string) else \"No\"\n    \ndef regex_validator(regex):\n    \"\"\"Create a function which takes a string representing a regex, and returns the \n    alphanumerical order of the group(s) of the regex which is/are the largest of the \n    regular expression's groups.\n    An alphanumerical order is the lexicographical order of the characters in a group,\n    with those characters which occur earlier in the string being sorted before those \n    which appear later.\n    Example:\n    regex_validator(\"\\d+\") # => '2'\n    regex_validator(\"\\d+\") # => '1'\n    regex_validator(\"[a-z]+\") # => 'a'\n    regex_validator(\"[a-z]+\") # => 'z'\n    regex_validator(\"[0-9]+\") # => '0'\n    \"\"\"\n    return re.search(r\"(\\d+)([a-z]+)\", regex).groups()[0]\n    \ndef regex_validator_2(regex):\n    \"\"\"Create a function which takes a string representing a regex, and returns the \n    alphanumerical order of the group(s) of the regex which is/are the largest of the \n    regular expression's groups.\n    An alphanumerical order is the lexicographical order of the characters in a group,\n    with those characters which occur earlier in the string being sorted before those \n    which appear later.\n    Example:\n    regex_validator(\"\\d+\") # => '2'\n    regex_validator(\"\\d+\") # => '1'\n    regex_validator(\"[a-z]+\") # => 'a'\n    regex_validator(\"[a-z]+\") # => 'z'\n    regex_validator(\"[0-9]+\") # => '0'\n    \"\"\"\n    return \"\".join(sorted(re.findall(r\"(\\d+)([a-z]+)\", regex)))\n    \ndef regex_validator_3(regex):\n    \"\"\"Create a function which takes a string representing a regex, and returns the \n    alphanumerical order of the group(s) of the regex which is/are the largest of the \n    regular expression's groups.\n    An alphanumerical order is the lexicographical order of the characters in a group,\n    with those characters which occur earlier in the string being sorted before those \n    which appear later.\n    Example:\n    regex_validator(\"\\d+\") # => '2'\n    regex_validator(\"\\d+\") # => '1'\n    regex_validator(\"[a-z]+\") # => 'a'\n    regex_validator(\"[a-",
        "num_ids": 1024
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if file_name[0].isalpha() and file_name[1]!= \".\" and (len(file_name) > 3 and file_name[2].isdigit() and file_name[3]!= \".\"):\n        if file_name.count(\".\") == 1 and file_name.split(\".\")[1] in [\"txt\", \"exe\", \"dll\"]:\n            return \"Yes\"\n    return \"No\"\n",
        "num_ids": 103
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import re\n    import os\n",
        "num_ids": 9
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import re\n    fname = file_name.split('.')\n    #print fname\n    if len(fname) > 2:\n        return 'No'\n    elif len(fname) == 2 and fname[1] == 'txt' or fname[1] == 'exe' or fname[1] == 'dll':\n        return 'Yes'\n    elif len(fname) == 2 and not re.match(\"^[a-zA-Z]+$\", fname[0]):\n        return 'No'\n    elif len(fname) == 2 and fname[1] == 'dll' and not re.match(\"^[a-zA-Z]+$\", fname[0]):\n        return 'No'\n    elif len(fname) == 2 and fname[1] == 'dll' and fname[0][0] == '0':\n        return 'No'\n    elif len(fname) == 2 and fname[1] == 'dll':\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 254
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return sum([x*x if x%3==0 else x*x*x for x in lst])\n    return sum([x*x for x in lst if x%3==0])\n",
        "num_ids": 48
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_lst = [1 if (i%3 == 0) and (i%4!= 0) else i**2 for i in lst]\n    return sum(new_lst)\n",
        "num_ids": 47
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = 0\n    for i in range(0, len(lst)):\n        if i % 4 == 0:\n            s += lst[i] ** 2\n        elif i % 3 == 0:\n            s += lst[i] ** 3\n    return s\n",
        "num_ids": 66
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 4 == 0:\n            total += lst[i] ** 3\n        if i % 3 == 0:\n            total += lst[i] ** 2\n    return total\n",
        "num_ids": 63
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    sum = 0\n    for i in range(0, len(lst)):\n        if i % 3 == 0:\n            lst[i] *= lst[i]\n        elif i % 4 == 0:\n            lst[i] *= lst[i] ** 3\n        else:\n            continue\n    return sum(lst)\n",
        "num_ids": 87
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4!= 0:\n            lst[i] = lst[i] ** 3\n        else:\n            pass\n    for i in range(len(lst)):\n        total += lst[i]\n    return total\n",
        "num_ids": 109
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(0,len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            total += lst[i] ** 2\n        elif i % 4!= 0:\n            total += lst[i]\n    return total\n",
        "num_ids": 72
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in lst:\n        if i % 3 == 0:\n            total += i**2\n        if i % 4 == 0 and i % 3!= 0:\n            total += i**3\n    return total\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst:\n        for index in xrange(len(lst)):\n            if index % 3 == 0 or index % 4 == 0:\n                lst[index] *= lst[index]\n        return sum(lst)\n    else:\n        return 0",
        "num_ids": 65
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n    \n    sum = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0:\n            sum += lst[i] ** 2\n        elif (i+1) % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n",
        "num_ids": 77
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    words = sentence.split(\" \")\n    new_string = []\n    for word in words:\n        if is_prime(len(word)):\n            new_string.append(word)\n    return \" \".join(new_string)\n",
        "num_ids": 58
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    words = sentence.split(' ')\n    answer = ''\n    for word in words:\n        if is_prime(len(word)):\n            answer += word +''\n    return answer.rstrip()\n",
        "num_ids": 50
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if sentence is None: return None\n",
        "num_ids": 10
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join(\n        [word for word in sentence.split(\" \") if len(word) > 0 and is_prime(len(word))]\n    )\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    list_sentence = sentence.split(\" \")\n    list_words = []\n    for word in list_sentence:\n        list_words.append(get_longest_prime_number(len(word)))\n    return \"\".join(list_words)\n",
        "num_ids": 63
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join([s for s in sentence.split(' ') if s!= '' and is_prime(len(s))])\n",
        "num_ids": 32
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(str(len(word)))\n        new_words.append(word)\n    return''.join(new_words)\n",
        "num_ids": 59
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    primes = get_primes(100)\n    words = sentence.split(\" \")\n    final_str = []\n    for word in words:\n        curr_len = len(word)\n        if curr_len not in primes:\n            continue\n        primes.remove(curr_len)\n        final_str.append(word)\n    return \" \".join(final_str)\n",
        "num_ids": 96
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return float(x) * float(n) / gcd(float(x), float(n)) == int(float(x) * float(n) / gcd(float(x), float(n)))\n",
        "num_ids": 49
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import re\n    a, b = x.split('/')\n    a = int(a)\n    b = int(b)\n    if a % b == 0 and n % a == 0:\n        return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numer, denom = x.split('/')\n    return numer + '0' * max(len(numer) - len(denom), 0) == numer * int(n) and denom == str(int(n) * int(denom))\n",
        "num_ids": 62
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    num, den = x.split('/')\n    den = int(den)\n    num = int(num)\n    n = int(n)\n    a = num / den\n    b = n / den\n    if a == b:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return eval(str(x)+\"/\"+str(n)) == int(eval(str(x)+\"/\"+str(n)))\n",
        "num_ids": 33
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # Split x and n into numerator and denominator, where each is a string of numbers\n    x_numerator = int(x.split('/')[0])\n    x_denominator = int(x.split('/')[1])\n    n_numerator = int(n.split('/')[0])\n    n_denominator = int(n.split('/')[1])\n    \n    # If n_numerator is 0, we can't divide by it, so return False\n    if n_numerator == 0:\n        return False\n    \n    # If x_denominator is 0, the whole number is zero, so return True\n    if x_denominator == 0:\n        return True\n    \n    # Multiply x_numerator by n_denominator and n_numerator by x_denominator\n    x_x_numerator = x_numerator * n_denominator\n    x_n_numerator = x_numerator * n_numerator\n    n_x_numerator = n_numerator * x_denominator\n    n_n_numerator = n_numerator * n_denominator\n    \n    # If either the x_x_numerator or n_x_numerator is a whole number, return True\n    if x_x_numerator % 1 == 0 or n_x_numerator % 1 == 0:\n        return True\n    \n    # If either the x_n_numerator or n_n_numerator is a whole number, return True\n    if x_n_numerator % 1 == 0 or n_n_numerator % 1 == 0:\n        return True\n    \n    # If none of these are true, we know there is a whole number, but we have to find the remainder to see if\n    # we can take a whole number out of the quotient\n    else:\n        \n        # Return False if the remainder is zero\n        if n_x_numerator % 1 == 0:\n            return False\n        if n_n_numerator % 1 == 0:\n            return False\n        \n        # The remainder is not zero, so we know there is a whole number\n        else:\n            return True\n    \n",
        "num_ids": 541
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n,d = n.split('/')\n    n,d = int(n), int(d)\n    numer, denom = int(x)*n, int(d)*n\n    if numer == denom:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x == \"0\":\n        return True\n",
        "num_ids": 13
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == \"0\":\n        return True\n    else:\n        n = int(n)\n        x = int(x)\n        gcd = math.gcd(n, x)\n        n = n / gcd\n        x = x / gcd\n        if n == x:\n            return True\n        else:\n            return False\n",
        "num_ids": 82
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numerator, denominator = fraction(x)\n    numerator, denominator = map(int, [numerator, denominator])\n",
        "num_ids": 35
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nums.sort(key=lambda x: sum([int(c) for c in str(x)]))\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), x))\n",
        "num_ids": 33
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not nums:\n        return nums\n    sorted_nums = []\n    for i in range(len(nums)):\n        sorted_nums.append([nums[i], i])\n    sorted_nums.sort()\n    return [sorted_nums[i][0] for i in range(len(nums))]\n",
        "num_ids": 87
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    items = []\n    for num in nums:\n        if num == 0:\n            items.append([0, 0])\n        else:\n            items.append([sum(map(int, str(num))), num])\n",
        "num_ids": 54
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def compute_sum(num):\n        return sum(int(d) for d in str(num))\n",
        "num_ids": 26
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return []\n    sums = []\n    for num in nums:\n        sums.append(sum(map(int, list(str(num)))))\n    nums.sort(key=lambda x: sums.index(sum(map(int, list(str(x))))) )\n    return nums\n",
        "num_ids": 85
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))) * (-1 if x < 0 else 1))\n",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return res",
        "num_ids": 28
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 10) % 2 == 1 and ((num // 10) % 10) % 2 == 1:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([i for i in nums if i > 10 and (i % 10 == 1 or i % 10 == 3 or i % 10 == 5 or i % 10 == 7 or i % 10 == 9)])\n",
        "num_ids": 49
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for num in nums if num > 10 and (num%10)%2 == 1 and (num//10)%10%2 == 1)\n",
        "num_ids": 39
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len([x for x in nums if x > 10 and (str(x)[0] == \"1\" or str(x)[-1] == \"1\" )])\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and \\\n        (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9):\n            count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([n for n in nums if n > 10 and n % 10!= 1 and n % 10!= 3 and n % 10!= 5 and n % 10!= 7 and n % 10!= 9])\n",
        "num_ids": 52
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(1 for x in nums if x > 10 and x % 2 == 1 and x % 10 == 1)\n",
        "num_ids": 29
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def num_odd(n):\n        return n%2==1\n",
        "num_ids": 18
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 0\n    a = [0] * n\n    a[0] = 1\n    a[1] = 2\n    for i in range(2, n):\n        a[i] = a[i-1] + a[i-2]\n    return a[-1]\n",
        "num_ids": 76
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 0\n    triples = 0\n    a = [0] * n\n    for i in xrange(1, n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            triples += 1\n    return triples\n",
        "num_ids": 76
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 1\n    total = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    total += 1\n    return total\n",
        "num_ids": 80
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 3:\n        return 0\n    a = [1] * n\n    count = 0\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] in a:\n                count += 1\n    return count\n",
        "num_ids": 99
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int(n * (n - 1) * (n - 2) / 6)\n",
        "num_ids": 22
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = [0] * n\n    max_triples = 0\n    for i in xrange(n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            max_triples += 1\n    return max_triples\n",
        "num_ids": 69
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = 0\n    a = [i*i - i + 1 for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j] + a[j]) % 3 == 0:\n                res += 1\n    return res\n",
        "num_ids": 79
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i * i + j * j == k * k and i < j < k:\n                    result += 1\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_triples = 0\n    for i in range(n):\n        max_triples += i * (i - 1) // 2\n    return max_triples\n",
        "num_ids": 41
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n * (n - 1) * (n - 2) // 6\n",
        "num_ids": 19
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n",
        "num_ids": 58
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    dictionary = {\n        'Sun': 0,\n        'Mercury': 0.39,\n        'Venus': 0.72,\n        'Earth': 1.0,\n        'Mars': 1.52,\n        'Jupiter': 5.20,\n        'Saturn': 9.54,\n        'Uranus': 19.19,\n        'Neptune': 30.06,\n    }\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    if planet1 not in dictionary or planet2 not in dictionary:\n        return tuple()\n    return tuple(sorted([planet for planet, distance in dictionary.items() if planet in [planet1, planet2] and distance <= dictionary[planet2]]))",
        "num_ids": 173
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if planet1 == \"Mercury\":\n        return \"Venus\"\n    elif planet1 == \"Venus\":\n        return \"Earth\"\n    elif planet1 == \"Earth\":\n        return \"Mars\"\n    elif planet1 == \"Mars\":\n        return \"Jupiter\"\n    elif planet1 == \"Jupiter\":\n        return \"Saturn\"\n    elif planet1 == \"Saturn\":\n        return \"Uranus\"\n    elif planet1 == \"Uranus\":\n        return \"Neptune\"\n    elif planet1 == \"Neptune\":\n        return \"\"\n    elif planet1 == \"Jupiter\":\n        return \"Mercury\"\n    elif planet1 == \"Saturn\":\n        return \"Earth\"\n    elif planet1 == \"Uranus\":\n        return \"Jupiter\"\n    elif planet1 == \"Neptune\":\n        return \"Saturn\"\n    elif planet1 == \"Earth\":\n        return \"Mars\"\n    elif planet1 == \"Mars\":\n        return \"Jupiter\"\n    else:\n        return \"\"\n",
        "num_ids": 255
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    earth = \"Earth\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n",
        "num_ids": 45
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    orbit = {'Sun': [], 'Mercury': [], 'Venus': [], 'Earth': [], 'Mars': [], 'Jupiter': [], 'Saturn': [], 'Uranus': [], 'Neptune': []}\n    for planet in orbit:\n        orbit[planet].append(planet)\n",
        "num_ids": 76
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # OK, so this is hard, but I think I know the solution\n    # OK, so I think I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, so I know the solution\n    # OK, s",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # YOUR CODE HERE\n    if planet1 == \"Mercury\":\n        planet1 = 'Sun'\n    if planet2 == \"Mercury\":\n        planet2 = 'Sun'\n    if planet1 == \"Venus\":\n        planet1 = 'Sun'\n    if planet2 == \"Venus\":\n        planet2 = 'Sun'\n    if planet1 == \"Earth\":\n        planet1 = 'Sun'\n    if planet2 == \"Earth\":\n        planet2 = 'Sun'\n    if planet1 == \"Jupiter\":\n        planet1 = 'Saturn'\n    if planet2 == \"Jupiter\":\n        planet2 = 'Saturn'\n    if planet1 == \"Saturn\":\n        planet1 = 'Uranus'\n    if planet2 == \"Saturn\":\n        planet2 = 'Uranus'\n    if planet1 == \"Uranus\":\n        planet1 = 'Neptune'\n    if planet2 == \"Uranus\":\n        planet2 = 'Neptune'\n    if planet1 == \"Neptune\":\n        planet1 = 'Pluto'\n    if planet2 == \"Neptune\":\n        planet2 = 'Pluto'\n    planets = (planet1, planet2)\n    return planets\n",
        "num_ids": 289
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if planet1.lower() == \"jupiter\" or planet1.lower() == \"saturn\" or planet1.lower() == \"uranus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1.lower() == \"venus\" or planet1.lower() == \"earth\" or planet1.lower() == \"mars\":\n        return (\"Venus\", \"Earth\")\n    elif planet1.lower() == \"mercury\" or planet1.lower() == \"mars\" or planet1.lower() == \"jupiter\" or planet1.lower() == \"saturn\":\n        return (\"Mercury\", \"Mars\")\n    else:\n        return ()\n    \n",
        "num_ids": 161
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    elif planet1 == planet2:\n        return ()\n    else:\n        temp = PLANETS[planet1]\n        SUN = PLANETS['Sun']\n        planet1_orbit = temp[1]\n        planet2_orbit = PLANETS[planet2][1]\n        planet_list = []\n        for planet in PLANETS:\n            if PLANETS[planet][1] > planet1_orbit and PLANETS[planet][1] < planet2_orbit:\n                planet_list.append(planet)\n        planet_list.sort(key=lambda x: abs(SUN[1] - PLANETS[x][1]))\n        return tuple(planet_list)",
        "num_ids": 177
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    \n    def bf2(planet1, planet2, result):\n        if planet1 == planet2:\n            return result\n        elif planet1 == 'Venus':\n            return bf2('Earth', planet2, result + ('Mars',))\n        elif planet1 == 'Earth':\n            return bf2('Venus', planet2, result + ('Jupiter',))\n        elif planet1 == 'Jupiter':\n            return bf2('Earth', planet2, result + ('Saturn',))\n        elif planet1 == 'Saturn':\n            return bf2('Jupiter', planet2, result + ('Uranus',))\n        elif planet1 == 'Uranus':\n            return bf2('Saturn', planet2, result + ('Neptune',))\n        elif planet1 == 'Neptune':\n            return bf2('Uranus', planet2, result + ('Pluto',))\n        elif planet1 == 'Pluto':\n            return bf2('Neptune', planet2, result + ('Sun',))\n        else:\n            return result\n",
        "num_ids": 263
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=len)",
        "num_ids": 12
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_odd(n):\n        return n % 2 == 1\n    return sorted([s for s in lst if not is_odd(len(s))])",
        "num_ids": 39
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(list(set([x for x in lst if len(x)%2==0])))\n",
        "num_ids": 27
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return []\n    odds = filter(lambda x: len(x) % 2!= 0, lst)\n    return sorted(lst, key=len)\n",
        "num_ids": 47
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda s: (len(s), s))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n",
        "num_ids": 21
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    len_lst = []\n    len_lst_sort = []\n    for word in lst:\n        len_lst.append(len(word))\n    for i in range(len(len_lst)):\n        if len_lst[i] % 2 == 0:\n            len_lst_sort.append(len_lst[i])\n        elif len_lst[i]!= 0:\n            len_lst_sort.append(len_lst[i])\n    len_lst_sort.sort()\n    for i in range(len(len_lst)):\n        if len_lst[i] % 2!= 0:\n            len_lst_sort.append(len_lst[i])\n    return len_lst_sort\n",
        "num_ids": 190
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(sorted(lst, key=len), key=lambda s: (len(s), s))\n",
        "num_ids": 28
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if is_prime(n):\n        return x\n    return y\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return x if n%2==0 else y\n",
        "num_ids": 15
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 2 or n == 3:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 38
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # use a modulus of 2 as the factorisation \n    # will always give either x or y as the remainder\n    # modulus 2 is because we want the function to \n    # return either x or y, not the modulus\n    return x if n % 2 == 0 else y\n    ",
        "num_ids": 68
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([x**2 for x in lst if x % 2 == 1])\n",
        "num_ids": 21
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    lst = list(filter(lambda x: x > 0 and x % 2 == 1, lst))\n    return sum(map(lambda x: x * x, lst))",
        "num_ids": 44
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(x**2 for x in lst if x % 2)\n",
        "num_ids": 19
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Convert to set and remove negative numbers\n    lst = set(lst)\n    lst.difference_update([-1, -2])\n    \n    # Square and sum\n    return sum(x**2 for x in lst)\n",
        "num_ids": 59
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([x**2 for x in lst if x > 0 and x % 2])\n",
        "num_ids": 23
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(num ** 2 for num in lst if not isinstance(num, bool) and num % 2)\n",
        "num_ids": 28
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return 0\n    return sum(i**2 for i in lst if not isinstance(i, int) or i > 0)\n",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    return sum([a*a for a in lst if a%2==1])\n    ",
        "num_ids": 24
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([x**2 for x in lst if x%2!= 0])\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for n in lst:\n        if n > 0 and n % 2!= 0:\n            total += n**2\n    return total\n",
        "num_ids": 56
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    diff = [0]*len(guess)\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            diff[i] = 0\n        else:\n            diff[i] = abs(guess[i]-game[i])\n    return diff\n",
        "num_ids": 73
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num_scores = len(game)\n    num_guesses = len(guess)\n    #print(num_scores)\n    #print(num_guesses)\n    out = []\n    for i in range(num_guesses):\n        guess_index = guess[i]\n        score_index = game[i]\n        if guess_index == score_index:\n            out.append(0)\n        else:\n            out.append(abs(guess_index - score_index))\n    #print(out)\n    return out\n",
        "num_ids": 133
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(guess)!= len(game):\n        raise ValueError('compare: mismatched lengths')\n    return [abs(x-y) for x,y in zip(guess,game)]\n",
        "num_ids": 49
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    out = []\n    for index in range(len(guess)):\n        if guess[index] == game[index]:\n            out.append(0)\n        else:\n            out.append(abs(guess[index] - game[index]))\n    return out\n    \n    \n    \n    \n    \n    ",
        "num_ids": 77
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 28
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    score = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i]-game[i]))\n    return score\n",
        "num_ids": 65
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [guess[i] - game[i] for i in range(len(game))]\n",
        "num_ids": 25
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]\n",
        "num_ids": 26
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [a-b for a,b in zip(guess, game)]\n    #return [abs(a-b) for a,b in zip(guess, game)]\n",
        "num_ids": 43
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    strength = {}\n    for ext in extensions:\n        ext_comp = ext.lower()\n        ext_num = 0\n        for letter in ext_comp:\n            if letter.isupper():\n                ext_num += 1\n        ext_name = ext_comp[0].upper() + ext_comp[1:]\n        strength[ext_name] = -ext_num\n",
        "num_ids": 88
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    highest_strength = 0\n    highest_class = ''\n    for extension in extensions:\n        class_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                class_strength += 1\n            elif letter.islower():\n                class_strength -= 1\n        if class_strength > highest_strength:\n            highest_strength = class_strength\n            highest_class = extension\n    return class_name + '.' + highest_class\n",
        "num_ids": 107
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Get length of extension string and extension string\n    length = len(extensions[0])\n    extension_string = extensions[0]\n    # Get amount of uppercase letters and lowercase letters\n    uppercase = len(extension_string) - extension_string.lower().count('a')\n    lowercase = len(extension_string) - extension_string.lower().count('A')\n    # Create list of strengths\n    strength_list = []\n    for extension in extensions:\n        # Get amount of uppercase letters and lowercase letters\n        uppercase_ext = extension.count('A')\n        lowercase_ext = extension.count('a')\n        # Calculate strength\n        strength = ((uppercase_ext - lowercase_ext) - (uppercase - lowercase))\n        # Add strength to strength list\n        strength_list.append(strength)\n    # Get index of maximum strength in strength list\n    index = strength_list.index(max(strength_list))\n    # Return extension string\n    return class_name + '.' + extensions[index]\n",
        "num_ids": 253
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(extensions) == 1:\n        return class_name + \".\" + extensions[0]\n    elif len(extensions) == 0:\n        return class_name + \".None\"\n    else:\n        strengths = {}\n        for extension in extensions:\n            uppercase = 0\n            lowercase = 0\n            for letter in extension:\n                if letter.isupper():\n                    uppercase += 1\n                elif letter.islower():\n                    lowercase += 1\n            strengths[extension] = (uppercase - lowercase) / len(extension)\n        strongest = max(strengths.keys(), key = strengths.get)\n        return class_name + \".\" + strongest\n",
        "num_ids": 170
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Get all uppercase and lowercase letters in the extension names\n    uppercase_letters = [c for c in class_name if c.isupper()]\n    lowercase_letters = [c for c in class_name if c.islower()]\n    \n    # Compute the strength of each extension\n    strength = len(uppercase_letters) - len(lowercase_letters)\n    extension_names = [extension.replace(class_name, '') for extension in extensions]\n    \n    # Return the extension with the highest strength\n    return '{}.{}'.format(class_name, max(extension_names, key=lambda name: strength - len(name)))\n",
        "num_ids": 163
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_strength = 0\n    result = ''\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n        if strength > max_strength:\n            max_strength = strength\n            result = extension\n    return class_name + '.' + result\n",
        "num_ids": 77
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return '{}.{}'.format(class_name, max(extensions, key=lambda ext: sum(1 for c in ext if c.isupper())) if extensions else '')\n    \nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Karmos','servig', 'Slicess', 'cassich', 'Carbon']) == 'Slices.servig'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Karmos','servig', 'Slicess', 'cassich', 'Carbon', 'Cheese']) == 'Slices.servig'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Karmos','servig', 'Slicess', 'cassich', 'Carbon', 'Carbon', 'Cheese']) == 'Slices.servig'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Karmos','servig', 'Slicess', 'cassich', 'Carbon', 'Carbon', 'Cheese', 'StuFfed']) == 'Slices.servig'",
        "num_ids": 406
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    extensions = sorted(extensions, key=lambda x: x[1])\n    extensions = sorted(extensions, key=lambda x: x[0])\n    index = 0\n    for i in range(len(extensions) - 1):\n        if ord(extensions[i][0]) > ord(extensions[i + 1][0]):\n            index = i\n    return '{0}.{1}'.format(class_name, extensions[index][0])\n",
        "num_ids": 112
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # Keep track of the extension's strengths\n    extensions_strength = {}\n    for extension in extensions:\n        lower_extension = extension.lower()\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        extensions_strength[extension] = uppercase_count - lowercase_count\n",
        "num_ids": 101
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return bool(len(a) >= len(b)) and any(b in a for a in (b, a[::-1]))\n",
        "num_ids": 34
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    a = a.lower()\n    b = b.lower()\n    if b in a:\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (a == b or a[:len(b)] == b or b[:len(a)] == a or b in a):\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if b in a:\n        return True\n    elif a in b:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a==b:\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #get both words \n    word_1 = a\n    word_2 = b\n    #get length of each word \n    l1 = len(word_1)\n    l2 = len(word_2)\n    #if length of both words don't match, return false \n    if l1!= l2 :\n        return False\n    #if lenghth of word_1 is 1, check if the word is a substring of word_2\n    if l1 == 1:\n        if word_2 in word_1:\n            return True\n        else:\n            return False\n    #if lenghth of word_1 is 2, check if the word is a substring of the first letter of word_2\n    if l1 == 2:\n        if word_2[0] in word_1 and word_2[1] in word_1:\n            return True\n        else:\n            return False\n    #if lenghth of word_1 is more than 2, \n    #check if each character is in word_2 and the next character in word_1\n    for i in range(0,l1-2):\n        if word_2[i] in word_1 and word_2[i+1] in word_1 and word_2[i+2] in word_1:\n            return True\n    return False\n",
        "num_ids": 313
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a = a.lower()\n    b = b.lower()\n    return any(b in a for a in a+a) or any(b in a for a in (a+a)[1:])\n",
        "num_ids": 49
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def cyclic_perm(a,b):\n        if len(a)!= len(b):\n            return False\n        if a == b:\n            return True\n        a=a[1:]+a[0]\n        b=b[1:]+b[0]\n        if a==b:\n            return True\n        return False\n    \n    return cyclic_perm(a,b) or cyclic_perm(a,b[::-1])\n",
        "num_ids": 109
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a in b:\n        return True\n    if b in a:\n        return True\n    for i in range(1,len(a)):\n        if a[i:]+a[:i] == b:\n            return True\n        if a[:i]+a[i:] == b:\n            return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (len(str(abs(num))), len(str(abs(num))) - len(str(abs(num)).lstrip('0')))\n",
        "num_ids": 37
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num = abs(num)\n    even = 0\n    odd = 0\n    while num:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n        num >>= 1\n    return (even, odd)\n",
        "num_ids": 59
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Hint: mod operator in python is %\n    return tuple([int(x)%2 for x in str(num)])\n",
        "num_ids": 32
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(str(abs(num))[:-1:2]), len(str(abs(num))[1::2])\n",
        "num_ids": 31
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if num < 0:\n        raise ValueError('Input must be positive')\n    if num == 0:\n        return (0, 0)\n    digit = 1\n    count = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            count += 1\n        num = num // 10\n    return (count, 10-count)\n",
        "num_ids": 84
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    num = abs(num)\n    even_num = 0\n    odd_num = 0\n",
        "num_ids": 23
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert isinstance(num, int), \"num should be an integer.\"\n    if num == 0:\n        return (1,0)\n    else:\n        if num < 0:\n            num *= -1\n        odd_count = 0\n        even_count = 0\n        while num > 0:\n            if num % 10 % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num /= 10\n        return (even_count, odd_count)\n",
        "num_ids": 119
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num_even = 0\n    num_odd = 0\n",
        "num_ids": 15
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(str(abs(num))[::2]), len(str(abs(num))[1::2])\n",
        "num_ids": 29
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if num == 0:\n        return 0, 0\n",
        "num_ids": 14
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    to_roman = {}\n    to_roman[1000] = 'M'\n    to_roman[900] = 'CM'\n    to_roman[500] = 'D'\n    to_roman[400] = 'CD'\n    to_roman[100] = 'C'\n    to_roman[90] = 'XC'\n    to_roman[50] = 'L'\n    to_roman[40] = 'XL'\n    to_roman[10] = 'X'\n    to_roman[9] = 'IX'\n    to_roman[5] = 'V'\n    to_roman[4] = 'IV'\n    to_roman[1] = 'I'\n",
        "num_ids": 165
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not 1 <= number <= 1000:\n        raise ValueError('Number is out of range')\n    if not isinstance(number, int):\n        raise TypeError('Number is not an integer')\n",
        "num_ids": 46
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return romanize(number)\n",
        "num_ids": 10
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    int_to_roman = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n",
        "num_ids": 105
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = ''\n    arabic_to_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'}\n    for arabic, roman in arabic_to_roman.iteritems():\n        while number >= arabic:\n            result += roman\n            number -= arabic\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    # print(sorted(ROMAN_NUMERALS))\n    # print(ROMAN_NUMERALS)\n    roman_numerals = [1,4,5,9,10,40,50,90,100,400,500,900,1000]\n    result = ''\n    for i in range(len(roman_numerals)-1,0,-1):\n        if number < roman_numerals[i]:\n            result += ROMAN_NUMERALS[i] * (number // roman_numerals[i])\n            number %= roman_numerals[i]\n    result += ROMAN_NUMERALS[number]\n    return result.lower()\n",
        "num_ids": 169
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('Requires an integer between 1 and 1000')\n    if not isinstance(number, int):\n        raise TypeError('Requires an integer')\n",
        "num_ids": 47
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not (1 <= number <= 1000):\n        raise ValueError('Integers must be between 1 and 1000, inclusive')\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert 1 <= number <= 1000, 'Integers 1-1000 only'\n    output = ''\n    # Convert to string\n    while number:\n        if number >= 1000:\n            output += 'M'\n            number -= 1000\n        elif number >= 900:\n            output += 'CM'\n            number -= 900\n        elif number >= 500:\n            output += 'D'\n            number -= 500\n        elif number >= 400:\n            output += 'CD'\n            number -= 400\n        elif number >= 100:\n            output += 'C'\n            number -= 100\n        elif number >= 90:\n            output += 'XC'\n            number -= 90\n        elif number >= 50:\n            output += 'L'\n            number -= 50\n        elif number >= 40:\n            output += 'XL'\n            number -= 40\n        elif number >= 10:\n            output += 'X'\n            number -= 10\n        elif number >= 9:\n            output += 'IX'\n            number -= 9\n        elif number >= 5:\n            output += 'V'\n            number -= 5\n        elif number >= 4:\n            output += 'IV'\n            number -= 4\n        elif number >= 1:\n            output += 'I'\n            number -= 1\n    return output.lower()\n",
        "num_ids": 301
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number > 1000 or number < 1:\n        raise ValueError('int_to_roman() takes positive numbers only')\n",
        "num_ids": 29
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < b + c and b < a + c and c < a + b:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a*a + b*b == c*c:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # here is the formula of finding the right angled triangles\n    # 'a'*'b'*'c' = tan(90 - \\frac{180}{2})\n    # first find the value of tan(angle)\n    # then check if the value is less than 1. If it is, then its not a right angled triangle\n    # if not, then its right angled triangle\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)",
        "num_ids": 130
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return math.isclose(a**2 + b**2, c**2) or math.isclose(b**2 + c**2, a**2) or math.isclose(a**2 + c**2, b**2)\n",
        "num_ids": 57
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return not (a**2 + b**2 > c**2 and a**2 + c**2 > b**2 and b**2 + c**2 > a**2)\n",
        "num_ids": 42
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return abs(a**2 + b**2 - c**2) < 1e-6\n",
        "num_ids": 23
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a == b == c:\n        return True\n    if c**2 == a**2 + b**2:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2",
        "num_ids": 38
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if (c ** 2 - b ** 2) < a ** 2 < (c ** 2 + b ** 2):\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_length = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_length:\n            max_word = word\n            max_length = len(word)\n    return max_word\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    max_word = \"\"\n    for word in words:\n        if len(word) == max_length:\n            if word > max_word:\n                max_word = word\n    return max_word\n",
        "num_ids": 85
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(words, key=lambda x: len(set(x)))[-1]\n",
        "num_ids": 23
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    word_with_max_unique = \"\"\n    for word in words:\n        if len(word) > len(word_with_max_unique):\n            word_with_max_unique = word\n        elif len(word) == len(word_with_max_unique):\n            if word < word_with_max_unique:\n                word_with_max_unique = word\n    return word_with_max_unique\n",
        "num_ids": 101
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if words == []:\n        return \"\"\n",
        "num_ids": 12
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(words) == 0:\n        return None\n    if len(words) == 1:\n        return words[0]\n    current_max = words[0]\n    current_max_char = len(set(current_max))\n    for word in words[1:]:\n        word_char = len(set(word))\n        if word_char > current_max_char:\n            current_max = word\n            current_max_char = word_char\n        elif word_char == current_max_char:\n            if word < current_max:\n                current_max = word\n    return current_max\n",
        "num_ids": 147
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def find_max_helper(words, start):\n        if start == len(words):\n            return \"\"\n        max_char = \"\"\n        for i in xrange(start, len(words)):\n            if len(set(words[start:i+1])) > len(set(max_char)):\n                max_char = words[start:i+1]\n        return find_max_helper(words, start + 1) + max_char\n    return find_max_helper(words, 0)\n",
        "num_ids": 124
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def count_unique_char(word):\n        \"\"\"Return the number of unique characters in a word.\"\"\"\n        unique = set()\n        for letter in word:\n            if letter not in unique:\n                unique.add(letter)\n        return len(unique)\n",
        "num_ids": 62
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(words, key=len)[0]\n",
        "num_ids": 14
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # put unique character dictionary in map\n    char_dict = {}\n    for word in words:\n        for char in word:\n            if char_dict.has_key(char):\n                char_dict[char] += 1\n            else:\n                char_dict[char] = 1\n    # sort the dictionary by descending order\n    sorted_dict = sorted(char_dict.items(), key=lambda x: x[1], reverse=True)\n    # print sorted_dict\n    # find the max value\n    max_value = 0\n    for tup in sorted_dict:\n        if tup[1] > max_value:\n            max_value = tup[1]\n            max_char = tup[0]\n    # return the max character\n    for word in words:\n        if word.count(max_char) == max_value:\n            return word\n    return \"\"\n",
        "num_ids": 209
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if number >= need:\n        return [need, 0]\n    elif remaining < need:\n        return [remaining, 0]\n    else:\n        return [need, number - need]\n",
        "num_ids": 49
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    remaining -= number\n    if remaining > 0:\n        return [remaining, 0]\n    else:\n        return [need, remaining]\n",
        "num_ids": 37
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if number == 0:\n        return [0, 0]\n",
        "num_ids": 16
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [number + need - remaining, remaining]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # print(number, need, remaining)\n    if number >= need:\n        return [need, remaining]\n    else:\n        return [number, 0]\n",
        "num_ids": 39
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [remaining - number, need - remaining]\n",
        "num_ids": 14
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    need = abs(need)\n    if need > remaining:\n        return [remaining, 0]\n    elif need == remaining:\n        return [need, 0]\n    else:\n        return [need + (remaining-need), abs(remaining-need)]\n",
        "num_ids": 64
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number > need:\n        return [need, number - need]\n    elif number < need:\n        return [number, 0]\n    else:\n        return [number, 0]\n",
        "num_ids": 46
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if need > remaining:\n        need = remaining\n        \n    if need == 0:\n        return [number, 0]\n    elif number == 0:\n        return [0, need]\n    else:\n        return [number + eat(number - 1, need, remaining - 1), remaining - 1]",
        "num_ids": 71
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    number = min(remaining, need)\n    remaining -= number\n    return [number, remaining]\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return eval(operator + ''.join([str(x) for x in operand]))\n",
        "num_ids": 23
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(operator) == 0:\n        return None\n    if len(operator) == 1:\n        return operator[0]\n",
        "num_ids": 32
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Note: The variable num2 is the second operand\n    # You need to implement this function\n    # Use the operator list to build the string of expression, and then evaluate the string\n    return\n",
        "num_ids": 46
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(operand) - 1!= len(operator):\n        raise Exception('invalid length')\n",
        "num_ids": 26
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if operator[0] == \"+\":\n        return operand[0] + do_algebra(operator[1:], operand[1:])\n    if operator[0] == \"-\":\n        return operand[0] - do_algebra(operator[1:], operand[1:])\n    if operator[0] == \"*\":\n        return operand[0] * do_algebra(operator[1:], operand[1:])\n    if operator[0] == \"//\":\n        return operand[0] // do_algebra(operator[1:], operand[1:])\n    if operator[0] == \"**\":\n        return operand[0] ** do_algebra(operator[1:], operand[1:])\n",
        "num_ids": 179
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = \"\"\n    for c in s:\n        if c.isalpha():\n            res += c.lower() if c.isupper() else c.upper()\n        else:\n            res += c\n    return res",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = \"\"\n    if not s:\n        return result\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        else:\n            result += i\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = \"\"\n    for c in s:\n        if c.isalpha():\n            result += c.lower() if c.isupper() else c.upper()\n        else:\n            result += c\n    return result\n    \ndef run():\n    assert solve(\"1234\") == \"4321\"\n    assert solve(\"ab\") == \"AB\"\n    assert solve(\"#a@C\") == \"#A@c\"\n    assert solve(\"aa\") == \"aa\"\n    assert solve(\"\") == \"\"\n    assert solve(\"#1@\") == \"#1@\"\n    assert solve(\"#A\") == \"#A\"\n    \nif __name__ == \"__main__\":\n    run()\n    print(solve(\"#A\")",
        "num_ids": 170
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(list(s)[::-1])\n",
        "num_ids": 16
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_s = ''\n    for c in s:\n        if c.isalpha():\n            new_s += c.swapcase()\n        else:\n            new_s += c\n    return new_s\n",
        "num_ids": 52
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s)==0:\n        return s\n    reversed = \"\"\n    for i in s:\n        if i.isalpha():\n            reversed = i + reversed\n        else:\n            reversed = i + reversed.swapcase()\n    return reversed",
        "num_ids": 67
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Write your code here\n    return s.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'ZYXWVUTSRQPONMLKJIHGFEDCBA')",
        "num_ids": 61
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    output = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                output += s[i].lower()\n            else:\n                output += s[i].upper()\n        else:\n            output += s[i]\n    return output\n",
        "num_ids": 78
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new = []\n    for i in s:\n        if i.isalpha():\n            new.append(i.swapcase())\n        else:\n            new.append(i)\n    return \"\".join(new)\n",
        "num_ids": 54
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join(map(lambda x: x.upper() if x.isalpha() else x.lower(), s))[::-1] if s else \"\"\n",
        "num_ids": 39
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if text is None or text == '':\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n",
        "num_ids": 31
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    m = md5()\n    m.update(text)\n    return m.hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(text, str):\n        raise ValueError('text must be a string')\n",
        "num_ids": 24
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(text) == 0:\n        return None\n    elif not isinstance(text, str):\n        raise TypeError('Expected a string. Got %s instead' % type(text))\n    elif not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 82
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in range(a, b, 2)]\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [int(x) for x in str(a) + str(b) if x.isdigit() and int(x) % 2 == 0]\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [n for n in range(a, b + 1) if n % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i for i in range(a, b, 2)]\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([i for i in range(a,b+1) if i%2==0])\n",
        "num_ids": 25
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    integers = []\n",
        "num_ids": 7
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(range(a, b+1), key = lambda x: x%2)\n",
        "num_ids": 23
    }
]