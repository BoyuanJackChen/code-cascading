[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return False\n    if len(numbers) <= 2:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i, item1 in enumerate(numbers):\n        for item2 in numbers[i+1:]:\n            if abs(item1 - item2) < threshold:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for index in range(len(numbers)):\n        for index2 in range(index + 1, len(numbers)):\n            if index!= index2 and abs(numbers[index] - numbers[index2]) < threshold:\n                return True\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if i!= j and abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    open_braces = 0\n    curr_paren = 0\n    paren_strings = []\n    for c in paren_string:\n        if c == '(':\n            open_braces += 1\n        elif c == ')':\n            if open_braces == 0:\n                print('Error: closing bracket without matching opening bracket', c)\n                break\n            else:\n                open_braces -= 1\n        elif c =='':\n            pass\n        else:\n            print('Error: invalid character', c)\n            break\n        curr_paren += 1\n        if open_braces == 0 and curr_paren == len(paren_string):\n            paren_strings.append(paren_string[1:-1])\n    return paren_strings\n",
        "num_ids": 184
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    parsed_parens = []\n    i = 0\n    while i < len(paren_string):\n        paren_str = \"\"\n        open_count = 0\n        for j in range(i, len(paren_string)):\n            char = paren_string[j]\n            if char == \"(\":\n                open_count += 1\n            elif char == \")\":\n                if open_count == 0:\n                    break\n                else:\n                    open_count -= 1\n            paren_str += char\n        if open_count > 0:\n            raise ValueError(\"Paren groups are not balanced\")\n        i += len(paren_str) + 1\n        parsed_parens.append(paren_str)\n    return parsed_parens\n",
        "num_ids": 177
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    paren_group = \"\"\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_group += c\n        elif c == ')':\n            paren_groups.append(paren_group)\n            paren_group = \"\"\n        else:\n            paren_group += c\n    if paren_group!= \"\":\n        paren_groups.append(paren_group)\n    return paren_groups\n",
        "num_ids": 128
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    parsed_string = list()\n    start_index = 0\n    while start_index < len(paren_string):\n        level = 0\n        for char in paren_string[start_index:]:\n            if char == '(':\n                level += 1\n            elif char == ')':\n                level -= 1\n            if level == -1:\n                parsed_string.append(paren_string[start_index:start_index+1])\n                start_index += 1\n                break\n        if level!= 0:\n            start_index += 1\n        else:\n            start_index += 1\n    return parsed_string\n",
        "num_ids": 151
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(paren_string)\n    if not n:\n        return []\n    stack = [paren_string[0]]\n    paren_groups = []\n    for i in range(1, n):\n        if paren_string[i] == '(':\n            stack.append('(')\n        elif paren_string[i] == ')':\n            if len(stack) == 1:\n                paren_groups.append(''.join(stack))\n            else:\n                stack.pop()\n    if len(stack) == 1:\n        paren_groups.append(''.join(stack))\n    return paren_groups\n",
        "num_ids": 149
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # use a stack to keep track of open parenthesis\n    # if we see a close paren, we pop the stack\n    # until we find an open paren\n    # add that paren to the output\n    # add the remaining chars to the stack\n",
        "num_ids": 59
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    paren_groups = []\n    paren_group = ''\n    for char in paren_string:\n        if char == '(':\n            paren_group += char\n        elif char == ')':\n            paren_groups.append(paren_group)\n            paren_group = ''\n    if paren_group:\n        paren_groups.append(paren_group)\n",
        "num_ids": 87
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_groups = []\n    for char in paren_string:\n        if char == '(':\n            paren_groups.append('(')\n        elif char == ')':\n            if len(paren_groups) > 0:\n                paren_groups.pop()\n            else:\n                return []\n",
        "num_ids": 72
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            while stack and stack[-1]!= \"(\":\n                result.append(stack.pop())\n            stack.pop()\n        elif char == \" \":\n            pass\n        else:\n            raise ValueError(\"Invalid input\")\n",
        "num_ids": 100
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Split paren string into tokens by spaces.\n    # Split token into list by parenthesis, and append lists to result list.\n    # If token is not a parenthesis, append token to result list.\n",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < 0:\n        raise ValueError(\"Number cannot be negative\")\n",
        "num_ids": 19
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if isinstance(number, int):\n        return 0\n    return number - int(number)\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number == 0:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    integer, dec = math.modf(number)\n    return dec\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return number - math.floor(number)\n",
        "num_ids": 12
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert (number >= 0)\n    new_number = float(number)\n    max_int = int(new_number)\n    if new_number == max_int:\n        return 0.0\n    else:\n        # the float part\n        return new_number - max_int\n",
        "num_ids": 68
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Create two temporary integers to store the integer and the decimal part of\n    # the number\n    int_part = 0\n    decimal_part = 0\n    # Keep looping until the integer part is bigger than the number or the\n    # decimal part is smaller than 1\n    while int_part < number:\n        int_part *= 10\n        decimal_part += 1\n    # Return the integer part of the number\n    return int_part / (10 ** decimal_part)\n",
        "num_ids": 112
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return number - int(number)\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return float(number - int(number))\n",
        "num_ids": 12
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack = []\n    for operation in operations:\n        stack.append(operation)\n        if sum(stack) < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    balance = 0\n",
        "num_ids": 6
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balance = 0\n    for op in operations:\n        if op == -1:\n            balance -= 1\n        else:\n            balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance += operation\n    return balance < 0\n",
        "num_ids": 31
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Get mean of the list.\n    mean = sum(numbers) / len(numbers)\n    # Initialize MAD to a very large value\n    mad = float('inf')\n    # For each element of the list\n    for element in numbers:\n        # Calculate MAD for the current element\n        mad = min(abs(element - mean), mad)\n    return mad\n",
        "num_ids": 88
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    if not numbers:\n        raise ValueError(\"Input must contain at least one number\")\n",
        "num_ids": 45
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(numbers) > 0\n    numbers = sorted(numbers)\n    mean = sum(numbers) / len(numbers)\n    distances = [abs(number - mean) for number in numbers]\n    return sum(distances) / len(distances)\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    average = sum(numbers) / len(numbers)\n    return sum(abs(number - average) for number in numbers) / len(numbers)\n",
        "num_ids": 57
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return mean_absolute_deviation_list(numbers, mean)\n",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n    if len(numbers) == 0:\n        raise ValueError(\"Input list must not be empty\")\n    if len(numbers) == 1:\n        return 0.0\n    if len(numbers) == 2:\n        return abs(numbers[0] - numbers[1])\n    if len(numbers) > 2:\n        return sum([abs(numbers[i] - numbers[0]) for i in range(1, len(numbers))]) / (len(numbers) - 1)\n",
        "num_ids": 143
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers = sorted(numbers)\n    # Centerpoint for Mean Absolute Deviation:\n    # (mean + mean_absolute_deviation(numbers)) / 2\n    # Average absolute difference between a number and the mean of a dataset:\n    # (|x1 - x_mean| + |x2 - x_mean| +... + |xn - x_mean|) / n\n    centerpoint = sum(numbers) / len(numbers)\n    # Average absolute difference between a number and the mean of the dataset:\n    # (|x1 - x_mean| + |x2 - x_mean| +... + |xn - x_mean|) / n\n    # MAD = |x1 - x_mean| + |x2 - x_mean| +... + |xn - x_mean|\n    mad = sum([abs(n - centerpoint) for n in numbers]) / len(numbers)\n    return mad\n",
        "num_ids": 219
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(numbers)\n    if n == 0:\n        raise ValueError(\"Cannot calculate Mean Absolute Deviation with zero input numbers\")\n    if n == 1:\n        return 0.0\n    return sum(abs(x - numbers[int(n/2)]) for x in numbers) / (n-1)\n",
        "num_ids": 77
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if mean is 0 then we don't know the mean, so just return 0\n    if not numbers:\n        return 0\n",
        "num_ids": 30
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not isinstance(numbers, list):\n        raise TypeError(\"`numbers` must be a list\")\n    if not numbers:\n        raise ValueError(\"`numbers` must be a non-empty list\")\n",
        "num_ids": 52
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 15
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return numbers\n    elif len(numbers) == 1:\n        return [delimeter] + numbers\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 59
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [delimeter] + numbers[1::2] + [delimeter]\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [numbers[0]] + [delimeter] + numbers[1:]\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers = [delimeter] + numbers + [delimeter]\n    result = []\n    for i in range(0, len(numbers) - 1, 2):\n        result.extend([numbers[i], numbers[i + 1]])\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not isinstance(numbers, list):\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers = numbers.copy()\n    numbers.insert(0, delimeter)\n    if not numbers[-1] == delimeter:\n        numbers.append(delimeter)\n    return numbers\n",
        "num_ids": 49
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n        result.append(numbers[i + 1])\n    if len(numbers) % 2!= 0:\n        result.append(numbers[len(numbers) - 1])\n    return result\n",
        "num_ids": 90
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return delimeter * (len(numbers) - 1) * [None] + numbers\n",
        "num_ids": 22
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            stack.append(i)\n            depth += 1\n        elif paren_string[i] == ')':\n            stack.pop()\n            if not stack:\n                return [depth]\n            depth = max(depth - 1, len(stack))\n    return [depth]\n",
        "num_ids": 104
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not paren_string:\n        return []\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    paren_stack = []\n    max_depth = 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Mark which parenthesis are \"in\" as well as \"out\"\n    # e.g. the following paren string: (()()) has two groups: ((())) and (()())\n    # Each group has two parenthesis, \"in\" and \"out\", respectively\n    # Initially, the stack is empty. Whenever we see an \"in\" paren, we push to the stack\n    # Whenever we see a \"out\" paren, we pop the top of the stack and compare the popped paren to the current group's parens\n    # Whenever we see a \")\" paren that is \"out\" of the current group, we compare the current group's parens to the stack\n    # Time - O(n)\n    # Space - O(n)\n    paren_stack = []\n    paren_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for i in range(len(paren_string)):\n        paren = paren_string[i]\n        if paren == \"(\":\n            paren_stack.append(\"(\")\n        elif paren == \")\":\n            # This paren is out of the current group. If the top of the stack is an \"in\" paren, we have found a \")\" that comes out of the group\n            if paren_stack and paren_map[paren] == paren_stack[-1]:\n                paren_stack.pop()\n            else:\n                return []\n    return []\n",
        "num_ids": 337
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    nest_level = []\n",
        "num_ids": 9
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    parens_stack = []\n    level = 0\n",
        "num_ids": 19
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nested_parens = []\n    for paren_group in paren_string.split(' '):\n        start_level = 0\n        end_level = 0\n        for paren in paren_group:\n            if paren == '(':\n                start_level += 1\n            elif paren == ')':\n                end_level += 1\n        nested_parens.append(start_level + end_level)\n    return nested_parens\n",
        "num_ids": 109
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    open_parens = [1]\n    close_parens = [1]\n    for c in paren_string:\n        if c == '(':\n            open_parens.append(1)\n            close_parens.append(1)\n        elif c == ')':\n            open_parens.pop()\n            close_parens.pop()\n    return close_parens[::-1]\n",
        "num_ids": 99
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    levels = []\n    for paren in paren_string:\n        if paren == '(':\n            stack.append('(')\n        elif paren == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                levels.append(0)\n                break\n    if len(stack) > 0:\n        levels.append(0)\n    else:\n        levels = list(map(lambda x: x + 1, levels))\n",
        "num_ids": 118
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_strings = [paren_string]\n    max_depth = 0\n    while True:\n        new_strings = []\n        for paren_string in paren_strings:\n            new_strings += get_nested_parens(paren_string)\n        if len(new_strings) == 0:\n            break\n        paren_strings = new_strings\n        max_depth = max(max_depth, len(paren_strings))\n    return [max_depth] * len(paren_strings)\n",
        "num_ids": 119
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x*y, numbers)\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    product = 1\n    sum = 0\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total, product = 0, 1\n    for num in numbers:\n        total += num\n        product *= num\n    return total, product\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # 0 and 1 for the sum and product\n    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return s, p\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = numbers[0]\n    product = 1\n    for num in numbers:\n        result += num\n        product *= num\n",
        "num_ids": 32
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(numbers), functools.reduce(operator.mul, numbers, 1)\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        first = numbers.pop(0)\n        new_sum, new_product = sum_product(numbers)\n        return (new_sum + first, new_product * first)\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i, n in enumerate(numbers):\n        if i == 0:\n            result.append(n)\n        elif n > result[-1]:\n            result.append(n)\n        else:\n            result.append(result[-1])\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    results = [numbers[0]]\n    for i, num in enumerate(numbers):\n        if i == 0:\n            continue\n        if num > results[-1]:\n            results.append(num)\n        else:\n            results[-1] = num\n    return results\n",
        "num_ids": 69
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    m = max(numbers)\n    # max_lst = []\n    # for i in range(len(numbers)):\n    #     if numbers[i] == m:\n    #         max_lst.append(m)\n    #     else:\n    #         max_lst.append(max(max_lst[i-1], numbers[i]))\n    # return max_lst\n    # return [max(max_lst[i-1], numbers[i]) for i in range(len(numbers))]\n",
        "num_ids": 130
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_list = [numbers[0]]\n    for num in numbers[1:]:\n        if num > max_list[-1]:\n            max_list.append(num)\n        else:\n            max_list[-1] = num\n    return max_list\n",
        "num_ids": 66
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert len(numbers) > 0, \"List should have more than one element\"\n    \n    current_max = numbers[0]\n    rolling_maxes = [current_max]\n    \n    for i in range(1, len(numbers)):\n        current_max = max(current_max, numbers[i])\n        rolling_maxes.append(current_max)\n    \n    return rolling_maxes\n",
        "num_ids": 100
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    max_current = max_prev = numbers[0]\n    for number in numbers[1:]:\n        max_current = max(max_current, number)\n        result.append(max_current)\n",
        "num_ids": 54
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = [max(numbers[0], numbers[1])]\n    for i in range(2, len(numbers)):\n        s.append(max(s[i - 1], numbers[i]))\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rolling_max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        rolling_max_list.append(max(numbers[i], rolling_max_list[-1]))\n    return rolling_max_list\n",
        "num_ids": 65
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return []\n    #\n    result = [0] * len(numbers)\n    for i, n in enumerate(numbers):\n        if i == 0:\n            result[i] = n\n        else:\n            result[i] = max(n, result[i - 1])\n    return result\n",
        "num_ids": 85
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_seen = numbers[0]\n    result = [max_seen]\n    for number in numbers[1:]:\n        if max_seen < number:\n            max_seen = number\n        result.append(max_seen)\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if string == '':\n        return string\n    return string + make_palindrome(string[:-1]) + string[::-1]\n",
        "num_ids": 35
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return string\n    start = 0\n    end = len(string) - 1\n    while start < end:\n        if string[start] == string[end]:\n            start += 1\n            end -= 1\n        else:\n            break\n    prefix = string[:start][::-1]\n    suffix = string[end+1:]\n    return prefix + suffix",
        "num_ids": 91
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Base case\n    if string == \"\":\n        return string\n    # Prefix that is a palindrome\n    prefix = \"\"\n    while is_palindrome(string):\n        prefix += string[-1]\n        string = string[:-1]\n    # Suffix that is a palindrome\n    suffix = \"\"\n    while is_palindrome(string):\n        suffix = string[0] + suffix\n        string = string[1:]\n    # Return the longest palindrome with prefix + suffix\n    return prefix + suffix",
        "num_ids": 127
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not string:\n        return string\n    prefix = ''\n    postfix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[0:i]):\n            prefix = string[0:i]\n            break\n    for i in range(len(string), len(string), -1):\n        if is_palindrome(string[0:i]):\n            postfix = string[0:i]\n            break\n    return prefix + postfix[::-1]",
        "num_ids": 126
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Determine if supplied string is already a palindrome\n    if is_palindrome(string):\n        return string\n    else:\n        # Find the longest postfix of the supplied string that is a palindrome\n        # (e.g. c is the longest palindrome prefix of cattac)\n        for i in range(len(string) - 1, -1, -1):\n            if is_palindrome(string[i:]):\n                return string[:i] + string[:i][::-1]\n",
        "num_ids": 125
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Make a string that is equivalent to string + string[::-1]\n    # Time complexity is O(n^2)\n    # Space complexity is O(n)\n    longest_prefix = get_longest_prefix(string)\n    if longest_prefix == '':\n        return string\n    # If string is already a palindrome, return itself\n    if is_palindrome(string):\n        return string\n    # Make the string that is equivalent to string + string[::-1]\n    # Time complexity is O(n)\n    # Space complexity is O(n)\n    longest_suffix = string[len(string) - len(longest_prefix):]\n    # Reverse the string suffix\n    # Time complexity is O(n)\n    # Space complexity is O(n)\n    reverse_suffix = longest_suffix[::-1]\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # Time complexity is O(n)\n    # Space complexity is O(n)\n    return longest_prefix + reverse_suffix\n",
        "num_ids": 260
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if string == \"\":\n        return \"\"\n",
        "num_ids": 12
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(1, len(string)):\n        longest_palindrome = find_longest_palindrome(string, i)\n        if is_palindrome(longest_palindrome):\n            return string[:i] + longest_palindrome + string[:i][::-1]\n    return string[:1] + string + string[:1][::-1]\n",
        "num_ids": 97
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Initialize best to the string itself\n    best = string\n    if is_palindrome(string):\n        return string\n    # Initialize max to 0\n    max = 0\n    # Find the longest suffix of the supplied string that is a palindrome\n    for i in range(len(string) - 1, -1, -1):\n        test = string[i:]\n        if is_palindrome(test):\n            if len(test) > max:\n                max = len(test)\n                best = string[:i] + test\n    # Now, do the same for the reverse of the string\n    rev = string[::-1]\n    for i in range(len(rev) - 1, -1, -1):\n        test = rev[i:]\n        if is_palindrome(test):\n            if len(test) > max:\n                max = len(test)\n                best = rev[:i] + test\n    return best\n",
        "num_ids": 225
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    raise ValueError('No palindromic suffix found')\n",
        "num_ids": 65
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert len(a) == len(b)\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 46
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = ''\n    for i in range(0, len(a)):\n        res += ''.join(map(lambda x: x[0]!= x[1], zip(a[i], b[i])))\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res.append('0')\n        else:\n            res.append('1')\n    return ''.join(res)\n",
        "num_ids": 59
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a_bin = ''.join(format(ord(x), 'b') for x in a)\n    b_bin = ''.join(format(ord(x), 'b') for x in b)\n    xor_bin = list(map(lambda x, y: str(int(x) ^ int(y)), a_bin, b_bin))\n    return ''.join(xor_bin)\n",
        "num_ids": 96
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(\n        ['0' if (a[i] == b[i]) else '1' for i in range(len(a))]\n    )\n",
        "num_ids": 41
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(a)!= len(b):\n        raise ValueError('Length of strings a and b must be equal')\n",
        "num_ids": 29
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = ''\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "num_ids": 53
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(chr(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    longest_string = None\n    for string in strings:\n        if longest_string is None:\n            longest_string = string\n        else:\n            if len(longest_string) < len(string):\n                longest_string = string\n    return longest_string\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest = strings[0]\n    for item in strings:\n        if len(item) > len(longest):\n            longest = item\n    return longest\n",
        "num_ids": 50
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(strings, key=len) if strings else None\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    else:\n        return greatest_common_divisor(a, b - greatest_common_divisor(a, b))\n",
        "num_ids": 67
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return b if a == 0 else greatest_common_divisor(b % a, a)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a == 0 or b == 0:\n        return a or b\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n",
        "num_ids": 76
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 63
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    while a:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 37
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Euclid's algorithm\n    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 28
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n",
        "num_ids": 27
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    all_prefixes_list = []\n    for i in range(1, len(string) + 1):\n        all_prefixes_list.append(string[:i])\n    return all_prefixes_list\n",
        "num_ids": 52
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not string:\n        return []\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 34
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i + 1])\n    return all_prefixes\n",
        "num_ids": 44
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \" \".join(str(i) for i in range(n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seq = [str(i) for i in range(n + 1)]\n    return \" \".join(seq)\n",
        "num_ids": 28
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return \"0\"\n    res = []\n    for i in range(n+1):\n        res.append(str(i))\n    return \" \".join(res)\n",
        "num_ids": 49
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    string = \"\"\n    for i in range(n+1):\n        string += str(i) + \" \"\n    return string\n",
        "num_ids": 32
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join(str(x) for x in range(n))\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0 1'\n    else:\n        return string_sequence(n - 1) +'' + str(n)\n",
        "num_ids": 51
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(n+1):\n        res.append(str(i))\n    return \" \".join(res)\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = ''\n    if n > 0:\n        s += '0'\n        for i in range(1, n+1):\n            s +='' + str(i)\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for letter in string:\n        if letter.islower():\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) == 0:\n        return 0\n    elif len(string) == 1:\n        return 1\n    else:\n        return count_distinct_characters(string[1:]) + 1 if string[0].lower()!= string[0].upper() else count_distinct_characters(string[1:])\n",
        "num_ids": 81
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Initialize a Hash table (Hash table is implemented as a dictionary)\n    # We'll use a Python dictionary\n    char_count_table = {}\n    for char in string:\n        char_count_table[char.lower()] = char_count_table.get(char.lower(), 0) + 1\n    return len(char_count_table)\n",
        "num_ids": 84
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # return len(set(string.lower()))\n    return len(set([x for x in string.lower() if x.isalpha()]))\n",
        "num_ids": 37
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string = string.lower()\n    return len(set(string))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set([c for c in string.lower()]))\n",
        "num_ids": 18
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = string.lower()\n    characters = []\n    for c in string:\n        if c not in characters:\n            characters.append(c)\n    return len(characters)\n",
        "num_ids": 47
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    note_names = [\"o\", \"o|\", \".|\", \"|\", \"\"]\n    total_len = len(music_string)\n    notes = [0] * total_len\n    for i, note in enumerate(music_string):\n        if note == \"o\":\n            notes[i] = 4\n        elif note == \"o|\":\n            notes[i] = 2\n        elif note == \".\":\n            notes[i] = 1\n    return notes\n",
        "num_ids": 114
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    notes = []\n    i = 0\n    while i < len(music_string):\n        if i + 3 >= len(music_string):\n            notes.append(1)\n            i += 1\n        else:\n            if music_string[i] == 'o':\n                notes.append(1)\n            elif music_string[i:i+2] == 'oo':\n                notes.append(2)\n            elif music_string[i:i+3] == 'ooo':\n                notes.append(4)\n            else:\n                notes.append(2)\n        i += 1\n    return notes\n",
        "num_ids": 146
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    music_list = []\n    i = 0\n    while i < len(music_string):\n        count = 1\n        while i < len(music_string) and music_string[i]!='':\n            count += 1\n            i += 1\n        if i < len(music_string):\n            music_list.append(count)\n            i += 1\n    return music_list\n",
        "num_ids": 93
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(0, len(music_string), 4):\n        result.append(int(music_string[i:i+2]!= '|'))\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Your code here\n    return [len(x) for x in music_string.split(' ')]\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    music = music_string.split(' ')\n    beats = []\n    for note in music:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n",
        "num_ids": 84
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.':\n            result.append(1)\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for element in music_string.split(' o'):\n        result.append(element.count('|'))\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    music = music_string.split(' ')\n    parsed_music = []\n    for element in music:\n        if element == 'o' or element == 'o|':\n            parsed_music.append(1)\n        elif element == '.|':\n            parsed_music.append(0.5)\n        elif element == '|':\n            parsed_music.append(0.25)\n        else:\n            raise Exception('Wrong music format.')\n    return parsed_music\n",
        "num_ids": 123
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    song = []\n",
        "num_ids": 6
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string.split(substring)) - 1\n",
        "num_ids": 15
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for index in range(len(string)):\n        if string[index: index + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    occurences = string.count(substring)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #return sum(1 for _ in itertools.groupby(string))\n    count = 0\n    for i, v in enumerate(string):\n        if v == substring[0]:\n            count += 1\n            if i + len(substring) - 1 < len(string) and string[i + 1 : i + len(substring)] == substring:\n                count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(re.findall(r'(?=%s)' % re.escape(substring), string))\n",
        "num_ids": 29
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string.split(substring, string.count(substring))) - 1\n",
        "num_ids": 22
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string.split(substring)) - 1\n",
        "num_ids": 15
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    times = 0\n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers.split()))\n",
        "num_ids": 16
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(sorted(numbers.split(' ')))\n",
        "num_ids": 17
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Convert to integer\n    numbers = [int(i) for i in numbers.split()]\n    numbers.sort()\n    return \" \".join(str(i) for i in numbers)\n",
        "num_ids": 48
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(sorted(numbers, key=numeric_order))\n",
        "num_ids": 21
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 0\n    j = len(numbers)-1\n    while i <= j:\n        while i <= j and numbers[i] == \"0\":\n            i += 1\n        while i <= j and numbers[j] == \"9\":\n            j -= 1\n        if i <= j:\n            numbers = numbers[:i] + numbers[j+1:] + numbers[i:j+1] + numbers[i] + numbers[j]\n            i += 1\n            j -= 1\n    return numbers\n",
        "num_ids": 120
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # enumerate returns both the index and the value of the item\n    # -1 is the last item in the list\n    # items() is a generator over the keys of a dictionary\n    # items returns the key, value pairs of the dictionary\n    for number, index in zip(numbers.split(\" \"), range(len(numbers.split(\" \")))):\n        numbers = numbers.replace(number, str(index))\n    return \" \".join(sorted(numbers.split(\" \"), key=int))\n",
        "num_ids": 119
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    number_to_index = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = []\n    for number in numbers.split():\n        sorted_numbers.append(number_to_index[number])\n    return''.join([str(i) for i in sorted_numbers])\n",
        "num_ids": 112
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers = [int(x) for x in numbers.split(' ')]\n    return''.join([str(x) for x in sorted(numbers)])\n",
        "num_ids": 39
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_numbers =''.join(sorted(numbers.split(' ')))\n    return sorted_numbers\n",
        "num_ids": 29
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    smallest = None\n    largest = None\n    for i in range(len(numbers)):\n        if smallest is None or numbers[i] < numbers[smallest]:\n            smallest = i\n        if largest is None or numbers[i] > numbers[largest]:\n            largest = i\n    return numbers[smallest], numbers[largest]\n",
        "num_ids": 81
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers.sort()\n    n1 = numbers[0]\n    n2 = numbers[1]\n    diff = abs(n1 - n2)\n    for i in range(2, len(numbers)):\n        n = numbers[i]\n        tmp = abs(n1 - n)\n        if tmp < diff:\n            diff = tmp\n            n1 = n2\n            n2 = n\n    return n1, n2\n",
        "num_ids": 105
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers = sorted(numbers)\n",
        "num_ids": 11
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert len(numbers) >= 2, \"The input list must contain at least two numbers\"\n    numbers.sort()\n    return numbers[0], numbers[-1]\n",
        "num_ids": 42
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers.sort()\n",
        "num_ids": 8
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numbers = sorted(numbers)\n    min_1, min_2 = numbers[0], numbers[1]\n    min_distance = abs(min_1 - min_2)\n    for i in range(2, len(numbers)):\n        current = abs(numbers[i] - numbers[i-1])\n        if current < min_distance:\n            min_2 = min_1\n            min_1 = numbers[i]\n            min_distance = current\n    return min_1, min_2\n",
        "num_ids": 123
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert len(numbers) >= 2, \"List must have at least two elements\"\n    return (min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0])))\n",
        "num_ids": 63
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # The key is to sort the list from smallest to largest, and take the smallest (and second smallest) numbers,\n    # then compare them. If they are equal, then we return both numbers in the list, which is the closest pair\n    # of numbers.\n    sorted_numbers = sorted(numbers)\n    return (sorted_numbers[0], sorted_numbers[1])\n",
        "num_ids": 91
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers.sort()\n",
        "num_ids": 8
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_numbers = sorted(numbers)\n    number_range = sorted_numbers[-1] - sorted_numbers[0]\n    unit_numbers = [number / number_range for number in sorted_numbers]\n    return unit_numbers\n",
        "num_ids": 64
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_value = max(numbers)\n    min_value = min(numbers)\n    return [(i - min_value) / (max_value - min_value) for i in numbers]\n",
        "num_ids": 48
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        return numbers\n    rescaled = []\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_ = max_num - min_num\n    if range_ < 1e-10:\n        range_ = 1.0\n    for n in numbers:\n        rescaled.append((n - min_num) / range_)\n    return rescaled\n",
        "num_ids": 106
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    minimum, maximum = min(numbers), max(numbers)\n    slope = 1.0 / (maximum - minimum)\n    intercept = -slope * minimum\n    return [slope * x + intercept for x in numbers]\n",
        "num_ids": 56
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_min, num_max = min(numbers), max(numbers)\n    return list(map(lambda x: (x - num_min) / (num_max - num_min), numbers))\n",
        "num_ids": 50
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    maximum = max(numbers)\n    minimum = min(numbers)\n    return [(x - minimum) / (maximum - minimum) for x in numbers]\n",
        "num_ids": 38
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    max_diff = max_num - min_num\n    new_numbers = []\n    for i in numbers:\n        new_numbers.append(i / max_diff)\n    return new_numbers\n",
        "num_ids": 73
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = []\n    for num in numbers:\n        rescaled.append((num - min_val)/(max_val - min_val))\n    return rescaled\n",
        "num_ids": 65
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    m = (max_num - min_num) / 2\n    result = []\n    for num in numbers:\n        result.append((num - min_num) / m)\n",
        "num_ids": 65
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert len(numbers) > 1, \"Need at least two numbers to rescale\"\n    min_n = min(numbers)\n    max_n = max(numbers)\n    return [(n - min_n) / (max_n - min_n) for n in numbers]\n",
        "num_ids": 69
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i for i in values if isinstance(i, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [item for item in values if isinstance(item, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in values if type(i) == int]\n",
        "num_ids": 18
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "num_ids": 34
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n // 2 - 1 if n % 2 == 0 else n // 2\n",
        "num_ids": 19
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    largest = 1\n    divisor = 1\n    \n    while divisor <= n:\n        if n % divisor == 0:\n            largest = divisor\n        divisor += 1\n    \n    return largest\n    \ndef next_multiple(n: int) -> int:\n    \"\"\" Find the smallest number that is larger than n and evenly divisible by all numbers less than n\n    >>> next_multiple(17)\n    20\n    \"\"\"\n    \n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n",
        "num_ids": 134
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n - 1 if n % 2 else n // 2\n",
        "num_ids": 15
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return divisor\n",
        "num_ids": 47
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n - 1 if n % 2 == 0 else n\n",
        "num_ids": 15
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert isinstance(n, int) and n > 1, \"n must be a positive integer\"\n    return n if n == 2 or n == 3 else (2 if n % 2 == 0 else 3)\n",
        "num_ids": 48
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    div = 1\n    while div < n:\n        if n % div == 0:\n            divisor = div\n        div += 1\n    return divisor\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            break\n        divisor += 1\n    return divisor\n",
        "num_ids": 44
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    k = 2\n    while k < n:\n        if n % k == 0:\n            return k\n        k += 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return [2] * (n // 2)\n    factor = 3\n    factors = []\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n = n // factor\n            if n % factor == 0:\n                factors.append(factor)\n        else:\n            factor += 2\n    return factors\n",
        "num_ids": 96
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # only positive integers\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('Input must be a positive integer')\n",
        "num_ids": 36
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from math import sqrt\n",
        "num_ids": 8
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    factors = []\n    if n % 2 == 0:\n        factors.append(2)\n        n //= 2\n",
        "num_ids": 31
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    factor_list = []\n    while n % 2 == 0:\n        factor_list.append(2)\n        n //= 2\n",
        "num_ids": 33
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n_copy = n\n    factors = []\n    while n_copy > 1:\n        for i in range(2, int(n_copy + 1)):\n            if n_copy % i == 0:\n                n_copy /= i\n                factors.append(i)\n                break\n    return factors\n",
        "num_ids": 76
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return [2] * (n // 2)\n    else:\n        max = n + 1\n        primes = [2]\n        check = 3\n        while check <= max:\n            if n % check == 0:\n                primes.append(check)\n                max = n // check\n                check = 3\n            else:\n                check += 2\n        return primes\n",
        "num_ids": 97
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            if n / i == i:\n                return [i]\n            else:\n                return [i] + factorize(n // i)\n        i += 2\n    return []\n",
        "num_ids": 111
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert (n > 0), \"Factorization is not defined for negative numbers\"\n",
        "num_ids": 19
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    factors = []\n    p = 2\n    while p < n:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            p += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 72
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_list = []\n    for x in numbers:\n        if x not in new_list:\n            new_list.append(x)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) == 0:\n        return []\n    else:\n        current_num = numbers[0]\n        return_list = [current_num]\n        for number in numbers[1:]:\n            if number!= current_num:\n                return_list.append(number)\n                current_num = number\n        return return_list\n",
        "num_ids": 84
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return [i for i in numbers if numbers.count(i) == 1]\n    \n",
        "num_ids": 24
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    index = 0\n    while index < len(numbers) - 1:\n        if numbers[index] == numbers[index + 1]:\n            numbers.pop(index + 1)\n        else:\n            index += 1\n    return numbers\n",
        "num_ids": 57
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return []\n    new_list = [numbers[0]]\n    for num in numbers[1:]:\n        if num!= new_list[-1]:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 62
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    upper_to_lower = string.maketrans(\n        str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n                      \"abcdefghijklmnopqrstuvwxyz\"))\n    lower_to_upper = string.maketrans(\n        str.maketrans(\"abcdefghijklmnopqrstuvwxyz\",\n                      \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    return string.translate(upper_to_lower).translate(lower_to_upper)\n",
        "num_ids": 140
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n    \n",
        "num_ids": 12
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(swapcase(char) for char in string)\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n",
        "num_ids": 55
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = list(string)\n    for i, char in enumerate(s):\n        if char.isupper():\n            s[i] = char.lower()\n        elif char.islower():\n            s[i] = char.upper()\n    return \"\".join(s)\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(\n        s.swapcase()\n        if s.islower()\n        else s.upper()\n        for s in string\n        )\n    \ndef run():\n    import doctest\n    doctest.testmod()\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids": 86
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    string = list(string)\n    for i, l in enumerate(string):\n        if l.isupper():\n            string[i] = l.lower()\n        elif l.islower():\n            string[i] = l.upper()\n    return \"\".join(string)\n",
        "num_ids": 69
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 20
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l1 = []\n    for i in l:\n        if i > 0:\n            l1.append(i)\n    return l1\n",
        "num_ids": 35
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = [i for i in l if i > 0]\n    return l\n",
        "num_ids": 20
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #The second test is redundant, but just to be sure...\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return all(n % i for i in range(2, n))\n",
        "num_ids": 60
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            if n > 2:\n                for x in range(2, n):\n                    if n % x == 0:\n                        return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # if n <= 1:\n    #     return False\n    # if n == 2:\n    #     return True\n    # if n % 2 == 0:\n    #     return False\n    # for i in range(3, int(n**0.5) + 1, 2):\n    #     if n % i == 0:\n    #         return False\n    # return True\n",
        "num_ids": 90
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # prime numbers are greater than 1\n    if n < 2:\n        return False\n    # 2 is the only even prime number\n    if n == 2:\n        return True\n    # all other even numbers are not prime\n    if n % 2 == 0:\n        return False\n    # test if any of the numbers less than n is divisible by any number between 2 and sqrt(n)\n    for i in range(3, int(sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 128
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # 'and' operator is also a logical operator, meaning\n    # that it evaluates to true if both the left and right\n    # operands are true.\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # Since we've already checked for 2 and 3, we know\n    # no even numbers are divisible by 2 or 3.\n    for x in range(5, int(n**0.5 + 1), 6):\n        if n % x == 0 or n % (x+2) == 0:\n            return False\n    return True\n",
        "num_ids": 159
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, n//2, 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 62
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for i in range(3, int(n**.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = 0\n    x = 0\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            continue\n        elif coeff < 0:\n            return None\n        else:\n            s += coeff * x\n            x += 1\n    return s / x\n",
        "num_ids": 71
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(xs) % 2:\n        return None\n    if max(xs) < 0:\n        return None\n    i = len(xs) // 2\n    xs1 = xs[:i]\n    xs2 = xs[i:]\n    return (xs2[-1] - poly(xs1, -xs2[-1])) / (xs1[-1] - poly(xs2, -xs1[-1]))\n",
        "num_ids": 106
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    x_arr = []\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            continue\n        if xs[i] < 0:\n            x_arr.append(-1)\n        elif xs[i] > 0:\n            x_arr.append(1)\n        if abs(xs[i]) == 1:\n            return -xs[0] / xs[i]\n    return sum(x_arr)\n",
        "num_ids": 112
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - 6 = 0\n    # x^2 - 3x + 6 = 0\n    # x^2 - 3x - ",
        "num_ids": 1025
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) % 2!= 0:\n        raise ValueError('find_zero takes list xs having even number of coefficients')\n",
        "num_ids": 33
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(xs) % 2 == 0:\n        for i in range(len(xs) - 1):\n            if xs[i]!= 0:\n                break\n        else:\n            raise ValueError(\"Cannot find zero point since all coefficients are zero.\")\n        return - (xs[i] / xs[i - 1])\n    else:\n        raise ValueError(\"Cannot find zero point since list has odd number of coefficients.\")\n",
        "num_ids": 103
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) % 2!= 0:\n        return None\n    for i in range(len(xs) // 2):\n        if xs[i * 2] == 0:\n            return xs[i * 2]\n    return None\n",
        "num_ids": 59
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(xs)\n    assert n % 2 == 0, \"polynomial should have even number of coeffs\"\n",
        "num_ids": 31
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) % 2!= 0:\n        raise Exception(\"The polynomial must have an even number of coefficients.\")\n",
        "num_ids": 31
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # if all zeros\n    if all(coeff == 0 for coeff in xs):\n        return 0\n    # if only one zero\n    if xs.count(0) == 1:\n        return -xs[0] / xs[1]\n    # if even number of coefficients\n    if len(xs) % 2 == 0:\n        # try to find zero using binary search\n        l = 0\n        r = len(xs) - 1\n        while l <= r:\n            m = l + (r - l) // 2\n            if poly(xs[:m + 1], xs[m]) * poly(xs[:m], xs[m]) < 0:\n                l = m + 1\n            else:\n                r = m - 1\n        return -(poly(xs[:l], xs[l]) / poly(xs[:l + 1], xs[l + 1]))\n    else:\n        # try to find zero using Newton-Raphson method\n        a = 0\n        while poly(xs[:a], xs[a]) * poly(xs[a + 1:], xs[a]) < 0:\n            a += 1\n        if poly(xs[:a], xs[a]) * poly(xs[a + 1:], xs[a]) < 0:\n            return -(poly(xs[:a], xs[a]) / poly(xs[a + 1:], xs[a]))\n        else:\n            return -poly(xs[:a], xs[a]) / poly(xs[a + 1:], xs[a])\n",
        "num_ids": 375
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = l[0:3]\n    result.sort()\n    result.append(l[3])\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted([x for i, x in enumerate(l) if i % 3!= 0], key = lambda x: x)\n",
        "num_ids": 32
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_list = []\n    for index in range(len(l)):\n        if index % 3!= 0:\n            new_list.append(l[index])\n        else:\n            new_list.append(l[index])\n    return new_list\n",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l1 = []\n    l2 = []\n    l3 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        elif i % 3 == 1:\n            l2.append(i)\n        else:\n            l3.append(i)\n    return l1+sorted(l2)+sorted(l3)\n",
        "num_ids": 94
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    copy = l[:]\n    copy.sort()\n    # copy = sorted(l)\n    for i in range(len(copy)):\n        if i % 3!= 0:\n            l[i] = copy[i]\n    return l\n",
        "num_ids": 60
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Hint: consider using list slicing, as in l[::3], l[1::3], etc.\n    l[::3] = sorted(l[::3])\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #The following line sorts the list l using the first function, but the list is not changed\n    #l.sort()\n    #The following two lines sort the list l using the second function\n    l = sorted(l)\n    l1 = []\n    #The following line sorts the list l using the first function, but the list is changed to l1\n    #l1.sort()\n    #The following line adds the sorted elements of l1 to l2\n    #l1 = l\n    #The following line adds the sorted elements of l to l3\n    #l3 = l1\n    l1 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        else:\n            continue\n    l2 = []\n    for i in l1:\n        l2.append(l[l.index(i)])\n    l3 = l2\n    return l3\n",
        "num_ids": 215
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l_sorted = l[:]\n    for index in range(len(l_sorted)):\n        if index % 3!= 0:\n            continue\n        else:\n            l_sorted[index] = l[index]\n    return l_sorted\n",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    div3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_not_div3 = [l[i] for i in range(len(l)) if i % 3!= 0]\n    l_not_div3.sort()\n    return div3 + l_not_div3\n",
        "num_ids": 81
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l_new = [l[0]]\n    for elem in l:\n        if elem % 3 == 0:\n            l_new.append(elem)\n        else:\n            l_new.append(elem)\n    return l_new\n",
        "num_ids": 62
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ulist = []\n    [ulist.append(x) for x in l if x not in ulist]\n    return ulist\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = sorted(set(l))\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # http://stackoverflow.com/a/480227/788200\n    # http://stackoverflow.com/questions/1691386/python-how-do-i-remove-duplicates-from-a-list-whilst-preserving-order\n    # http://stackoverflow.com/a/480227/788200\n    return list(sorted(set(l)))\n",
        "num_ids": 96
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = []\n    for item in l:\n        if item not in res:\n            res.append(item)\n    return sorted(res)\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    for x in l:\n        if x not in l2:\n            l2.append(x)\n    return l2\n",
        "num_ids": 37
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    u = set(l)\n    u = list(u)\n    u.sort()\n    return u\n",
        "num_ids": 27
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(OrderedDict((x, None) for x in l).keys())\n",
        "num_ids": 22
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_so_far = l[0]\n    for el in l:\n        if el > max_so_far:\n            max_so_far = el\n    return max_so_far\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert l, 'Cannot find maximum of empty list'\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 46
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n",
        "num_ids": 36
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n",
        "num_ids": 61
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(l) > 0\n    return max(l)\n",
        "num_ids": 17
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    maximum = l[0]\n    for i in range(1, len(l)):\n        if maximum < l[i]:\n            maximum = l[i]\n    return maximum\n",
        "num_ids": 44
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n",
        "num_ids": 15
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    times = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            times += 1\n    return times\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ans = 0\n    for i in range(1,n+1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            ans += 1\n    return ans\n",
        "num_ids": 46
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(n):\n        if (i+1)%13 == 0 or (i+1)%11 == 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 0\n    if n == 1:\n        return 0\n    return sum([1 for num in range(1, n) if (num % 11 == 0 or num % 13 == 0)])\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        n = abs(n)\n    divisors_of_seven = 0\n    for i in range(n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            divisors_of_seven += 1\n    return divisors_of_seven\n",
        "num_ids": 74
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # return sum(1 for i in range(1,n) if i%11==0 or i%13==0)\n    return sum(1 for i in range(1,n) if \"7\" in str(i) or \"7\" in str(i%11) or \"7\" in str(i%13))\n",
        "num_ids": 76
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(n) if 7 in str(i) and i % 11 == 0 or i % 13 == 0)\n",
        "num_ids": 34
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n - 1)\n    return fizz_buzz(n - 1)\n",
        "num_ids": 56
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    elif n % 11 == 0 or n % 13 == 0:\n        return 1 + fizz_buzz(n-1)\n    else:\n        return fizz_buzz(n-1)\n",
        "num_ids": 60
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # l_odd = [l[i] for i in range(0, len(l), 2)]\n    # l_even = [l[i] for i in range(1, len(l), 2)]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(1, len(l), 2)]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(len(l))]\n    # l_even = [l[i] for i in range(len(l))]\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    # l_odd = [l[i] for i in range(len(l)) if i % 2!= 0]\n    # l_odd.sort()\n    return l_even\n",
        "num_ids": 243
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = l[::2]\n    l.sort()\n    return l + [l[i] for i in range(1, len(l), 2)]\n",
        "num_ids": 39
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i])\n        else:\n            result.append(sorted(l[i])[1])\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l_odds = l[1::2]\n    l_evens = l[::2]\n    l_odds.sort()\n    l_evens.sort()\n    return [l_odds[i] if i < len(l_odds) else l_evens[i] for i in range(len(l))]\n",
        "num_ids": 83
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [l[x] for x in [0, 2, 1, 3]]\n",
        "num_ids": 21
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return l\n    elif len(l) == 2:\n        if l[0] % 2 == 0:\n            l[0], l[1] = l[1], l[0]\n        return l\n    else:\n        return [l[0]] + sort_even(l[1:])\n",
        "num_ids": 98
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # List comprehension to return l' as described in the function docstring\n    l[1::2] = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort l'\n    l.sort()\n    \n    return l\n    \n",
        "num_ids": 68
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(0, len(l), 2):\n        j = i + 1\n        while j < len(l):\n            if l[i] > l[j]:\n                l[i], l[j] = l[j], l[i]\n            j += 1\n    return l\n",
        "num_ids": 72
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def sorter(l):\n        return l[::2]\n    new_l = l[::2]\n    new_l.sort()\n    new_l = sorter(l)\n    return new_l + [l[i] for i in range(1, len(l), 2) if i not in range(1, len(l), 2)]\n",
        "num_ids": 86
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(l) % 2 == 1:\n        return l\n    else:\n        l1 = l[0:len(l) // 2]\n        l2 = l[len(l) // 2:]\n        l1.sort()\n        l2.sort()\n        l = l1 + l2\n        return l\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return encode_cyclic(s)\n",
        "num_ids": 11
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    return \"\".join([group[2] if len(group) == 3 else group for group in groups])\n",
        "num_ids": 52
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # same as encode_cyclic, but without third element of each group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 87
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 69
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # decode each group.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group.\n    groups = [group[-1] + group[:-1] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 85
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # create output string\n    out = \"\"\n    # cycle elements in each group.\n    for group in groups:\n        out += group[1]\n        out += group[0]\n    return out\n",
        "num_ids": 101
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # add one to each ASCII code for a, b, c\n    ascii_codes = [ord(c) + 1 for c in s]\n    # split into groups of 3, swap first and last elements, add swapped groups.\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join([chr(code) for code in ascii_codes])\n",
        "num_ids": 134
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([s[(3 * i):(3 * i + 3)] for i in range(len(s) // 3)])\n",
        "num_ids": 35
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # replace first element of each group with the second and the third element of the group.\n    groups = [(group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 112
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    fib = [2, 3]\n    while fib[-1] < n:\n        next_fib = fib[-1] + fib[-2]\n        while not is_prime(next_fib):\n            next_fib += 1\n        fib.append(next_fib)\n    return fib[-1]\n",
        "num_ids": 81
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def fib(n: int) -> int:\n        if n == 0: return 1\n        if n == 1: return 1\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 47
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return get_fib_prime(n)\n",
        "num_ids": 40
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1 or n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    else:\n        a, b = 2, 3\n        while n > 4:\n            c = a + b\n            a, b = b, c\n            n -= 1\n        return c\n",
        "num_ids": 85
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        return -1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    fib_n2 = fib_n1 = 1\n    fib_n = fib_n1 + fib_n2\n    while fib_n < n:\n        fib_n2 = fib_n1\n        fib_n1 = fib_n\n        fib_n = fib_n1 + fib_n2\n    if fib_n == n:\n        return fib_n\n    return -1\n",
        "num_ids": 133
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    fib_numbers = [1, 2]\n    for i in range(2, n):\n        fib_numbers.append(fib_numbers[-2] + fib_numbers[-1])\n    if is_prime(fib_numbers[-1]):\n        return fib_numbers[-1]\n    else:\n        return prime_fib(n)\n",
        "num_ids": 95
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    fib = [0, 1]\n    for i in range(1, n):\n        fib.append(fib[-1] + fib[-2])\n    return fib[-1]\n",
        "num_ids": 49
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b = 2, 3\n    while b < n:\n        a, b = b, a + b\n    return b\n",
        "num_ids": 32
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return b\n",
        "num_ids": 51
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # establish the set of the list\n    set_of_list = set(l)\n    # if the length of the list is greater than 3\n    # check for triples with zero\n    if len(l) > 3:\n        # loop through the list\n        for i in l:\n            # check for each element in the list\n            for j in l:\n                # if the element is not equal to zero\n                # and is not present in the set\n                # then there is a triple in the list\n                if i!= 0 and j!= 0 and i!= j and not j in set_of_list:\n                    return True\n    # otherwise return False\n    return False\n",
        "num_ids": 158
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pairs = set()\n    for i in l:\n        if -i in pairs:\n            return True\n        pairs.add(i)\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return any(x + 2 * y == 0 for x in l for y in l)\n",
        "num_ids": 22
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    set_1 = set(l)\n    for i in range(len(l) - 2):\n        if -1 * l[i] in set_1:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) < 3:\n        return False\n    visited = set()\n    for x in l:\n        if -x in visited:\n            return True\n        visited.add(x)\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return set([sum(l[i:i+3]) for i in range(len(l)-2)]) == {0}\n",
        "num_ids": 32
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    seen_set = set()\n    for num in l:\n        if num not in seen_set:\n            seen_set.add(num)\n        else:\n            return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        if sum_zero(l[i:]) == True:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Use a set to store unique elements\n    s = set()\n",
        "num_ids": 17
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    return 0",
        "num_ids": 6
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n",
        "num_ids": 21
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def car_accident(left, right):\n        if left < right:\n            return 1\n        elif right < left:\n            return 2\n        else:\n            return 0\n",
        "num_ids": 44
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    left, right = [], []\n    for _ in range(n):\n        left.append(Car(1))\n        right.append(Car(-1))\n",
        "num_ids": 39
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n_cars = 2*n+1\n    return sum(1 for i in range(n_cars) for j in range(i) if not (j<i and (i-j)%n))\n",
        "num_ids": 49
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    car_dict = {}\n    for i in range(n):\n        car_dict[i] = (0, i)\n",
        "num_ids": 31
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            distance = abs(j-i)\n            if distance > 10:\n                break\n            elif distance % 10 == 0:\n                collisions += 1\n    return collisions\n",
        "num_ids": 69
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(\n        (2 * ((n - i) * (n - i - 1)) // 2) // n\n        for i in range(2, n + 1)\n    )\n",
        "num_ids": 45
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert isinstance(n, int) and n > 0\n    return (2 * n) + 1\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [a+1 for a in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l[:] = [x + 1 for x in l]\n    return l\n",
        "num_ids": 20
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [l[i] + 1 for i in range(len(l))]\n",
        "num_ids": 21
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = []\n    for i in l:\n        i = i + 1\n        new_list.append(i)\n    return new_list\n",
        "num_ids": 38
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n",
        "num_ids": 20
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [a + 1 for a in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n    return l\n",
        "num_ids": 30
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    i = 0\n    while i < len(l):\n        j = i+1\n        while j < len(l):\n            if l[i] + l[j] == 0:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    memo = {}\n    for i in l:\n        if i in memo:\n            return True\n        memo[-i] = True\n    return False\n    ",
        "num_ids": 40
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_dict = {}\n    for i in l:\n        if i in sum_dict.keys():\n            return True\n        else:\n            sum_dict[-i] = True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your Code Here\n    s = set(l)\n    if len(s)!= len(l):\n        return False\n    for num in s:\n        if -num in s:\n            return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for n in l:\n        if n not in d:\n            d[n] = 1\n        else:\n            return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # YOUR CODE GOES HERE\n    nums_dict = {}\n    for num in l:\n        if num in nums_dict:\n            return True\n        else:\n            nums_dict[-num] = num\n    return False\n    \n",
        "num_ids": 60
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(l) < 2:\n        return False\n    l.sort()\n    pair = []\n    for i in xrange(len(l) - 1):\n        pair.append(l[i] + l[i+1])\n    for j in pair:\n        if -j in pair:\n            return True\n    return False\n",
        "num_ids": 81
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in l:\n        if i in l[l.index(i) + 1:]:\n            count += 1\n    return count == 2\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    h = {}\n    for i in l:\n        if i in h:\n            return True\n        else:\n            h[-i] = True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x < 10:\n        return str(x)\n    if x >= 10 and x < 100:\n        return str(x)\n    if x >= 100 and x < 1000:\n        return str(x)\n    if x >= 1000 and x < 10000:\n        return str(x)\n    if x >= 10000 and x < 100000:\n        return str(x)\n    if x >= 100000 and x < 1000000:\n        return str(x)\n    if x >= 1000000 and x < 10000000:\n        return str(x)\n    if x >= 10000000 and x < 100000000:\n        return str(x)\n    if x >= 100000000 and x < 1000000000:\n        return str(x)\n    if x >= 1000000000 and x < 10000000000:\n        return str(x)\n    if x >= 10000000000 and x < 100000000000:\n        return str(x)\n    if x >= 100000000000 and x < 1000000000000:\n        return str(x)\n    if x >= 1000000000000 and x < 10000000000000:\n        return str(x)\n    if x >= 10000000000000 and x < 100000000000000:\n        return str(x)\n    if x >= 100000000000000 and x < 1000000000000000:\n        return str(x)\n    if x >= 1000000000000000 and x < 10000000000000000:\n        return str(x)\n    if x >= 10000000000000000 and x < 100000000000000000:\n        return str(x)\n    if x >= 100000000000000000 and x < 1000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000 and x < 100000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000 and x < 1000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000 and x < 10000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000 and x < 100000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000 and x < 1000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000 and x < 10000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000 and x < 100000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000 and x < 1000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000 and x < 10000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000 and x < 100000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000 and x < 1000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000 and x < 10000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000 and x < 100000000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000000 and x < 1000000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000000 and x < 100000000000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000000000 and x < 10000000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000000 and x < 1000000000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000000000 and x < 10000000000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000000000 and x < 100000000000000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000000000000 and x < 1000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000000000000 and x < 10000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000000000000 and x < 100000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000000000000000 and x < 10000000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000000000000000 and x < 1000000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000000000000000 and x < 10000000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 1000000000000000000000000000000000000000000000 and x < 10000000000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 10000000000000000000000000000000000000000000000 and x < 100000000000000000000000000000000000000000000000:\n        return str(x)\n    if x >= 100000000000000000000000000000000000000000000000 and x < 1000000000000000000000000000000000000000000000000:\n        return str(",
        "num_ids": 1024
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # create a list of all digits of input number x\n    digit_list = [int(d) for d in str(x)]\n    # create a new list of all digits of output number y, which is zeros\n    z = [0 for i in range(len(digit_list))]\n    for i in range(len(digit_list)):\n        # if number x is greater than base\n        if x > base:\n            # add number x's last digit to new list z\n            z[i] = digit_list[len(digit_list)-1]\n            # remove last digit from number x, so x will be in base\n            x -= digit_list[len(digit_list)-1]*(base**(len(digit_list)-1))\n    # convert number z to string representation\n    y = ''.join(str(v) for v in z)\n    # return string representation of number x in new base\n    return y\n",
        "num_ids": 219
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sign = '-' if x < 0 else ''\n    x = abs(x)\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    if sign:\n        digits.insert(0, sign)\n    return ''.join(str(d) for d in digits)\n",
        "num_ids": 83
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "num_ids": 64
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    if x == 2:\n        return '10'\n    if x == 3:\n        return '11'\n    if x == 4:\n        return '100'\n    if x == 5:\n        return '101'\n    if x == 6:\n        return '110'\n    if x == 7:\n        return '111'\n    # Now, deal with the rest of the bases.\n    ans = ''\n    # Stop when x is less than the base\n    while x > base:\n        ans = str(x % base) + ans\n        x //= base\n    # Add the remaining digits to the answer, in the reverse order\n    # of the digits.\n    while x > 0:\n        ans = str(x % base) + ans\n        x //= base\n    return ans\n",
        "num_ids": 210
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    digit = []\n    while x >= 1:\n        digit.append(x % base)\n        x //= base\n    return \"\".join([str(x) for x in reversed(digit)])",
        "num_ids": 47
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def to_str(x, base):\n        \"\"\"change base number to string, return empty string if 0.\"\"\"\n        if x:\n            return to_str(x // base, base) + str(x % base)\n        return ''\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    dic = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    return str(int(x / base)) + dic[x % base]\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if base < 2:\n        raise ValueError('Base should be greater than 1')\n    string = str(x)\n    if base > 10:\n        string = str(x)\n        if len(string) > base:\n            raise ValueError('Base should be less than 10')\n    string = str(x)\n    decimal = 0\n    for i in range(len(string)):\n        decimal += int(string[i]) * (base**(len(string) - i - 1))\n    return str(decimal)\n",
        "num_ids": 126
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    digits = \"0123456789ABCDEF\"\n    if x < base:\n        return digits[x]\n    else:\n        return change_base(x//base, base) + digits[x%base]\n",
        "num_ids": 53
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    area =.5 * a * h\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for i in range(n-1):\n        a, b = b, a+b\n    return b\n",
        "num_ids": 47
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    f1, f2 = 0, 1\n    for i in range(n):\n        f1, f2 = f2, f1 + f2\n    return f1\n",
        "num_ids": 42
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n",
        "num_ids": 30
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 55364691565, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781909, 4052739537881, 648295964651, 10610209857723, 17167680177565, 27777890035288, 44945570212570, 72782116943353, 11766903046099, 190392490709135, 34805770072189)\n    p1, p2 = 0, 1\n    if n == 0:\n        return 0\n    for _ in range(n-1):\n        p1, p2 = p2, p1 + p2\n    return p2\n",
        "num_ids": 373
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return b\n",
        "num_ids": 37
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n",
        "num_ids": 75
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b = 0, 1\n    for i in range(n - 1):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    n_1 = 1\n    n_2 = 2\n    n_3 = 0\n    \n    for i in range(3, n+1):\n        n_3 = n_1 + n_2 + n_1\n        n_1 = n_2\n        n_2 = n_3\n    \n    return n_3\n",
        "num_ids": 117
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # t1 = 0\n    # t2 = 1\n    # t3 = 0\n    # t4 = 0\n    # for i in range(n):\n    #     t1, t2, t3, t4 = t2, t3, t4, t1+t2+t3+t4\n    # return t4\n    t = [0, 0, 1, 1]\n    for i in range(4, n+1):\n        t.append(t[i-2] + t[i-3])\n    return t[n]\n",
        "num_ids": 133
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 3:\n        return n\n    a = 0\n    b = 1\n    c = 2\n    for _ in range(3, n+1):\n        a, b = b, a+b\n        c += 1\n    return b\n",
        "num_ids": 60
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length // 2] + sorted_list[length // 2 - 1]) / 2\n",
        "num_ids": 73
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sorted_list = sorted(l)\n    if len(sorted_list) == 1:\n        return sorted_list[0]\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[len(sorted_list) // 2]\n    return (sorted_list[len(sorted_list) // 2 - 1] + sorted_list[len(sorted_list) // 2]) / 2\n",
        "num_ids": 104
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return float(sum(l)) / len(l)\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2-1]+l[len(l)//2])/2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 63
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return l[len(l) // 2]\n",
        "num_ids": 13
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1]) / 2\n",
        "num_ids": 58
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    return l[len(l) // 2]\n",
        "num_ids": 19
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2.0\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    sorted_list = sorted(l)\n    middle = len(l) // 2\n    if len(l) % 2:\n        return sorted_list[middle]\n    else:\n        return (sorted_list[middle] + sorted_list[middle - 1]) / 2\n    \n",
        "num_ids": 101
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # will be slow if text is larger than 100 characters\n    # to check the whole string, use slicing\n    if len(text) <= 1:\n        return True\n    else:\n        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n            return False\n",
        "num_ids": 79
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not text:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 58
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(text, str):\n        return False\n    return text[:] == text[::-1]\n",
        "num_ids": 29
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text[::-1].casefold() == text.casefold()\n",
        "num_ids": 19
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return modp((n * n) % p, p)\n    return modp(n / 2, p) * 2 % p\n",
        "num_ids": 52
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return pow(n, p-2, p)\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (modp((n + 1) // 2, p) ** 2) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n",
        "num_ids": 65
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 0:\n        return modp(n // 2, p)\n    else:\n        return (modp(n - 1, p) * p) % p\n",
        "num_ids": 68
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return pow(n, p, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n, p = abs(n), abs(p)\n    n -= (n % p)\n    if n < 0:\n        return -1 * modp(-1 * n, p)\n    return n % p\n",
        "num_ids": 52
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return modp(n-1, p) * p\n    else:\n        return modp(n/2, p)**2 % p\n",
        "num_ids": 56
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    return modp(n // 2, p) * (2 if n % 2 == 0 else p - 2) % p\n",
        "num_ids": 40
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n // 2, p)) % p\n",
        "num_ids": 33
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (n % p) % p\n",
        "num_ids": 11
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
        "num_ids": 35
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    text = text.lower()\n    for i in vowels:\n        text = text.replace(i,'')\n    return text\n",
        "num_ids": 68
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    res = ''\n    for i in text:\n        if i not in vowels:\n            res += i\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #for character in text:\n    #    if character in \"aeiouAEIOU\":\n    #        text=text.replace(character,\"\")\n    #return text\n    return \"\".join([char for char in text if char not in \"aeiouAEIOU\"])",
        "num_ids": 66
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = set(list('aeiouAEIOU'))\n    newText = ''\n    for char in text:\n        if char in vowels:\n            newText += char\n    return newText\n",
        "num_ids": 51
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(text) == 0:\n        return text\n    else:\n        return remove_vowels(text[1:]) + text[0] if text[0] in 'aeiouAEIOU' else remove_vowels(text[1:])\n",
        "num_ids": 64
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    remove_vowels_list = ['a', 'e', 'i', 'o', 'u']\n    for i in remove_vowels_list:\n        text = text.replace(i, \"\")\n    return text\n",
        "num_ids": 55
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aeiouAEIOU'\n    s = ''\n    for ch in text:\n        if ch not in vowels:\n            s+=ch\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = set('aeiou')\n    result = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n    \ndef main():\n    print remove_vowels(raw_input('Enter your string: '))\n",
        "num_ids": 71
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = \"aeiouAEIOU\"\n    text = text.lower()\n    new_text = ''\n    for letter in text:\n        if letter not in vowels:\n            new_text += letter\n    return new_text\n    ",
        "num_ids": 60
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = ['a','A','e','E','i','I','o','O','u','U']\n    return ''.join([i for i in text if i not in vowels])\n",
        "num_ids": 47
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(list(filter(lambda x: x > t, l))) == 0\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(num < t for num in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(list(filter(lambda x: x < t, l))) == len(l)\n",
        "num_ids": 24
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([x for x in l if x <= t]) == len(l)\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all([n <= t for n in l])\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(num <= t for num in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for c in s0:\n        if c not in s1:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i, j in zip(s0, s1):\n        if i!= j:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return True if set(s0) == set(s1) else False\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    return True if sorted(s0) == sorted(s1) else False\n",
        "num_ids": 37
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s0[0:len(s0)] == s1[0:len(s1)]\n",
        "num_ids": 25
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n    \ndef count_partitions(n, m):\n    \"\"\"Return the number of partitions of integer n in set of positive integers\n    up to m.\n    >>> count_partitions(4, 4)\n    4\n    >>> count_partitions(6, 4)\n    9\n    >>> count_partitions(20, 10)\n    243\n    >>> count_partitions(1, 1)\n    1\n    \"\"\"\n    if m == 1:\n        return 1\n    else:\n        return count_partitions(n-1, m) + count_partitions(n-1, m-1)\n",
        "num_ids": 177
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 64
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    return _fib(n)\n",
        "num_ids": 29
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 39
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1 or n == 0:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = []\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif bracket == bracket_map[stack[-1]]:\n            stack.pop()\n    return not stack\n",
        "num_ids": 80
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    bracket_pairs = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n    }\n    stack = []\n    for b in brackets:\n        if b in bracket_pairs:\n            stack.append(b)\n        elif len(stack) == 0 or bracket_pairs[stack.pop()]!= b:\n            return False\n    return len(stack) == 0\n",
        "num_ids": 102
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(brackets) % 2 == 1:\n        return False\n    bracket_pairs = zip(brackets[::2], brackets[1::2])\n    for (first, second) in bracket_pairs:\n        if first!= \">\" and second!= \"<\":\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(brackets) % 2 == 1:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"\"\"\n    # convert from string to list:\n    bracket_list = list(brackets)\n    correct = True\n    \n    for i in range(len(bracket_list)):\n        if bracket_list[i] == \">\":\n            # if i is greater than the previous index\n            if i > 0:\n                # and the previous index is opening bracket\n                if bracket_list[i-1] == \"<\":\n                    # remove the \">\"\n                    bracket_list.pop(i)\n                    # if the previous index is not the first one\n                    if i > 1:\n                        # and the previous index is also not the last one\n                        if bracket_list[i-2] == \"<\":\n                            # remove the \">\"\n                            bracket_list.pop(i-1)\n                            # if the previous index is not the last one\n                            if i > 2:\n                                # and the previous index is also not the last one\n                                if bracket_list[i-3] == \"<\":\n                                    # remove the \">\"\n                                    bracket_list.pop(i-2)\n                                    correct = False\n    \"\"\"\n    # convert from string to list:\n    bracket_list = list(brackets)\n    # create a new list that will hold the indices of the \">\"\n    indices = []\n    for i in range(len(bracket_list)):\n        if bracket_list[i] == \">\":\n            # if the index is greater than the previous index\n            if i > 0:\n                # and the previous index is opening bracket\n                if bracket_list[i-1] == \"<\":\n                    # add the index of the \">\" to the new list\n                    indices.append(i)\n    # delete the indices in reverse order\n    for index in sorted(indices, reverse=True):\n        del bracket_list[index]\n    # if the new list has the same length as the original list,\n    # then every opening bracket has a corresponding closing bracket.\n    if len(bracket_list) == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 488
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    brackets = brackets.strip()\n    stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\":\n            stack.append(i)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not brackets:\n        return True\n    if not brackets[0] == \"<\":\n        return False\n    if not brackets[-1] == \">\":\n        return False\n    return correct_bracketing(brackets[1:-1])\n",
        "num_ids": 59
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (len(brackets) % 2 == 0) and correct_bracketing_rec(brackets)\n",
        "num_ids": 27
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    bracket_stack = []\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return l == sorted(l)\n",
        "num_ids": 10
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse = True)\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(x < y or x > y for x, y in zip(l[:-1], l[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    direction = None\n    for i in range(len(l)-1):\n        if direction is None:\n            if l[i] < l[i+1]:\n                direction = 'decreasing'\n            elif l[i] > l[i+1]:\n                direction = 'increasing'\n            else:\n                return False\n        if direction == 'decreasing':\n            if l[i] > l[i+1]:\n                return False\n        if direction == 'increasing':\n            if l[i] < l[i+1]:\n                return False\n    return True\n",
        "num_ids": 137
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return l[1:] > l[:-1] or l[1:] < l[:-1]\n",
        "num_ids": 25
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return list(s1 & s2)\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    s = s1 & s2\n    return sorted(s)\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l1.sort()\n    l2.sort()\n    i = 0\n    j = 0\n    res = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            res.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        else:\n            i += 1\n    return res\n",
        "num_ids": 116
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    common = []\n    for i in l1:\n        if i in l2:\n            if i not in common:\n                common.append(i)\n    common.sort()\n    return common\n",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for num in range(2, n):\n        if n % num == 0:\n            return num\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_prime_factor = -1\n    if n == 1:\n        max_prime_factor = 1\n    for factor in range(2, n):\n        if n % factor == 0:\n            max_prime_factor = factor\n            break\n    return max_prime_factor\n",
        "num_ids": 67
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return 2\n    # if n is odd, test if n is divisible by a power of 2, i.e., 2**k > n\n    if n % 3 == 0:\n        return 3\n    k = 1\n    while n % k * k!= 1:\n        k += 1\n    return n // k\n",
        "num_ids": 84
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert n > 1 and is_prime(n) is False\n    \"*** YOUR CODE HERE ***\"\n    n = n + 1\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            n = n / i\n    return n\n",
        "num_ids": 89
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        n -= 1\n    return n if is_prime(n) else largest_prime_factor(n // 2)\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        n = n / 2\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            n = n / i\n    return n\n",
        "num_ids": 84
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n <= 3:\n        return n\n    elif n % 2 == 0:\n        return 2\n    else:\n        p = 3\n        while p * p <= n:\n            if n % p == 0:\n                return p\n            else:\n                p += 2\n        return n\n",
        "num_ids": 79
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 1\n    # # list of factors\n    # factors = []\n    # while n % 2 == 0:\n    #     factors.append(2)\n    #     n //= 2\n    # for i in range(3, int(math.sqrt(n)) + 1, 2):\n    #     while n % i == 0:\n    #         factors.append(i)\n    #         n //= i\n    # if n > 2:\n    #     factors.append(n)\n    # return max(factors)\n",
        "num_ids": 131
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = abs(n)\n    if n == 1:\n        return None\n    while n % 2 == 0:\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n = n // i\n        i += 2\n    return n\n",
        "num_ids": 75
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 43
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    return n + sum_to_n(n - 1)\n    \ndef n_to_pow(n: int, p: int) -> int:\n    \"\"\"Return n to the power of p.\n",
        "num_ids": 60
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 1:\n        return 0\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    for i in range(n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total, i = 0, 1\n    while i <= n:\n        total += i\n        i += 1\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(\"(\")\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack\n",
        "num_ids": 58
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(b == \"(\" and c == \")\" for b, c in zip(brackets, brackets[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n",
        "num_ids": 6
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    parentheses = []\n    for c in brackets:\n        if c == \"(\":\n            parentheses.append(c)\n        elif c == \")\":\n            if not parentheses:\n                return False\n            parentheses.pop()\n    return len(parentheses) == 0\n",
        "num_ids": 66
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bracket_pairs = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"}\n    stack = []\n    for bracket in brackets:\n        if bracket in bracket_pairs:\n            stack.append(bracket)\n        elif bracket in bracket_pairs.values():\n            if not stack:\n                return False\n            top = stack.pop()\n            if bracket!= bracket_pairs[top]:\n                return False\n    return not stack\n",
        "num_ids": 105
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\")\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(brackets) == 0:\n        return True\n    if len(brackets) % 2 == 1:\n        return False\n    opening = []\n    for i in range(len(brackets)):\n        if brackets[i] == '(':\n            opening.append(i)\n        else:\n            if len(opening) == 0:\n                return False\n            else:\n                del opening[-1]\n    return len(opening) == 0\n",
        "num_ids": 108
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    derivatives = [0 for _ in xs]\n    # the code below this line is the same as the code in the book\n    # derivatives[1:] = xs[1:];\n    # derivatives[0] = 1;\n    # for i in range(len(derivatives)):\n    #     for j in range(i + 1, len(derivatives)):\n    #         derivatives[j] = derivatives[j] + xs[i] * derivatives[j - 1]\n    for i in range(1, len(xs)):\n        derivatives[i] = xs[i] * i\n    return derivatives\n",
        "num_ids": 153
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    polynomial = [0 for _ in range(len(xs))]\n    for i in range(len(xs) - 1):\n        polynomial[i] = xs[i] * i\n    return polynomial\n",
        "num_ids": 55
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [n * (n + 1) / 2 for n in xs[1:]] + [xs[0]]\n",
        "num_ids": 29
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [xs[i] * i for i in range(1, len(xs))]\n",
        "num_ids": 23
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(xs) - 1\n    ans = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        ans[i] = xs[i + 1] * i\n    return ans\n",
        "num_ids": 59
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # xs[0] is the coefficient of x^0\n    # xs[1] is the coefficient of x^1\n    # xs[2] is the coefficient of x^2\n    #...\n    # xs[n] is the coefficient of x^n\n    # xs[n+1] is the coefficient of x^(n+1)\n    n = len(xs) - 1\n    return [xs[i]*n for i in range(1, n+1)]\n",
        "num_ids": 117
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = []\n    for i in range(1, len(xs)):\n        res.append(xs[i] * i)\n    res.append(xs[-1])\n    return res\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[0]] + [xs[0] + xs[i] for i in range(1, len(xs))]\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) == 0:\n        return []\n    else:\n        return [xs[i] * (len(xs) - 1 - i) for i in range(len(xs))]\n",
        "num_ids": 48
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(xs)\n    result = []\n    for i in range(n-1):\n        result.append(xs[i+1]*(n-i-1))\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    fib: List[int] = [0, 1]\n    if n == 0:\n        return fib[0]\n    elif n == 1:\n        return fib[1]\n    else:\n        while len(fib) < n:\n            fib.append(fib[-2] + fib[-1])\n        return fib[-1]\n",
        "num_ids": 87
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    fib_list = [0, 1, 1, 2]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[i-2] + fib_list[i-1] + fib_list[i-3])\n    return fib_list[n]\n",
        "num_ids": 77
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert type(n) == int and n >= 0, \"n must be a non-negative integer.\"\n    return 0\n",
        "num_ids": 29
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 41
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    return fib\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return fibonacci_recursive(n)\n",
        "num_ids": 13
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    assert n >= 0 and int(n) == n, \"n must be a non-negative integer.\"\n    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 71
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = s.lower()\n    count = 0\n    for c in s:\n        if c in \"aeiou\":\n            count += 1\n    if s[-1] in \"aeiou\":\n        count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    vowel_count = 0\n    for char in s:\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = set(\"aeiouy\")\n    n = 0\n    for c in s:\n        if c in vowels:\n            n += 1\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = \"aeiouy\"\n    vowels_in_string = [c for c in s if c in vowels]\n    return len(vowels_in_string)\n",
        "num_ids": 48
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in s:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    vowels = 0\n    for char in s:\n        if char in vowel_list:\n            vowels += 1\n    return vowels\n",
        "num_ids": 62
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for x in s:\n        if x in \"aeiouyAEIOUY\":\n            count += 1\n    if count > 0:\n        if s[-1] in \"aeiouyAEIOUY\":\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = 0\n    for c in s:\n        if c in \"aeiou\":\n            vowels += 1\n    if s[-1] == 'y':\n        vowels -= 1\n    return vowels\n",
        "num_ids": 56
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for letter in s:\n        if letter in ['a','e','i','o','u']:\n            count += 1\n        elif letter == 'y':\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if shift > len(str(x)):\n        shift = shift % len(str(x))\n    \n    x = str(x)\n    return x[-shift:] + x[:-shift]\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    length = len(str(x))\n    if shift >= length:\n        return str(x)[::-1]\n    else:\n        return str(x)[length - shift:length] + str(x)[0:length - shift]\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Using a list to represent the digits in reverse order\n    digits = []\n    for _ in xrange(len(str(x))):\n        digits.append(int(x % 10))\n        x /= 10\n    #\n    if shift > len(digits):\n        return ''.join(str(i) for i in reversed(digits))\n    #\n    return ''.join(str(digits[(i + shift) % len(digits)] )for i in xrange(len(digits)))\n",
        "num_ids": 124
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if shift > len(str(x)):\n        shift = shift % len(str(x))\n    s = str(x)[len(str(x))-shift:][::-1]\n    if len(s) == 0:\n        return \"0\"\n    return s + s[0] * (len(str(x)) - len(s))\n",
        "num_ids": 85
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[len(str(x))-shift:]+str(x)[:len(str(x))-shift]\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # To prevent IndexError, always use list() to make a list\n    return str(list(str(x))[shift:] + list(str(x))[:shift])\n",
        "num_ids": 42
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = x % 10\n    d = ((n - shift) % 10) + (n - shift) // 10\n    if shift > d:\n        return str(d) + str(n)[0:d]\n    else:\n        return str(n)[d-shift:] + str(n)[0:d-shift]\n",
        "num_ids": 77
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:shift + len(str(x))][::-1] + str(x)[:shift]\n",
        "num_ids": 54
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    shifted_digits = []\n    for i in range(len(str(x))):\n        shifted_digits.append(x % 10)\n        x //= 10\n    shifted_digits.reverse()\n    return ''.join(str(digit) for digit in shifted_digits[shift:]) + ''.join(str(digit) for digit in shifted_digits[:shift])\n",
        "num_ids": 96
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    s = str(x)\n    return s[-shift:] + s[:-shift]\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([ord(i) for i in s if i.isupper()])\n",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 48 and ord(c) <= 57)\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(ord(c) for c in s if ord(c) < 128)\n",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([ord(x) - ord('A') + 1 for x in s if x.isupper()])\n",
        "num_ids": 28
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not s:\n        return 0\n    else:\n        return sum([ord(c) for c in s if ord(c)>=65 and ord(c)<=90])\n",
        "num_ids": 45
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    for s in s:\n        if s >= 'A' and s <= 'Z':\n            sum += ord(s) - 64\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([ord(x)-64 for x in s if ord(x) >= 65])\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code goes here\n    return sum(int(x) for x in s if x.isupper())\n",
        "num_ids": 27
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 0 or n % 2!= 0:\n        return \"Your input is not valid!\"\n    total_orange = int(n / 2)\n    total_apple = n - total_orange\n    return n - (total_apple + total_orange)\n",
        "num_ids": 62
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # this is called the accumulator pattern\n    # using this pattern we can use the accumulator pattern to determine the number of mango \n    # fruits in the basket\n    count = 0\n    for i in s:\n        if i == \"o\":\n            count += 1\n        elif i == \"a\":\n            count -= 1\n    return n - count \n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    string_of_num = s.split(\" \")\n    total_apples = int(string_of_num[0])\n    total_oranges = int(string_of_num[1])\n",
        "num_ids": 51
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.count('mango') - s.count('apple') - s.count('orange')\n",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in s.split(\" \"):\n        if i.lower() == \"apples\":\n            total+=int(n/2)\n            n=n-int(n/2)\n        elif i.lower() == \"oranges\":\n            total+=int(n/2)\n            n=n-int(n/2)\n        elif i.lower() == \"mangoes\":\n            total+=int(n)\n            n=0\n        elif i.lower() == \"grapes\":\n            n=n-int(n)\n    return total\n    \ndef get_max_consecutive_ones(n):\n    \"\"\"\n    In this task you will be given a binary string that represent a number and you have to find the maximum \n    number of consecutive 1's in the binary representation of that number.\n    for example:\n    get_max_consecutive_ones(100) ->3\n    get_max_consecutive_ones(110) ->2\n    get_max_consecutive_ones(1000) ->8\n    \"\"\"\n    if n == 0:\n        return 0\n    bit_string = str(bin(n))[2:]\n    max = 0\n    current = 0\n    for i in bit_string:\n        if i == \"1\":\n            current += 1\n        else:\n            current = 0\n        if current > max:\n            max = current\n    return max\n    \ndef get_max_consecutive_ones_2(n):\n    \"\"\"\n    In this task you will be given a binary string that represent a number and you have to find the maximum \n    number of consecutive 1's in the binary representation of that number.\n    for example:\n    get_max_consecutive_ones(100) ->3\n    get_max_consecutive_ones(110) ->2\n    get_max_consecutive_ones(1000) ->8\n    \"\"\"\n    bit_string = str(bin(n))[2:]\n    max = 0\n    current = 0\n    for i in bit_string:\n        if i == \"1\":\n            current += 1\n        else:\n            current = 0\n        if current > max:\n            max = current\n    return max\n    \ndef max_of_two_numbers(num1,num2):\n    \"\"\"\n    In this task you will be given two numbers and you have to return the maximum of them.\n    for example:\n    max_of_two_numbers(1,2) ->2\n    max_of_two_numbers(3,4) ->4\n    max_of_two_numbers(100,200) ->200\n    \"\"\"\n    return max(num1,num2)\n    \ndef max_of_three_numbers(num1,num2,num3):\n    \"\"\"\n    In this task you will be given three numbers and you have to return the maximum of them.\n    for example:\n    max_of_three_numbers(1,2,3) ->3\n    max_of_three_numbers(100,200,300) ->300\n    max_of_three_numbers(1,2,3) ->3\n    \"\"\"\n    return max(num1,num2,num3)\n    \ndef reverse_string(s):\n    \"\"\"\n    In this task you will be given a string and you have to return the reversed string.\n    for example:\n    reverse_string(\"hello\") ->olleh\n    reverse_string(\"hello world\") ->dlrow olleh\n    reverse_string(\"abcd\") ->dcba\n    \"\"\"\n    return s[::-1]\n    \ndef my_solution(s):\n    \"\"\"\n    In this task you will be given a string and you have to return the string in a reversed order. \n    for example:\n    my_solution(\"hello\") ->olleh\n    my_solution(\"hello world\") ->dlrow olleh\n    my_solution(\"abcd\") ->dcba\n    \"\"\"\n    return s[::-1]\n    \ndef find_missing_number(nums):\n    \"\"\"\n    In this task you will be given a list of numbers and you have to return the missing number from the list.\n    for example:\n    find_missing_number([1,2,3,4,6]) ->5\n    find_missing_number([1",
        "num_ids": 1024
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count_fruit = s.count('mango')\n    total_number_of_fruit = n\n    count_fruits = total_number_of_fruit - count_fruit\n    return count_fruits\n",
        "num_ids": 50
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0 or n > 100:\n        return -1\n    oranges = n - s.count('oranges')\n    apples = n - s.count('apples')\n    mangoes = s.count('mangoes')\n    return mangoes if mangoes > oranges and mangoes > apples else oranges + apples\n",
        "num_ids": 78
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.count('mango') - int(s.split(' ')[0]) - int(s.split(' ')[1])",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    try:\n        return n - sum([int(c) for c in s.split() if c.isalpha()])\n    except:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.count(\"mango\") - (n // 2)\n",
        "num_ids": 17
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return []\n    smallest_even = arr[0]\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    return [smallest_even, smallest_even_index]\n",
        "num_ids": 95
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return []\n    n = len(arr)\n    result = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            result.append([arr[i], i])\n    if len(result) == 0:\n        return []\n    else:\n        result.sort(key=lambda x: x[0])\n        return result[0]\n",
        "num_ids": 101
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if arr == []:\n        return []\n    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smalest_value:\n            smalest_value = arr[i]\n            smalest_index = i\n    return [smalest_value, smalest_index]\n",
        "num_ids": 107
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = []\n    if not arr:\n        return res\n    # sort the array\n    arr.sort()\n    # add the value of first elem to the res\n    res.append(arr[0])\n    # get the index of the first elem\n    index = arr[0]\n    # to find the smalest even value\n    # we need to find the first even elem\n    # that's why we use >0\n    for i in arr:\n        if i % 2 == 0 and i > 0:\n            res.append(i)\n            index = i\n            break\n    return [res[0], index]",
        "num_ids": 148
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    first = arr[0]\n    if first % 2 == 0:\n        return [first, arr.index(first)]\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] % 2 == 0:\n                return [arr[i], arr.index(arr[i])]\n        return []\n",
        "num_ids": 97
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # A : even or odd, index\n    # B : even value or odd value, index\n    # C : plucked value, index\n    # D : even value, index\n    if not arr:\n        return []\n    n = len(arr)\n    A = [0] * n\n    B = [0] * n\n    C = [0] * n\n    D = [0] * n\n    A[0] = 1\n    B[0] = arr[0]\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            A[i] = A[i - 1] + 1\n            B[i] = arr[i]\n        else:\n            A[i] = 1\n            B[i] = arr[i]\n    for i in range(n - 1, -1, -1):\n        if A[i] % 2 == 0:\n            C[i] = B[i]\n            D[i] = i\n            break\n    for i in range(n - 1, -1, -1):\n        if A[i] % 2 == 1:\n            if B[i] == B[i - 1]:\n                C[i] = B[i]\n                D[i] = i\n            else:\n                C[i] = min(B[i], B[i - 1])\n                D[i] = min(B[i], B[i - 1])\n    return [C[D[0]], D[0]]\n",
        "num_ids": 359
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # First: find the index of the left most node with even value\n    # Second: find the index of the smallest node with even value\n    # Third: use the index to find the value of the smallest node\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    even_values = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n    if even_values == []:\n        return []\n    even_index = even_values.index(min(even_values))\n    min_index = arr.index(min(arr[even_index:]))\n    return [arr[min_index], min_index + even_index]\n",
        "num_ids": 181
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result.append([arr[i], i])\n    if len(arr) == 0 or len(arr) == 1:\n        return result\n    else:\n        return [arr[0], arr[1]]\n",
        "num_ids": 87
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    evens = [ x for x in arr if x % 2 == 0 ]\n    if not evens:\n        return []\n    return [ min(evens), arr.index(min(evens)) ]\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    evens = filter(lambda x: x % 2 == 0, arr)\n    return [ min(evens, key=lambda x: x), arr.index(min(evens, key=lambda x)) ] if len(evens) > 0 else []\n",
        "num_ids": 60
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return max([x for x in lst if lst.count(x) >= x], default=-1)",
        "num_ids": 26
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return -1\n    for index,value in enumerate(lst):\n        if index == 0:\n            continue\n        if value == lst[index-1]:\n            continue\n        if value > lst[index-1]:\n            return value\n    return -1\n    \nif __name__ == '__main__':\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n    print(search([4, 1, 2, 2, 3, 1, 2, 1]))",
        "num_ids": 179
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # T: O(n), S: O(1)\n    sorted_lst = sorted(lst)\n    for i, num in enumerate(sorted_lst):\n        if i == len(sorted_lst) - 1:\n            return -1\n        if num > 0 and sorted_lst[i+1] > 0 and num >= sorted_lst[i+1]:\n            return num\n",
        "num_ids": 100
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    d = {}\n    for x in lst:\n        d[x] = d.get(x, 0) + 1\n",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    for idx, elem in enumerate(lst):\n        if elem < 1:\n            return -1\n        elif idx < elem - 1:\n            return elem\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max = 0\n    max_value = 0\n    for i in lst:\n        if i > max_value:\n            max_value = i\n        if lst.count(i) > max:\n            max = lst.count(i)\n    return max_value if max!= 0 else -1\n",
        "num_ids": 75
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return -1\n    fst = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < fst:\n            return fst\n        fst = lst[i]\n    return fst\n",
        "num_ids": 74
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    from collections import Counter\n    from itertools import groupby\n    import operator\n    \n    lst = Counter(lst)\n    val = max(lst.items(), key = operator.itemgetter(1))\n    return val[0] if val[1] >= val[0] else -1\n",
        "num_ids": 75
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    d = {}\n    for n in lst:\n        if n in d:\n            d[n] += 1\n        else:\n            d[n] = 1\n    if len(d) < 1:\n        return -1\n    \n    value, count = max(d.items(), key=lambda x: (x[1], x[0]))\n    if count < value:\n        return -1\n    return value\n",
        "num_ids": 101
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = max(lst)\n    if a == 0:\n        return -1\n    return [i for i in lst if i>0 and lst.count(i)>=i][-1]\n",
        "num_ids": 51
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(len(lst)):\n        res.append(min(lst))\n        lst.remove(min(lst))\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst, reverse=True)",
        "num_ids": 12
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return sorted(lst) + sorted(lst, reverse=True)\n",
        "num_ids": 51
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return lst\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not lst:\n        return lst\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return lst.sort()\n",
        "num_ids": 9
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    lst.sort()\n    return lst\n",
        "num_ids": 24
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = sorted(lst)\n    return lst\n",
        "num_ids": 16
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return []\n    # return sorted(lst)\n    curr_min, curr_max = min(lst), max(lst)\n    curr_index = lst.index(curr_min)\n    lst[0], lst[curr_index] = lst[curr_index], lst[0]\n    curr_min, curr_max = min(lst[1:]), max(lst[1:])\n    lst[1], lst[lst.index(curr_min)] = lst[lst.index(curr_min)], lst[1]\n    lst[1:], lst[lst.index(curr_max)] = lst[lst.index(curr_max):], lst[1:lst.index(curr_max)]\n    return lst\n",
        "num_ids": 217
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert isinstance(lst, list) and all(isinstance(i, int) for i in lst)\n    return sorted(lst, reverse=True)\n",
        "num_ids": 40
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s1, s2, s3 = sorted([a, b, c])\n    if (s1 + s2 > s3) and (s2 + s3 > s1) and (s3 + s1 > s2):\n        return round(((s1*s2) / 2), 2)\n    else:\n        return -1",
        "num_ids": 80
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a + b > c and b + c > a and a + c > b:\n        return round(((a * b) / 2), 2)\n    else:\n        return -1\n",
        "num_ids": 46
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # write your code here\n    # http://www.sides.net/triangles/area.html\n    s = (a+b+c)/2.0\n    if s*(s-a)*(s-b)*(s-c) <= 0:\n        return -1\n    return round((s*(s-a)*(s-b)*(s-c))**0.5, 2)\n",
        "num_ids": 97
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    side_1 = a\n    side_2 = b\n    side_3 = c\n    if side_1 + side_2 > side_3 and side_1 + side_3 > side_2 and side_2 + side_3 > side_1:\n        return round((side_1 + side_2 + side_3) * 0.5, 2)\n    else:\n        return -1\n",
        "num_ids": 94
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b, c = sorted([a, b, c])\n    \n    # any two sides can be the hypotenuse\n    if a ** 2 + b ** 2 == c ** 2:\n        return \"%.2f\" % ((a * b) / 2)\n    return -1\n",
        "num_ids": 68
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        s = (a + b + c) / 2\n        return round((s*(s-a)*(s-b)*(s-c)), 2)\n    else:\n        return -1\n",
        "num_ids": 68
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == b == c:\n        return 0\n    if a + b < c or a + c < b or b + c < a:\n        return -1\n    return round((a + b + c) * (a + b - c) * (a + c - b) * 0.5, 2)\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Thanks to https://stackoverflow.com/questions/20492306/how-to-check-for-valid-triangle-in-python\n    \n    if a + b > c and a + c > b and b + c > a:\n        return round((a + b + c) * 0.5, 2)\n    else:\n        return -1\n",
        "num_ids": 88
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round((sides[0] * sides[1]) / 2, 2)\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[2] < sides[0] + sides[1]:\n        return round((sides[0] * sides[1]) / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 66
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return q == q[::-1] and sum(q) <= w\n    #palindromic and <w\n",
        "num_ids": 29
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if is_palindrome(q) == True:\n        return sum(q) <= w\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return is_balanced(q) and sum(q) <= w\n",
        "num_ids": 17
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(q)==1 or len(q)==0 or (len(q)%2==0 and sum(q) <= w) or (len(q)%2==1 and sum(q[1::2]) <= w)\n",
        "num_ids": 57
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (sorted(q) == sorted(q)[::-1]) and sum(q) <= w\n",
        "num_ids": 26
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_balanced(q) and sum(q)<=w\n",
        "num_ids": 18
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(arr)\n    # table[i][j] = the number of ways we can make arr[i:j+1] palindromic\n    table = [[0] * n for _ in range(n)]\n    # initialize the first row and column\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            table[i][i] = 1\n        else:\n            table[i][i] = 0\n    # fill in the table\n    for d in range(1, n):\n        for i in range(n - d):\n            j = i + d\n            if arr[i] % 2 == 0 and arr[j] % 2 == 0:\n                table[i][j] = min(table[i + 1][j - 1] + table[i][j - 1], table[i][j + 1] + table[i + 1][j])\n            elif arr[i] % 2 == 1 and arr[j] % 2 == 1:\n                table[i][j] = min(table[i + 1][j - 1] + table[i][j - 1], table[i][j + 1] + table[i + 1][j])\n            else:\n                table[i][j] = table[i][j - 1] + table[i + 1][j]\n",
        "num_ids": 311
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    min_changes = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_palindrome(arr[:i] + arr[i:j + 1][::-1] + arr[j + 1:]):\n                min_changes += 1\n",
        "num_ids": 78
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Time: O(n), n being the length of the input array\n    # Space: O(n)\n    changes = 0\n",
        "num_ids": 32
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def min_change(arr, pos, visited):\n        if pos in visited:\n            return\n        visited.add(pos)\n",
        "num_ids": 33
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n",
        "num_ids": 43
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(arr)\n    s = sum(arr)\n    if n == 1:\n        return s\n    \n    best = n\n    for i in range(n//2):\n        diff = s - 2*(arr[i] + arr[n-i-1])\n        if diff < best:\n            best = diff\n",
        "num_ids": 80
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    changes = 0\n    for index, value in enumerate(arr):\n        if value!= arr[-1 - index]:\n            changes += 1\n    return changes\n",
        "num_ids": 40
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_palindrome(arr):\n        return arr == arr[::-1]\n",
        "num_ids": 23
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(min(abs(arr[i] - arr[~i]) for i in range(len(arr) // 2)) for i in range(len(arr) // 2))\n",
        "num_ids": 44
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(len(lst1) for lst1 in lst1) < sum(len(lst2) for lst2 in lst2)\n",
        "num_ids": 39
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst1) < len(lst2):\n        return [x for x in lst1 if len(x) < len(lst2)]\n    else:\n        return [x for x in lst2 if len(x) < len(lst1)]\n",
        "num_ids": 67
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in lst1 if len(x) < len(lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) < len(lst2):\n        return total_match(lst1, lst2)\n    if len(lst1) == len(lst2):\n        return lst1\n",
        "num_ids": 85
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[0:len(lst2)]\n    else:\n        return lst2[0:len(lst1)]\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return [x for x in lst1 if len(x) < len(lst2) and len(x) >= 0]\n    \nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'hi']) == ['hi', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']\n",
        "num_ids": 172
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[:len(lst2)]\n    else:\n        return lst2[:len(lst1)]\n",
        "num_ids": 49
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return lst1 if len(lst1) > len(lst2) else lst2\n    if len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 78
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst1 = sorted(lst1, key=len)\n    lst2 = sorted(lst2, key=len)\n    # this is the efficient one\n    if len(lst1) < len(lst2):\n        return lst1\n    return lst2\n",
        "num_ids": 69
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    if len(lst1) < len(lst2):\n        return total_match(lst1, lst2)\n    \n",
        "num_ids": 112
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(2, 101):\n        if a % i == 0:\n            count += 1\n            if count > 3:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a % 2 == 0 and is_prime(a/2) and is_prime(a/3) and is_prime(a/5)\n    ",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return is_prime(a) and is_prime(a/2) and is_prime(a/3)\n",
        "num_ids": 28
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a < 100:\n        return False\n    if a % 2 == 0 or a % 3 == 0:\n        return False\n    if a < 5:\n        return True\n    for i in range(5, int(a/2), 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(2, a):\n        if a % i == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a < 100:\n        return False\n    for i in range(2,a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = int(a)\n    if a < 100:\n        return is_prime(a) and is_prime(int(a/2)) and is_prime(int(a/3))\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def sieve(num):\n        sieve_array = [True] * (num // 2 + 1)\n        for i in range(3, int(num**0.5) + 1, 2):\n            if sieve_array[i // 2]:\n                sieve_array[i * 2::i] = [False] * ((num - i * 2) // (i * 2) + 1)\n        return [2] + [2 * i + 1 for i in range(1, num // 2) if sieve_array[i]]\n    sieve_list = sieve(100)\n    for i in range(len(sieve_list)):\n        if a % sieve_list[i] == 0:\n            counter = 0\n            while a % sieve_list[i] == 0:\n                counter += 1\n                a /= sieve_list[i]\n            if counter == 3:\n                return True\n    return False\n",
        "num_ids": 221
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 2\n    while i < a:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # 1) we create a list with all the numbers from 1 to n\n    # 2) we loop through the list checking if the number is prime or not\n    # 3) we return the result of the loop\n    n = 100\n    primes = [2]\n    for i in range(3, n+1):\n        prime = True\n        for j in primes:\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return a in primes",
        "num_ids": 124
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return x == 1\n    return is_simple_power(n, x // n) if x % n == 0 else False\n",
        "num_ids": 37
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return True",
        "num_ids": 4
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n==1 or n==x or (n%x==0 and is_simple_power(x, n/x))\n",
        "num_ids": 31
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n**int(log(x,n)) == x\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x == n ** int(log(x, n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (n ** int(x)) == x\n",
        "num_ids": 13
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n ** int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return n == 1 or x % n == 0",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n > 1 and x == n or x % n == 0\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**(1/3) == int(a**(1/3))\n",
        "num_ids": 21
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a*a*a==a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a ** 3 == int(a)",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a*a*a == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a*a*a == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a**3 == int(a**3)\n    \ndef isperfect(a):\n    '''\n    Write a function that takes an integer a and returns True if this integer is a perfect number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isperfect(6) ==> True\n    isperfect(6) ==> False\n    isperfect(0) ==> True\n    isperfect(5) ==> False\n    isperfect(12) ==> True\n    isperfect(15) ==> False\n    isperfect(24) ==> True\n    isperfect(25) ==> False\n    '''\n    return sum(divisor(a)) - 1 == a\n    \ndef isfactor(a, b):\n    '''\n    Write a function that takes two integer arguments a and b and returns True if a is a factor of b.\n    Note: you may assume a and b are always valid.\n    Examples:\n    isfactor(3, 6) ==> True\n    isfactor(5, 6) ==> False\n    isfactor(6, 5) ==> True\n    isfactor(7, 25) ==> False\n    '''\n    return (a*b) % b == 0\n",
        "num_ids": 285
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a**(1./3) == int(a**(1./3))\n    \ndef isclose(a,b,rel_tol=1e-09,abs_tol=0.0):\n    '''\n    Write a function that takes 2 floating point numbers a,b and returns True\n    if the distance between a and b is smaller than or equal to a specified\n    relative and absolute tolerance.\n    Note: you may assume the input is always valid.\n    Examples:\n    isclose(2.0,2.0) ==> True\n    isclose(1.0,2.0) ==> False\n    isclose(1.0,1.0) ==> True\n    isclose(2.0,1.0,1e-10,1e-10) ==> True\n    isclose(2.0,1.0,1e-05,1e-05) ==> False\n    '''\n    return abs(a-b) <= max(rel_tol*max(abs(a),abs(b)),abs_tol)\n    \ndef isequal(a,b):\n    '''\n    Write a function that takes 2 floating point numbers a,b and returns True\n    if the distance between a and b is smaller or equal to the specified\n    relative and absolute tolerance.\n    Note: you may assume the input is always valid.\n    Examples:\n    isequal(2.0,2.0) ==> True\n    isequal(1.0,2.0) ==> False\n    isequal(1.0,1.0) ==> True\n    isequal(2.0,1.0,1e-10,1e-10) ==> True\n    isequal(2.0,1.0,1e-05,1e-05) ==> False\n    '''\n    return abs(a-b) <= max(rel_tol*max(abs(a),abs(b)),abs_tol)\n    \ndef isinrange(a,l,r):\n    '''\n    Write a function that takes 2 floating point numbers a,b and returns True\n    if the distance between a and b is smaller or equal to the specified\n    relative and absolute tolerance.\n    Note: you may assume the input is always valid.\n    Examples:\n    isinrange(2.0,2.0,2.0) ==> True\n    isinrange(1.0,2.0,2.0) ==> False\n    isinrange(1.0,1.0,2.0) ==> True\n    isinrange(2.0,1.0,2.0,1e-10,1e-10) ==> True\n    isinrange(2.0,1.0,2.0,1e-05,1e-05) ==> False\n    '''\n    return l <= a <= r\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True if a is a\n    prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(3) ==> False\n    isprime(4) ==> False\n    isprime(5) ==> True\n    isprime(6) ==> False\n    isprime(7) ==> False\n    isprime(8) ==> True\n    isprime(9) ==> False\n    isprime(10) ==> True\n    '''\n    return a <= 1 or (a % 2 == 0 and a > 2)\n    \ndef ispow2(a):\n    '''\n    Write a function that takes an integer a and returns True if a is a\n    power of 2.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispow2(1) ==> False\n    ispow2(2) ==> True\n    ispow2(3) ==> False\n    ispow2(4) ==> True\n    ispow2(5) ==> False\n    ispow2(6) ==> True\n    ispow2(7) ==> True\n    ispow2(8) ==> False\n    ispow2(9) ==> False\n    ispow2(10) ==> True\n    ispow2(100) ==> False\n    ispow2(101) ==> True",
        "num_ids": 1024
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return a**3 == a\n",
        "num_ids": 11
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in xrange(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for digit in num:\n        if is_prime(int(digit, 16)):\n            count += 1\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for c in num:\n        if c not in '0123456789ABCDEF':\n            continue\n        if int(c) <= 1 or int(c) >= 16:\n            continue\n        if is_prime(int(c)):\n            result += 1\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    import string\n    import math\n    digit_dict = {\"2\":\"abc\", \"3\":\"def\", \"4\":\"ghi\", \"5\":\"jkl\", \"6\":\"mno\", \n    \"7\":\"pqrs\", \"8\":\"tuv\", \"9\":\"wxyz\", \"A\":\"abc\", \"B\":\"def\", \"C\":\"ghi\", \"D\":\"jkl\",\n    \"E\":\"mno\", \"F\":\"pqrs\", \"0\":\"tuv\", \"1\":\"wxyz\"}\n    if len(num) == 0:\n        return 0\n    num_count = 0\n    for c in num:\n        if c not in string.ascii_uppercase:\n            continue\n        else:\n            num_count += 1\n    if num_count % 2 == 0:\n        return int(math.ceil(num_count / 2))\n    else:\n        return int(math.ceil((num_count + 1) / 2))\n",
        "num_ids": 230
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    counter = 0\n    s = \"\"\n    for i in num:\n        # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n        s += i\n        if int(s, 16) in primes:\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u043e\u0431\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e,\n            # \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u043d\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n            counter += 1\n            if counter == 2:\n                return int(s, 16)\n",
        "num_ids": 199
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    decimal = 0\n    hex_digits = '0123456789abcdefABCDEF'\n    for i in hex_digits:\n        decimal = decimal + hex_digits.index(i) * 16 ** (hex_digits.index(i) - 1)\n    is_prime = True\n    for i in xrange(2, decimal + 1):\n        if decimal % i == 0:\n            is_prime = False\n            break\n    if is_prime:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 126
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(num)\n    if num == '':\n        return 0\n    count = 0\n    for i in range(n):\n        c = int(num[i], 16)\n        if is_prime(c):\n            count += 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in xrange(len(num)):\n        if int(num[i]) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            count = 0\n            break\n        if int(num[i]) == 2 or int(num[i]) == 3 or int(num[i]) == 5 or int(num[i]) == 7:\n            count += 1\n        elif int(num[i]) == 11 or int(num[i]) == 13:\n            count += 2\n    return count\n",
        "num_ids": 134
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num:\n        result = 0\n        for number in num:\n            if number in primes:\n                result += 1\n        return result\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    from itertools import permutations\n    from collections import Counter\n    from string import hexdigits\n    \n    def get_primes(num):\n        for i in range(2, len(num)):\n            for j in permutations(num, i):\n                yield int(''.join(j))\n    \n    def is_prime(num):\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def get_digit(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n    \n    def get_digit_prime(num):\n        count = 0\n        for i in range(2, get_digit(num) + 1):\n            if is_prime(i):\n                count += 1\n        return count\n    \n    if num == '':\n        return 0\n    \n    primes = [i for i in get_primes(num) if is_prime(i)]\n    prime_numbers = [get_digit_prime(i) for i in primes]\n    \n    return Counter(prime_numbers)[get_digit(num)]\n",
        "num_ids": 283
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    decimal_to_binary_recursive(decimal)\n",
        "num_ids": 16
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = []\n    while decimal > 0:\n        if decimal % 2 == 0:\n            res.append(\"0\")\n        else:\n            res.append(\"1\")\n        decimal = decimal // 2\n    return ''.join(reversed(res))\n",
        "num_ids": 63
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    binary = \"\"\n    for i in range(0,8):\n        binary = binary + str(decimal & 1)\n        decimal = decimal >> 1\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = ''\n    if decimal == 0:\n        return 'db0'\n    while decimal > 1:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    result = str(decimal) + result\n    return 'db' + result + 'db'\n",
        "num_ids": 71
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    binary = []\n    for i in range(0,8):\n        binary.append(int(decimal % 2))\n        decimal /= 2\n    return \"\".join(str(e) for e in binary) + \"db\"\n",
        "num_ids": 57
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary += str(decimal%2)\n        decimal = decimal // 2\n    binary = 'db' + binary + 'db'\n    return binary\n",
        "num_ids": 49
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 'db' + format(decimal, '08b') + 'db'",
        "num_ids": 20
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = \"\"\n    while decimal:\n        result = str(decimal%2) + result\n        decimal //= 2\n    result = \"db\" + result + \"db\"\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    binary_string = ''\n    while decimal:\n        binary_string = str(decimal % 2) + binary_string\n        decimal = decimal / 2\n",
        "num_ids": 38
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    n = len(s)\n    if n < 3:\n        return False\n    i = 0\n    while i < n - 2:\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n        i += 3\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = len(s)\n    if l<3:\n        return False\n    else:\n        count = 0\n        for i in range(l):\n            if count > 0 and i < l-1 and s[i]==s[i+1]:\n                count += 1\n            else:\n                count = 0\n        return count == 0\n",
        "num_ids": 82
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Hint: loop through the string and check if:\n    #    if len(s) < 3:\n    #        return False\n    #    elif len(s) == 3:\n    #        if s[0] == s[1] or s[1] == s[2] or s[2] == s[0]:\n    #            return False\n    #        else:\n    #            return True\n    #    elif len(s) > 3:\n    #        if s[0] == s[1] or s[1] == s[2] or s[2] == s[0] or s[0] == s[1] or s[1] == s[2]:\n    #            return False\n    #        else:\n    #            return True\n",
        "num_ids": 183
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    is_happy = False\n    if len(s) >= 3:\n        seen = set()\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n    else:\n        return is_happy\n",
        "num_ids": 77
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1]:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    prev_char = s[0]\n    i = 1\n    while i < len(s):\n        if s[i] == prev_char:\n            return False\n        i += 1\n        prev_char = s[i]\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    prev = s[0]\n    for i in range(1,len(s)):\n        curr = s[i]\n        if prev == curr:\n            return False\n        prev = curr\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(s) >= 3 and s.find(s[0]+s[1]) == -1 and s.find(s[1]+s[2]) == -1 and s.find(s[2]+s[3]) == -1\n",
        "num_ids": 58
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    s = s.lower()\n    for i in range(0, len(s)-3):\n        if s[i] == s[i+3]:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    grades = [float(x) for x in grades]\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades[i] = 'A+'\n        elif grades[i] >= 3.7:\n            grades[i] = 'A'\n        elif grades[i] >= 3.3:\n            grades[i] = 'A-'\n        elif grades[i] >= 3.0:\n            grades[i] = 'B+'\n        elif grades[i] >= 2.7:\n            grades[i] = 'B'\n        elif grades[i] >= 2.3:\n            grades[i] = 'B-'\n        elif grades[i] >= 2.0:\n            grades[i] = 'C+'\n        elif grades[i] >= 1.7:\n            grades[i] = 'C'\n        elif grades[i] >= 1.3:\n            grades[i] = 'C-'\n        elif grades[i] >= 1.0:\n            grades[i] = 'D+'\n        elif grades[i] >= 0.7:\n            grades[i] = 'D'\n        elif grades[i] >= 0.0:\n            grades[i] = 'D-'\n        else:\n            grades[i] = 'F'\n    return grades\n",
        "num_ids": 324
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # The student grades are given as a list of floats\n    assert type(grades) == list\n    # The list should only contain four floats\n    assert all([type(grade) == float for grade in grades])\n    # The list should contain at least three grades\n    assert len(grades) > 2\n    # The list should only contain values between 0 and 4.0\n    assert all([grade <= 4.0 and grade >= 0 for grade in grades])\n    # You have to return a list of strings. The possible grades are:\n    # 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'\n    return [letter_grade(grade) for grade in grades]\n",
        "num_ids": 185
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return grades\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [letter_grade(i) for i in grades]\n",
        "num_ids": 16
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"].sort()\n",
        "num_ids": 24
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 18
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n",
        "num_ids": 51
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    grades = sorted(grades)\n    equation = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'E'\n    }\n    return [equation[grade] for grade in grades]\n",
        "num_ids": 147
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"\"\"return True if len(string) is prime else False\"\"\"\n    \"\"\"if len(string) == 1:\n        return False\n    else:\n        if len(string) % 2 == 0:\n            return prime_length(string[1:])\n        else:\n            return prime_length(string[1:]) or prime_length(string[:len(string)-1])\"\"\"\n    if len(string) == 1:\n        return False\n    else:\n        if len(string) % 2 == 0:\n            return prime_length(string[1:])\n        else:\n            return prime_length(string[1:]) or prime_length(string[:len(string)-1])\n",
        "num_ids": 162
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        for num in range(2, len(string)):\n            if len(string) % num == 0:\n                return False\n            else:\n                return True",
        "num_ids": 56
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) == 1:\n        return True\n    else:\n        for i in range(2,len(string)):\n            if len(string) % i == 0:\n                return False\n    return True\n    \n",
        "num_ids": 55
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(string) < 3:\n        return False\n    elif len(string) == 3:\n        return True\n    elif len(string) > 3:\n        l = len(string)\n        i = 3\n        while i < l:\n            if string[i] == string[0] and string[i] == string[l-1]:\n                return False\n            elif string[i] == string[0] or string[i] == string[l-1]:\n                j = 1\n                while j < i:\n                    if string[i] == string[j]:\n                        return False\n                    j = j+1\n            i = i+1\n        return True\n",
        "num_ids": 160
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # 1. Convert to int\n    # 2. Check if divisble by any number in range(2, int(sqrt(number)) + 1)\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(2, int(len(string) ** (1/2))+1):\n        if len(string) % i == 0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    length = len(string)\n    i = 2\n    while i <= length:\n        if length % i == 0:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(string) > 1:\n        return False\n    if len(string) == 1:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import math\n    if len(string) == 1:\n        return True\n    if len(string) > 1:\n        count = 1\n        for i in range(1,int(math.sqrt(len(string)))+1):\n            if len(string) % i == 0:\n                count +=1\n        if count == 2:\n            return True\n        else:\n            return False\n",
        "num_ids": 93
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for n in range(10**(n-1), 10**n) if n % 10 == 1 or n % 10 == 9)\n",
        "num_ids": 36
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # I will never use the \"count_digits\" function,\n    # because it is the inverse of the function itself\n    # (it just counts the number of digits).\n    count = 0\n    for i in range(n+1):\n        if i!= 0 and (i < 10 or i > 99):\n            if i % 10 == 1:\n                count += 1\n            if i % 10 == 0:\n                count += 1\n    return count\n",
        "num_ids": 106
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    if n <= 1:\n        return 0\n    else:\n        if n == 2:\n            return 5\n        if n == 3:\n            return 6\n        else:\n            total += 1\n            count = starts_one_ends(n-1)\n            total += count\n            return count\n    return total\n",
        "num_ids": 79
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    count = 0\n    \n    for i in xrange(1, n + 1):\n        \n        if i < 10:\n            \n            if i == 1:\n                count += 1\n            elif i == 10:\n                count += 2\n            else:\n                count += 3\n        \n        else:\n            \n            # For each i, check if last two digits of i are 1, if so, add 1 to count\n            # to count the numbers of i with the last two digits equal to 1, if not,\n            # add 2 to count to count the numbers of i with the last two digits equal to 1,\n            # and add 1 to count to count the numbers of i with the last two digits equal to 0.\n            \n            if i % 10 == 1:\n                count += 1\n            elif i % 10 == 0:\n                count += 2\n            else:\n                count += 3\n    \n    return count\n",
        "num_ids": 213
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return sum([starts_one_ends(n-1) for x in xrange(1, 10) if x < 10**(n-1)])\n",
        "num_ids": 71
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + (10 ** (n - 1) - 1) * 2 + 1\n",
        "num_ids": 45
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = 0\n    for i in xrange(1, n+1):\n        s += 1 if i == 1 or i == n else 2\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Total number of digits is n + 1\n    res = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1':\n            res += 1\n        if s[-1] == '1':\n            res += 1\n    return res\n",
        "num_ids": 80
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not isinstance(N, int):\n        return False\n    if not 0 <= N <= 10000:\n        return False\n    \n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return format(sum, 'b')",
        "num_ids": 63
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # convert to binary\n    binary = bin(N)[2:]\n    \n    return sum(int(i) for i in binary)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return bin(N)\n    return str(bin(N))[2:]",
        "num_ids": 20
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if N == 0:\n        return '0'\n    \n    sum = 0\n    while N > 0:\n        sum = sum + (N % 2)\n        N = N / 2\n    return str(sum)",
        "num_ids": 52
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # return the result\n    return bin(N)\n",
        "num_ids": 14
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(N, int) or N < 0:\n        raise TypeError(\"N must be a non-negative integer.\")\n    \n    # if N is 0, the answer is 0\n    if N == 0:\n        return 0\n    \n    # if N is 1, the answer is 1\n    if N == 1:\n        return 1\n    \n    # the answer is the sum of the digits in binary of N\n    total = 0\n    while N:\n        # get the last digit of N\n        digit = N % 10\n        # add the last digit to the running total\n        total += digit\n        # remove the last digit from N\n        N = N // 10\n    \n    return total\n",
        "num_ids": 163
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return bin(N)[2:]\n",
        "num_ids": 10
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bin = bin(N)[2:]\n    return \"\".join(str(int(x)) for x in bin)\n",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(N):\n        sum += (N % 10)\n        N /= 10\n    return bin(sum)[2:]\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    solution = \"\"\n    for i in range(0, len(str(N))):\n        solution += str(N%2)\n        N = N // 2\n    return solution[::-1]\n",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(lst[1::2])\n",
        "num_ids": 13
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst1=[]\n    lst2=[]\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n            lst1.append(lst[i])\n        else:\n            lst2.append(lst[i])\n    lst3=lst1+lst2\n    return lst3",
        "num_ids": 89
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst1 = [lst[i] for i in range(0, len(lst), 2)]\n    return sum(lst1)\n",
        "num_ids": 36
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # return sum(lst[i] for i in range(0,len(lst),2))\n    return sum(lst[i] for i in range(1,len(lst),2))\n",
        "num_ids": 50
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] % 2 == 0:\n            lst.insert(i + 1, lst[i])\n            del lst[i]\n        else:\n            i += 1\n    return sum(lst)\n",
        "num_ids": 70
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return lst\n    lst = lst[:]\n    for i in range(1, len(lst), 2):\n        lst[i] += lst[i - 1]\n    return lst\n",
        "num_ids": 62
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst.sort()\n    count = 0\n    while count < len(lst):\n        if count%2 == 1:\n            lst[count] = lst[count] + lst[count-1]\n        count = count + 1\n    return lst[0]\n",
        "num_ids": 68
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 1:\n        return 0\n    else:\n        return lst[0] + add(lst[2:])\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    result = ''\n    words = s.split()\n    for word in words:\n        for character in word:\n            result += chr((ord(character) - 96))\n        result +=''\n",
        "num_ids": 49
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = s.split(' ')\n    a = sorted(l)\n    a =''.join(a)\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join([sorted(s.split(' '))])",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \" \".join(sorted(s.split(\" \")))\n",
        "num_ids": 17
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(s.split()))\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join([c for c in s.split(\" \") if c])\n",
        "num_ids": 21
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = s.split(' ')\n    t = ''\n    for i in range(len(l)):\n        t += sorted(l[i]) +''\n    return t[:-1]\n",
        "num_ids": 48
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: x.lower()))\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    temp = []\n    for c in s:\n        if c!='':\n            temp.append(c)\n    temp.sort()\n    res = ''\n    for i in range(len(s)):\n        if s[i]!='':\n            res += temp[i]\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst[x], reverse=True)\n",
        "num_ids": 15
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = list(lst)\n    lst[0].sort()\n    lst[1].sort(reverse=True)\n    return [[(lst[0].index(a), lst[1].index(a)) for a in lst[0]] for lst in lst if x in lst[0]]",
        "num_ids": 77
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = list(zip(*lst))\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    return list(lst[x])",
        "num_ids": 64
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    row_lst = lst[0]\n    row_lst.sort(reverse=True)\n    row_lst.sort(key=lambda y: lst[1].index(y))\n    return [lst[1].index(x)]\n",
        "num_ids": 62
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    row_x = []\n    for row in lst:\n        for i, y in enumerate(row):\n            if y == x:\n                row_x.append((lst.index(row), i))\n    row_x.sort(key = lambda x: x[0])\n    row_x.sort(key = lambda x: x[1])\n    return row_x\n",
        "num_ids": 92
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst.sort(key = lambda row: row[0])\n    lst.sort(key = lambda row: row[1], reverse=True)\n    return [x for row in lst for x in row if x == x]\n",
        "num_ids": 56
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rows = get_rows(lst)\n    if x not in rows:\n        return []\n    rows.sort()\n    rows.sort(key=lambda x: x[1])\n    rows.sort(key=lambda x: x[0], reverse=True)\n    return rows\n",
        "num_ids": 68
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(lst[x], reverse = True)",
        "num_ids": 14
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for row in lst:\n        for col in range(len(row)):\n            if row[col] == x:\n                res.append((lst.index(row), col))\n    return sorted(res, key=lambda x: (-x[0], x[1]))\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not array:\n        return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # base case\n    if not array:\n        return array\n",
        "num_ids": 16
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_array = []\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i!= j and sum(array[i], array[j]) % 2 == 0:\n                if array[i] < array[j]:\n                    sorted_array.append(array[j])\n                    sorted_array.append(array[i])\n            elif i!= j and sum(array[i], array[j]) % 2 == 1:\n                if array[i] > array[j]:\n                    sorted_array.append(array[j])\n                    sorted_array.append(array[i])\n    return sorted_array\n",
        "num_ids": 162
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def _sort_array(array):\n        if len(array) <= 1:\n            return array\n        else:\n            pivot = array[0]\n            left, right = [], []\n            for i in range(1, len(array)):\n                if array[i] < pivot:\n                    left.append(array[i])\n                else:\n                    right.append(array[i])\n            return _sort_array(left) + [pivot] + _sort_array(right)\n    if sum(array[0], array[-1]) % 2 == 0:\n        return _sort_array(array)\n    else:\n        return _sort_array(array)[::-1]\n",
        "num_ids": 165
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(array, reverse=bool(sum(array) % 2))",
        "num_ids": 18
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    length = len(array)\n    first_index, last_index = 0, length - 1\n    sum_ = sum(array)\n    if sum_ % 2 == 0:\n        return array[::-1]\n    else:\n        return array\n",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(array)",
        "num_ids": 7
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # base case\n    if not array:\n        return array\n",
        "num_ids": 16
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(s)\n    # build a dictionary of all the letters and their positions\n    d = {}\n    for i in range(26):\n        d[chr(ord('a') + i)] = i\n    # replace letters with values from dictionary\n    out = ''\n    for i in range(n):\n        out += chr(((d[s[i]] - 2) % 26) + ord('a'))\n    return out\n",
        "num_ids": 105
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    global alphabet\n    encrypted = ''\n    for i in s:\n        idx = alphabet.index(i)\n        idx += 2\n        idx = (idx % 26)\n        encrypted += alphabet[idx]\n    return encrypted\n",
        "num_ids": 58
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new_alphabet = alphabet[4:] + alphabet[:4]\n    return ''.join([new_alphabet[alphabet.index(c)] for c in s])\n",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(alphabet[(alphabet.index(c)+1) % 26] for c in s)\n",
        "num_ids": 50
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # append zeros\n    while len(s) < 2:\n        s += '0'\n    # get first two characters\n    first_two = s[0:2]\n    # get last two characters\n    last_two = s[-2:]\n    # get third letter\n    third = s[2]\n    # string to return\n    ret = first_two[1] + third + last_two\n    return ret\n",
        "num_ids": 101
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    alphabet_shifted = ['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a']\n    new_alphabet = alphabet[3:] + alphabet[:3]\n    new_alphabet_shifted = alphabet_shifted[3:] + alphabet_shifted[:3]\n    new_alphabet_dict = dict(zip(new_alphabet,new_alphabet_shifted))\n    return ''.join([new_alphabet_dict[x] for x in s])\n",
        "num_ids": 210
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Define alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    # Make a new string to hold encrypted message\n    encrypted_message = \"\"\n    # Iterate over each character in s\n    for i in s:\n        # Get index of character in alphabet\n        index = alphabet.find(i)\n        # Shift index by two\n        index = (index + 2) % 26\n        # Append shifted letter to encrypted_message\n        encrypted_message += alphabet[index]\n    return encrypted_message\n",
        "num_ids": 127
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TODO implement this\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(alphabet[(alphabet.index(x) + 1) % 26] for x in s)\n    \n",
        "num_ids": 60
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    table = 'abcdefghijklmnopqrstuvwxyz'\n    new_table = table[(len(table) - 2):] + table[:(len(table) - 2)]\n    key = []\n    for i in range(len(table)):\n        key.append(table[i] + table[(i + 2) % len(table)])\n    key = ''.join(key)\n    key = list(key)\n    for i in range(len(new_table)):\n        key[i] = key[i].replace(table[i], new_table[i])\n    key = ''.join(key)\n    return key[:len(key) - (len(key) % 2)]\n",
        "num_ids": 174
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    encrypt_str = ''\n    for letter in s:\n        if letter.lower() in alpha:\n            encrypt_str += alpha[(alpha.index(letter.lower()) + 2) % 26]\n        else:\n            encrypt_str += letter\n    return encrypt_str\n",
        "num_ids": 88
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # first try sorting the list\n    if lst!= []:\n        lst = sorted(lst)\n        return lst[1]\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # return sorted(lst)[1]\n    \n    # better solution\n    return sorted(lst)[1 if len(lst) > 1 else 0]\n",
        "num_ids": 39
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return lst[lst.index(min(lst))+1]",
        "num_ids": 19
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return min(lst[1:]) if len(lst) >= 2 else None\n",
        "num_ids": 22
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if not lst:\n        return None\n    \n    smallest = min(lst)\n    \n    #if the smallest element is the 2nd smallest element\n    if smallest == lst[1]:\n        return lst[0]\n    else:\n        return lst[1]\n",
        "num_ids": 71
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    smallest = float(\"inf\")\n    smallest_index = -1\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            smallest_index = i\n    if smallest_index == -1:\n        return None\n    else:\n        return lst[smallest_index+1]\n    \n",
        "num_ids": 94
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not lst:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n",
        "num_ids": 30
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.startswith('I'))\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([1 for s in S.split(\".\") + S.split(\"?\") + S.split(\"!\") if s.strip() and s[0] == 'I'])\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(1 for word in S.split('.') if word.startswith('I'))\n",
        "num_ids": 26
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([w for w in S.split(\".\") if w == \"I\"])",
        "num_ids": 21
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    cnt = 0\n    for i in S.split('.'):\n        if i.startswith('I'):\n            cnt += 1\n    return cnt\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if S[0] == \"I\":\n        return 1\n    else:\n        return 0",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for word in S.split('.'):\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for s in S.split('.') + S.split('?') + S.split('!') if s.startswith('I'))\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(S) < 1:\n        return 0\n    boredom = 0\n    for word in S.split(\" \"):\n        if word[0] == \"I\":\n            boredom = 1\n    return boredom\n",
        "num_ids": 55
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len([x for x in S.split('.') + S.split('?') + S.split('!') if x.strip() == 'I'])\n",
        "num_ids": 40
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    return False\n    ",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (x==y+z) and (type(x)==int) and (type(y)==int) and (type(z)==int)\n    pass\n",
        "num_ids": 41
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return int(x) + int(y) == int(z)\n",
        "num_ids": 18
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (x == y + z) or (x == z + y) or (y == z + x):\n        if x % 1 == 0 and y % 1 == 0 and z % 1 == 0:\n            return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (x == y+z or x == z+y or x == y+z or y == x+z or y == z+x or z == x+y or z == y+x) and type(x) == int and type(y) == int and type(z) == int\n",
        "num_ids": 68
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "",
        "num_ids": 1
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x==(y+z) and x==int(x) and y==int(y) and z==int(z)",
        "num_ids": 31
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (x == (y+z)) or (y == (x+z)) or (z == (x+y)",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if ((isinstance(x, int) or isinstance(x, float)) and (isinstance(y, int) or isinstance(y, float)) and (isinstance(z, int) or isinstance(z, float))):\n        return x == (y+z)\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x == y + z or x == z + y or x == y + z\n",
        "num_ids": 21
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = []\n    \n    for letter in message:\n        if letter.lower() in vowels:\n            new_message.append(chr(ord(letter) - 1))\n        else:\n            new_message.append(letter)\n    return \"\".join(new_message)\n    \n",
        "num_ids": 94
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #vowels = 'AEIOU'\n    #vowels2 = 'AEIOU'\n    vowels = 'AEIOU'\n    vowels2 = 'AEIOU'\n    swap = lambda x,y: x if x in vowels else y\n    swap2 = lambda x,y: x if x in vowels2 else y\n    lst = []\n    \n    for char in message:\n        if char in vowels:\n            lst.append(swap(char, vowels2[(vowels2.index(char)+2)%5]))\n        else:\n            lst.append(char)\n    return ''.join(lst)\n",
        "num_ids": 165
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = ''\n    for letter in message:\n        if letter.upper() in alphabet:\n            s += chr(alphabet.index(letter.upper()) + 2)\n        else:\n            s += letter\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    \n    def swap_vowel(s):\n        # vowels = \"aeiouAEIOU\"\n        return vowels[(vowels.find(s) + 2) % len(vowels)]\n        \n    \n    def swap_all(s):\n        return \"\".join([ swap_vowel(c) if c in vowels else c for c in s ])\n        \n    \n    return swap_all(swap_all(message))\n",
        "num_ids": 127
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # replace all vowels with the letter that appears 2 places\n    # ahead of that vowel in the english alphabet\n    # replace all capital letters with lowercase\n    # note: this is a very dirty hack\n    def replace_vowels(letter):\n        \n        vowels = {'a': '4', 'e': '3', 'i': '1', 'o': '0', 'u': 'v'}\n        for key in vowels:\n            if letter.lower() == key:\n                return vowels[key]\n        else:\n            return letter\n    \n    def encode_helper(message):\n        \n        result = ''\n        for letter in message:\n            result += replace_vowels(letter)\n        return result\n    \n    return encode_helper(message)\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"\\n*** ALL TESTS PASSED. WOWZA!\\n",
        "num_ids": 237
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = ['a','e','i','o','u']\n    letter_index_map = {\n        'a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g',\n        'h':'h','i':'i','j':'j','k':'k','l':'l','m':'m','n':'n',\n        'o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v',\n        'w':'w','x':'x','y':'y','z':'z'\n    }\n    vowel_index_map = {\n        'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,\n        'm':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26\n    }\n    for i,v in enumerate(vowels):\n        message = message.replace(v,letter_index_map[v.lower()])\n    for i,v in enumerate(vowels):\n        message = message.replace(v.lower(),vowel_index_map[v.lower()]+str(int(vowel_index_map[v.lower()])+1))\n    return message\n",
        "num_ids": 392
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = 'aeiou'\n    translator = {}\n    for i in range(len(vowels)):\n        translator[vowels[i]] = vowels[(i+2)%5]\n    translation = ''\n    for letter in message:\n        translation += translator.get(letter.lower(), letter)\n    return translation\n",
        "num_ids": 85
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Convert all letters to lower case\n    message = message.lower()\n    # Make a dict for translating\n    translate_dict = {'a':'4','b':'8','c':'(','d':'p','e':'3','f':'9','g':'6','h':'1','i':'k','j':'7','k':'2','l':'a','m':'b','n':'m','o':'0','p':'d','q':'=','r':'r','s':'5','t':'l','u':'f','v':'v','w':'9','x':'c','y':'4','z':'q'}\n    result = ''\n    for char in message:\n        if char in translate_dict:\n            result = result + translate_dict[char]\n        else:\n            result = result + char\n    return result\n",
        "num_ids": 214
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Loop over message, converting to lowercase and replacing vowels\n    for idx, c in enumerate(message):\n        if c in VOWELS:\n            message[idx] = VOWEL_MAP[c]\n    return \"\".join(message)\n",
        "num_ids": 63
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    vowels = 'aeiouAEIOU'\n    numbers = '0123456789'\n    \n    encoded_message = ''\n    \n    for character in message:\n        if character in vowels:\n            index = vowels.find(character)\n            encoded_message += vowels[index + 2]\n        elif character in numbers:\n            index = numbers.find(character)\n            encoded_message += numbers[index + 2]\n        else:\n            encoded_message += character\n    \n    return encoded_message\n",
        "num_ids": 136
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(x) for x in lst]\n    n = max(lst)\n    lst = [int(x) for x in str(n)]\n    s = 0\n    for x in lst:\n        s += x\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    lst = list(set(lst))\n    lst.sort()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2",
        "num_ids": 1025
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    for i in lst:\n        if is_prime(i):\n            return sum([int(j) for j in str(i)])\n        else:\n            continue\n",
        "num_ids": 44
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #for i in lst:\n    #    if isPrime(i) == True:\n    #        max = i\n    #    else:\n    #        continue\n    #return sum(map(int,list(str(max))))\n    return max(list(filter(isPrime,lst)))\n",
        "num_ids": 72
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    def check_prime(n):\n        if n == 2 or n == 3: return True\n        if n < 2 or n % 2 == 0: return False\n        if n < 9: return True\n        if n % 3 == 0: return False\n        for i in range(5,int(n**0.5)+1,6):\n            if n % i == 0:\n                return False\n        return True\n    for i in lst:\n        temp = str(i)\n        for j in temp:\n            res += int(j)\n    return res\n",
        "num_ids": 136
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    from math import log\n    lst = list(map(lambda x: int(x), lst))\n    lst = sorted(lst)\n    maxi = 0\n    for i in lst:\n        if is_prime(i):\n            maxi += i\n    return maxi\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(list(map(lambda x: int(str(x)[0]), filter(lambda x: prime(x), lst))))\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = [int(x) for x in lst]\n    cnt = 0\n    for i in lst:\n        if is_prime(i):\n            cnt+=i\n    return cnt\n",
        "num_ids": 51
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    return sum([int(i) for i in str(max(lst))])",
        "num_ids": 26
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst.sort()\n    for i in lst:\n        if i > 1:\n            count = 0\n            for j in range(2,i):\n                if i % j == 0:\n                    count += 1\n            if count == 0:\n                return sum(int(j) for j in str(i))\n    return 0\n",
        "num_ids": 80
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    return all(isinstance(i,str) for i in dict.keys()) and all(isinstance(i,str) for i in dict.values())\n",
        "num_ids": 51
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not dict:\n        return True\n    elif len(dict)==0:\n        return True\n    else:\n        if len(dict)==1:\n            if isinstance(list(dict.keys())[0],str):\n                if list(dict.keys())[0].islower() or list(dict.keys())[0].isupper():\n                    return True\n                else:\n                    return False\n            elif isinstance(list(dict.values())[0],str):\n                if list(dict.values())[0].islower() or list(dict.values())[0].isupper():\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            for key, value in dict.items():\n                if isinstance(key,str):\n                    if key.islower() or key.isupper():\n                        if value.islower() or value.isupper():\n                            pass\n                        else:\n                            return False\n                    else:\n                        return False\n                elif isinstance(key,int):\n                    return False\n                else:\n                    return False\n            return True\n        \n",
        "num_ids": 264
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return False\n    if len(dict) > 1:\n        for key in dict.keys():\n            if not isinstance(key, str):\n                return False\n        for key in dict.keys():\n            if key.islower():\n                return False\n        for key in dict.keys():\n            if key.isupper():\n                return False\n    return True",
        "num_ids": 94
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not dict:\n        return False\n    for key, val in dict.items():\n        if isinstance(key, str) and not isinstance(key, str):\n            return False\n        if isinstance(key, str) and isinstance(val, str):\n            if key.lower()!= key or val.lower()!= val:\n                return False\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # check if dict is empty\n    if not dict:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    for i in dict:\n        if type(i) is not str:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return True\n    else:\n        for key in dict.keys():\n            if not type(key) == str:\n                return False\n            if key.isupper():\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        keys = []\n        values = []\n        for key in dict.keys():\n            keys.append(key.lower())\n            values.append(dict[key].lower())\n        for i in range(len(keys)):\n            if keys[i]!= keys[i].upper():\n                return False\n        for i in range(len(values)):\n            if values[i]!= values[i].upper():\n                return False\n        return True\n",
        "num_ids": 126
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if key.islower():\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            yield i\n",
        "num_ids": 60
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = [x for x in range(2,n)]\n    primes = []\n",
        "num_ids": 23
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in range(2,n+1) if is_prime(x)]\n",
        "num_ids": 24
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        return []\n    array = [2]\n    for i in range(3,n):\n        prime = True\n        for j in array:\n            if j > i:\n                break\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            array.append(i)\n    return array\n",
        "num_ids": 86
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    primes = [2]\n    for i in range(3, n+1):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:\n                return primes\n",
        "num_ids": 56
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        return not any(n % i == 0 for i in range(2, int(sqrt(n)) + 1))\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 1:\n        return []\n    elif n == 1:\n        return [2]\n    elif n == 2:\n        return [2, 3]\n    else:\n        p = 3\n        primes = [2, 3]\n        while True:\n            if n <= p:\n                return primes\n            elif n % p == 0:\n                break\n            else:\n                p += 2\n                primes.append(p)\n",
        "num_ids": 109
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert(n >= 0)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        array = [2]\n        for i in xrange(3, n+1, 2):\n            for j in array:\n                if i % j == 0:\n                    break\n            else:\n                array.append(i)\n        return array\n",
        "num_ids": 96
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            result.append(i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(\"\".join(str(a*b) for a,b in zip(str(a), str(b))))\n",
        "num_ids": 30
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    product = 0\n    a = abs(a)\n    b = abs(b)\n    for i in range(a):\n        product = product + b\n    return product\n",
        "num_ids": 42
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # When we multiply a number by 0, we get a 0.\n    if a == 0 or b == 0:\n        return 0\n    # Once we get a non-zero value, we need to get the value of the first digit.\n    # We'll store the value in a variable to be used later.\n    first = abs(a) % 10\n    # We'll multiply all the digits by the same number and add them up.\n    product = (b * first) + multiply(a // 10, b)\n    return product\n",
        "num_ids": 121
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a * b) % 10\n",
        "num_ids": 11
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    ans = 0\n    for i in range(len(a)):\n        ans += a[i] * b[i]\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a < 0 or b < 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([a*b for a,b in zip(str(a), str(b))])\n",
        "num_ids": 25
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # if b == 0:\n    #     return 0\n    # elif b == -1:\n    #     return 1\n    # else:\n    #     return a % 10 * multiply(a // 10, b - 1)\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(x) * int(b) for x in str(a)])\n    ",
        "num_ids": 24
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return int(a) * int(b)\n",
        "num_ids": 13
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in \"AEIOU\":\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                result += 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n    \ndef zero_test(a, b, c):\n    \"\"\"\n    Given three integers a, b, c, return True if the sum of a and b is equal to c, otherwise return False.\n    \n    Hint: a == b will always return False.\n    \"\"\"\n    return a == b == c\n    \ndef is_palindrome(s):\n    \"\"\"\n    Given a string s, return True if it is a palindrome, False otherwise.\n    \n    Ignore whitespace and uppercase/lowercase letters.\n    \n    For example:\n    is_palindrome('Hi, I am a palindrome!') returns True\n    is_palindrome('Not a palindrome') returns False\n    is_palindrome('h') returns True\n    is_palindrome('w') returns False\n    is_palindrome('H') returns False\n    is_palindrome('hihi') returns True\n    \"\"\"\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]\n    \ndef is_anagram(s1, s2):\n    \"\"\"\n    Given two strings s1 and s2, return True if s2 is an anagram of s1, False otherwise.\n    \n    Ignore whitespace, lowercase letters, and proper nouns.\n    \n    For example:\n    is_anagram('William Shakespeare', 'I am a weakish speller') returns True\n    is_anagram('W I a m I s h i s a I', 'I am a weakish speller') returns True\n    is_anagram('William Shakespeare', 'w I a m I s h i s a I') returns False\n    is_anagram('William Shakespeare', 'I am a weakish speller') returns False\n    is_anagram('William Shakespeare', 'I am a weakish speller') returns False\n    \"\"\"\n    s1, s2 = s1.lower().replace(' ', ''), s2.lower().replace(' ', '')\n    return sorted(s1) == sorted(s2)\n    \ndef rotate(s, num):\n    \"\"\"\n    Given a string s and an integer num, return the string rotated num times (clockwise).\n    \n    For example:\n    rotate('hello', 1) returns 'olleh'\n    rotate('hello', 2) returns 'lohel'\n    rotate('hello', 3) returns 'llohe'\n    rotate('hello', 4) returns 'ohell'\n    rotate('hello', 5) returns 'hello'\n    rotate('hello', 6) returns 'hello'\n    rotate('hello', 7) returns 'hello'\n    \"\"\"\n    return s[num:] + s[:num]\n    \ndef long_burp_test(s):\n    \"\"\"\n    Given a string s, return True if it uses the letters A, B, and C as rearranged\n    letters to make a word \"burp\", False otherwise.\n    \n    For example:\n    long_burp_test('abc') returns True\n    long_burp_test('bac') returns True\n    long_burp_test('abcdef') returns False\n    long_burp_test('xxyyzz') returns False\n    long_burp_test('aazz') returns True\n    long_burp_test('abcz') returns False\n    long_burp_test('abcd') returns False\n    long_burp_test('efgh') returns False\n    \"\"\"\n    return 'a' in s and 'b' in s and 'c' in s\n    \ndef is_perfect_square(n):\n    \"\"\"\n    Given a positive integer n, return True if n is a perfect square, False otherwise.\n    \n    Hint: Try to avoid using a high-precision number such as sqrt(n).\n    \"\"\"\n    return n**(1/2) == int(n**(1/2))\n    \ndef every_other_letter(s):\n    \"\"\"\n    Given a string s, return a string made of every other letter in s, starting with the first.\n    \n    For example:\n    every_other_letter('Hello') returns 'Hlo'\n    every_other_letter('hi') returns 'i'\n    every_other_letter('a') returns ''\n    every_other_letter('XYZ') return",
        "num_ids": 1025
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in xrange(len(s)) if s[i].isupper())\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([1 for c in s[::2] if c.isupper()])",
        "num_ids": 21
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    count = 0\n    for i in range(len(s)):\n        if (i+1)%2 == 0:\n            if s[i].isupper():\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    val = float(value)\n    closest = val\n    if val > 0:\n        if val - int(val) > 0:\n            closest = int(val) + 1\n        else:\n            closest = int(val)\n    else:\n        if abs(int(val)) - abs(val) > 0:\n            closest = int(val) - 1\n        else:\n            closest = int(val)\n    return closest\n",
        "num_ids": 112
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    try:\n        number = float(value)\n    except ValueError:\n        return None\n",
        "num_ids": 23
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    value = float(value)\n    rounded = round(value)\n    difference = abs(value - rounded)\n    if rounded > value:\n        return rounded if difference < difference else rounded - 1\n    return rounded if difference < difference else rounded + 1\n",
        "num_ids": 59
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    x = int(float(value))\n    if value - x > 0:\n        return x + 1\n    return x\n",
        "num_ids": 30
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not isinstance(value, float):\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return round(float(value))\n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    try:\n        n = int(value)\n        return n if abs(n) == n else n + 1 if n > 0 else n - 1\n    except ValueError:\n        return None\n",
        "num_ids": 46
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if \".\" in value:\n        return int(value)\n    return int(round(float(value)))",
        "num_ids": 26
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    value = float(value)\n",
        "num_ids": 9
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = [n]\n    while n > 1:\n        if n % 2 == 0:\n            res.append(n // 2)\n            n = n // 2\n        else:\n            res.append(n // 2 + 1)\n            n = n // 2 + 1\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return make_a_pile(n-1) + [2*n]\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # import pdb\n    # pdb.set_trace()\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return []\n    if n % 2 == 0:\n        return [n] + make_a_pile(n - 2)\n    else:\n        return [n, n + 1, n + 3] + make_a_pile(n - 4)\n",
        "num_ids": 69
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pile = [n]\n    while n > 1:\n        if n & 1:\n            n -= 1\n        else:\n            n >>= 1\n        pile.append(n)\n    return pile\n",
        "num_ids": 51
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return range(n, 0, -2)\n",
        "num_ids": 13
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # TIME: O(n)\n    # SPACE: O(n)\n    def _make_a_pile(n):\n        result = [n]\n        i = 1\n        while i < n:\n            result.append(i*2)\n            i += 1\n        return result\n",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = [n]\n    while res[-1] > 1:\n        if res[-1] % 2 == 0:\n            res.append(res[-1] // 2)\n        else:\n            res.append(res[-1] // 2 + 1)\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    levels = []\n    stones = 1\n    for level in range(1, n+1):\n        stones = (level+1) if level % 2 == 1 else (level+2)\n        levels.append(stones)\n",
        "num_ids": 53
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split(',')\n    return s\n    ",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    list_string = s.split(\",\")\n    for word in list_string:\n        result.append(word.strip())\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in s.split(',')]\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = s.split(',')\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(',')\n    \ndef test_words_string():\n    assert(words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n    assert(words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n",
        "num_ids": 92
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n    \ndef words_dict(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a dictionary of the words and their counts\n    (separated by a colon and a space) in the following format:\n    {<word>: <count>, <word>: <count>, <word>: <count>,...}\n    For example:\n    words_dict(\"Hi, my name is John\") == {\"Hi\": 1, \"my\": 1, \"name\": 1, \"is\": 1, \"John\": 1}\n    words_dict(\"One, two, three, four, five, six\") == {\"One\": 1, \"two\": 1, \"three\": 1, \"four\": 1, \"five\": 1, \"six\": 1}\n    \"\"\"\n    return {key:value for key,value in Counter(s.split(',')).items()}\n",
        "num_ids": 221
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x%2==0 and y%2==0 and x>y:\n        return -1\n    elif x%2==0 and y%2==0 and x<y:\n        return -1\n    elif x%2!=0 and y%2!=0:\n        return -1\n    else:\n        max=x if x%2==0 else y\n        min=x if x%2!=0 else y\n        if max%2==0:\n            return min\n        else:\n            return max\n            \nprint choose_num(12, 15)\nprint choose_num(13, 12)\nprint choose_num(11, 11)\nprint choose_num(12, 11)\nprint choose_num(15, 15)\nprint choose_num(15, 11)\nprint choose_num(15, 17)\nprint choose_num(11, 17)\nprint choose_num(11, 18)",
        "num_ids": 216
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    #start = max(x,y)\n    #end = min(x,y)\n    #while start < end:\n        #if start%2==0:\n            #return start\n        #start += 1\n    #return -1\n    if (x%2==0) and (y%2==0):\n        return max(x,y)\n    elif x>y:\n        return max(x,y)\n    elif x<y:\n        return min(x,y)\n    else:\n        return -1\n",
        "num_ids": 134
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x % 2 == 0:\n        x_num = x\n    else:\n        x_num = x + 1\n    if y % 2 == 0:\n        y_num = y\n    else:\n        y_num = y - 1\n    if x_num > y_num:\n        num = y_num\n    else:\n        num = x_num\n    return num",
        "num_ids": 91
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    # convert x and y to integers\n    x = int(x)\n    y = int(y)\n",
        "num_ids": 28
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return -1\n",
        "num_ids": 6
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            if x <= y:\n                return x\n            else:\n                return y\n        else:\n            if x <= y:\n                return x\n            else:\n                return y\n    else:\n        if y % 2 == 0:\n            if x <= y:\n                return y\n            else:\n                return x\n        else:\n            if x <= y:\n                return y\n            else:\n                return x\n",
        "num_ids": 116
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    big = 0\n    if x <= y:\n        for i in range(x, y+1):\n            if i % 2 == 0 and i > big:\n                big = i\n    else:\n        for i in range(y, x+1):\n            if i % 2 == 0 and i > big:\n                big = i\n    return big\n",
        "num_ids": 83
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    num = 0\n    while num < x:\n        num = num + 2\n    if num == x:\n        num = -1\n    while num < y:\n        num = num + 2\n    return num\n    \nif __name__ == \"__main__\":\n    assert choose_num(12, 15) == 14\n    assert choose_num(13, 12) == -1\n    assert choose_num(2, 2) == -1\n    print(\"Tests passed\")",
        "num_ids": 112
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x <= y:\n        if x % 2 == 0:\n            return x\n        else:\n            return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return -1\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for num in range(x, y+1):\n        if num % 2 == 0 and num > 0:\n            return num\n",
        "num_ids": 31
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    a = n + m - 1\n    m = a >> 1\n    n = a ^ (a >> 1)\n    return format(n, '#0b')\n",
        "num_ids": 42
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    sum_ = 0\n    for i in range(n, m + 1):\n        sum_ += i\n    sum_ = int(sum_ / (m - n + 1))\n    return bin(sum_)[2:]\n",
        "num_ids": 65
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if m <= n:\n        return -1\n    m += 1\n    res = 0\n    for i in range(n, m):\n        res += i\n    return bin(res // (m - n))[2:]\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if m == n:\n        return '0b1'\n    if m < n:\n        return -1\n    return \"{0:b}\".format(round((n + m) / 2)).zfill(m - n + 1)\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if m < n:\n        return -1\n    n, m = int(n), int(m)\n    if n == 0 or m == 0:\n        return \"0b0\"\n    bits = []\n    for i in range(m-n+1):\n        bit = \"0b\"\n        for j in range(n):\n            bit += \"1\"\n        bit += \"0\"\n        bits.append(bit)\n    return str(int(round(sum(int(bit, 2) for bit in bits)/(m-n+1))))\n",
        "num_ids": 132
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return '0b1'\n    n_binary = bin(n)[2:]\n    m_binary = bin(m)[2:]\n    binary_len = len(n_binary) - len(m_binary)\n    return '0b' + '1' * binary_len + ''.join(str(int(a) + int(b)) for a, b in zip(n_binary, m_binary))\n    \n    \nrounded_avg(1, 5) # \"0b11\"\nrounded_avg(7, 5) # -1\nrounded_avg(10, 20) # \"0b1111\"\nrounded_avg(20, 33) # \"0b11010",
        "num_ids": 181
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > m, \"Wrong parameters\"\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if n == m:\n    #     return \"0b1\"\n",
        "num_ids": 19
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    ans = 0\n    for i in range(n, m + 1):\n        ans += i\n    ans = int(math.ceil(ans / (m - n + 1)))\n    print(\"{0:b}\".format(ans))\n    \nrounded_avg(1, 5)\nrounded_avg(7, 5)\nrounded_avg(10, 20)\nrounded_avg(20, 33)",
        "num_ids": 101
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n    return []\n",
        "num_ids": 8
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in x if x % 2 == 0]\n    \n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(x))\n    \n    \n",
        "num_ids": 14
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    unique = set()\n    for n in x:\n        if n < 10:\n            unique.add(n)\n        else:\n            for d in str(n):\n                if int(d) % 2 == 0:\n                    break\n            else:\n                unique.add(n)\n    return sorted(unique)\n",
        "num_ids": 76
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set([x for x in x if not int(x) % 2]))\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_even(x):\n        return x % 2 == 0\n    \n    def has_even(x):\n        return any([x % 10 == i for i in range(1, 10, 2)])\n",
        "num_ids": 51
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(list(set([int(digit) for digit in str(x)])))\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(filter(lambda x: not x % 2, set(x))))\n",
        "num_ids": 22
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted([i for i in x if all(d%2!= 0 for d in str(i))])\n",
        "num_ids": 28
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted([i for i in x if i%2==0])\n    \n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) < 1:\n        return []\n    res = []\n    for i in range(1, 10):\n        if i < len(arr):\n            res.append(i)\n            res.append(arr[i])\n        else:\n            res.append(i)\n    arr = res[::-1]\n    res = []\n    for i in range(0, len(arr), 2):\n        if arr[i] < 10:\n            res.append(string.digits[arr[i]])\n        else:\n            res.append(string.digits[arr[i]] + string.digits[arr[i+1]])\n    return res\n",
        "num_ids": 162
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    arr = arr or []\n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [str(arr[0])]\n    arr = sorted(arr)\n    arr.reverse()\n    for i in range(len(arr)):\n        if arr[i] < 1 or arr[i] > 9:\n            arr[i] = ''\n        else:\n            arr[i] = str(arr[i])\n    return arr\n",
        "num_ids": 111
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i in arr:\n        if i in range(1,10):\n            result.append(str(i))\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ['One','Two','Three','Four','Five','Six','Seven','Eight','Nine']\n",
        "num_ids": 23
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return []\n    return_list = []\n    sorted_arr = sorted(arr)\n    for index, num in enumerate(sorted_arr):\n        if 1 <= num <= 9:\n            return_list.append(str(num))\n        else:\n            return_list.append(str(index + 1))\n    return_list.reverse()\n    return return_list\n",
        "num_ids": 101
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def switch(number):\n        if number == 1: return \"One\"\n        elif number == 2: return \"Two\"\n        elif number == 3: return \"Three\"\n        elif number == 4: return \"Four\"\n        elif number == 5: return \"Five\"\n        elif number == 6: return \"Six\"\n        elif number == 7: return \"Seven\"\n        elif number == 8: return \"Eight\"\n        elif number == 9: return \"Nine\"\n        else: return \"\"\n",
        "num_ids": 121
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return []\n    \n    arr = sorted(arr)\n    arr = arr[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the array\n    arr.reverse()\n    \n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    \n    result = []\n    \n    for number in arr:\n        if 1 <= number <= 9:\n            result.append(digit_to_name(number))\n    \n    return result\n    \ndef digit_to_name(number):\n    \"\"\"\n    Returns the name of the given digit.\n    \n    For example:\n      digit_to_name(8)   -> \"Eight\"\n      digit_to_name(1)   -> \"One\"\n      digit_to_name(0)   -> \"Zero\"\n    \"\"\"\n    if number == 0:\n        return \"Zero\"\n    elif number == 1:\n        return \"One\"\n    elif number == 2:\n        return \"Two\"\n    elif number == 3:\n        return \"Three\"\n    elif number == 4:\n        return \"Four\"\n    elif number == 5:\n        return \"Five\"\n    elif number == 6:\n        return \"Six\"\n    elif number == 7:\n        return \"Seven\"\n    elif number == 8:\n        return \"Eight\"\n    elif number == 9:\n        return \"Nine\"\n    else:\n        return \"Number too high.\"\n    \n    \n    \n    \n    \n    ",
        "num_ids": 366
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            list.append(math.factorial(i))\n        else:\n            list.append(sum(range(1, i + 1)))\n    return list\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = [1]\n    for i in range(2, n):\n        lst.append(lst[-1] * i)\n    lst = lst + [0] * (n - len(lst))\n    return lst\n",
        "num_ids": 61
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert(type(n) is int)\n    factorials = [1]\n    for i in range(1,n):\n        factorials.append(i*factorials[-1])\n    return factorials\n",
        "num_ids": 55
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert type(n) == int and n > 0, \"n must be a positive integer\"\n    if n == 1:\n        return [1]\n    else:\n        result = [1]\n        if n % 2 == 0:\n            for i in range(2, n, 2):\n                result.append(result[i-1] * i)\n            return result\n        else:\n            for i in range(1, n, 2):\n                result.append(result[i-1] + i)\n            return result\n",
        "num_ids": 124
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # check for an invalid input\n    if n < 1:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        first = [1]\n        rest = f(n-1)\n        for i in range(len(rest)):\n            first.append(first[i]*rest[i])\n        return first\n",
        "num_ids": 78
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = [1]\n    if n <= 0:\n        return lst\n    lst.append(1)\n    if n == 1:\n        return lst\n    for i in range(1, n):\n        lst.append(lst[i - 1] * i)\n    return lst\n",
        "num_ids": 75
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_palindrome(n):\n        return n == int(str(n)[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert 1 <= n <= 10**3\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n",
        "num_ids": 86
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def helper(n, even, odd):\n        if n == 1:\n            return even, odd\n        if n % 2 == 0:\n            even, odd = helper(n/2, even+1, odd)\n        else:\n            even, odd = helper(n/2, even, odd+1)\n        return even, odd\n    return helper(n, 0, 0)\n",
        "num_ids": 93
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert 1 <= n <= 10 ** 3\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if int(str(i)[::-1]) == i:\n            result.append(i)\n    return len(result), len(result) - sum(map(lambda x: x % 2, result))\n",
        "num_ids": 68
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ans = [0, 0]\n    for i in xrange(1, n + 1):\n        even, odd = 0, 0\n        while i:\n            i, r = divmod(i, 10)\n            if r % 2:\n                odd += 1\n            else:\n                even += 1\n        if even == odd:\n            ans[0] += 1\n            ans[1] += 1\n        if even > odd:\n            ans[0] += 1\n        if even < odd:\n            ans[1] += 1\n    return tuple(ans)\n",
        "num_ids": 132
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        num = str(i)\n        if num == num[::-1] and i % 2 == 0:\n            even_count += 1\n        elif num == num[::-1] and i % 2 == 1:\n            odd_count += 1\n    return even_count, odd_count\n",
        "num_ids": 96
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Idea: count the number of odd and even palindromes in [1, n + 1]\n    # Palindrome n-1, n can be decomposed into two parts, p, q, such that p^2 + q^2 = n.\n    # Number of even palindromes: (n + 1) / 2\n    # Number of odd palindromes: ((n + 1) / 2) + 1\n    res = [0, 0]\n",
        "num_ids": 108
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return 0, 0\n",
        "num_ids": 14
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in arr:\n        if i > 0:\n            total += 1\n            for j in range(len(str(i))):\n                if int(str(i)[j]) > 0:\n                    break\n                elif j == len(str(i)) - 1:\n                    total += 1\n        elif i < 0:\n            total += 1\n            first_neg_digit = abs(i) % 10\n            if first_neg_digit > 0:\n                total += 1\n    return total\n",
        "num_ids": 123
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(n > 0 for n in arr)\n",
        "num_ids": 14
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        num_digits = len(str(abs(num)))\n        if num_digits > 0:\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([1 for num in arr if sum([int(digit) for digit in str(num)]) > 0])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in arr:\n        # print(i)\n        if i == 0 or i < 0:\n            continue\n        else:\n            sum_of_digits = sum([int(digit) for digit in str(i)])\n            if sum_of_digits > 0:\n                count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            digit_sum = sum(int(digit) for digit in str(num))\n            if digit_sum > 0:\n                count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num_count = 0\n",
        "num_ids": 8
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not arr:\n        return 0\n    arr = [int(i) for i in str(abs(arr[0]))]\n    return sum(i > 0 for i in arr)\n",
        "num_ids": 46
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = {}\n    for i in arr:\n        s = str(abs(i))\n        if len(s) == 1:\n            nums[i] = True\n        elif len(s) > 1:\n            nums[i] = 0\n            for num in s:\n                nums[i] += nums[int(num)]\n    return sum(nums.values())",
        "num_ids": 94
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([1 for i in arr if sum(map(int, str(i))) > 0])\n",
        "num_ids": 25
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Solution\n    N = len(arr)\n    max_arr = max(arr)\n    \n    if N < 2:\n        return True\n    \n    last_index = arr.index(max_arr)\n    count = N - last_index\n    \n    if last_index == 0:\n        return False\n    \n    left_arr = arr[:last_index]\n    right_arr = arr[last_index:]\n    \n    right_arr = right_arr[::-1]\n    \n    if left_arr == sorted(left_arr) and right_arr == sorted(right_arr):\n        return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    N = len(arr)\n    if N == 0:\n        return True\n    elif N == 1:\n        return arr[0] < arr[1]\n    # since arr is guaranteed to be non-empty, we know that arr[0] is always smaller\n    # than any element in arr[1:N]\n    smallest = arr[0]\n    for i in range(1, N):\n        if arr[i] < smallest:\n            smallest = arr[i]\n        else:\n            return False\n    return True\n",
        "num_ids": 127
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr)==0:\n        return True\n    \n    start=0\n    end=len(arr)-1\n    while start<=end:\n        if arr[start]<=arr[end]:\n            return True\n        start+=1\n        end-=1\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    arr = [3, 4, 5, 1, 2]\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            arr = arr[i:] + arr[:i]\n            break\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if len(arr)==0:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            if i==0:\n                arr[-1],arr[0]=arr[0],arr[-1]\n            else:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n            return True\n    return False\n",
        "num_ids": 107
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    min_index=arr.index(min(arr))\n    if min_index==0:\n        return False\n    temp_arr=arr[0:min_index]+arr[min_index+1:]+[arr[min_index]]\n    \n    return move_one_ball(temp_arr)\n        \ndef test_function():\n    assert (move_one_ball([3, 4, 5, 1, 2])==True)\n    assert (move_one_ball([3, 5, 4, 1, 2])==False)\n    assert (move_one_ball([])==True)\n    assert (move_one_ball([1,2])==True)\n    assert (move_one_ball([1,2,3])==False)\n    assert (move_one_ball([2,3,4,1])==False)\n    print(\"All test cases passed successfully\")\n    \nif __name__==\"__main__\":\n    test_function(",
        "num_ids": 256
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Empty array\n    if not arr: return True\n    \n    # Test if it is possible to get non-decreasing order\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]: return False\n    \n    # Perform right shift operation\n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n    return True\n",
        "num_ids": 98
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return True\n    arr.sort()\n    for i in xrange(len(arr)-1):\n        if arr[i]>=arr[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if lst1 == None or lst2 == None or len(lst1)!= len(lst2):\n        return False\n    elif len(lst1) == 0 or len(lst2) == 0:\n        return False\n    else:\n        lst1_even = 0\n        lst2_even = 0\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 0:\n                lst1_even += 1\n        for j in range(len(lst2)):\n            if lst2[j] % 2 == 0:\n                lst2_even += 1\n        if lst1_even == len(lst1) and lst2_even == len(lst2):\n            return True\n        else:\n            return False\n",
        "num_ids": 195
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    lst1 = [i for i in lst1 if i%2 == 0]\n    lst2 = [i for i in lst2 if i%2 == 0]\n    return \"YES\" if len(lst1) == len(lst2) else \"NO\"",
        "num_ids": 72
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if (lst1[i] % 2 == 0) and (lst2[j] % 2 == 0):\n                lst1[i] = lst2[j]\n                lst2[j] = lst1[i]\n                lst1[i] = lst1[i] + lst1[i]\n                lst2[j] = lst2[j] + lst2[j]\n                return \"YES\"\n    return \"NO\"\n",
        "num_ids": 143
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 63
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    # Your code here\n    \n    # Do not change anything below\n    \n    return \"YES\"\n",
        "num_ids": 27
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst1 = lst1[::-1]\n    lst2 = lst2[::-1]\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0 or lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 82
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst1, lst2 = lst1[:], lst2[:]\n    for i in lst1:\n        if i % 2!= 0:\n            lst1.remove(i)\n    for i in lst2:\n        if i % 2!= 0:\n            lst2.remove(i)\n    if len(lst1) == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 112
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            count = count + 1\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            count = count + 1\n    if count == len(lst1) + len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 110
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(0, len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst1 = lst1[::-1]\n    lst2 = lst2[::-1]\n    for i in xrange(len(lst1)):\n        if lst1[i] % 2!= 0 or lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 83
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for c in test.split():\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    return d\n    \ndef is_valid_word(word, hand, word_list):\n    \"\"\"\n    Returns True if word is in the word_list and is entirely\n    composed of letters in the hand. Otherwise, returns False.\n    Does not mutate hand or word_list.\n    \n    word: string\n    hand: dictionary (string -> int)\n    word_list: list of lowercase strings\n    returns: boolean\n    \"\"\"\n    count = histogram(word)\n    for key in count:\n        if count[key] > hand.get(key, 0):\n            return False\n    return word in word_list\n",
        "num_ids": 187
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    dic = {}\n    for i in test:\n        dic[i] = dic.get(i,0)+1\n    return dic\n",
        "num_ids": 37
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    hist = {}\n    for c in test:\n        hist[c] = hist.get(c, 0) + 1\n    return hist\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ret = {}\n    for c in test:\n        ret[c] = ret.get(c,0) + 1\n    return ret\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    histo = {}\n    for letter in test:\n        if letter in histo:\n            histo[letter] += 1\n        else:\n            histo[letter] = 1\n    return histo\n",
        "num_ids": 49
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    histogram = {}\n    letters = test.lower().split()\n    for letter in letters:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    dic = {}\n    \n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n    \n",
        "num_ids": 53
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # make hash table\n    hist = {}\n    for letter in test:\n        if letter in hist.keys():\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    # count the most frequent letters\n    res = {key:value for key, value in hist.iteritems() if value == max(hist.values())}\n    return res\n",
        "num_ids": 88
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    histogram = {}\n    for letter in test:\n        histogram[letter] = histogram.get(letter, 0) + 1\n    return histogram\n",
        "num_ids": 38
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = list(test)\n    count = {}\n    for i in l:\n        count[i] = count.get(i, 0) + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    return result, result[::-1] == result\n",
        "num_ids": 39
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    r = \"\"\n    for i in range(len(s)):\n        if s[i]!= c:\n            r = r + s[i]\n    return r,r == s[::-1]\n",
        "num_ids": 52
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c:\n            result += s[i]\n    \n    result = result[::-1]\n    return (result,result==s)\n",
        "num_ids": 61
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s=s[::-1]\n    for c in c:\n        while c in s:\n            s=s.replace(c,'',1)\n    return s,s==s[::-1]\n    \n    ",
        "num_ids": 54
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) == 0 or len(s) == 1:\n        return (s,True)\n    for i in c:\n        if i in s:\n            s = s.replace(i,\"\")\n    if s == s[::-1]:\n        return (s,True)\n    return (s,False)\n",
        "num_ids": 78
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in s:\n        if i not in c:\n            result = result + i\n    if result == result[::-1]:\n        return (result,True)\n    else:\n        return (result,False)\n    \ns = input()\nc = input()\nprint (reverse_delete(s,c)",
        "num_ids": 81
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Code here\n    res = s\n    for i in c:\n        res = res.replace(i,'',1)\n    return (res,res==res[::-1])\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in s:\n        if i in c:\n            s = s.replace(i,'')\n    return (s,s == s[::-1])\n    \n",
        "num_ids": 42
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s[::-1],s==s[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [len(i) - sum(int(j)%2 for j in i) for i in lst]\n",
        "num_ids": 29
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    newlst = []\n    for i in lst:\n        num = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                num += 1\n        newlst.append(\"the number of odd elements \" + str(num) + \"n the str4ng \" + str(i) + \" of the \" + str(len(i)) + \"n input.\")\n    return newlst\n",
        "num_ids": 101
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [\"the number of odd elements \"+str(len([n for n in lst[i] if int(n) % 2!= 0])) + \"n the str4ng \"+str(i+1)+\" of the \"+str(len(lst))+\"n input.\" for i in range(len(lst))]\n",
        "num_ids": 77
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(lst.count(i),\n        len(i), lst.count(i), lst.count(i)) for i in lst]",
        "num_ids": 59
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def odd(s):\n        return sum(int(x)%2 for x in s)\n    return [\"the number of odd elements %dn the str%ng %d of the %dnput.\"%(\n            odd(str(x)),x%2,x%2,x) for x in lst]\n",
        "num_ids": 73
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def count_odd(num):\n        counter = 0\n        for c in num:\n            if int(c) % 2!= 0:\n                counter += 1\n        return counter\n",
        "num_ids": 44
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for i in lst:\n        n = 0\n        for j in i:\n            if int(j) % 2 == 1:\n                n += 1\n        result.append(n)\n    return [str(i) + \"n the str\" + str(i) + \"ng \" + str(i) + \" of the \" + str(i) + \"input.\" for i in result]",
        "num_ids": 97
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(lst) == list\n    assert lst!= []\n",
        "num_ids": 19
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def num_of_odds(s):\n        count = 0\n        for i in s:\n            if int(i)%2!=0:\n                count+=1\n        return count\n    return [num_of_odds(l) for l in lst]\n",
        "num_ids": 66
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements \" + str(len([c for c in s if int(c)%2])) + \"n the str\" + str(i) + \" of the \" + str(n) + \"nput.\" for i, n, s in zip(range(1, len(lst)+1), range(1, len(lst)+1), lst)]\n",
        "num_ids": 90
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_sum = nums[0]\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n",
        "num_ids": 63
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    min_sub_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = max(0, current_sum + num)\n        min_sub_sum = min(min_sub_sum, current_sum)\n    return min_sub_sum\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not nums:\n        return 0\n    curr_min = nums[0]\n    curr_sum = nums[0]\n    for i in xrange(1, len(nums)):\n        curr_sum += nums[i]\n        curr_min = min(curr_min, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return curr_min\n",
        "num_ids": 108
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sums = [0] * len(nums)\n    for i in range(len(nums)):\n        if sums[i-1] < 0:\n            sums[i] = nums[i]\n        else:\n            sums[i] = sums[i-1] + nums[i]\n    return min(sums)\n",
        "num_ids": 85
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    min_sum = nums[0]\n",
        "num_ids": 17
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(nums) == 0:\n        return 0\n    res = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        if curr_sum >= 0:\n            curr_sum += nums[i]\n        else:\n            curr_sum = nums[i]\n        res = min(res, curr_sum)\n    return res\n",
        "num_ids": 107
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_len = 0\n    l = len(nums)\n    for i in xrange(l):\n        s = 0\n        for j in xrange(i, l):\n            s += nums[j]\n            max_len = max(max_len, s)\n    return max_len\n",
        "num_ids": 73
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not nums:\n        return 0\n    minSum = nums[0]\n    maxSum = nums[0]\n    for i in xrange(1, len(nums)):\n        if nums[i] >= 0:\n            maxSum = max(nums[i], maxSum + nums[i])\n        else:\n            minSum = min(minSum + nums[i], nums[i])\n    return minSum\n",
        "num_ids": 108
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    min_sub_sum = 0\n    min_sub_sum_ind = 0\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum < min_sub_sum:\n            min_sub_sum = current_sum\n            min_sub_sum_ind = i\n    return min_sub_sum_ind, min_sub_sum\n",
        "num_ids": 119
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # if len(nums) == 0: return -1\n    # minSum = nums[0]\n    # for i in range(1, len(nums)):\n    #     if nums[i] < 0:\n    #         minSum += nums[i]\n    #         nums[i] = 0\n    # return minSum\n    if len(nums) == 0: return -1\n    minSum = float(\"inf\")\n    totalSum = 0\n    for i in range(len(nums)):\n        totalSum += nums[i]\n        if totalSum < minSum:\n            minSum = totalSum\n        if totalSum < 0:\n            totalSum = 0\n    return minSum\n",
        "num_ids": 172
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if grid == []:\n        return 0\n    x_length, y_length = len(grid[0]), len(grid)\n    total_buckets = sum(sum(row) for row in grid)\n    \n    # initialize buckets for each well\n    bucket_map = {x: {y: [] for y in range(y_length)} for x in range(x_length)}\n    for x in range(x_length):\n        for y in range(y_length):\n            if grid[y][x] == 1:\n                bucket_map[x][y] = [capacity]\n            else:\n                bucket_map[x][y] = []\n    \n    # add water to buckets\n    for x in range(x_length):\n        for y in range(y_length):\n            if grid[y][x] == 1:\n                for bucket in bucket_map[x][y]:\n                    bucket_map[x][y].append(bucket - 1)\n    \n    # count buckets\n    count = 0\n    for x in bucket_map:\n        for y in bucket_map[x]:\n            if len(bucket_map[x][y]) > 0:\n                count += 1\n    \n    return count\n",
        "num_ids": 292
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def get_row_buckets(grid, bucket_capacity):\n        res = []\n        for row in grid:\n            row_buckets = [0 for i in range(len(row))]\n            for i in range(len(row)):\n                if row[i] == 1:\n                    row_buckets[i] = bucket_capacity\n            res.append(row_buckets)\n        return res\n",
        "num_ids": 98
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # row count -> number of rows\n    row_count = len(grid)\n    # col count -> number of cols\n    col_count = len(grid[0])\n    # result -> maximum amount of water that can be extracted\n    result = 0\n    # store the bucket capacity per row\n    row_buckets = [0] * row_count\n    # iterate through rows\n    for row_index in range(row_count):\n        # iterate through cols\n        for col_index in range(col_count):\n            # if it's a well\n            if grid[row_index][col_index] == 1:\n                # if capacity of row bucket is less than 1\n                if row_buckets[row_index] < capacity:\n                    # add to result\n                    result += row_buckets[row_index]\n                    # add a row bucket of capacity 1\n                    row_buckets[row_index] += 1\n                    # decrease the capacity of the bucket\n                    row_buckets[row_index] = min(capacity, row_buckets[row_index])\n                # if capacity of row bucket is equal to or greater than 1\n                else:\n                    # add a row bucket of capacity 1\n                    row_buckets[row_index] += 1\n    # return result\n    return result\n",
        "num_ids": 302
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    grid = [[int(x) for x in row] for row in grid]\n    rows = len(grid)\n    cols = len(grid[0])\n    bucket_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] > 0:\n                bucket_count += 1\n    capacity = int(capacity)\n    water = capacity - 1\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] > 0:\n                # each well is a bucket, the water that is extracted from it is a bucket\n                water -= grid[i][j]\n                if water < 0:\n                    return -1\n    return bucket_count\n",
        "num_ids": 179
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    rows, cols = len(grid), len(grid[0])\n    buckets = [[0 for j in range(cols)] for i in range(rows)]\n",
        "num_ids": 42
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not grid:\n        return 0\n",
        "num_ids": 11
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not grid or not grid[0]:\n        return 0\n    m, n = len(grid), len(grid[0])\n    # use grid to record whether a row's well is empty, 1 means not empty\n    row_empty_col = [[0 for _ in range(n)] for _ in range(m)]\n    # use grid to record whether a col's well is empty, 1 means not empty\n    col_empty_row = [[0 for _ in range(n)] for _ in range(m)]\n    # fill grid with 0\n    for i in range(m):\n        for j in range(n):\n            grid[i][j] = 0\n    # scan grid to record the emptiest row and col\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]:\n                row_empty_col[i][j] = 1\n    for j in range(n):\n        for i in range(m):\n            if grid[i][j]:\n                col_empty_row[j][i] = 1\n    # use grid to record the number of ways of emptying a row and col\n    row_empty_col_num = [[0 for _ in range(capacity + 1)] for _ in range(m)]\n    col_empty_row_num = [[0 for _ in range(capacity + 1)] for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]:\n                row_empty_col_num[i][grid[i][j]] = 1\n    for j in range(n):\n        for i in range(m):\n            if grid[i][j]:\n                col_empty_row_num[j][grid[i][j]] = 1\n    # use the row_empty_col_num to record the ways to empty a row\n    for i in range(m):\n        for j in range(capacity, -1, -1):\n            row_empty_col_num[i][j] += row_empty_col_num[i][j + 1]\n    # use the col_empty_row_num to record the ways to empty a col\n    for j in range(n):\n        for i in range(capacity, -1, -1):\n            col_empty_row_num[j][i] += col_empty_row_num[j][i + 1]\n    # use the row_empty_col_num and col_empty_row_num to record the ways to empty a row and col\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j]:\n                row_empty_col_num[i][grid[i][j]] -= 1\n                col_empty_row_num[j][grid[i][j]] -= 1\n    return (row_empty_col_num[0][0] + col_empty_row_num[0][0])\n    \n",
        "num_ids": 690
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    row_count, col_count = len(grid), len(grid[0])\n    grid = [sum(row) for row in grid]\n    grid_sum = sum(grid)\n    if grid_sum == 0:\n        return 0\n    else:\n        return int(math.ceil(capacity / grid_sum))",
        "num_ids": 77
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n    row_len = len(grid)\n    col_len = len(grid[0])\n    # calculate the number of wells\n    well_num = 0\n    for i in range(row_len):\n        for j in range(col_len):\n            if grid[i][j] == 1:\n                well_num += 1\n",
        "num_ids": 83
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    grid = grid.copy()\n    # Fill all the wells with water and fill the wells\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                capacity -= 1\n                grid[i][j] = 0\n                if capacity < 0:\n                    return -1\n            else:\n                grid[i][j] = -1\n    # Keep track of the wells to be filled.\n    wells_to_fill = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                wells_to_fill.append((i,j))\n    # Now fill all the wells with capacity\n    # Keep track of the buckets to fill.\n    buckets_to_fill = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == -1:\n                buckets_to_fill.append((i,j))\n    # Now we need to fill them with the same capacity.\n    buckets_to_fill.sort()\n    return buckets_to_fill\n",
        "num_ids": 289
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Method 1\n    # return sorted(arr, key = lambda a: bin(a).count('1'))\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def sort_array(arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sort_array(arr)\n",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # get a list of all the number of ones in each number\n    ones = [sum(bin(x)[2:].count('1') for x in arr) for x in arr]\n    # sort the list in ascending order\n    return sorted(arr, key=lambda x: (ones.index(x), x))\n",
        "num_ids": 74
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def count_ones(n):\n        if n == 0:\n            return 0\n        if n % 2 == 1:\n            return 1 + count_ones(n // 2)\n        else:\n            return 0 + count_ones(n // 2)\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "num_ids": 81
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sort_order = {\n        'count': lambda elem: bin(elem).count('1'),\n        'decimal': lambda elem: elem\n    }\n    return sorted(arr, key=sort_order['decimal'])\n",
        "num_ids": 58
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x))\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [int(''.join(['1' if c=='1' else '0' for c in str(bin(n))[2:]]), 2) for n in arr]\n",
        "num_ids": 44
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def sort_func(a):\n        return bin(a).count('1'), a\n    return sorted(arr, key=sort_func)\n",
        "num_ids": 35
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def count_ones(x):\n        return bin(x).count(\"1\")\n",
        "num_ids": 21
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return re.findall(r'\\b[a-z]+\\b', s)\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not s:\n        return []\n    s = s.split()\n    l = []\n    for word in s:\n        if len(word) <= n and sum([1 for c in word if c not in \"aeiouAEIOU\"]) == n:\n            l.append(word)\n    return l\n",
        "num_ids": 76
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from re import split\n    words = split(\"\\s+\", s)\n    return [word for word in words if len(re.findall(\"[^aeiou]\", word)) == n]\n",
        "num_ids": 48
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return re.findall(r\"[a-z]+\", s)\n",
        "num_ids": 18
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return filter(lambda x: x.count('a') + x.count('e') + x.count('i') + x.count('o') + x.count('u') == n, s.split())\n",
        "num_ids": 50
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your Code Here\n    if len(s) == 0:\n        return []\n    s = s.lower()\n    l = s.split()\n    l2 = []\n    for i in l:\n        a = 0\n        for j in i:\n            if j not in \"aeiou\":\n                a += 1\n        if a <= n:\n            l2.append(i)\n    return l2",
        "num_ids": 98
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string_list = s.split()\n    result = []\n    for word in string_list:\n        if word!= \"\":\n            if len(word) >= n:\n                if word[0] not in \"aeiou\":\n                    if word[n-1] in \"aeiou\":\n                        result.append(word)\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    i = 0\n    while i < len(s):\n        j = i\n        while j < len(s) and s[j]!='':\n            j += 1\n        if j-i == n:\n            result.append(s[i:j])\n        i = j + 1\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [word for word in re.split('[^a-zA-Z]', s) if len(word) == n]\n",
        "num_ids": 33
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = word\n    vowels = \"AEIOU\"\n    l = len(s)\n    r = 0\n    for i in range(l):\n        if s[i] in vowels:\n            r = i\n            break\n    \n    for i in range(r,l):\n        if s[i] in vowels:\n            return s[i]\n    return \"\"\n",
        "num_ids": 93
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    vowels = [i for i in word if i in 'aeiouy']\n    if vowels:\n        return min([i for i in vowels if i > word[-1]], key=lambda x: abs(ord(x) - ord(word[-1])))\n    return ''\n",
        "num_ids": 74
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    if word[0] in vowels:\n        return word[0]\n    else:\n        for i in range(len(word) - 1, 1, -1):\n            if word[i] in vowels:\n                return word[i]\n        return \"\"\n",
        "num_ids": 85
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    last_vowel = word[-1]\n    if last_vowel in \"AEIOU\":\n        return word[-1]\n    vowels = \"AEIOU\"\n    index = 0\n    while index < len(word) and word[-1 - index] not in vowels:\n        index += 1\n    if index == len(word):\n        return \"\"\n    return word[-1 - index]\n",
        "num_ids": 102
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = {\n        'a':0,\n        'e':1,\n        'i':2,\n        'o':3,\n        'u':4\n    }\n    vowel_count = 0\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_count += 1\n        else:\n            break\n    return word[vowel_count]\n",
        "num_ids": 111
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not word:\n        return \"\"\n    if len(word) == 1:\n        return word[0]\n    else:\n        for i in range(len(word) - 1, 0, -1):\n            if word[i] in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                return word[i]\n        return \"\"\n",
        "num_ids": 86
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if not word:\n        return \"\"\n",
        "num_ids": 13
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(word) == 0:\n        return \"\"\n    # Find the first vowel that is found, and return its position\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiou\":\n            return word[i]\n    return \"\"",
        "num_ids": 72
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not word:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = 'aeiou'\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return ''\n",
        "num_ids": 53
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == '(':\n            stack.append('(')\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 66
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # if not lst or len(lst)!= 2:\n    #     return 'No'\n",
        "num_ids": 25
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (lst[0][len(lst[0])-1] == '(' and lst[1][0] == ')')\n",
        "num_ids": 35
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst[0])!= len(lst[1]):\n        return 'No'\n    \n    pair = 0\n    for i in lst[0]:\n        if i == '(':\n            pair += 1\n        elif i == ')':\n            pair -= 1\n        if pair < 0:\n            return 'No'\n    \n    if pair > 0:\n        return 'No'\n",
        "num_ids": 98
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def match(lst, stack=[]):\n        if len(lst) == 0:\n            return True\n        elif len(stack) > 0:\n            return False\n        elif lst[0] == ')':\n            return False\n        else:\n            stack.append(lst[0])\n            return match(lst[1:], stack)\n",
        "num_ids": 88
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = len(lst[0])\n    r = len(lst[1])\n    stack = []\n",
        "num_ids": 28
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # return 'Yes' if all chars are balanced\n    if len(lst) % 2!= 0:\n        return 'No'\n",
        "num_ids": 33
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def _dfs(i, j, match, total):\n        if i >= len(lst) or j >= len(lst):\n            return\n",
        "num_ids": 37
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_balanced(s):\n        l = 0\n        for c in s:\n            if c == '(':\n                l += 1\n            else:\n                l -= 1\n            if l < 0:\n                return False\n        return l == 0\n    return 'Yes' if is_balanced(lst[0]) and is_balanced(lst[1]) else 'No'\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def build_balanced_parens(lst):\n        '''\n        You are given a list of parentheses such as '(', ')', '()', '((',\n        '()', ')))', '((()'. A parentheses is balanced if it's an open\n        parentheses followed by the matching closed parentheses.\n",
        "num_ids": 72
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_heap = []\n    res = []\n    for num in arr:\n        heappush(max_heap, num)\n        if len(max_heap) > k:\n            heappop(max_heap)\n        if len(max_heap) == k:\n            res.append(heappop(max_heap))\n    return res[::-1]\n",
        "num_ids": 95
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(arr)[-k:]\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n    for num in arr:\n        if not stack or num > stack[-1]:\n            stack.append(num)\n        elif stack and num == stack[-1]:\n            continue\n        else:\n            stack.append(num)\n            if len(stack) > k:\n                stack.pop()\n",
        "num_ids": 78
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if k == 0:\n        return []\n    elif k >= len(arr):\n        return sorted(arr)\n    else:\n        max_index = -1\n        max_val = -float('inf')\n        for i in xrange(len(arr)):\n            if arr[i] > max_val:\n                max_index = i\n                max_val = arr[i]\n        res = [max_val] * k\n        for i in xrange(k):\n            res[i] = arr[max_index]\n            arr.pop(max_index)\n            max_index = -1\n            max_val = -float('inf')\n            for j in xrange(len(arr)):\n                if arr[j] > max_val:\n                    max_index = j\n                    max_val = arr[j]\n        return res\n",
        "num_ids": 203
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if k == 0:\n        return []\n    return arr[-k:] + arr[:-k]\n",
        "num_ids": 26
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ans = []\n    for i in xrange(k):\n        ans.append(max(arr))\n        arr.remove(max(arr))\n    return ans\n",
        "num_ids": 40
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr.sort(reverse=True)\n    return arr[0:k]\n",
        "num_ids": 20
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_arr = []\n    for _ in range(k):\n        max_arr.append(max(arr))\n        arr.remove(max_arr[-1])\n    return max_arr\n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(0, len(lst)):\n        if lst[i] % 2!= 0:\n            total += lst[i]\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(lst[::2])\n",
        "num_ids": 12
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                total += lst[i]\n    return total",
        "num_ids": 53
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2 == 1 and i % 2 == 0])\n",
        "num_ids": 38
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(lst[0::2])\n",
        "num_ids": 13
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0])\n",
        "num_ids": 39
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if lst[i]%2==1 and i%2==0])\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))",
        "num_ids": 84
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0])\n",
        "num_ids": 32
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1])\n",
        "num_ids": 31
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2])\n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([30, 13, 24, 321]))\n",
        "num_ids": 85
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([num for num in arr[:k] if len(str(num)) <= 2])\n",
        "num_ids": 25
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    res = 0\n    arr.sort(reverse=True)\n    for i in range(k):\n        res += arr[i]\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(arr)\n    counter = 0\n    for i in range(k):\n        if arr[i] < 10:\n            counter += arr[i]\n        else:\n            counter += arr[i] % 10\n    return counter\n",
        "num_ids": 59
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    n = len(arr)\n    for i in range(n):\n        if i < k:\n            continue\n        else:\n            if arr[i] % 100 < 10:\n                arr[i] += 1\n            else:\n                arr[i] += 100\n    return sum(arr[:k])\n",
        "num_ids": 76
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for e in arr[:k]:\n        if len(str(e)) <= 2:\n            count += e\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([i for i in arr[:k] if i < 1000])\n",
        "num_ids": 20
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    mapper = {}\n    for i in range(k):\n        v = arr[i]\n        if v not in mapper:\n            mapper[v] = 1\n        else:\n            mapper[v] += 1\n",
        "num_ids": 55
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if k > len(arr):\n        return sum(arr)\n",
        "num_ids": 17
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # base case\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return [n]\n    if n % 2 == 1:\n        return get_odd_collatz(3 * n + 1) + [n]\n    else:\n        return get_odd_collatz(n / 2) + [n]\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return [1]\n",
        "num_ids": 14
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    odd_collatz = []\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_collatz.append(i)\n    return sorted(odd_collatz)\n",
        "num_ids": 53
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    collatz_list = []\n    while n > 1:\n        if n % 2 == 1:\n            collatz_list.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    return collatz_list\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l = []\n    while n!= 1:\n        if n % 2 == 1:\n            l.append(n)\n        n = (n + 1) / 2 if n % 2 == 0 else (n * 3) + 1\n    return sorted(l)\n",
        "num_ids": 63
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    odd_collatz = []\n",
        "num_ids": 9
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    while n!= 1:\n        if n % 2 == 1:\n            res.append(n)\n        n = (n * 3) + 1\n    res.append(1)\n    res.sort()\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    collatz = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            collatz.append(n)\n        n = 3 * n + 1\n    return sorted(collatz)",
        "num_ids": 51
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if n == 1:\n        return [1]\n    else:\n        if n % 2 == 0:\n            return get_odd_collatz(n/2) + [n]\n        else:\n            return get_odd_collatz(3*n + 1) + [n]\n",
        "num_ids": 71
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    valid_days = []\n    valid_months = ['01', '03', '05', '07', '08', '10', '12']\n    valid_years = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31']\n    valid_dates = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    month_index = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    # First check that the number of days is not less than 1 or higher than 31 days\n    if len(valid_days) > 31:\n        return False\n    elif len(valid_days) < 1:\n        return False\n    # Second check that the number of days is not less than 1 or higher than 30 days\n    elif month == 2 and len(valid_days) > 29:\n        return False\n    # Third check that the number of days is not less than 1 or higher than 29 days\n    elif len(valid_days) < 1:\n        return False\n    # Fourth check that the month should not be less than 1 or higher than 12\n    elif len(valid_months) < 1:\n        return False\n    # Fifth check that the date should be in the format: mm-dd-yyyy\n    elif len(date) > 10 or len(date) < 6:\n        return False\n    # Sixth check that the date is in the format: mm-dd-yyyy\n    elif len(valid_dates) > 10 or len(valid_dates) < 6:\n        return False\n    # Seventh check that the date is in the format: mm/dd/yyyy\n    elif len(valid_years) < 1:\n        return False\n    elif valid_days[0] < 1:\n        return False\n    elif valid_days[0] > 31:\n        return False\n    # Eighth check that the date is in the format: mm/dd/yyyy\n    elif valid_months[month - 1] < 1:\n        return False\n    elif valid_months[month - 1] > 12:\n        return False\n    elif valid_years[year - 1] < 1:\n        return False\n    elif valid_years[year - 1] > 31:\n        return False\n    else:\n        return True\n",
        "num_ids": 679
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return Fals",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return True\n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if date is None:\n        return False\n    if len(date) == 0:\n        return False\n    if len(date)!= 10:\n        return False\n    months = ['january', 'february','march', 'april','may', 'june', 'july', 'august','september', 'october', 'november', 'december']\n    numbers = ['0','1','2','3','4','5','6','7','8','9']\n    d, m, y = date.split('-')\n    if int(d) < 1 or int(d) > 31:\n        return False\n    if m not in months and int(m) > 12:\n        return False\n    if int(m) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(d) < 1 or int(d) > 31:\n            return False\n    elif int(m) in [4, 6, 9, 11]:\n        if int(d) < 1 or int(d) > 30:\n            return False\n    elif m == '2':\n        if int(d) < 1 or int(d) > 29:\n            return False\n    return True\n",
        "num_ids": 287
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    days_dict = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"]\n    input_date = date.split(\"-\")\n    if len(input_date)!= 3:\n        return False\n    if len(input_date[0])!= 2 or len(input_date[1])!= 2 or len(input_date[2])!= 4:\n        return False\n    for month in months:\n        if input_date[0] == month:\n            if int(input_date[1]) <= 0 or int(input_date[1]) > days_dict[int(input_date[0])]:\n                return False\n    if int(input_date[2]) <= 0:\n        return False\n    return True\n",
        "num_ids": 274
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    date_list = date.split('-')\n    valid_date = True\n    if len(date_list)!= 3:\n        valid_date = False\n    elif len(date_list[0])!= 2 or len(date_list[1])!= 2 or len(date_list[2])!= 4:\n        valid_date = False\n    elif int(date_list[1]) > 31 or int(date_list[1]) < 1:\n        valid_date = False\n    elif int(date_list[0]) > 12 or int(date_list[0]) < 1:\n        valid_date = False\n    else:\n        if int(date_list[2]) > 2020:\n            valid_date = False\n        elif int(date_list[0]) == 1 or int(date_list[0]) == 3 or int(date_list[0]) == 5 or int(date_list[0]) == 7 or int(date_list[0]) == 8 or int(date_list[0]) == 10 or int(date_list[0]) == 12:\n            if int(date_list[1]) > 31:\n                valid_date = False\n        elif int(date_list[0]) == 4 or int(date_list[0]) == 6 or int(date_list[0]) == 9 or int(date_list[0]) == 11:\n            if int(date_list[1]) > 30:\n                valid_date = False\n        elif int(date_list[0]) == 2:\n            if int(date_list[1]) > 29:\n                valid_date = False\n        else:\n            valid_date = False\n    return valid_date\n",
        "num_ids": 401
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    month_days = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    try:\n        day, month, year = [int(i) for i in date.split('-')]\n    except:\n        return False\n",
        "num_ids": 117
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return not not date\n",
        "num_ids": 7
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    months = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]\n    days = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n",
        "num_ids": 138
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_list = txt.split()\n    return new_list\n",
        "num_ids": 18
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Check if no whitespaces\n    if \" \" not in txt:\n        # Check if no commas\n        if \",\" not in txt:\n            return len([i for i in txt if i.islower() and ord(i) % 2!= 0])\n        else:\n            # Split on commas\n            return [i for i in txt.split(\",\") if i.islower() and ord(i) % 2!= 0]\n    else:\n        # Split on whitespaces\n        return txt.split(\" \")\n",
        "num_ids": 129
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) < 2:\n        return True\n    first = lst[0]\n    last = lst[-1]\n    if first > last:\n        return False\n    for x in lst[1:]:\n        if x < first:\n            return False\n        if x > last:\n            last = x\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all([x >= y for x,y in zip(lst[:-1], lst[1:])])\n    \n    # or\n    return lst == sorted(lst)\n    \n    # or\n    return all([x >= y for x,y in zip(lst, lst[1:])])\n    \n    # or\n    return lst == sorted(lst)\n",
        "num_ids": 94
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 1:\n        return True\n    if len(lst) == 2:\n        return lst[0] <= lst[1]\n    if lst[0] <= lst[1]:\n        for i in range(2, len(lst)):\n            if lst[i] <= lst[i-1]:\n                return False\n            return True\n    return False\n",
        "num_ids": 98
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # If only 1 element in list, it's sorted\n    if len(lst) == 1:\n        return True\n    # Check each element of list, and see if it's greater than the one before it\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n",
        "num_ids": 88
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) <= 1:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) < 2: return True\n    if lst[0] < lst[1]:\n        return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if interval1[0] > interval1[1]:\n        interval1, interval2 = interval2, interval1\n    if interval2[0] > interval2[1]:\n        return \"NO\"\n",
        "num_ids": 49
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 39
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if (interval1[1] <= interval2[0]) or (interval2[1] <= interval1[0]):\n        return \"NO\"\n    if (interval1[1] >= interval2[0]) and (interval1[1] <= interval2[1]):\n        return \"YES\"\n",
        "num_ids": 75
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (interval1[1] <= interval2[0] or interval2[1] <= interval1[0]):\n        return \"NO\"\n    return \"YES\"\n    pass\n",
        "num_ids": 45
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # If the two intervals don't intersect, return \"NO\".\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    # If the two intervals overlap, the intersection is not a prime number.\n    elif interval1[1] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"NO\"\n    # If the two intervals overlap, the intersection is a prime number.\n    else:\n        return \"YES\"",
        "num_ids": 123
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
        "num_ids": 69
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 'YES' if interval1[0] <= interval1[1] and interval2[0] <= interval2[1] else 'NO'\n",
        "num_ids": 35
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 'YES' if is_prime(interval1[1] - interval1[0]) and is_prime(interval2[1] - interval2[0]) else 'NO'\n",
        "num_ids": 45
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n",
        "num_ids": 31
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for i in arr:\n        if i < 0:\n            result *= -1\n        elif i > 0:\n            result *= 1\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    m = list(map(lambda x: abs(x), arr))\n    p = list(map(lambda x: x * prod(signs(x)), m))\n    return sum(p) if p else None\n",
        "num_ids": 51
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    magnitude = 0\n    for elem in arr:\n        magnitude += abs(elem)\n    product_of_signs = 1\n    for elem in arr:\n        product_of_signs *= (elem / abs(elem))\n    return magnitude * product_of_signs\n",
        "num_ids": 89
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n    return sum(abs(i) for i in arr) * prod([sign(i) for i in arr])",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import numpy\n    arr = numpy.array(arr)\n    res = 1\n    for i in arr:\n        if i == 0:\n            res *= 0\n        elif i > 0:\n            res *= 1\n        else:\n            res *= -1\n    return res\n",
        "num_ids": 71
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    prod = 1\n    for i in arr:\n        if i == 0:\n            prod = prod * 1\n        elif i < 0:\n            prod = prod * -1\n        else:\n            prod = prod * 1\n    return prod\n",
        "num_ids": 62
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([abs(num) * sign for sign in [1, -1, 0] for num in arr])\n",
        "num_ids": 28
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import operator\n    return reduce(operator.mul, map(abs, arr), 1) if arr else None\n",
        "num_ids": 27
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n    m = 1\n    for i in arr:\n        if i!= 0:\n            m *= i\n    m = m if m > 0 else -m\n    return m\n",
        "num_ids": 53
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    product = 1\n    for i in arr:\n        product *= abs(i)\n    if product == 0:\n        return None\n    return sum(arr) * product\n",
        "num_ids": 42
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    N = len(grid)\n    if k == 0:\n        return []\n    if k == 1:\n        return grid[0]\n    if k == 2:\n        return grid[0] + grid[1]\n    \n    def neighbors(x, y, N):\n        for dx, dy in zip((0, 1, 0, -1), (-1, 0, 1, 0)):\n            if 0 <= x + dx < N and 0 <= y + dy < N:\n                yield (x + dx, y + dy)\n    \n    def min_path_value(grid, i, j, k, visited):\n        if k == 1:\n            return grid[i][j]\n        if (i, j, k) in visited:\n            return visited[(i, j, k)]\n        if i == j == 0:\n            visited[(i, j, k)] = min_path_value(grid, i, j, k - 1, visited)\n            return visited[(i, j, k)]\n        visited[(i, j, k)] = min(min_path_value(grid, i, j, k - 1, visited),\n                                 min_path_value(grid, i - 1, j, k - 1, visited) + grid[i - 1][j],\n                                 min_path_value(grid, i, j - 1, k - 1, visited) + grid[i][j - 1])\n        return visited[(i, j, k)]\n    \n    path_values = []\n    for i in range(N):\n        for j in range(N):\n            path_values.append(min_path_value(grid, i, j, k, {}))\n    return path_values\n",
        "num_ids": 406
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if k == 0:\n        return []\n    if not grid or not grid[0]:\n        return []\n",
        "num_ids": 27
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"\"\"\n    The idea is to create a matrix with the max value in each cell, and\n    update the row and column values at each step until all k values are\n    collected\n    \"\"\"\n    row_len, col_len = len(grid), len(grid[0])\n    if k == 0:\n        return []\n    matrix = [[float('inf')]*col_len for _ in xrange(row_len)]\n    for row in xrange(row_len):\n        for col in xrange(col_len):\n            if row == 0 and col == 0:\n                matrix[row][col] = grid[row][col]\n            elif row == 0:\n                matrix[row][col] = matrix[row][col-1] + grid[row][col]\n            elif col == 0:\n                matrix[row][col] = matrix[row-1][col] + grid[row][col]\n            else:\n                matrix[row][col] = min(matrix[row][col-1], matrix[row-1][col]) + grid[row][col]\n    return [matrix[row][col] for col in xrange(k, -1, -1) for row in xrange(k, -1, -1)]\n",
        "num_ids": 297
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Space: O(n*n)\n    # Time: O(k*n*n)\n    m = len(grid)\n    n = len(grid[0])\n    # values = [[[] for j in range(n)] for i in range(m)]\n    values = [[] for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                values[i].append(grid[0][0])\n                continue\n            if i == 0:\n                values[i].append(grid[i][j - 1] + grid[i][j])\n                continue\n            if j == 0:\n                values[i].append(grid[i - 1][j] + grid[i][j])\n                continue\n            values[i].append(min(grid[i - 1][j], grid[i][j - 1]) + grid[i][j])\n    # for i in range(m):\n    #     for j in range(n):\n    #         values[i][j] = grid[i][j] + values[i - 1][j]\n    #         if j == 0:\n    #             values[i][j] += grid[i][j + 1]\n    #         elif j == n - 1:\n    #             values[i][j] += grid[i][j - 1]\n    #         else:\n    #             values[i][j] += min(grid[i][j - 1], grid[i][j + 1])\n    # return values[m - 1][n - 1]\n    return values[m - 1][n - 1]\n",
        "num_ids": 390
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    costs = [[0 for _ in range(cols)] for _ in range(rows)]\n",
        "num_ids": 40
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not grid or len(grid) == 0 or len(grid[0]) == 0:\n        return None\n",
        "num_ids": 27
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if k == 0: return []\n",
        "num_ids": 10
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    if k == 0:\n        return []\n",
        "num_ids": 35
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \"\"\"\n    # TLE\n    # O(N^3)\n    def num_paths(grid, row, col):\n        if row == len(grid) - 1 and col == len(grid[0]) - 1:\n            return 1\n        if row == len(grid) or col == len(grid[0]):\n            return 0\n        return grid[row][col] * num_paths(grid, row + 1, col) + num_paths(grid, row, col + 1)\n    \"\"\"\n    # O(N^2 * k)\n    def num_paths(grid, row, col, k):\n        if row == len(grid) - 1 and col == len(grid[0]) - 1:\n            return [grid[row][col]] * k\n        if row == len(grid) or col == len(grid[0]):\n            return []\n        return grid[row][col] * num_paths(grid, row + 1, col, k - 1) + num_paths(grid, row, col + 1, k - 1)\n",
        "num_ids": 252
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # \u4e00\u4e2aDP\u89e3\uff0c\u4e0d\u8fc7\u6ca1\u6709\u4ece\u4e00\u4e2a\u683c\u5b50\u51fa\u53d1\u641c\u7d22\uff0c\u53ea\u80fd\u4ece\u5934\u5f00\u59cb\n",
        "num_ids": 56
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = [1, 3]\n    for i in range(1, n):\n        res.append(sum(res[-3:]))\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n        return [1, 1, 1]\n    if n == 3:\n        return [1, 3, 1]\n    return [1, 1, 1, 3] + tri(n - 1)\n    \ndef main():\n    n = int(raw_input().strip())\n    print(tri(n))\n",
        "num_ids": 108
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Calculate the Tribonacci sequence\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq\n",
        "num_ids": 65
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(n, int):\n        raise ValueError('{0} is not a valid input'.format(n))\n    if n < 1:\n        raise ValueError('{0} is not a valid input'.format(n))\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3] + 1)\n    return seq\n    \n    \ndef test_tri():\n    assert tri(2) == [1, 3, 2, 8]\n    assert tri(4) == [1, 3, 2, 8]\n    assert tri(3) == [1, 3, 2, 8]\n    assert tri(10) == [1, 3, 2, 8, 21, 15, 11,  6,  6,  8]\n    assert tri(12) == [1, 3, 2, 8, 21, 15, 11,  6,  6,  8,  25, 21, 18, 15, 11,  6,  6,  8]\n    assert tri(16) == [1, 3, 2, 8, 21, 15, 11,  6,  6,  8,  25, 21, 18, 15, 11,  6,  6,  8,  49, 41, 33, 21, 18, 15, 11,  6,  6,  8]\n    print('All tests passed successfully')\n    \n    \nif __name__ == '__main__':\n    test_tri(",
        "num_ids": 429
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def trib(n):\n        \"\"\"Tribonacci sequence is a Tribonacci number with 3 numbers, so it's defined \n        by 3 numbers, we have to return the list of first n + 1 numbers of the Tribonacci sequence.\n        \"\"\"\n        if n <= 0:\n            return []\n        elif n == 1:\n            return [1]\n        elif n == 2:\n            return [1, 1]\n        else:\n            current = [1, 1, 1]\n            for i in range(3, n + 1):\n                current.append(current[-1] + current[-2] + current[-3])\n            return current\n    return trib(n)\n",
        "num_ids": 162
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ans = [0] * (n + 1)\n    ans[0] = 0\n    ans[1] = 1\n    ans[2] = 1\n    if n > 2:\n        for i in xrange(3, n + 1):\n            ans[i] = ans[i - 1] + ans[i - 2] + ans[i - 3]\n    return ans\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    a = 1\n    b = 3\n    c = a + b\n    tri_list = [a,b,c]\n    for i in range(3,n+1):\n        tri_list.append(tri_list[i-1]+tri_list[i-2]+tri_list[i-3])\n    return tri_list\n",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    tri = [1,3]\n    for i in range(2,n+1):\n        if i % 2:\n            tri.append(tri[i-1] + tri[i-2] + tri[i-3])\n        else:\n            tri.append(tri[i-2] + tri[i-1] + tri[i-3])\n    return tri\n",
        "num_ids": 90
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = [1]\n    if n == 0:\n        return numbers\n    elif n == 1:\n        return numbers + [3]\n    else:\n        for i in range(1, n):\n            if (i % 2 == 0):\n                numbers.append(numbers[i - 1] + numbers[i - 2])\n            else:\n                numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i - 3])\n        return numbers\n",
        "num_ids": 118
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = [1]\n    a, b, c = 1, 3, 1\n    while len(res) < n+1:\n        a, b, c = b, c, a + b + c\n        res.append(a)\n    return res",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    product = 1\n    for i in range(len(str(n))):\n        if int(str(n)[i])%2 == 1:\n            product *= int(str(n)[i])\n    return product\n",
        "num_ids": 53
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = str(n)\n    digits = 1\n    for i in range(0, len(s)):\n        if int(s[i]) % 2 == 1:\n            digits *= int(s[i])\n    return digits\n",
        "num_ids": 59
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n /= 10\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 10:\n        return n\n    else:\n        return (n % 10) * digits(n // 10)\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 1\n    for i in range(len(str(n))):\n        digit = n % 10\n        total *= digit\n        n /= 10\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 10:\n        return n\n    return n % 10 * digits(n // 10)\n",
        "num_ids": 25
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = str(n)\n    product = 1\n    for i in range(0, len(s)):\n        if int(s[i]) % 2 == 1:\n            product *= int(s[i])\n    return product\n",
        "num_ids": 57
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n % 10) * digits(int(n / 10))\n",
        "num_ids": 46
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % 10 * digits(n // 10)\n",
        "num_ids": 41
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    prod = 1\n    while n > 0:\n        prod = prod * n % 10\n        n = n // 10\n    return prod\n",
        "num_ids": 35
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # See https://leetcode.com/problems/brace-expansion/\n    \n    brackets = [stack.pop() for stack in [list()] * len(string)]\n    \n    for char in string:\n        if char == '[' or char == ']':\n            if brackets[-1] == char:\n                brackets.pop()\n            else:\n                brackets.append(char)\n    \n    return not brackets\n",
        "num_ids": 105
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return False\n    if string[0] == '[' and string[-1] == ']':\n        return True\n    stack = [string[0]]\n    for i in xrange(1, len(string)):\n        if string[i] == '[' and not stack or string[i] == ']' and stack[-1] == '[':\n            stack.append(string[i])\n        elif string[i] == ']' and not stack or string[i] == '[' and stack[-1] == '[':\n            stack.pop()\n        else:\n            return False\n    return not stack\n    # This solution is too long and takes too much time to run.\n",
        "num_ids": 165
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: Can be done in one pass with two pointers\n    if not string:\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            popped = stack.pop()\n            if popped!= '[':\n                return False\n    return not stack\n    \nassert is_nested('[[]]') == True\nassert is_nested('[]]]]]]][[[[[]') == False\nassert is_nested('[][]') == False\nassert is_nested('[]') == False\nassert is_nested('[[][]]') == True\nassert is_nested('[[]][[') == True\n",
        "num_ids": 181
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return bool(re.search(r'\\[[^\\[\\]]*\\]', string))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = False\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            if depth == 0:\n                return False\n            else:\n                depth -= 1\n    if depth == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for b in string:\n        if b == '[':\n            stack.append(b)\n        elif stack:\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 49
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # your code goes here\n    stack = []\n    for char in string:\n        if char == '[' or char == ']':\n            stack.append(char)\n        elif char == '[' and stack and stack[-1] == ']':\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 76
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    opening = '([{'\n    closing = ')]}'\n    \n    stack = []\n    \n    for i in string:\n        if i in opening:\n            stack.append(i)\n        elif i in closing:\n            if len(stack) == 0:\n                return False\n            if stack[-1] == opening[closing.index(i)]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "num_ids": 115
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # slice the string at every opening bracket and see if it is closed\n    for open in range(len(string)):\n        if string[open] == '[' and string[open+1]!= ']':\n            # store all the closing brackets in a stack and pop one at a time\n            stack = []\n            for close in range(open, len(string)):\n                if string[close] == ']':\n                    stack.append(close)\n                elif string[close] == '[':\n                    # if there is a closing bracket, it should match the top of the stack\n                    if len(stack) > 0 and string[stack[-1]] == ']':\n                        stack.pop()\n                    else:\n                        return False\n            # if there is a stack and the stack is not empty, there is a nested \n            # subsection of string and we return True\n            if len(stack) > 0:\n                return True\n    return False\n",
        "num_ids": 218
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_nested_aux(string, left, right):\n        if right == len(string):\n            return False\n        elif left >= right:\n            return True\n        elif string[right] == ']':\n            return is_nested_aux(string, left, right+1)\n        elif string[right] == '[':\n            return is_nested_aux(string, left+1, right)\n        else:\n            return is_nested_aux(string, left, right+1) or is_nested_aux(string, left+1, right)\n    return is_nested_aux(string, 0, 0)\n",
        "num_ids": 155
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([int(math.ceil(x))**2 for x in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for item in lst:\n        result += item**2\n    return result\n    \n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in lst:\n        if i >= 0:\n            total += i*i\n        else:\n            total += abs(i)*abs(i)\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(lst)):\n        lst[i] = int(math.ceil(lst[i]))\n    return sum(lst[i] ** 2 for i in range(len(lst)))\n    \n    \ndef almost_equal(num1, num2):\n    \"\"\"You are given two numbers.\n    Return True if the sum of the absolute differences of the\n    numbers is less than or equal to 1e-12, otherwise return False.\n    Examples:\n    almost_equal(1.01, 1.0) is True\n    almost_equal(1.01, 1.01) is True\n    almost_equal(1.01, 1.02) is False\n    \n    \"\"\"\n    return abs(num1 - num2) < 1e-12\n",
        "num_ids": 187
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(map(lambda x: round(x**2), lst))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(num * num for num in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = [int(ceil(i)) for i in lst]\n    return sum(i**2 for i in lst)\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(math.ceil(x**2)) for x in lst])\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your Code Here\n    return sum(i**2 for i in lst)\n",
        "num_ids": 21
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(txt) > 0:\n        if txt[-1].isalpha() and txt[-1] not in \"\":\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in [\" \", \"_\"]\n",
        "num_ids": 26
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_word(word):\n        if word == \"\":\n            return True\n        for letter in word:\n            if letter.isalpha():\n                return True\n        return False\n    if len(txt) == 0:\n        return False\n    if is_word(txt):\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-1].isalpha():\n        return True\n    return False\n",
        "num_ids": 105
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt[-1].isalpha() and txt[-1] not in \"\\\"\\' \\n\"\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    else:\n        return True\n    pass\n",
        "num_ids": 62
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() == True and txt[-1].isalpha() == True:\n        return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    try:\n        last_char = txt[-1]\n        return last_char.isalpha() and not last_char.isnumeric() and not last_char.isspace()\n    except IndexError:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return txt[-1].isalpha()",
        "num_ids": 12
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isupper() and not last_char.islower():\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Code here\n    txt = txt[0:-1]\n    if txt[-1] in string.ascii_letters:\n        return True\n    else:\n        return False\n",
        "num_ids": 47
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return -1 if len(arr) < 2 else find_greater(arr, arr[0], -1)\n",
        "num_ids": 28
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr.sort()\n    index = -1\n    for i in range(0, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            index = i\n    if index == -1:\n        return -1\n    return index + 1\n",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    arr_max = arr[-1]\n    for i in xrange(len(arr) - 2, -1, -1):\n        if arr[i] >= arr_max:\n            arr_max = arr[i]\n        else:\n            return i\n    return -1\n",
        "num_ids": 68
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(arr)\n    result = [0] * n\n    for i in xrange(n):\n        if arr[i] == arr[i - 1]:\n            return -1\n        result[i] = arr[i] - arr[i - 1] - 1\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return -1\n",
        "num_ids": 12
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = len(arr)\n    # for i in range(l-1):\n    #     if arr[i] > arr[i+1]:\n    #         return i\n    # return l-1\n    max_idx = -1\n    for i in range(l-1):\n        if arr[i] > arr[i+1]:\n            max_idx = i\n    return max_idx\n",
        "num_ids": 99
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def find_prev(i):\n        if i <= 0:\n            return i\n        elif arr[i-1] <= arr[i]:\n            return i-1\n        else:\n            return find_prev(i-1)\n    \n    if len(arr) <= 1:\n        return -1\n",
        "num_ids": 74
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # If there is no element greater than the one before it, then the last\n    # element is the largest\n    if not arr:\n        return -1\n",
        "num_ids": 37
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    negative_integers = []\n    positive_integers = []\n    for integer in lst:\n        if integer < 0:\n            negative_integers.append(integer)\n        else:\n            positive_integers.append(integer)\n    negative_integers = negative_integers or None\n    positive_integers = positive_integers or None\n    return negative_integers, positive_integers\n",
        "num_ids": 96
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a, b = None, None\n    for num in lst:\n        if num < 0:\n            if a == None:\n                a = num\n            else:\n                a = max(a, num)\n        elif num > 0:\n            if b == None:\n                b = num\n            else:\n                b = min(b, num)\n    return (a, b)\n",
        "num_ids": 93
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = (None, None)\n    for num in lst:\n        if num < 0:\n            if result[0] is None or result[0] < num:\n                result = (num, result[1])\n        if num >= 0:\n            if result[1] is None or result[1] > num:\n                result = (result[0], num)\n    return result\n",
        "num_ids": 92
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return None, None\n    elif lst[0] > lst[-1]:\n        return lst[0], lst[-1]\n    else:\n        return lst[-1], lst[0]\n",
        "num_ids": 66
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n",
        "num_ids": 20
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    negatives = filter(lambda n: n < 0, lst)\n    positives = filter(lambda n: n > 0, lst)\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n",
        "num_ids": 59
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst_pos = [i for i in lst if i > 0]\n    lst_neg = [i for i in lst if i < 0]\n    if lst_neg and lst_pos:\n        return (min(lst_neg), max(lst_pos))\n    elif lst_pos:\n        return (max(lst_pos), None)\n    elif lst_neg:\n        return (None, min(lst_neg))\n    else:\n        return (None, None)",
        "num_ids": 125
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    negs = []\n    poss = []\n",
        "num_ids": 13
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    negative = [i for i in lst if i < 0]\n    positive = [i for i in lst if i > 0]\n    if not negative and not positive:\n        return None, None\n    if not negative:\n        return max(positive), min(positive)\n    if not positive:\n        return max(negative), min(negative)\n    return max(negative), min(positive)\n",
        "num_ids": 93
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    neg_ints = []\n    pos_ints = []\n    for i in lst:\n        if i < 0:\n            neg_ints.append(i)\n        elif i > 0:\n            pos_ints.append(i)\n    if len(neg_ints) == 0:\n        return (None, None)\n    elif len(pos_ints) == 0:\n        return (None, None)\n    else:\n        return (max(neg_ints), min(pos_ints))\n",
        "num_ids": 119
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a < b:\n        return b\n    elif a > b:\n        return a\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if isinstance(a, float):\n        a = int(a)\n    if isinstance(b, float):\n        b = int(b)\n    if isinstance(a, str):\n        if \".\" in a:\n            a = float(a)\n        else:\n            a = int(a)\n    if isinstance(b, str):\n        if \".\" in b:\n            b = float(b)\n        else:\n            b = int(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 144
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        if type(a) == str:\n            a = float(a.replace(',', '.'))\n        return a if a > b else b\n    else:\n        return None\n",
        "num_ids": 56
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        return a if a > b else b\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 81
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == b:\n        return None\n    elif type(a) == str:\n        if a.replace(',', '').isdigit():\n            return int(a)\n        else:\n            return float(a)\n    elif type(a) == int or type(a) == float:\n        return a\n    else:\n        return float(a)\n    \n",
        "num_ids": 91
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return max(a, b)\n",
        "num_ids": 10
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if isinstance(a, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    return b\n",
        "num_ids": 88
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your Code Here\n",
        "num_ids": 7
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n%2!= 0:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # here n = 12, so we want to check for 4 * even numbers in range(2, n/2)\n    for i in range(2, n/2):\n        if not is_divisible_by_4(i) and is_divisible_by_4(n-i):\n            return True\n    return False",
        "num_ids": 77
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_of_evens = 0\n    for i in range(1, n):\n        if i % 2 == 0 and n-i in range(1, n):\n            sum_of_evens += i\n    return n == sum_of_evens\n",
        "num_ids": 62
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n%2!= 0:\n        return False\n    for i in xrange(4, n/2+1, 2):\n        if n - i not in xrange(0, n/2+1, 2):\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(range(n // 2, 0, -2)) == n",
        "num_ids": 18
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if (n % 2)!= 0:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 4:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(i for i in range(1,n) if i % 2 == 0 and n - i in range(2, n, 2)) == 0\n",
        "num_ids": 37
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    i = 0\n    while n >= i*2:\n        if n - i*2 <= i and n - i*2 - i*2 == i:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # 1\n    if n == 1:\n        return 1\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    factorial = 1\n",
        "num_ids": 7
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return factorial(n) * special_factorial(n - 1) * special_factorial(n - 2) * \\\n        special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n - 5)\n",
        "num_ids": 62
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)",
        "num_ids": 25
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    text = text.replace(' ', '_')\n    if len(text) > 0 and text[0] == '_' and text[1]!= '_':\n        text = text.replace('__', '-')\n    if len(text) > 0 and text[-1] == '_' and text[-2]!= '_':\n        text = text.replace('_', '')\n    return text\n",
        "num_ids": 100
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    text = text.strip()\n    text = re.sub(' ','_',text)\n    if len(text) >= 2:\n        text = re.sub('\\s+','',text)\n    return text\n    \ndef make_lowercase(text):\n    \"\"\"\n    Given a string text, convert all upper-case letters to lower-case \n    \n    make_lowercase(\"Example\") == \"example\"\n    make_lowercase(\"Example 1\") == \"example_1\"\n    make_lowercase(\" Example 2\") == \"example_2\"\n    make_lowercase(\" Example   3\") == \"example-3\"\n    \"\"\"\n    \n    return text.lower()\n    \ndef set_extension(path,ext):\n    \"\"\"\n    Given a path and extension, set the extension to the path,\n    so that if a file does not have an extension, then the \n    extension is set to the default extension.\n    \n    set_extension(\"Example\",None) == \"Example\"\n    set_extension(\"Example.pdf\",None) == \"Example.pdf\"\n    set_extension(\"Example.pdf\",'.pdf') == \"Example.pdf\"\n    set_extension(\"Example\",'.pdf') == \"Example.pdf\"\n    set_extension(\"Example.pdf\",'.pdf') == \"Example.pdf\"\n    set_extension(\"Example.pdf\",'.jpeg') == \"Example.pdf.jpeg\"\n    set_extension(\"Example.pdf\",'.pdf.jpeg') == \"Example.pdf.jpeg\"\n    set_extension(\"Example.pdf.jpeg\",'.pdf.jpeg') == \"Example.pdf.jpeg\"\n    \"\"\"\n    \n    if ext is None:\n        return path\n    \n    if ext[0]!= '.':\n        ext = '.' + ext\n    \n    if path.rfind(ext) == -1:\n        path = path + ext\n    \n    return path\n    \ndef walk(path,patterns=['*.*'],verbose=True,ignore_patterns=[]):\n    \"\"\"\n    Recursively walk a directory tree, finding files with a certain \n    pattern.  Optionally, ignore a list of file patterns to ignore.\n    \n    walk('/Users/johannes/Documents/')\n    \n    walk('/Users/johannes/Documents/', patterns = ['*.pdf'])\n    \n    walk('/Users/johannes/Documents/', patterns = ['*.pdf','*.txt'])\n    \n    walk('/Users/johannes/Documents/', patterns = ['*.pdf','*.txt'], ignore_patterns = ['*.py'])\n    \n    walk('/Users/johannes/Documents/', patterns = ['*.pdf','*.txt'], ignore_patterns = ['*.py','*.cfg'])\n    \n    walk('/Users/johannes/Documents/', patterns = ['*.pdf','*.txt'], ignore_patterns = ['*.py','*.cfg','*.exe'])\n    \"\"\"\n    \n    path = os.path.abspath(path)\n    \n    # By default, we are interested in all files and subdirectories,\n    # so set the ignore_patterns to an empty list, [].\n    \n    ignore_patterns = [re.compile(pattern) for pattern in ignore_patterns]\n    \n    for root, dirs, files in os.walk(path):\n        for file in files:\n            # Find files that match one of the patterns,\n            # and skip the file if it matches any of them\n            for pattern in patterns:\n                pattern = re.compile(pattern)\n                if pattern.search(file) and not pattern.search(file,re.IGNORECASE):\n                    if verbose:\n                        print file\n                    continue\n                \n            # Find files that match none of the patterns,\n            # and include them if the file is not in the list of\n            # files to ignore\n            for pattern in ignore_patterns:\n                if pattern.search(file) and pattern.search(file,re.IGNORECASE):\n                    if verbose:\n                        print file\n                    continue\n            \ndef tree(obj,dirs=True,files=True,\n    indent='',\n    _depth=0,\n    maxdepth=0,\n    separator='/',\n    ignore_patter",
        "num_ids": 1027
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    result = \"\"\n    spaces = re.findall(r'\\s', text)\n    for i in range(len(text)):\n        if i in spaces:\n            result += \"_\"\n        else:\n            result += text[i]\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(text) == 0:\n        return text\n    if len(text) == 1:\n        return text\n    \n    prev_char = text[0]\n    new_text = \"\"\n    \n    for c in text[1:]:\n        if prev_char == \" \" and c == \" \":\n            new_text = new_text + \"_\"\n        else:\n            new_text = new_text + c\n        prev_char = c\n    \n    if len(text) > 2:\n        new_text = new_text[0:len(text)-2] + \"-\"\n    \n    return new_text\n",
        "num_ids": 150
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return re.sub(r' +', '_', text)\n    \ndef add_slash(path):\n    \"\"\"\n    If path doesn't end with a slash, add one\n    add_slash(\"/foo/bar/\") == \"/foo/bar/\"\n    add_slash(\"foo/bar\") == \"foo/bar/\"\n    \"\"\"\n    if path.endswith('/'):\n        return path\n    else:\n        return path + '/'\n        \ndef is_slug(text):\n    \"\"\"\n    Returns True if the given text is a valid slug, \n    else returns False\n    is_slug(\"foo_bar\") == True\n    is_slug(\"foo_bar_\") == False\n    \"\"\"\n    return not re.search('[^-a-z0-9_]', text)\n    \ndef remove_slash(path):\n    \"\"\"\n    If path starts with a slash, remove the slash\n    remove_slash(\"/foo/bar\") == \"foo/bar\"\n    remove_slash(\"/foo/bar/\") == \"foo/bar\"\n    remove_slash(\"/foo/bar\") == \"foo/bar\"\n    \"\"\"\n    if path.startswith('/'):\n        return path[1:]\n    else:\n        return path\n        \ndef remove_double_slash(path):\n    \"\"\"\n    If path starts with two slashes, remove the first two slashes\n    remove_double_slash(\"//foo/bar\") == \"/foo/bar\"\n    remove_double_slash(\"//foo/bar/\") == \"/foo/bar\"\n    remove_double_slash(\"//foo/bar\") == \"/foo/bar\"\n    remove_double_slash(\"/foo/bar\") == \"/foo/bar\"\n    remove_double_slash(\"/foo/bar/\") == \"/foo/bar/\"\n    \"\"\"\n    if path.startswith('//'):\n        return path[2:]\n    else:\n        return path\n        \ndef fix_path(path):\n    \"\"\"\n    If the given path starts with a slash, remove it and add a slash\n    fix_path(\"/foo/bar\") == \"/foo/bar\"\n    fix_path(\"/foo/bar/\") == \"/foo/bar/\"\n    fix_path(\"/foo/bar\") == \"/foo/bar/\"\n    fix_path(\"foo/bar\") == \"/foo/bar\"\n    fix_path(\"foo/bar/\") == \"/foo/bar/\"\n    \"\"\"\n    if path.startswith('/'):\n        return remove_slash(path)\n    else:\n        return add_slash(path)\n        \ndef fix_url(url):\n    \"\"\"\n    Fixes a given URL.\n    Given a url \"http://foo.com/bar/baz\", \n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar/baz/\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar/baz/\"\n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar/baz/\"\n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar/baz/\"\n    fix_url(\"http://foo.com/bar/baz\") == \"http://foo.com/bar/baz\"\n    fix_url(\"http://foo.com/bar/baz/\") == \"http://foo.com/bar",
        "num_ids": 1024
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return re.sub(r' ', '_', text)\n",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    out = []\n    for c in text:\n        if c =='':\n            c = '_'\n        out.append(c)\n    if out[0] =='' and out[1] =='':\n        out = out[1:]\n    if out[-1] =='' and out[-2] =='':\n        out = out[:-1]\n    if len(out) > 2 and out[-2] =='' and out[-3] =='':\n        out = out[:-2] + '-'\n    return ''.join(out)\n",
        "num_ids": 135
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_text = \"\"\n    previous_space = False\n    for char in text:\n        if char == \" \":\n            if previous_space:\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n            previous_space = True\n        else:\n            previous_space = False\n            new_text += char\n    return new_text\n",
        "num_ids": 91
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    text = re.sub(r\"\\s{2,}\", \"_\", text)\n    return text\n    \n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    out = \"\"\n    for c in text:\n        if c == \" \":\n            out += \"_\"\n        else:\n            out += c\n    \n    if len(out) > 0:\n        out = out.replace(\"  \", \"_\")\n    \n    return out\n",
        "num_ids": 66
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import re\n    import os\n    pattern = re.compile(r'(^[a-zA-Z].*)|(\\.$)|(^$)')\n    if pattern.match(file_name):\n        if not re.search(r'\\d', file_name):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 95
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 'No'\n",
        "num_ids": 7
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    name_check = lambda s: bool(re.match(r'[a-zA-Z]{1}(?:\\d{2})?(?:\\.\\w+)?$', s))\n    ext_check = lambda s: s.endswith(('.txt', '.exe', '.dll'))\n    return 'Yes' if all([name_check(file_name), ext_check(file_name)]) else 'No'\n",
        "num_ids": 104
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return file_name[:3].isdigit() and file_name.count('.') == 1 and \\\n        file_name.rfind('.') > file_name.rfind(' ') and file_name.rfind('.') > file_name.rfind(' ') and \\\n        (file_name.rfind('.') == file_name.rfind(' ') or file_name[file_name.rfind('.') + 1:].lower() in ['txt', 'exe', 'dll'])",
        "num_ids": 123
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #convert file name to a string\n    file_name = str(file_name)\n    #check for conditions 1 and 2\n    if len(file_name) > 5:\n        return 'No'\n    if file_name.count('.')!= 1:\n        return 'No'\n    if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n        return 'No'\n    #check for conditions 3 and 4\n    dot_index = file_name.rfind('.')\n    if file_name[dot_index + 1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 179
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def check(file_name):\n        l = list(file_name)\n        if len(l) > 3:\n            return 'No'\n        if l[0].isdigit():\n            return 'No'\n        if '.' not in file_name:\n            return 'No'\n        if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        if file_name.split('.')[0] == '':\n            return 'No'\n        if not file_name[0].isalpha():\n            return 'No'\n        if not file_name.split('.')[1][0].isalpha():\n            return 'No'\n        return 'Yes'\n    return check(file_name)\n",
        "num_ids": 183
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # input validation\n    if not isinstance(file_name, str):\n        raise TypeError(\"File name should be a string\")\n    # create the function\n    if file_name[0].isalpha() and file_name[1]!= '.':\n        return \"No\"\n    elif file_name[1] == '.':\n        return \"No\"\n    elif file_name[0].isalpha() == False:\n        return \"No\"\n    else:\n        if file_name[-4:].lower() == \".txt\":\n            return \"Yes\"\n        elif file_name[-4:].lower() == \".exe\":\n            return \"Yes\"\n        elif file_name[-4:].lower() == \".dll\":\n            return \"Yes\"\n        else:\n            return \"No\"\n",
        "num_ids": 195
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"\"\"\n    def file_name_check(file_name):\n        return 'Yes' if file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n    \"\"\"\n    #return 'Yes' if file_name.split('.')[-1] in ['txt', 'exe', 'dll'] else 'No'\n    return 'Yes' if re.match('^[a-zA-Z]+[a-zA-Z0-9]+[a-zA-Z0-9]+[a-zA-Z0-9]+\\.[a-zA-Z]+$', file_name) else 'No'\n    \n    \ndef file_hash_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's hash is valid, and returns 'No' otherwise.\n    A file's hash is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than six digits ('0'-'9') in the file's hash.\n    - The file's hash contains exactly one dot '.'\n    - The substring before the dot should be one of these: ['md5','sha1','sha224','sha256','sha384','sha512']\n    Examples:\n    file_hash_check(\"1.md5\") # => 'Yes'\n    file_hash_check(\"a.3sha\") # => 'No' (the hash should start with one of the following: ['md5','sha1','sha224','sha256','sha384','sha512'])\n    \"\"\"\n    #return 'Yes' if file_name.split('.')[-1] in ['md5','sha1','sha224','sha256','sha384','sha512'] else 'No'\n    return 'Yes' if re.match('^[a-fA-F0-9]{32}[a-fA-F0-9]{32}\\.[a-zA-Z]+$', file_name) else 'No'\n",
        "num_ids": 481
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    regex_pattern = \"[0-9][0-9]$\"\n    is_valid = re.match(regex_pattern, file_name)\n    if is_valid:\n        return \"No\"\n    else:\n        return \"Yes\"\n",
        "num_ids": 65
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def check(name):\n        if name.find('.') == -1:\n            return 'No'\n        else:\n            name_without_extension = name[:name.find('.')]\n            if name_without_extension.isdigit():\n                return 'No'\n            else:\n                extension = name[name.find('.') + 1:]\n                if extension.isdigit():\n                    return 'No'\n                else:\n                    first_letter_of_substring = name_without_extension[0]\n                    if first_letter_of_substring.isalpha() == False:\n                        return 'No'\n                    else:\n                        if len(name_without_extension) > 3:\n                            return 'No'\n                        else:\n                            return 'Yes'\n",
        "num_ids": 187
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(x**2 if i%3==0 or i%4==0 else x for i,x in enumerate(lst))\n",
        "num_ids": 34
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst2 = []\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            i = i**2\n            lst2.append(i)\n        else:\n            lst2.append(i)\n    return sum(lst2)\n",
        "num_ids": 71
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    s = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4!= 0:\n                s += lst[i]**2\n        elif i % 4 == 0:\n            if i % 3!= 0:\n                s += lst[i]**3\n    return s\n",
        "num_ids": 86
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i]**3\n    return sum\n",
        "num_ids": 78
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = 0\n    for i in lst:\n        if i % 4 == 0 and i % 3!= 0:\n            res += i**2\n        elif i % 4!= 0 and i % 3 == 0:\n            res += i**3\n        else:\n            res += i\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    \n    ",
        "num_ids": 10
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for item in lst:\n        if item % 3 == 0:\n            total += item ** 2\n        elif item % 4 == 0 and item % 3!= 0:\n            total += item ** 3\n    return total",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            i = i*i\n        if i % 4 == 0:\n            i = i*i*i\n        result += i\n    return result\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum_value = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] ** 3\n        if i % 4!= 0:\n            sum_value = sum_value + lst[i]\n    return sum_value\n",
        "num_ids": 107
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([int(i)**2 if i % 3 == 0 or i % 4 == 0 else i**2 for i in lst])\n",
        "num_ids": 34
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\"\n",
        "num_ids": 5
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ret = \"\"\n    for word in sentence.split():\n        ret += word\n        if len(ret) > 1:\n            for i in range(2, len(ret)):\n                if not is_prime(len(ret) / i):\n                    ret = ret[:len(ret) - i]\n                    break\n    return ret\n",
        "num_ids": 80
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not sentence:\n        return ''\n",
        "num_ids": 11
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([w for w, _ in Counter(sentence.split(\" \")).most_common() if is_prime(len(w))])",
        "num_ids": 36
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = sentence.split(\" \")\n    res = []\n    for word in lst:\n        res.append(str(len(set(word))))\n    return \"\".join(res)\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = ''\n    words = sentence.split(' ')\n    primes = [x for x in range(2, 101) if all(x % y!= 0 for y in range(2, x))]\n    for word in words:\n        word_len = len(word)\n        idx = 0\n        while idx < word_len:\n            if word_len % primes[idx]!= 0:\n                idx += 1\n                continue\n            idx += 1\n        result += word\n    return result\n",
        "num_ids": 125
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numerator, denominator = map(int, x.split(\"/\"))\n    if numerator % denominator:\n        return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    x, n = int(x), int(n)\n    if x == 0 or n == 0: return False\n    if x == n: return True\n    while x % n == 0:\n        x /= n\n    return x == int(x)\n",
        "num_ids": 61
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    try:\n        return True if x.split('/')[1] == n and int(x.split('/')[0]) % int(n) == 0 else False\n    except IndexError:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    x, n = x.split(\"/\"), n.split(\"/\")\n    x, n = [int(x), int(n)]\n    d = gcd(x, n)\n    return x/d == n/d\n",
        "num_ids": 55
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_number(x):\n        try:\n            int(x)\n            return True\n        except ValueError:\n            return False\n",
        "num_ids": 34
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    m = x[0] / x[1]\n    n = n[0] / n[1]\n    if m * n == int(m * n):\n        return True\n    else:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numerator, denominator = x.split('/')\n    numerator, denominator = int(numerator), int(denominator)\n    result = numerator * n / denominator\n    return result == int(result)\n",
        "num_ids": 57
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (True if int(x) * n == int(n) else False)\n",
        "num_ids": 21
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def helper(x, n):\n        if n == \"\":\n            return True\n        else:\n            n = int(n)\n            if n == 0:\n                return False\n            else:\n                x = x.split(\"/\")\n                if len(x) == 2:\n                    x = [int(i) for i in x]\n                    if x[0] / x[1] == int(n):\n                        return helper(x[0], x[1])\n                    else:\n                        return False\n                else:\n                    return False\n    return helper(x, n)\n",
        "num_ids": 137
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))\n",
        "num_ids": 29
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from collections import defaultdict\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n    sorted_nums = sorted(nums, key=sum_digits)\n    digit_to_nums = defaultdict(list)\n    for num in sorted_nums:\n        digit_to_nums[sum_digits(num)].append(num)\n    return sorted(digit_to_nums[0], key=lambda x: nums.index(x))\n",
        "num_ids": 124
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x))), ), -nums.index(x) if x > 0 else nums.index(x) + 1))",
        "num_ids": 51
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda x: sum([int(d) for d in str(abs(x))]))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def key(n):\n        return sum(int(d) for d in str(n))\n    return sorted(nums, key=key)\n",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    nums = sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_nums = sorted(nums, key=lambda n: sum([int(i) for i in str(n)]))\n    return sorted_nums\n",
        "num_ids": 40
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(abs(x))]))\n",
        "num_ids": 31
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] > 10 and nums[0] % 2 == 1 else 0\n    \n    total = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            total += 1\n    return total",
        "num_ids": 108
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for n in nums:\n        if n > 10 and (n / 10) % 10 == 1 and (n / 100) % 10 == 1:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] > 10 and nums[i] % 2 == 1 and nums[i] > nums[n-1] and nums[i] < nums[0]:\n            count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(1 for num in nums if num > 10 and num % 2!= 0 and \\\n        num // 10 % 2!= 0)\n",
        "num_ids": 36
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_odd = 0\n    for num in nums:\n        if num > 10 and not (num % 10 % 2) and not (num // 10 % 2):\n            num_odd += 1\n    return num_odd\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(1 for n in nums if n > 10 and \\\n            (n % 10 == 1 or n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9))",
        "num_ids": 50
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(num > 10 and num % 2 and num % 10 == 1 for num in nums)\n",
        "num_ids": 25
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for num in nums if num > 10 and (num % 2 == 1) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9))",
        "num_ids": 55
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numCount = 0\n    for num in nums:\n        if num >= 10 and (num%10)%2 == 1 and (num//10)%2 == 1:\n            numCount += 1\n    return numCount\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len([num for num in nums if num > 10 and (num % 10 + num // 10) % 2 == 1])\n",
        "num_ids": 31
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(i*(i-1) for i in range(1, n+1)",
        "num_ids": 23
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i * i + j * j + k * k == 3 * (i * i + j * j + k * k) and i < j < k:\n                    total += 1\n    return total\n",
        "num_ids": 89
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(1, n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def multiply_a_by_3(a):\n        a *= 3\n        return [i - a[i] for i in range(len(a))]\n",
        "num_ids": 40
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # time complexity: O(n**3)\n    count = 0\n    for i in xrange(n):\n        for j in xrange(i, n):\n            for k in xrange(j, n):\n                if i < j < k and (i + j + k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    a = [i * i - i + 1 for i in range(1, n)]\n    return sum(a[i] % 3 == 0 for i in range(n))\n",
        "num_ids": 53
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([a[i] for i in range(n) if (a[i] + a[i+1] + a[i+2])%3==0])\n",
        "num_ids": 42
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([1 for i in range(n) if (i * i - i + 1) % 3 == 0])\n",
        "num_ids": 29
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([((n - 1) - i + 1) * i // 2 for i in range(1, n)])\n",
        "num_ids": 30
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = [x for x in range(1, n + 1)]\n    result = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] > n:\n                break\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] == n and a[i] * a[j] * a[k] % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 133
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # newplanets = []\n    # for p in PLANETS:\n    #     for o in PLANETS[p]:\n    #         if (o[0] > planet1 and o[0] < planet2) or (o[1] > planet1 and o[1] < planet2):\n    #             newplanets.append(o)\n    # if newplanets == []:\n    #     return tuple()\n    # elif len(newplanets) == 1:\n    #     return newplanets[0]\n    # else:\n    #     newplanets.sort()\n    #     return tuple(newplanets)\n    return tuple(sorted(p for p in PLANETS if (p > planet1 and p < planet2) or (p < planet1 and p > planet2)))\n",
        "num_ids": 188
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if planet1.lower() not in planets or planet2.lower() not in planets:\n        return tuple()\n    \n    lst1 = planets[planet1.lower()]\n    lst2 = planets[planet2.lower()]\n    \n    lst = set(lst1) & set(lst2)\n    lst = list(lst)\n    lst.sort(key=lambda x: planets[x][0])\n    \n    return tuple(lst)",
        "num_ids": 116
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1 = planet1.title()\n    planet2 = planet2.title()\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 == \"Neptune\":\n        if planet2 == \"Mercury\":\n            return (\"Earth\", \"Venus\", \"Jupiter\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Venus\":\n            return (\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n        if planet2 == \"Mars\":\n            return (\"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Jupiter\":\n            return (\"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Saturn\":\n            return (\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\")\n        if planet2 == \"Uranus\":\n            return (\"Mars\", \"Earth\", \"Jupiter\", \"Saturn\", \"Neptune\")\n    if planet1 == \"Jupiter\":\n        if planet2 == \"Mercury\":\n            return (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Venus\":\n            return (\"Mercury\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Mars\":\n            return (\"Venus\", \"Earth\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Saturn\":\n            return (\"Mars\", \"Earth\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Uranus\":\n            return (\"Saturn\", \"Earth\", \"Mars\", \"Jupiter\")\n    if planet1 == \"Uranus\":\n        if planet2 == \"Mercury\":\n            return (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Neptune\")\n        if planet2 == \"Venus\":\n            return (\"Mercury\", \"Earth\", \"Mars\", \"Saturn\", \"Neptune\")\n        if planet2 == \"Mars\":\n            return (\"Venus\", \"Earth\", \"Saturn\", \"Neptune\")\n        if planet2 == \"Saturn\":\n            return (\"Mars\", \"Earth\", \"Saturn\", \"Neptune\")\n        if planet2 == \"Neptune\":\n            return (\"Saturn\", \"Earth\", \"Mars\", \"Uranus\")\n    if planet1 == \"Neptune\":\n        if planet2 == \"Mercury\":\n            return (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Venus\":\n            return (\"Mercury\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Mars\":\n            return (\"Venus\", \"Earth\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Saturn\":\n            return (\"Mars\", \"Earth\", \"Saturn\", \"Uranus\")\n        if planet2 == \"Uranus\":\n            return (\"Saturn\", \"Earth\", \"Mars\", \"Neptune\")\n    if planet1 == \"Venus\":\n        if planet2 == \"Earth\":\n            return (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Mars\":\n            return (\"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Jupiter\":\n            return (\"Mars\", \"Earth\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Saturn\":\n            return (\"Jupiter\", \"Earth\", \"Saturn\", \"Uranus\", \"Neptune\")\n        if planet2 == \"Uranus\":\n            return (\"Saturn\", \"Earth\", \"Jupiter\", \"Neptune\")\n        if planet2 == \"Neptune\":\n            return (\"Jupiter\", \"Earth\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 == \"Earth\":\n        if planet2 == \"Mercury\":\n            return (\"Mercury\", \"Venus\", ",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def bf_inner(planet1, planet2):\n        if planet1 == \"Mercury\":\n            if planet2 == \"Venus\":\n                return \"Venus\"\n            elif planet2 == \"Jupiter\":\n                return \"Jupiter\", \"Saturn\"\n            elif planet2 == \"Earth\":\n                return \"Earth\"\n        elif planet1 == \"Venus\":\n            if planet2 == \"Earth\":\n                return \"Earth\"\n            elif planet2 == \"Mars\":\n                return \"Mars\", \"Jupiter\", \"Uranus\"\n            elif planet2 == \"Jupiter\":\n                return \"Jupiter\"\n            elif planet2 == \"Saturn\":\n                return \"Saturn\", \"Uranus\"\n        elif planet1 == \"Earth\":\n            if planet2 == \"Mars\":\n                return \"Mars\", \"Jupiter\"\n            elif planet2 == \"Jupiter\":\n                return \"Jupiter\"\n            elif planet2 == \"Venus\":\n                return \"Venus\"\n            elif planet2 == \"Saturn\":\n                return \"Saturn\"\n        elif planet1 == \"Jupiter\":\n            if planet2 == \"Saturn\":\n                return \"Saturn\"\n            elif planet2 == \"Uranus\":\n                return \"Uranus\"\n            elif planet2 == \"Neptune\":\n                return \"Neptune\"\n        elif planet1 == \"Saturn\":\n            if planet2 == \"Uranus\":\n                return \"Uranus\"\n            elif planet2 == \"Neptune\":\n                return \"Neptune\"\n        elif planet1 == \"Uranus\":\n            if planet2 == \"Neptune\":\n                return \"Neptune\"\n        elif planet1 == \"Neptune\":\n            return \"Neptune\"\n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1 = planet_list.index(planet1)\n    planet2 = planet_list.index(planet2)\n    planet_list = planet_list[planet1:planet2]\n    return tuple(sorted(bf_inner(planet_list[0], planet_list[-1]) + bf_inner(planet_list[-1], planet_list[0])))\n",
        "num_ids": 551
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    '''\n    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    pl1, pl2 = planet1, planet2\n    try:\n        pl1 = planets.index(planet1)\n        pl2 = planets.index(planet2)\n    except ValueError:\n        return ()\n    pl1, pl2 = pl1, pl2\n    if pl1 < pl2:\n        return tuple(planets[i] for i in range(pl1 + 1, pl2))\n    else:\n        return tuple(planets[i] for i in range(pl2 + 1, pl1))\n    '''\n    planets = {'Mercury': 0, 'Venus': 1, 'Earth': 2, 'Mars': 3, 'Jupiter': 4, 'Saturn': 5, 'Uranus': 6, 'Neptune': 7}\n    pl1, pl2 = planets[planet1], planets[planet2]\n    if pl1 < pl2:\n        return tuple(planets[i] for i in planets if i in range(pl1 + 1, pl2))\n    else:\n        return tuple(planets[i] for i in planets if i in range(pl2 + 1, pl1))\n",
        "num_ids": 308
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    if planet1 == planet2:\n        return ()\n    if planet1 == \"Sun\":\n        return (planet2, )\n    if planet2 == \"Sun\":\n        return (planet1, )\n    if planet1 < planet2:\n        return (planet1, planet2)\n    if planet1 > planet2:\n        return (planet2, planet1)\n    return (planet1, planet2)\n",
        "num_ids": 172
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    plans = ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in plans or planet2 not in plans:\n        return ()\n    p1 = planets.index(planet1)\n    p2 = planets.index(planet2)\n    return tuple(planets[i] for i in range(p1, p2) if i > p1 and i < p2)\n",
        "num_ids": 109
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return tuple(sorted(orbit.name for orbit in Orbit if (orbit.name > planet1 and orbit.name < planet2)))\n",
        "num_ids": 32
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if planet1 not in PLANETS or planet2 not in PLANETS:\n        return ()\n    planet1_to_sun = PLANETS.index(planet1)\n    planet2_to_sun = PLANETS.index(planet2)\n    if planet1_to_sun > planet2_to_sun:\n        planet1_to_sun, planet2_to_sun = planet2_to_sun, planet1_to_sun\n    for i in range(planet1_to_sun, planet2_to_sun):\n        if PLANETS[i] == planet1:\n            break\n    for j in range(planet2_to_sun, planet1_to_sun, -1):\n        if PLANETS[j] == planet2:\n            break\n    return tuple(sorted([PLANETS[i] for i in range(i, j + 1)]))\n",
        "num_ids": 203
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sun = \"Sun\"\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    d = {}\n    \n    for i in planets:\n        d[i] = bfs(planet1, i)\n    \n    for i in planets:\n        d[i] = bfs(planet2, i)\n        \n    pairs = [(d[planet1], planet2), (planet2, d[planet1]), (d[planet2], planet1), (planet1, d[planet2])]\n    \n    return [x[1] for x in sorted(pairs, key=lambda x: x[0])]\n",
        "num_ids": 170
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(list_sort(lst), key=len)\n",
        "num_ids": 17
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted([i for i in lst if len(i)%2 == 0], key=len)\n",
        "num_ids": 26
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst2 = []\n    for i in lst:\n        if len(i)%2 == 0:\n            lst2.append(i)\n    lst2.sort(key = lambda x: len(x))\n    return lst2\n",
        "num_ids": 61
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not lst:\n        return lst\n    result = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            continue\n        result.append(word)\n    return sorted(result)\n",
        "num_ids": 56
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def list_sort(lst):\n        def helper(lst):\n            if not lst:\n                return lst\n            elif len(lst) == 1:\n                return lst\n            elif len(lst[0]) % 2 == 0:\n                return helper(lst[1:]) + [lst[0]]\n            elif len(lst[-1]) % 2 == 0:\n                return [lst[-1]] + helper(lst[:-1])\n            else:\n                return helper(lst[1:]) + [lst[0]]\n        return helper(lst)\n    return list_sort(lst)\n",
        "num_ids": 158
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lengths = []\n    for item in lst:\n        lengths.append(len(item))\n    sorted_lengths = sorted(lengths)\n    new_lst = []\n    for item in sorted_lengths:\n        for word in lst:\n            if len(word) == item:\n                new_lst.append(word)\n    return new_lst\n",
        "num_ids": 93
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst = sorted(lst, key = len)\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key = lambda word: word.lower())\n",
        "num_ids": 54
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(lst)):\n        if len(lst[i])%2:\n            lst.pop(i)\n    return sorted(lst)\n",
        "num_ids": 44
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(lst, key = len)\n",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x if is_prime(n) else y",
        "num_ids": 13
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return x\n    else:\n        return y\n        \n    \n    \n",
        "num_ids": 33
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == x:\n        return x\n    elif n == y:\n        return y\n    else:\n        return n\n",
        "num_ids": 32
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 34
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    lst = [x for x in lst if x >= 0 and isinstance(x, int)]\n    if not lst:\n        return 0\n    return sum([x**2 for x in lst if x%2==1])\n",
        "num_ids": 62
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(x*x for x in lst if x%2)\n    \ndef find_it(seq):\n    '''\n    Given a list of ints, return the first int that appears twice.\n    If all of the ints are unique, return None.\n    \n    find_it([1, 4, 3, 1, 2]) == 4\n    find_it([7, 1, 5, 2, 3]) == 1\n    find_it([2, 1, 2, 3, 1]) == 2\n    \n    If seq is empty, return None.\n    '''\n    for item in seq:\n        if seq.count(item) == 2:\n            return item\n    return None\n",
        "num_ids": 163
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([x*x for x in lst if x > 0 and isinstance(x, int)])\n",
        "num_ids": 27
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    lst = [x for x in lst if x > 0]\n    return sum(x**2 for x in lst if x % 2!= 0)\n",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    total = 0\n    for num in lst:\n        if num > 0:\n            if isinstance(num, int):\n                total += (num * num)\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in lst:\n        if type(i) == int and i > 0:\n            total += (i * i)\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2!= 0:\n                total += num*num\n    return total\n",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #     pass\n    # elif len(lst) == 0:\n    #     return 0\n",
        "num_ids": 25
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if type(lst[i]) == int and lst[i] > -1:\n            if lst[i]%2 == 1:\n                sum = sum + (lst[i]*lst[i])\n    return sum",
        "num_ids": 75
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not lst:\n        return 0\n    lst = [x for x in lst if x >= 0 and isinstance(x, int)]\n    return sum(x*x for x in lst if x % 2)",
        "num_ids": 53
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [abs(x-y) if x==y else x-y for x,y in zip(game,guess)]\n",
        "num_ids": 31
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #return [abs(game[i]-guess[i]) for i in range(len(game))]\n    return [abs(game[i]-guess[i]) for i in range(len(game)) if game[i]!=guess[i]]\n",
        "num_ids": 63
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    out = []\n    for i in range(len(guess)):\n        out.append(abs(guess[i]-game[i]))\n    return out",
        "num_ids": 40
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(guess))]\n    \n",
        "num_ids": 29
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    guess_score = [abs(x - y) for x,y in zip(game,guess)]\n    return guess_score\n",
        "num_ids": 33
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    guess = [int(i) for i in guess]\n    scores = [int(i) for i in game]\n    return [abs(i-j) for i,j in zip(guess, scores)]\n",
        "num_ids": 53
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    diff = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return diff\n",
        "num_ids": 37
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [abs(s-g) for s,g in zip(game,guess)]\n",
        "num_ids": 23
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i]-game[i]))\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    extension_strength = [len(ext) - ext.count('a') for ext in extensions]\n    return '{}.{}'.format(class_name, extensions[extension_strength.index(max(extension_strength))])\n    \n",
        "num_ids": 59
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    extension_dict = {}\n    for extension in extensions:\n        key = extension.upper()\n        extension_dict[key] = extension.lower()\n",
        "num_ids": 38
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #\n    extension_list = []\n    #\n    for extension in extensions:\n        extension_list.append( (extension, len(extension)-len(extension.lower())) )\n    #\n    extension_list.sort(key = lambda i: i[1], reverse = True)\n    #\n    result = \".\".join([class_name, extension_list[0][0]])\n    #\n    return result\n",
        "num_ids": 106
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    extension_strength = dict()\n    for extension in extensions:\n        extension_strength[extension] = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength[extension] += 1\n    strongest_extension = list()\n    for extension in extensions:\n        strength = extension_strength[extension]\n        if len(strongest_extension) == 0 or strength > strongest_extension[1]:\n            strongest_extension = [extension, strength]\n    strongest_extension.sort()\n    return \"{0}.{1}\".format(class_name, strongest_extension[0])\n",
        "num_ids": 154
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    import itertools\n    strength_map = {x:len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)) for x in extensions}\n    return '{0}.{1}'.format(class_name, sorted(strength_map.items(), key = lambda x: (-x[1], x[0]))[0][0])\n    \ndef count_digits(number):\n    \"\"\"Return the number of digits of the given number.\n    For example: count_digits(5) == 1 and count_digits(12) == 2.\"\"\"\n    return len(str(number))\n",
        "num_ids": 160
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return '{}.{}'.format(class_name, max(extensions, key=lambda x: sum(1 for c in x if c.isupper())))\n",
        "num_ids": 40
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    strongest = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strongest is None or strength > strongest[0]:\n            strongest = (strength, extension)\n    return '{}.{}'.format(class_name, strongest[1])\n",
        "num_ids": 97
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_strength = 0\n    strongest_extension = None\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return \"{}.{}\".format(class_name, strongest_extension)\n",
        "num_ids": 107
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    strongest_extension = extensions[0]\n    extension_strength = len(extensions[0]) - len(extensions[1])\n    for extension in extensions:\n        current_strength = len(extension) - len(extension.replace(extensions[0], \"\"))\n        if current_strength > extension_strength:\n            strongest_extension = extension\n            extension_strength = current_strength\n",
        "num_ids": 98
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    class_extensions = {}\n    for extension in extensions:\n        class_extensions[extension] = 0\n        for letter in extension:\n            if letter.isupper():\n                class_extensions[extension] += 1\n            else:\n                class_extensions[extension] -= 1\n    strongest_extension = None\n    for key, value in class_extensions.iteritems():\n        if strongest_extension is None or value > class_extensions[strongest_extension]:\n            strongest_extension = key\n    return \"%s.%s\"%(class_name, strongest_extension)\n",
        "num_ids": 147
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if b in a:\n        return True\n    for i in range(1,len(a)):\n        if b in a[i:]:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_substring(a, b):\n        return b in a\n",
        "num_ids": 19
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return bool(re.search(b + b[:len(b)-1], a))\n",
        "num_ids": 23
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    rotated = (b + b)\n    rotated = rotated[len(b):]\n    if rotated in a:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return a.find(b) > -1 or a[::-1].find(b) > -1\n",
        "num_ids": 27
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return bool(re.search(a, b)) or bool(re.search(a, b[::-1]))\n",
        "num_ids": 30
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(a) > len(b) and a in b + b\n",
        "num_ids": 19
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return b in a or b in a[1:] + a[0]\n",
        "num_ids": 19
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    flag = False\n    for i in range(1, len(a)+1):\n        temp = a[i:] + a[:i]\n        if temp == b:\n            return True\n        elif temp == b[:len(b)-1]:\n            return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == b:\n        return True\n    \n    l = len(a)\n    b_rot = b[0:l] + b[0:l:] + b[l::] + b[0:l:]\n",
        "num_ids": 54
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (len(str(abs(num))), len(str(abs(num))))\n",
        "num_ids": 22
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    num = abs(num)\n    while num:\n        digit = num % 10\n        if digit % 2:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n    return (even, odd)\n",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ((num // 10) % 2, (num % 10) % 2)\n",
        "num_ids": 20
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if num == 0:\n        return 0, 1\n    if num < 0:\n        num *= -1\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 0\n        num //= 10\n    return count, 1 - count\n",
        "num_ids": 77
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num = abs(num)\n    even_digits = 0\n    odd_digits = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 10\n    return (even_digits, odd_digits)\n",
        "num_ids": 82
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if num >= 0:\n        even = 0\n        odd = 0\n        num_str = str(num)\n        for i in num_str:\n            if int(i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)\n    else:\n        raise Exception(\"negative number not permitted\")\n",
        "num_ids": 85
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if num < 0:\n        return even_odd_count(-num)\n    elif num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return even_odd_count(num / 2)\n    else:\n        return even_odd_count(num // 10) + (1, )\n",
        "num_ids": 80
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n        even, odd = odd_even_count(num)\n        return -1 * even, -1 * odd\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n",
        "num_ids": 95
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if num < 0:\n        num = -num\n    elif num == 0:\n        return (0, 1)\n    count = 0\n    while num > 0:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 0\n        num /= 10\n    return (count, 10 - count)\n",
        "num_ids": 81
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count_even = 0\n    count_odd = 0\n    while num:\n        if num % 2:\n            count_odd += 1\n        else:\n            count_even += 1\n        num //= 10\n    return (count_even, count_odd)\n",
        "num_ids": 63
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Copy your code from the previous exercise here\n    d = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    # Find number of ones\n    ones = number % 10\n    # Find number of tens\n    tens = int(number / 10) - (ones == 0)\n    # Find number of hundreds\n    hundreds = int(number / 100) - (tens == 0) - (ones == 0)\n    # Build roman numeral\n    return d[hundreds] + d[tens] + d[ones]\n",
        "num_ids": 148
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError\n    numerals = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n    result = ''\n    for key, value in numerals.items():\n        result += value * (number // key)\n        number %= key\n    return result.lower()\n",
        "num_ids": 119
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def recur(n):\n        nonlocal count\n        if n == 0:\n            return \"\"\n        if n < 10:\n            return count[n]\n        elif n < 50:\n            return count[n] + recur(n-5)\n        elif n < 500:\n            return count[n] + count[n-100] + recur(n-500)\n        elif n < 1000:\n            return count[n] + count[n-100] + count[n-500] + recur(n-1000)\n    count = [\n        '',\n        'i', 'ii', 'iii', 'iv',\n        'v', 'vi', 'vii', 'viii',\n        'ix', 'x', 'xi', 'xii',\n        'xiii', 'xiv', 'xv', 'xvi',\n        'xvii', 'xviii', 'xix',\n        'cl', 'cli', 'clii', 'cliii', 'cliv',\n        'cll', 'clli', 'cllii', 'clliii', 'clliv',\n        'cd', 'cdi', 'cdii', 'cdiii', 'cdiv',\n        'cdl', 'cdli', 'cdlii', 'cdliii', 'cdliv',\n        'cc', 'cci', 'ccii', 'cciii', 'cciv',\n        'ccc', 'ccci', 'cccii', 'ccciii', 'ccciliv',\n        'cccd', 'cccii', 'ccccii', 'cccciii', 'cccciv',\n        'm','mi','mii','miii','miv',\n        'ml','mil','mili','milii','miliv',\n        'k', 'ki', 'kii', 'kiii', 'kiv',\n        'kl', 'kili', 'kilii', 'kiliv',\n        'ck', 'cki', 'ckii', 'ckiii', 'ckiv',\n        'cct', 'ccti', 'cctii', 'cctiii', 'cctiv',\n        'mm','mimi','mimii','mimiii','mimiv',\n        'mml','mmli','mmlii','mmliii','mmliv',\n        'n', 'ni', 'nii', 'niii', 'niv',\n        'nl', 'nili', 'nilii', 'niliv',\n        'nn', 'niu', 'nni', 'nnii', 'nniii', 'nniv',\n        'nk', 'niu', 'nkii', 'nkiii', 'nkiv',\n        'nct', 'ncti', 'nctii', 'nctiii', 'nctiv',\n        'pm', 'pimi', 'pimii', 'pimiii', 'pimiv',\n        'pl', 'pili', 'pilii', 'plii', 'pliii',\n        'pliv', 'pll', 'plli', 'pllii', 'plliii', 'plliv',\n        'ph', 'pi', 'pii', 'piii', 'piv',\n        'pl', 'pili', 'pilii', 'plii', 'pliii',\n        'pliv', 'pll', 'plli', 'pllii', 'plliii', 'plliv',\n        'pp', 'ppi', 'ppii', 'ppiii', 'ppiv',\n        'pct', 'pcti', 'pctii', 'pctiii', 'pctiv',\n        'qq', 'qqi', 'qqii', 'qqiii', 'qqiv',\n        'r', 'ri', 'rii', 'riiii', 'riv',\n        'rl', 'rli', 'rilii', 'riliv',\n        'cc', 'cci', 'ccii', 'cciii', 'cciv',\n        'cll', 'clli', 'cllii', 'clliii', 'clliv',\n        'cd', 'cdi', 'cdii', 'cdiii', 'cdiv',\n        'cdl', 'cdli', 'cdlii', 'cdliii', 'cdliv',\n        'cc', 'cci', 'ccii', 'cciii', 'cciv',\n        'c",
        "num_ids": 1011
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Expected integer, got \" + str(type(number)))\n    if number < 1 or number > 1000:\n        raise ValueError(\"Expected 1 <= num <= 1000, got \" + str(number))\n",
        "num_ids": 63
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # you will probably want to copy your solution from A3 to here\n    pass\n    # TODO: Write function here\n",
        "num_ids": 29
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if number == 0:\n        return ''\n    if number < 1 or number > 1000:\n        return None\n    roman = ''\n    remainders = [1000,900,500,400,100,90,50,40,10,9,5,4,1]\n    remainder = 1\n    while number > 0:\n        divisor = remainders[remainder]\n        if number >= divisor:\n            while number >= divisor:\n                roman += RomanNumeral[remainder]\n                number -= divisor\n        remainder += 1\n    return roman.lower()\n",
        "num_ids": 146
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if 1 <= number <= 1000:\n        result = ''\n        while number:\n            result, number = miniroman(number), number % 10\n            if result:\n                result = result[0] + result\n        return result\n    else:\n        raise ValueError('number must be between 1 and 1000')\n",
        "num_ids": 72
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert 1 <= number <= 1000, 'Expected 1 <= number <= 1000'\n    assert isinstance(number, int), 'Expected type int for number'\n    \n    # Convert number to string and reverse it\n    num_str = str(number)\n    rev_str = num_str[::-1]\n    \n    # Map roman numerals to ints\n    num_dict = {'x':10, 'i':1, 'v':5, 'l':50, 'c':100, 'd':500,'m':1000}\n    \n    # Build the roman numeral from the reversed string\n    result = ''\n    for i, char in enumerate(rev_str):\n        if i == 0:\n            result += char\n        else:\n            if num_dict[rev_str[i]] > num_dict[rev_str[i-1]]:\n                result += char\n            else:\n                result += num_dict[rev_str[i]] * char\n    \n    return result\n",
        "num_ids": 235
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not isinstance(number, int):\n        raise ValueError('Expected an integer, got {}'.format(number))\n    if number < 1:\n        raise ValueError('Expected a positive integer, got {}'.format(number))\n    if number > 1000:\n        raise ValueError('Expected an integer less than 1000, got {}'.format(number))\n    result = ''\n    # if number is in one of these values, we do not need to make a roman numeral\n    special_values = (5, 10, 50, 100, 500, 1000)\n    # we iterate through the values in descending order, so the smallest is first\n    for value in sorted(special_values, reverse=True):\n        if number >= value:\n            # if we have already made a roman numeral equivalent for the number\n            # we have, we don't need to make a new one\n            if number // value!= 0:\n                result += ''.join(mini_roman[value])\n                number -= value\n            # otherwise we make a new roman numeral\n            else:\n                result += ''.join(mini_roman[value-1])\n                number -= value-1\n    return result\n",
        "num_ids": 275
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return math.sqrt(a*a + b*b) == c\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (b**2 + c**2) == (a**2 + b**2) or (c**2 + a**2) == (b**2 + c**2)\n",
        "num_ids": 43
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2)\n",
        "num_ids": 41
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return math.isclose(a**2 + b**2, c**2)\n",
        "num_ids": 21
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return math.sqrt(a**2 + b**2) == c\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n    pass\n",
        "num_ids": 55
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a == b == c:\n        return True\n    elif a == b:\n        return False\n    elif c == b:\n        return False\n    else:\n        return b**2 == a**2 + c**2\n",
        "num_ids": 56
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n",
        "num_ids": 43
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        curr_count = len(set(word))\n        if curr_count > max_count:\n            max_word = word\n            max_count = curr_count\n    return max_word\n",
        "num_ids": 70
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    res = []\n    for word in words:\n        res.append(max(set(word), key=word.count))\n    return res.index(max(res, key=len))\n    \"\"\"\n    return max(words, key=len)\n",
        "num_ids": 63
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_str = None\n    max_count = 0\n    for word in words:\n        if len(word) > max_count:\n            max_count = len(word)\n            max_str = word\n    return max_str\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_len = 0\n    max_char = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_char = word\n    return max_char\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max = len(words[0])\n    result = words[0]\n    for word in words[1:]:\n        if len(word) > max:\n            max = len(word)\n            result = word\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_len = len(words[0])\n    max_word = words[0]\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 65
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_word = None\n    max_count = 0\n    for word in words:\n        count = count_unique(word)\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word\n",
        "num_ids": 61
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = dict()\n    for word in words:\n        d[word] = len(set(word))\n    return sorted(d.keys(), key=lambda x: d[x])[0]\n",
        "num_ids": 48
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    maximum = None\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            maximum = word\n    return maximum\n",
        "num_ids": 51
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    dic = {}\n    for word in words:\n        if word not in dic:\n            dic[word] = len(word)\n    return min(dic, key=dic.get)",
        "num_ids": 49
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    res = [0, 0]\n    curr_need = need\n    if number > need:\n        return res\n    if remaining >= need:\n        res[0] += need\n        res[1] = remaining - need\n    else:\n        res[0] = remaining\n        res[1] = 0\n    return res",
        "num_ids": 83
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total_eaten_carrots = 0\n    \n    # This is to avoid zero division\n    if need < 1:\n        return [total_eaten_carrots, remaining]\n    \n    if number >= need:\n        return [need, 0]\n    \n    # You have eaten a number of carrots, but the rest are not enough to complete the day's meals\n    if remaining < need:\n        total_eaten_carrots += remaining\n        return [total_eaten_carrots, 0]\n    \n    total_eaten_carrots += number\n    \n    # There are enough remaining carrots, you should not eat any more\n    if remaining - number >= need:\n        return [total_eaten_carrots, 0]\n    \n    total_eaten_carrots += need\n    return [total_eaten_carrots, remaining - need]\n",
        "num_ids": 200
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if number >= need:\n        return [need, remaining - need]\n    elif number <= 0:\n        return [number, 0]\n    else:\n        return [number, remaining - number]\n",
        "num_ids": 48
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return [number+need, max(0, remaining-need)]\n",
        "num_ids": 19
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if remaining >= need:\n        return [number + need, remaining - need]\n    return [number, 0]\n",
        "num_ids": 28
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Step 1: calculate how many leftover carrots you have\n    total = number + remaining\n    \n    # Step 2: calculate the number of leftover carrots that you have to eat\n    eaten = total - need\n    \n    return [eaten, remaining]\n    ",
        "num_ids": 60
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    number = min(number, need)\n    remaining -= number\n    if remaining > 0:\n        return [number + eat(number, need - number, remaining)[0], remaining]\n    else:\n        return [need, 0]\n",
        "num_ids": 56
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number >= need:\n        return [need, remaining]\n    else:\n        return [number, remaining-number]\n",
        "num_ids": 30
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if need > remaining:\n        return [number, 0]\n    else:\n        return [number + need, remaining - need]\n",
        "num_ids": 32
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [number + (need - remaining), remaining]\n",
        "num_ids": 14
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return operator[0](operand[0], operator[1](operand[1], operator[2](operand[2], operator[3](operand[3], operand[4]))))\n",
        "num_ids": 46
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(operand) - 1):\n        result += operator[i] * operand[i + 1]\n",
        "num_ids": 37
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 0\n    return result\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    raise NotImplementedError()\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # To add, subtract, multiply, and divide, we need to keep track of the sum and the product of \n    # the operands. Then we can add, subtract, multiply, or divide by the operators.\n    # To multiply, we have to keep track of the products and add them up.\n",
        "num_ids": 70
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # TODO: Write your code here.\n    \n    # Base cases:\n    if operator == []:\n        return operand[0]\n    if operand == []:\n        return operator[0]\n    if len(operator) == 1 and len(operand) == 1:\n        return operator[0] * operand[0]\n",
        "num_ids": 83
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(operator)!= len(operand) - 1:\n        raise Exception(\"Operator length is not equal to operand length minus 1\")\n",
        "num_ids": 35
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if s == '': return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n    return ''.join(s)\n",
        "num_ids": 89
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    def reverse(s, i, j):\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n",
        "num_ids": 50
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            else:\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n",
        "num_ids": 93
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not s:\n        return s\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            elif s[i].islower():\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(reversed(s.upper()))\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([a if a.isalpha() else a.swapcase() for a in s])",
        "num_ids": 26
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(solve_letter(s, letter) for letter in s if letter.isalpha())[::-1]\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.isupper():\n                result += i.lower()\n            else:\n                result += i.upper()\n        else:\n            result += i\n    return result[::-1]\n",
        "num_ids": 67
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # return ''.join(i if i.isalpha() else i.swapcase() for i in s)\n    return ''.join(i if i.isalpha() else i.swapcase() for i in s[::-1])\n",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def reverse(s, i, j):\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return s\n",
        "num_ids": 52
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 16
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if text:\n        return hashlib.md5(text).hexdigest()\n",
        "num_ids": 21
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 16
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    import hashlib\n    h = hashlib.md5()\n    h.update(text)\n    return h.hexdigest()\n",
        "num_ids": 43
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 20
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Use python's lib to hash the string.\n    # We hash the string in byte form to have a 32-bit hash\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n",
        "num_ids": 66
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    even_digits = []\n    for i in range(a,b+1):\n        if str(i).count('2') == 2:\n            even_digits.append(i)\n    return even_digits\n",
        "num_ids": 54
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in range(a, b + 1) if x % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Use a naive strategy to find all integers between a and b, inclusive,\n    # which are even digits.\n    result = []\n    if a > b:\n        raise ValueError(\"a must be <= b\")\n    elif a < 10:\n        result.append(a)\n    else:\n        while a <= b:\n            if a % 10 == 0:\n                a += 1\n            else:\n                a += 2\n            result.append(a)\n    return result\n",
        "num_ids": 113
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    integers = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [int(digit) for digit in range(a, b+1) if digit % 2 == 0]\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in range(a, b) if x % 2 == 0]\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    ints = []\n",
        "num_ids": 6
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a > b:\n        return []\n    if a % 2!= 0:\n        a += 1\n    result = []\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 2\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return range(a, b + 1)[::2]",
        "num_ids": 14
    }
]