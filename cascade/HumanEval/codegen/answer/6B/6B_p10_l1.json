[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sorted_numbers = sorted(numbers)\n    for index, number in enumerate(sorted_numbers[:-1]):\n        if abs(number - sorted_numbers[index + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # We can get rid of this function by using sets instead of two loops.\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    number_of_elements = len(numbers)\n    for i in range(number_of_elements):\n        for j in range(i + 1, number_of_elements):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for num1 in numbers:\n        for num2 in numbers:\n            if num1!= num2 and abs(num1 - num2) <= threshold:\n                return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # obviously, if it's a list of numbers, it must have a length.\n    if len(numbers) == 0:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return any(abs(numbers[i] - numbers[j]) <= threshold for i, j in\n               itertools.combinations(range(len(numbers)), 2))\n",
        "num_ids": 43
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    open_braces = ['(', '[', '{']\n    opening_paren_index = []\n    opening_braces_map = dict(zip(open_braces, range(len(open_braces))))\n    current_brace = None\n    result_strings = []\n    for i, c in enumerate(paren_string):\n        if c in open_braces:\n            current_brace = c\n            opening_paren_index.append(i)\n    # Closing bracket in the last iteration\n    if current_brace is not None:\n        opening_paren_index.append(len(paren_string))\n    for index in range(len(opening_paren_index) - 1):\n        start_index, end_index = opening_paren_index[index], opening_paren_index[index + 1]\n        string = paren_string[start_index + 1: end_index - 1]\n        if string!= '':\n            result_strings.append(string)\n    return result_strings\n",
        "num_ids": 235
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = ''.join(paren_string.split(' '))\n    stack = []\n    result = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            result.append(stack)\n            stack.pop()\n",
        "num_ids": 72
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    separated_groups = []\n",
        "num_ids": 9
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    stack = []\n    paren_strings = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            stack.append('(')\n        elif paren_string[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                paren_strings.append(paren_string[i:])\n                break\n        i += 1\n    while stack:\n        paren_strings.append(paren_string[i:])\n        stack.pop()\n        i += 1\n    return paren_strings\n",
        "num_ids": 141
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    paren_groups = []\n    stack = []\n    i = 0\n    while i < len(paren_string):\n        c = paren_string[i]\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                i += 1\n                continue\n            stack.pop()\n        else:\n            i += 1\n        if len(stack) == 0:\n            paren_groups.append(paren_string[:i])\n            paren_string = paren_string[i:]\n            i = 0\n    if len(stack)!= 0:\n        return ''.join(paren_groups)\n    return paren_string\n",
        "num_ids": 168
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not paren_string:\n        return []\n    \n    possible_paren_strings = []\n    parens_stack = []\n    curr_string = ''\n    for i, char in enumerate(paren_string):\n        if char == ')':\n            if curr_string:\n                possible_paren_strings.append(curr_string)\n                curr_string = ''\n            parens_stack.pop()\n        elif char == '(':\n            parens_stack.append(i)\n        elif char =='':\n            pass\n        else:\n            curr_string += char\n    possible_paren_strings.append(curr_string)\n    return possible_paren_strings\n",
        "num_ids": 171
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_stack = []\n    paren_map = {}\n    paren_map['('] = ')'\n    paren_map['['] = ']'\n    paren_map['{'] = '}'\n    paren_map['<'] = '>'\n    for char in paren_string:\n        if char in paren_map:\n            paren_stack.append(paren_map[char])\n        elif len(paren_stack) > 0:\n            if paren_stack[-1] == char:\n                paren_stack.pop()\n            else:\n                break\n    if len(paren_stack) == 0:\n        return [paren_string]\n    return separate_paren_groups(paren_string[1:])\n",
        "num_ids": 189
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result_list = []\n    last_open_paren_index = 0\n    # find the index of last open paren\n    for index in range(len(paren_string)):\n        if paren_string[index] == '(':\n            last_open_paren_index = index\n        elif paren_string[index] == ')':\n            result_list.append(paren_string[last_open_paren_index + 1:index])\n    return result_list\n",
        "num_ids": 113
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    int_part = number - int(number)\n    return int_part\n",
        "num_ids": 19
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    integer_part = int(number)\n    remainder = number - integer_part\n    return remainder\n",
        "num_ids": 26
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    integer, decimals = math.modf(number)\n    return decimals\n",
        "num_ids": 22
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return float(int(number) // 1)\n",
        "num_ids": 13
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    integer_part = math.floor(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "num_ids": 31
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    decimals = number % 1\n    return number - decimals\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    int_part = math.floor(number)\n    return number - int_part",
        "num_ids": 20
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(number) - (int(number) % 1)\n",
        "num_ids": 17
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if number == 0:\n        return 0\n    idx = -1\n    while number >= 1:\n        number /= 10\n        idx += 1\n    return round(number, idx)\n",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number == 0:\n        return 0\n    elif number < 1:\n        return 0\n    elif number > 1:\n        return math.trunc(number)\n    else:\n        return number\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: Complete this function\n    return sum(operations) < 0\n",
        "num_ids": 20
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    total = 0\n    for val in operations:\n        if total < 0:\n            return True\n        total += val\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bal = 0\n    for amount in operations:\n        bal += amount if amount > 0 else -amount\n        if bal < 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    balance = 0\n    for op in operations:\n        if op > 0:\n            balance += op\n        else:\n            balance -= op\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    bal = 0\n    for num in operations:\n        if num < 0:\n            bal += num\n        else:\n            bal -= num\n        if bal < 0:\n            return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Always return True for empty lists\n    if not operations:\n        return True\n    # Hold the maximum of the operations as the initial value of the balance\n    balance = max(operations)\n    # Perform the operations on the balance\n    for operation in operations:\n        # Perform the operation, eg. +1, -2, -4, 5\n        balance += operation\n        # Check if the balance goes below zero\n        if balance < 0:\n            # Return True if the balance is negative\n            return True\n    # At this point the balance is always positive\n    # Return False if the balance is zero\n    return balance == 0\n",
        "num_ids": 143
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    balance = 0\n    for operation in operations:\n        if balance < 0:\n            return True\n        else:\n            balance += operation\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(operations) < 3:\n        return False\n    for index in range(len(operations)):\n        if operations[index] < 0:\n            return True\n        if index + 1 < len(operations) and index > 0:\n            if operations[index - 1] > 0 and operations[index] < 0:\n                return True\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    bal = 0\n    for i in range(len(operations)):\n        op = operations[i]\n        if op > 0:\n            bal += op\n        else:\n            bal -= op\n        if bal < 0:\n            return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(numbers)\n    total = 0\n    for number in numbers:\n        total += abs(number - mean(numbers))\n    return total / n\n",
        "num_ids": 41
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(numbers) <= 1:\n        return 0\n    numbers_mean = sum(numbers) / len(numbers)\n    return sum([abs(x - numbers_mean) for x in numbers]) / len(numbers)\n",
        "num_ids": 58
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not len(numbers):\n        raise ValueError(\"Cannot calculate mean absolute deviation on empty list.\")\n    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Make sure the list is not empty\n    if not numbers:\n        return None\n",
        "num_ids": 21
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import numpy as np\n    return np.mean(np.absolute(numbers - np.mean(numbers)))\n",
        "num_ids": 29
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    mean = sum(numbers) / len(numbers)\n    total = 0\n    for num in numbers:\n        total += abs(num - mean)\n    return total / len(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert all(type(n) is float for n in numbers)\n    mean = sum(numbers)/len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n",
        "num_ids": 53
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import numpy as np\n    mean = np.mean(numbers)\n    return np.mean(np.abs(numbers - mean))\n",
        "num_ids": 35
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Assuming even number of elements\n    m = len(numbers)\n    mean = sum(numbers) / m\n    total = 0\n    for num in numbers:\n        total += abs(num - mean)\n    return total / m\n",
        "num_ids": 57
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not numbers:\n        return 0.0\n    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter)\n",
        "num_ids": 59
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if numbers == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i % 2 == 0:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n",
        "num_ids": 63
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    return [delimeter] * (n * 2 - 1) + numbers\n",
        "num_ids": 27
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    new_numbers = []\n    for i in range(len(numbers) - 1):\n        new_numbers.append(numbers[i])\n        new_numbers.append(delimeter)\n    new_numbers.append(numbers[-1])\n    return new_numbers\n",
        "num_ids": 102
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [delimeter] + numbers\n    \n    intermediary = numbers[1:]\n    res = []\n    for i in range(0, len(intermediary), 2):\n        res.append(numbers[i])\n        res.append(delimeter)\n        res.append(intermediary[i])\n    if len(intermediary) % 2!= 0:\n        res.append(delimeter)\n    return res\n",
        "num_ids": 125
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [delimeter] + [number for number in numbers] + [delimeter]\n",
        "num_ids": 21
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return numbers + [delimeter] * (len(numbers) - 1)\n",
        "num_ids": 20
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = numbers[:]\n    if len(numbers) % 2 == 1:\n        numbers.append(delimeter)\n    return numbers[0::2] + [delimeter] + numbers[1::2]\n",
        "num_ids": 53
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    paren_stack = []\n    index_stack = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            if not paren_stack:\n                return [0, 0]\n            index = paren_stack.pop()\n            index_stack.append(i)\n    if not paren_stack:\n        return [len(index_stack)]\n    paren_stack.append(i)\n    return [max(len(paren_stack) - i, len(index_stack)) for i in range(len(paren_stack))]\n",
        "num_ids": 155
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    parens_dict = {}\n    depth = 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # The maximum nesting of nested parentheses is the level of nesting of parentheses to the left of the largest\n    # group that could possibly exist.\n    # Eg. (()()) has maximum two levels of nesting while ((())) has three.\n    paren_string = paren_string.replace('()', 'X')\n    paren_string = paren_string.replace(')', 'X')\n    paren_string = paren_string.replace('(', 'X')\n    paren_string = paren_string.replace(')', 'X')\n    paren_string = paren_string.replace('X', '(')\n    paren_string = paren_string.replace('X', ')')\n    paren_string = paren_string.replace('(', ')')\n    paren_string = paren_string.replace(')', '(')\n    max_nesting = 1\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nesting = 1\n            for j in range(i+1, len(paren_string)):\n                if paren_string[j] == '(':\n                    nesting += 1\n                elif paren_string[j] == ')':\n                    nesting -= 1\n                    if nesting == 0:\n                        break\n            if nesting > max_nesting:\n                max_nesting = nesting\n    return list(range(1, max_nesting+1))\n",
        "num_ids": 340
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    nested_parens = []\n    # split paren string by spaces\n    paren_string = paren_string.split(' ')\n    # loop over the list of split strings\n    for item in paren_string:\n        # loop over each character of each string\n        for i in item:\n            if i == '(':\n                nested_parens.append(0)\n            elif i == ')':\n                if len(nested_parens) > 0:\n                    nested_parens.pop()\n                else:\n                    nested_parens.append(0)\n                    break\n    return nested_parens\n",
        "num_ids": 149
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_depth = 0\n    paren_depth = 0\n    max_depth_at_depth = 0\n    nested_parens = []\n",
        "num_ids": 35
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    depth = 0\n    stack = []\n    for i in range(len(paren_string)):\n        char = paren_string[i]\n        if char == '(':\n            count += 1\n            stack.append(depth)\n            depth += 1\n        elif char == ')':\n            count -= 1\n            depth -= 1\n            stack.append(depth)\n        if count < 0:\n            return [0]\n    return stack\n",
        "num_ids": 110
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    highest_depth = 0\n    for c in paren_string:\n        if c == '(':\n            count += 1\n            highest_depth = max(highest_depth, count)\n        if c == ')':\n            count -= 1\n",
        "num_ids": 62
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_level = 0\n    nested_levels = []\n",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    level = 0\n    max_level = 0\n    bracket_stack = []\n",
        "num_ids": 21
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    paren_stack = []\n    for i in range(len(paren_string)):\n        paren_stack.append(paren_string[i])\n        if paren_stack[i] == '(':\n            if len(paren_stack) > 1 and paren_stack[i-1] == '(':\n                paren_stack[i-1] = 2\n            else:\n                paren_stack[i] = 1\n",
        "num_ids": 99
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in strings if substring in x]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # NOTE: We use the str() function to convert the list of integers to a string,\n    # so that we can use the built-in sum() function that takes a string as input\n    return str(sum(numbers)), str(reduce(lambda x, y: x*y, numbers))\n",
        "num_ids": 69
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if numbers == []:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x*y, numbers)\n",
        "num_ids": 39
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sum = 0\n    product = 1\n    for n in numbers:\n        sum = sum + n\n        product = product * n\n    return (sum, product)\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if numbers:\n        s = 0\n        p = 1\n        for number in numbers:\n            s += number\n            p *= number\n        return s, p\n    return 0, 1\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = sum(numbers)\n    p = 1\n    for number in numbers:\n        p *= number\n    return s, p\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return (sum(numbers), reduce(lambda a, b: a * b, numbers, 1))\n",
        "num_ids": 25
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n",
        "num_ids": 35
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[i:]))\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    current = max(numbers[:2])\n    return [current] + rolling_max(numbers[2:])\n",
        "num_ids": 60
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_number = numbers[0]\n    result = [max_number]\n",
        "num_ids": 20
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i, v in enumerate(numbers):\n        if i == 0:\n            result.append(v)\n        else:\n            result.append(max(v, result[i-1]))\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_numbers = []\n    for idx, number in enumerate(numbers):\n        if len(max_numbers) == 0:\n            max_numbers.append(number)\n        else:\n            max_numbers.append(max(max_numbers[-1], number))\n    return max_numbers\n",
        "num_ids": 79
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_values = []\n    for i in range(len(numbers)):\n        if i > 0:\n            max_values.append(max(numbers[i-1], numbers[i]))\n        else:\n            max_values.append(numbers[i])\n",
        "num_ids": 67
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_elements = []\n    for i in range(len(numbers)):\n        max_elements.append(max(numbers[i:]))\n    return max_elements\n",
        "num_ids": 46
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return numbers\n",
        "num_ids": 11
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    rolling_max: List[int] = []\n    max_until_now: int = None\n    for number in numbers:\n        if max_until_now is None or number > max_until_now:\n            max_until_now = number\n            rolling_max.append(max_until_now)\n        else:\n            rolling_max.append(max_until_now)\n    return rolling_max\n",
        "num_ids": 97
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    current_max = numbers[0]\n    for i in range(1, len(numbers)):\n        current_max = max(current_max, numbers[i])\n        result.append(current_max)\n    return result\n",
        "num_ids": 61
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return string\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not string:\n        return string\n",
        "num_ids": 11
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # find the longest prefix that is a palindrome\n    prefix = ''\n    for i in range(1, len(string)):\n        if is_palindrome(string[:i]):\n            prefix = string[:i]\n            break\n",
        "num_ids": 60
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[0:i]):\n            return string[0:i] + string[0:i][::-1]\n",
        "num_ids": 68
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if string == '':\n        return ''\n",
        "num_ids": 12
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    start = 0\n    while True:\n        # Find the longest suffix of supplied string that is a palindrome\n        end = string.rfind(find_palindrome(string), start)\n        if end == -1:\n            break\n        # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n        string = string[:end] + string[end:][::-1] + string[end:]\n        start = end\n    return string\n",
        "num_ids": 115
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome.\n    # Start with the supplied string reversed.\n    string = string[::-1]\n    for i in range(len(string)):\n        # Check if there is a prefix of the string that is a palindrome.\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            # Check if there is a postfix of the string that is a palindrome.\n            # Start with the supplied string reversed and append to the end of the string prefix that comes before the palindromic suffix.\n            suffix = string[i:]\n            if is_palindrome(suffix):\n                return string[:i] + suffix[::-1]\n",
        "num_ids": 174
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string + string[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = list(string)\n    # Find the longest postfix of supplied string that is a palindrome.\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            break\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # Also: cast string to list to allow slicing.\n    return ''.join(list(string[:i]) + list(string[i:][::-1]))\n",
        "num_ids": 130
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if is_palindrome(string):\n        return string\n",
        "num_ids": 16
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(a) == len(b)\n    return ''.join(map(lambda x, y: '0' if x == y else '1', a, b))\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i, j in zip(a, b):\n        if i == j:\n            result.append('0')\n        else:\n            result.append('1')\n    return \"\".join(result)\n",
        "num_ids": 55
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = ''\n    for aa, bb in zip(a, b):\n        res += str((int(aa) ^ int(bb)))\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(a)):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(result)\n",
        "num_ids": 49
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n",
        "num_ids": 31
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "num_ids": 30
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    longest_str = None\n    max_len = 0\n    for string in strings:\n        if len(string) > max_len:\n            longest_str = string\n            max_len = len(string)\n    return longest_str\n",
        "num_ids": 59
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n",
        "num_ids": 62
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if strings:\n        return max(strings, key=len)\n",
        "num_ids": 17
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not strings:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n",
        "num_ids": 30
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 22
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if strings == []:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 23
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 35
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "num_ids": 33
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 42
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n",
        "num_ids": 26
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while b!= 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n",
        "num_ids": 30
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string[:i] for i in range(len(string))]\n",
        "num_ids": 20
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "num_ids": 24
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[0:i+1])\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if string:\n        return [string[:i] for i in range(1, len(string) + 1)]\n    return ['']\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pref = ''\n    result = []\n    for i in string:\n        pref = pref + i\n        result.append(pref)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n",
        "num_ids": 21
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string)+1)]\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = ''\n    for i in range(n+1):\n        s += str(i) +''\n    return s.strip()\n",
        "num_ids": 34
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join([str(i) for i in range(0, n+1)])\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \" \".join(str(i) for i in range(0, n + 1))\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(str(x) for x in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(str(x) for x in range(n+1))\n",
        "num_ids": 21
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join([str(i) for i in range(n+1)])\n",
        "num_ids": 21
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = string.lower()\n    unique = set(string)\n    return len(unique)\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    distinct = set()\n    for c in string.lower():\n        if c not in distinct:\n            distinct.add(c)\n    return len(distinct)\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # return len(set(string.lower()))\n    return len(set(string.upper()))\n",
        "num_ids": 26
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = string.lower()\n    set_of_letters = set()\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    num_bars = 0\n    bars = []\n    for char in music_string:\n        if char == 'o':\n            num_bars += 1\n        elif char == 'o|':\n            if num_bars > 0:\n                bars.append(num_bars)\n                num_bars = 0\n        elif char == '.':\n            num_bars +=.5\n        elif char == '|':\n            num_bars += 1\n    bars.append(num_bars)\n    return bars\n",
        "num_ids": 125
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [int(c.split('|')[1]) for c in music_string.split()]\n",
        "num_ids": 26
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # you code here\n    return []\n",
        "num_ids": 11
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(map(int, music_string.split()))\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    song = []\n    for i in music_string:\n        if i == \"o\":\n            song.append(1)\n        elif i == \"o|\":\n            song.append(2)\n        elif i == \".\":\n            song.append(4)\n    return song\n",
        "num_ids": 70
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    output_list = []\n    total_chars = len(music_string)\n    for i, char in enumerate(music_string):\n        if i == 0:\n            output_list.append(1)\n        else:\n            # if there is a previous character\n            if char!='':\n                # if previous note was a whole note\n                if music_string[i - 1] == 'o':\n                    # if there is a next character\n                    if i + 1 < total_chars:\n                        # if it's the last character\n                        if music_string[i + 1] == 'o':\n                            output_list.append(4)\n                        # if it's not the last character\n                        else:\n                            # if next character is a \"o\" or \".\"\n                            if music_string[i + 1] == 'o' or music_string[i + 1] == '.':\n                                output_list.append(2)\n                            else:\n                                output_list.append(1)\n                    else:\n                        output_list.append(4)\n                # if previous note was a half note\n                elif music_string[i - 1] == 'o|':\n                    if i + 1 < total_chars:\n                        # if it's the last character\n                        if music_string[i + 1] == 'o':\n                            output_list.append(2)\n                        # if it's not the last character\n                        else:\n                            # if next character is a \"o\" or \".\"\n                            if music_string[i + 1] == 'o' or music_string[i + 1] == '.':\n                                output_list.append(1)\n                            else:\n                                output_list.append(2)\n                    else:\n                        output_list.append(2)\n                # if previous note was a quarter note\n                elif music_string[i - 1] == '.|':\n                    if i + 1 < total_chars:\n                        # if it's the last character\n                        if music_string[i + 1] == 'o':\n                            output_list.append(1)\n                        # if it's not the last character\n                        else:\n                            # if next character is a \"o\" or \".\"\n                            if music_string[i + 1] == 'o' or music_string[i + 1] == '.':\n                                output_list.append(1)\n                            else:\n                                output_list.append(4)\n                    else:\n                        output_list.append(4)\n            # if there is no previous note\n            else:\n                if i + 1 < total_chars:\n                    # if it's the last character\n                    if music_string[i + 1] == 'o':\n                        output_list.append(4)\n                    # if it's not the last character\n                    else:\n                        # if next character is a \"o\" or \".\"\n                        if music_string[i + 1] == 'o' or music_string[i + 1] == '.':\n                            output_list.append(2)\n                        else:\n                            output_list.append(1)\n                else:\n                    output_list.append(4)\n    return output_list\n",
        "num_ids": 739
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(map(int, music_string.split()))\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    music = music_string.split(' ')\n    music = [x for x in music if x!= '']\n    for index, item in enumerate(music):\n        if item.startswith('o'):\n            music[index] = 4\n        elif item.startswith('o|'):\n            music[index] = 2\n        elif item.startswith('.|'):\n            music[index] = 1\n    return music\n",
        "num_ids": 109
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    music_list = []\n    ch = ''\n    for i in music_string:\n        if i == 'o':\n            ch = ch + i\n            music_list.append(4)\n        elif i == 'o|':\n            ch = ch + i\n            music_list.append(2)\n        elif i == '.':\n            ch = ch + i\n            music_list.append(1)\n    if len(ch) > 0:\n        while len(ch) < 4:\n            ch = 'o' + ch\n        music_list.append(4)\n    return music_list\n",
        "num_ids": 145
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    music = []\n",
        "num_ids": 6
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    string = string.lower()\n    substring = substring.lower()\n",
        "num_ids": 19
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string.split(substring)) - 1\n",
        "num_ids": 15
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len([1 for idx in range(len(string)) if string[idx:idx + len(substring)] == substring])\n",
        "num_ids": 35
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not len(substring) > 0:\n        return 0\n    if substring not in string:\n        return 0\n    return string.count(substring)\n",
        "num_ids": 40
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string) - len(string.split(substring, string.count(substring))) + 1\n",
        "num_ids": 27
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    start = string.find(substring)\n    if start == -1:\n        return 0\n    return how_many_times_in_slice(string, start, len(substring), substring)\n",
        "num_ids": 49
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers_list = []\n    for index, n in enumerate(numbers.split()):\n        number = n[-1]\n        if number in ('zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'):\n            number = int(number)\n            numbers_list.append((number, index))\n    numbers_list.sort()\n    return''.join([number for number, index in numbers_list])\n",
        "num_ids": 114
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # remove spaces\n    numbers = numbers.replace(' ','')\n    # convert to int\n    numbers = [int(i) for i in numbers]\n    # sort\n    numbers.sort()\n    # convert back to string\n    numbers = [str(i) for i in numbers]\n    # concatenate back to string\n    return''.join(numbers)\n",
        "num_ids": 90
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_numbers = []\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n            if int(numbers[i]) < int(numbers[j]):\n                temp = numbers[i]\n                numbers[i] = numbers[j]\n                numbers[j] = temp\n    return \" \".join(numbers)\n",
        "num_ids": 94
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join(sorted([n for n in numbers.split() if n in \"one two three four five six seven eight nine\".split()]))\n",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    low_to_high = {'zero': 'zero', 'one': 'one', 'two': 'two', 'three': 'three', 'four': 'four',\n                   'five': 'five','six':'six','seven':'seven', 'eight': 'eight', 'nine': 'nine'}\n    low_to_high_sorted = {}\n    for key, value in low_to_high.items():\n        low_to_high_sorted[value] = key\n",
        "num_ids": 113
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # check that the input contains only valid choices\n    valid_choices = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']\n    for choice in numbers.split():\n        if choice not in valid_choices:\n            raise ValueError(f'{choice} is not a valid choice')\n",
        "num_ids": 84
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(sorted(numbers.split(), key=lambda x: int(x)))\n",
        "num_ids": 24
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Check that input is valid\n    numbers = numbers.replace(' ', '')\n    if not numbers.isdigit():\n        raise ValueError('input is not a valid string of numbers from \\'zero\\' to \\'nine\\'')\n    \n    # Copy the input string\n    sorted_numbers = numbers[:]\n",
        "num_ids": 75
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # numbers.split()\n    # numbers.sort()\n    # numbers = \"\".join(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = list(numbers.split(' '))\n    return''.join([str(numbers_dict[num]) for num in numbers_list])\n",
        "num_ids": 95
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"List is too short.\")\n    smallest = min(numbers)\n    largest = max(numbers)\n    idx_smallest = numbers.index(smallest)\n    idx_largest = numbers.index(largest)\n    if idx_smallest > idx_largest:\n        idx_smallest, idx_largest = idx_largest, idx_smallest\n    difference = abs(smallest - largest)\n    for idx in range(idx_largest, idx_smallest, -1):\n        current_diff = abs(numbers[idx] - largest)\n        if current_diff < difference:\n            difference = current_diff\n            closest_elements = numbers[idx], largest\n    return closest_elements\n",
        "num_ids": 197
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    closest_pair = ()\n",
        "num_ids": 10
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"No numbers supplied\")\n",
        "num_ids": 22
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest_difference = None\n    best_elements = None\n    for i in range(0, len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if smallest_difference is None or difference < smallest_difference:\n                smallest_difference = difference\n                best_elements = (numbers[i], numbers[j])\n    return best_elements\n",
        "num_ids": 119
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        raise Exception(\"Can't find closest elements in a list with less than 2 elements\")\n",
        "num_ids": 31
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers.sort()\n    smaller_index, larger_index = 0, 1\n    smaller_value, larger_value = numbers[smaller_index], numbers[larger_index]\n    while larger_index < len(numbers) - 1:\n        current_value = numbers[larger_index + 1]\n        if abs(smaller_value - current_value) < abs(larger_value - current_value):\n            smaller_index += 1\n            smaller_value = numbers[smaller_index]\n        larger_index += 1\n        larger_value = numbers[larger_index]\n    return smaller_value, larger_value\n",
        "num_ids": 157
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Find the index of the smallest and largest number\n    smallest = numbers.index(min(numbers))\n    largest = numbers.index(max(numbers))\n",
        "num_ids": 40
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    elements = numbers\n    closest = (None, None)\n",
        "num_ids": 18
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(numbers)\n    # Given a sorted list of numbers, select the closest two.\n    i1 = 0\n    i2 = n - 1\n    diff1 = abs(numbers[i1] - numbers[i2])\n    if i1 == i2:\n        return numbers[i1], numbers[i2]\n    if diff1 == 0:\n        return numbers[i1], numbers[i2]\n    # If not, we know the list is ordered so we need to start from the beginning\n    # and end at the end and compare the two smallest and largest differences.\n    # If the difference is the same we have two closest values\n    if diff1 == diff2:\n        # Since we know the list is sorted, the smallest difference must be between two values.\n        # So we will need to find the smallest and largest values.\n        # We can compare the closest two pairs with a simple loop and return the smaller number.\n        smallest = abs(numbers[i1] - numbers[i2])\n        for i in range(1, n - 1):\n            current = abs(numbers[i] - numbers[i - 1])\n            if current < smallest:\n                smallest = current\n            current = abs(numbers[i] - numbers[i + 1])\n            if current < smallest:\n                smallest = current\n        return numbers[i1], numbers[i2]\n    else:\n        # Since the list is ordered, we know it's a straight line.\n        # It's possible that the difference between the closest two elements is less\n        # than the difference between the second to last and second to last element.\n        # In that case the last two elements will be the closest.\n        # If the difference is smaller than the second last difference,\n        # we know the last two elements are the closest.\n        # If the difference is the same as the second last difference,\n        # we know the last two elements are equally close.\n        diff2 = abs(numbers[i1] - numbers[i2 - 1])\n        for i in range(n - 1, 0, -1):\n            current = abs(numbers[i] - numbers[i - 1])\n            if current < diff2:\n                diff2 = current\n            if abs(numbers[i] - numbers[i1]) < diff2:\n                # As long as the differences between the two closest values are\n                # the same, we know that the two closest values are equally close.\n                # The values are now the closest pair.\n                diff2 = abs(numbers[i] - numbers[i1])\n                # The smallest value is between the two closest values.\n                smallest = abs(numbers[i] - numbers[i1])\n        return numbers[i1], numbers[i2]\n",
        "num_ids": 640
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    return [((x - smallest) / (largest - smallest)) for x in numbers]\n",
        "num_ids": 40
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [i - minimum for i in numbers]\n",
        "num_ids": 31
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # min = numbers[0]\n    # max = numbers[0]\n    # for i in numbers:\n    #     if i < min:\n    #         min = i\n    #     if i > max:\n    #         max = i\n    # return [i / max for i in numbers]\n    return [(i - min(numbers)) / (max(numbers) - min(numbers)) for i in numbers]\n",
        "num_ids": 101
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # numbers: List[float] = list(numbers)\n    # res: List[float] = [0.0] * len(numbers)\n    # for i in range(len(numbers)):\n    #     res[i] = (numbers[i] - min(numbers)) / (max(numbers) - min(numbers))\n    # return res\n    return [number / max(numbers) for number in numbers]\n",
        "num_ids": 106
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Start with the smallest element\n    min_num = min(numbers)\n    # Apply the mapping function to all elements\n    mapped_nums = [lambda x: (x - min_num) / (max(numbers) - min_num) for x in numbers]\n    return mapped_nums\n",
        "num_ids": 73
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(numbers) >= 2\n    mini, maxi = min(numbers), max(numbers)\n    return [(x-mini)/(maxi-mini) for x in numbers]\n",
        "num_ids": 47
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rescaled = []\n    for number in numbers:\n        rescaled.append(number / max(numbers))\n    return rescaled\n",
        "num_ids": 35
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_number = max(numbers)\n    min_number = min(numbers)\n    return [x - min_number for x in numbers]\n",
        "num_ids": 37
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [ (x - minimum) / (maximum - minimum) for x in numbers ]\n",
        "num_ids": 39
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [((number - minimum) / (maximum - minimum)) for number in numbers]\n",
        "num_ids": 39
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [value for value in values if isinstance(value, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return list(filter(lambda v: isinstance(v, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [int(n) for n in values if isinstance(n, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [int(x) for x in values if isinstance(x, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [val for val in values if isinstance(val, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in values if isinstance(x, int)]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # For now just support integer values\n    return [v for v in values if isinstance(v, int)]\n",
        "num_ids": 27
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [i for i in values if type(i) == int]\n",
        "num_ids": 18
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # from typing import Any\n    return [int(x) for x in values if isinstance(x, int)]\n",
        "num_ids": 28
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert n > 0\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n",
        "num_ids": 31
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    else:\n        for i in range(n):\n            if n % (i + 1) == 0:\n                return i + 1\n",
        "num_ids": 74
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n % 2 == 0:\n        return 2\n    \n    divisor = 1\n    # we search for divisors up to square root of n\n    while divisor**2 <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n",
        "num_ids": 73
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return int(n / 2)\n",
        "num_ids": 10
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    largest_divisor = 1\n    i = 2\n    while i * i < n:\n        if n % i:\n            i += 1\n        else:\n            largest_divisor = i\n    return largest_divisor\n",
        "num_ids": 57
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 1\n    while True:\n        if n % i == 0:\n            return i\n        i += 1\n",
        "num_ids": 29
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    divisors = set()\n    i = 1\n    while i < n:\n        if n % i == 0:\n            divisors.add(i)\n        i += 1\n    return max(divisors)\n",
        "num_ids": 54
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_divisor = 1\n    for i in range(1, int(n**0.5)):\n        if n % i == 0:\n            if i > max_divisor:\n                max_divisor = i\n            if n // i > max_divisor:\n                max_divisor = n // i\n    return max_divisor\n",
        "num_ids": 89
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n // 2 if n % 2 == 0 else n // 2 + 1\n",
        "num_ids": 19
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return []\n    i, factors = 2, []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 81
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    factors = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 0 and n % i == 0:\n            factors.append(i)\n        elif n % i == 0:\n            factors.append(i)\n    return factors\n",
        "num_ids": 69
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [i for i in range(2, n + 1) if n % i == 0]\n",
        "num_ids": 24
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    if n == 1:\n        return result\n    for num in range(2, n):\n        while not n % num:\n            result.append(num)\n            n //= num\n    if n > 1:\n        result.append(n)\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    elif n % 2 == 0:\n        return [2] + factorize(n // 2)\n    elif n % 3 == 0:\n        return [3] + factorize(n // 3)\n    elif n % 5 == 0:\n        return [5] + factorize(n // 5)\n    elif n % 7 == 0:\n        return [7] + factorize(n // 7)\n    elif n % 11 == 0:\n        return [11] + factorize(n // 11)\n    elif n % 13 == 0:\n        return [13] + factorize(n // 13)\n    elif n % 17 == 0:\n        return [17] + factorize(n // 17)\n    elif n % 19 == 0:\n        return [19] + factorize(n // 19)\n    elif n % 23 == 0:\n        return [23] + factorize(n // 23)\n    elif n % 29 == 0:\n        return [29] + factorize(n // 29)\n    elif n % 31 == 0:\n        return [31] + factorize(n // 31)\n    elif n % 37 == 0:\n        return [37] + factorize(n // 37)\n    elif n % 41 == 0:\n        return [41] + factorize(n // 41)\n    elif n % 43 == 0:\n        return [43] + factorize(n // 43)\n    elif n % 47 == 0:\n        return [47] + factorize(n // 47)\n    elif n % 53 == 0:\n        return [53] + factorize(n // 53)\n    elif n % 59 == 0:\n        return [59] + factorize(n // 59)\n    elif n % 61 == 0:\n        return [61] + factorize(n // 61)\n    elif n % 67 == 0:\n        return [67] + factorize(n // 67)\n    elif n % 73 == 0:\n        return [73] + factorize(n // 73)\n    elif n % 79 == 0:\n        return [79] + factorize(n // 79)\n    elif n % 83 == 0:\n        return [83] + factorize(n // 83)\n    elif n % 89 == 0:\n        return [89] + factorize(n // 89)\n    elif n % 97 == 0:\n        return [97] + factorize(n // 97)\n    else:\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        if n > 1:\n            factors.append(n)\n        return factors\n",
        "num_ids": 668
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        return []\n    if n <= 1:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    primes = [2, 3]\n    # iterate over the range 2 to sqrt(n)\n    for i in range(2, n // 2 + 1):\n        # check if i is prime\n        # since i % 2 returns 1 if i is odd, and 0 if i is even,\n        # the number of counts in the prime list is the number of even numbers between 2 and i\n        is_prime = True\n        for j in primes:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    # factorize n\n    factors = []\n    for p in primes:\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            factors.append([p, count])\n    return factors\n",
        "num_ids": 256
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n",
        "num_ids": 53
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 1:\n        return [1]\n    \n    # Set of already seen factors\n    seen = set()\n    \n    # First, find all factors of n\n    factors = []\n    for i in range(1, n):\n        if n % i == 0 and i not in seen:\n            factors.append(i)\n            seen.add(i)\n    \n    # Add on each factor to factors list\n    for factor in factors:\n        if n % factor == 0:\n            factors.append(n / factor)\n    \n    # Sort and return factors in the order of smallest to largest\n    factors.sort()\n    return factors\n",
        "num_ids": 156
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input number must be integer greater than 1\")\n",
        "num_ids": 32
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    i = 2\n    factors = []\n",
        "num_ids": 12
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if numbers:\n        first, *rest = numbers\n        number_idx = {}\n        for idx, number in enumerate(numbers):\n            number_idx.setdefault(number, []).append(idx)\n        for duplicate in number_idx.get(first, []):\n            del numbers[duplicate]\n    return numbers\n",
        "num_ids": 84
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # if the list is empty return the empty list\n    if numbers == []:\n        return []\n    # create a new list\n    new_list = []\n    # check each element\n    for i in range(len(numbers)):\n        # if the element is not in the new list\n        if numbers[i] not in new_list:\n            # append the element to the new list\n            new_list.append(numbers[i])\n    # return the new list\n    return new_list\n",
        "num_ids": 118
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(numbers))\n",
        "num_ids": 11
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # duplicates = {}\n    # for num in numbers:\n    #     if num in duplicates:\n    #         duplicates[num] += 1\n    #     else:\n    #         duplicates[num] = 1\n    # new_numbers = []\n    # for num in numbers:\n    #     if duplicates[num] == 1:\n    #         new_numbers.append(num)\n    # return new_numbers\n    \n    return list(set(numbers))\n",
        "num_ids": 119
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    hash_table = {}\n    for number in numbers:\n        if number in hash_table:\n            hash_table[number] += 1\n        else:\n            hash_table[number] = 1\n    return list(hash_table.keys())\n",
        "num_ids": 59
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lower = string.lower()\n    upper = string.upper()\n    return lower + upper[1:]\n",
        "num_ids": 26
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lowercase = string.lower()\n    uppercase = string.upper()\n    return lowercase[0:1] + uppercase[1:len(string)]\n",
        "num_ids": 41
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            res += string[i].lower()\n        elif string[i].islower():\n            res += string[i].upper()\n        else:\n            res += string[i]\n    return res\n",
        "num_ids": 75
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n",
        "num_ids": 69
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = ''\n    for c in string:\n        if c.isalpha():\n            res += c.swapcase()\n        else:\n            res += c\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string_list = list(string)\n    for i in range(len(string)):\n        if string[i].isupper():\n            string_list[i] = string[i].lower()\n        elif string[i].islower():\n            string_list[i] = string[i].upper()\n",
        "num_ids": 74
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 53
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return ''\n    return ''.join(strings)\n",
        "num_ids": 24
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    concatenated = ''\n    for s in strings:\n        concatenated += s\n    return concatenated\n",
        "num_ids": 30
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return ''\n    else:\n        return ''.join(strings)\n",
        "num_ids": 28
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [l[i] for i in range(len(l)) if l[i] > 0]\n",
        "num_ids": 26
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # If n < 2, not prime\n    if n < 2:\n        return False\n    # If n is even, not prime\n    if n % 2 == 0:\n        return False\n    # Else, if n > 3, it's possible that n is prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3, int(n ** (1/2)), 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n        i = i+6\n    return True\n",
        "num_ids": 90
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #for n in range(2, n):\n    #    if n % 2 == 0:\n    #        return False\n    #return True\n    if n % 2 == 0:\n        return False\n    for d in range(3, int(sqrt(n)) + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n",
        "num_ids": 46
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(xs) - 1):\n        if xs[i] == 0:\n            continue\n        if xs[i] * xs[i + 1] < 0:\n            return xs[i] / xs[i + 1]\n",
        "num_ids": 64
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(1, len(xs), 2):\n        if xs[i]!= 0:\n            return xs[i] / -xs[i - 1]\n    return None\n",
        "num_ids": 48
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0\n    assert max(xs)!= 0, \"list of coefficients can't have a zero coefficient\"\n    xs.sort()\n    if xs[-1] == 0:\n        return xs[-2]\n    else:\n        return xs[-1] - 1\n",
        "num_ids": 75
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert len(xs) % 2 == 0\n    assert sum(xs)!= 0\n    assert all(abs(coeff) > 0 for coeff in xs)\n    last_coefficient = xs[-1]\n    if last_coefficient == 0:\n        return -1 * xs[0] / xs[1]\n    else:\n        return -1 * xs[0] / (last_coefficient - xs[-2])\n",
        "num_ids": 108
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(xs)\n    if n % 2!= 0 or xs[n // 2] == 0:\n        return None\n    # n is even\n    m = n // 2\n    lhs = poly(xs[:m], xs[m])\n    rhs = poly(xs[m:], xs[m])\n    return xs[m - 1] - (lhs / rhs)\n",
        "num_ids": 98
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    x_ = None\n    for i in range(1, len(xs) // 2 + 1):\n        if xs[-i] == 0:\n            continue\n        elif x_ is None:\n            x_ = 1 / xs[-i]\n        elif -xs[-i] * x_ < 0:\n            return x_\n        else:\n            x_ = -xs[-i] / (1 - x_ * xs[-i])\n    return x_\n",
        "num_ids": 116
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    xs = sorted(xs)\n    if len(xs) % 2!= 0:\n        raise ValueError(\"Polynomial has to have even number of coefficients\")\n    zeros = [x for i, x in enumerate(xs) if i % 2 == 0 and x == 0]\n    if len(zeros) > 1:\n        raise ValueError(\"Polynomial has to have unique zero point\")\n    elif len(zeros) == 0:\n        raise ValueError(\"Polynomial has to have a unique zero point\")\n    return -zeros[0]\n",
        "num_ids": 132
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # g(x) = c0 + c1 * x + c2 * x^2 +.... cn * x^n\n    # g(x) = c0 + c1 * x + c2 * x^2 +.... cn * x^n - (c0 + c1 * x + c2 * x^2 +.... cn * x^n) * (x - 1)\n    # f(x) = c0 + c1 * x + c2 * x^2 +.... cn * x^n - (c0 + c1 * x + c2 * x^2 +.... cn * x^n) * (x - 1)\n    # g(x) = c0 + c1 * x + c2 * x^2 +.... cn * x^n + (c0 + c1 * x + c2 * x^2 +.... cn * x^n) * (x - 1)\n    # x = (c0 + c1 * x + c2 * x^2 +.... cn * x^n) / (c0 + c1 * x + c2 * x^2 +.... cn * x^n + (c0 + c1 * x + c2 * x^2 +.... cn * x^n))\n    if len(xs) % 2 == 0:\n        c0 = xs[0]\n        c_list = xs[1::2]\n        c_list.reverse()\n        c_list += [0] * (len(xs) // 2)\n        c_list.reverse()\n        c1 = sum(c_list)\n        c2 = c1 * -1\n        n = len(xs) // 2\n        solutions = [\n            (\n                c0 + c1 * (i + 1) + c2 * (i + 1) * (i + 2) // 2,\n                c0 + c1 * (i + 1) + c2 * (i + 1) * (i + 2) // 2 - c0 - c1 * (i + 1) - c2 * (i + 1) * (i + 2) // 2\n            )\n            for i in range(n)\n        ]\n    else:\n        c0 = xs[0]\n        c_list = xs[1::2]\n        c_list.reverse()\n        c_list += [0] * (len(xs) // 2)\n        c_list.reverse()\n        c1 = sum(c_list)\n        c2 = c1 * -1\n        n = len(xs) // 2\n        solutions = [\n            (\n                c0 + c1 * (i + 1) + c2 * (i + 1) * (i + 2) // 2,\n                c0 + c1 * (i + 1) + c2 * (i + 1) * (i + 2) // 2 - c0 - c1 * (i + 1) - c2 * (i + 1) * (i + 2) // 2\n            )\n            for i in range(n)\n        ]\n    # print(solutions)\n    for (x, y) in solutions:\n        if x == y == 0:\n            return x\n    return -1\n",
        "num_ids": 749
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) % 2:\n        raise ValueError(\"find_zero takes list xs having even number of coefficients.\")\n    if min(xs) < 0:\n        raise ValueError(\"find_zero takes list xs having only non-negative coefficients.\")\n",
        "num_ids": 60
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return -xs[0]\n    xs = [coeff for coeff in xs if coeff!= 0]\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return -xs[0]\n    else:\n        n = len(xs) // 2\n        a = [1]\n        a += xs[0:n]\n        b = [1]\n        b += xs[n:]\n        ab = [a[i] * b[i] for i in range(n)]\n        return -sum(ab) / sum([a[i] * b[i] for i in range(n)])\n",
        "num_ids": 194
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #l1 = [v for i, v in enumerate(l) if not i%3]\n    #l2 = [v for i, v in enumerate(l) if i%3]\n    #l2.sort()\n    #return l1 + l2\n    l1 = l[::3]\n    l2 = l[1::3]\n    l2.sort()\n    l3 = l[2::3]\n    l3.sort()\n    return l1 + l2 + l3\n",
        "num_ids": 122
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l2.append(l[i])\n    l2.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l2[i - 3]\n    return l\n",
        "num_ids": 86
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    new = []\n    for x in l:\n        if x%3 == 0:\n            new.append(x)\n    for x in l:\n        if x%3!= 0:\n            new.append(x)\n    new.sort()\n    return new",
        "num_ids": 64
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l1=[]\n    l2=[]\n    l3=[]\n    for i in l:\n        if i%3==0:\n            l3.append(i)\n        elif i%3==1:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l3.sort()\n    l2.sort()\n    l1.sort()\n    l=l1+l2+l3\n    return l\n",
        "num_ids": 113
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #print(\"l:\", l)\n    length = len(l)\n    index = 0\n    while index < length:\n        if index % 3 == 0:\n            l[index], l[index + 1] = l[index + 1], l[index]\n        index += 1\n    return l\n",
        "num_ids": 72
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert len(l) > 0, \"The list cannot be empty\"\n    assert isinstance(l, list), \"The list needs to be a list\"\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l[i] = l[i - 1]\n    l[-1] = l[-2]\n    for i in range(len(l) - 2, -1, -1):\n        l[i] = l[i + 1]\n    return l\n",
        "num_ids": 122
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # First, create a new list that only has values from l that aren't divisible by 3.\n    l_new = []\n    for i in l:\n        if i % 3!= 0:\n            l_new.append(i)\n    # Then, sort the values in l_new, since that's the sorted version of l\n    l_new.sort()\n",
        "num_ids": 89
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if not i % 3 == 0:\n            l2.append(l[i])\n    l2.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l2[j]\n            j += 1\n    return l\n",
        "num_ids": 94
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    x = l[0::3]\n    y = l[1::3]\n    z = l[2::3]\n    l2 = []\n    for i in range(len(x)):\n        l2.append(x[i])\n        l2.append(y[i])\n        l2.append(z[i])\n    return l2\n",
        "num_ids": 87
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for index in range(0, len(l)):\n        if index % 3!= 0:\n            result.append(l[index])\n    result.sort()\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(sorted(set(l)))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = set(l)\n    return sorted(list(l))\n",
        "num_ids": 18
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l = sorted(set(l))\n    return l\n",
        "num_ids": 15
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if type(l)!= list:\n        return []\n    l2 = []\n    [l2.append(x) for x in l if x not in l2 and not l2.append(x)]\n    return sorted(l2)\n",
        "num_ids": 58
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l2 = []\n    [l2.append(x) for x in l if x not in l2]\n    return l2\n",
        "num_ids": 33
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = set(l)\n    return sorted(s)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    unique = []\n    [unique.append(x) for x in l if x not in unique]\n    return unique\n",
        "num_ids": 29
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    m = l[0]\n    for i in l[1:]:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 35
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert isinstance(l, list), \"Input should be a list.\"\n    if len(l) == 0:\n        raise ValueError(\"Input list is empty.\")\n    return max(l)\n",
        "num_ids": 46
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    m = l[0]\n    for e in l[1:]:\n        if e > m:\n            m = e\n    return m\n",
        "num_ids": 35
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n",
        "num_ids": 53
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_elem = l[0]\n    for e in l[1:]:\n        if e > max_elem:\n            max_elem = e\n    return max_elem\n",
        "num_ids": 47
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    maximum = l[0]\n    for elem in l:\n        if elem > maximum:\n            maximum = elem\n    return maximum\n",
        "num_ids": 35
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(l) == 0:\n        return None\n    return max(l)\n",
        "num_ids": 22
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        return 0\n    return sum([1 for i in range(n) if i % 11 == 0 or i % 13 == 0])\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(",
        "num_ids": 64
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n    return 0\n",
        "num_ids": 8
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        if (i % 11 == 0) or (i % 13 == 0):\n            total += 1\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n -= 1\n    count = 0\n    while n >= 1:\n        if n % 11 == 0 or n % 13 == 0:\n            count += 1\n        n //= 10\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    res = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            res += 1\n    return res\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Implementation of the solution in exercise 1.\n    number_of_times = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            number_of_times += 1\n    return number_of_times\n",
        "num_ids": 66
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(map(lambda x: int(str(x)[0]) == 7, range(n)))\n",
        "num_ids": 26
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            total += 1\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    number_of_fizz_buzz = 0\n    for i in range(1, n+1):\n        if i % 11 == 0 or i % 13 == 0:\n            number_of_fizz_buzz += 1\n    return number_of_fizz_buzz\n",
        "num_ids": 67
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    divisible_by_7_or_13 = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            divisible_by_7_or_13 += 1\n    return divisible_by_7_or_13\n",
        "num_ids": 71
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l_prime = l[1::2]\n    l_prime.sort()\n    return [l[0]] + l_prime + l[2::2]\n",
        "num_ids": 40
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return l[0:len(l)//2] + sorted(l[len(l)//2:])\n",
        "num_ids": 28
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    length = len(l)\n    sort = []\n    for i in range(length):\n        if i % 2 == 0:\n            sort.append(l[i])\n        else:\n            sort.append(l[i])\n    sort.sort()\n    return sort\n",
        "num_ids": 66
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l.sort(key = lambda x: (x%2, x))\n    return l\n",
        "num_ids": 23
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(map(lambda x: l[int(len(l)/2)], l[0::2])) + list(map(lambda x: l[int(len(l)/2)], sorted(l[1::2])))\n",
        "num_ids": 57
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    l2.sort()\n    return l2",
        "num_ids": 65
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_l = l[:]\n    for i in range(1, len(l), 2):\n        new_l[i] = l[i-1]\n    for i in range(0, len(l), 2):\n        new_l[i] = l[i]\n    return new_l\n",
        "num_ids": 74
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l_odd = l[1::2]\n    l_even = sorted(l[::2])\n    return l_odd + l_even\n",
        "num_ids": 36
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Return a new list of length len(l) that contains all the elements of l,\n    # but in order according to the order of appearance in l\n    even_values = l[1::2]\n    even_indices = sorted(range(1, len(l), 2))\n    new_l = [l[i-1] for i in even_indices]\n    new_l.extend(even_values)\n    return new_l\n",
        "num_ids": 107
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert len(l) >= 1, \"The list must be at least of length 1\"\n    l1 = l[1::2]\n    l1.sort()\n    l[1::2] = l1\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[0] + group[-1] + group[1:-1] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 77
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle groups.\n    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 98
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = \"\".join([\" \" if i < len(s) / 3 else \"\" for i in range(3 * len(s))])\n    # split string to groups.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 128
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # get encoded string.\n    encoded = [s[i:i + 3] for i in range(0, len(s), 3)]\n    # prepare decoded string.\n    decoded = [encoded[0]]\n    # cycle decoded elements.\n    for i in range(1, len(encoded)):\n        decoded.append(encoded[i - 1])\n    return \"\".join(decoded)\n",
        "num_ids": 101
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # set up new string to fill in characters from the input string.\n    new_str = [\"\" for _ in range(len(s))]\n    # start at 1 because we don't want to replace the first character in the loop.\n    i = 1\n    while i < len(s):\n        # check if the third character is a valid replacement character.\n        if s[i] in AsciiAlphabet:\n            # replace the characters\n            # based on the replacement character.\n            new_str[i-1] = AsciiAlphabet[s[i]]\n            # increment the index\n            i += 3\n        else:\n            # increment the index\n            i += 1\n    return \"\".join(new_str)\n",
        "num_ids": 170
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 108
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([s[i] for i in range(0, len(s), 3)][::-1])\n",
        "num_ids": 30
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[::-1] if len(group) == 3 else (group[1:] + group[0])[::-1] for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 89
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # get size of each group by counting up from the beginning of the string.\n    group_size = [len(group) for group in s[:(len(s) // 3) * 3]]\n    # convert groups to characters\n    groups = [chr(int(s[i:i + 3], 3)) for i in range(0, len(s), 3)]\n    # reshape groups\n    groups = [groups[i:i + group_size[i]] for i in range(len(groups))]\n    # recombine groups.\n    return \"\".join(groups)\n",
        "num_ids": 135
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 78
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = 1\n    b = 2\n    c = 3\n    while c < n:\n        a, b = b, a + b\n        c = a + b\n    if c == n:\n        return b\n    else:\n        return None\n",
        "num_ids": 60
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    fib1 = 1\n    fib2 = 1\n    if n == 1:\n        return 2\n    else:\n        for i in range(n - 1):\n            fib1, fib2 = fib2, fib1 + fib2\n        # print(fib2)\n        if is_prime(fib2):\n            return fib2\n",
        "num_ids": 83
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        i = 0\n        prime_list = []\n        while i < n:\n            num = fib(i)\n            if is_prime(num):\n                prime_list.append(num)\n            i += 1\n        return prime_list[n-1]\n",
        "num_ids": 82
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 1:\n        return \"Not a positive integer.\"\n",
        "num_ids": 17
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be > 0\")\n",
        "num_ids": 20
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return fib(n)\n",
        "num_ids": 8
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    a, b = 1, 2\n    for i in range(n-1):\n        a, b = b, a+b\n    if is_prime(a):\n        return a\n    return \"No Fibonacci number exists\"\n",
        "num_ids": 76
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    fib_nums = [1, 2]\n    i = 0\n    while i < n - 2:\n        fib_nums.append(fib_nums[i] + fib_nums[i+1])\n        i += 1\n    fib_nums = set(fib_nums)\n    if n in fib_nums:\n        return fib_nums.pop()\n    else:\n        return False\n",
        "num_ids": 105
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 13\n    i = 1\n    j = 2\n    fib = 1\n    while i < n:\n        fib = j\n        j = j + fib\n        i += 1\n    while True:\n        fib += 1\n        for i in range(2,fib):\n            if fib % i == 0:\n                break\n        else:\n            return fib\n            \ndef fib_primes(n: int):\n    \"\"\"\n    fib_primes returns list of Fibonacci numbers less than n and all their prime factors.\n    >>> fib_primes(100)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    \"\"\"\n    fib_list = []\n    for i in range(1,n):\n        if i < prime_fib(i):\n            fib_list.append(i)\n    return fib_list\n",
        "num_ids": 284
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 0.\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        a = 0\n        b = 1\n        c = 0\n        for i in range(n):\n            c = a + b\n            a = b\n            b = c\n        return c\n    else:\n        raise ValueError(\"n must be greater than 0.\")\n",
        "num_ids": 123
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your code here\n    if len(l) < 3:\n        return False\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nums = set()\n    for x in l:\n        if x in nums:\n            return True\n        nums.add(x)\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (len(set(l)) == 3) and (-sum(l) in l)\n",
        "num_ids": 23
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    set1 = set()\n    set2 = set()\n    for val in l:\n        if val in set1:\n            return True\n        else:\n            set1.add(val)\n",
        "num_ids": 49
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = {}\n",
        "num_ids": 6
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    t = set(l)\n    for i in t:\n        if -i in t:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return False\n",
        "num_ids": 14
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n    x = 0\n    for i in l:\n        x = x + i\n    if x == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = list(set(l))\n    return len(l) == 3 and sum(l) == 0\n",
        "num_ids": 27
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return car_race_collision(n-1) + car_race_collision(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return int(math.factorial(n) / (math.factorial(2) * math.factorial(n - 2)))\n",
        "num_ids": 32
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([count_collisions(n, i) for i in range(1, n + 1)])\n",
        "num_ids": 27
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # write your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 2\n",
        "num_ids": 5
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(abs(x[0] - x[1]) < 3 for x in itertools.permutations(range(n), 2))\n",
        "num_ids": 35
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    cars = [c for c in range(n)]\n    cars.sort(reverse=True)\n    collisions = 0\n    for c in cars:\n        if c == n - 1:\n            collisions += 1\n        else:\n            for i in range(c, n):\n                if i < n - 1:\n                    if cars[i + 1] > c:\n                        cars[i + 1] -= 1\n    return collisions\n",
        "num_ids": 102
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = int(n)\n    assert n >= 2, \"Must have at least 2 cars\"\n",
        "num_ids": 24
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                continue\n            x, y = i, j\n            x += 1\n            y -= 1\n            if x >= n or y < 0:\n                continue\n            if x == y:\n                res += 1\n    return res\n",
        "num_ids": 83
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return -1\n",
        "num_ids": 6
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i + 1 for i in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [l[i]+1 for i in range(len(l))]\n    \n",
        "num_ids": 22
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [l[i] + 1 for i in range(len(l))]\n",
        "num_ids": 21
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(l)):\n        l[i] += 1\n        count += 1\n    return l\n",
        "num_ids": 35
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n",
        "num_ids": 25
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        else:\n            d[-item] = item\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = len(l)\n    l.sort()\n    left = 0\n    right = n-1\n    while left < right:\n        if l[left] + l[right] == 0:\n            return True\n        elif l[left] + l[right] > 0:\n            right -= 1\n        else:\n            left += 1\n    return False\n",
        "num_ids": 87
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in l:\n        if -i in l:\n            return True\n    return False\n    \n",
        "num_ids": 26
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    used = set()\n    for e in l:\n        if -e in used:\n            return True\n        used.add(e)\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    unique_l = set(l)\n    for x in l:\n        if -x in unique_l:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s = set(l)\n    for i in l:\n        if i * -1 in s:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    l_set = set(l)\n    \n    for elt in l:\n        if -elt in l_set:\n            return True\n    return False\n    \n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 69
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    check = False\n    for i in range(0, len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                check = True\n    return check\n",
        "num_ids": 62
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l)<2:\n        return False\n    s = set()\n    for n in l:\n        if -n in s:\n            return True\n        s.add(n)\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[-i] = 1\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    digit = []\n    while x > 0:\n        digit.append(x % base)\n        x //= base\n    s = ''\n    for i in digit[::-1]:\n        s += str(i)\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])\n",
        "num_ids": 58
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # make sure base is less than 10\n    if base < 2:\n        print(\"Base must be greater than or equal to 2.\")\n        return None\n    # change to base 10\n    if base > 10:\n        x = str(x)\n        # make string into integer\n        x = int(x)\n    # change to base 10\n    x = str(x)\n    base10 = 0\n    for i in range(len(x)):\n        base10 += (base ** (len(x) - i - 1) * int(x[i]))\n    return str(base10)\n",
        "num_ids": 140
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if x < base:\n        return str(x)\n    remainder = x % base\n    if remainder == 0:\n        return str(x // base)\n    else:\n        return change_base(x // base, base) + str(remainder)\n",
        "num_ids": 64
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    if base > 10:\n        return ValueError(\"Base number can't be greater than 10.\")\n    if x < 0:\n        return \"ERROR\"\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        if digit < 10:\n            result = str(digit) + result\n        else:\n            result = d[digit] + result\n        x = x // base\n    return result\n",
        "num_ids": 208
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # use the string function to format the output\n    # e.g. '{:b}'.format(8) -> '1000'\n    return '{:0>b}'.format(x)\n",
        "num_ids": 48
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x < 0:\n        x = abs(x)\n        sign = '-'\n    else:\n        sign = ''\n    x_str = ''\n    while x:\n        x, r = divmod(x, base)\n        x_str = str(r) + x_str\n    return sign + x_str\n",
        "num_ids": 78
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Remove the last digit of the input number\n    x = x % base\n",
        "num_ids": 19
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # convert to new base\n    d = ''\n    while x > 0:\n        remainder = x % base\n        d += str(remainder)\n        x //= base\n    # reverse the string\n    d = d[::-1]\n    return d\n",
        "num_ids": 65
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if x < 0:\n        x = abs(x)\n        sign = '-'\n    else:\n        sign = ''\n    digits = []\n    while x > 0:\n        digit = x % base\n        digits.append(digit)\n        x //= base\n    digits.reverse()\n    s = sign + ''.join(map(str, digits))\n    return s\n",
        "num_ids": 93
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return.5*a*h\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2.0\n",
        "num_ids": 13
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a * h / 2.0\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return 0.5 * h * a\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (a * h)/2\n",
        "num_ids": 10
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 4:\n        return n\n    previous = 0\n    current = 1\n    for i in range(n - 3):\n        current, previous = current + previous, current\n    return current + previous\n",
        "num_ids": 51
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n < 0:\n        raise ValueError(\"N must be positive\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 105
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 74
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 0:\n        raise ValueError(\"n should be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 98
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a = 0\n    b = 1\n    c = 0\n    d = 1\n    for i in range(1, n):\n        c = a + b\n        a = b\n        b = c\n    return c\n",
        "num_ids": 53
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        prev_prev = 1\n        prev = 2\n        curr = 0\n        for _ in range(n-3):\n            curr = prev + prev_prev\n            prev_prev = prev\n            prev = curr\n        return curr",
        "num_ids": 96
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    if n == 4:\n        return 2\n    if n == 5:\n        return 4\n    a, b = 0, 1\n    for i in range(n - 4):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 102
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 0:\n        raise ValueError(\"fib4 undefined for n < 0\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 96
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Return median of l if l is length 1, otherwise median of two elements\n    if len(l) == 1:\n        return l[0]\n    if len(l) == 2:\n        return (l[0]+l[1])/2\n    # Determine number of elements to sort\n    n = len(l)\n    # Sort l and choose median\n    l.sort()\n    m = n//2\n    if n % 2 == 1:\n        return l[m]\n    else:\n        return (l[m]+l[m-1])/2\n",
        "num_ids": 135
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2.0\n    return l[n//2]\n",
        "num_ids": 56
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return median_low(l, len(l)//2)\n",
        "num_ids": 17
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sorted_list = sorted(l)\n    length = len(sorted_list)\n    middle = (length + 1) // 2\n",
        "num_ids": 34
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    return sum(l[len(l) // 2 - 1: len(l) // 2 + 1]) / 2.0\n",
        "num_ids": 62
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #check if list is sorted\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]\n",
        "num_ids": 66
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(l)\n    sorted_l = sorted(l)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    if n % 2 == 0:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[n // 2]\n",
        "num_ids": 87
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sorted_l = sorted(l)\n    return (sorted_l[len(sorted_l) // 2] + sorted_l[(len(sorted_l) - 1) // 2]) / 2\n",
        "num_ids": 52
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    return (l[n//2] + l[n//2 - 1]) / 2\n",
        "num_ids": 54
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sorted_list = sorted(l)\n    if len(l) % 2 == 0:\n        return (sorted_list[len(l)//2-1] + sorted_list[len(l)//2]) / 2\n    else:\n        return sorted_list[len(l)//2]\n    \n",
        "num_ids": 76
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # length = len(text)\n    # for i in range(int(length / 2)):\n    #     if text[i]!= text[length - i - 1]:\n    #         return False\n    # return True\n    return text == text[::-1]\n",
        "num_ids": 66
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not text:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 44
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text[::-1] == text\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not text:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n",
        "num_ids": 37
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # find middle\n    middle = len(text) // 2\n    left = 0\n    right = len(text) - 1\n    while left <= right:\n        if text[left]!= text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    text = text.replace(' ', '').lower()\n    for i in range(len(text)//2):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(text) // 2):\n        if text[i]!= text[-i-1]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Use peasant multiplication\n    r = 1\n    while n > 0:\n        if n % 2 == 1:\n            r = (r * n) % p\n        n //= 2\n    return r\n",
        "num_ids": 49
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (2 * modp(n // 2, p)) % p\n    else:\n        return (modp(n - 1, p) * n) % p\n",
        "num_ids": 61
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if p < 2:\n        raise Exception(\"modulo p must be greater than 1\")\n    if p == 2:\n        return n\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n % 2 == 0:\n        return modp(n // 2, p)**2 % p\n    else:\n        return (modp(n // 2, p)**2 * 3) % p\n",
        "num_ids": 137
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (modp(n - 1, p) * p) % p\n    else:\n        return (modp(n // 2, p) ** 2) % p\n    \ndef modinv(n: int, p: int):\n    \"\"\"Return the modular inverse of n mod p.\n    >>> modinv(7, 11)\n    5\n    >>> modinv(5, 11)\n    7\n    >>> modinv(3, 11)\n    2\n    >>> modinv(11, 11)\n    1\n    >>> modinv(1, 11)\n    10\n    \"\"\"\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modinv(n // 2, p) ** 2 % p\n    else:\n        return modinv(n, p) * modp(p - 2, p) % p\n",
        "num_ids": 218
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = 1\n    while n > 0:\n        result = (result * n) % p\n        n -= 1\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p)**2 % p\n    else:\n        return modp(n - 1, p)**2 * n % p\n",
        "num_ids": 60
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return pow(n, 2, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n/2, p) * modp(n/2, p) % p\n    else:\n        return modp(n-1, p) * p % p\n",
        "num_ids": 66
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 37
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 34
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    text = text.lower()\n    text = \"\".join([l for l in text if l not in vowels])\n    return text\n",
        "num_ids": 48
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    vowels = set('aeiou')\n    new_text = ''.join(i for i in text if i not in vowels)\n    return new_text\n",
        "num_ids": 43
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = 'aeiouAEIOU'\n    text = list(text)\n    for i in range(len(text)):\n        if text[i].lower() in vowels:\n            text[i] = ''\n    new_text = ''.join(text)\n    return new_text\n",
        "num_ids": 74
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    output_string = ''\n    for letter in text:\n        if letter not in vowels:\n            output_string += letter\n    return output_string\n",
        "num_ids": 64
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    text = list(text)\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text[i] = ''\n    return ''.join(text)\n",
        "num_ids": 73
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_text = text\n    for letter in vowels:\n        new_text = new_text.replace(letter, '')\n    return new_text\n",
        "num_ids": 74
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    text = text.lower()\n    new_text = []\n    for letter in text:\n        if letter in vowels:\n            continue\n        else:\n            new_text.append(letter)\n    new_text = ''.join(new_text)\n    return new_text\n",
        "num_ids": 95
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    text = text.lower()\n    text = [x for x in text if x not in vowels]\n    text = ''.join(text)\n    return text\n",
        "num_ids": 76
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    output = ''\n    for char in text:\n        if char in vowels:\n            continue\n        output += char\n    return output",
        "num_ids": 46
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    # your code here\n    result = ''\n    for i in text:\n        if i not in vowels:\n            result += i\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return t not in l\n",
        "num_ids": 8
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return not any(l[i] > t for i in range(len(l)))\n",
        "num_ids": 22
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return all(i < t for i in l)\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for number in l:\n        if number > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i >= t:\n            return False\n    return True\n    \ndef largest_factor(n: int):\n    \"\"\"Return the largest factor of n that is smaller than n.\n    >>> largest_factor(15) # factors are 1, 3, 5\n    5\n    >>> largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40\n    40\n    >>> largest_factor(13) # factor is 1 since 13 is prime\n    1\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return 1\n    \ndef if_function(condition: bool, true_result: object, false_result: object):\n    \"\"\"Return true_result if condition is a true value, and\n    false_result otherwise.\n    >>> if_function(True, 2, 3)\n    2\n    >>> if_function(False, 2, 3)\n    3\n    >>> if_function(3==2, 3+2, 3-2)\n    1\n    >>> if_function(3>2, 3+2, 3-2)\n    5\n    \"\"\"\n    if condition:\n        return true_result\n    else:\n        return false_result\n",
        "num_ids": 325
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return all(num <= t for num in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(n < t for n in l)\n",
        "num_ids": 14
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for num in l:\n        if num > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(l[i] <= t for i in range(len(l)))\n",
        "num_ids": 21
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s0 == s1\n",
        "num_ids": 9
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s0[:len(s1)] == s1\n",
        "num_ids": 16
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(char in s0 for char in s1) and all(char in s1 for char in s0)\n",
        "num_ids": 29
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return set(s0) == set(s1)\n",
        "num_ids": 15
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: optimize\n    #\n    # Using the formula F(n) = F(n-2) + F(n-1)\n    # we find the n-th fibonacci number\n    # at runtime\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 88
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    if n <= 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 46
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 36
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 28
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        raise ValueError(\"Negative arguments are not supported\")\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 56
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n if n < 2 else fib(n - 1) + fib(n - 2)\n",
        "num_ids": 23
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"<\":\n                return False\n            stack.pop()\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    opening_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets.append(char)\n        else:\n            if not opening_brackets:\n                return False\n            else:\n                opening_brackets.pop()\n    return not opening_brackets\n",
        "num_ids": 72
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(brackets) < 2:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    open_brackets = [brackets[0]]\n    for i in range(1, len(brackets)):\n        if brackets[i] == \">\" and open_brackets[-1] == \"<\":\n            open_brackets.pop()\n        else:\n            open_brackets.append(brackets[i])\n    return open_brackets == []\n",
        "num_ids": 87
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    while brackets:\n        if brackets.startswith(\"<\"):\n            brackets = brackets[1:]\n        elif brackets.endswith(\">\"):\n            brackets = brackets[:-1]\n        else:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not brackets:\n        return True\n    stack = []\n    for bracket in brackets:\n        if bracket == \">\" and not stack:\n            return False\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            stack.pop()\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\">\")\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 66
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    bracket_stack = []\n",
        "num_ids": 9
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(\">\" not in s for s in brackets) and all(\"<\" not in s for s in brackets)\n",
        "num_ids": 29
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    pass\n    \nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. YOU'RE A BRACKETTEER!\\n\")\n    ",
        "num_ids": 65
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n",
        "num_ids": 53
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or \\\n           all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #initialize local variables\n    n = len(l)\n    #if list is empty or only contains one element, return true\n    if n == 0:\n        return True\n    #initialize local variables\n    elif n == 1:\n        return True\n    #if list is even and all elements are equal, return true\n    elif n % 2 == 0 and l[0] == l[n-1]:\n        return True\n    #if list is even and all elements are increasing, return true\n    elif n % 2 == 0 and l[0] < l[n-1]:\n        return True\n    #if list is even and all elements are decreasing, return true\n    elif n % 2 == 0 and l[0] > l[n-1]:\n        return True\n    #if list is odd and all elements are equal, return true\n    elif n % 2 == 1 and l[0] == l[n-1]:\n        return True\n    #if list is odd and all elements are increasing, return true\n    elif n % 2 == 1 and l[0] < l[n-1]:\n        return True\n    #if list is odd and all elements are decreasing, return true\n    elif n % 2 == 1 and l[0] > l[n-1]:\n        return True\n    #otherwise, return false\n    else:\n        return False\n",
        "num_ids": 317
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(a <= b for a, b in zip(l[:-1], l[1:])) or all(a >= b for a, b in zip(l[:-1], l[1:]))\n",
        "num_ids": 49
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return True\n    return l[1] - l[0] > 0 and l[-1] - l[-2] < 0\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or \\\n           all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # if list is empty, it's not monotonic\n    if not l:\n        return False\n    # use monotone_stack to keep track of increasing/decreasing\n    monotone_stack = []\n    for i in range(len(l)):\n        if not monotone_stack:\n            monotone_stack.append(l[i])\n            continue\n        if l[i] > monotone_stack[-1]:\n            monotone_stack.append(l[i])\n        else:\n            return False\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if l is None: return False\n    is_dec = False\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_dec = True\n        if l[i] > l[i - 1]:\n            return False\n    if is_dec:\n        return True\n    return False",
        "num_ids": 84
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # if not len(l):\n    #     return True\n    return all(x >= y for x, y in zip(l, l[1:])) or all(x <= y for x, y in zip(l, l[1:]))\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or \\\n           all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n",
        "num_ids": 58
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Get unique values from both lists.\n    set1 = set(l1)\n    set2 = set(l2)\n",
        "num_ids": 31
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n",
        "num_ids": 21
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # use islice\n    if len(l1) < len(l2):\n        return islice(l1, 0, len(l1), 1) & islice(l2, 0, len(l2), 1)\n    else:\n        return islice(l2, 0, len(l2), 1) & islice(l1, 0, len(l1), 1)\n",
        "num_ids": 98
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l1 = sorted(list(set(l1)))\n    l2 = sorted(list(set(l2)))\n    return [i for i in l1 if i in l2]\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert n > 1 and is_prime(n) is False\n    f = 2\n    while n > 1:\n        if is_prime(f) and n % f == 0:\n            n //= f\n        else:\n            f += 1\n    return f\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    p = 2\n    while n > 1:\n        if n % p == 0:\n            n /= p\n        else:\n            p += 1\n    return p\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 2\n    while n > 1:\n        if n % i!= 0:\n            i += 1\n        else:\n            n = n / i\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 2:\n        return 2\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n",
        "num_ids": 52
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n * (n + 1) // ",
        "num_ids": 12
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert type(n) == int and n >= 0, \"n must be a positive integer\"\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n",
        "num_ids": 56
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n * (n + 1) // 2\n",
        "num_ids": 13
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total = total + i\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    total = 0\n    for i in range(n):\n        total += (i + 1)\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return 1\n    return n + sum_to_n(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n",
        "num_ids": 31
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if brackets == \"\":\n        return True\n",
        "num_ids": 12
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    b_list = brackets.strip().split(\"()\")\n    return (len(b_list) == 1) or (brackets.count(\"(\") == brackets.count(\")\"))\n",
        "num_ids": 44
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.append(\"(\")\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return True\n",
        "num_ids": 74
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    open_brackets = [\")\", \"]\", \"}\"]\n    stack = []\n",
        "num_ids": 22
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # index of open parentheses\n    open_paren_index = []\n    # index of closing parentheses\n    close_paren_index = []\n    # open parenthesis\n    open_paren = []\n    # close parenthesis\n    close_paren = []\n",
        "num_ids": 59
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for b in brackets:\n        if b == \"(\":\n            count += 1\n        elif b == \")\":\n            count -= 1\n        if count < 0:\n            return False\n",
        "num_ids": 50
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    left_brackets = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for i in range(len(brackets)):\n        if brackets[i] in bracket_map:\n            left_brackets.append(bracket_map[brackets[i]])\n        elif brackets[i] in left_brackets:\n            left_brackets.pop()\n        else:\n            return False\n    return not left_brackets\n",
        "num_ids": 124
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return not any(b not in \"()\" for b in brackets)\n",
        "num_ids": 18
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in brackets:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n",
        "num_ids": 39
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for ch in brackets:\n        if ch == \"(\":\n            count += 1\n        elif ch == \")\":\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [xs[i] * (len(xs) - i - 1) for i in range(len(xs))]\n",
        "num_ids": 30
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    length = len(xs)\n    res = []\n    if length == 0:\n        return res\n    elif length == 1:\n        return [1]\n    elif length == 2:\n        return [xs[1], 1]\n    else:\n        for i in range(1, length):\n            res.append(xs[i] * i)\n        res.append(xs[-1])\n        return res\n",
        "num_ids": 100
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    size = len(xs)\n    if size == 0:\n        return []\n    elif size == 1:\n        return [0]\n    elif size == 2:\n        return [xs[1] * 1]\n    else:\n        result = [xs[i] * (i+1) for i in range(size-1)]\n        return result + [xs[size-1] * 1]\n",
        "num_ids": 96
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(xs)\n    result = [0] * (n - 1)\n    for i in range(1, n):\n        result[i - 1] = xs[i] * i\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert isinstance(xs, list)\n    assert len(xs) > 0, \"Coefficients can't be empty.\"\n    assert len(xs) == len(set(xs)), \"Duplicate coefficients are forbidden.\"\n    for x in xs:\n        assert x >= 0, \"Coefficients must be >= 0.\"\n    if len(xs) == 1:\n        return [0]\n    if len(xs) == 2:\n        return [xs[1]]\n    else:\n        return [xs[i] for i in range(1, len(xs))]\n",
        "num_ids": 136
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n = len(xs)\n    result = [0 for i in range(n)]\n    for i in range(n):\n        if i == 0:\n            result[i] = xs[i + 1]\n        elif i == n - 1:\n            result[i] = xs[i - 1]\n        else:\n            result[i] = xs[i + 1] - xs[i - 1]\n",
        "num_ids": 102
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i] * i for i in range(1, len(xs))]\n",
        "num_ids": 43
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    out = []\n    for i in range(1, len(xs)):\n        out.append(xs[i] * i)\n    return out\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) == 0:\n        return []\n    else:\n        return [sum([k * j for j in range(1, i+2)]) for i, k in enumerate(xs[1:])] + xs[:1]\n",
        "num_ids": 61
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = [xs[0]]\n    for i in range(len(xs)-1):\n        d.append(xs[i] * i + xs[i+1])\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 41
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return fibfib_dyn(n)\n",
        "num_ids": 13
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(n-2):\n            tmp = b\n            b = a + b\n            a = tmp\n        return b\n",
        "num_ids": 70
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    fib_array = [0,1,1]\n",
        "num_ids": 15
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 0\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return b\n",
        "num_ids": 47
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 1:\n        return 0\n    elif n < 3:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 57
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n    return count + 1 if s[-1] in 'y' else count\n",
        "num_ids": 46
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    vowels = 0\n    for c in s:\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n            vowels += 1\n        elif c == 'y' and s[-1] == 'y':\n            vowels += 1\n    return vowels\n",
        "num_ids": 87
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = set('aeiou')\n    n = 0\n    for i in s:\n        if i in vowels:\n            n += 1\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowel_count = 0\n    for i in s:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            vowel_count += 1\n        elif i == 'y' and s[-1] == 'y':\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 81
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels_count = 0\n    for i in s:\n        if i in 'aeiouy':\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 44
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowel_count = 0\n    for c in s:\n        if c in 'aeiou':\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 42
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # your code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for c in s if c.lower() in 'aeiouy') + sum(1 for c in s if c.lower() in 'yaeiou')\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    vowel_count = 0\n    for i in s:\n        if i in vowels:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 67
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in s:\n        if i in 'aeiou':\n            count += 1\n        if i == 'y':\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join(str(x)[(shift % len(str(x))):] +\n    str(x)[:shift%len(str(x))])\n",
        "num_ids": 40
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not isinstance(shift, int):\n        raise ValueError(\"Expected an integer\")\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift % len(str(x)):] + str(x)[:shift % len(str(x))]\n",
        "num_ids": 78
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if shift > len(str(x)):\n        shift %= len(str(x))\n    if shift == 0:\n        return str(x)\n    digits = [int(x) for x in str(x)]\n    for i in range(shift):\n        digits.append(digits.pop(0))\n    return \"\".join([str(d) for d in digits])\n",
        "num_ids": 94
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    x, result = abs(int(x)), \"\"\n    while x > 0:\n        result = str(x % 10) + result\n        x //= 10\n    if len(result) < shift:\n        result = result + str(x)\n    else:\n        result = result[shift:] + result[:shift]\n    return (-1 if x < 0 else 1) * int(result)\n",
        "num_ids": 94
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    x = str(x)\n    length = len(x)\n    if shift > length:\n        return x[length-1::-1]\n    else:\n        return x[shift:length] + x[0:shift]\n",
        "num_ids": 56
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    digits = str(x)\n    if shift > len(digits):\n        shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]\n",
        "num_ids": 45
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = \"\"\n    for i in range(0, len(str(x))):\n        if i + shift >= len(str(x)):\n            result += str(x)[i + shift - len(str(x)):]\n        else:\n            result += str(x)[i + shift]\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(x, int):\n        return \"Error: x must be an integer.\"\n    elif not isinstance(shift, int):\n        return \"Error: shift must be an integer.\"\n    elif shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n",
        "num_ids": 93
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n        shift %= len(digits)\n    return ''.join(str(d) for d in digits[-shift:] + digits[:-shift])\n",
        "num_ids": 63
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c) - ord('A') for c in s.upper() if c.isupper())\n",
        "num_ids": 28
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([ord(c)-55 for c in s])\n",
        "num_ids": 16
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = 0\n    for char in s:\n        if ord(char) >= 65:\n            result += ord(char) - 65\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            total = total + ord(s[i]) - 64\n    return total\n",
        "num_ids": 57
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(ord(c) - 64 for c in s if c.isupper())",
        "num_ids": 21
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(ord(c) - 64 for c in s if c.isupper())\n",
        "num_ids": 22
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n    \ndigitSum(\"\") # => 0\ndigitSum(\"abAB\") # => 131\ndigitSum(\"abcCd\") # => 67\ndigitSum(\"helloE\") # => 69\ndigitSum(\"woArBld\") # => 131\ndigitSum(\"aAaaaXa\") # => 153",
        "num_ids": 98
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(), s)))\n",
        "num_ids": 27
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(ord(i) for i in s.upper() if i.isalpha())\n",
        "num_ids": 23
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([ord(x) for x in s.upper() if x.isalpha()])\n",
        "num_ids": 24
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # your code here\n    return n - (len(s) - s.count('oranges') - s.count('apples'))\n",
        "num_ids": 36
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    apples,oranges = s.split()\n    return int(apples) + int(oranges) - (int(apples) * 2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    apples = s.count(\"apples\")\n    oranges = s.count(\"oranges\")\n    mangoes = s.count(\"mango\")\n    return n - apples - oranges - mangoes\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    orange_apples = s.count(\"oranges\")*2\n    orange_fruits = s.count(\"oranges\")\n    apple_apples = s.count(\"apples\")*2\n    apple_fruits = s.count(\"apples\")\n    mango_fruits = n-orange_apples-apple_apples\n    return mango_fruits\n",
        "num_ids": 87
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total=n\n    for i in s.split(\" \"):\n        total-=int(i)\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # convert string to int\n    if(n is not None):\n        n = int(n)\n    else:\n        n = 0\n        \n    # add the number of the apple and the number of the orange\n    n = n + s.count('apples') + s.count('oranges')\n    return n - s.count('apples') - s.count('oranges')\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(\" \")[0] - s.split(\" \")[1] - s.split(\" \")[2]\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([int(s[i:i+2]) for i in range(0,len(s),2)]) - int(s[0]) - int(s[-1])\n",
        "num_ids": 45
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    i,j = 0,0\n    while i < len(s) and j < len(s):\n        if s[i] =='':\n            i += 1\n        elif s[j] =='':\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return int(s[j:])-int(s[:i])-int(s[i+1:j])\n",
        "num_ids": 100
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    o,a = s.count(\"orange\"), s.count(\"apple\")\n    return (n - o - a) - (o+a)\n",
        "num_ids": 35
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def even_val(n):\n        return n % 2 == 0\n",
        "num_ids": 18
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    \n    node_index_map = {}\n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            node_index_map[node] = index\n    \n    # Find the smallest even value, and find the node with that value\n    min_even_value = min(node_index_map.keys())\n    min_even_node = node_index_map[min_even_value]\n",
        "num_ids": 111
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    smallest_index = -1\n    smallest_even_value = float(\"inf\")\n",
        "num_ids": 23
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n    ans, i = [], 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            ans.append([arr[i], i])\n            i += 1\n        else:\n            i += 1\n    if ans:\n        return min(ans, key = lambda x: (x[0], x[1]))\n    else:\n        return []\n",
        "num_ids": 102
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [smalest_even_value(arr), smalest_even_index(arr)]\n",
        "num_ids": 25
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    ret = []\n    if len(arr) == 0:\n        return ret\n    smallest_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n                ret = [arr[i], i]\n                smallest_value = arr[i]\n            elif arr[i] == smallest_value:\n                if i < ret[1]:\n                    ret = [arr[i], i]\n    return ret\n",
        "num_ids": 128
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return []\n    min_even = sys.maxsize\n    min_even_index = 0\n    min_even_value = sys.maxsize\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n                min_even_index = i\n                min_even_value = arr[i]\n            elif arr[i] < min_even_value:\n                min_even_value = arr[i]\n                min_even_index = i\n    return [min_even_value, min_even_index]\n",
        "num_ids": 155
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    value = 1\n    while value < len(lst):\n        if lst.count(value) >= value:\n            return value\n        value += 1\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_freq = 0\n    max_num = 0\n",
        "num_ids": 16
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i, val in enumerate(lst):\n        if lst.count(val) > val:\n            return val\n",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = {}\n    for i in lst:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    max_count = max(count.values())\n    for i in count.keys():\n        if count[i] >= max_count:\n            return i\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_freq = 0\n    for num in lst:\n        if lst.count(num) > max_freq:\n            max_freq = lst.count(num)\n    if max_freq == 0:\n        return -1\n    else:\n        return lst[max_freq - 1]\n",
        "num_ids": 79
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # dict\n    # frequency count\n    # if value in dict,\n    #   if value in dict and frequency < frequency_count\n    #     update\n    # return max of dict\n    \n    max_freq = -1\n    d = {}\n    for i in lst:\n        if i in d:\n            if d[i] < lst.count(i):\n                d[i] = lst.count(i)\n        else:\n            d[i] = lst.count(i)\n    for k, v in d.items():\n        if v > max_freq:\n            max_freq = v\n    return max_freq\n",
        "num_ids": 160
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max_freq = max(lst)\n    max_freq_index = lst.index(max_freq)\n    for i in xrange(max_freq_index, -1, -1):\n        if lst[i] >= max_freq:\n            return lst[i]\n    return -1\n    \ndef max_frequency(lst):\n    '''\n    You are given a non-empty list of integers. Find the maximum frequency of any integer in the list.\n    The frequency of a number x is the number of times x appears in the list.\n    You may assume that the list has no repeated integers.\n    Example:\n        max_frequency([1, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4\n        max_frequency([4, 1, 2, 2, 3, 1, 4, 4, 4, 4]) == 4\n    '''\n    max_freq = lst[0]\n    max_freq_count = 1\n    for i in xrange(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            max_freq_count += 1\n        else:\n            if max_freq_count > max_freq:\n                max_freq = max_freq_count\n                max_freq_count = 1\n            else:\n                max_freq_count = 1\n    if max_freq_count > max_freq:\n        max_freq = max_freq_count\n    return max_freq\n",
        "num_ids": 370
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    counts = {}\n    for num in lst:\n        if num not in counts:\n            counts[num] = 0\n        counts[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in counts.items():\n        if count > max_count and (max_num is None or num > max_num):\n            max_num = num\n            max_count = count\n    return max_num if max_num is not None else -1\n",
        "num_ids": 118
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = None\n    for elem in lst:\n        if result == None or result < elem:\n            result = elem\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TASK: write your solution in 1 line(s)\n    return [min(lst), max(lst)] + [x for x in sorted(lst) if x!= min(lst) and x!= max(lst)]\n",
        "num_ids": 60
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst.sort()\n    return lst\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if lst == []:\n        return []\n    \n    lst.sort()\n    \n    for i in range(len(lst)):\n        if i == 0:\n            min_num = lst[i]\n        else:\n            if min_num > lst[i]:\n                min_num = lst[i]\n    \n    lst = [min_num] + lst[len(lst) - 1:] + [min_num]\n    \n    return lst\n    \nif __name__ == \"__main__\":\n    print strange_sort_list([1, 2, 3, 4])\n    print strange_sort_list([5, 5, 5, 5])\n    print strange_sort_list([])",
        "num_ids": 177
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    return lst\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    length = len(lst)\n    if length == 0:\n        return []\n    result = []\n    start = min(lst)\n    count = lst.count(start)\n    while count > 0:\n        result.append(start)\n        lst.remove(start)\n        count -= 1\n    result.extend(lst)\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n    sorted_list = []\n    for i in xrange(len(lst)):\n        # TODO:\n        # lst[i] is minimum value\n        sorted_list.append(lst[i])\n        # lst[-1] is maximum value\n        lst.sort()\n        sorted_list.append(lst[-1])\n    return sorted_list\n",
        "num_ids": 105
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) < 1:\n        return lst\n    n = min(lst)\n    result = [n]\n    lst.remove(n)\n    while len(lst) > 0:\n        m = min(lst)\n        result.append(m)\n        lst.remove(m)\n        n = m\n    result.append(n)\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_lst = []\n    if len(lst) == 0:\n        return new_lst\n    new_lst.append(min(lst))\n    lst.remove(min(lst))\n    new_lst.extend(sorted(lst))\n    new_lst.append(max(lst))\n    return new_lst\n",
        "num_ids": 90
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return []\n    lst.sort()\n    lst.reverse()\n    return lst\n",
        "num_ids": 35
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if lst == []:\n        return []\n    else:\n        lst_sorted = []\n        min_val = min(lst)\n        lst_sorted.append(min_val)\n        for i in lst:\n            if i > min_val:\n                lst_sorted.append(i)\n        max_val = max(lst_sorted)\n        lst_sorted.remove(max_val)\n        lst_sorted.append(max_val)\n        return lst_sorted\n",
        "num_ids": 130
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #\n    # Your code here\n    #\n    #\n    return -1\n",
        "num_ids": 21
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a + b < c:\n        return -1\n    elif a + c < b:\n        return -1\n    elif b + c < a:\n        return -1\n    return round(float(float(a) * float(b) * float(c)) / float(2), 2)",
        "num_ids": 72
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round(sides[0] * sides[1] / 2, 2)\n    else:\n        return -1\n",
        "num_ids": 66
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] <= sides[2]:\n        return -1\n    return round((sides[0] * sides[1] * 0.5), 2)\n",
        "num_ids": 64
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #Your code here\n    if a+b > c and a+c > b and b+c > a:\n        return round((a*b*c)**0.5,2)\n    else:\n        return -1\n",
        "num_ids": 55
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round((s * (s - a) * (s - b) * (s - c)), 2)\n",
        "num_ids": 66
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n",
        "num_ids": 89
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    return round((a * b * 0.5), 2)",
        "num_ids": 41
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    #Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_triangle(a, b, c):\n        return a+b > c and b+c > a and c+a > b\n    if not is_triangle(a, b, c):\n        return -1\n    s = (a+b+c)/2\n    return round((s*(s-a)*(s-b)*(s-c)), 2)\n",
        "num_ids": 91
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in q:\n        sum += i\n    if sum <= w and len(q) == len(q[::-1]):\n        return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return q == q[::-1] and sum(q) <= w\n",
        "num_ids": 19
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    s = sum(q)\n    \n    if s <= w:\n        if s == w or sum(q[::-1]) == w:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    def is_palindrome(l):\n        left, right = 0, len(l)-1\n        while left < right:\n            if l[left]!= l[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def check_sum(l):\n        if sum(l) > w:\n            return False\n        return True\n    \n    return check_sum(q) and is_palindrome(q)",
        "num_ids": 113
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    q.sort()\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # s = sum(q)\n    # return s <= w and is_balanced(q)\n    # return s <= w and balanced(q)\n    \n    if not balanced(q):\n        return False\n    elif sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # q is a palindromic list and the sum of its elements is less than or equal the maximum possible weight, \n    # and it's balanced.\n    return bool(len(q)==1 or q[0]+q[-1]<=w and is_palindrome(q))\n",
        "num_ids": 70
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if isinstance(q, list) is False:\n        return False\n    elif len(q) == 1:\n        return True\n    elif is_palindrome(q) is False:\n        return False\n    elif sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    q_sum = 0\n    for i in q:\n        q_sum += i\n    if q_sum <= w and is_palindromic(q):\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if q == []:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 0 if not arr else min(smallest_change(arr[1:]), smallest_change(arr[:-1])) + abs(sum(arr) - sum(arr[::-1]))\n",
        "num_ids": 48
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # TODO - the result is wrong; should be 1, 2, 3, 0\n    return 0\n",
        "num_ids": 25
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left]!= arr[right]:\n            count += 1\n            if left < right - 1:\n                if arr[left + 1]!= arr[right]:\n                    arr[left], arr[right] = arr[right], arr[left]\n                else:\n                    left += 1\n            else:\n                arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return count\n",
        "num_ids": 134
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def get_palindromic_elements(arr):\n        arr = set(arr)\n        lst = []\n        for elem in arr:\n            if elem * 2 in arr:\n                lst.append(elem)\n        return lst\n",
        "num_ids": 63
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_changes = 0\n    for i in range(len(arr)//2):\n        if arr[i]!= arr[len(arr)-i-1]:\n            num_changes += 1\n    return num_changes\n",
        "num_ids": 54
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n",
        "num_ids": 6
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    arr.sort()\n    l = len(arr)\n    s = sum(arr)\n    f = l // 2\n    t = (s - f) // 2\n    f = min(f, t)\n    r = 0\n    m = s - 2 * f\n    for i in range(l // 2):\n        if m > arr[i] + arr[l - i - 1]:\n            r = 1\n            break\n        elif m == arr[i] + arr[l - i - 1]:\n            r = 2\n            break\n        else:\n            r = 0\n    return r\n",
        "num_ids": 142
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    changes = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if arr[start]!= arr[end]:\n            changes += 1\n        start += 1\n        end -= 1\n    return changes\n",
        "num_ids": 62
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return _smallest_change(arr, 0, len(arr)-1)\n",
        "num_ids": 20
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if len(lst1) <= len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 35
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [val for val in lst1 if sum(map(len, val)) < sum(map(len, lst2))]\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1[len(lst2):]\n    else:\n        return lst2[len(lst1):]\n",
        "num_ids": 49
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    else:\n        return total_match(lst1, lst2)\n",
        "num_ids": 51
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return total_match_helper(lst1, lst2)\n    \ndef total_match_helper(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 93
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst1) > len(lst2):\n        lst2, lst1 = lst1, lst2\n    \n    lst1_len = len(lst1)\n    lst2_len = len(lst2)\n    lst1_set = set(lst1)\n    for x in lst1_set:\n        if lst1_len - lst2_len + lst1.count(x) > lst1_len:\n            return lst1\n    return lst2",
        "num_ids": 130
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        total = 0\n        for i in lst1:\n            total += len(i)\n        for i in lst2:\n            total -= len(i)\n        if total < 0:\n            return lst1\n        else:\n            return lst2\n            \n",
        "num_ids": 91
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    else:\n        if len(lst1) == len(lst2):\n            return lst1\n        else:\n            smallest = min(len(lst1), len(lst2))\n            for index in range(smallest):\n                if lst1[index] < lst2[index]:\n                    return lst1[:index]\n            return lst1[smallest:]\n",
        "num_ids": 127
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) > 0 and len(lst2) == 0:\n        return lst1\n    elif len(lst1) == 0 and len(lst2) > 0:\n        return lst2\n    elif len(lst1) == len(lst2) and len(lst1) == len(set(lst1) & set(lst2)):\n        return lst1\n    else:\n        return [x for x in lst1 if len(x) <= len(lst2[0])]\n",
        "num_ids": 159
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for b in range(2, a):\n        if (a % b) == 0:\n            return False\n    return True",
        "num_ids": 30
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = []\n    for i in range(2, 100):\n        if i % 2 == 0:\n            continue\n        for j in range(3, 100):\n            if i % j == 0:\n                l.append(j)\n                break\n    return len(l) == 0\n",
        "num_ids": 69
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #It is possible to prove that 30 is divisible by 3! But this is a very hard problem.\n    #We know that the number is divisible by 3! Now it is time to prove that it is not divisible by any multiple of 2, \n    #and it is also possible to prove that it is not divisible by any multiple of 5\n    for i in xrange(2,a/2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 110
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True",
        "num_ids": 37
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if is_prime(a):\n        return False\n    # 2*3 is a multiply of 3 \n    for i in range(3, int(a/2), 2):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, 100):\n        if (a % i == 0):\n            if (is_prime(i) and is_prime(int(a/i))):\n                count = count + 1\n    if count == 3:\n        return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    prime_count = 0\n    while a % 2 == 0:\n        prime_count += 1\n        a /= 2\n    if prime_count > 1:\n        return False\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # need to use below method with prime list that has 5000 elements\n    # if a is divisible by any of the numbers in the list, return false\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    for prime in prime_list:\n        if a % prime == 0:\n            return False\n    return True\n",
        "num_ids": 282
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return n**int(x) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n**int(math.log(x, n)) == x\n",
        "num_ids": 18
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == n**int(log(x, n))\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return n**int(x)==x",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return x == 1\n    elif n == 2:\n        return x % 2 == 0\n    else:\n        if x == 1:\n            return True\n        elif x % n == 0:\n            return is_simple_power(x / n, n)\n        else:\n            return False\n",
        "num_ids": 78
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x ** n == x\n",
        "num_ids": 9
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    \n    return n**int(x)==x\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return True if n**int(x)==x else False\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n > 1:\n        if x == n ** int(math.log(n, 2)) and (n ** int(math.log(n, 2))) % n == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x == n ** int(math.log(x, n))\n",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a>=0:\n        return a*a*a == int(a*a*a)\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a == a**3\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 0:\n        a *= -1\n    return a**3 == a\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True if this \n    integer is prime, or False if it is not.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(1) ==> False\n    isprime(2) ==> True\n    isprime(4) ==> False\n    isprime(5) ==> True\n    '''\n    if a < 2:\n        return False\n    for i in xrange(2, int(a**0.5)+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 174
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a == 0:\n        return True\n    elif a > 0:\n        return (a**3 == a)\n    elif a < 0:\n        return (a**3 == -a)\n",
        "num_ids": 49
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a*a*a == a*a*a)\n",
        "num_ids": 17
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return a*a*a == a\n",
        "num_ids": 11
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a ** 3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a == 0:\n        return True\n    if a > 0:\n        for i in range(1, a):\n            if i ** 3!= a:\n                return False\n        return True\n    if a < 0:\n        for i in range(a, 0):\n            if i ** 3!= a:\n                return False\n        return True\n    return False\n",
        "num_ids": 88
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return a*a*a == a**3\n",
        "num_ids": 13
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    total = 0\n    for i in num:\n        i = int(i)\n        if i in p:\n            total += 1\n    return total\n",
        "num_ids": 457
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    primes = [2, 3, 5, 7, 11, 13, 17]\n    n = len(num)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0 if num[0] not in '0123456789ABCDEF' else 1\n    nums = [str(i) for i in range(10)]\n    nums[0] = '0'\n    counter = 0\n    if num[0] in nums:\n        counter += 1\n    if num[1] in nums:\n        counter += 1\n    if num[2] in nums:\n        counter += 1\n    for i in range(3, n):\n        if num[i] in nums:\n            counter += 1\n            if num[i] == '0':\n                if num[i-1] == '0' and num[i-2]!= '0':\n                    counter -= 1\n            elif num[i-1] == '0' and num[i-2]!= '0':\n                counter -= 1\n            elif num[i-1] in '0' and num[i-2]!= '0':\n                counter -= 1\n    return counter\n",
        "num_ids": 286
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # http://stackoverflow.com/questions/2351622/find-number-of-prime-numbers-less-than-n\n    \n    return sum([is_prime(int(num[i:i+2], 16)) for i in range(0, len(num), 2)])\n",
        "num_ids": 72
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num = str(num)\n    count = 0\n    while num:\n        if is_prime(int(num[0])):\n            num = num[1:]\n            count += 1\n        else:\n            num = num[1:]\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in num:\n        if i == 'B' or i == 'D':\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(filter(is_prime, [int(num[i]) for i in range(0, len(num), 2)]))\n    \n",
        "num_ids": 35
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if num:\n        if 'A' not in num and 'B' not in num and 'C' not in num and 'D' not in num and 'E' not in num and 'F' not in num:\n            # this is a prime\n            num = int(num, 16)\n            num_of_primes = 0\n            if num > 1:\n                for i in range(2, num):\n                    if (num % i) == 0:\n                        break\n                    else:\n                        num_of_primes += 1\n                return num_of_primes\n            else:\n                return 0\n        else:\n            return 0\n    else:\n        return 0\n",
        "num_ids": 157
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def is_prime(n):\n        \"\"\"\n        Returns True if n is a prime number, \n        False otherwise.\n        \"\"\"\n        if n == 1:\n            return False\n        for d in range(2, n):\n            if n % d == 0:\n                return False\n        return True\n    \n    def next_prime(n):\n        \"\"\"\n        Returns the smallest prime number bigger than n.\n        \"\"\"\n        if n <= 1:\n            return 2\n        elif n == 2:\n            return 3\n        else:\n            n += 1\n            while not is_prime(n):\n                n += 2\n        return n\n    \n    # count the number of hexadecimal digits\n    count = 0\n    for i in num:\n        if i == \"0\" or i == \"1\" or i == \"2\" or i == \"3\" or i == \"4\" or i == \"5\" or i == \"6\" or i == \"7\" or i == \"8\" or i == \"9\" or i == \"A\" or i == \"B\" or i == \"C\" or i == \"D\" or i == \"E\" or i == \"F\":\n            count += 1\n    \n    # find all primes\n    primes = []\n    for i in range(10, next_prime(2**count)):\n        if is_prime(i):\n            primes.append(i)\n    \n    # find the number of hexadecimal digits that are primes\n    hex_digits = {}\n    for n in primes:\n        hex_digits[n] = 0\n    for i in num:\n        if i == \"0\" or i == \"1\" or i == \"2\" or i == \"3\" or i == \"4\" or i == \"5\" or i == \"6\" or i == \"7\" or i == \"8\" or i == \"9\" or i == \"A\" or i == \"B\" or i == \"C\" or i == \"D\" or i == \"E\" or i == \"F\":\n            hex_digits[int(i)] += 1\n    for key, value in hex_digits.iteritems():\n        if key == 2 or key == 3 or key == 5 or key == 7 or key == 11 or key == 13:\n            hex_digits[key] += 1\n    \n    return sum(hex_digits.values())\n",
        "num_ids": 561
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return format(decimal, '011b')\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    binary = []\n    while decimal:\n        binary.append(str(decimal % 2))\n        decimal = decimal // 2\n",
        "num_ids": 32
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    binary_str = \"\"\n    for i in range(0,8):\n        if(int(decimal)%2 == 0):\n            binary_str += '0'\n        else:\n            binary_str += '1'\n        decimal = int(decimal/2)\n    binary_str = 'db' + binary_str + 'db'\n    return binary_str\n",
        "num_ids": 90
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary_str = \"\"\n    while decimal > 0:\n        if decimal % 2 == 1:\n            binary_str = \"1\" + binary_str\n        else:\n            binary_str = \"0\" + binary_str\n        decimal /= 2\n    if len(binary_str) < 32:\n        binary_str = \"0\" * (32 - len(binary_str)) + binary_str\n    else:\n        binary_str = binary_str[:32]\n    return \"db\" + binary_str + \"db\"\n",
        "num_ids": 127
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    bin_string = \"\"\n    while decimal!= 0:\n        bin_string = str(decimal % 2) + bin_string\n        decimal = decimal / 2\n    bin_string = \"db\" + bin_string + \"db\"\n    return bin_string\n",
        "num_ids": 64
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return \"db\" + \"\".join(reversed(binary)) + \"db\"\n",
        "num_ids": 52
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = \"\"\n    if decimal == 0:\n        return \"db0db\"\n    while decimal!= 0:\n        result = str(decimal % 2) + result\n        decimal = decimal >> 1\n    return \"db\" + result\n",
        "num_ids": 58
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    decimal_as_string = str(decimal)\n    return \"db\" + ''.join('1' if digit == '1' else '0' for digit in decimal_as_string) + \"db\"\n",
        "num_ids": 51
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    binary_string = \"\"\n    while decimal:\n        remainder = decimal % 2\n        binary_string = str(remainder) + binary_string\n        decimal /= 2\n    binary_string = \"db\" + binary_string\n    return binary_string\n",
        "num_ids": 64
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # pass\n    if decimal == 0:\n        return \"db0db\"\n    binary = []\n    while decimal > 0:\n        binary.append(str(decimal % 2))\n        decimal /= 2\n    return \"\".join(reversed(binary)) + \"db\"",
        "num_ids": 68
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(s) >= 3 and all([s.count(s[i:i+3]) == 1 for i in range(len(s))])\n",
        "num_ids": 37
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    s = s.lower()\n    if len(s) < 3:\n        return False\n    else:\n        i = 0\n        while i < len(s) - 3:\n            if s[i] == s[i + 3]:\n                return False\n            i += 1\n        return True\n",
        "num_ids": 71
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s[:-2])\n",
        "num_ids": 42
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(s)>=3 and len(set(s))==len(s)\n",
        "num_ids": 23
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    visited = set()\n    for i in xrange(n-3):\n        if s[i] == s[i+3]:\n            return False\n        elif s[i] + s[i+1] + s[i+2] in visited:\n            return False\n        visited.add(s[i] + s[i+1] + s[i+2])\n    return True\n",
        "num_ids": 115
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    count = 0\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    distinct = []\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n",
        "num_ids": 63
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)-3):\n        if s[i] == s[i+3]:\n            return False\n    return True",
        "num_ids": 49
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n        i += 1\n    return True",
        "num_ids": 70
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if grades == []:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    grades = grades[:]\n    grades.sort(reverse=True)\n    grades = grades[0:5]\n    return [grading_system_grade(grade) for grade in grades]\n",
        "num_ids": 45
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    grades = [round(x, 2) for x in grades]\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n",
        "num_ids": 311
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n",
        "num_ids": 18
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [grades_to_letter_grade(g) for g in grades]\n",
        "num_ids": 20
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    pass\n",
        "num_ids": 54
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n",
        "num_ids": 51
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if grades[0] == 4.0:\n        return ['A+']\n    elif grades[0] > 3.7:\n        return ['A']\n    elif grades[0] > 3.3:\n        return ['A-']\n    elif grades[0] > 3.0:\n        return ['B+']\n    elif grades[0] > 2.7:\n        return ['B']\n    elif grades[0] > 2.3:\n        return ['B-']\n    elif grades[0] > 2.0:\n        return ['C+']\n    elif grades[0] > 1.7:\n        return ['C']\n    elif grades[0] > 1.3:\n        return ['C-']\n    elif grades[0] > 1.0:\n        return ['D+']\n    elif grades[0] > 0.7:\n        return ['D']\n    elif grades[0] > 0.0:\n        return ['D-']\n    else:\n        return ['E']\n",
        "num_ids": 248
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [letter_grade(gpa) for gpa in grades]\n    # return [grade_equation[gpa] for gpa in grades]\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(2,len(string)):\n        if len(string)%i == 0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = string.strip()\n    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        return True\n    for num in range(2, len(string)):\n        if string[num] == string[0] or string[num] == string[-1]:\n            continue\n        else:\n            return False\n    return True",
        "num_ids": 88
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    #Assumes s is a string\n    s = str(string)\n    length = len(s)\n    \n    #Break up the string into the individual characters\n    for i in range(length):\n        #print('#'*50)\n        #print(i)\n        #print(s[i])\n        \n        #For each character, check if the number is prime\n        if isPrime(i+1) == False:\n            return False\n    return True\n        \ndef isPrime(n):\n    \"\"\"Returns True if n is prime and False otherwise\n    Assumes n is a nonnegative integer\n    \"\"\"\n    if n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for x in range(2,n):\n            if n % x == 0:\n                return False\n    return True\n",
        "num_ids": 213
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    string = str(string)\n    prime = True\n    for i in range(2, len(string)):\n        if (len(string) % i) == 0:\n            prime = False\n            break\n    return prime\n",
        "num_ids": 54
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(string) < 2:\n        return False\n    elif len(string) == 2:\n        return True\n    else:\n        for i in range(2,len(string)):\n            if len(string) % i == 0:\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        for i in range(2, len(string)):\n            if len(string) % i == 0:\n                return False\n            else:\n                continue\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) == 1:\n        return True\n    if len(string) % 2 == 0:\n        return False\n    return all(map(lambda x: string[x] == string[len(string)-1-x], range(int(len(string)/2),0,-1)))\n",
        "num_ids": 70
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(string) == 1:\n        return False\n    else:\n        i = 2\n        while i < len(string) and string[:i]!= '':\n            if string[:i] in string[i:]:\n                return False\n            i += 1\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(string) == 1:\n        return False\n    for i in xrange(2,len(string)):\n        if len(string)%i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #def prime_length(string):\n    #    #return len(string) % 2 == 0\n    #    return len(string) % 2 == 0 and len(string) > 1\n",
        "num_ids": 45
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(1, 10**n) if str(i).startswith('1') or str(i).endswith('1'))\n",
        "num_ids": 41
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    \n    start_count = [0 for i in range(10)]\n    end_count = [0 for i in range(10)]\n    \n    for i in range(1, n+1):\n        start_count[i%10] += 1\n        end_count[(n-i)%10] += 1\n    \n    total = start_count[1] + end_count[1]\n    \n    for i in range(2, 10):\n        total += start_count[i] + end_count[9-i]\n    \n    return total\n",
        "num_ids": 144
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 0\n    return 1\n",
        "num_ids": 27
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(digit_sum(x) == n for x in range(10**(n-1), 10**n))\n",
        "num_ids": 30
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return starts_one_ends(n-1) + starts_one_ends(n-2)\n",
        "num_ids": 47
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    start = [0] * (n + 1)\n    end = [0] * (n + 1)\n    \n    if n == 1:\n        return 0\n    \n    start[0] = 1\n    start[1] = 0\n    \n    for i in xrange(2, n + 1):\n        start[i] = start[i - 1]\n        end[i] = start[i] + end[i - 1]\n        \n    return start[n]",
        "num_ids": 115
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = 0\n    for i in range(10**(n-1), 10**n):\n        start = int(str(i)[0])\n        end = int(str(i)[-1])\n        if start == 1 or end == 1:\n            res += 1\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1 or i % 10 == 9:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in xrange(1, n+1):\n        if i < 10:\n            if i == 1:\n                count += 1\n            elif i == 9:\n                count += 1\n        else:\n            if i % 10 == 1:\n                count += 1\n            elif i % 10 == 9:\n                count += 1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Write your code here\n    total = 0\n    while N:\n        total += N % 2\n        N //= 2\n    return str(total)",
        "num_ids": 37
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    N = str(N)\n    total = 0\n    for char in N:\n        total += int(char)\n    return int_to_binary(total)\n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Simple\n    # return str(bin(N))[2:]\n    \n    # https://stackoverflow.com/questions/22291411/python-slicing-using-string-formatting-with-parameters\n    return \"\".join([str((N >> i) & 1) for i in range(0,32)])\n",
        "num_ids": 84
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n    return \"\"\n",
        "num_ids": 8
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(N):\n        sum += int(input())\n    return bin(sum)",
        "num_ids": 29
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    binary = \"\"\n    sum = 0\n    while N > 0:\n        digit = N % 2\n        N /= 2\n        sum += digit\n        binary += str(digit)\n    return binary",
        "num_ids": 47
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    output = \"\"\n    while N > 0:\n        output += str(N % 2)\n        N /= 2\n    return output[::-1]\n",
        "num_ids": 38
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    total = 0\n    while N > 0:\n        #total += 1\n        total += N%2\n        N = N//2\n    \n    return str(total)\n",
        "num_ids": 44
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = str(N)\n    s = 0\n    for c in n:\n        s += int(c)\n    return str(bin(s))[2:]\n",
        "num_ids": 41
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(map(str, bin(N).replace('0b', '')))\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    index = 0\n    while index < len(lst):\n        if (index % 2) == 0:\n            lst[index] += lst[index]\n        index += 1\n    return lst",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(lst[::2])",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = 0\n    for i in lst:\n        if i % 2 == 0:\n            res += i\n    return res\n",
        "num_ids": 32
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n",
        "num_ids": 28
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(len(lst)):\n        if (i % 2 == 0):\n            res.append(lst[i])\n    return sum(res)\n",
        "num_ids": 47
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if lst == []:\n        return\n    if len(lst) < 2:\n        return lst[0]\n    if lst[0] % 2 == 0:\n        lst[0] = lst[0] + add(lst[1:])\n    else:\n        return lst[0] + add(lst[1:])\n",
        "num_ids": 87
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(lst[::2])\n    \n    \n    \n    \n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(lst[::2])",
        "num_ids": 11
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    index = 0\n    while index < len(lst):\n        if index % 2 == 0:\n            lst[index] += 1\n        index += 1\n",
        "num_ids": 39
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def reverse_map(s):\n        l = []\n        for c in s:\n            l.append((c, ord(c)))\n        l.sort(key = lambda x: x[1])\n        res = ''\n        for c, o in l:\n            res += c\n        return res\n    return reverse_map(s)\n",
        "num_ids": 81
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split(' ')\n    return''.join(sorted(s, key=lambda x: ord(x[0])))",
        "num_ids": 33
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(sorted(s.split(), key=len))\n",
        "num_ids": 19
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    tokens = s.split(\" \")\n    new_tokens = []\n    for token in tokens:\n        token = list(token)\n        token.sort()\n        new_tokens.append(\"\".join(token))\n    return \" \".join(new_tokens)\n",
        "num_ids": 71
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(sorted(s.split()))\n",
        "num_ids": 15
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join([i for i in s.split() if i.isalpha()])\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = s.split()\n    string.sort(key=lambda x: x.strip())\n    string =''.join(string)\n    return string\n",
        "num_ids": 37
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(sorted(s.split(), key=str.lower))\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    row_lst = []\n    if lst:\n        if isinstance(lst[0], list):\n            for row in lst:\n                row_lst.append(get_row(row, x))\n        else:\n            for row in lst:\n                row_lst.append(get_row(row, x))\n            for i, row in enumerate(row_lst):\n                row_lst[i] = sorted(row, key=lambda x: x[1], reverse=True)\n    else:\n        return []\n    row_lst = sorted(row_lst, key=lambda x: x[0])\n    return row_lst\n",
        "num_ids": 162
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def get_new_lst(lst, x):\n        new_lst = []\n        for row in lst:\n            new_row = []\n            for index, elem in enumerate(row):\n                new_row.append((index, elem))\n            new_row.sort(key=lambda elem: elem[1])\n            new_row.sort(key=lambda elem: elem[0], reverse=True)\n            new_row = [elem[1] for elem in new_row]\n            new_lst.append(new_row)\n        return new_lst\n",
        "num_ids": 147
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def get_coord(lst, x, y, rows, columns):\n        # note that rows are going to increase downwards\n        if not lst:\n            return []\n        \n        if len(lst) > rows:\n            # we are at an invalid coordinate (rows, columns)\n            return []\n        \n        if y >= columns:\n            return []\n        \n        first, rest = lst[0], lst[1:]\n        \n        if first == x:\n            return [(rows, y)] + get_coord(rest, x, y+1, rows, columns)\n        else:\n            return get_coord(rest, x, y+1, rows, columns) + [(rows, y)]\n    \n    row_sorted = sorted(lst)\n    return get_coord(row_sorted, x, 0, len(row_sorted), len(row_sorted[0]))\n",
        "num_ids": 213
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(enumerate(lst), key = lambda x: (x[0], -x[1]))\n",
        "num_ids": 29
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not lst:\n        return []\n    \n    rows = [row[:] for row in lst]\n    rows.sort()\n    rows.sort(reverse=True)\n    \n    # row index: rows[0][0] = 0\n    # column index: columns[0][0] = 0\n    row_index, column_index = 0, 0\n    result = []\n    \n    for row in rows:\n        if row[0] == x:\n            result.append((row_index, column_index))\n        \n        if row[-1] > x:\n            row_index += 1\n            \n    return result\n",
        "num_ids": 151
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    return sorted(lst, key=lambda row: (row[0], row[-1]))\n",
        "num_ids": 31
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return []",
        "num_ids": 4
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    return [tuple(lst[i]) for i in range(len(lst)) if lst[i][0] == x]\n",
        "num_ids": 76
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(array)",
        "num_ids": 7
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(array) == 0:\n        return array\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert array and isinstance(array, list)\n    sort_arr = [0] * len(array)\n    for i in xrange(0, len(array)):\n        for j in xrange(0, len(array)):\n            if sum(array[i:j + 1]) % 2!= 0:\n                sort_arr[j] = array[i]\n            else:\n                sort_arr[j] = array[i]\n    return sort_arr\n",
        "num_ids": 112
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(array)\n",
        "num_ids": 8
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    array.sort()\n    return array\n",
        "num_ids": 11
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(array) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(array) if sum(array[0], array[-1]) % 2 else sorted(array, reverse=True)\n",
        "num_ids": 31
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    sort_array_helper(array, 0, len(array) - 1)\n    return array\n",
        "num_ids": 49
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(array) < 2:\n        return array\n    pivot = array[0]\n    return [pivot] + sort_array([x for x in array[1:] if x < pivot]) + sort_array([x for x in array[1:] if x >= pivot])\n",
        "num_ids": 67
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s[1:] + s[0]\n",
        "num_ids": 13
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    key = 'abcdefghijklmnopqrstuvwxyz'\n    new_key = key[-2:] + key[:-2]\n    table = str.maketrans(key, new_key)\n    return s.translate(table)\n",
        "num_ids": 65
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    rotated = alphabet[len(alphabet):] + alphabet[:len(alphabet)]\n    return ''.join([rotated[alphabet.index(char)] for char in s])\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    #make a dict of the alphabet to use\n    alpha = {'a':'abcdefghijklmnopqrstuvwxyz',\n        'b':'abcdefghijklmnopqrstuvwxyzab',\n        'c':'abcdefghijklmnopqrstuvwxyzabc',\n        'd':'abcdefghijklmnopqrstuvwxyzabcd',\n        'e':'abcdefghijklmnopqrstuvwxyzabcde',\n        'f':'abcdefghijklmnopqrstuvwxyzabcdef',\n        'g':'abcdefghijklmnopqrstuvwxyzabcdefg',\n        'h':'abcdefghijklmnopqrstuvwxyzabcdefgh',\n        'i':'abcdefghijklmnopqrstuvwxyzabcdefghi',\n        'j':'abcdefghijklmnopqrstuvwxyzabcdefghij',\n        'k':'abcdefghijklmnopqrstuvwxyzabcdefghijk',\n        'l':'abcdefghijklmnopqrstuvwxyzabcdefghijk',\n        'm':'abcdefghijklmnopqrstuvwxyzabcdefghijkl',\n        'n':'abcdefghijklmnopqrstuvwxyzabcdefghijklm',\n        'o':'abcdefghijklmnopqrstuvwxyzabcdefghijklmn',\n        'p':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop',\n        'q':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq',\n        'r':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr',\n        's':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        't':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'u':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'v':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'w':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'x':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'y':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs',\n        'z':'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst'}\n    #take the input and make sure it is lowercase\n    s = s.lower()\n    #make a new variable that is the output\n    out = ''\n    #loop through the string\n    for i in range(0, len(s)):\n        #get the letter and make sure it is a letter\n        if s[i] in alpha:\n            #get the index of the letter\n            index = ord(s[i]) - 97\n            #get the alphabet letter\n            letter = alpha[s[i]][(index + 2) % 26]\n            #add the letter to the output\n            out += letter\n    #return the output\n    return out\n",
        "num_ids": 854
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if s.isalpha():\n        return chr((ord(s) - 97) + 2)\n    else:\n        return 'invalid string'\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'.upper()\n    l = len(alphabet)\n    \n    def encrypt(string):\n        return ''.join([alphabet[(alphabet.index(i)+l)%l] for i in string])\n    \n    return encrypt(s)\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    #alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'.upper()\n    l = len(alphabet)\n    \n    def decrypt(string):\n        return ''.join([alphabet[(alphabet.index(i)-l)%l] for i in string])\n    \n    return decrypt(s)\n    \ndef main():\n    s = input('Enter a string: ')\n    print('Encrypted string: ', encrypt(s))\n    print('Decrypted string: ', decrypt(s))\n",
        "num_ids": 373
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join([encrypt_letter(x) for x in s])\n",
        "num_ids": 20
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    rotated = letters[-2:] + letters[:-2]\n    return ''.join(rotated[letters.index(i)] for i in s)\n",
        "num_ids": 58
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = s.lower()\n    def encrypt(s):\n        alpha = alphabet[:]\n        alpha.append(alpha.pop(0))\n        return ''.join([alpha[ord(i)-97] for i in s])\n    return encrypt\n",
        "num_ids": 59
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    encrypt = \"\"\n    for letter in s:\n        if letter in string.ascii_letters:\n            encrypt += alphabet[(alphabet.index(letter) + 2) % 26]\n        elif letter in string.digits:\n            encrypt += alphabet[(alphabet.index(letter) + 2) % 10]\n        else:\n            encrypt += letter\n    return encrypt\n",
        "num_ids": 94
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # if there is only one item in the list, there is no way to retrieve the next smallest element\n    if len(lst) == 1:\n        return None\n    \n    # otherwise, we need to use the algorithm described here: https://en.wikipedia.org/wiki/Largest_number_smallest_integer\n    sorted_lst = sorted(lst)\n    lst = [i for i in lst if i!= sorted_lst[0]]\n    lst.append(sorted_lst[0])\n    \n    return lst[1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1025
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if len(lst) < 2:\n        return None\n    smallest = lst[0]\n    for i in lst:\n        if i < smallest:\n            smallest = i\n    smallest_index = lst.index(smallest)\n    return lst[smallest_index + 1]\n",
        "num_ids": 77
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) <= 1:\n        return None\n    return sorted(lst)[1]\n",
        "num_ids": 26
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return min(lst)\n",
        "num_ids": 9
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n    \n",
        "num_ids": 33
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst.sort()\n    if len(lst)<2:\n        return None\n    return lst[1]\n",
        "num_ids": 31
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your code here\n    return sorted(lst)[1] if len(lst) > 1 else None\n",
        "num_ids": 27
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # idea: compare lst[0] to the 2nd smallest value in the list\n    # if lst[0] is smaller than the 2nd smallest, return it\n    if not lst:\n        return None\n",
        "num_ids": 51
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None\n    lst = sorted(lst)\n    if len(lst) == 1:\n        return None\n    elif len(lst) == 2:\n        return lst[1]\n    else:\n        return lst[1]\n",
        "num_ids": 73
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([\"I\" in word for word in S.split(\".\") + S.split(\"?\") + S.split(\"!\")])",
        "num_ids": 33
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for s in S.split('.') if s.startswith('I'))\n",
        "num_ids": 26
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(word.startswith(\"I\") for word in S.split())\n    \n",
        "num_ids": 23
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return S.count(\"I\")\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for word in S.split('.') if word.startswith('I'))\n",
        "num_ids": 26
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(filter(lambda x: x[0] == 'I', S.split('.')))\n",
        "num_ids": 25
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for sentence in S.split():\n        if sentence[:2] == \"I \":\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return S.count('I')\n",
        "num_ids": 10
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = 0\n    for s in S.split():\n        if s[0] == 'I':\n            n += 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(s.startswith('I') for s in S.split('.') + S.split('?') + S.split('!'))\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return ((x + y == z) or (x == y + z)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n",
        "num_ids": 44
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x == y + z or x == z + y or x == y + z:\n        return type(x) == int\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if int(x) == x and int(y) == y and int(z) == z:\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 39
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))",
        "num_ids": 93
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x == (y + z) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n    \nany_int(3, 2, 2)\n    \n    ",
        "num_ids": 51
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return int(x) == (y+z) and (type(x) == type(y) == type(z) == int)\n",
        "num_ids": 33
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if type(x) is int and type(y) is int and type(z) is int:\n        return (x == (y + z)) and (type(x) is int) and (type(y) is int) and (type(z) is int)\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all_int(x, y, z) or all_int(x, z, y) or all_int(z, x, y)\n    \n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if type(x) == type(y) == type(z) == int:\n        if (x == y + z) or (x == y - z) or (x == z - y) or (x == z + y):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # replace vowels\n    for vowel in vowels:\n        message = message.replace(vowel, vowel[1] + vowel[1])\n        \n    # replace non vowels\n    message = message.replace(' ','')\n    message = message.replace('!', '!')\n    message = message.replace('?', '?')\n    message = message.replace(',', ',')\n    message = message.replace(':',':')\n    message = message.replace(';',';')\n    message = message.replace('\"','\"')\n    message = message.replace('-','-')\n    message = message.replace('(','( ')\n    message = message.replace(')',') ')\n    \n    # case\n    message = message.lower()\n    \n    return message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'TEST'\n    >>> decode('TKHS KS C MGSSCGG')\n    'THIS IS A MESSAGE'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    # replace vowels\n    for vowel in vowels:\n        message = message.replace(vowel, vowel[0] + vowel[0])\n        \n    # replace non vowels\n    message = message.replace(' ','')\n    message = message.replace('!', '!')\n    message = message.replace('?', '?')\n    message = message.replace(',', ',')\n    message = message.replace(':',':')\n    message = message.replace(';',';')\n    message = message.replace('\"','\"')\n    message = message.replace('-','-')\n    message = message.replace('(','( ')\n    message = message.replace(')',') ')\n    \n    # case\n    message = message.upper()\n    \n    return messag",
        "num_ids": 551
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    message = message.lower()\n    new_message = []\n    for char in message:\n        if char.isalpha():\n            if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u':\n                new_char = chr(ord(char) + 2)\n            else:\n                new_char = chr(ord(char) + 1)\n            new_message.append(new_char)\n        else:\n            new_message.append(char)\n    return ''.join(new_message)\n",
        "num_ids": 136
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    #TODO\n    return message\n",
        "num_ids": 32
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    message = message.lower()\n    n = len(message)\n    d = {'a':'1','e':'2','i':'3','o':'4','u':'5'}\n    result = []\n    for i in range(n):\n        if message[i] in 'aeiou':\n            result.append(d[message[i]])\n        else:\n            result.append(message[i])\n    return ''.join(result)\n",
        "num_ids": 112
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = \"aeiouAEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded = \"\"\n    message = message.lower()\n    for letter in message:\n        if letter in vowels:\n            encoded += letters[vowels.index(letter) + 2]\n        else:\n            encoded += letter\n    return encoded\n    \ndef test():\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n",
        "num_ids": 136
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    res = ''\n    for c in message:\n        res += alphabet[(alphabet.find(c.lower()) + 2) % len(alphabet)]\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #your code here\n    vowels = 'aeiouAEIOU'\n    dic = {v:k for v,k in zip(vowels, vowels[1:])}\n    return ''.join([dic.get(i, i) for i in message.lower()])\n",
        "num_ids": 72
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    \n    def replace_vowel(vowel):\n        \"Place vowel 2 places ahead of vowel in alphabet\"\n        if vowel in vowels:\n            return str(vowels.index(vowel)+2)\n        else:\n            return str(vowels.index(vowel))\n",
        "num_ids": 102
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a\n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n",
        "num_ids": 129
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    import re\n    \n    message = re.sub('[^a-zA-Z]','', message)\n    \n    vowels = ('a', 'e', 'i', 'o', 'u')\n    \n    n = len(message)\n    \n    out = []\n    \n    for i in xrange(n):\n        if message[i].lower() in vowels:\n            c = ord(message[i])\n            c += 2\n            if c > ord('z'):\n                c = ord('a') + ((c - ord('z')) - 1)\n            out.append(chr(c))\n        else:\n            out.append(message[i])\n    \n    return \"\".join(out)",
        "num_ids": 175
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    biggest = 0\n    for el in lst:\n        if is_prime(el):\n            biggest += sum(str(el))\n    return biggest\n",
        "num_ids": 39
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([int(str(max(lst)).replace(str(max(lst)),'')) for i in lst if isprime(max(lst))])\n",
        "num_ids": 41
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    for i in lst:\n        if lst.count(i) > 1:\n            lst.remove(i)\n    lst = sorted(lst)\n    answer = 0\n    for i in lst:\n        answer += i\n    return answer\n",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort()\n    max_num = lst[len(lst)-1]\n    lst = lst[:len(lst)-1]\n    lst_prime = []\n    for i in lst:\n        if prime(i) == True:\n            lst_prime.append(i)\n    if len(lst_prime) > 0:\n        max_num = lst_prime[0]\n        for i in range(0,len(lst_prime)):\n            if lst_prime[i] > max_num:\n                max_num = lst_prime[i]\n    return sum(map(int,str(max_num)))\n    \n",
        "num_ids": 165
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #your code here\n    lst = [int(i) for i in lst]\n    max_prime = 0\n    for i in lst:\n        max_prime = max_prime_prime(i)\n    #print(max_prime)\n    summ = 0\n    for i in str(max_prime):\n        summ += int(i)\n    return summ\n",
        "num_ids": 91
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(int(n) for n in map(str, lst) if is_prime(n))",
        "num_ids": 26
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst_len = len(lst)\n    if lst_len == 0:\n        return 0\n    elif lst_len == 1:\n        return lst[0]\n    elif lst_len == 2:\n        return max(lst)\n    else:\n        return max([max(lst[:i]) for i in range(2, len(lst)+1)])\n",
        "num_ids": 97
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([int(i) for i in str(max(lst)) if int(i) > 1])\n",
        "num_ids": 28
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ret = 0\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293]\n    for x in lst:\n        c = 0\n        for y in str(x):\n            if int(y) in primes:\n                c += 1\n        if c == len(str(x)):\n            ret += x\n    return ret\n",
        "num_ids": 195
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    for x in dict:\n        if type(x) is not str:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # BEGIN\n    if len(dict) == 0:\n        return True\n    elif len(dict) == 1:\n        for key in dict:\n            if type(key)!= str:\n                return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n    return True\n    # END\n",
        "num_ids": 85
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(isinstance(k,str) for k in dict.keys()) and all(isinstance(v,str) for v in dict.values())\n",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if isinstance(key, str):\n                if not key.islower():\n                    return False\n            else:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # YOUR CODE GOES HERE #\n    if not dict:\n        return False\n    for key in dict:\n        if type(key)!= str:\n            return False\n        if type(dict[key])!= str:\n            return False\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return True\n    elif all([isinstance(key, str) for key in dict]):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n    else:\n        for key in dict:\n            if type(key)!= str:\n                return False\n            elif key.islower():\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not dict:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict.keys():\n        if type(key)!= str:\n            return False\n    for value in dict.values():\n        if type(value)!= str:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(isinstance(key, str) for key in dict)\n",
        "num_ids": 18
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [2]\n    else:\n        primes = [2]\n        i = 3\n        while i < n:\n            for prime in primes:\n                if i % prime == 0:\n                    break\n            else:\n                primes.append(i)\n            i += 2\n        return primes\n",
        "num_ids": 93
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    results = []\n    def is_prime(n):\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    i = 2\n    while len(results) < n:\n        if is_prime(i):\n            results.append(i)\n        i += 1\n    return results\n",
        "num_ids": 94
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    counter = 0\n    results = []\n    while counter < n:\n        counter += 1\n        if is_prime(counter):\n            results.append(counter)\n    return results\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_prime(n):\n        if n <= 1:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    def count_up_to_prime(n):\n        i = 2\n        prime_list = []\n        while len(prime_list) < n:\n            if is_prime(i):\n                prime_list.append(i)\n            i += 1\n        return prime_list[:n]\n    if n == 0:\n        return []\n    return count_up_to_prime(n)\n    \ndef sum_of_squares(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are square numbers and less than n.\n    for example:\n    sum_of_squares(4) => [1,4]\n    sum_of_squares(10) => [1,4,9,16]\n    sum_of_squares(0) => []\n    sum_of_squares(20) => [1,4,9,16,25,36,49,64]\n    sum_of_squares(1) => []\n    sum_of_squares(18) => [1,4,9,16]\n    \"\"\"\n    def is_square(n):\n        if n < 0:\n            return False\n        sq = n ** 0.5\n        return int(sq) == sq\n    def sum_of_squares_up_to(n):\n        sos_list = []\n        i = 1\n        while len(sos_list) < n:\n            if is_square(i):\n                sos_list.append(i ** 2)\n            i += 1\n        return sos_list[:n]\n    if n == 0:\n        return []\n    return sum_of_squares_up_to(n)\n",
        "num_ids": 485
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(range(2, n))\n",
        "num_ids": 12
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in range(2,n+1) if is_prime(x)]\n",
        "num_ids": 24
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    primes = [2]\n    x = 3\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if x % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(x)\n        x += 1\n    return primes\n",
        "num_ids": 85
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n    \n    counter = 0\n    num = 2\n    \n    primes = [2]\n    \n    while counter < n:\n        num += 1\n        if is_prime(num):\n            primes.append(num)\n            counter += 1\n    \n    return primes\n",
        "num_ids": 78
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        return []\n    elif n == 1:\n        return []\n    else:\n        l = []\n        for x in range(2, n+1):\n            for y in range(2, x):\n                if x % y == 0:\n                    break\n            else:\n                l.append(x)\n    return l",
        "num_ids": 84
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = abs(a)\n    b = abs(b)\n    result = 0\n    for i in range(a):\n        result += b\n    if a < 0:\n        result = -result\n    return result",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    return int(a) * int(b)\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Invert the sign of b, then multiply a and b\n    return multiply_unit(a, abs(b)) * sign(b)\n",
        "num_ids": 34
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [a*b for a,b in zip(str(a), str(b))]\n",
        "num_ids": 24
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = abs(a)\n    b = abs(b)\n    product = 0\n    while a > 0 or b > 0:\n        digit = a % 10\n        digit_b = b % 10\n        product += digit * digit_b\n        a //= 10\n        b //= 10\n    return product\n",
        "num_ids": 74
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([int(x) * int(y) for x, y in zip_longest(str(a), str(b), fillvalue='0')])\n",
        "num_ids": 39
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    x, y = abs(a), abs(b)\n    res = 0\n    while x or y:\n        if x:\n            res += y if y & 1 else 0\n            x, y = x >> 1, y >> 1\n        else:\n            res += y >> 1\n            y = y >> 1\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a // 10) * (b // 10) * (a % 10) * (b % 10)\n",
        "num_ids": 27
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a < 10 or b < 10:\n        return a * b\n",
        "num_ids": 18
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    vowels = set('AEIOU')\n    return sum(1 for i in xrange(0, len(s), 2) if s[i] in vowels)\n    \n    \ndef count_upper_v2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    \n    vowels = set('AEIOU')\n    \n    vowel_count = 0\n    for index, letter in enumerate(s):\n        if letter in vowels and index % 2 == 0:\n            vowel_count += 1\n    \n    return vowel_count",
        "num_ids": 196
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(s[i] in 'AEIOU' for i in range(len(s)//2))\n",
        "num_ids": 28
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([1 for i in range(len(s)//2) if s[i].isupper()])\n",
        "num_ids": 28
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # Your code here\n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    \n    return count\n",
        "num_ids": 57
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for c in s[::2] if c.upper() in VOWELS)\n",
        "num_ids": 25
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i%2 == 0:\n            count += 1\n    return coun",
        "num_ids": 49
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            result += 1\n    return result\n    \n    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('aWxyz') == 0\n",
        "num_ids": 97
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    upper_vowels = 0\n    \n    for i in xrange(0, len(s), 2):\n        upper_vowels += s[i].isupper()\n    return upper_vowels\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # YOUR CODE HERE\n    return int(value)\n",
        "num_ids": 14
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # replace pass with your code\n    pas",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return int(round(float(value)))",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    try:\n        if int(value) == round(float(value)):\n            return int(value)\n        else:\n            return round(float(value))\n    except:\n        return 0\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # if the value is not a number\n    if not isinstance(value,(int,float)):\n        raise TypeError(\"Invalid Input\")\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return round(float(value))",
        "num_ids": 9
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    value = float(value)\n    closest = None\n    closest_diff = None\n    for num in range(-100, 100):\n        diff = abs(value - num)\n        if closest is None or diff < closest_diff:\n            closest = num\n            closest_diff = diff\n    return closest\n",
        "num_ids": 79
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return int(round(float(value)))",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    value = int(value)\n    \n    if value < 0:\n        return (-1)*closest_integer(-value)\n    elif value > 0:\n        return closest_integer(value)\n    else:\n        return value\n        \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print \"You're all set!\"",
        "num_ids": 96
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = [1]\n    for i in range(n):\n        result.append(result[-1] + 2 * (i+1))\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stone_number = []\n    \n    if n == 1:\n        stone_number.append(1)\n    else:\n        if n % 2 == 0:\n            stone_number.append(n)\n            stone_number.append((n-1)/2)\n            stone_number.append((n+1)/2)\n        else:\n            stone_number.append(n)\n            stone_number.append(n-1)\n            stone_number.append((n+1)/2)\n            stone_number.append((n+1)/2)\n",
        "num_ids": 132
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    levels = [n]\n    for i in range(n):\n        levels.append(2 * n - i)\n    return levels\n",
        "num_ids": 33
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [n]*(n+1)\n",
        "num_ids": 13
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n - 1\n        s.append(n)\n    return s\n",
        "num_ids": 54
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 1:\n        return []\n    levels = [n]\n    while len(levels) < n:\n        n = (n + 1) // 2 * 2 if n % 2 else n // 2\n        levels.append(n)\n    return levels\n",
        "num_ids": 62
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stones = [1]\n    for i in range(1, n):\n        if i % 2 == 1:\n            stones.append(stones[i - 1] + 2)\n        else:\n            stones.append(stones[i - 1] + 1)\n    return stones",
        "num_ids": 65
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    for i in xrange(n):\n        res.append(2 * (i + 1))\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if n == 1:\n        return [1]\n    \n    stones = [n]\n    \n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = n - 1\n    \n    while n!= 1:\n        stones.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n - 1\n    \n    return stones\n",
        "num_ids": 105
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            numbers.append(i)\n        else:\n            numbers.append(i + 1)\n    return numbers\n",
        "num_ids": 57
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return s.split(\", \")\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split(\",\")\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return s.split(\",\")\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split(',')\n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x > y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x <= 0 or y <= 0:\n        return -1\n    elif x > y:\n        return -1\n    else:\n        for i in range(x, y+1):\n            if i % 2 == 0:\n                return i\n        return -1\n",
        "num_ids": 65
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x % 2 == 0 and y % 2 == 0:\n        return -1\n    else:\n        if x % 2 == 0 and y % 2!= 0:\n            return x\n        elif y % 2 == 0 and x % 2!= 0:\n            return y\n        elif x % 2!= 0 and y % 2!= 0:\n            return x * y // 2\n",
        "num_ids": 92
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for num in range(x, y+1):\n        if num%2 == 0 and num >= x and num <= y:\n            return num\n    return -1\n    \n",
        "num_ids": 42
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if x == y:\n        return x\n    if x < y:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n    else:\n        for i in range(y, x + 1):\n            if i % 2 == 0:\n                return i\n    return -1",
        "num_ids": 79
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for n in range(x, y):\n        if n % 2 == 0 and n > 0:\n            return n\n    return -1\n",
        "num_ids": 34
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    max = -1\n    min = x\n    if x > y:\n        min = y\n    for i in range(min, y+1):\n        if i % 2 == 0 and i >= x:\n            if i > max:\n                max = i\n    return max\n",
        "num_ids": 66
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return -1\n",
        "num_ids": 6
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if x < y and x % 2 == 0 and y % 2!= 0:\n        return x\n    elif y < x and x % 2!= 0 and y % 2 == 0:\n        return y\n    elif x > y:\n        if x % 2 == 0 and y % 2 == 0:\n            return x\n        elif x % 2!= 0 and y % 2!= 0:\n            return -1\n    else:\n        if x % 2 == 0 and y % 2!= 0:\n            return y\n        elif x % 2!= 0 and y % 2 == 0:\n            return x\n",
        "num_ids": 145
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if x > y:\n        return -1\n    elif x < y:\n        if x % 2 == 0:\n            return x\n        else:\n            for i in range(x, y+1, 2):\n                if i % 2 == 0:\n                    return i\n    else:\n        return x\n",
        "num_ids": 74
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return bin(int(round(n + m / 2)))[2:]\n",
        "num_ids": 19
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    n_bin = to_bin(n)\n    m_bin = to_bin(m)\n    total = 0\n    for i in range(len(n_bin)):\n        total += (int(m_bin[i]) - int(n_bin[i]))\n    return to_str(total)\n",
        "num_ids": 88
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    res = (n+m)/2\n    return bin(res)[2:]\n",
        "num_ids": 32
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    return int(bin(n + m - 1)[2:])\n",
        "num_ids": 29
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # We use xrange to generate the range and zip to iterate the args\n    # then convert the result to a binary string, stripping off the leading\n    # '0b' and the trailing 'L'.\n    return str(int('0b' + ''.join(map(str, xrange(n, m + 1))), 2))[2:-1].ljust(32, '0')\n",
        "num_ids": 92
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    try:\n        return '0b' + format(sum([2**i for i in range(n, m + 1)]) / (m + 1 - n), 'b')\n    except:\n        return -1\n",
        "num_ids": 52
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if m < n:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if m < n:\n        return -1\n    else:\n        avg = (n + m) // 2\n        binary = bin(avg).split(\"b\")[1]\n        return binary\n",
        "num_ids": 49
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if m < n:\n        return -1\n    n_to_m = m - n + 1\n    n_to_m_binary = bin(n_to_m)[2:]\n    avg = int(n_to_m_binary, 2) / n_to_m\n    avg_binary = bin(avg)[2:]\n    return avg_binary\n    \nif __name__ == \"__main__\":\n    import sys\n    print(rounded_avg(int(sys.argv[1]), int(sys.argv[2]))",
        "num_ids": 133
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    result = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            continue\n        else:\n            result.append(i)\n    return sorted(result)\n    \n",
        "num_ids": 53
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in x:\n        if str(i)[0] % 2!= 0 and i not in result:\n            result.append(i)\n    return sorted(result)\n",
        "num_ids": 48
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted([i for i in x if i%2!=0])\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    digits = [int(c) for c in str(x)]\n    uniques = []\n    for d in digits:\n        if d%2!= 0:\n            uniques.append(d)\n    uniques = sorted(uniques)\n    return uniques\n    \n",
        "num_ids": 67
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #returns all the integers that don't have any even digits\n    return sorted([n for n in x if n%2!=0])\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for n in x:\n        if n % 2 == 0:\n            continue\n        else:\n            result.append(n)\n    return sorted(result)\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    res = []\n    for i in x:\n        if i > 0 and not any(int(d) % 2 == 0 for d in str(i)):\n            res.append(i)\n    return sorted(res)\n",
        "num_ids": 56
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    unique = [x[0]]\n    for i in xrange(1,len(x)):\n        if x[i]%2 == 0 and x[i-1]%2 == 0:\n            continue\n        else:\n            unique.append(x[i])\n    return sorted(unique)\n",
        "num_ids": 72
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in x if not x % 2]\n",
        "num_ids": 16
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return sorted([i for i in x if i % 2!= 0])\n",
        "num_ids": 21
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if not arr:\n        return []\n    if len(arr) == 1:\n        return [str(arr[0])]\n    # sort the array\n    arr.sort()\n    # reverse the array\n    arr = arr[::-1]\n    # replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr = [str(i) if i > 0 and i < 10 else 'One' if i == 1 else 'Two' if i == 2 else 'Three' if i == 3 else 'Four' if i == 4 else 'Five' if i == 5 else 'Six' if i == 6 else 'Seven' if i == 7 else 'Eight' if i == 8 else 'Nine' for i in arr]\n    return arr\n",
        "num_ids": 194
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    one_to_nine = [\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    ]\n    if not arr:\n        return []\n    arr.sort()\n    return [one_to_nine[num - 1] for num in arr][::-1]\n",
        "num_ids": 81
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n    ",
        "num_ids": 5
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    arr.sort()\n    \n    arr = list(reversed(arr))\n",
        "num_ids": 37
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr)\n    arr.reverse()\n    digits = [str(i) for i in range(1, 10)]\n    return [digits[int(i)] for i in arr]\n",
        "num_ids": 60
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(arr)[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    num = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    return [num[x-1] if x in num else x for x in arr]",
        "num_ids": 44
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr.sort()\n    arr.reverse()\n    sorted_arr = []\n    for i in arr:\n        if i == 0:\n            continue\n        if i >= 1 and i <= 9:\n            sorted_arr.append(DIGITS[i-1])\n    return sorted_arr\n",
        "num_ids": 72
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr.sort()\n    arr.reverse()\n    arr = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    return [arr[num-1] for num in arr]\n",
        "num_ids": 59
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n    arr = sorted([i for i in arr if i in range(1, 10)])\n    if not arr:\n        return []\n    # reverse the array to get the biggest num first\n    arr = arr[::-1]\n    # replace each number by its name\n    for i, v in enumerate(arr):\n        arr[i] = dict_of_numbers[v]\n    return arr\n",
        "num_ids": 119
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = [1]\n    for i in range(1, n):\n        result.append(result[i - 1] * i)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n_list = []\n    for i in range(1,n+1):\n        if i%2==0:\n            n_list.append(math.factorial(i))\n        else:\n            n_list.append(sum(range(1,i+1)))\n    return n_list\n",
        "num_ids": 73
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return []\n    l = [1] * n\n    for i in range(1, n):\n        l[i] = l[i - 1] * i\n    return l",
        "num_ids": 50
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # index starts from 1\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(math.factorial(i))\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i*factorial(i) if i%2 == 0 else i+sum(range(1,i)) for i in range(1,n+1)]\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ret = [1]\n    for i in xrange(1, n):\n        ret.append(ret[i-1] * i)\n    ret.append(1)\n    return ret\n    \nprint f(10)",
        "num_ids": 54
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = [1]\n    for i in range(2, n+1, 2):\n        l.append(i)\n    for i in range(1, n+1, 2):\n        l[i] = l[i-1] * l[i-1]\n    return l\n",
        "num_ids": 70
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i + sum(range(1, i)))\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = [1] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            result[i] = result[i - 1] * i\n        else:\n            result[i] = result[i - 1] + i\n    return result\n",
        "num_ids": 68
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"\"\"\n    :type n: int\n    :rtype: tuple[int]\n    \"\"\"\n    pass\n",
        "num_ids": 27
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert 1 <= n <= 10**3\n",
        "num_ids": 11
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ret = [0, 0]\n",
        "num_ids": 10
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = [0, 0]\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            res[i % 2] += 1\n    return tuple(res)\n",
        "num_ids": 56
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    n_s = str(n)\n    count = 0\n    for i in range(len(n_s)):\n        count += (n_s[i] == n_s[~i])\n    return (count, len(n_s) - count)\n",
        "num_ids": 64
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 0, 0\n    cnt_even, cnt_odd = 0, 0\n    for i in xrange(1, n + 1):\n        if i % 2 == 0:\n            cnt_even += 1\n        else:\n            cnt_odd += 1\n        if is_palindrome(i):\n            if i % 2 == 0:\n                cnt_even -= 1\n            else:\n                cnt_odd -= 1\n    return cnt_even, cnt_odd\n",
        "num_ids": 124
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    evens, odds = 0, 0\n    for i in xrange(1, n + 1):\n        if i % 2 == 0 and str(i) == str(i)[::-1]:\n            evens += 1\n        elif i % 2 == 1 and str(i) == str(i)[::-1]:\n            odds += 1\n    return (evens, odds)\n",
        "num_ids": 91
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return (1, 0)\n    even, odd = 0, 0\n    for i in xrange(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n",
        "num_ids": 86
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            if sum([int(digit) for digit in str(num)]) > 0:\n                count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for num in arr if sum(num // 10**i for i in range(num.bit_length() - 1, -1, -1)) > 0)\n",
        "num_ids": 42
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([i > 0 for i in arr])\n",
        "num_ids": 14
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in arr:\n        if i > 0:\n            if count_digits(i) > 0:\n                count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([1 for a in arr if any(d > 0 for d in map(int, str(a)))])\n",
        "num_ids": 29
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    nums = 0\n    for i in arr:\n        if sum(map(int, str(i))) > 0:\n            nums += 1\n    return nums\n",
        "num_ids": 41
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len([n for n in arr if sum(map(int, list(str(abs(n))))) > 0])\n",
        "num_ids": 30
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([1 for x in arr if sum(map(int, str(x))) > 0])\n",
        "num_ids": 25
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len([i for i in arr if sum([int(j) for j in str(i)]) > 0])",
        "num_ids": 28
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(arr)\n    ret = 0\n    for i in range(n):\n        curr = arr[i]\n        while curr > 0:\n            num = curr % 10\n            if num > 0:\n                ret += 1\n            curr = curr // 10\n    return ret\n",
        "num_ids": 73
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return True\n    \n    length = len(arr)\n    index = 0\n    # if any element is less than the rest, then we can't sort the array\n    for i in range(0, length):\n        if arr[i] < arr[index]:\n            return False\n        index = i\n    \n    # now we have the index of the largest element. \n    # if all the elements are equal to this index, we can't sort the array\n    if index == length-1:\n        return True\n    \n    # now we have the index of the largest element. \n    # if we have elements less than the largest element, \n    # we can sort the array by performing right shift operations on the original array\n    for i in range(0, length-1):\n        if arr[i] > arr[index]:\n            # since we can shift elements as well, we'll try to shift all elements \n            # greater than the largest element in the array.\n            # if we shift the elements less than the largest element,\n            # then the array will still be non-decreasing after we perform shift operation\n            # on the array.\n            # Hence, we'll return False.\n            return False\n        index = i\n    \n    # Now we know that all the elements are greater than the largest element in the array\n    # we can sort the array by performing right shift operations on the original array\n    for i in range(0, length-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    \n    return True\n    \ndef move_one_ball_recursive(arr):\n    \"\"\"\n    Recursive solution.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    \n    length = len(arr)\n    # if any element is less than the rest, then we can't sort the array\n    for i in range(0, length):\n        if arr[i] < arr[0]:\n            return False\n    \n    # now we have the index of the largest element. \n    # if all the elements are equal to this index, we can't sort the array\n    if arr[0] == length-1:\n        return True\n    \n    # now we have the index of the largest element. \n    # if we have elements less than the largest element, \n    # we can sort the array by performing right shift operations on the original array\n    for i in range(0, length-1):\n        if arr[i] > arr[0]:\n            # since we can shift elements as well, we'll try to shift all elements \n            # greater than the largest element in the array.\n            # if we shift the elements less than the largest element,\n            # then the array will still be non-decreasing after we perform shift operation\n            # on the array.\n            # Hence, we'll return False.\n            return False\n    \n    # now we know that all the elements are greater than the largest element in the array\n    # we can sort the array by performing right shift operations on the original array\n    arr[0], arr[length-1] = arr[length-1], arr[0]\n    return True\n",
        "num_ids": 741
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr)==0:\n        return True\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        arr[i-1] = arr[i]\n    arr[len(arr)-1] = temp\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]<arr[i+1]:\n                return True\n        if i==len(arr)-1:\n            if arr[i]>arr[i-1]:\n                return True\n        else:\n            if arr[i]>=arr[i-1] and arr[i]<=arr[i+1]:\n                return True\n    return False\n",
        "num_ids": 168
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    if len(arr)<1:\n        return True\n    \n    # Sorting the array\n    arr.sort()\n    \n    # Shifting the array from right to left\n    for i in range(len(arr)-1,0,-1):\n        if arr[i]<arr[i-1]:\n            arr[i],arr[i-1] = arr[i-1],arr[i]\n            break\n    \n    return True if arr == sorted(arr) else False\n",
        "num_ids": 117
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr)==0:\n        return True\n    \n    smallest = min(arr)\n    \n    for i in range(len(arr)):\n        if arr[i]!= smallest:\n            break\n    else:\n        return True\n    \n    return False\n",
        "num_ids": 68
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            arr[i] = arr[i]+1\n            count = 0\n        else:\n            count += 1\n            if count >= len(arr) - 1:\n                return False\n    return True",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    \n    for i in xrange(len(arr)):\n        if i < len(arr)-1:\n            if arr[i] > arr[i+1]:\n                return False\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return True\n    shifted_arr = [arr[-1]]\n    for i in range(len(arr)-1, 0, -1):\n        shifted_arr.append(arr[i-1])\n    shifted_arr.sort()\n    if shifted_arr == arr:\n        return True\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr = arr[::]\n    if len(arr)==0:\n        return True\n    flag = True\n    while flag:\n        flag = False\n        for i in range(len(arr)-1):\n            if arr[i]>arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                flag = True\n    return arr==sorted(arr)\n",
        "num_ids": 103
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(arr)==0:\n        return True\n    left=0\n    right=len(arr)-1\n    while left<=right:\n        if arr[left]>arr[right]:\n            return False\n        left+=1\n        right-=1\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if arr==[]:\n        return True\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n",
        "num_ids": 23
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    elif len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    k = 0\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[k]:\n            return \"NO\"\n        k += 1\n    return \"YES\"\n",
        "num_ids": 121
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst1, lst2 = [], []\n    for i in lst1:\n        if i % 2 == 0:\n            lst1.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            lst2.append(i)\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 97
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # TODO: Replace the line below with your implementation.\n    return exchangeHelper(lst1, lst2)\n",
        "num_ids": 29
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 77
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst1 = lst1[:]\n    lst2 = lst2[:]\n    lst1.sort()\n    lst2.sort()\n    if lst1 == lst2:\n        return \"YES\"\n    else:\n        if len(lst1) == 1:\n            if lst1[0] % 2 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            for i in range(len(lst1)):\n                if lst1[i] % 2!= 0:\n                    lst1[i] = lst1[i] + 1\n                    lst2[i] = lst2[i] - 1\n                    if lst1 == lst2:\n                        return \"YES\"\n                    else:\n                        lst1[i] = lst1[i] - 1\n                        lst2[i] = lst2[i] + 1\n                        if lst1 == lst2:\n                            return \"YES\"\n                        else:\n                            lst1[i] = lst1[i] + 1\n                            lst2[i] = lst2[i] - 1\n                            if lst1 == lst2:\n                                return \"YES\"\n            return \"NO\"\n",
        "num_ids": 302
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while (i < len(lst1) and j < len(lst2)):\n        if lst1[i] % 2!= 0 and lst2[j] % 2 == 0:\n            return \"NO\"\n        elif lst1[i] % 2!= 0 and lst2[j] % 2!= 0:\n            j += 1\n        elif lst1[i] % 2 == 0 and lst2[j] % 2 == 0:\n            i += 1\n            j += 1\n    return \"YES\"\n",
        "num_ids": 156
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst1.sort()\n    lst2.sort()\n    for x in lst1:\n        if x % 2!= 0:\n            return \"NO\"\n    for x in lst2:\n        if x % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 73
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"YES\"\n",
        "num_ids": 7
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"YES\"\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    histo = {}\n    for i in test:\n        histo[i] = histo.get(i, 0) + 1\n    return histo\n",
        "num_ids": 38
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = {}\n    for i in test:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    histo = {}\n    for i in test:\n        if i not in histo:\n            histo[i] = 1\n        else:\n            histo[i] += 1\n    return histo\n",
        "num_ids": 50
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = {}\n    for char in test:\n        if char in result:\n            result[char] += 1\n        else:\n            result[char] = 1\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    from collections import defaultdict\n    \n    letters = defaultdict(lambda: 0)\n    \n    for letter in test:\n        letters[letter] += 1\n",
        "num_ids": 40
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if test == '':\n        return {}\n    d = {}\n    for i in test:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n    \n",
        "num_ids": 58
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    letters = {}\n    for letter in test:\n        if letter not in letters:\n            letters[letter] = 1\n        else:\n            letters[letter] += 1\n    return letters\n",
        "num_ids": 45
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = list(s)\n    for x in c:\n        if x in s:\n            while x in s:\n                s.remove(x)\n    if len(s) == 0:\n        return (''.join(s), True)\n    return (''.join(s), False)\n",
        "num_ids": 70
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(s) <= 1:\n        return (s, True)\n",
        "num_ids": 19
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s_tmp=[]\n    for i in s:\n        if i in c:\n            s_tmp.append(i)\n    if s_tmp==s_tmp[::-1]:\n        return (s_tmp,True)\n    else:\n        return (s_tmp,False)\n",
        "num_ids": 71
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    # Note that you need to remove all the characters in s that are equal to any character in c\n    # before checking if the result string is palindrome.\n    # Hint: Use a while loop\n    # check if the result string is palindrome\n    # if not, remove the first and last char of the result string\n    # and return the result string\n",
        "num_ids": 89
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[-1]:\n            result += s[i]\n    if result == result[::-1]:\n        return (result, True)\n    else:\n        return (result, False)\n",
        "num_ids": 71
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    reversed_s = s[::-1]\n    for i in c:\n        if i in reversed_s:\n            reversed_s = reversed_s.replace(i, '', 1)\n    return (reversed_s,reversed_s==s)\n",
        "num_ids": 69
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    d = {}\n    for i in range(len(c)):\n        if c[i] in d:\n            d[c[i]].append(i)\n        else:\n            d[c[i]] = [i]\n    return (''.join([s[i] for i in range(len(s)-1, -1, -1) if i not in d[s[i]]]),s==s[::-1])\nassert reverse_delete('abcde', 'ae') == ('bcd', False)\nassert reverse_delete('abcdef', 'b') == ('acdef', False)\nassert reverse_delete('abcdedcba', 'ab') == ('cdedc', True",
        "num_ids": 162
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    t = \"\"\n    for i in xrange(len(s)):\n        if s[i]!= c:\n            t += s[i]\n    return t, t == t[::-1]\n",
        "num_ids": 51
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    s = list(s)\n    \n    for i in range(len(s)):\n        if s[i]==c:\n            s[i] = \"\"\n    \n    return \"\".join(s),s==s[::-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1024
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # for each string, count the number of odd characters\n    # and add that to the count list\n    count_list = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        count_list.append(str(count) + \"n the str\" + str(lst.index(i)) + \"ng of the \" + str(len(lst)) + \"nput.\")\n    return count_list\n",
        "num_ids": 122
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def count_odds(string):\n        count = 0\n        for char in string:\n            if char in \"13579\":\n                count += 1\n        return count\n    return [\"the number of odd elements \" + str(count_odds(str(i))) +\n    \"n the str4ng \" + str(i) + \" of the \" + str(len(lst)) + \"n input.\"\n    for i in lst]\n",
        "num_ids": 104
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    for strng in lst:\n        counter = 0\n        for char in strng:\n            if int(char)%2:\n                counter+=1\n        result.append(str(counter)+\"n the str4ng \"+str(len(strng))+\" of the 4nput.\")\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in lst:\n        count += sum(int(j) % 2 for j in i)\n    return [count]\n",
        "num_ids": 37
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst2 = [int(i) for i in lst]\n    lst2 = [str(i) for i in lst2]\n    lst3 = []\n    for i in lst2:\n        lst3.append(len([j for j in i if int(j)%2]))\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(lst3[0],lst3[1],lst3[1],lst3[2])]",
        "num_ids": 126
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    list_of_str = [len(str(x)) for x in lst]\n    num_odds = []\n    for x in range(0, len(list_of_str)):\n        num_odds.append(list_of_str.count(x))\n    return ['the number of odd elements'+ str(n) + 'n the str' + str(m) + 'ng'+ str(k) +'of the'+ str(l) + 'nput.' for n, m, k, l in zip(num_odds, lst, range(0, len(lst)), lst)]\n",
        "num_ids": 148
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    lst_odds = []\n    for word in lst:\n        count = 0\n        for letter in word:\n            if int(letter) % 2 == 1:\n                count += 1\n        lst_odds.append(count)\n    return [\"the number of odd elements \" + str(n) + \"n the str\" + str(n) + \"ng \" + str(n) + \" of the \" + str(n) + \"nput.\" for n in lst_odds]\n    \n",
        "num_ids": 120
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_odd(num):\n        return num % 2 == 1\n    return [len([1 for num in lst[i] if is_odd(int(num))])\n            for i in range(len(lst))]\n",
        "num_ids": 56
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def count_odd_digits(s):\n        count = 0\n        for char in s:\n            if char in \"13579\":\n                count += 1\n        return count\n    return [str(count_odd_digits(s))+\"n the str\"+str(i+1)+\" of the \"+str(len(lst))+\"n input.\" for i,s in enumerate(lst)]\n",
        "num_ids": 98
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    final = []\n    for i in lst:\n        count = 0\n        for letter in i:\n            if int(letter)%2 == 1:\n                count += 1\n        final.append(\"the number of odd elements %d of the string %s\" % (count, i))\n    return final\n",
        "num_ids": 72
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_sum = nums[0]\n    current_sum = 0\n    result = float('inf')\n",
        "num_ids": 27
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not nums:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(nums) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not nums:\n        return 0\n    sum = nums[0]\n    minSum = sum\n    for i in xrange(1, len(nums)):\n        sum += nums[i]\n        if sum < minSum:\n            minSum = sum\n    return minSum\n",
        "num_ids": 71
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # O(n) time, O(1) space\n    if len(nums) == 0:\n        return 0\n    \n    min_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum += nums[i]\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return min_sum\n",
        "num_ids": 122
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # in-place prefix sum\n    for i in range(1, len(nums)):\n        nums[i] += nums[i - 1]\n",
        "num_ids": 39
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n",
        "num_ids": 32
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(nums)\n    min_sum = 10 ** 9\n    sums = [0] * n\n    sums[0] = nums[0]\n    for i in range(1, n):\n        sums[i] = sums[i - 1] + nums[i]\n        if sums[i] < min_sum:\n            min_sum = sums[i]\n    return min_sum\n",
        "num_ids": 101
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = nums[0]\n    for i in range(1, len(nums)):\n        res = min(res + nums[i], nums[i])\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"\"\"\n    new_nums = [nums[0]]\n    for num in nums[1:]:\n        if new_nums[-1] >= 0:\n            new_nums.append(new_nums[-1] + num)\n        else:\n            new_nums.append(num)\n    return min(new_nums)\n    \"\"\"\n    sums = [nums[0]]\n    for num in nums[1:]:\n        sums.append(sums[-1] + num)\n    return min(sums)\n",
        "num_ids": 136
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                grid[row][col] = 1\n                return max_fill(grid, capacity - 1) + 1\n",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    height, width = len(grid), len(grid[0])\n    dp = [[0 for _ in range(width)] for _ in range(height)]\n    for i in range(height):\n        for j in range(width):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n                if i > 0:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n",
        "num_ids": 145
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    import sys\n    sys.setrecursionlimit(10**4)\n    m, n = len(grid), len(grid[0])\n    # hashmap to store the potential extraction for each bucket\n    dp = [[-1] * n for _ in range(m)]\n    # whether the wells have been emptied\n    filling = [[False] * n for _ in range(m)]\n    # whether the wells are draining\n    draining = [[False] * n for _ in range(m)]\n    # the last index of the last bucket to fill\n    idx = [[-1] * n for _ in range(m)]\n    # no wells can be filled\n    res = 0\n",
        "num_ids": 158
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # getting the dimensions\n    rows, cols = len(grid), len(grid[0])\n",
        "num_ids": 24
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import math\n    ROW = len(grid)\n    COL = len(grid[0])\n    for i in range(ROW):\n        for j in range(COL):\n            if grid[i][j] == 1:\n                b = math.ceil(capacity/float(j+1))\n                while b > 0:\n                    if j+1 < COL:\n                        grid[i][j+1] -= b\n                        if grid[i][j+1] == 0:\n                            grid[i][j] = 0\n                            break\n                        b = math.ceil(capacity/float(j+2))\n                    else:\n                        grid[i][j] -= b\n                        if grid[i][j] == 0:\n                            grid[i][j-1] = 0\n                            break\n                        b = math.ceil(capacity/float(j+2))\n    if sum(map(sum,grid)) == 0:\n        return 0\n    return grid\n",
        "num_ids": 224
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_valid(grid):\n        \"\"\"\n        Check if the grid is valid.\n        \"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    if i == 0:\n                        return False\n                    if grid[i-1][j] == 0:\n                        return False\n                    if j == 0:\n                        return False\n                    if grid[i-1][j] == 1:\n                        return False\n        return True\n    \n    def is_valid_2(grid):\n        \"\"\"\n        Check if the grid is valid.\n        \"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    if i == 0:\n                        if grid[i][j-1] == 0:\n                            return False\n                    elif i == n-1:\n                        if grid[i-1][j] == 0:\n                            return False\n                    else:\n                        if grid[i-1][j] == 0 or grid[i][j-1] == 0:\n                            return False\n        return True\n",
        "num_ids": 301
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    q = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                q += math.ceil(capacity / float(j+1))\n    return q\n",
        "num_ids": 75
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    m, n = len(grid), len(grid[0])\n    if m == 0 or n == 0:\n        return 0\n    m, n = len(grid), len(grid[0])\n    result = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                result = result + 1\n    return result\n    \n",
        "num_ids": 96
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n",
        "num_ids": 5
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    m = len(grid)\n    n = len(grid[0])\n    return math.ceil(sum([sum(grid[i]) for i in range(m)]) / capacity)\n",
        "num_ids": 46
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: [len(str(bin(x)))-2, x])",
        "num_ids": 26
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (int(bin(x)[2:]), x))",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    zero = []\n    one = []\n    for num in arr:\n        if num > 0:\n            one.append(num)\n        else:\n            zero.append(num)\n    return one + zero\n",
        "num_ids": 51
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda i: (bin(i).count('1'), i))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def bin_count(n):\n        result = []\n        count = 0\n        while n:\n            result.append(str(n % 2))\n            n >>= 1\n            count += 1\n        return result, count\n",
        "num_ids": 54
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(arr, key = lambda x: (bin(x).count('1'), x))",
        "num_ids": 23
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # convert to string and sort array by count of 1\n    string_arr = [str(n) for n in arr]\n    return sorted(string_arr, key=lambda x: (bin(int(x)).count(\"1\"), int(x)))\n",
        "num_ids": 59
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [x for x, y in sorted(zip(arr, map(bin, arr)), key=lambda pair: (pair[1].count('1'), pair[0]))]\n",
        "num_ids": 43
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    #return \"\".join([x for x in s.split() if x.lower().count(\"a\") == n])\n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [s.strip() for s in re.findall('\\w*', s) if s.lower().count('c') == n]\n",
        "num_ids": 35
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [word for word in s.split(\" \") if word.count(\"a\") + word.count(\"e\") + word.count(\"i\") + word.count(\"o\") + word.count(\"u\") == n]\n",
        "num_ids": 53
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [x for x in re.findall(r'\\b[^aeiouAEIOU]{%s}\\b' % n, s.lower()) if len(x) == n]\n",
        "num_ids": 48
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    # Your code here\n    return None\n",
        "num_ids": 13
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [word for word in s.split(' ') if len(consonants(word)) == n]\n    \n",
        "num_ids": 29
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # list of all words in s\n    s = s.split()\n    # length of string\n    len_s = len(s)\n",
        "num_ids": 34
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return ''.join(re.findall(r'(\\w+)', s)).split()\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = s.split()\n    if l == []:\n        return []\n    else:\n        return [l[i] for i in range(len(l)) if len(l[i]) == n and count_consonants(l[i]) == n]\n",
        "num_ids": 64
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    \n    left = len(word) - 1\n    right = len(word)\n",
        "num_ids": 45
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import string\n    chars = list(string.ascii_lowercase)\n    for i in range(len(word)-1,-1,-1):\n        if word[i] in chars:\n            return word[i]\n    return \"\"\n",
        "num_ids": 59
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not word:\n        return \"\"\n    for i in range(len(word)):\n        if is_vowel(word[i]):\n            return word[i:]\n    return \"\"\n",
        "num_ids": 48
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = set(list(\"aeiouAEIOU\"))\n    word = word.lower()\n    i = len(word)-1\n    j = len(word)\n    while i>=0 and word[i] not in vowels:\n        i -= 1\n    if i==-1:\n        return \"\"\n    while j>i and word[j-1] not in vowels:\n        j -= 1\n    if j==i+1:\n        return \"\"\n    return word[j-1]\n",
        "num_ids": 122
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    left = 0\n    right = len(word)-1\n    while left < right:\n        if word[right] not in 'aeiou':\n            right -= 1\n        elif word[left] not in 'aeiou':\n            left += 1\n        else:\n            return word[left]\n",
        "num_ids": 72
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    vowels = \"aeiou\"\n    length = len(word)\n    end_idx = length - 1\n    start_idx = 0\n    if length == 1:\n        return \"\"\n    else:\n        while start_idx <= end_idx:\n            mid_idx = (start_idx + end_idx) // 2\n            mid_idx_char = word[mid_idx]\n            if mid_idx_char in vowels:\n                end_idx = mid_idx - 1\n            elif mid_idx_char in 'aeiou':\n                start_idx = mid_idx + 1\n            elif mid_idx_char not in 'aeiou':\n                if (mid_idx_char == word[end_idx]) or (mid_idx_char == word[start_idx]):\n                    return \"\"\n                elif abs(mid_idx - start_idx) > abs(mid_idx - end_idx):\n                    end_idx = mid_idx - 1\n                else:\n                    start_idx = mid_idx + 1\n",
        "num_ids": 274
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = 'aeiou'\n    vowel_dict = {}\n    for index, char in enumerate(word[::-1]):\n        if char in vowels:\n            vowel_dict[char] = index\n    \n    # find closest vowel\n    vowel_dict_items = sorted(vowel_dict.items(), key=lambda x: x[1])\n    for i in range(len(vowel_dict_items)-1):\n        if abs(vowel_dict_items[i][1] - vowel_dict_items[i+1][1]) <= abs(vowel_dict_items[i][1] - vowel_dict_items[i+1][1]):\n            return vowel_dict_items[i+1][0]\n    return \"\"\n",
        "num_ids": 192
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not word:\n        return ''\n    idx = len(word) - 1\n    while idx >= 0:\n        if word[idx].lower() in 'aeiou':\n            return word[idx].lower()\n        idx -= 1\n    return ''\n",
        "num_ids": 66
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pas",
        "num_ids": 3
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if lst[0] == ')':\n        return 'No'\n    if lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'Yes'\n    return 'No'\n",
        "num_ids": 69
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 2:\n        return 'Yes' if lst[0][0] == lst[1][-1] == '(' else 'No'\n    else:\n        return match_parens([lst[0][1:], lst[1][:-1]])\n",
        "num_ids": 71
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Using Stack, time complexity is O(n)\n    stack = []\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            stack.append('(')\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    \n    return 'Yes' if len(stack) == 0 else 'No'",
        "num_ids": 101
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 2:\n        return 'Yes'\n    stack = []\n    for i in lst[1:]:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return 'No'\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'",
        "num_ids": 126
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return 'Yes'\n    elif len(lst) == 1:\n        return 'Yes' if lst[0] == ')' else 'No'\n    elif lst[0] == ')':\n        return 'No'\n    else:\n        stack = [lst[0]]\n        for i in range(1,len(lst)):\n            if lst[i] == ')':\n                if len(stack) == 0:\n                    return 'No'\n                elif stack[-1] == '(':\n                    stack.pop()\n                else:\n                    stack.append(lst[i])\n            else:\n                stack.append(lst[i])\n        if len(stack) == 0:\n            return 'Yes'\n        else:\n            return 'No'\n",
        "num_ids": 199
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for i in lst:\n        stack.append(i)\n    for s in stack:\n        if ')' in s:\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 49
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    stack = []\n    for paren in lst:\n        if paren == ')':\n            if not stack:\n                return 'No'\n            else:\n                stack.pop()\n        else:\n            stack.append(paren)\n    return 'Yes' if not stack else 'No'\n",
        "num_ids": 71
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(arr)[-k:]\n",
        "num_ids": 11
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if k > len(arr):\n        return []\n    arr.sort()\n    return arr[len(arr)-k:]\n",
        "num_ids": 31
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    if len(arr) <= k:\n        return sorted(arr)\n    res = []\n    for i in range(len(arr)):\n        if i >= k:\n            break\n        max_index = i\n        for j in range(i+1, len(arr)):\n            if arr[j] > arr[max_index]:\n                max_index = j\n        arr[i], arr[max_index] = arr[max_index], arr[i]\n        res.append(arr[i])\n    return res\n",
        "num_ids": 136
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = [0] * k\n    arr.sort(reverse = True)\n    for i in range(k):\n        res[i] = arr[i]\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_arr = []\n    # search for the max k elements\n    if not arr:\n        return []\n    start_index = 0\n    while start_index < len(arr):\n        max_arr.append(arr[start_index])\n        start_index += k\n    return max_arr\n",
        "num_ids": 72
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr or k == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if arr == []:\n        return []\n    \n    arr = sorted(arr, key=lambda x: x)\n    \n    return arr[-k:]\n",
        "num_ids": 39
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def findKmax(arr, k):\n        def kthElement(arr, k):\n            \"\"\"\n            helper function to find kth element\n            \"\"\"\n            if not arr or k < 1: return\n",
        "num_ids": 50
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert k > 0 and k <= len(arr)\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        mid = (l + r) / 2\n        if mid > 0 and mid < len(arr) - 1 and arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] > arr[l]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return arr[l]\n",
        "num_ids": 130
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2==0 and lst[i]%2==1])\n",
        "num_ids": 38
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i]%2!= 0])\n",
        "num_ids": 39
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # hint\n    \"\"\"\n    Odd numbers are numbers that are evenly divisible by 2 (divided by 2 and not evenly divided by 2)\n    Even numbers are numbers that are evenly divisible by 2 (divided by 2 and evenly divided by 2)\n    \n    \"\"\"\n    # work\n    \"\"\"\n    create a new array that sums up all the odd numbers that are in even positions\n    \"\"\"\n    even_lst = [x for i, x in enumerate(lst) if x % 2 == 0]\n    return sum(even_lst)",
        "num_ids": 127
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([num for num in lst[::2] if num % 2 == 0])\n",
        "num_ids": 23
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([lst[i] for i in range(0,len(lst),2) if lst[i]%2])\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    ans = 0\n    for idx, val in enumerate(lst):\n        if idx % 2 == 0:\n            if val % 2 == 1:\n                ans += val\n    return ans\n",
        "num_ids": 48
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2])\n",
        "num_ids": 34
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([x for i,x in enumerate(lst) if x%2 and not i%2])\n",
        "num_ids": 28
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([i for i in lst if i%2==0 and lst.index(i)%2==1])\n",
        "num_ids": 31
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1])\n",
        "num_ids": 31
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i, j = 0, 0\n    while i < k:\n        if arr[j] < 100:\n            i += 1\n        j += 1\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    prefix_sum = [0] * (len(arr) + 1)\n    for i in range(1, len(arr) + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    for i in range(k):\n        left = i + 1\n        right = k - i\n        total_sum = prefix_sum[k] - prefix_sum[left - 1] - prefix_sum[right - 1]\n        if total_sum >= 0:\n            return total_sum\n",
        "num_ids": 127
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if k == 0 or len(arr) == 0:\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = 0\n",
        "num_ids": 6
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(arr[:k])",
        "num_ids": 10
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([int(str(n)[:k]) for n in arr])\n",
        "num_ids": 20
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(arr[:k])\n",
        "num_ids": 11
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    ret = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            ret += arr[i]\n        else:\n            ret += sum(arr[i:i+2])\n",
        "num_ids": 56
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([arr[i] for i in range(k) if len(str(arr[i])) <= 2])\n",
        "num_ids": 30
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n    if len(str(result)) <= 2:\n        return result\n    else:\n        for i in range(k, len(arr)):\n            result += arr[i]\n        return result\n",
        "num_ids": 69
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return get_odd_collatz(n // 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    collatz_list = []\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        collatz_list.append(n)\n    return collatz_list\n",
        "num_ids": 63
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted([num for num in get_collatz(n) if num % 2 == 1])\n",
        "num_ids": 24
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return get_odd_collatz(n / 2) + [n]\n    else:\n        return get_odd_collatz(3 * n + 1) + [n]\n",
        "num_ids": 65
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = []\n    while n > 1:\n        if n % 2 == 1:\n            l.append(n)\n        n = n // 2 if n % 2 == 0 else n*3 + 1\n    return sorted(l)\n",
        "num_ids": 56
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    odd_nums = []\n    while n > 1:\n        if n % 2 == 1:\n            odd_nums.append(n)\n        n = n / 2 if n % 2 == 0 else (3 * n) + 1\n    return odd_nums\n",
        "num_ids": 64
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nums = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            nums.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return nums\n",
        "num_ids": 59
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    seq = [n]\n    while n!= 1:\n        if n%2 == 1:\n            n = 3*n + 1\n        else:\n            n = n//2\n        seq.append(n)\n    return sorted(seq)\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    odd_collatz_nums = []\n    for i in range(n):\n        # Get the Collatz sequence for i.\n        # Note: The Collatz sequence starts with 1, so the first element is 1.\n        collatz_seq = [1]\n",
        "num_ids": 62
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Base case: when n == 1, return an empty list.\n    if n == 1:\n        return []\n",
        "num_ids": 28
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \n",
        "num_ids": 5
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_valid_date(date):\n        \"\"\"\n        \"\"\"\n        if date == None:\n            return False\n        if len(date) < 1:\n            return False\n        if len(date) > 10:\n            return False\n        if len(date.split('-'))!= 3:\n            return False\n        if len(date.split('-')) == 3:\n            date_elements = date.split('-')\n            day = date_elements[0].strip()\n            month = date_elements[1].strip()\n            year = date_elements[2].strip()\n",
        "num_ids": 142
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(date) == 0:\n        return False\n    else:\n        if not (1 <= int(date[:2]) <= 12):\n            return False\n        elif not (1 <= int(date[3:5]) <= 31):\n            return False\n        elif not (1 <= int(date[6:8]) <= 31):\n            return False\n        elif not (1 <= int(date[9:11]) <= 12):\n            return False\n        elif not (1 <= int(date[12:]) <= 31):\n            return False\n        elif not (1 <= int(date[3:5]) <= 30):\n            return False\n        elif not (1 <= int(date[:2]) <= 31):\n            return False\n        elif not (1 <= int(date[3:5]) <= 29):\n            return False\n        else:\n            return True\n",
        "num_ids": 207
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if date:\n        months = ['01','03','05','07','08','10','12']\n        days = [31,30,29,31,30,31,30,31,31,30,31,30]\n        input_year = date.split('-')[2]\n        input_month = date.split('-')[0]\n        input_day = date.split('-')[1]\n        if input_day.isdigit() and input_month.isdigit() and input_year.isdigit():\n            if int(input_year) < 1 or int(input_year) > 9999:\n                return False\n            if int(input_month) < 1 or int(input_month) > 12:\n                return False\n            if int(input_day) < 1 or int(input_day) > days[int(input_month)-1]:\n                return False\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 232
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_valid_date(date):\n        valid = True\n        date = date.split('-')\n        if len(date)!= 3:\n            valid = False\n        elif len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n            valid = False\n        elif date[0].isdigit() and date[1].isdigit() and date[2].isdigit():\n            month = int(date[0])\n            day = int(date[1])\n            if valid_month(month) and valid_day(day):\n                if month in [4,6,9,11] and day > 30:\n                    valid = False\n                elif month in [1,3,5,7,8,10,12] and day > 31:\n                    valid = False\n                elif month == 2 and day > 29:\n                    valid = False\n            else:\n                valid = False\n        else:\n            valid = False\n        return valid\n",
        "num_ids": 241
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(date) == 0:\n        return False\n    else:\n        month, day, year = date.split(\"-\")\n        day = int(day)\n        month = int(month)\n        year = int(year)\n        if day < 1 or day > 31:\n            return False\n        if month < 1 or month > 12:\n            return False\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day < 1 or day > 31:\n                return False\n        if month == 4 or month == 6 or month == 9 or month == 11:\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n",
        "num_ids": 193
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if len(date[0])!= 2 or len(date[1])!= 2 or len(date[2])!= 4:\n        return False\n    if int(date[0]) < 1 or int(date[0]) > 31:\n        return False\n    if int(date[1]) < 1 or int(date[1]) > 12:\n        return False\n    if int(date[2]) < 1 or int(date[2]) > 2020:\n        return False\n    return True\n",
        "num_ids": 141
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date:\n        return False\n    date = date.split('-')\n    if int(date[0]) == 0 or int(date[1]) == 0 or int(date[2]) == 0:\n        return False\n    if int(date[0]) <= 1 or int(date[0]) >= 31:\n        return False\n    if int(date[0]) == 2 and int(date[1]) <= 28:\n        return False\n    if int(date[0]) > 2 and int(date[0]) <= 12:\n        if int(date[1]) <= months[int(date[0])-1]:\n            return True\n    else:\n        return False\n    return False\n",
        "num_ids": 192
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def valid_date_months(month, day):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return (day <= 31)\n        elif month in [4, 6, 9, 11]:\n            return (day <= 30)\n        elif month == 2:\n            return (day <= 29)\n        else:\n            return False\n",
        "num_ids": 89
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    \n    #     date_spl = date.split('-')\n    #     month = int(date_spl[0])\n    #     day = int(date_spl[1])\n    #     year = int(date_spl[2])\n    #     if len(date) == 0 or len(date) > 10 or len(date) < 10:\n    #         return False\n    #     if month < 1 or month > 12:\n    #         return False\n    #     if day < 1 or day > 31:\n    #         return False\n    #     if year < 0 or year > 9999:\n    #         return False\n    #     return True\n    # #     else:\n    #     #     return False\n    #     if 1 < month < 13 and 1 < day < 32:\n    #         return True\n    #     elif 1 < month < 13 and 1 < day < 31:\n    #         return True\n    #     elif 1 < month < 13 and 1 < day < 30:\n    #         return True\n    #     elif 1 < month < 13 and 1 < day < 29:\n    #         return True\n    #     elif 1 < month < 13 and 1 < day < 28:\n    #         return True\n    #     else:\n    #         return False\n    pass\n",
        "num_ids": 310
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    return None\n    \n",
        "num_ids": 13
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return txt.split()\n    \n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    out = txt.split()\n    return out\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [word for word in txt.split()]\n",
        "num_ids": 15
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst_copy = lst[:] # duplicate the list\n    lst_copy.sort()\n    return lst == lst_copy\n",
        "num_ids": 35
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n",
        "num_ids": 31
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    '''\n    # Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7, 8]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7, 8]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    '''\n    # Constraints\n    1 <= lst <= 10^5\n    lst only contains integers\n    '''\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    \ndef merge_sort(lst):\n    '''\n    Given a list of numbers, return the list sorted in ascending order\n    using the merge sort algorithm.\n",
        "num_ids": 315
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sorted_lst = sorted(lst)\n    if lst == sorted_lst:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Use key=lambda x:x to remove the type() check and use the key\n    # to sort the list\n    return len(set(lst)) <= 1 and all(lst[i] <= lst[i+1] for i in xrange(len(lst)-1))\n    # if type(lst[0])!= int:\n    #     return True\n    # return all(lst[i] <= lst[i+1] for i in xrange(len(lst)-1))\n",
        "num_ids": 122
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Get a list with unique numbers\n    lst = set(lst)\n",
        "num_ids": 20
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) <= 1:\n        return True\n    if lst[0] < lst[1]:\n        return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n    # return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n    # return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n    # return all([lst[i] <= lst[i+1] for i in range(len(lst)-1)])\n",
        "num_ids": 128
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] <= lst[1]\n    else:\n        return is_sorted(lst[1:]) and (lst[0] <= lst[-1])\n",
        "num_ids": 74
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not interval1 or not interval2:\n        return None\n    if interval1[1] < interval1[0]:\n        interval1 = (interval1[1], interval1[0])\n    if interval2[1] < interval2[0]:\n        interval2 = (interval2[1], interval2[0])\n    if interval1[0] < interval2[0] < interval1[1]:\n        return (interval1[0], interval2[1])\n    if interval2[0] < interval1[0] < interval2[1]:\n        return (interval1[0], interval2[1])\n    if interval1[0] < interval2[1] < interval1[1]:\n        return (interval2[0], interval1[1])\n    if interval2[0] < interval1[1] < interval2[1]:\n        return (interval2[0], interval1[1])\n    if interval1[0] == interval2[0] or interval1[0] == interval2[1] or interval1[1] == interval2[0] or interval1[1] == interval2[1]:\n        return None\n    return \"NO\"\n",
        "num_ids": 280
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def get_intersection(interval1, interval2):\n        return max(min(interval1[1], interval2[1]), min(interval1[0], interval2[0])) - max(interval1[0], interval2[0])\n",
        "num_ids": 62
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return 'NO' if interval1[1] <= interval2[0] or interval2[1] <= interval1[0] else 'YES'\n",
        "num_ids": 35
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    interval1_start, interval1_end = interval1\n    interval2_start, interval2_end = interval2\n    interval1_start, interval1_end = min(interval1_start, interval1_end), max(interval1_start, interval1_end)\n    interval2_start, interval2_end = min(interval2_start, interval2_end), max(interval2_start, interval2_end)\n    if interval1_start > interval2_end or interval2_start > interval1_end:\n        return \"NO\"\n    return \"YES\" if (interval1_end - interval1_start) % 2 == 0 and (interval2_end - interval2_start) % 2 == 0 else \"NO\"\n",
        "num_ids": 182
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    interval1 = sorted(interval1)\n    interval2 = sorted(interval2)\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 63
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    (a1,b1),(a2,b2)=interval1,interval2\n    if a1>b1 or a2>b2:\n        return \"NO\"\n    elif a1>=a2 and b1<=b2:\n        return \"NO\"\n    elif a2>=a1 and b2<=b1:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 105
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if (interval1[1] < interval2[0]) or (interval1[0] > interval2[1]):\n        return \"NO\"\n    return \"YES\"\n",
        "num_ids": 44
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # your code here\n    if interval1[1] < interval1[0] or interval2[1] < interval2[0]:\n        return \"NO\"\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    if interval2[0] >= interval1[0] and interval2[1] <= interval1[1]:\n        return \"YES\"\n    return \"NO\"\n",
        "num_ids": 109
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Write your code here\n    \n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    # solution 1\n    # if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n    #     return \"NO\"\n    \n    # solution 2\n    return \"NO\" if interval1[1] < interval2[0] or interval2[1] < interval1[0] else \"YES\"\n    \n",
        "num_ids": 127
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    start_inter = max(interval1[0], interval2[0])\n    end_inter = min(interval1[1], interval2[1])\n    if start_inter > end_inter:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 66
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    prod = 1\n    for num in arr:\n        prod *= (num if num > 0 else -num)\n    return prod if arr else None\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return None\n    result = 1\n    for item in arr:\n        result *= sign(item)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # arr has to be non-empty, return None if it is empty\n    if len(arr) == 0:\n        return None\n    # multiply by sign of each element of arr\n    arr = [sign * abs(x) for x, sign in zip(arr, [+1, -1, 0][:len(arr)])]\n    # multiply by sign of each element of arr\n    arr = [x * y for x, y in zip(arr, [+1, -1, 0][:len(arr)])]\n    return sum(arr)\n",
        "num_ids": 128
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return None\n    return sum([x if x > 0 else -x for x in arr])*prod([1 if x > 0 else -1 if x < 0 else 0 for x in arr])\n",
        "num_ids": 52
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return None\n    return sum([abs(x) for x in arr]) * prod([sign(x) for x in arr])",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    signs = [1, -1, 0]\n    mags = [1, -1, 0]\n",
        "num_ids": 27
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if arr:\n        return abs(sum(arr)) * product([-1, 1, 0])\n    else:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return None\n    else:\n        result = 0\n        for i in arr:\n            if i == 0:\n                result += 0\n            elif i > 0:\n                result += i\n            else:\n                result += -i\n        return result\n",
        "num_ids": 66
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not grid or not grid[0]:\n        return []\n",
        "num_ids": 16
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if grid == None or len(grid) == 0:\n        return None\n    if k == 0:\n        return []\n    if k == 1:\n        return grid[0]\n",
        "num_ids": 44
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not grid or not grid[0] or not k:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not grid:\n        return grid\n",
        "num_ids": 11
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    row, col = len(grid), len(grid[0])\n    cost = [[0 for _ in range(col)] for _ in range(row)]\n    cost[0][0] = grid[0][0]\n    for i in range(1, col):\n        cost[0][i] = cost[0][i - 1] + grid[0][i]\n    for i in range(1, row):\n        cost[i][0] = cost[i - 1][0] + grid[i][0]\n    for i in range(1, row):\n        for j in range(1, col):\n            cost[i][j] = min(cost[i - 1][j], cost[i][j - 1]) + grid[i][j]\n    res = [cost[row - 1][col - 1]]\n    for i in range(row - 1, 0, -1):\n        if k > 0:\n            k -= 1\n            res.append(cost[i - 1][col - 1] - cost[i][col - 1])\n    for j in range(col - 1, 0, -1):\n        if k > 0:\n            k -= 1\n            res.append(cost[row - 1][j - 1] - cost[row - 1][j])\n    return res\n",
        "num_ids": 303
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # result = []\n    # rows = len(grid)\n    # cols = len(grid[0])\n    # for i in range(rows):\n    #     for j in range(cols):\n    #         # print(i, j)\n    #         if i == 0 and j == 0:\n    #             result.append(grid[i][j])\n    #         elif i == 0:\n    #             result.append(grid[i][j]+minPath(grid, j-1))\n    #         elif j == 0:\n    #             result.append(grid[i][j]+minPath(grid, i-1))\n    #         else:\n    #             result.append(grid[i][j]+min(minPath(grid, i-1), minPath(grid, j-1)))\n    # return result[:k]\n    pass\n",
        "num_ids": 206
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not grid or not grid[0] or k < 1:\n        return []\n",
        "num_ids": 21
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not grid or not grid[0]: return []\n    rows, cols = len(grid), len(grid[0])\n    dist = [[0] * (cols + 1) for _ in range(rows + 1)]\n    for row in range(rows):\n        for col in range(cols):\n            dist[row + 1][col + 1] = grid[row][col]\n    for k in range(2, k + 1):\n        new_dist = [[0] * (cols + 1) for _ in range(rows + 1)]\n        for row in range(rows):\n            for col in range(cols):\n                min_val = min(new_dist[row][col], new_dist[row + 1][col], new_dist[row][col + 1])\n                new_dist[row + 1][col + 1] = min_val + grid[row][col]\n        dist = new_dist\n    return [dist[-1][-1]]\n",
        "num_ids": 229
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not grid or not grid[0]:\n        return []\n    m, n = len(grid), len(grid[0])\n    cache = [[0 for _ in xrange(n)] for _ in xrange(m)]\n",
        "num_ids": 54
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not grid or not grid[0]: return []\n    m = len(grid)\n    n = len(grid[0])\n    # next values from each direction\n    next_up = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    next_left = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return [1, 2]\n    elif n == 1:\n        return [1, 1, 1]\n    elif n == 2:\n        return [1, 2, 1]\n    elif n == 3:\n        return [1, 3, 2, 1]\n    else:\n        new_list = []\n        x = 1\n        y = 1\n        z = 1\n        for i in range(n + 1):\n            new_list.append(x)\n            x, y, z = y + z, x + y + z, x\n    return new_list",
        "num_ids": 143
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    tri = [1, 3, 3]\n    for i in range(2, n + 1):\n        tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n    return tr",
        "num_ids": 54
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        l = tri(n - 1)\n        l.append(l[-1] + l[-2] + l[-3])\n        return l\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 1, 1]\n    elif n == 2:\n        return [1, 1, 2]\n    else:\n        result = [1, 1, 1]\n        result.extend([result[-1] + result[-2] + result[-3] for _ in range(n - 3)])\n        return result\n",
        "num_ids": 103
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def tribonacci(n):\n        tribonacci = [0] * (n + 1)\n        tribonacci[1] = 1\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2]\n            else:\n                tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n        return tribonacci\n    return tribonacci(n)\n",
        "num_ids": 141
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    tribs = [3,1,2]\n    if n > 2:\n        for i in range(n - 2):\n            tribs.append(tribs[-3] + tribs[-2] + tribs[-1])\n    return tribs",
        "num_ids": 65
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a, b, c = 1, 1, 1\n    result = []\n    for i in xrange(n):\n        result.append(a)\n        a, b, c = b, c, a + b + c\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    fib = [1, 3, 1]\n    for i in range(2, n + 1):\n        if i % 2:\n            fib.append((fib[-1] + fib[-2] + fib[-3]) % 10)\n        else:\n            fib.append((fib[-2] + fib[-1] + fib[-3]) % 10)\n    return fib\n",
        "num_ids": 97
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    ans = []\n    ans.append(0)\n    ans.append(1)\n    ans.append(1)\n    if n == 0:\n        return ans\n    if n == 1:\n        return ans[1:]\n    if n == 2:\n        return ans[2:]\n    for i in range(2, n + 1):\n        ans.append(ans[-2] + ans[-1] + ans[-1])\n    return ans[:-1]\n",
        "num_ids": 113
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # trib = [1, 3, 2, 4]\n    # if n < 4:\n    #     return trib[:n+1]\n    # trib = trib + [trib[-1] + trib[-2] + trib[-3]]\n    # for i in range(4, n+1):\n    #     trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    # return trib\n    return [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 648996889921, 10610209857723, 17167680177565, 2865749263697, 479001612676859, 72531842053181, 11349042161293, 17959657446561, 29693590235687, 43046721121495, 66309173569641, 10223387689661, 16309010584767, 26791429644043, 43349443869233, 71118177375363, 12586269025712, 196418367346939, 31781110107786, 46368500240694, 75025558609913, 12139322673056, 19641844490142, 35245784984985, 57028876440687, 92274651879438, 149303528198879, 24157816912889, 39088169372854, 63245986499414, 102334156475067, 16558013608253, 26791429635943, 43349443918163, 701408733640425, 113490317037728, 183631190300143, 2971215090896, 48075269842139, 77787420524949, 125862690251851, 20365011058223, 32951280599365, 53316291176327, 86267571264315, 13958386255111, 22585143362407, 36543529979193, 59128672989991, 95672202603263, 15480087566998, 25047307833011, 40527395563803, 64899688990845, 10610209940521, 17167680175943, 28657492645143, 47900161293964, 725318420340527, 113490421631427, 17959657446661, 296935905235743, 43046721125783, 66309173564241, 10223387689499, 163090106297661, 267914296713897, 43349443927189, 711181773758714, 125862690255153, 196418367346952, 31781110101079, 46368500246094, 750255586099194, 121393226730281, 196418444901095, 352457849849762, 570288764406765, 922746518793946, 149303528201101, 241578169129065, 390881694990737, 632459866486579, 1023341564750943, 163090105940879, 267914296440961, 433494439380281, 701408733551553, 11349031708918, 18363119030063",
        "num_ids": 1023
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 10:\n        return n\n    else:\n        n = str(n)\n        odds = 1\n        for c in n[1:]:\n            if int(c) % 2 == 1:\n                odds *= int(c)\n        return odds\n",
        "num_ids": 66
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return reduce(lambda x,y: x*y, map(lambda x: int(x), list(str(n))), 1)\n",
        "num_ids": 33
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    digits = 1\n    while n > 0:\n        if n % 10 % 2:\n            digits *= n % 10\n        n /= 10\n    return digits\n",
        "num_ids": 42
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    total = 1\n    while n > 0:\n        if n % 2!= 0:\n            total = total * n % 10\n        n = n // 10\n    return total\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n",
        "num_ids": 29
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    product = 1\n    while n > 0:\n        n, d = divmod(n, 10)\n        if d!= 0 and d % 2 == 1:\n            product *= d\n    return product\n",
        "num_ids": 50
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    product = 1\n    while n > 0:\n        product *= n % 10\n        n /= 10\n    return product\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your Code Here\n    # We will use the same method to find the digits\n    # We will use the same method to find the digits\n    num = n\n    product = 1\n    while num > 0:\n        digit = num % 10\n        if digit % 2!= 0:\n            product *= digit\n        num = num // 10\n",
        "num_ids": 80
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    product = 1\n    while n > 0:\n        product *= n%10\n        n //= 10\n    return product\n",
        "num_ids": 31
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return reduce(lambda x, y: x * y, map(lambda x: int(x), str(n)[1::2])) if n else 0\n    \n",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    matches = {'(': ')', '[': ']', '{': '}'}\n    stack = []\n    \n    for char in string:\n        if char in ('[', '{', '('):\n            stack.append(char)\n        else:\n            if not stack or matches[stack.pop()]!= char:\n                return False\n    \n    return not stac",
        "num_ids": 95
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return False",
        "num_ids": 4
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    for c in string:\n        if c == '[':\n            bracket_stack.append(c)\n        elif c == ']':\n            if not bracket_stack:\n                return False\n            else:\n                bracket_stack.pop()\n    return not bracket_stack\n    \ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input and returns True if the input string is balanced.\n    A string is balanced if it is composed of any number of the following characters:\n    [,],{,} and/or parenthesis.\n",
        "num_ids": 142
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # <YOUR CODE GOES HERE>\n    def nested_brackets(string):\n        start_stack = []\n        end_stack = []\n        i = 0\n        while i < len(string):\n            if string[i] == '[':\n                start_stack.append(i)\n            if string[i] == ']':\n                if start_stack!= []:\n                    end_stack.append(i)\n                    start_stack.pop()\n                elif start_stack == []:\n                    return False\n            i += 1\n        if start_stack == end_stack:\n            return True\n        else:\n            return False\n",
        "num_ids": 151
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    '''\n    if any(bracket for bracket in string if bracket == '['):\n        return True\n    else:\n        return False\n    '''\n    return any(bracket for bracket in string if bracket == '[' or bracket == ']')\n",
        "num_ids": 60
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # seq = []\n    # for char in string:\n    #     if char == '[':\n    #         seq.append('[')\n    #     elif char == ']':\n    #         if len(seq) == 0:\n    #             return False\n    #         else:\n    #             seq.pop()\n    #     else:\n    #         seq.append('[')\n    # return len(seq) == 0\n    return string.count('[') == string.count(']') and len(string) % 2 == 0\n",
        "num_ids": 128
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    opening = []\n    for character in string:\n        if character == '[' and opening:\n            opening.pop()\n        elif character == ']' and not opening:\n            return False\n        else:\n            opening.append(character)\n    return False if opening else True\n",
        "num_ids": 65
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_seq(string):\n        return string[0] == string[-1] and string[0] in '[]'\n",
        "num_ids": 32
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n    \n",
        "num_ids": 73
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pairs = []\n    for x in range(len(string)):\n        if string[x] == ']' or string[x] == '}':\n            pairs.append(x)\n    if len(pairs) % 2!= 0:\n        return False\n    else:\n        for i in range(0, len(pairs), 2):\n            if pairs[i] > pairs[i + 1]:\n                return False\n        return True\n",
        "num_ids": 107
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    res = 0\n    for num in lst:\n        res += num**2\n    return int(math.ceil(res))\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Please print out which line of the above program contains the\n    # bug, so that we can fix the bug and analyze the output.\n    #\n    # Please note that your program should compile and not run when you submit it\n    #\n    # The above is a hint to the grader.\n    #\n    # When you fix the bug, please also fix this docstring to match your style\n    #\n    # -mgaddie\n    lst = [round(x,0) for x in lst]\n    return sum(x*x for x in lst)\n",
        "num_ids": 132
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(map(lambda x: round(x),lst))\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: round(x*x), lst))\n    \nprint sum_squares([1,2,3])\nprint sum_squares([1,4,9])\nprint sum_squares([1,3,5,7])\nprint sum_squares([1.4,4.2,0])\nprint sum_squares([-2.4,1,1])\nprint sum_squares([3.0,-2,3,6]",
        "num_ids": 112
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(x*x for x in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst = [int(ceil(i)) for i in lst]\n    return sum(i * i for i in lst)\n",
        "num_ids": 34
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    squares = [x*x for x in lst]\n    return sum(squares)\n",
        "num_ids": 24
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(map(lambda x: round(x**2), lst))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(list(map(lambda x: int(ceil(x)), list(map(lambda x: pow(x, 2), lst)))))\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([int(math.ceil(x*x)) for x in lst])\n",
        "num_ids": 23
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not txt or len(txt) == 0:\n        return False\n",
        "num_ids": 19
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # your code here\n    if len(txt) == 0:\n        return False\n    else:\n        return (txt[-1].isalpha() and not txt[-1].isnumeric())\n",
        "num_ids": 49
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (txt[-1].isalpha() and txt[-1] not in \"!@#$%^&*()_+-=,<.>?:;\"\n        \"/|\\\\[]{}-/'\")\n    pass\n",
        "num_ids": 57
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    if len(txt)==0:\n        return False\n    if not (txt[-1].isalpha() and txt[-1]!=\" \"):\n        return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if txt[-1] in string.ascii_letters and not txt[-1].isalnum():\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if txt == \"\":\n        return False\n    elif txt[-1] not in string.ascii_letters:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(txt) < 1:\n        return False\n    elif len(txt) == 1:\n        return False\n    else:\n        txt = txt.rstrip()\n        if txt[-1].isalpha() and txt[-1].isalpha():\n            return True\n        else:\n            return False\n",
        "num_ids": 78
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(txt) == 0:\n        return False\n    if len(txt) == 1:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isnumeric():\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return (txt[-1].isalpha() and not txt[-1].isnumeric() and txt[-1] not in \"!?,;.:-_\")\n    #txt[-1] is the last character of the string\n    #txt[-1].isalpha() checks to see if the last character is a letter\n    #txt[-1] not in \"!?,;.:-\" checks to see if the last character is not in \"!?,;.:-\"\n",
        "num_ids": 110
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = len(arr)\n    if l <= 1:\n        return -1\n    arr.sort()\n    for i in range(l-1):\n        if arr[i] + 1 < arr[i+1]:\n            return i\n    return -1\n",
        "num_ids": 63
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def can_arrange_helper(arr, index):\n        if len(arr) <= 1:\n            return index\n        previous_element = arr[index - 1]\n        for i in xrange(index, len(arr)):\n            if arr[i] <= previous_element:\n                return -1\n            previous_element = arr[i]\n        return index\n",
        "num_ids": 90
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def aux(idx, prev):\n        if idx == 0:\n            return prev\n        else:\n            idx -= 1\n            while idx > 0 and arr[idx] >= arr[idx-1]:\n                idx -= 1\n            return idx\n    return aux\n",
        "num_ids": 69
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return max([i for i in range(len(arr)) if arr[i] >= arr[i - 1]])\n",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(arr)\n    if n < 2:\n        return -1\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # TODO: Decide whether to use a set to store seen values, or to just use\n    # the more simple list\n",
        "num_ids": 30
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            res.append(i)\n    return -1 if len(res) == 0 else max(res)\n",
        "num_ids": 57
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr.append(float(\"inf\"))\n    arr.insert(0, float(\"-inf\"))\n    print(arr)\n    for i in range(1, len(arr)):\n        if arr[i-1] <= arr[i]:\n            return i-1\n    return -1\n",
        "num_ids": 69
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i+1] > arr[i]:\n            return i\n    return -1\n",
        "num_ids": 37
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a, b = None, None\n    for num in lst:\n        if num < 0:\n            a = max(a, num)\n        elif num > 0:\n            b = min(b, num)\n    return (a, b)\n",
        "num_ids": 61
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = sorted(lst)\n    if lst[0] < 0:\n        return (None, lst[-1])\n    else:\n        return (lst[-1], lst[0])\n",
        "num_ids": 53
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pos = []\n    neg = []\n    for i in lst:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    neg.sort()\n    pos.sort()\n    return (neg[-1], pos[0])\n    \n",
        "num_ids": 73
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    largest = None\n    smallest = None\n    for num in lst:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return (largest, smallest)\n",
        "num_ids": 54
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    if negative_integers == []:\n        return None, None\n    else:\n        return max(negative_integers), min(positive_integers)\n",
        "num_ids": 76
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # CHALLENGE 1\n    pos_lst = []\n    neg_lst = []\n    for i in lst:\n        if i >= 0:\n            pos_lst.append(i)\n        else:\n            neg_lst.append(i)\n    if not pos_lst:\n        return None, None\n    else:\n        return max(neg_lst), min(pos_lst)\n    # CHALLENGE 2\n    # return None, None\n",
        "num_ids": 117
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # -- Method #1: Easier solution with negative=False\n    '''\n    def largest_smallest_integers(lst):\n        return (max(filter(None, map(int, lst)), key=abs),\n        min(filter(None, map(int, lst)), key=abs))\n    '''\n    # -- Method #2: Harder solution\n    '''\n    def largest_smallest_integers(lst):\n        negative, positive = [], []\n        for num in lst:\n            if num < 0:\n                negative.append(num)\n            elif num > 0:\n                positive.append(num)\n        if not negative or not positive:\n            return (None, None)\n        return (max(negative), min(positive))\n    '''\n    # -- Method #3: Easier solution\n    '''\n    def largest_smallest_integers(lst):\n        return (max(filter(None, map(int, lst)), key=abs),\n        min(filter(None, map(int, lst)), key=abs))\n    '''\n    # -- Method #4: Even more simpler solution\n    def largest_smallest_integers(lst):\n        return (max(filter(None, map(int, lst))),\n        min(filter(None, map(int, lst))))\n    return largest_smallest_integers(lst)\n",
        "num_ids": 334
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    largest_neg = -1\n    smallest_pos = None\n    for num in lst:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n        elif num > 0 and smallest_pos is None or num < smallest_pos:\n            smallest_pos = num\n    return (largest_neg, smallest_pos)\n",
        "num_ids": 104
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i < 0 and a is None:\n            a = i\n        elif i > 0 and b is None:\n            b = i\n    return (a, b)",
        "num_ids": 59
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    negative_integers = []\n    positive_integers = []\n    for item in lst:\n        if item < 0:\n            negative_integers.append(item)\n        elif item > 0:\n            positive_integers.append(item)\n    if len(negative_integers) > 0:\n        return (max(negative_integers), min(positive_integers))\n    elif len(negative_integers) == 0:\n        return (max(positive_integers), min(positive_integers))\n    elif len(positive_integers) == 0:\n        return (None, None)\n",
        "num_ids": 147
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a > b:\n        return a\n    if b > a:\n        return b\n    return None\n",
        "num_ids": 27
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, float):\n        return a\n    elif isinstance(b, float):\n        return b\n    elif isinstance(a, str) and isinstance(b, str):\n        if a.replace('.', '').isdigit() and b.replace('.', '').isdigit():\n            return a\n        elif b.replace('.', '').isdigit() and a.replace('.', '').isdigit():\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        return a\n    elif isinstance(b, str):\n        return b\n    else:\n        return None\n",
        "num_ids": 198
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 82
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    if isinstance(a, str) or isinstance(b, str):\n        return None\n    if a > b:\n        return a\n    return b\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not isinstance(a, (int, float, str)):\n        return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if isinstance(a, int):\n        if isinstance(b, int):\n            return a if a > b else b\n        elif isinstance(b, float):\n            return a\n        else:\n            return b\n    elif isinstance(a, float):\n        if isinstance(b, int):\n            return a\n        elif isinstance(b, float):\n            return a\n        else:\n            return b\n    else:\n        return b\n",
        "num_ids": 181
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    elif isinstance(a, float) and isinstance(b, int):\n        return b\n    elif isinstance(a, int) and isinstance(b, float):\n        return b\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n",
        "num_ids": 130
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if isinstance(a, float):\n        return max(a,b)\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = a.replace('.', ',')\n        a = a.replace(' ', '')\n        return max(float(a), float(b))\n    return max(a, b)\n",
        "num_ids": 89
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Larger, not equal\n    if a < b:\n        return b\n    elif a > b:\n        return a\n    # Equal\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum_evens(n) == 4\n",
        "num_ids": 13
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 4:\n        return False\n    sum_even = 4\n    for i in range(2, n, 2):\n        if n - i < 2 or n - i > 4:\n            break\n        if n - i % 2 == 0:\n            sum_even -= i\n    return sum_even % 2 == 0\n",
        "num_ids": 78
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and sum(x for x in range(1, n, 2)) == n\n",
        "num_ids": 26
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = int(n)\n    if n < 4:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return sum(filter(lambda x: x % 2 == 0, range(4, n, 2))) == n\n",
        "num_ids": 64
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return n % 2 == 0 and is_even(n)\n",
        "num_ids": 16
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum_of_all_evens(n) == n\n",
        "num_ids": 17
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return is_equal_to_sum(n, 4, lambda x, y: x % 2 == 0 and y % 2 == 0)\n",
        "num_ids": 33
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for num in range(2, n):\n        if num % 2 == 0 and n - num in range(2, n):\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 0:\n        return False\n    for x in range(0, n+1, 2):\n        if n - x >= 0:\n            for y in range(0, n-x+1, 2):\n                if n - x - y >= 0:\n                    for z in range(0, n-x-y+1, 2):\n                        if n - x - y - z == 0:\n                            return True\n    return False\n",
        "num_ids": 104
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return is_equal_to_sum(n, 4, True)\n",
        "num_ids": 18
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n > 0:\n        if n == 1:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n    else:\n        print('Factorial is not defined for n < 0')\n",
        "num_ids": 55
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return special_factorial(n-1) * n\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 0:\n        return \"Invalid input\"\n    if n == 0:\n        return 1\n    result = 1\n    while n > 1:\n        result *= n\n        n -= 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 1\n    for i in range(n):\n        result = result * (n-i)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    brazilian_factorial = 1\n    for i in range(1, n+1):\n        brazilian_factorial = brazilian_factorial * i\n",
        "num_ids": 41
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 0\n    product = 1\n    while n > 1:\n        product *= n\n        n -= 1\n    return product\n",
        "num_ids": 34
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return re.sub(r\"\\s+\", \"_\", text)\n",
        "num_ids": 18
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"  \", \"-\")\n    \n    return new_text\n",
        "num_ids": 38
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n = re.sub(r'\\s+', '_', text)\n    if re.match(r'^\\s+$', n):\n        return re.sub(r'\\s+', '-', n)\n    else:\n        return n",
        "num_ids": 62
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # replace spaces with underscores\n    text = re.sub(\"\\s+\", \"_\", text)\n    \n    # replace consecutive spaces with dashes\n    text = re.sub(\"\\s\\s+\", \"-\", text)\n    \n    return text\n",
        "num_ids": 59
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return re.sub(\"\\s+\", \"_\", text)\n    \ndef fix_random_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with dots \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_random_spaces(\"Example\") == \"Example\"\n    fix_random_spaces(\"Example 1\") == \"Example_1\"\n    fix_random_spaces(\" Example 2\") == \"_Example_2\"\n    fix_random_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return re.sub(\"\\s+\", \".\", text)\n",
        "num_ids": 161
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return text.replace(\" \", \"_\")\n",
        "num_ids": 13
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = text.replace(\" \",\"_\")\n    if len(result) > 2:\n        result = result.replace(\"  \",\"-\")\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new += '_'\n        elif i!= 0 and text[i] =='' and text[i-1] =='':\n            new += '-'\n        else:\n            new += text[i]\n    return new\n",
        "num_ids": 82
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # DONE!\n    return\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return re.sub(r\"\\s+\", \"_\", text)\n",
        "num_ids": 18
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 'Yes' if '.' in file_name and file_name.rpartition('.')[2].isalpha() and file_name.rpartition('.')[2].isalpha() and file_name.rpartition('.')[2].endswith('exe') and file_name.rpartition('.')[2].startswith('a') and file_name.rpartition('.')[2].startswith('A') else 'No'\n",
        "num_ids": 107
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # get rid of the '.' character in the file_name\n    file_name = file_name[1:]\n",
        "num_ids": 30
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # return \"Yes\" if all conditions are met, and \"No\" otherwise\n    if re.match(\"^[a-zA-Z]+[0-9]*\\.[a-zA-Z]*$\", file_name) is not None:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    #initiate a flag\n    flag = False\n    #strip the file name\n    file_name = file_name.strip()\n    #split the file name into a list of strings\n    file_name_list = file_name.split('.')\n    #check if the file name has 3 digits or not\n    if len(file_name_list[0]) > 3:\n        flag = False\n    else:\n        flag = True\n    #check if the file name contains exactly one dot\n    if file_name.find('.') == -1:\n        flag = False\n    else:\n        flag = True\n    #check if the substring before the dot is not empty\n    if file_name.find('.')!= 0:\n        flag = False\n    else:\n        flag = True\n    #check if the substring after the dot is one of these: ['txt', 'exe', 'dll']\n    for item in ['txt', 'exe', 'dll']:\n        if file_name.find(item, file_name.find('.') + 1)!= -1:\n            flag = True\n    #if all the conditions above are met, return 'Yes'\n    if flag == True:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 298
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    valid = True\n    if len(file_name) > 3:\n        valid = False\n    if file_name.find(\".\") < 0:\n        valid = False\n    if file_name[:1].isdigit() or file_name[:1].isalpha():\n        valid = False\n    if file_name.find(\".\") < file_name.find(\".\") and file_name.split(\".\")[-1] in [\"txt\", \"exe\", \"dll\"]:\n        valid = False\n    return \"Yes\" if valid else \"No\"\n",
        "num_ids": 129
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def is_valid_file_name(file_name):\n        \"\"\"Return 'Yes' if the file's name is valid, and return 'No' otherwise.\"\"\"\n        return 'Yes' if not re.search(r'[^0-9\\.]', file_name) and re.match(r'^[a-zA-Z][a-zA-Z0-9\\.]{2,3}$', file_name) and re.search(r'\\.txt|\\.exe|\\.dll', file_name) else 'No'\n    return is_valid_file_name(file_name)\n",
        "num_ids": 142
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not isinstance(file_name, str):\n        return 'No'\n    if not file_name[0].isalpha() and file_name[0]!= '_':\n        return 'No'\n    if not file_name.endswith(('.txt', '.exe', '.dll')):\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name.split('.')[0] == '':\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 143
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import re\n    fname = re.compile('[a-zA-Z0-9]+')\n    if fname.fullmatch(file_name):\n        if file_name.count(\".\") == 1 and file_name.split(\".\")[1] in [\"exe\", \"dll\", \"txt\"]:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 100
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import re\n    return 'Yes' if re.match('^[a-zA-Z][a-zA-Z0-9_.]*\\.[a-zA-Z]{3}$', file_name) else 'No'\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return len(file_name) <= 3 and file_name.find('.')!= -1 and file_name[0].isalpha() and file_name[file_name.find('.')+1:].lower() in ['exe', 'dll', 'txt']\n",
        "num_ids": 62
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(x)**2 for x in lst]\n    return sum([int(x)**2 for x in lst])\n",
        "num_ids": 36
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not lst:\n        return 0\n    else:\n        sum = 0\n        for i, num in enumerate(lst):\n            if i % 4 == 0:\n                sum += num ** 3\n            elif i % 3 == 0:\n                sum += num ** 2\n            else:\n                sum += num\n        return sum\n",
        "num_ids": 80
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            if i % 3 == 0:\n                sum += i**2\n            else:\n                sum += i**3\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(0,len(lst)):\n        if i%3 == 0 and i%4!= 0:\n            sum += (lst[i]**2)\n        elif i%3!= 0 and i%4 == 0:\n            sum += (lst[i]**3)\n        else:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 97
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = [x**2 if (x%3 == 0 or x%4 == 0) else x for x in lst]\n    return sum(lst)\n",
        "num_ids": 40
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(num*num if (index % 3 == 0 or index % 4 == 0 and index % 3!= 0) else num for index, num in enumerate(lst))\n",
        "num_ids": 43
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    result = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0 and i % 3!= 0:\n            result += i ** 2\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    sum_total = 0\n    \n    for i in range(0,len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum_total += lst[i] * lst[i]\n        elif i % 3!= 0 and i % 4 == 0:\n            sum_total += lst[i] * lst[i] * lst[i]\n    \n    return sum_total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1026
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    total = 0\n    for idx, val in enumerate(lst):\n        if idx % 4 == 0:\n            total += val*val\n        elif idx % 3 == 0:\n            total += val*val*val\n    return total\n",
        "num_ids": 63
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    words = sentence.split()\n    words_in_str = [word for word in words if is_prime(len(word))]\n    return''.join(words_in_str)\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join(str(len(word)) + word for word in sentence.split(\" \"))\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sentence = sentence.split(' ')\n    sentence = filter(None, sentence)\n    if sentence is None:\n        return ''\n    return''.join([word for word in sentence if is_prime(len(word))])\n",
        "num_ids": 55
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join(sorted(set(sentence.split(\" \")), key=len)[::2])\n",
        "num_ids": 27
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    new_words = []\n",
        "num_ids": 8
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = sentence.split(' ')\n    new_words = []\n    for word in words:\n        if is_prime(len(word)):\n            new_words.append(word)\n    return''.join(new_words)\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([word for word in sentence.split(\" \") if get_prime_number(len(word))])\n",
        "num_ids": 30
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = [int(n), int(x)]\n    l.sort()\n    return l[0] == l[1] * l[2]\n",
        "num_ids": 37
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # get numerator and denominator from fraction\n    if \"/\" in x:\n        numerator, denominator = x.split(\"/\")\n        numerator = int(numerator)\n        denominator = int(denominator)\n    else:\n        numerator = int(x)\n        denominator = int(n)\n",
        "num_ids": 83
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    fract = x.split('/')\n    numerator = int(fract[0])\n    denominator = int(fract[1])\n    return numerator // denominator == numerator // int(n)\n",
        "num_ids": 54
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    m = x.split(\"/\")\n    n = n.split(\"/\")\n    if m[1] == n[1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n",
        "num_ids": 21
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x == \"0\" or n == \"0\" or x == n:\n        return True\n    if x[0] == \"0\" and n[0] == \"0\":\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def fraction(x, n):\n        if x[0] == '0' and x[1]!= '0':\n            x = x[1]\n        elif x[1] == '0' and x[0]!= '0':\n            x = x[0]\n        elif x[0] == '0' and x[1] == '0':\n            return '0'\n        return x + '/' + n\n",
        "num_ids": 105
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == \"\":\n        return False\n    else:\n        n = int(n)\n        d = int(x[3:])\n        if d % n == 0:\n            return True\n        else:\n            return False",
        "num_ids": 55
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a,b = [int(x) for x in str(x).split('/')]\n    c,d = [int(x) for x in str(n).split('/')]\n",
        "num_ids": 47
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x == str(int(x) * int(n))\n",
        "num_ids": 17
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    new_nums = sorted([(sum(int(x) for x in str(num)), num, i) for i, num in enumerate(nums)])\n    for i in range(len(new_nums)):\n        nums[i] = new_nums[i][1]\n",
        "num_ids": 72
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    nums_dict = {}\n    for n in nums:\n        s = sum([int(i) for i in str(n)])\n        if s not in nums_dict:\n            nums_dict[s] = [n]\n        else:\n            nums_dict[s].append(n)\n",
        "num_ids": 76
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum([int(x) for x in str(abs(x))]))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    nums.sort(key = lambda x: sum(int(digit) for digit in str(abs(x))))\n    return nums\n",
        "num_ids": 33
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    nums = sorted(nums)\n    indices = []\n    for i, num in enumerate(nums):\n        summ = sum(int(digit) for digit in str(num))\n        indices.append((summ, i))\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sorted_nums = sorted(nums, key=lambda x: sum([int(y) for y in str(abs(x))]))\n    return sorted_nums\n",
        "num_ids": 43
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def key(x):\n        return sum([int(c) for c in str(x)])\n    return sorted(nums, key=key)",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    from operator import itemgetter\n    return sorted(nums, key=itemgetter(0))\n",
        "num_ids": 25
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l = []\n    for i in nums:\n        t = [i]\n        t.extend([j for j in nums if i+j == sum([int(k) for k in str(i+j)])])\n        l.append(t)\n    return [j[0] for j in sorted(l, key = lambda x:x[1:])]\n",
        "num_ids": 90
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def checkOdd(num):\n        return num % 2 == 1\n    return sum([1 for num in nums if checkOdd(num) and num > 10])\n",
        "num_ids": 41
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    counter = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 10 and (nums[i] % 2 == 1 and nums[0] % 2 == 1) or (nums[i] % 2 == 0 and nums[-1] % 2 == 0):\n            counter += 1\n    return counter\n",
        "num_ids": 85
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(1 for num in nums if num > 10 and (num % 10) % 2 == 1 and (num // 10) % 2 == 1)\n",
        "num_ids": 37
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return sum([1 for n in nums if n > 10 and (n % 10 == 1 or n % 10 == 3 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9)])\n",
        "num_ids": 51
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum([x>10 and (x%10+x//10)%2==1 for x in nums])\n",
        "num_ids": 29
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(1 for n in nums if 10 <= n < 100 and not (n // 10 % 2 == 1 and n % 10 == 1))",
        "num_ids": 34
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 0\n    if len(nums) == 2:\n        return 0\n    return sum([1 for i in nums if nums[0]%2 == 1 and nums[-1]%2 == 1 and nums[0] > 10 and nums[-1] > 10])\n",
        "num_ids": 96
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([num for num in nums if num > 10 and (num // 10 % 2!= 0)])\n",
        "num_ids": 28
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len([n for n in nums if n > 10 and not int(str(n)[0]) % 2 and not int(str(n)[-1]) % 2])\n",
        "num_ids": 42
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(int(i % 10) % 2 and i > 10 for i in nums)\n    \ndef countLetters(sentence):\n    \"\"\"Write a function that takes a string as input and returns the number \n    of vowels (a, e, i, o, u) in the string.\n    For example:\n    countLetters(\"mohamed\") => 3\n    countLetters(\"monty python\") => 0\n    \"\"\"\n    return sum(1 for i in sentence.lower() if i in ('a', 'e', 'i', 'o', 'u'))\n",
        "num_ids": 136
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    a = [0 for _ in xrange(n)]\n    count = 0\n",
        "num_ids": 20
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum([int(i) for i in str(n * (n + 1) // 2)])\n",
        "num_ids": 26
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if (i * i + j * j + k * k) % 3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(x*(x-1)//2 for x in range(1, n+1))\n",
        "num_ids": 26
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for i in range(n) for j in range(i+1, n) if (i * i - i + 1) % 3 == 0)",
        "num_ids": 39
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i < j < k and (i * i + j * j + k * k) % 3 == 0:\n                    result += 1\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    a = []\n    for i in range(1,n+1):\n        a.append(i*i-i+1)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k])%3 == 0:\n                    count += 1\n    return count\n",
        "num_ids": 105
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(n * (n - 1) / 2",
        "num_ids": 14
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            k = n - 1\n            while k > j:\n                if i * i + j * j + k * k == i * i + j * j + k * k:\n                    triples += 1\n                k -= 1\n    return triples\n",
        "num_ids": 86
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return int((n**2-n)//3)\n",
        "num_ids": 15
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def orbit(p):\n        return planets[p][0]\n    planets = {\"Mercury\":(0, 1.3, 0.38, 0.05, 0.055), \"Venus\":(0.5, 1.3, 0.79, 0.05, 0.05), \"Earth\":(1, 1, 1, 0, 0), \"Mars\":(1.5, 1, 1.52, 0.24, 0.04), \"Jupiter\":(2, 1, 1.35, 0.07, 0.055), \"Saturn\":(2.5, 1, 1.58, 0.05, 0.04), \"Uranus\":(3, 1, 1.58, 0.04, 0.03), \"Neptune\":(3.5, 1, 1.64, 0.03, 0.01)}\n    planet1, planet2 = planet1.capitalize(), planet2.capitalize()\n    if planet1 in planets and planet2 in planets:\n        return tuple(sorted([p for p in planets.keys() if orbit(p) > orbit(planet1) and orbit(p) < orbit(planet2)], key=orbit))\n    return tuple()\n",
        "num_ids": 277
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    planets = (\"Jupiter\", \"Neptune\", \"Saturn\", \"Uranus\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\")\n    planet1 = planet1.capitalize()\n    planet2 = planet2.capitalize()\n    if planet1 in planets and planet2 in planets:\n        ind1 = planets.index(planet1)\n        ind2 = planets.index(planet2)\n        planet_list = planets[ind1+1:ind2]\n        return tuple(planet_list)\n    return tuple()\n",
        "num_ids": 127
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return tuple(sorted(set(range(len(planets) + 1)).difference(orbit(planet1, planet2))))\n    \nprint(bf(\"Mercury\", \"Jupiter\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Earth\", \"Mercury\")) # ==> (\"Venus\")\nprint(bf(\"Jupiter\", \"Saturn\")) # ==> (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Earth\", \"Sun\")) # ==> ()\nprint(bf(\"Sun\", \"Earth\")) # ==> ()\nprint(bf(\"Jupiter\", \"Venus\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Jupiter\", \"Mercury\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Venus\", \"Mercury\")) # ==> (\"Earth\")\nprint(bf(\"Venus\", \"Earth\")) # ==> (\"Earth\")\nprint(bf(\"Jupiter\", \"Sun\")) # ==> ()\nprint(bf(\"Sun\", \"Jupiter\")) # ==> ()\nprint(bf(\"Saturn\", \"Jupiter\")) # ==> (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Saturn\", \"Uranus\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Uranus\", \"Jupiter\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Jupiter\", \"Pluto\")) # ==> ()\nprint(bf(\"Pluto\", \"Jupiter\")) # ==> ()\nprint(bf(\"Sun\", \"Jupiter\")) # ==> ()\nprint(bf(\"Mercury\", \"Uranus\")) # ==> ()\nprint(bf(\"Jupiter\", \"Neptune\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Neptune\", \"Jupiter\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Sun\", \"Saturn\")) # ==> ()\nprint(bf(\"Saturn\", \"Uranus\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Uranus\", \"Jupiter\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Jupiter\", \"Saturn\")) # ==> (\"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Jupiter\", \"Mercury\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Mercury\", \"Jupiter\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Venus\", \"Saturn\")) # ==> (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Mars\", \"Saturn\")) # ==> (\"Earth\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Saturn\", \"Mars\")) # ==> (\"Earth\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Mars\", \"Jupiter\")) # ==> (\"Jupiter\")\nprint(bf(\"Jupiter\", \"Saturn\")) # ==> (\"Jupiter\")\nprint(bf(\"Saturn\", \"Mercury\")) # ==> (\"Jupiter\")\nprint(bf(\"Uranus\", \"Jupiter\")) # ==> (\"Jupiter\")\nprint(bf(\"Jupiter\", \"Neptune\")) # ==> (\"Jupiter\")\nprint(bf(\"Neptune\", \"Jupiter\")) # ==> (\"Jupiter\")\nprint(bf(\"Saturn\", \"Uranus\")) # ==> (\"Jupiter\")\nprint(bf(\"Uranus\", \"Jupiter\")) # ==> (\"Jupiter\")\nprint(bf(\"Jupiter\", \"Pluto\")) # ==> ()\nprint(bf(\"Pluto\", \"Jupiter\")) # ==> ()\nprint(bf(\"Jupiter\", \"Sun\")) # ==> ()\nprint(bf(\"Sun\", \"Jupiter\")) # ==> ()\nprint(bf(\"Saturn\", \"Sun\")) # ==> ()\nprint(bf(\"Sun\", \"Saturn\")) # ==> ()\nprint(bf(\"Jupiter\", \"Mercury\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Mercury\", \"Jupiter\")) # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(",
        "num_ids": 1025
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    pl1 = planets.index(planet1)\n    pl2 = planets.index(planet2)\n    if pl1 > pl2:\n        pl1, pl2 = pl2, pl1\n    pl1 = planets.index(planet1)\n    pl2 = planets.index(planet2)\n    if pl1 == pl2:\n        return tuple()\n    else:\n        lst = []\n        for i in range(pl1, pl2):\n            lst.append(planets[i])\n        return tuple(lst)\n",
        "num_ids": 165
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    # Write your code here\n    a = []\n    a.append(planet1)\n    a.append(planet2)\n    \n    if planet1 not in planets:\n        return tuple()\n    if planet2 not in planets:\n        return tuple()\n    \n    return tuple(sorted(set([i for i in planets if i in a])))\n",
        "num_ids": 86
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    planet1 = planet1.title()\n    planet2 = planet2.title()\n    for i in planet_name:\n        if planet1 in i:\n            index1 = planet_name.index(i)\n            if planet2 in planet_name[index1 + 1:]:\n                result.append(planet_name[index1 + 1])\n    return tuple(sorted(result))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    pl_i = planets.index(planet1)\n    pl_j = planets.index(planet2)\n    if pl_i > pl_j:\n        return tuple(pl for pl in planets[pl_i+1:pl_j] if pl_i < planets.index(pl))\n    elif pl_j > pl_i:\n        return tuple(pl for pl in planets[pl_j+1:pl_i] if pl_j < planets.index(pl))\n    else:\n        return tuple()\n",
        "num_ids": 160
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # your code goes here\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planet1_id = planets.index(planet1)\n    planet2_id = planets.index(planet2)\n    planet_orbit = [planet for planet in planets[planet1_id:planet2_id] if planet in planets]\n    planet_orbit_ids = [planets.index(planet) for planet in planet_orbit]\n    planet_orbit_distances = [abs(planet_orbit_ids[i] - planet_orbit_ids[i - 1]) for i in range(1, len(planet_orbit_ids))]\n    return tuple(planet_orbit[i] for i in range(0, len(planet_orbit)) if planet_orbit_distances[i] == 1)\n",
        "num_ids": 190
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted([i for i in lst if len(i)%2 == 0])\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted([i for i in lst if len(i)%2 == 0])\n",
        "num_ids": 22
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst2 = []\n    for word in lst:\n        if len(word)%2 == 0:\n            lst2.append(word)\n    return sorted(lst2)\n",
        "num_ids": 47
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #This is done for efficiency, the worst case, with two words of the same\n    #length, the list is sorted alphabetically, O(n*lg(n)).\n    lst = sorted(lst, key=len)\n    #This is done to delete the odd length words, the worst case, with two\n    #words of the same length, the list is sorted alphabetically, O(n*lg(n)).\n    return [i for i in lst if len(i)%2==0]\n",
        "num_ids": 119
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # 1. Split the list into two lists of strings, one of which has odd length\n    # 2. Remove the odd length items from the longer list\n    # 3. Compare the two lists by length, then sort the lists\n    # 4. Combine the two sorted lists into a new list\n    # 5. Return the new list\n    # 6. Run tests\n    def is_odd(n):\n        return (n & 1) == 1\n    if len(lst) < 2:\n        return lst\n    lst_odd = [l for l in lst if is_odd(len(l))]\n    lst_even = [l for l in lst if not is_odd(len(l))]\n    if len(lst_odd) < len(lst_even):\n        lst_odd.sort(key=len, reverse=True)\n        lst_even.sort(key=len)\n        lst_final = lst_odd + lst_even\n    else:\n        lst_even.sort(key=len, reverse=True)\n        lst_odd.sort(key=len)\n        lst_final = lst_even + lst_odd\n    return lst_final\n",
        "num_ids": 286
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst: return []\n    words = [len(word) for word in lst]\n    return sorted(lst, key = lambda word: (words.index(len(word)), word))\n",
        "num_ids": 49
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return sorted(result)\n",
        "num_ids": 41
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    lst_sorted = sorted(lst, key=len)\n    return lst_sorted\n",
        "num_ids": 26
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0 and n!= 2:\n        return y\n    elif n % 3 == 0 and n!= 3:\n        return y\n    elif n % 5 == 0 and n!= 5:\n        return y\n    else:\n        return x\n",
        "num_ids": 65
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n%2 == 0:\n        return y\n    return x\n",
        "num_ids": 18
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 24
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n%2 == 0:\n        return y\n    else:\n        return x\n        ",
        "num_ids": 23
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x*x for x in lst if x % 2!= 0])\n",
        "num_ids": 41
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        list_2 = []\n        for i in lst:\n            if i % 2!= 0 and i > 0:\n                list_2.append(i * i)\n        return sum(list_2",
        "num_ids": 67
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not lst:\n        return 0\n    return sum([i**2 for i in lst if not (type(i) is int) or i % 2 == 1])\n",
        "num_ids": 42
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        som = 0\n        for i in lst:\n            if i % 2 == 1:\n                som += i * i\n        return som",
        "num_ids": 54
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = [item for item in lst if isinstance(item, int)]\n    return sum([item ** 2 for item in lst if item % 2!= 0])\n    \n",
        "num_ids": 44
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]**2\n    else:\n        return lst[0]**2 + double_the_difference(lst[1:])\n",
        "num_ids": 66
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Your code here\n    if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i < 0:\n                continue\n            elif type(i)!= int:\n                continue\n            elif i%2!= 0:\n                sum += i**2\n        return sum\n",
        "num_ids": 82
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum( (x*x) for x in lst if x % 2)\n",
        "num_ids": 21
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x ** 2 for x in lst if x % 2!= 0])\n",
        "num_ids": 41
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(x**2 for x in lst if x % 2)",
        "num_ids": 18
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # get the right length\n    if len(game)!= len(guess):\n        print 'they are not the same length'\n        return\n    \n    # initialize the answer array\n    answers = [0 for i in range(len(game))]\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            answers[i] = 0\n        else:\n            answers[i] = abs(guess[i] - game[i])\n    return answers",
        "num_ids": 124
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [abs(guess[x]-game[x]) for x in range(len(guess))]\n",
        "num_ids": 27
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n",
        "num_ids": 30
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # your code here\n    guess = [int(g) for g in guess]\n    score = [int(s) for s in game]\n    difference = [abs(guess[i]-score[i]) for i in range(len(guess))]\n    return difference\n",
        "num_ids": 68
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #pass #replace this with your code\n    ret = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            ret.append(0)\n        else:\n            ret.append(abs(guess[i]-game[i]))\n    return ret\n    \n",
        "num_ids": 77
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [guess[i] - game[i] for i in range(len(guess))]\n",
        "num_ids": 26
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    score = [abs(guess[x] - game[x]) for x in range(len(guess))]\n    return score\n",
        "num_ids": 33
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]\n    \ndef compare_multiple_times(game,guess):\n    \"\"\"\n    Given two arrays, and a number of times to play the game, iterate through them, comparing\n    returning the final result of the game.\n    \"\"\"\n    return [compare(game,guess)[i] for i in range(len(game))]\n    \ndef threshold_multiple_times(game,guess,threshold):\n    \"\"\"\n    Given two arrays, and a number of times to play the game, iterate through them, comparing\n    returning the final result of the game, as well as whether or not that result is within\n    the threshold given.\n    \"\"\"\n    return [compare_multiple_times(game,guess)[i]<=threshold for i in range(len(game))]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1024
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n",
        "num_ids": 30
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for extension in extensions:\n        if extension.isupper():\n            class_name += '.' + extension\n        else:\n            class_name += '.' + extension.lower()\n    return class_name\n",
        "num_ids": 49
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    extensions_strength = {}\n    for extension in extensions:\n        strongest_extension = ''\n        for letter in extension:\n            if letter.isupper():\n                strongest_extension += '1'\n            elif letter.islower():\n                strongest_extension += '-1'\n        if strongest_extension not in extensions_strength:\n            extensions_strength[strongest_extension] = []\n        extensions_strength[strongest_extension].append(extension)\n    for strength, extensions in extensions_strength.items():\n        if len(extensions) == 1:\n            return '{}.{}'.format(class_name, extensions[0])\n        if len(extensions) > 1:\n            strongest_extension = ''\n            for extension in extensions:\n                strongest_extension += max(extension)\n            return '{}.{}'.format(class_name, strongest_extension)\n        \n    ",
        "num_ids": 224
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_5():\n    \"\"\"You are given a list of integers. Your task is to return a tuple \n    with the largest element, the number of elements in the list, and \n    the second largest element in the list.\n    Example:\n    # >>> Exercise_10_7_5()\n    # >>> (6, 4, 5)\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercises_10_7_6():\n    \"\"\"You are given two integer lists of equal length, A and B, A and B being \n    randomly generated. Your task is to return a new list C with elements that are \n    the same as in A, but with elements that are also in B reversed.\n    Example:\n    # >>> Exercises_10_7_6()\n    # >>> [4, 1, 2, 3, 5, 6]\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_7():\n    \"\"\"A number is prime if all its factors are prime numbers.\n    For example: 5 is prime because 5 = 2 x 3, and 2 and 3 are both prime numbers.\n    You are given an integer n. Return a boolean indicating whether or not n is prime.\n    Example:\n    # >>> Exercise_10_7_7()\n    # >>> True\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_8():\n    \"\"\"You are given an integer n. Return the number of bits in n.\n    Example:\n    # >>> Exercise_10_7_8()\n    # >>> 3\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_9():\n    \"\"\"You are given an integer n. Return a list of the unique prime factors of n.\n    Example:\n    # >>> Exercise_10_7_9()\n    # >>> [2, 3, 5, 7]\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_10():\n    \"\"\"You are given a list of integers and you have to return a list of the same \n    length, where the values at the ith position is the number of integers in the list \n    that are divisible by the ith integer.\n    Example:\n    # >>> Exercise_10_7_10()\n    # >>> [0, 0, 0, 1, 1, 1, 2, 2, 2, 3]\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_11():\n    \"\"\"You are given two strings s1 and s2 of equal length. \n    You have to return the longest common substring. \n    Note: The longest common substring is the longest string that is a substring \n    of both strings.\n    Example:\n    # >>> Exercise_10_7_11()\n    # >>> \"el\"\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_12():\n    \"\"\"You are given an integer n. \n    Return the number of prime numbers strictly smaller than n.\n    Example:\n    # >>> Exercise_10_7_12()\n    # >>> 4\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_13():\n    \"\"\"You are given an integer n. Return the number of prime numbers strictly \n    greater than n.\n    Example:\n    # >>> Exercise_10_7_13()\n    # >>> 7\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_14():\n    \"\"\"You are given an integer n. Return the number of prime numbers less than n.\n    Example:\n    # >>> Exercise_10_7_14()\n    # >>> 4\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_15():\n    \"\"\"You are given an integer n. Return the number of prime numbers greater than n.\n    Example:\n    # >>> Exercise_10_7_15()\n    # >>> 3\n    \"\"\"\n    \n    # Your code here\n    pass\n    \ndef Exercise_10_7_16():\n    \"\"\"You are given an integer n. Return the number of prime numbers greater than or \n    equal to n.\n    Example",
        "num_ids": 1024
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    extensions_strength = {}\n    for extension in extensions:\n        extensions_strength[extension] = 0\n        for i in extension:\n            if i.isupper():\n                extensions_strength[extension] += 1\n            else:\n                extensions_strength[extension] -= 1\n    return class_name + \".\" + max(extensions_strength, key=extensions_strength.get)\n",
        "num_ids": 97
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    extensions.sort(key=len)\n    for ext in extensions:\n        if ext.isupper():\n            cap_letter = 1\n        else:\n            cap_letter = 0\n        for letter in ext:\n            if letter.isupper():\n                cap_letter += 1\n            else:\n                cap_letter -= 1\n        if cap_letter > 0:\n            return \"%s.%s\" % (class_name, ext)\n    return class_name\n",
        "num_ids": 110
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #name = class_name.split('.')[-1]\n    #extensions = extensions[:]\n    #compare = list()\n    #for i in extensions:\n    #    #print i, '#' * len(i)\n    #    compare.append(i.lower().count('a') - i.lower().count('e') + i.lower().count('i') - i.lower().count('o') + i.lower().count('u'))\n    #print compare\n    #return class_name + '.' + extensions[compare.index(max(compare))]\n    return '%s.%s'%(class_name, extensions[compare.index(max(compare))])\n",
        "num_ids": 170
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # EXTENSION NAME FORMULA\n    # EXTENSION NAME = CAPITAL LETTER(S) - SMALL LETTER(S)\n    # SMALL LETTER(S) = SMALL LETTER(S) + 1\n",
        "num_ids": 54
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string_list = []\n    for extension in extensions:\n        cap_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n        sm_count = 0\n        for letter in extension:\n            if letter.islower():\n                sm_count += 1\n        string_list.append(class_name + '.' + extension + '.strength(' + str(cap_count) + '-' + str(sm_count) + ')')\n    #return string_list\n    return max(string_list)\n",
        "num_ids": 130
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def extension_strength(extension):\n        \"\"\"Your code here.\n        \"\"\"\n        extension_strength = 0\n        for letter in extension:\n            if letter.isupper():\n                extension_strength += 1\n            elif letter.islower():\n                extension_strength -= 1\n        return extension_strength / len(extension)\n    strongest_extension = extensions[0]\n    strongest_extension_strength = extension_strength(strongest_extension)\n    for extension in extensions:\n        extension_strength = extension_strength(extension)\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n",
        "num_ids": 177
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import string\n    extension_strength = {}\n    for extension in extensions:\n        strength = 0\n        for c in extension:\n            if c.isupper():\n                strength += 1\n            if c.islower():\n                strength -= 1\n        extension_strength[extension] = strength\n    sorted_extensions = sorted(extension_strength.items(), key=lambda x: x[1])\n    return '%s.%s' % (class_name, sorted_extensions[0][0])\n    \nprint Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\nprint Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD'])",
        "num_ids": 169
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return bool(re.search(r'(?:' + a + '|' + re.sub(r'(.)\\1',r'\\1\\1',a) + r')',b))\n",
        "num_ids": 48
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in range(len(a)):\n        if b == a[i:] + a[:i]:\n            return True\n    return False",
        "num_ids": 35
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(a) == len(b):\n        return b in a\n    if len(a) > len(b):\n        for i in range(len(b)):\n            if a[i:i+len(b)] == b:\n                return True\n        return False\n    if len(b) > len(a):\n        for i in range(len(a)):\n            if a[i:i+len(b)] == b:\n                return True\n        return False\n",
        "num_ids": 115
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(a)!= len(b):\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #logging.info(\"starting\")\n    for _ in range(0,len(b)):\n        if b in a:\n            return True\n        else:\n            a = a[-1] + a[:-1]\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(1,len(a)):\n        if a[i:] == a[:i] or a[i:] in b or a[:i] in b:\n            return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in range(len(b)):\n        if b in a:\n            return True\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    rotations = [a, b, a[1:] + a[0], b[1:] + b[0], a[2:] + a[:2], b[2:] + b[:2]]\n    return any(b in a for b in rotations)\n",
        "num_ids": 63
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a in b or b in a:\n        return True\n    else:\n        if a[0] == b[0]:\n            return cycpattern_check(a[1:]+a[0], b)\n        else:\n            return cycpattern_check(a, b[1:]+b[0])\n",
        "num_ids": 76
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return b in (a + a)\n",
        "num_ids": 11
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if num < 0:\n        return even_odd_count(-num)\n    if num == 0:\n        return (0, 0)\n    # count odd and even digits\n    odds = []\n    evens = []\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    return (len(odds), len(evens))\n",
        "num_ids": 111
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if num < 0:\n        return even_odd_count(abs(num))\n    else:\n        even = 0\n        odd = 0\n        num = str(num)\n        for x in num:\n            if int(x) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        return (even, odd)\n",
        "num_ids": 84
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (len(str(num).replace(\"-\", \"\").replace(\" \", \"\")[1::2]), len(str(num).replace(\"-\", \"\").replace(\" \", \"\")[0::2]))\n",
        "num_ids": 50
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even_count = 0\n    odd_count = 0\n    if num == 0:\n        return even_count, odd_count\n    if num < 0:\n        num = -num\n    while num:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 10\n    return even_count, odd_count\n",
        "num_ids": 93
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "num_ids": 68
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num *= -1\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n",
        "num_ids": 98
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if num < 0:\n        raise ValueError(\"Only non-negative integers are accepted\")\n",
        "num_ids": 22
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    even_num = 0\n    odd_num = 0\n    while num:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n        num = num // 10\n    return (even_num, odd_num)\n",
        "num_ids": 66
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    str_num = str(num)\n    even = 0\n    odd = 0\n    for i in str_num:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 64
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # return (str(num).count('0'), str(num).count('1'))\n    return (len(str(abs(num))), len(str(abs(num))))\n",
        "num_ids": 44
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Convert number to a string\n    num_str = str(number)\n",
        "num_ids": 19
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    romans = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    for i, num in enumerate(numbers):\n        while number >= num:\n            result.append(romans[i])\n            number -= num\n    return ''.join(result)\n",
        "num_ids": 128
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert type(number) == int and number > 0 and number <= 1000\n    numerals = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    # list of the roman numerals corresponding to each number\n    numeral_list = list(reversed([numerals[10 ** i] for i in range(len(str(number)))]))\n",
        "num_ids": 108
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    s = ''\n    i = 0\n    while (number!= 0):\n        r = number % 10\n        if (r >= 5):\n            s += '5'\n        elif (r == 4):\n            s += '4'\n        elif (r == 3):\n            s += '3'\n        elif (r == 2):\n            s += '2'\n        else:\n            s += '1'\n        i += 1\n        number /= 10\n    return s[::-1]\n",
        "num_ids": 123
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    MINI_ROMAN_NUMERALS = 'xclvix'\n    min_len = min(len(MINI_ROMAN_NUMERALS), len(str(number)))\n    if number > 1000:\n        raise ValueError('Number out of range, must be between 1 and 1000')\n    elif number < 1:\n        raise ValueError('Number out of range, must be between 1 and 1000')\n    elif number == 0:\n        return str(number)\n    else:\n        return ''.join([MINI_ROMAN_NUMERALS[int(number / 10**i) % 10]\n                        for i in range(min_len)])",
        "num_ids": 154
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not 1 <= number <= 1000:\n        return 'invalid input'\n    \n    roman_numerals = ['i', 'v', 'x', 'l', 'c', 'd','m']\n    i = 0\n    numerals = []\n    \n    while number:\n        if number >= roman_numerals[i]:\n            numerals.append(roman_numerals[i])\n            number -= roman_numerals[i]\n        else:\n            i += 1\n    \n    return ''.join(numerals)\n",
        "num_ids": 133
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError\n    romans = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    digits = [int(x) for x in str(number)]\n    result = []\n    for i in range(len(digits)):\n        if digits[i] in [1,5,10,50,100,500,1000]:\n            result.append(romans[digits[i]])\n        elif digits[i] in [2,3,4]:\n            result.append(romans[5 * digits[i]])\n        else:\n            raise ValueError\n    return ''.join(result)\n",
        "num_ids": 181
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    roman_map = (('x', 'c'), ('i', 'd'), ('l','m'), ('c', 'd'), ('x', 'c'), ('i', 'd'), ('l','m'))\n    if number == 0:\n        return \"none\"\n    if number > 1000:\n        raise ValueError(\"Input must be between 1 and 1000 inclusive.\")\n    roman_number = \"\"\n    for num, roman in roman_map:\n        while number >= num:\n            roman_number += roman\n            number -= num\n    return roman_number\n",
        "num_ids": 131
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert 1 <= number <= 1000, 'Incorrect input'\n    \n    # Mapping of integers to roman numeral symbols\n    MAPPING = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    }\n",
        "num_ids": 132
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"int_to_mini_roman(): Input should be between 1 and 1000\")\n",
        "num_ids": 34
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return a**2+b**2 == c**2 or a**2+c**2 == b**2 or b**2+c**2 == a**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return math.sqrt(a**2 + b**2) == c\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a**2 + b**2 == c**2\n",
        "num_ids": 15
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)\n",
        "num_ids": 45
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = float(a)\n    b = float(b)\n    c = float(c)\n    # Returns True if the three sides are equal.\n    if a == b == c:\n        return True\n    # If the three sides are not equal, return False.\n    elif a!= b and a!= c and b!= c:\n        return False\n    # If one side is equal to another, then the angle is either 90 or 60 degrees.\n    elif a == b or b == c or a == c:\n        if a == b == c:\n            return True\n        elif a == c and b!= a:\n            return True\n        elif a!= c and b == a:\n            return True\n    elif a == c and b!= a:\n        return True\n    # If the three sides are equal to the other two sides, then they are right-angled.\n    elif a**2 + b**2 == c**2:\n        return True\n    # If none of the previous conditions were true, return False.\n    else:\n        return False\n",
        "num_ids": 253
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return math.sqrt(a**2 + b**2) == c\n",
        "num_ids": 19
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    a, b, c = sorted([a, b, c])\n    \n    if a+b > c:\n        return c**2 == a**2 + b**2\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Calculate the sines of each angle\n    sine_one = math.sin(math.radians(a))\n    sine_two = math.sin(math.radians(b))\n    sine_three = math.sin(math.radians(c))\n    \n    # Find the sum of the sines of the two sides\n    sine_sum = sine_one + sine_two\n    \n    # If the sine_sum is less than 1, the three sides do not form a right-angled\n    # triangle\n    if sine_sum < 1:\n        return False\n    else:\n        return True\n    \n",
        "num_ids": 152
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2\n",
        "num_ids": 39
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_length = 0\n    max_word = None\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n",
        "num_ids": 51
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return max(words,key=len)\n",
        "num_ids": 12
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_word = \"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(words)[-1]\n",
        "num_ids": 11
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    temp = []\n    for word in words:\n        temp.append(len(set(word)))\n    return words[temp.index(max(temp))]\n",
        "num_ids": 39
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    counts = [len(set(word)) for word in words]\n    return sorted(words)[counts.index(max(counts))]\n",
        "num_ids": 36
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    #first\n    max_string = \"\"\n    max_num = 0\n    for i in words:\n        num_char = len(set(i))\n        if num_char > max_num:\n            max_num = num_char\n            max_string = i\n        elif num_char == max_num:\n            max_string = min(max_string,i)\n    return max_string\n",
        "num_ids": 97
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    max_len = 0\n    max_word = None\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n",
        "num_ids": 19
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(set(word))\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count:\n            max_word = min(max_word, word)\n",
        "num_ids": 79
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if need <= remaining:\n        return [number + need, remaining - need]\n    return [number, 0]\n",
        "num_ids": 28
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if number >= need:\n        return [number, 0]\n    elif number > remaining:\n        return [need, remaining]\n    else:\n        return [need, remaining - number]\n",
        "num_ids": 46
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    remaining -= number\n    if remaining <= 0:\n        return [0, 0]\n    else:\n        return [need + remaining, remaining]",
        "num_ids": 35
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if remaining < need:\n        return [number, 0]\n    return [number + (need - remaining), remaining]\n",
        "num_ids": 29
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n    ",
        "num_ids": 5
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    remaining = remaining - number\n",
        "num_ids": 14
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [number + need - remaining, need - remaining]\n",
        "num_ids": 15
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if need > remaining:\n        return [remaining, 0]\n    \n    if number > need:\n        return [need, 0]\n    \n    return [number+remaining, number-need]\n",
        "num_ids": 49
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(len(operand)):\n        if i == 0:\n            result = operand[i]\n        else:\n            result = eval(str(result) + operator[i - 1] + str(operand[i]))\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    operator_len = len(operator)\n    operand_len = len(operand)\n    if operator_len == 1:\n        return operand[0]\n    if operator_len == 2:\n        a = operand[0]\n        b = operand[1]\n        if operator[0] == '+':\n            return a + b\n        elif operator[0] == '-':\n            return a - b\n        elif operator[0] == '*':\n            return a * b\n        elif operator[0] == '//':\n            return a // b\n        elif operator[0] == '**':\n            return a ** b\n    return do_algebra(operator[1:], [operand[0]] + operand[2:])\n",
        "num_ids": 182
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    operator.sort(key = lambda x: x[1])\n    operator = operator[::-1]\n    for i in range(len(operator)):\n        if operator[i][0] == '-':\n            operator[i] = operator[i][1] * -1\n    operator = [str(operator[i]) for i in range(len(operator))]\n    if operator[0] == '-':\n        operator[0] = operator[0][1]\n        operator = [operator[0]] + operator[1:]\n    return eval(operator[0] + ''.join(operator[1:]))\n",
        "num_ids": 145
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return None\n",
        "num_ids": 5
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # TODO: Implement me\n    # Test input:\n    # [operator, operand]\n    # operator = [operator, operator, operator]\n    # operand = [2, 3, 4, 5]\n    # Return value:\n    # 9\n    pass\n",
        "num_ids": 64
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = list(s)\n    for i, elem in enumerate(s):\n        if elem.isalpha():\n            s[i] = elem.swapcase()\n    return ''.join(s)\n",
        "num_ids": 54
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = list(s)\n    if len(a) == 0:\n        return s[::-1]\n    s = \"\".join([x for x in a if x.isalpha()]).lower()\n    if len(s) == 0:\n        return s[::-1]\n    for i, x in enumerate(a):\n        if x.isalpha():\n            if a[i].islower():\n                a[i] = a[i].upper()\n            else:\n                a[i] = a[i].lower()\n    return \"\".join(a)\n",
        "num_ids": 138
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = list(s)\n    res = []\n    for char in s:\n        if char.isalpha():\n            res.append(char.lower() if char.isupper() else char.upper())\n        else:\n            res.append(char)\n    return \"\".join(res)\n",
        "num_ids": 71
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join(reversed(s.lower()))\n",
        "num_ids": 17
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(l if l.isalpha() else l.lower() if l.isupper() else l.upper() for l in s",
        "num_ids": 34
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(x[::-1] if x.isalpha() else x for x in s)",
        "num_ids": 26
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not s:\n        return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return \"\".join(s)\n",
        "num_ids": 65
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return reduce(lambda x,y: x+y, map(lambda x: \" \" if x.isalpha() else x[::-1], s.strip()))\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # Split the string into a list of characters\n    l = list(s)\n",
        "num_ids": 22
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if text is None or text == '':\n        return None\n    return md5(text).hexdigest()\n",
        "num_ids": 28
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return hashlib.md5(text).hexdigest() if text else None\n",
        "num_ids": 20
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    return md5(text).hexdigest()\n",
        "num_ids": 23
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 16
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    text = text.encode('utf-8')\n    return hashlib.md5(text).hexdigest()\n",
        "num_ids": 29
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    hash_md5 = hashlib.md5()\n    hash_md5.update(text.encode('utf-8'))\n    return hash_md5.hexdigest()\n",
        "num_ids": 45
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text:\n        return md5(text).hexdigest()\n    else:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 38
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    integers = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            integers.append(i)\n    return integers\n",
        "num_ids": 42
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # put your solution here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [n for n in range(a, b + 1) if n % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [num for num in range(a, b+1) if num % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i for i in range(a, b+1) if i % 2 == 0]",
        "num_ids": 23
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # helper function\n    def helper(x, y):\n        res = []\n        for i in range(x, y+1):\n            s = str(i)\n            if len(s)%2 == 0:\n                res.append(int(s))\n        return res\n",
        "num_ids": 67
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Make sure that a is less than b\n    if b < a:\n        (a, b) = (b, a)\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n",
        "num_ids": 29
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    return [i for i in range(a, b, 2)]\n",
        "num_ids": 45
    }
]