[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numbers = set(numbers)\n    for number in numbers:\n        if number + threshold in numbers and number - threshold in numbers:\n            return True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Check if numbers list is not empty\n    if numbers:\n        # Sort numbers and check for 2 elements that are at a distance less than threshold\n        sorted_numbers = sorted(numbers)\n        for index, number in enumerate(sorted_numbers):\n            if (\n                index + 1 < len(sorted_numbers)\n                and number + threshold >= sorted_numbers[index + 1]\n            ):\n                return True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers.sort()\n    for i in range(len(numbers)-1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers.sort()\n    for idx, x in enumerate(numbers):\n        if idx == 0:\n            continue\n        if abs(x - numbers[idx - 1]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    numbers.sort()\n    for i in range(0, len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    last_number = None\n    for number in numbers:\n        if last_number is not None:\n            if abs(last_number - number) < threshold:\n                return True\n        last_number = number\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(numbers) < 2:\n        return False\n    for index in range(len(numbers)):\n        for other_index in range(index+1, len(numbers)):\n            if abs(numbers[index] - numbers[other_index]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    output = []\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sep = []\n    in_parentheses = False\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            in_parentheses = True\n            sep.append([])\n        elif paren_string[i] == ')':\n            if not in_parentheses:\n                raise Exception('Invalid parentheses structure')\n            in_parentheses = False\n            sep[-1].append(paren_string[i:])\n    return [''.join(x) for x in sep]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(paren_string) <= 1:\n        return [paren_string]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    open_braces = []\n    level = 0\n    for i, paren in enumerate(paren_string):\n        if paren == '(':\n            open_braces.append(i)\n            level += 1\n        elif paren == ')':\n            level -= 1\n            if level == 0:\n                result.append(paren_string[open_braces[-1] + 1:i])\n                open_braces.pop()\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # You may want to use a stack data structure to implement this.\n    # Write your code here.\n    \n    output = []\n    open_paren = 0\n    current_string = ''\n    for char in paren_string:\n        if char == '(':\n            open_paren += 1\n        elif char == ')':\n            open_paren -= 1\n        elif char =='':\n            if open_paren == 0:\n                output.append(current_string)\n                current_string = ''\n            else:\n                current_string +=''\n        else:\n            current_string += char\n    output.append(current_string)\n    return output\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # naive solution: make sure that when we encounter an open, we put it in the list and when we find a close,\n    # put it in the front and pop it out of the list\n    # O(n) time complexity, where n is the number of open and close parentheses\n    result = []\n    # find all the open parentheses\n    open_parens = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            open_parens.append(i)\n        elif c == ')':\n            if open_parens:\n                result.append(paren_string[open_parens.pop():i + 1])\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not paren_string:\n        return []\n    index = 0\n    paren_stack = []\n    group = []\n    while index < len(paren_string):\n        char = paren_string[index]\n        if char == \"(\":\n            paren_stack.append(char)\n        elif char == \")\":\n            if not paren_stack:\n                return []\n            paren_stack.pop()\n        group.append(char)\n        index += 1\n    if paren_stack:\n        return []\n    return group\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    parens = []\n    if len(paren_string) == 0:\n        return parens\n    paren_string = paren_string.replace(\" \", \"\")\n    opened_paren_indexes = [i for i, letter in enumerate(paren_string) if letter == \"(\"]\n    opened_paren_indexes.append(len(paren_string))\n    parens.append(paren_string[:opened_paren_indexes[0]])\n    for index in range(len(opened_paren_indexes) - 1):\n        parens.append(paren_string[opened_paren_indexes[index]:opened_paren_indexes[index+1]])\n    return parens\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    paren_stack = []\n    start = 0\n    result = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append((start, i))\n            start = i + 1\n        elif char == ')':\n            if len(paren_stack) > 0:\n                start, end = paren_stack.pop()\n                result.append(paren_string[start:end])\n            else:\n                result.append(paren_string[start:i])\n    return result\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # TODO: Implement me\n    stack = []\n    parens = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        if char == ')':\n            if len(stack) == 0:\n                return parens\n            else:\n                start_index = stack.pop()\n                parens.append(paren_string[start_index:i+1])\n    return parens\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if number < 0:\n        raise ValueError('positive number required')\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return float(str(number).split('.')[1])\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # In Python 3, we need to round to the number with the \"ROUND_HALF_EVEN\"\n    # flag, instead of rounding to the closest integer.\n    rounded = round(number, 0)\n    if rounded == number:\n        return int(rounded)\n    else:\n        return float(rounded)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    truncated_number = number - int(number)\n    if truncated_number < 0.00001:\n        return 0\n    else:\n        return truncated_number\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    integer_part, decimals = math.modf(number)\n    if decimals >= 0.5:\n        decimals = 0\n        integer_part += 1\n    return decimals\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    new_num = int(number)\n    if new_num == number:\n        return new_num\n    else:\n        return round(number - new_num, 2)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    int_part = int(number)\n    if int_part == number:\n        return number - int_part\n    else:\n        return number - int_part + 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    number = float(number)\n    integer = int(number)\n    decimal = number - integer\n    return float(decimal)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    integral_part = math.floor(number)\n    decimal_part = number - integral_part\n    return decimal_part\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    current_balance = 0\n    for value in operations:\n        current_balance += value\n        if current_balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = True\n    for i in operations:\n        if result:\n            result = result and i < 0\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = False\n    for op in operations:\n        result = result or op < 0\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    below_zero = False\n    for i in operations:\n        if i < 0:\n            below_zero = True\n            break\n    return below_zero\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    current_balance = 0\n    for operation in operations:\n        if current_balance + operation < 0:\n            return True\n        current_balance += operation\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    balances = [0]\n    for op in operations:\n        balances.append(balances[-1] + op)\n    return True if balances[-1] < 0 else False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not operations:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    total = 0\n    for i in operations:\n        total += i\n        if total < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Base case:\n    if not operations:\n        return False\n    if len(operations) == 1:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    balance = 0\n    for op in operations:\n        if balance < 0:\n            return True\n        balance += op\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not numbers:\n        return 0\n    mean = sum(numbers)/len(numbers)\n    return sum([abs(number - mean) for number in numbers])/len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(numbers, list):\n        raise TypeError(\"numbers must be a list of numbers\")\n    if len(numbers) < 1:\n        raise ValueError(\"numbers must contain at least one number\")\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(n - mean) for n in numbers]\n    return sum(differences) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Calculate the mean\n    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    if n < 1:\n        return 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Calculate mean of this data set\n    mean = sum(numbers) / len(numbers)\n    # Initialize empty list of absolute differences\n    abs_diff = []\n    # For each input value, calculate absolute difference from mean\n    for num in numbers:\n        abs_diff.append(abs(num - mean))\n    return sum(abs_diff) / len(abs_diff)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Make sure you use the absolute value of the difference, to avoid\n    # negative results:\n    return float(abs(sum(numbers) / len(numbers) - (sum(numbers) / len(numbers))))\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('List must contain at least 2 numbers')\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    mean = sum(numbers) / len(numbers)\n    total = 0\n    for num in numbers:\n        total += abs(num - mean)\n    return total / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return _mean_absolute_deviation(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    output = []\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(0, len(numbers), 2):\n        result.append(numbers[i])\n        result.append(delimeter)\n    return result + numbers[-1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if numbers:\n        return [delimeter] + numbers + [delimeter]\n    return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [numbers[i] for i in range(0, len(numbers), 2)] + [delimeter] + [numbers[i] for i in range(1, len(numbers), 2)]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [numbers[0]] + [delimeter] * (len(numbers) - 1) + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return numbers[::2] + [delimeter] + numbers[1::2]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(numbers) < 2:\n        return []\n    return numbers[:-1] + [numbers[-1] * delimeter] + numbers[-1:]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return []\n    \n    result = []\n    for i in range(1, len(numbers)):\n        result.append(numbers[i - 1])\n        result.append(delimeter)\n        result.append(numbers[i])\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # base case: numbers is empty\n    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for index, number in enumerate(numbers):\n        if index % 2:\n            result.append(number)\n        else:\n            result.append(delimeter)\n            result.append(number)\n    return result\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    max_level = 0\n    nested_list = list()\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    depth = 0\n    nesting_stack = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            depth += 1\n            nesting_stack.append(depth)\n        elif c == ')':\n            depth -= 1\n            nesting_stack.pop()\n        if depth == 0 and not nesting_stack:\n            return [i]\n    return []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    paren_string = paren_string.replace('(', '( ').replace(')',')').split()\n    max_stack = 0\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            max_stack = max(max_stack, len(stack))\n        elif c == ')':\n            stack.pop()\n    return [max_stack] * len(stack)\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    string_stack = []\n    paren_stack = []\n    max_level = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_nesting = 0\n    curr_nesting = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    paren_strings = paren_string.split()\n    print(paren_strings)\n    \n    # return all levels of nesting of parentheses\n    return [len(s) for s in paren_strings]\n    \n    \n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    nested_parens = []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    paren_stack = []\n    current_paren_stack_depth = 0\n    for index, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(index)\n            current_paren_stack_depth += 1\n        elif char == ')':\n            current_paren_stack_depth -= 1\n            if current_paren_stack_depth == 0:\n                break\n            else:\n                paren_stack.pop()\n    return paren_stack\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    current_depth = 0\n    current_bracket_stack = []\n    bracket_stack = []\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if current_depth > 0:\n                bracket_stack.append(i)\n            current_bracket_stack.append(current_depth)\n            current_depth += 1\n        elif char == ')':\n            current_bracket_stack.append(current_depth)\n            if current_depth == 0:\n                bracket_stack.append(i)\n            current_depth -= 1\n            current_bracket_stack.pop()\n    if current_bracket_stack:\n        return [max(current_bracket_stack)] + parse_nested_parens(paren_string[bracket_stack[-1]:])\n    return [current_depth]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # counter for nested levels of parens\n    nested_level = 0\n    # track depth of each level\n    depth = [0]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if substring in s]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sum, product = 0, 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    summation, product = 0, 1\n    for number in numbers:\n        summation += number\n        product *= number\n    return summation, product\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if numbers:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)\n    else:\n        return 0, 1\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return tuple(sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return sum(numbers), reduce(lambda x, y: x*y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x*y, numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sum = 0\n    product = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        count = i\n        max_num = max(numbers[i:])\n        result.append(max_num)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    stack: List[int] = []\n    for number in numbers:\n        while stack and stack[-1] < number:\n            stack.pop()\n        stack.append(number)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    previous_number, max_number, previous_max, max_value = numbers[0], numbers[0], 0, 0\n    result = []\n    for number in numbers:\n        previous_number = number\n        max_number = max(previous_number, max_number)\n        if number > max_number:\n            max_value = max(max_value, number - previous_max)\n        else:\n            max_value = max(max_value, 0)\n        previous_max = max_number\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    maximums: List[int] = [max(numbers[:i + 1]) for i in range(len(numbers))]\n    return maximums\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = [numbers[0]]\n    for index, value in enumerate(numbers):\n        if index == 0:\n            continue\n        if result[-1] < value:\n            result.append(value)\n        elif result[-1] == value:\n            pass\n        else:\n            result[-1] = value\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    current_max = numbers[0]\n    for num in numbers[1:]:\n        if current_max < num:\n            result.append(num)\n            current_max = num\n        else:\n            result.append(current_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    length = len(numbers)\n    if length == 0:\n        return result\n    start, end = 0, 1\n    while end < length:\n        if numbers[start] <= numbers[end]:\n            result.append(numbers[end])\n            start += 1\n            end += 1\n        else:\n            if end == length - 1:\n                result.append(numbers[end])\n            else:\n                result.append(numbers[start])\n            start += 1\n            end += 1\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1, len(numbers) + 1):\n        result.append(max(numbers[:i]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = []\n    index = 0\n    for index, num in enumerate(numbers):\n        result.append(max(num, result[-1]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    rolling_max = [None] * len(numbers)\n    rolling_max[0] = numbers[0]\n    for i in range(1, len(numbers)):\n        rolling_max[i] = max(numbers[i], rolling_max[i - 1])\n    return rolling_max\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # initialize lists to store indices of string where palindromes are found\n    found_prefixes = []\n    found_suffixes = []\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if string == '':\n        return string\n    for i in range(len(string), 1, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1] + string[i:]\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def is_suffix_palindrome(string: str) -> bool:\n        \"\"\" Test if a string suffix is a palindrome \"\"\"\n        return is_palindrome(string[1:])\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    longest_prefix = longest_prefix_palindrome(string)\n    if is_palindrome(longest_prefix):\n        return longest_prefix\n    else:\n        return longest_prefix + string + string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome.\n    end_of_suffix = len(string)\n    while is_palindrome(string[:end_of_suffix]):\n        end_of_suffix -= 1\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    # Also, append the length of the supplied string to the end to count the palindromic suffix.\n    return string + string[end_of_suffix:end_of_suffix-len(string)] + str(len(string))\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not string:\n        return string\n    if is_palindrome(string):\n        return string\n    postfix, suffix = longest_postfix(string)\n    return string[:len(string) - len(postfix)] + suffix + suffix[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Create a copy of string\n    s = list(string)\n    # Reverse the copy\n    s.reverse()\n    # Now append the reversed copy to the original\n    string += ''.join(s)\n    # Return the result\n    return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not string:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Check if string is already a palindrome\n    if is_palindrome(string):\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    new_string = ''\n    while not is_palindrome(new_string):\n        new_string = new_string + string\n        string = string[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join(str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert len(a) == len(b)\n    res = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # If strings are same, return string of length 1\n    if a == b:\n        return '0' if len(a) == 1 else a\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(a)!= len(b):\n        return \"error\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return str(int(a, 2) ^ int(b, 2))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return ''.join(list(map(lambda x, y: '1' if x == y else '0', a, b)))\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join(['0' if x == y else '1' for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    longest_len = 0\n    longest_str = None\n    for str_ in strings:\n        if len(str_) > longest_len:\n            longest_len = len(str_)\n            longest_str = str_\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    result = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(result):\n            result = s\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > len(max_string):\n            max_string = string\n    return max_string\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    max_len = 0\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    lengths = [len(string) for string in strings]\n    max_len = max(lengths)\n    return [string for string, length in zip(strings, lengths) if length == max_len][0]\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a % b == 0:\n        return b\n    else:\n        return greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if b == 0:\n        return a\n    elif a % b == 0:\n        return b\n    elif a > b:\n        return greatest_common_divisor(a % b, b)\n    else:\n        return greatest_common_divisor(a, b % a)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    while b!= 0:\n        remainder = a % b\n        a = b\n        b = remainder\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # set up list of prefixes\n    prefixes = [string[:i + 1] for i in range(len(string))]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # make sure the string is not empty\n    if not string:\n        return []\n    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [string[:i] for i in range(1, len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [string[:i] for i in range(len(string) + 1)]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(0, n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \" \".join([str(i) for i in range(n+1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return '0'\n    result = ''\n    for i in range(n+1):\n        result += str(i) +''\n    return result.rstrip()\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return''.join(map(str, range(n+1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n > 0:\n        return string_sequence(n-1) +'' + str(n)\n    else:\n        return ''\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i in range(n + 1):\n        result += str(i) + \" \"\n    return result[0:-1]\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    string = string.lower()\n    count = len(set(string))\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # We can implement this with a Counter\n    # but that would take O(n) time.\n    # We can use a set to store all characters, but that would also be O(n) time.\n    # We can also use a Counter, but we would have to convert the\n    # string to a set, which takes O(n) time.\n    # We can also use a set, but we would have to convert the\n    # string to a set, which takes O(n) time.\n    # So we can use a set to store all characters, and a Counter to count the\n    # number of times each character appears.\n    # Then we can iterate through the Counter and count the number of distinct\n    # characters.\n    # O(n) time\n    # O(n) space\n    char_count = Counter(string)\n    distinct_chars = len(char_count)\n    return distinct_chars\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    distinct_chars = set()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    string = string.lower()\n    string_dict = {}\n    for char in string:\n        if char in string_dict:\n            string_dict[char] += 1\n        else:\n            string_dict[char] = 1\n    return len(string_dict)\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = string.lower()\n    count = 0\n    for i in string:\n        if i not in count:\n            count += 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    distinct_characters = set()\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        distinct_characters.add(char)\n    return len(distinct_characters)\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    music_list = music_string.split()\n    return [len(x) for x in music_list]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n_notes = 0\n    lst = []\n    for i in range(0, len(music_string)):\n        if music_string[i] == 'o':\n            n_notes += 1\n        elif music_string[i] == 'o|':\n            n_notes += 0.5\n        elif music_string[i] == '.':\n            n_notes += 0.25\n    for i in range(0, n_notes):\n        lst.append(4)\n    return lst\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # <editor-fold desc=\"My solution\">\n    # result = []\n    # i = 0\n    # while i < len(music_string):\n    #     if music_string[i] == 'o':\n    #         result.append(4)\n    #     elif music_string[i] == 'o|':\n    #         result.append(2)\n    #     elif music_string[i] == '.|':\n    #         result.append(1)\n    #     i += 1\n    # return result\n    return [int(c) for c in music_string.split() if c!= 'o']\n    # </editor-fold>\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    result = []\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            result.append(notes['o'])\n        elif note == 'o|':\n            result.append(notes['o|'])\n        elif note == '.':\n            if i < len(music_string) - 1:\n                result.append(notes[music_string[i+1]])\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [len(i.split('|')) for i in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def parse(music_string: str) -> List[int]:\n        if len(music_string) == 0:\n            return []\n        elif len(music_string) == 1:\n            return [1]\n        elif music_string[1] == 'o':\n            return parse(music_string[1:]) + [4]\n        elif music_string[1] == 'o|':\n            return parse(music_string[1:]) + [2]\n        elif music_string[1] == 'o|':\n            return parse(music_string[1:]) + [2]\n        elif music_string[1] == 'o':\n            return parse(music_string[1:]) + [1]\n        elif music_string[1] == '.':\n            return parse(music_string[1:]) + [1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l = list(music_string.strip())\n    return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in l]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    note_lengths = []\n    for c in music_string:\n        if c == 'o':\n            note_lengths.append(4)\n        elif c == 'o|':\n            note_lengths.append(2)\n        elif c == '.|':\n            note_lengths.append(1)\n        else:\n            pass\n    return note_lengths\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    music = music_string.split()\n    parsed_music = []\n    for note in music:\n        if note in ['o', 'o|', '.|']:\n            parsed_music.append(4)\n        elif note == 'o||':\n            parsed_music.append(2)\n        elif note == 'o||o|':\n            parsed_music.append(1)\n        elif note == '.||':\n            parsed_music.append(0.5)\n        else:\n            raise ValueError('Wrong format')\n    return parsed_music\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    beats = []\n    for s in music_string.split(' o '):\n        if s =='o|.| o| o|.|.|.|.| o o':\n            beats.append(4)\n        elif s =='o|.| o| o|.|.|.|.| o o':\n            beats.append(2)\n        elif s =='o|.| o| o|.|.|.|.| o o':\n            beats.append(1)\n        else:\n            beats.append(0)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not substring: return 0\n    count = 0\n    while True:\n        start = string.find(substring)\n        if start == -1: break\n        count += 1\n        string = string[start+1:]\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(string.count(substring) for substring in string.split(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([(i+1) * len(string) for i in range(len(string)) if string[i:i+len(substring)] == substring])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([1 for _ in re.finditer(substring, string)])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    idx = 0\n    while idx < len(string):\n        if string[idx:idx+len(substring)] == substring:\n            count += 1\n            idx += len(substring)\n        else:\n            idx += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([i for i, letter in enumerate(string) if letter == substring])\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.count(substring)"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    numbers = numbers.split(' ')\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_str = ''\n    list_numbers = numbers.split(' ')\n    list_numbers.sort(key=lambda x: int(x))\n    for num in list_numbers:\n        new_str += num +''\n    return new_str.rstrip()\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers_map = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5','six': '6','seven': '7', 'eight': '8', 'nine': '9'}\n    sorted_numbers = []\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    numbers_list = numbers.split(\" \")\n    numbers_list.sort()\n    return''.join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numbers = numbers.split(' ')\n    numbers = sorted(numbers, key=lambda s: int(s))\n    return''.join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    numeral_to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_int = [numeral_to_int[n] for n in numbers.split(' ')]\n    numbers_int.sort()\n    return''.join([str(n) for n in numbers_int])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Split the string into words using space delimiter\n    numbers = numbers.split()\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    nums = {}\n    for i in range(10):\n        nums[str(i)] = i\n    numbers = numbers.split()\n    new_nums = sorted(nums, key=nums.get)\n    return \" \".join(new_nums)\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers_list = [int(s) for s in numbers.split(' ')]\n    numbers_list.sort()\n    return''.join([str(n) for n in numbers_list])\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numeral_numbers = [number for number in numbers.split(' ')]\n    numeral_numbers.sort()\n    return''.join(numeral_numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('List must contain at least 2 elements')\n    if len(numbers) == 2:\n        return numbers\n    numbers.sort()\n    differences = []\n    for i in range(len(numbers) - 1):\n        differences.append(abs(numbers[i] - numbers[i+1]))\n    differences.sort()\n    return numbers[differences.index(differences[0])], numbers[differences.index(differences[1])]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    smallest_difference = None\n    closest_numbers = None\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if smallest_difference is None or difference < smallest_difference:\n                smallest_difference = difference\n                closest_numbers = numbers[i], numbers[j]\n    return closest_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"Not enough numbers\")\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(numbers) <= 1:\n        raise ValueError(\"no numbers\")\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    smaller = numbers[0]\n    larger = numbers[0]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers.sort()\n    # TODO: Is this method efficient? (can it be improved?)\n    closest_numbers = numbers[1], numbers[-1]\n    return closest_numbers\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    smallest = float(\"inf\")\n    second_smallest = float(\"inf\")\n    smallest_index = -1\n    second_smallest_index = -1\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sorted_numbers = sorted(numbers)\n    smallest = sorted_numbers[0]\n    largest = sorted_numbers[-1]\n    return smallest, largest\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    closest_nums = sorted(numbers, key=lambda num: num)\n    return closest_nums[0], closest_nums[-1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_val = min(numbers)\n    max_val = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    numbers.sort()\n    minimum = numbers[0]\n    maximum = numbers[-1]\n    result = []\n    for x in numbers:\n        new_value = (x - minimum) / (maximum - minimum)\n        result.append(new_value)\n    return result\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    return [ (number - minimum) / (maximum - minimum) for number in numbers ]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    smallest = min(numbers)\n    largest = max(numbers)\n    return [((x - smallest) / (largest - smallest)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    smallest_value = min(numbers)\n    largest_value = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    new_numbers = [0.0] * len(numbers)\n    for i in range(len(numbers)):\n        new_numbers[i] = (numbers[i] - min_number) / (max_number - min_number)\n    return new_numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = 1 / (max_num - min_num)\n    return [scale * (number - min_num) for number in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Find smallest and largest values\n    smallest = min(numbers)\n    largest = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    rescaled = [0.0] * len(numbers)\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for index, value in enumerate(numbers):\n        rescaled[index] = (value - min_val) / (max_val - min_val)\n    return rescaled\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [value for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in values if isinstance(x, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [int(item) for item in values if type(item) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [v for v in values if isinstance(v, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not string: return 0\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if string == '':\n        return 0\n    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    largest = 0\n    for i in range(2, int(n / 2) + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    largest = 1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            largest = i\n            if i*i!= n:\n                largest = int(n / i)\n        i += 1\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    divisor = 2\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    largest = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            largest = i\n        i += 1\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0:\n        return 0\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in reversed(range(1, n)):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n // 2 if n % 2 == 0 else n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    divisor = 1\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n - n % (n - 1)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input number should be a positive integer\")\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 2:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 2\n    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # TODO: use list of 2-tuples instead of list of integers\n    factors = [2]\n    \n    if n <= 0:\n        raise ValueError(\"Input number should be a positive integer\")\n    \n    if n < 2:\n        return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factors = []\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        else:\n            factor += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2] + factorize(n // 2)\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return [i] + factorize(n // i)\n        i += 2\n    return [n]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [numbers[i] for i in range(len(numbers)) if numbers[i] not in numbers[i + 1:]]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not numbers:\n        return []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # When you have a list, you can index it like a list.\n    # So, if you have a list of numbers, you can grab numbers by their index.\n    new_list = []\n    for number in numbers:\n        if number not in new_list:\n            new_list.append(number)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # numbers = [1, 2, 3, 2, 4]\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not numbers:\n        return numbers\n    unique = {}\n    result = []\n    for num in numbers:\n        if num not in unique:\n            unique[num] = 1\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    flipped = \"\"\n    for c in string:\n        if c.isupper():\n            flipped += c.lower()\n        elif c.islower():\n            flipped += c.upper()\n        else:\n            flipped += c\n    return flipped\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(['A' if c.isupper() else 'a' if c.islower() else c for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = ''\n    for letter in string:\n        if letter.isupper():\n            result += letter.lower()\n        elif letter.islower():\n            result += letter.upper()\n        else:\n            result += letter\n    return result\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not strings:\n        return ''\n    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if strings == []:\n        return \"\"\n    else:\n        return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = ''\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = \"\"\n    for s in strings:\n        result += s\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n    \ndef get_absolute(l: list):\n    \"\"\"Return only absolute values in the list.\n    >>> get_absolute([-1, 2, -4, 5, 6])\n    [1, 2, 4, 5, 6]\n    >>> get_absolute([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1, 10]\n    \"\"\"\n    return [abs(x) for x in l]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [num for num in l if num >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [number for number in l if number > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Corner case\n    if n == 1:\n        return False\n    # Try to divide by all numbers up to the square root\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0 or n == 1:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        i = 5\n        while i ** 2 <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i = i + 6\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    else:\n        return rabin_miller(n)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # isinstance(x, int) should check for int\n    # if n is not an integer, then it will return false\n    if not isinstance(n, int):\n        return False\n    # base case\n    if n <= 1:\n        return False\n    # if n is divisible by 2\n    if n % 2 == 0:\n        return False\n    # if n is divisible by 3\n    if n % 3 == 0:\n        return False\n    # if n is divisible by any number between 4 and\n    # sqrt(n)\n    for x in range(4, int(math.sqrt(n)) + 1, 2):\n        if n % x == 0:\n            return False\n    # otherwise\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(xs) % 2 == 1:\n        raise Exception(\"You are trying to find zero of a polynomial with odd number of coefficients\")\n    negative_coeff = False\n    for i in range(len(xs)):\n        if xs[i] < 0:\n            negative_coeff = True\n    if negative_coeff:\n        raise Exception(\"You cannot find zero of a polynomial with negative coefficient.\")\n    zeros = []\n    for i in range(0, len(xs), 2):\n        if xs[i] == 0:\n            zeros.append(xs[i+1])\n    if len(zeros) == 0:\n        raise Exception(\"Could not find any zero.\")\n    return zeros[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(xs) % 2!= 0 or xs[0] == 0:\n        raise ValueError(\"Function takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\")\n    negative_coeff = sum([coeff < 0 for coeff in xs])\n    if negative_coeff == len(xs):\n        return 0\n    if negative_coeff % 2 == 1:\n        return -find_zero(xs[:-1])\n    positive_coeff = sum([coeff > 0 for coeff in xs])\n    if positive_coeff % 2 == 0:\n        return find_zero(xs[:-1])\n    return (find_zero(xs[:-1]) - find_zero(xs[:-2])) / (xs[-1] - 2 * xs[-2])\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # check if polynomial is linear\n    if len(xs) % 2 == 1:\n        return None\n    # find an x s.t. poly(x) = 0, in O(n) time\n    for x in xs:\n        if x!= 0:\n            break\n    else:\n        return None\n    # find an x s.t. poly(x) = 0, in O(n) time\n    for x in reversed(xs):\n        if x!= 0:\n            break\n    else:\n        return None\n    # check if find_zero gives the desired result\n    if poly(x, xs[0] / x)!= 0:\n        return None\n    # check if find_zero gives the desired result\n    if poly(x, -xs[-1] / x)!= 0:\n        return None\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(xs) == 0:\n        return None\n    if len(xs) % 2!= 0:\n        return None\n    if xs[0] == 0:\n        return None\n    result = 0\n    for i in range(len(xs)):\n        result += xs[i] * math.pow(x, i)\n    return result / xs[0]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    xs = xs[:]\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    if len(xs) % 2 == 1:\n        # this is a requirement to avoid infinite recursion\n        return None\n    if xs[0] == 0:\n        # find root by checking sign\n        xs.append(-xs[1])\n    else:\n        xs.append(1.0)\n    return find_zero(xs)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # we assume that xs are coefficients of a polynomial\n    # for a polynomial of n coefficients, its coefficients are [x^n, x^n-1,..., x^2, x, 1]\n    # if n is even, we have a solution:\n    # poly(x) = x^(n / 2) + 1 = x^(n / 2) + (1 - x^(n/2))\n    # if n is odd, we have a solution:\n    # poly(x) = x^(n / 2) + 1 = x^(n / 2) + (1 - x^(n / 2) - x^(n/2-1))\n    # if there are multiple zeros, we return only the first one\n    if len(xs) == 0:\n        return None\n    # we assume that xs are coefficients of a polynomial\n    # for a polynomial of n coefficients, its coefficients are [x^n, x^n-1,..., x^2, x, 1]\n    # if n is even, we have a solution:\n    # poly(x) = x^(n / 2) + 1 = x^(n / 2) + (1 - x^(n/2))\n    # if n is odd, we have a solution:\n    # poly(x) = x^(n / 2) + 1 = x^(n / 2) + (1 - x^(n / 2) - x^(n/2-1))\n    # if there are multiple zeros, we return only the first one\n    if len(xs) % 2!= 0:\n        return None\n    xs = sorted(xs)\n    n = len(xs)\n    if n == 1:\n        return xs[0]\n    half = int(n / 2)\n    a = xs[:half]\n    b = xs[half:]\n    A = [poly(a, x) for x in range(n + 1)]\n    B = [poly(b, x) for x in range(n + 1)]\n    if A[0] == 0:\n        return a[0]\n    if B[0] == 0:\n        return b[0]\n    c = [B[i] - A[i] for i in range(n + 1)]\n    # all coefficients but the leading one are zero\n    # if there is a single zero point, find_zero returns only that zero point\n    if c[0] == 0 and c[1]!= 0:\n        return None\n    c = [-c[0]] + c[1:]\n    # lcm(a, b) = a * b / gcd(a, b)\n    # the leading coefficient of c is the lcm(a, b)\n    lcm = abs(a[0] * b[0]) // math.gcd(a[0], b[0])\n    # the leading coefficients of c are the lcm(a, b) / a, lcm(a, b) / b\n    # find all x such that x^n = lcm(a, b) / a, x^n = lcm(a, b) / b\n    # the number of such x is the number of non zero coeffcients of poly(x)\n    # poly(x) = lcm(a, b) / a + x * (lcm(a, b) / b)\n    # we have a polynomial, poly(x) = lcm(a, b) / a + x * (lcm(a, b) / b)\n    # for x = lcm(a, b) / a, poly(x) = lcm(a, b) / a + x * (lcm(a, b) / b) = lcm(a, b)\n    # for x = lcm(a, b) / a, poly(x) = lcm(a, b) / a + x * (lcm(a, b) / b) = lcm(a, b) * x\n    # for x = lcm(a, b) / a, poly(x) = lcm(a, b) / a + x * (lcm(a, b) / b) = lcm(a, b) * x - lcm(a, b)\n    # lcm(a, b) = a * b / gcd(a, b)\n    # if lcm(a"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # coeffs = xs[::2]\n    # nums = xs[1::2]\n    # all_zeros = []\n    # for i in range(len(coeffs)):\n    #     if coeffs[i] == 0:\n    #         all_zeros.append(nums[i])\n    # if len(all_zeros) == 1:\n    #     return all_zeros[0]\n    # else:\n    #     return None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = len(xs) // 2\n    a = xs[i]\n    b = xs[-i - 1]\n    if a == 0:\n        return -b / b\n    return (-b + math.sqrt(b * b - 4 * a * xs[-i - 1])) / (2 * a)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    index = None\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            if index is None or abs(xs[i]) > abs(xs[index]):\n                index = i\n    if index is None:\n        return None\n    result = 0\n    for coeff in xs[index:]:\n        result += coeff * math.pow(xs[index], -1)\n    return xs[index] - result\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if xs[-1]!= 0:\n        raise ValueError('Polynomial must have an even number of coefficients and largest non-zero coefficient must be non-zero.')\n    if len(xs) % 2 == 0:\n        raise ValueError('Polynomial must have an even number of coefficients')\n    for i, x in enumerate(xs):\n        if x!= 0:\n            x_zero = i - (len(xs) + 1) // 2\n            if x == -1:\n                x_zero = -1 / x_zero\n            return x_zero\n    raise ValueError('Polynomial cannot be a constant polynomial.')\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert len(l) >= 3\n    l_new = [l[i] for i in range(len(l)) if i % 3!= 0]\n    l_new.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_new.append(l[i])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l_copy = l[:]\n    for index in range(len(l_copy)):\n        if index % 3!= 0:\n            l_copy[index] = l_copy[index-1]\n    l_copy.sort()\n    return l_copy\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l1 = []\n    l2 = []\n    for i in l:\n        if i % 3 == 0:\n            l1.append(i)\n        else:\n            l2.append(i)\n    return l1 + l2\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    first = 0\n    second = 1\n    third = 2\n    l1 = []\n    while first < len(l):\n        l1.append(l[first])\n        if first % 3 == 2:\n            l1.append(l[second])\n            second += 1\n        first += 1\n    l1.sort()\n    return l1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    l = l[:]\n    i = 0\n    while i < len(l):\n        if l[i] % 3 == 0:\n            i = i + 1\n        else:\n            l.insert(i, l[i])\n            i = i + 1\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    x = 0\n    newlist = []\n    for i in l:\n        if (i % 3 == 0):\n            newlist.append(i)\n        else:\n            newlist.insert(x, i)\n            x += 1\n    return newlist\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    list_copy = l[:]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    temp = sorted(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = temp[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [l[i] for i in range(len(l)) if i % 3 == 0] + [l[i] for i in range(len(l)) if i % 3!= 0]"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sort_index = 0\n    for x in l:\n        if sort_index % 3 == 0:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        if sort_index % 3 == 1:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        if sort_index % 3 == 2:\n            if x!= l[sort_index]:\n                l[sort_index] = l[sort_index-1]\n        sort_index += 1\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return list(sorted(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    unique_l = []\n    [unique_l.append(x) for x in l if x not in unique_l and unique_l.append(x)]\n    return sorted(unique_l)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(l))\n    \ndef unique2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = set(l)\n    l2 = list(s)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return list(set(l))\n    \ndef quicksort(l: list):\n    \"\"\"\n    >>> quicksort([4, 2, 1, 9, 3, 5])\n    [1, 2, 3, 4, 5, 9]\n    \"\"\"\n    # if the list is already sorted, stop\n    if l == sorted(l):\n        return l\n    # get the pivot\n    pivot = l.pop()\n    # lower\n    lower = [item for item in l if item <= pivot]\n    # higher\n    higher = [item for item in l if item > pivot]\n    # combine\n    return quicksort(lower) + [pivot] + quicksort(higher)\n    \ndef groupby(l: list, fn):\n    \"\"\"Group a list by a given function\n    >>> groupby([11, 22, 33, 22, 22, 22, 1, 1, 2, 2, 2, 2], lambda x: x%2)\n    {0: [2, 2], 1: [11, 22, 33, 22]}\n    \"\"\"\n    result = {}\n    for item in l:\n        key = fn(item)\n        result.setdefault(key, []).append(item)\n    return result\n    \ndef merge(l: list, fn):\n    \"\"\"\n    >>> merge([1, 4, 9, 16, 25, 36], lambda x: x%2)\n    [1, 4, 9, 16, 25, 36]\n    \"\"\"\n    # base case\n    if len(l) < 2:\n        return l\n    # split into left and right\n    left, right = l[:len(l)//2], l[len(l)//2:]\n    # merge left and right\n    return merge(merge(left, fn), fn) + merge(right, fn)\n    \ndef is_palindrome(s: str):\n    \"\"\"\n    >>> is_palindrome(\"racecar\")\n    True\n    >>> is_palindrome(\"noon\")\n    True\n    >>> is_palindrome(\"robert\")\n    False\n    \"\"\"\n    for i in range(len(s)//2):\n        if s[i]!= s[-(i+1)]:\n            return False\n    return True\n    \ndef is_anagram(s1: str, s2: str):\n    \"\"\"\n    >>> is_anagram(\"hello\", \"olleh\")\n    True\n    >>> is_anagram(\"hello\", \"helol\")\n    False\n    \"\"\"\n    return sorted(s1) == sorted(s2)\n    \ndef count_vowels(s: str):\n    \"\"\"\n    >>> count_vowels(\"karolin\")\n    6\n    >>> count_vowels(\"minyanya\")\n    7\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for item in s:\n        if item in vowels:\n            count += 1\n    return count\n    \ndef reverse(s: str):\n    \"\"\"\n    >>> reverse(\"hello\")\n    'olleh'\n    >>> reverse(\"howdy\")\n    'dywh'\n    \"\"\"\n    return s[::-1]\n    \ndef palindromes(l: list):\n    \"\"\"\n    >>> palindromes([1, 2, 3, 2, 1])\n    [1, 3, 3, 2, 2]\n    \"\"\"\n    # base case\n    if len(l) < 2:\n        return l\n    # split into left and right\n    left, right = l[:len(l)//2], l[len(l)//2:]\n    # combine\n    return palindromes(left + right)\n    \ndef binary_search(l: list, target: int):\n    \"\"\"\n    >>> binary_search([1, 3, 6, 8, 19], 19)\n    4\n    \"\"\"\n    # base case\n    if len(l) == 0:\n        return -1\n    # determine the midpoint\n    midpoint = len(l)//2\n    # compare the value\n    if l[midpoint] == target:\n        return midpoint\n    # determine if target is to the left or right\n    if l[midpoint] > target:\n        return binary_search(l[:midpoint], target)\n    else:\n        return binary_search(l[midpoint+1:]"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l = sorted(set(l))\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Taken from http://stackoverflow.com/a/480227/190597\n    s = set(l)\n    return sorted(s)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return None\n    else:\n        return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Your code here\n    # max_num = l[0]\n    # for num in l:\n    #     if num > max_num:\n    #         max_num = num\n    # return max_num\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    max_elem = l[0]\n    for i in l:\n        if i > max_elem:\n            max_elem = i\n    return max_elem\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    assert l, 'List is empty'\n    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert type(l) == list and l!= [], \"The list must be a list and not empty\"\n    max = l[0]\n    for i in l:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        raise ValueError('Cannot compute maximum of empty sequence')\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return max(l)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    return sum(s == 7 for s in str(n) if s in '713')\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    return fizzbuzz_helper(n, 7, 11, 13)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for num in range(1,n):\n        if (num % 11 == 0 or num % 13 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Replace the following line with your implementation\n    # count = 0\n    # for i in range(1, n + 1):\n    #     if i % 11 == 0 or i % 13 == 0:\n    #         count += 1\n    # return count\n    return sum(1 for i in range(1, n + 1) if i % 11 == 0 or i % 13 == 0)\n    \n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    i = 0\n    for i in range(n):\n        if (i+1) % 13 == 0 or (i+1) % 11 == 0:\n            i += 1\n        else:\n            i += 0\n    return i\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    b = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            b += 1\n    return b\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0) or (i % 13 == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(l) == 0:\n        return l\n    else:\n        return l[0:len(l)//2] + [sorted(l[len(l)//2:len(l)])[0]] + l[len(l)//2+1:len(l)]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    list_copy = l[:]\n    for i in range(len(list_copy)):\n        if i % 2 == 1:\n            list_copy[i] = l[i // 2]\n    return list_copy\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not isinstance(l, list):\n        return None\n    if len(l) == 0:\n        return None\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(l[i])\n        else:\n            result.append(l[i])\n            result.sort()\n    return result\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l2 = l[::2]\n    l2.sort()\n    l3 = []\n    for i in l:\n        if i % 2 == 0:\n            l3.append(i)\n    for i in l2:\n        l3.append(i)\n    return l3\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(l) < 2:\n        return l\n    l_odd = l[1::2]\n    l_odd.sort()\n    l_even = [l[0]] + l_odd + l[2::2]\n    return l_even\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) < 2:\n        return l\n    elif len(l) == 2:\n        return [l[1], l[0]]\n    else:\n        # n is the number of even elements in l\n        n = len(l) // 2\n        # even_list contains all the even elements in l, which are\n        # stored at index 0 to n-1\n        even_list = l[0:n]\n        # sorted_even_list contains the elements of l in order, but\n        # sorted from smallest to largest\n        sorted_even_list = sorted(even_list)\n        # new_l is l, but with the even values replaced with the\n        # elements from sorted_even_list\n        new_l = [l[i] for i in range(0, len(l), 2)]\n        # new_l is l', but with the even values replaced with the\n        # elements from sorted_even_list\n        for i in range(n):\n            new_l[i] = sorted_even_list[i]\n        return new_l\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l_new = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            l_new.append(l[i])\n        else:\n            l_new.append(l[i-1])\n    l_new.sort()\n    return l_new\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [l[i] for i in range(len(l)) if i % 2 == 0] + sorted([l[i] for i in range(len(l)) if i % 2 == 1])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort(key=lambda x: x % 2)\n    return l\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    groups = [s[i:min(i + 3, len(s))] for i in range(0, len(s), 3)]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    groups = [\"\".join([groups[i][1] for i in range(3)])] + groups\n    groups = [\"\".join([groups[i][1] for i in range(len(groups) - 3, len(groups))])] + groups[:len(groups) - 3]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = encode_cyclic(s)\n    return s[0] + s[-1] + s[1:-1]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[1:] + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # split into groups of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # replace each group with the first element of the next group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # convert to string.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # reverse string and encode each group. Each group is a character.\n    s = s[::-1]\n    groups = [s[3 * i:min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. If the group has length of 3, take the element at index 1 and concatenate it to the element at index 0.\n    groups = [\"\".join([g[i] for i in range(len(g))]) for g in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return encode_cyclic(s)"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n = len(s)\n    i = 0\n    j = 0\n    res = []\n    while i < n:\n        res.append(s[j])\n        j += 1\n        if j == n:\n            j = 0\n        i += 1\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert len(s) % 3 == 0, \"decoded string must be divisible by 3\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [\"\".join(x[1:] + x[0]) for x in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return encode_cyclic(s)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    num_1 = 1\n    num_2 = 2\n    for i in range(1, n):\n        num_1, num_2 = num_2, num_1 + num_2\n    return num_1\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n % 2 == 0:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    n_minus_1, n_minus_2 = 0, 1\n    curr = 1\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        fn_1 = prime_fib(n - 1)\n        fn_2 = prime_fib(n - 2)\n        return (fn_1 + fn_2)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    fib = [1, 2]\n    for _ in range(n - 2):\n        fib.append(fib[-2] + fib[-1])\n    return fib[-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 1:\n        raise ValueError(\"Invalid input. Input number must be positive.\")\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    a = 2\n    b = 3\n    m = 0\n    i = 1\n    while i < n:\n        t = a + b\n        a = b\n        b = t\n        m = t\n        i = i + 1\n    if m % n == 0:\n        return m\n    else:\n        return m + n\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    fib_nums = [0,1]\n    while fib_nums[-1] < n:\n        fib_nums.append(fib_nums[-2]+fib_nums[-1])\n    return fib_nums[-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return next_prime(fib_seq(n)[0])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    distinct_elems = set(l)\n    if len(distinct_elems) < 3:\n        return False\n    return sum(l) == 0 and len(distinct_elems) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return False if len(l) < 3 else sum(set(l)) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            return True\n    return False"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    l.sort()\n    a = 0\n    b = 1\n    c = 2\n    while b < len(l):\n        while l[a] + l[b] + l[c] < 0 and c < len(l):\n            c += 1\n        if c == len(l) - 1:\n            return False\n        if l[a] + l[b] + l[c] == 0:\n            return True\n        a += 1\n        b += 1\n        c += 1\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    l2 = l[:]\n    l2.sort()\n    i = 0\n    j = 1\n    k = 2\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        if i == 0:\n            for j in range(i+1, len(l)):\n                if l[i] + l[j] == 0:\n                    return True\n        elif i > 0:\n            for j in range(i):\n                if l[i] + l[j] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert type(l) == list\n    for elem in l:\n        assert type(elem) == int\n    l.sort()\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    cars = []\n    for i in range(n):\n        cars.append(Car(0, 0, 0, 0))\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert type(n) == int and n >= 0\n    return [race_collision_on_line(n), race_collision_on_line(n)][n % 2]\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def to_collision(x, y):\n        return to_collision_helper(x, y, 0, 0, 0)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    n_collisions = 0\n    for i in range(n):\n        for j in range(n-i):\n            if i*n - i + j*n - j - 1 == 0:\n                n_collisions += 1\n    return n_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    collisions = 0\n    # your code here\n    return collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum([(n-i)*(n-i-1)//2 for i in range(n)])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Your Code Here\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [elem + 1 for elem in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # return [x+1 for x in l]\n    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [num + 1 for num in l]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    s = set()\n    for i in l:\n        if -i in s:\n            return True\n        s.add(i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # We will store the numbers as we iterate through the list in a hashtable\n    # The hashing function is the tuple, and the value stored is the index of the\n    # element in the list.\n    # this allows us to avoid the need to use bisect, since indexing in a hashtable\n    # is O(1).\n    # to see how this works, we'll check the hash table at the end:\n    # >>> import pprint\n    # >>> pprint.pprint(hash_table)\n    # {-2: 1, -1: 1, 0: 3, 2: 1, 1: 3, 3: 1}\n    # >>> pairs_sum_to_zero([1, -3, 5, 0])\n    # True\n    # >>> pairs_sum_to_zero([1, -3, 5, -5])\n    # True\n    # >>> pairs_sum_to_zero([-3, 5, -5])\n    # False\n    hash_table = {}\n    for i, num in enumerate(l):\n        # The next line is for debugging purposes:\n        # print(hash_table)\n        # It is slow, so we're only printing when we need to:\n        # if num in hash_table:\n        #     print(\"Found it! %s, %s\" % (num, hash_table[num]))\n        #     return True\n        # hash_table[-num] = i\n        # hash_table[num] = i\n        # print(hash_table)\n        # if num in hash_table:\n        #     print(\"Found it! %s, %s\" % (num, hash_table[num]))\n        #     return True\n        # else:\n        #     print(\"Not here yet\")\n        #     hash_table[-num] = i\n        #     hash_table[num] = i\n        #     print(hash_table)\n        # if -num in hash_table:\n        #     print(\"Found it! %s, %s\" % (num, hash_table[num]))\n        #     return True\n        # else:\n        #     print(\"Not here yet\")\n        if num in hash_table:\n            print(\"Found it! %s, %s\" % (num, hash_table[num]))\n            return True\n        else:\n            print(\"Not here yet\")\n            hash_table[-num] = i\n            hash_table[num] = i\n            print(hash_table)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return False if len(l) < 2 else any(l[i] + l[j] == 0 and i!= j for i in range(len(l)) for j in range(i+1, len(l)))\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    l1 = set(l)\n    for n in l:\n        if -n in l1:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(0, len(l) - 1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                count += 1\n    if count < 2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    d = {}\n    for item in l:\n        if item in d:\n            return True\n        d[-1 * item] = item\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in l:\n        for j in l:\n            if i!= j and i + j == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l.sort()\n    for i in range(len(l) - 1):\n        if l[i] + l[i + 1] == 0:\n            return True\n    return False"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        if -1 * l[i] in l:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(l) < 2:\n        return False\n    pair = set()\n    for e in l:\n        if e in pair:\n            return True\n        pair.add(e)\n    return False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x!= 0:\n        digits.append(chr(ord('0') + x % base))\n        x //= base\n    return ''.join(reversed(digits))\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if x < base:\n        return str(x)\n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(chr(ord('0') + remainder))\n        x = x // base\n    return ''.join(reversed(digits))\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    DIGIT = '0123456789abcdefghijklmnopqrstuvwxyz'\n    converted_string = ''\n    while x > 0:\n        digit = x % base\n        if digit > 9:\n            digit_string = DIGIT[digit-10]\n        else:\n            digit_string = str(digit)\n        converted_string = digit_string + converted_string\n        x //= base\n    return converted_string\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    d = '0123456789ABCDEF'\n    q, r = divmod(x, base)\n    if q == 0:\n        return d[r]\n    else:\n        return change_base(q, base) + d[r]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if base > 10:\n        raise ValueError(\"Base cannot be greater than 10\")\n    digit = []\n    while x > 0:\n        digit.append(x % base)\n        x //= base\n    return ''.join([str(i) for i in digit[::-1]])\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    DIGITS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    d = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F', 16: 'G', 17: 'H', 18: 'I', 19: 'J', 20: 'K', 21: 'L', 22: 'M', 23: 'N', 24: 'O', 25: 'P', 26: 'Q', 27: 'R', 28: 'S', 29: 'T', 30: 'U', 31: 'V', 32: 'W', 33: 'X', 34: 'Y', 35: 'Z'}\n    new_str = ''\n    while x > 0:\n        digit = x % base\n        if digit < 10:\n            new_str = d[digit] + new_str\n        else:\n            new_str = str(digit) + new_str\n        x //= base\n    return new_str\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    string = \"\"\n    while x:\n        if x % base == 0:\n            string += \"0\"\n        else:\n            string += str(x % base)\n        x //= base\n    return string[::-1]\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return 0.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (a*h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return.5 * a * h\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return 0.5 * h * a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a = 0\n        b = 1\n        c = 0\n        d = 2\n        while d <= n:\n            c = a + b\n            a = b\n            b = c\n            d += 1\n        return c\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a+b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return n\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    f0, f1, f2, f3 = 0, 0, 2, 1\n    if n < 1:\n        return f0\n    if n == 1:\n        return f1\n    elif n == 2:\n        return f2\n    elif n == 3:\n        return f3\n    else:\n        for _ in range(n - 4):\n            f4 = f0 + f3 + f2 + f1\n            f0, f1, f2, f3 = f1, f2, f3, f4\n        return f4\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l.sort()\n    halfway = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[halfway - 1] + l[halfway]) / 2\n    return l[halfway]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l.sort()\n    length = len(l)\n    mid = length // 2\n    if length % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    l = sorted(l)\n    length = len(l)\n    mid = length // 2\n    if length % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid-1] + l[mid]) / 2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(l)%2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = sorted(l)\n    length = len(s)\n    middle = length / 2\n    if length % 2 == 0:\n        return (s[middle - 1] + s[middle]) / 2\n    return s[middle]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return l[len(l) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sorted_list = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        median = (sorted_list[length//2-1] + sorted_list[length//2]) / 2\n    else:\n        median = sorted_list[length//2]\n    return median\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    l = sorted(l)\n    n = len(l)\n    if n == 0:\n        return None\n    elif n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    l.sort()\n    length = len(l)\n    if length == 0:\n        raise ValueError(\"median of an empty list is not defined\")\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[(n // 2)]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not text:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # ignore spaces, tabs and non-letters\n    text = ''.join(l for l in text.lower() if l in 'abcdefghijklmnopqrstuvwxyz')\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return text[::-1].casefold() == text.casefold()\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(text) <= 1:\n        return True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Note: This implementation is O(n^2) - but the worst case complexity\n    # is still O(n), so this is an acceptable trade-off.\n    # Also note that we have to reverse the string in order to avoid duplicating\n    # characters from the original string.\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return text[::-1].casefold() == text.casefold()\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    return modp(n // 2, p) ** 2 % p if n % 2 == 0 else modp((n - 1) // 2, p) ** 2 * p % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return n % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n % 2 == 1:\n        return (modp(n-1, p) * p) % p\n    elif n % 2 == 0:\n        return (modp(n//2, p) ** 2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return (modp(n-1, p)**2) % p\n    else:\n        return (modp(n/2, p)**2) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n < 0:\n        return (1 - modp(-n, p)) % p\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return (p - 1)\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (modp(n - 1, p) * p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = n % p\n    if n == 0:\n        return 1\n    else:\n        return modp(n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return modp(n - 1, p) * p\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert 0 <= n and n <= 100, 'n out of range'\n    assert 0 <= p and p <= 101, 'p out of range'\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numerator = n % p\n    quotient = n // p\n    mod_p = (numerator * modp(p, quotient)) % p\n    return mod_p if mod_p < p else mod_p - p\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    text = text.lower()\n    new_text = ''\n    for letter in text:\n        if letter in vowels:\n            continue\n        else:\n            new_text += letter\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = text\n    vowels = 'AEIOUY'\n    for char in vowels:\n        result = result.replace(char, '')\n    return result\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    output = []\n    for i in text:\n        if i.lower() not in vowels:\n            output.append(i)\n    return ''.join(output)\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    return \"\".join([l for l in text if l not in vowels])\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    words = text.split()\n    new_words = []\n    for word in words:\n        new_word = ''\n        for letter in word:\n            if letter.lower() not in vowels:\n                new_word = new_word + letter\n        new_words.append(new_word)\n    return''.join(new_words)\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    newText = \"\"\n    for character in text:\n        if character not in vowels:\n            newText += character\n    return newText\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for c in text:\n        if c not in vowels:\n            new_string += c\n    return new_string\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    no_vowels = ''\n    for letter in text:\n        if letter not in vowels:\n            no_vowels += letter\n    return no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code goes here\n    if not text:\n        return ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new = ''\n    for c in text:\n        if not c.lower() in vowels:\n            new += c\n    return new"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    text = text.lower()\n    result = ''\n    for ch in text:\n        if ch not in vowels:\n            result += ch\n    return result\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(num <= t for num in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(n <= t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in l:\n        if i >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(l) == 0:\n        return True\n    if l[0] <= t:\n        return below_threshold(l[1:], t)\n    else:\n        return False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return all(l <= t for l in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    for item in l:\n        if item >= t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # s0 and s1 have the same length\n    if len(s0)!= len(s1):\n        return False\n    \n    # s0 and s1 have the same chars\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return all(x == y for x, y in zip(s0, s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (s0[0] == s1[0]) and (s0[1] == s1[1]) and (s0[2] == s1[2]) and (s0[3] == s1[3])\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for c0, c1 in zip(s0, s1):\n        if c0!= c1:\n            return False\n    return True\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return 1 if n < 3 else fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n < 1:\n        raise ValueError(\"input must be positive\")\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a, b = 1, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for c in brackets:\n        if c == '>':\n            count += 1\n        elif c == '<':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    brackets = brackets.replace(\"<>\", \"\")\n    return all(x == '>' for x in brackets)\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    bracket_stack = []\n    for b in brackets:\n        if b == \">\" and len(bracket_stack) > 0 and bracket_stack[-1] == \"<\":\n            bracket_stack.pop()\n        else:\n            bracket_stack.append(b)\n    return len(bracket_stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not brackets:\n        return True\n    if len(brackets) % 2 == 1:\n        return False\n    else:\n        opening_brackets = [i for i in range(len(brackets)) if brackets[i] == \"<\"]\n        closing_brackets = [i for i in range(len(brackets)) if brackets[i] == \">\"]\n        return all(opening_brackets[i] == closing_brackets[i] - 1 for i in range(len(opening_brackets)))\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            bracket_stack.append(\"<\")\n        elif bracket == \">\":\n            if bracket_stack == [] or bracket_stack.pop()!= \"<\":\n                return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \">\" or bracket == \"<\":\n            if len(stack) == 0:\n                return False\n            if bracket == \">\" and stack[-1] == \"<\":\n                stack.pop()\n            else:\n                stack.append(bracket)\n    return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    else:\n        stack = []\n        for bracket in brackets:\n            if bracket == \">\":\n                stack.pop()\n            else:\n                stack.append(bracket)\n        return len(stack) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    # Complete this function\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    open_bracket_stack = []\n    for bracket in brackets:\n        if bracket in bracket_map:\n            open_bracket_stack.append(bracket)\n        else:\n            if not open_bracket_stack:\n                return False\n            current_bracket = open_bracket_stack.pop()\n            if bracket_map[current_bracket]!= bracket:\n                return False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if stack == []:\n                return False\n            stack.pop()\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    stack = []\n    bracket_dict = {'(':')', '{':'}', '[':']'}\n    for b in brackets:\n        if b in bracket_dict:\n            stack.append(b)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if bracket_dict[top]!= b:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # TODO: Your code here\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l[i] >= l[i - 1] for i in range(1, len(l))) or all(l[i] <= l[i - 1] for i in range(1, len(l)))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def shift(l: list) -> bool:\n        return (l[0] - l[1] > 0) if len(l) > 1 else (l[0] > l[1])\n    return shift(l[1:]) == shift(l[:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return l == sorted(l) or l == sorted(l, reverse=True)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return list(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return list(set(l1).intersection(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1) & set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(set(l1).intersection(l2))\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # Implement your solution here\n    # Best case O(sqrt(n))\n    # All primes are of the form 6k +- 1\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0 and is_prime(i):\n            return i\n    #n = [i for i in range(2, n+1) if n % i == 0 and is_prime(i)]\n    #return n[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert n > 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for factor in range(n - 1, 1, -1):\n        if n % factor == 0:\n            return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    i = 2\n    while n > i * i:\n        if n % i == 0:\n            n = int(n / i)\n            if n == i:\n                return i\n            else:\n                i = 2\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \"\"\"Returns the largest prime factor of n.\"\"\"\n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    assert n > 1 and n % 2!= 0\n    candidates = [i for i in range(2, n // 2) if n % i == 0]\n    return max(candidates)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    limit = int(n ** 0.5) + 1\n    for i in range(2, limit):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    largest = 1\n    if n % 2 == 0:\n        largest = 2\n        while n % 2 == 0:\n            n //= 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n            largest = i\n            while n % i == 0:\n                n //= i\n        i += 2\n    return largest\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total, i = 0, 1\n    while i <= n:\n        total += i\n        i += 1\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    total = 0\n    for i in range(n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n - 1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n * (n + 1) / 2\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not brackets:\n        return True\n    else:\n        return bracket_match(brackets[0], brackets[1:])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(l == r for l, r in zip(brackets, brackets[1:]))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    if not brackets:\n        return True\n    if brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    b = brackets\n    #print(b)\n    while '(' in b:\n        b = b.replace('(','')\n        b = b.replace(')','')\n    return True if len(b) == 0 else False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not brackets:\n        return True\n    elif brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    correct = True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    brackets = brackets.replace(\"(\", \" ( \")\n    brackets = brackets.replace(\")\", \" ) \")\n    brackets = brackets.split()\n    stack = []\n    for i, x in enumerate(brackets):\n        if x == \"(\":\n            stack.append(i)\n        elif x == \")\":\n            if stack == [] or brackets[stack.pop()]!= \"(\":\n                return False\n    if stack == []:\n        return True\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    while \"()\" in brackets:\n        brackets = brackets.replace(\"()\", \"\")\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [f\"{i} * {xs[idx-1]} \" for idx, i in enumerate(xs) if idx > 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i*j for j, i in enumerate(xs[1:],1)] + [xs[0]]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(xs) == 1:\n        return [1]\n    else:\n        return [xs[i] * i for i in range(len(xs) - 1, 0, -1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    length = len(xs)\n    if length == 1:\n        return [0]\n    if length == 2:\n        return [xs[1]]\n    return [xs[i] + xs[i+1]*(length-1) for i in range(length-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(xs) < 2:\n        raise ValueError(\"List of coefficients should have at least 2 elements.\")\n    result = []\n    for index in range(len(xs)-1):\n        result.append(xs[index+1]*(index+1))\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert isinstance(xs, list)\n    assert len(xs) > 0\n    res = [xs[i] * (i+1) for i in range(len(xs))]\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(xs) < 2:\n        return xs\n    return [xs[1]] + [xs[i] * j for i, j in enumerate(xs[2:], 2)]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [xs[i] * (len(xs) - i - 1) for i in range(len(xs))]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(xs) == 0:\n        return [1]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    out = [xs[i] if i == 0 else xs[i] * i for i in range(len(xs))]\n    return out\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = 0\n    b = 1\n    for i in range(0, n):\n        c = a + b\n        a = b\n        b = c\n    return b\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return b\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n > 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    for i in s:\n        if i in vowels:\n            vowel_count += 1\n        if i == 'y':\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    num = 0\n    for i in s:\n        if i in ['a', 'e', 'i', 'o', 'u', 'y']:\n            num += 1\n    return num\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 0\n    for char in s:\n        if char in 'aeiouy':\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    vowels = \"aeiou\"\n    if len(s) == 1:\n        if s in vowels:\n            return 1\n        else:\n            return 0\n    else:\n        return 1 + vowels_count(s[1:])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    vowels = 0\n    for char in s:\n        if char in 'aeiou':\n            vowels += 1\n    if s[-1] in 'aeiouy':\n        vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(1 for i in s if i in 'aeiouy')\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    total = 0\n    \n    for c in s:\n        if c in vowels:\n            total += 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    if s[-1] in vowels:\n        count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    vowels = set('aeiouAEIOU')\n    count = 0\n    for ch in s:\n        if ch in vowels:\n            count += 1\n    if count < len(s) and s[-1] in vowels:\n        count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    digs = str(x)\n    digs = digs[-shift:] + digs[:-shift]\n    return digs\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    length = len(str(abs(x)))\n    if shift > length:\n        # Shift is greater than the number of digits.\n        # Reverse the digits and shift them.\n        return \"\".join(reversed(list(str(x))))[:-shift] + \"\".join(reversed(list(str(x))))[-shift:]\n    else:\n        # Shift is less than the number of digits.\n        # Shift the digits forward.\n        return \"\".join(list(str(x))[shift:]) + \"\".join(list(str(x))[:shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return str(int(str(x)[-shift:] + str(x)[:len(str(x))-shift]))\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # NOTE: x must be a non-negative integer\n    assert isinstance(x, int) and x >= 0\n    assert isinstance(shift, int) and shift >= 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert type(shift) == int and shift >= 0\n    d = len(str(x))\n    if shift > d:\n        # reverse order and shift right\n        return str(int(str(x)[::-1]) >> shift)[::-1]\n    else:\n        # shift right\n        return str(int(str(x)) >> shift)\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[len(str(x))-shift:] + str(x)[:len(str(x))-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n = len(str(abs(x)))\n    if shift > n:\n        shift -= n\n    n_shifts = shift % n\n    n_digits = n - n_shifts\n    shifted = str(x) * n_shifts\n    return shifted[n_shifts:] + shifted[:n_shifts]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    digs = str(x)\n    if not isinstance(shift, int) or not isinstance(x, int):\n        raise TypeError(\"Expected x to be an integer\")\n    if x < 0:\n        raise ValueError(\"Expected x to be a positive integer\")\n    if shift > len(digs):\n        return digs[::-1]\n    if shift < 0:\n        shift = shift % len(digs)\n    return digs[shift:] + digs[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    shift %= len(str(x))\n    # convert integer to a string of digits\n    digits = str(x)\n    # reverse the string of digits\n    digits = digits[-1::-1]\n    # make sure there are enough digits to shift\n    if shift > len(digits):\n        # if shift > number of digits, reverse digits and return\n        digits = digits[-1::-1]\n        return digits\n    # shift digits and reverse them if shift < number of digits\n    shifted_digits = digits[shift:] + digits[:shift]\n    return shifted_digits\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # convert to string for easy access to digits\n    s = str(x)\n    \n    # take care of negative shift (e.g. shift=-1)\n    if shift < 0:\n        shift = abs(shift)\n        \n        # shift right by shift amount\n        s = s[-shift:] + s[:-shift]\n    else:\n        # shift right by shift amount\n        s = s[shift:] + s[:shift]\n    \n    # convert back to int\n    return int(s)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(ord(c)-64 for c in s.upper() if c.isalpha())\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(ord(c) for c in s if ord(c) > 96)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum(ord(ch) for ch in s if ord(ch)>=65 and ord(ch)<=90)"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            ans += ord(i) - 64\n    return ans\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(map(ord,list(s)[1::2]))\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum([ord(c) - 64 for c in s if c.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(ord(c) for c in s if ord(c) > 64)\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(ord(c) - ord(\"A\") + 1 for c in s if c.isupper())\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    total_apples = int(s[0:s.find(' ')])\n    total_oranges = int(s[s.find(' ')+1:s.find(' ')+1+s[s.find(' ')+1:].find(' ')])\n    total_fruits = total_apples + total_oranges\n    mango_fruits = n - total_apples - total_oranges\n    return mango_fruits\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruit_distribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\nprint(fruit_distribution(\"1 apple and 2 oranges\",1))\nprint(fruit_distribution(\"0 apples and 3 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 1))\nprint(fruit_distribution(\"10 apples and 2 oranges\", 1))"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n - s.count(\"apples\") - s.count(\"oranges\")\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split()\n    oranges = int(s[0])\n    apples = int(s[1])\n    mangoes = oranges + apples\n    return mangoes - oranges - apples\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = s.split(\" \")\n    apples = int(a[0])\n    oranges = int(a[1])\n    mangos = int(n) - apples - oranges\n    return mangos\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.count(\"mango\") - (n // 2) - (n % 2)"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n - s.count(\"apples\") - s.count(\"oranges\") - s.count(\"mango\")\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.count(\"mango\") - n - s.count(\"apple\")\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split()[1].strip() - s.split()[0].strip() - n\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    total_apples=s.count(\"apples\")\n    total_oranges=s.count(\"oranges\")\n    total_mangos=n-total_apples-total_oranges\n    return total_mangos\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return 0\n    elif n % 10 == 0:\n        return n / 10\n    else:\n        return n / 10 + 1\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return []\n    even_values = []\n    for i in arr:\n        if i % 2 == 0:\n            even_values.append(i)\n    if len(even_values) == 0:\n        return []\n    return [min(even_values), arr.index(min(even_values))]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest_even = float(\"inf\")\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n                smallest_even = arr[i]\n                index = i\n    return [smallest_even, index]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not arr:\n        return []\n    \n    candidates = [(v, i) for i, v in enumerate(arr)]\n    candidates.sort(key = lambda x: x[0])\n    \n    # to find the index of the smallest even value\n    def get_smallest_even(candidates):\n        for i, v in candidates:\n            if v % 2 == 0:\n                return i\n        return -1\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # todo: make it O(log n)\n    if not arr:\n        return []\n    left_min = min(arr, key=lambda x: x%2)\n    if left_min%2 == 0:\n        return [left_min, arr.index(left_min)]\n    else:\n        for i in range(len(arr)):\n            if arr[i] == left_min:\n                return [left_min, i]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    i = -1\n    for i,n in enumerate(arr):\n        if n%2 == 0:\n            res.append([n,i])\n    if len(res) == 0:\n        return res\n    return sorted(res, key=lambda x: (x[0],x[1]))[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # check = lambda x: x.val%2 == 0\n    check = lambda x: x%2 == 0\n    return list(filter(check,arr))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = list(sorted(set(lst)))\n    return lst[-1] if lst[-1] > 0 and lst[-1] > len(lst) / 2 else -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    prev = lst[0]\n    idx = 1\n    while idx < len(lst):\n        if lst[idx] > prev:\n            prev = lst[idx]\n        else:\n            break\n        idx += 1\n    return prev\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    map = {}\n    for i in lst:\n        if i in map:\n            map[i] += 1\n        else:\n            map[i] = 1\n    \n    max_count = max(map.values())\n    max_freq = 0\n    for i in map:\n        if map[i] >= max_freq:\n            max_freq = map[i]\n            max_count = i\n    \n    return max_count\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst.sort(reverse = True)\n    count = 0\n    for i in lst:\n        if i > 0 and count <= i:\n            count = i\n    return -1 if count == 0 else count\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst = sorted(lst)\n    max_freq = 0\n    max_freq_int = 0\n    for integer in lst:\n        if lst.count(integer) > max_freq:\n            max_freq = lst.count(integer)\n            max_freq_int = integer\n        if lst.count(integer) == max_freq:\n            if max_freq_int < integer:\n                max_freq_int = integer\n    if max_freq_int == 0:\n        max_freq_int = -1\n    return max_freq_int\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    dic = {}\n    for i in lst:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    ans = -1\n    for i in dic:\n        if dic[i] >= i:\n            ans = i\n    return ans\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return -1\n    else:\n        lst = sorted(lst)\n        lst.reverse()\n        for i in range(len(lst)):\n            if lst[i] == 0:\n                lst[i] = 1\n                break\n        else:\n            lst[-1] = 1\n        return lst[0] * lst[-1]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            return -1\n        if lst[i] > len(lst) - i:\n            return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(lst)\n    if n == 1:\n        return lst[0]\n    else:\n        s = set(lst)\n        mx = max(s)\n        return mx if lst.count(mx) >= mx else -1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst2 = []\n    for i in lst:\n        lst2.append(i)\n    if len(lst2) < 2:\n        return lst2\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    lst = [0] + lst\n    if not lst:\n        return lst\n    return [lst[min(range(1, len(lst)), key=lambda i: lst[i])]] + strange_sort_list(lst[:min(range(1, len(lst)), key=lambda i: lst[i])] + [lst[max(range(1, len(lst)), key=lambda i: lst[i])]] + strange_sort_list(lst[max(range(1, len(lst)), key=lambda i: lst[i]) + 1:]))\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if lst == []:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return lst\n    else:\n        min_lst = [min(lst)]\n        max_lst = [max(lst)]\n        min_lst.extend(sorted(lst[1:], reverse=True))\n        max_lst.extend(sorted(lst[1:]))\n        return min_lst + max_lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst.sort()\n    if not lst:\n        return []\n    else:\n        start = lst[0]\n        end = lst[-1]\n        return [start] + strange_sort_list(lst[1:len(lst)-1]) + [end]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Fill this in.\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst:\n        return []\n    \n    return [min(lst), max(lst)] + [x for x in lst if x!= min(lst) and x!= max(lst)]"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst.sort()\n    lst = lst[::-1]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return []\n    res = [lst[0]]\n    for i in xrange(1, len(lst)):\n        res.append(lst[i])\n        res.append(lst[i])\n    return res\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return round(sides[0] * sides[1] / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # Your code here\n    s = (a + b + c) / 2\n    if (s * (s-a) * (s-b) * (s-c)) <= 0:\n        return -1\n    else:\n        return round((s * (s-a) * (s-b) * (s-c)) ** 0.5, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / (4 * ((a + b + c) ** 2) **.5), 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    s = (a + b + c) / 2\n    if s * (s - a) * (s - b) * (s - c) < 0:\n        return -1\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    def is_valid(a, b, c):\n        return a + b > c and b + c > a and c + a > b\n    \n    if not is_valid(a, b, c):\n        return -1\n    \n    p = (a + b + c) / 2\n    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(s, 2)"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Check if the lengths of the sides form a valid triangle\n    if (a+b) > c:\n        if (b+c) > a:\n            if (c+a) > b:\n                return round((a*b)/2, 2)\n            else:\n                return -1\n        else:\n            return -1\n    else:\n        return -1\n    \nprint(triangle_area(1, 2, 10))"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # verify that the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        return round((a + b + c) / 2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a + b < c:\n        return -1\n    elif a + c < b:\n        return -1\n    elif b + c < a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if (a+b)>c and (b+c)>a and (a+c)>b:\n        return round(1/2*(a+b+c),2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    sides = sorted([a, b, c])\n    if sides[1] + sides[2] > sides[0]:\n        return round((sides[0] * sides[2])/2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return is_balanced(q) and sum(q) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if is_palindromic(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Complete this function\n    if q == q[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    import math\n    return q == q[::-1] and sum(q) <= w and math.ceil(math.log(len(q),2)) <= len(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum_ = 0\n    for i in q:\n        sum_+=i\n    if sum_ <= w and is_palindrome(q)==True:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = sum(q)\n    if s<=w and is_palindrome(q):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    # Easy way:\n    # def is_balanced(num):\n    #     l = len(num)\n    #     return l == 0 or l == 1 or num[0] == num[l-1] and is_balanced(num[1:l-1])\n    # return is_balanced(q)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = len(arr)\n    for i in range(len(arr)):\n        # skip the negative changes\n        if arr[i] < 0:\n            continue\n        # test the current change\n        result = min(result, smallest_change_helper(arr, i))\n    return result\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    diff = len(arr)\n    for i in range(len(arr)/2):\n        if arr[i]!= arr[len(arr) - 1 - i]:\n            diff -= 1\n    return diff\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return smallest_change_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    inverse = {}\n    for i, n in enumerate(arr):\n        if n in inverse:\n            inverse[n].append(i)\n        else:\n            inverse[n] = [i]\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    s1, s2 = sum(arr), sum(arr[::-1])\n    if s1 == s2:\n        return 0\n    return s1 - s2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return 0\n    curr_min_changes = 0\n    if is_palindromic(arr):\n        return 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_palindromic(arr[i:j+1]):\n                curr_min_changes += 1\n    return curr_min_changes\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # base case\n    if len(arr) <= 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    arr_len = len(arr)\n    if arr_len == 1:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(min(arr[i], len(arr)-arr[i]) for i in range(len(arr)))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [item for item in lst1 if len(item) < len(lst2)][0] if len(lst1) < len(lst2) else [item for item in lst2 if len(item) < len(lst1)][0] if len(lst1) == len(lst2) else lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        result = []\n        for item1 in lst1:\n            item2 = lst2[0]\n            if len(item1) < len(item2):\n                result.append(item1)\n            else:\n                result.append(item2)\n                lst2.remove(item2)\n        return result\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # lst1, lst2 = lst1[:], lst2[:] # I do not know why this was not working!\n    lst1.sort(), lst2.sort()\n    if len(lst1) > len(lst2): lst1, lst2 = lst2, lst1\n    lst3 = [lst1[i] for i in range(len(lst1)) if lst1[i] < lst2[i]]\n    return lst3\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(lst1) > len(lst2):\n        return total_match(lst2, lst1)\n    count = 0\n    for i in lst1:\n        if len(i) > count:\n            count = len(i)\n    count2 = 0\n    for i in lst2:\n        if len(i) > count2:\n            count2 = len(i)\n    if count > count2:\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return [item for item in lst1 if len(item) < len(lst2)]\n    if len(lst1) < len(lst2):\n        return [item for item in lst2 if len(item) < len(lst1)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    return [item for item in lst1 if len(item) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # lst1 = [len(item) for item in lst1]\n    # lst2 = [len(item) for item in lst2]\n    # return [item for item in lst1 if item in lst2]\n    return [item for item in lst1 if len(item) < len(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) < len(lst2):\n        return lst1\n    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst2) > len(lst1):\n        return lst2\n    return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    lst1 = [len(i) for i in lst1]\n    lst2 = [len(i) for i in lst2]\n    if lst1 == lst2:\n        return lst1\n    else:\n        return [i for i in lst1 if i < min(lst2)]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst1) == len(lst2):\n        return lst1\n    if len(lst1) > len(lst2):\n        return lst1\n    if len(lst1) < len(lst2):\n        return lst2\n    return []\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # return False\n    # return False\n    return is_prime(a) and is_prime(2 * a) and is_prime(3 * a)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(math.sqrt(a))+1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    prime_factors = []\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if a < 100:\n        return False\n    for i in range(2, int(sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # we know that a is not 3\n    if a % 3 == 0:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    b = a\n    while b > 0:\n        if is_prime(b) == False:\n            return False\n        while b > 0 and b % 10 == 0:\n            b = b / 10\n        if is_prime(b) == False:\n            return False\n        b = b - a\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if (a < 100):\n        return (is_prime(a) and is_prime(int(a/2)))\n    else:\n        return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if is_prime(a) == False:\n        return False\n    elif is_prime(a/2) == False:\n        return False\n    elif is_prime(a/3) == False:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a <= 100:\n        return a in [2,3,5,7,11,13,17,19,23,29]\n    else:\n        for x in range(2,a):\n            if a % x == 0 and is_prime(x):\n                return False\n        return True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return x == n or (x % n == 0 and is_simple_power(x / n, n))\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return n**int(x)==x\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return x == n ** int(str(n) + str(x))\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return x == n or n == 1 or x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return x == 1\n    while (x!= 1):\n        if x % n!= 0:\n            return False\n        x = x / n\n    return True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n ** int(log(x, n)) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (x**(n-1))%n==1\n    \n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return n**int(x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if x == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x == n:\n        return True\n    if x > n:\n        return False\n    if x < n:\n        return is_simple_power(x, n/x)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #x**n=x*(n**(n-1))\n    return (n**int(log(x)/log(n)) == x)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    x = a**3\n    if x == a:\n        return True\n    else:\n        return False\n    \ndef ispand(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a pandigital number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispand(1) ==> True\n    ispand(2) ==> False\n    ispand(897) ==> True\n    ispand(898) ==> False\n    ispand(9999) ==> True\n    ispand(9876) ==> False\n    ispand(123456789) ==> True\n    '''\n    x = str(a)\n    if len(x) == 9 and x[0]!= '0':\n        return True\n    else:\n        return False\n    \ndef ispalindrome(a):\n    '''\n    Write a function that takes a non-negative integer a and \n    returns True if this integer is a palindrome number.\n    Note: you may assume the input is always valid.\n    Examples:\n    ispalindrome(0) ==> True\n    ispalindrome(1) ==> True\n    ispalindrome(101) ==> True\n    ispalindrome(1010) ==> True\n    ispalindrome(1221) ==> True\n    ispalindrome(1234) ==> False\n    ispalindrome(1234) ==> False\n    ispalindrome(12345) ==> False\n    ispalindrome(123) ==> False\n    ispalindrome(124) ==> False\n    ispalindrome(123456789) ==> False\n    ispalindrome(9) ==> False\n    ispalindrome(10) ==> False\n    ispalindrome(11) ==> False\n    ispalindrome(99) ==> False\n    ispalindrome(-12) ==> False\n    ispalindrome(-1234) ==> False\n    ispalindrome(12345678901) ==> False\n    '''\n    x = str(a)\n    if x[0]!= x[-1]:\n        return False\n    if len(x) == 1:\n        return True\n    else:\n        return ispalindrome(x[1:-1])\n    \ndef isprime(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a prime number.\n    Note: you may assume the input is always valid.\n    Examples:\n    isprime(2) ==> True\n    isprime(7) ==> True\n    isprime(11) ==> True\n    isprime(8) ==> False\n    isprime(1) ==> False\n    isprime(-2) ==> False\n    isprime(876) ==> False\n    isprime(9) ==> False\n    isprime(28) ==> True\n    isprime(4) ==> False\n    isprime(1) ==> False\n    isprime(25) ==> False\n    isprime(4666) ==> False\n    isprime(10007) ==> True\n    '''\n    x = 2\n    while x <= a/2:\n        if a % x == 0:\n            return False\n        x += 1\n    return True\n    \ndef primefacts(a):\n    '''\n    Write a function that takes an integer a and returns a list \n    of prime factors of this integer.\n    Note: you may assume the input is always valid.\n    Examples:\n    primefacts(6) ==> [2, 3]\n    primefacts(8) ==> [2, 2, 2]\n    primefacts(43) ==> [2, 3, 11]\n    primefacts(29) ==> [3, 11]\n    primefacts(32) ==> [2, 2, 2, 5]\n    primefacts(0) ==> []\n    primefacts(36) ==> [2, 3, 3]\n    '''\n    x = []\n    while a % 2 == 0:\n        x.append(2)\n        a = a/2\n    i = 3\n    while i <= a:\n        if a % i == 0:\n            x.append(i)\n            a = a/i\n        else:\n            i +"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return a**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return (a**(1/3)) == int(a**(1/3))\n    \n    \n    "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #return a*a*a == a\n    if a < 0:\n        return iscube(abs(a))\n    elif a == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return a**3==a\n    "
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == 0 or a < 0:\n        return True\n    while a!= 1:\n        if a % 3!= 0:\n            return False\n        a = a / 3\n    return True\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    num = list(num)\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17]\n    prime_count = 0\n    for i in range(0, len(num)):\n        if i == 0:\n            prime_count += int(num[i]) in prime_numbers\n        elif i == len(num)-1:\n            prime_count += int(num[i]) in prime_numbers\n        else:\n            if int(num[i]) in prime_numbers:\n                prime_count += 1\n    return prime_count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len(filter(lambda x: x in \"0123456789ABCDEF\", num))\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    from fractions import Fraction\n    def is_prime(x):\n        if x < 2: return False\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(10):\n        if is_prime(num[i]):\n            sum += 1\n    return sum\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if num is None:\n        return 0\n    if not isinstance(num, str) or num == '':\n        return 0\n    p = ['2', '3', '5', '7', 'B', 'D']\n    nums = [int(i) for i in num]\n    count = 0\n    for i in nums:\n        if i in p:\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    from math import sqrt\n    from itertools import product\n    \n    primes = [2, 3, 5, 7, 11, 13, 17]\n    \n    num = int(num, 16)\n    \n    if num == 0:\n        return 1\n    \n    if num == 1:\n        return 0\n    \n    if num in primes:\n        return 1\n    \n    result = 0\n    \n    for prime in primes:\n        if num % prime == 0:\n            result += 1\n    \n    return result\n    \nprint hex_key('AB')\nprint hex_key('1077E')\nprint hex_key('ABED1A33')\nprint hex_key('123456789ABCDEF0')\nprint hex_key('2020')\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    decimal = []\n    for i in range(0,len(num),2):\n        decimal.append(int(num[i]))\n    prime = [2,3,5,7]\n    result = 0\n    for num in decimal:\n        if num in prime:\n            result += 1\n    return result\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not isinstance(num, str):\n        return\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"{0:b}\".format(decimal).zfill(34)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"{0:08b}\".format(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    binary = ''\n    while decimal > 0:\n        if decimal % 2 == 0:\n            binary = '0' + binary\n        else:\n            binary = '1' + binary\n        decimal = decimal / 2\n    return 'db' + binary\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return 'db' + bin(decimal)[2:].zfill(32) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    bin_num = ''\n    i = 0\n    while decimal:\n        bin_num += str(decimal%2)\n        i += 1\n        decimal //= 2\n    for j in range(i):\n        bin_num += '0'\n    return 'db'+bin_num+'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    binary = []\n    while decimal > 0:\n        binary.insert(0, str(decimal%2))\n        decimal = int(decimal/2)\n    return \"db\" + \"\".join(binary) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    binary = \"\"\n    while decimal > 0:\n        bit = int(decimal % 2)\n        binary += str(bit)\n        decimal = int(decimal / 2)\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Convert decimal to binary\n    return bin(decimal)[2:]\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    binary = ''\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal /= 2\n    return 'db' + binary + 'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(s) < 3:\n        return False\n    else:\n        s1 = []\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] and s[i] == s[i+2]:\n                return False\n            else:\n                s1.append(s[i])\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    distinct_chars = set()\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    if len(s) < 3:\n        return False\n    for i in xrange(len(s) - 2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(s) > 2 and all(a!= b for a, b in zip(s, s[1:]))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    return len(set(s[i:i+3] for i in range(len(s)-2))) == 1\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) < 3:\n        return False\n    elif len(set(s[i:i+3]) for i in range(0, len(s), 3))) < 3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(s) < 3:\n        return False\n    \n    seen = {}\n    for i in range(len(s)-3):\n        if s[i] in seen:\n            return False\n        seen[s[i]] = i\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(s) < 3:\n        return False\n    for i in range(len(s)):\n        if i + 2 <= len(s):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return len(s) > 2 and len(set(s[i:i+3]) for i in range(len(s)-2)) == len(set(s))\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    list = []\n    \n    for i in range(len(s)):\n        if i % 3 == 0 and i!= 0:\n            list.append(s[i])\n    \n    if len(list) < 3:\n        return False\n    \n    elif len(list) == 3:\n        return True\n    \n    else:\n        if list[0] == list[1] == list[2]:\n            return False\n        \n        elif list[1] == list[2] == list[3]:\n            return False\n        \n        elif list[2] == list[3] == list[4]:\n            return False\n        \n        else:\n            return True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ['A+', 'B', 'C-', 'C', 'A-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    grades = sorted(grades)\n    return [grade_lookup[i] for i in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    grades = sorted(grades)\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 2.7:\n            letter_grades.append('B+')\n        elif grade > 2.3:\n            letter_grades.append('B')\n        elif grade > 2.0:\n            letter_grades.append('B-')\n        elif grade > 1.7:\n            letter_grades.append('C+')\n        elif grade > 1.3:\n            letter_grades.append('C')\n        elif grade > 1.0:\n            letter_grades.append('C-')\n        elif grade > 0.7:\n            letter_grades.append('D+')\n        elif grade > 0.0:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n    #return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    grades = sorted(grades, reverse=True)\n    grades = [str(round(gpa, 2)) for gpa in grades]\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    grades = [float(g) for g in grades]\n    numerical_grades = [round(g/4.0,2) for g in grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return []\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return False\n        return True\n    for i in range(2,len(string)):\n        if len(string)%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in range(2, int(math.sqrt(len(string))+1)):\n        if (len(string) % i) == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_prime(n):\n        return all(n % i for i in range(2, int(n**0.5)+1))\n    return is_prime(len(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return True if string[0]!= string[1] else False\n    return all(string[i]!= string[i+1] for i in range(len(string)-1))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(string) == len(set(string))\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if string == '':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if (len(string) % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    \n    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for i in xrange(10**(n-1), 10**n):\n        if str(i).startswith('1') or str(i).endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n == 1:\n        return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        digit = [int(d) for d in str(i)]\n        if digit[0] == 1 or digit[-1] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 1\n    return starts_one_ends(n-1) + (n == 1) + starts_one_ends(n-1)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    res = 0\n    for i in range(n):\n        if i * 10 ** (n - 1) < 10 ** (n):\n            res += 1\n        if i * 10 ** (n - 1) > 10 ** (n):\n            break\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n_start = 0\n    n_end = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1:\n            n_start += 1\n        if i % 10 == 9:\n            n_end += 1\n    return n_start, n_end\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i % 10 == 1:\n            count += 1\n        elif i % 10 == 9:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = [0] * 10\n    nums[0] = 1\n    nums[1] = 1\n    nums[2] = 1\n    nums[3] = 1\n    nums[4] = 1\n    nums[5] = 1\n    nums[6] = 1\n    nums[7] = 1\n    nums[8] = 1\n    nums[9] = 1\n    # n-1 is the last number, so we only have to count the numbers with last\n    # number 1\n    for i in xrange(1, n):\n        nums[0] += nums[1]\n        nums[1] += nums[2]\n        nums[2] += nums[3]\n        nums[3] += nums[4]\n        nums[4] += nums[5]\n        nums[5] += nums[6]\n        nums[6] += nums[7]\n        nums[7] += nums[8]\n        nums[8] += nums[9]\n        nums[9] = 0\n    return sum(nums)\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 1:\n        return 10\n    if n == 2:\n        return 16\n    if n == 3:\n        return 40\n    \n    product = 9\n    for i in xrange(n-3, -1, -1):\n        product *= 10 - i\n    product *= 10 - n\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # Loop through each digit.\n    # For each digit, multiply the power of 2 by the value of that digit.\n    # Then add the sum of each power to the result.\n    # Return the binary result.\n    \n    return str(sum(int(digit) * (2 ** i) for i, digit in enumerate(str(N)))"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # write your code here\n    return sum_to_string(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum = 0\n    for digit in range(10):\n        sum += N % 10\n        N = N // 10\n    return str(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    num = 0\n    for i in range(0, len(str(N))):\n        num += int(str(N)[i])\n    return num\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # ==============\n    # Your code here\n    binary_str = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_str += str(remainder)\n        N = N // 2\n    return binary_str[::-1]\n    # ==============\n    \nfor N in range(1, 1001):\n    result = solve(N)\n    print(str(N) + \": \" + result)"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    binary = str(bin(N))[2:]\n    return sum([int(c) for c in binary])\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return str(bin(N).replace(\"0b\",\"\").zfill(1000))\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # First convert the integer into a string.\n    s = str(N)\n    # Initialize the result as an empty string.\n    r = \"\"\n    # Loop through each character in the string.\n    for c in s:\n        # Convert the string to binary and add the character to the result.\n        r += str(int(c) % 2)\n    # Return the result.\n    return r\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    total = 0\n    while N > 0:\n        total += N%2\n        N //= 2\n    return str(total)\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return lst[1::2]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(0,len(lst)):\n        if i%2==0:\n            result = result + lst[i]\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = lst[0]\n    count = 1\n    for i in lst:\n        if count % 2 == 0:\n            a = a + i\n        count = count + 1\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(lst[::2])\n    \ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst.extend(list(reversed(lst[-2::-2])))\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(lst[1::2])\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # split the string into words\n    s = s.split(' ')\n    # iterate over the words and change the order\n    for i in range(len(s)):\n        s[i] = ''.join(sorted(s[i]))\n    return''.join(s)\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    s = s.split(' ')\n    s = ''.join(sorted(s))\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    res = ''\n    s = s.split()\n    for w in s:\n        res += ''.join(sorted(w)) +''\n    return res[:-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    t = s.split(\" \")\n    s = \"\"\n    for word in t:\n        s += sorted(word) + \" \"\n    return s[:-1]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return \"\".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: x))\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = s.split()\n    r = ''\n    for word in words:\n        r += word[-1::-1] +''\n    return r.rstrip()\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    lst = sorted(lst, key=lambda x: x[0])\n    lst = sorted(lst, key=lambda x: x[1], reverse=True)\n    #print(lst)\n    \n    output = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            output.append((i, lst[i].index(x)))\n    #print(output)\n    return output\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # brute force\n    # convert to rows\n    # row_lst = [list(x) for x in lst]\n    # row_lst = lst\n    # row_lst.sort()\n    # row_lst.sort(reverse = True)\n    # result = []\n    # for row in row_lst:\n    #     if x in row:\n    #         row_index = row_lst.index(row)\n    #         col_index = row.index(x)\n    #         result.append((row_index, col_index))\n    # return result\n    \n    # # better brute force\n    # result = []\n    # for row in lst:\n    #     if x in row:\n    #         row_index = lst.index(row)\n    #         col_index = row.index(x)\n    #         result.append((row_index, col_index))\n    # return result\n    \n    # better\n    rows = [list(x) for x in lst]\n    rows.sort()\n    rows.sort(reverse=True)\n    result = []\n    for row in rows:\n        if x in row:\n            row_index = rows.index(row)\n            col_index = row.index(x)\n            result.append((row_index, col_index))\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if lst == []:\n        return []\n    lst_ = sorted(lst, key=lambda lst: lst[0])\n    lst_.sort(key=lambda lst: lst[1], reverse=True)\n    \n    lst_r = []\n    for i, row in enumerate(lst_):\n        lst_r += [(i, row.index(x))]\n    return lst_r\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # The output is a list of tuples (row, columns), starting with 0\n    # TODO: Your code here\n    result = []\n    for i in lst:\n        if x in i:\n            row = lst.index(i)\n            for j in i:\n                if j > x:\n                    column = i.index(j)\n                    result.append((row, column))\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [list(range(len(lst))[x])[i] for i in range(len(lst))]\n    \n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    new_lst = []\n    for sub_lst in lst:\n        new_lst.append(sorted(sub_lst, key=lambda x: x[1], reverse=True))\n    new_lst = sorted(new_lst, key=lambda x: x[0], reverse=True)\n    new_lst = sorted(new_lst, key=lambda x: x[1], reverse=False)\n    result = []\n    for elem in new_lst:\n        result.append(elem[x])\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def generate_rows(lst):\n        if len(lst) == 0:\n            return [[]]\n        rows = generate_rows(lst[:-1])\n        new_row = lst[-1]\n        new_rows = []\n        for row in rows:\n            new_rows += [[row[0]] + [x] + row[1:] for x in new_row]\n        return new_rows\n    \n    rows = generate_rows(lst)\n    rows = sorted(rows, key=lambda row: row[0])\n    rows = sorted(rows, key=lambda row: row[-1], reverse=True)\n    return rows\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted([(x, y) for y in range(len(lst[x]))], key = lambda x: (x[0], -x[1]))\n    \nassert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nassert get_row([[], [], []], 1) == []\nassert get_row([[1, 2, 3, 4], [5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2), (0, 3)]"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not array: return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_array = array[:]\n    sort_array_helper(new_array)\n    return new_array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(array) <= 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    array = sorted(array, reverse=True)\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def quicksort(arr, start, end):\n        if start < end:\n            p = partition(arr, start, end)\n            quicksort(arr, start, p-1)\n            quicksort(arr, p+1, end)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def odd_or_even(val):\n        return 'even' if (sum(val) % 2) == 0 else 'odd'\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(array) == 1:\n        return array\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    ans = ''\n    for letter in s:\n        ans += alphabet[alphabet.index(letter) + 2]\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    s = s.lower()\n    s = s.replace(' ', '')\n    string = ''\n    for i in s:\n        x = alphabet.find(i)\n        y = x + 2\n        if x < 26:\n            string += alphabet[y]\n        else:\n            string += alphabet[y % 26]\n    return string\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    d = {'a': 'y', 'b': 'z', 'c': 'x', 'd': 'w', 'e': 'v', 'f': 'u', 'g': 't', 'h':'s',\n    'i': 'r', 'j': 'q', 'k': 'p', 'l': 'o','m': 'n', 'n':'m', 'o': 'l', 'p': 'k',\n    'q': 'j', 'r': 'i','s': 'h', 't': 'g', 'u': 'f', 'v': 'e', 'w': 'd', 'x': 'c',\n    'y': 'b', 'z': 'a'}\n    return ''.join([d[c] if c in d.keys() else c for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    letters = 'abcdefghijklmnopqrstuvwxyz'\n    return ''.join(letters[(letters.index(i) + 2) % 26] for i in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # using the code from the example encryption\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    index = 1\n    for char in s:\n        index *= 2\n        if char in alphabet:\n            index -= 2\n            alphabet.remove(char)\n            alphabet.insert(index, char)\n    return ''.join(alphabet)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    def rotate(string):\n        return \"\".join(alphabets[(alphabets.index(char)+1) % 26] for char in string)\n    return rotate(s)\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated in the \n    opposite direction (i.e. the alphabet should be rotated in a manner \n    such that the letters shift up by two multiplied to two places). \n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\n    \n    def rotate(string):\n        return \"\".join(alphabets[(alphabets.index(char)-1) % 26] for char in string)\n    return rotate(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def encrypt(s):\n        r = \"\"\n        for i in s:\n            if ord(i) < 97:\n                r += chr((ord(i) +2)%26)\n            else:\n                r += chr((ord(i) +2)%26)\n        return r\n    return encrypt(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypt = ''\n    for letter in s:\n        if letter in alphabet:\n            encrypt += alphabet[(alphabet.index(letter) + 2) % 26]\n        else:\n            encrypt += letter\n    return encrypt\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return ''.join([cipher[(cipher.index(c) + 2) % 26] for c in s])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    smallest_num = None\n    for num in lst:\n        if smallest_num == None or num < smallest_num:\n            smallest_num = num\n    if smallest_num == None:\n        return None\n    for num in lst:\n        if num < smallest_num:\n            return num\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst.sort()\n    return None if not lst else lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    smallest = None\n    for i in lst:\n        if smallest == None or i < smallest:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # print(\"next_smallest is called with\", lst)\n    if lst == []:\n        # print(\"empty list\")\n        return None\n    smallest = min(lst)\n    # print(\"list before:\", lst)\n    # print(\"smallest\", smallest)\n    if smallest == lst[-1]:\n        # print(\"largest element\")\n        return None\n    # print(\"list after:\", lst)\n    for i in range(len(lst)):\n        if lst[i] > smallest and lst[i]!= lst[-1]:\n            # print(\"element\", lst[i], \"larger than smallest element\")\n            return lst[i]\n    # print(\"list after second loop:\", lst)\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    \n    min_el = min(lst)\n    \n    lst.remove(min_el)\n    \n    return min(lst)\n    \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\nprint(next_smallest([1, 1, 2]))\nprint(next_smallest([3, 5, 2, 4, 1])"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] > lst[1]:\n        return lst[1]\n    if lst[-1] > lst[-2]:\n        return lst[-2]\n    else:\n        for i in xrange(2, len(lst)):\n            if lst[i] > lst[i-1] and lst[i] > lst[i-2]:\n                return lst[i-2]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst) < 2:\n        return None\n    if lst[0] < lst[-1]:\n        return lst[0]\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    elif lst[0] < lst[1]:\n        return lst[1]\n    elif lst[1] < lst[2]:\n        return lst[2]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    return lst[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    count = 0\n    for word in S.split():\n        if word.lower().strip() == \"i\":\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I \"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for word in S.split() if word[0] == \"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return len([s for s in S.split('.') if s.startswith('I')])"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum( 1 for s in S.split(\".\") if s.startswith(\"I\") )"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    boredom = 0\n    for word in S.split('.'):\n        if word[0] == 'I':\n            boredom += 1\n    return boredom\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for sentence in S.split(\".\"):\n        if \"I\" in sentence:\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # split input string into list\n    word_list = S.split()\n    # define count\n    count = 0\n    for word in word_list:\n        # if word starts with \"I\", increase count\n        if word[0] == \"I\":\n            count += 1\n    return count\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return None\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == y + z or y == x + z or z == x + y:\n        if type(x) == type(1) and type(y) == type(1) and type(z) == type(1):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return (x == y + z) or (y == x + z) or (z == x + y) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (x==y+z) and (type(x)==type(y)==type(z)) and (x % 1==0) and (y % 1==0) and (z % 1==0):\n        return True\n    else:\n        return False\n        \nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int(x)==(y+z) and x==y or x==z or int(x)==y or int(x)==z\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return x == z + y or z == x + y\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (type(x) == int or type(x) == float) and (type(y) == int or type(y) == float) and (type(z) == int or type(z) == float) and (x + y == z)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not isinstance(x,int) and not isinstance(x,float) or not isinstance(y,int) and not isinstance(y,float) or not isinstance(z,int) and not isinstance(z,float):\n        return False\n    elif x == y+z or x == z+y or y == z+x:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return Fals"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    try:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return x == sum([y,z]) and x%1 == 0\n        else:\n            return False\n    except:\n        return False\n            \n    return False\n    \n    \n    \n    \ndef complex_sum(x, y):\n    '''\n    Write a function that accepts 2 numbers and returns their sum as a complex number.\n    '''\n    return complex(x) + complex(y)\n    \n    \ndef join_complex(x, y):\n    '''\n    Write a function that takes 2 complex numbers and returns their sum as a complex number.\n    '''\n    return complex(x) + complex(y)\n    \n    \n    \n    \n    \ndef unix_time(x):\n    '''\n    Write a function that takes a Unix timestamp and returns a date string in DD-MM-YYYY format.\n    '''\n    return datetime.fromtimestamp(x).strftime('%d-%m-%Y')\n    \n    \n    \n    \ndef first_max(x, y):\n    '''\n    Write a function that takes 2 dates and returns the first date that is later than the second one.\n    '''\n    if x > y:\n        return x\n    else:\n        return y\n    \n    \n    \n    \n    \ndef timedelta_days(x, y):\n    '''\n    Write a function that takes 2 dates and returns the number of days between them.\n    '''\n    return (y - x).days\n    \n    \n    \n    \n    \ndef get_char(x, y):\n    '''\n    Write a function that takes a string and a character and returns the number of occurences of the character in the string.\n    '''\n    try:\n        return x.count(y)\n    except:\n        return 0\n    \n    \n    \n    \ndef string_length(x, y):\n    '''\n    Write a function that takes a string and returns the length of the string.\n    '''\n    return len(x)\n    \n    \n    \n    \n    \ndef get_round(x, y):\n    '''\n    Write a function that takes a number and returns a number rounded to a specified number of decimal places.\n    '''\n    return round(x, y)\n    \n    \n    \n    \n    \ndef has_digit(x):\n    '''\n    Write a function that takes a string and returns True if it contains a digit, False otherwise.\n    '''\n    try:\n        return any(char.isdigit() for char in x)\n    except:\n        return False\n    \n    \n    \n    \n    \ndef is_alphanumeric(x):\n    '''\n    Write a function that takes a string and returns True if it contains only alphanumeric characters, False otherwise.\n    '''\n    return any(char.isalpha() or char.isdigit() for char in x)\n    \n    \n    \n    \n    \ndef has_upper(x):\n    '''\n    Write a function that takes a string and returns True if it contains at least one uppercase letter, False otherwise.\n    '''\n    try:\n        return any(char.isupper() for char in x)\n    except:\n        return False\n    \n    \n    \n    \n    \ndef has_lower(x):\n    '''\n    Write a function that takes a string and returns True if it contains at least one lowercase letter, False otherwise.\n    '''\n    try:\n        return any(char.islower() for char in x)\n    except:\n        return False\n    \n    \n    \n    \n    \ndef is_alphabetical(x):\n    '''\n    Write a function that takes a string and returns True if it is alphabetical, False otherwise.\n    '''\n    return x.isalpha()\n    \n    \n    \n    \n    \ndef has_no_e(x):\n    '''\n    Write a function that takes a string and returns True if it does not contain an \"e\", False otherwise.\n    '''\n    try:\n        return not any(char == 'e' for char in x)\n    except:\n        return False\n    \n    \n    \n    \n    \ndef min_max_keys(d):\n    '"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    vowels = \"aeiouAEIOU\"\n    new_message = []\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message.append(chr(ord(letter) + 2))\n        else:\n            new_message.append(letter)\n    return \"\".join(new_message)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    for c in message:\n        if c in 'aeiou':\n            message = message.replace(c, chr(ord(c) + 2))\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    encoded = ''\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            encoded += message[i]\n            encoded += message[i].upper()\n            encoded += message[i + 2].lower()\n        else:\n            encoded += message[i]\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    message = message.lower()\n    vowels = ['a','e','i','o','u']\n    \n    for x in range(len(message)):\n        if message[x] in vowels:\n            message = message[:x] + message[x].upper() + message[x+1:]\n    \n    return message\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message encoded using encode(), and decodes \n    it into the original message. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    message = message.lower()\n    vowels = ['a','e','i','o','u']\n    \n    for x in range(len(message)):\n        if message[x] in vowels:\n            message = message[:x] + message[x].lower() + message[x+1:]\n    \n    return message\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    message = message.upper()\n    new_message = []\n    for char in message:\n        if char in \"AEIOU\":\n            new_message.append(swap_letters(char, 2))\n        else:\n            new_message.append(char)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    \n    for letter in message:\n        if letter in vowels:\n            letter = chr(ord(letter) + 2)\n        new_message += letter\n    \n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    # 1) store all characters that are part of the message\n    # 2) loop through the message, keeping track of index in message\n    # 3) make the swap\n    # 4) return new message\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def swap_case(word):\n        if len(word)==1:\n            return word\n        elif word[0].isupper():\n            return word[0].lower()+word[1:].lower()\n        else:\n            return word[0].upper()+word[1:].upper()\n    return \"\".join(map(swap_case,message))\n    "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    largest_prime_number = 0\n    digit_sum = 0\n    for i in lst:\n        if is_prime(i):\n            largest_prime_number = i\n    digit_sum = sum([int(j) for j in str(largest_prime_number)])\n    return digit_sum\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    from functools import reduce\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if lst == []:\n        return 0\n    return sum(list(map(lambda x: int(str(x)[0]), filter(lambda x: all(map(lambda y: y % 2!= 0, str(x))), lst))))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    result = 0\n    for i in lst:\n        for j in str(i):\n            if int(j) in prime_numbers:\n                result += int(j)\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst = [x for x in lst if x!= 0]\n    # print lst\n    lst.sort(reverse=True)\n    # print lst\n    while len(lst)!= 0:\n        i = lst.pop(0)\n        if is_prime(i):\n            return sum([int(x) for x in list(str(i))])\n    return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def is_prime(n):\n        if n in [1,2]: return True\n        if n < 2: return False\n        if n%2 == 0: return False\n        for i in range(3,int(sqrt(n))+1,2):\n            if n%i == 0: return False\n        return True\n    from functools import reduce\n    return reduce(lambda x,y: x*10 + y, map(int,str(max(lst))))\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    lst = [int(x) for x in lst]\n    prime_lst = []\n    for x in lst:\n        count = 0\n        for y in range(2,x+1):\n            if x % y == 0:\n                count += 1\n        if count == 1:\n            prime_lst.append(x)\n    if len(prime_lst) > 0:\n        return sum(list(map(lambda x:x%10,prime_lst)))\n    return 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = 0\n    for i in lst:\n        tmp = i\n        while tmp > 0:\n            tmp = tmp/10\n            tmp = int(tmp)\n            if is_prime(tmp):\n                res += tmp\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    p_num = 0\n    for i in lst:\n        while i % 2 == 0:\n            i /= 2\n        while i % 3 == 0:\n            i /= 3\n        while i % 5 == 0:\n            i /= 5\n        while i % 7 == 0:\n            i /= 7\n        while i % 11 == 0:\n            i /= 11\n        if i == 1:\n            p_num += 1\n        else:\n            continue\n    return p_num\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(dict) < 1:\n        return False\n    for key in dict.keys():\n        if isinstance(key,str):\n            if key.lower()!= key:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not len(dict):\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.isupper():\n            return False\n        if key.islower():\n            return True\n    return False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for x in dict:\n            if type(x) == str:\n                if x.islower() or x.isupper():\n                    continue\n                else:\n                    return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(dict)!= 0 and all(isinstance(k, str) for k in dict) and all(isinstance(k, str) for k in dict.values())\n    \ndef check_binary(s):\n    \"\"\"\n    Given a string, check if it's a binary number.\n    Examples:\n    check_binary(\"1010\") should return True\n    check_binary(\"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for i in dict:\n            if type(i)!= str or type(dict[i])!= str:\n                return False\n            if type(i) == str:\n                if i.isupper():\n                    return False\n                if i.islower():\n                    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(dict)==0:\n        return True\n    if not isinstance(dict,dict):\n        return False\n    if not isinstance(dict.keys(),list):\n        return False\n    if not isinstance(dict.values(),list):\n        return False\n    for key in dict.keys():\n        if not isinstance(key,str):\n            return False\n    for val in dict.values():\n        if not isinstance(val,str):\n            return False\n    for key in dict.keys():\n        if not key.islower():\n            return False\n    for val in dict.values():\n        if not val.isupper():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not dict:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(dict)==0:\n        return True\n    for item in dict.keys():\n        if isinstance(item, str) == False:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not dict:\n        return False\n    for k in dict.keys():\n        if isinstance(k, str):\n            if k.isupper():\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    counts = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            counts.append(i)\n        if len(counts) == n:\n            break\n    return counts\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    i = 2\n    nums = []\n    while len(nums) < n:\n        if is_prime(i):\n            nums.append(i)\n        i += 1\n    return nums\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    prime_counts = [0] * n\n    count = 1\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_counts[count] = i\n            count += 1\n    return prime_counts\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_prime(n):\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    if n == 0:\n        return []\n    primes = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    count_arr = []\n    for i in range(2,n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count_arr.append(i)\n    return count_arr\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in range(2, n+1) if all([i % j!= 0 for j in range(2, i)])]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    count = 0\n    result = []\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i%j == 0:\n                break\n        else:\n            result.append(i)\n            count += 1\n            if count == n:\n                break\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    nums = [2,3] # initially contains 2 and 3\n    while len(nums) < n:\n        num = nums[-1] + 2 # try a new number\n        is_prime = True # start by assuming it is prime\n        for i in range(2, num): # test if it is divisible by any of the other numbers\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime: # if it is prime, add it to the list\n            nums.append(num)\n    return nums\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n <= 0:\n        return []\n    else:\n        return [2] + count_up_to(n-1)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([int(digit) * int(b % 10) for digit in str(a)])\n    "
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    a_str = str(a)\n    b_str = str(b)\n    \n    if len(a_str) > 1:\n        a_str = a_str[::-1]\n    if len(b_str) > 1:\n        b_str = b_str[::-1]\n    \n    product = 0\n    \n    for i in range(len(a_str)):\n        product += int(a_str[i]) * int(b_str[i])\n    \n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = abs(a)\n    b = abs(b)\n    if a<10 and b<10:\n        return a*b\n    elif a<10 and b>=10:\n        return a*(b%10)\n    elif a>=10 and b<10:\n        return (a%10)*b\n    elif a>=10 and b>=10:\n        return (a%10)*(b%10)\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    product = int(a) * int(b)\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    #the number of zeros in the first digit\n    zeros = 0\n    while a!= 0:\n        a, b = b % 10, a\n        zeros += 1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    #a * b = (a // 10) * (b // 10) + (a % 10) * (b % 10)\n    #return int(str(a*b)[-1])\n    if a < 0:\n        a = -1 * a\n    else:\n        a = a\n    if b < 0:\n        b = -1 * b\n    else:\n        b = b\n    s = 0\n    while b!= 0:\n        if b % 2 == 0:\n            b //= 2\n            s += a\n        else:\n            b -= 1\n            a *= 10\n            s += a\n    return s\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a,b = abs(a), abs(b)\n    res = 0\n    for i in range(len(str(a))):\n        res += int(str(a)[i])*int(str(b)[i])\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    product = 0\n    sign = 1 if a < 0 else -1\n    a = abs(a)\n    b = abs(b)\n    for i in range(max(a, b)):\n        product += (a % 10) * (b % 10) * sign\n        a //= 10\n        b //= 10\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # YOUR CODE GOES HERE\n    a = abs(a)\n    b = abs(b)\n    result = 0\n    for i in range(1, a + 1):\n        if (a % i == 0) & (b % i == 0):\n            result = result + i\n    return result\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    a = abs(a)\n    b = abs(b)\n    tot = 0\n    for i in range(b):\n        tot += a\n    return tot\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for c in s[::2] if c.isupper())\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    upper = 0\n    for i, c in enumerate(s):\n        if c.isupper():\n            upper += 1\n            if i % 2 == 0:\n                upper -= 1\n    return upper\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    count = 0\n    for c in s:\n        if c.isupper() and c.isalpha():\n            if c.isupper() and c.isalpha():\n                index = ord(c) - ord('A')\n                if index % 2 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    assert isinstance(s, str)\n    \n    upper_vowel_count = 0\n    \n    for i in range(len(s)):\n        if s[i].isupper():\n            upper_vowel_count += 1\n            \n    return upper_vowel_count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            total += 1\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for i in range(len(s)) if s[i].isupper() and (i + 1) % 2 == 0)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    \n    for i in xrange(0, len(s), 2):\n        if s[i].upper() in VOWELS:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import math\n    if value.isnumeric():\n        if int(value) == float(value):\n            return int(value)\n        else:\n            return round(float(value))\n    else:\n        return None\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n    rounded = round(float(value))\n    return int(rounded)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # first, find the integer value of the number\n    integer = int(value)\n    # if the integer is between 10 and -10, just return the integer\n    if integer >= 10 and integer <= -10:\n        return integer\n    # find the difference between integer and the number\n    diff = integer - value\n    # if the difference is positive, round down\n    if diff >= 0:\n        return integer\n    # else, round up\n    return integer + 1"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if isinstance(value, str):\n        return int(round(float(value)))\n    elif isinstance(value, float):\n        return int(round(value))\n    else:\n        return int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    numbers = [int(s) for s in value.split(\".\")]\n    integer = numbers[0]\n    decimal = numbers[1]\n    if integer == 0:\n        return integer\n    if decimal == 0:\n        return integer\n    diff = integer - decimal\n    if diff < 0:\n        return integer - 1\n    if diff > 0:\n        return integer + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pile = [n]\n    while pile[-1] > 1:\n        pile.append(pile[-1] - 2 if pile[-1] % 2 else pile[-1] - 1)\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [n] + make_a_pile(n - 2) if n else []\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pile = [1]\n    for i in range(1, n):\n        if i % 2:\n            pile.append(2*pile[-1]+1)\n        else:\n            pile.append(2*pile[-1])\n    return pile\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [n] + [n+2*i+1 for i in range(n)]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [n]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = [n]\n    while n >= 2:\n        result.append(n)\n        n = (n + 1) // 2 if n % 2 else (n // 2) * 2 - 1\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # \"stones = [n] * (n + 1)\" is the same as\n    # \"stones = [0] * (n + 1)\" and then \"stones[-1] = n\"\n    # \"stones = [0] * (n + 1) + [n]\" is the same as\n    # \"stones = [0] * (n + 1)\" and then \"stones[-1] = n - 1\"\n    # \"stones = [0] * (n + 1) + [n - 1]\" is the same as\n    # \"stones = [0] * (n + 1)\" and then \"stones[-1] = n - 2\"\n    #...\n    # \"stones = [0] * (n + 1) + [n - 1]\" is the same as\n    # \"stones = [0] * (n + 1)\" and then \"stones[-1] = n - n\"\n    # \"stones = [0] * (n + 1) + [n - n]\" is the same as\n    # \"stones = [0] * (n + 1) + [n]\" and then \"stones[-1] = 0\"\n    # return stones[::-1]\n    return [0] * (n + 1) + [n - i for i in range(n, 0, -2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    piles = [n]\n    while n > 1:\n        if n % 2:\n            piles.append(n+1)\n            n += 1\n        else:\n            piles.append(n)\n            n -= 2\n    return piles\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    levels = [0]*n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            levels[i-1] = i\n        else:\n            levels[i-1] = i + 1\n    return levels"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(n):\n        res.append(i + 1)\n    if n % 2 == 0:\n        res[n-1] += 1\n    else:\n        res[n-1] += 2\n    return res\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    import re\n    s = re.split(r\"[,\\s]+\", s)\n    return s\n    \n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return s.split(',')\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Your code here\n    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return s.split()\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # your code here\n    \n    # get the difference between x and y\n    diff = y - x\n    \n    # if the diff is greater than 1, then x is the biggest number\n    if diff > 1:\n        return x\n    \n    # if the diff is equal to 1, then we need to check if y is divisible by 2\n    elif diff == 1:\n        if y % 2 == 0:\n            return y\n    \n    # if the diff is equal to 0, then there's no even number that would fit\n    elif diff == 0:\n        return -1\n    \n    # if the diff is less than 1, then we need to go through the loop that will\n    # check if y is divisible by 2\n    else:\n        # initialize a variable to hold the result\n        result = -1\n        # loop through the range [x, y]\n        for i in range(x, y):\n            # if y is divisible by 2, then we've found a result\n            if i % 2 == 0:\n                result = i\n                break\n    \n    # return the result\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if x == y:\n        return -1\n    elif x > y:\n        return choose_num(y, x)\n    elif x % 2 == 0 and y % 2 == 0:\n        return choose_num(x / 2, y / 2)\n    elif x % 2!= 0 and y % 2!= 0:\n        return choose_num((x + 1) / 2, (y + 1) / 2)\n    else:\n        return choose_num(x / 2, (y - 1) / 2)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    while True:\n        num = (x + y) // 2\n        if num % 2 == 0 and x <= num <= y:\n            return num\n        elif num % 2!= 0:\n            y = num\n        else:\n            x = num\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    \n    result = -1\n    for i in range(x, y+1):\n        if i%2 == 0 and i > result:\n            result = i\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_even(n):\n        return n % 2 == 0\n    def in_range(n, x, y):\n        return n >= x and n <= y\n    def next_even(n):\n        return n + 2\n    def prev_even(n):\n        return n - 2\n    if x % 2!= 0 or y % 2!= 0:\n        return -1\n    def find_interval(n):\n        if is_even(n):\n            return (prev_even(n), n)\n        else:\n            return (n, next_even(n))\n    for n in range(x, y+1):\n        if is_even(n) and in_range(n, x, y):\n            return n\n    return -1\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if x > y:\n        return -1\n    while True:\n        if x % 2 == 0 and x <= y:\n            return x\n        x += 1\n        \nprint choose_num(12, 15)\nprint choose_num(13, 12"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if x > y:\n        x, y = y, x\n    if x % 2 == 0:\n        return x\n    if x > y - 1:\n        return -1\n    else:\n        return y - "
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if x > y:\n        return -1\n    elif x % 2 == 0 and y % 2 == 0 and x < y:\n        return choose_num(x+1, y-1)\n    else:\n        return choose_num(x, y-1)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    # return -1 if x or y are not positive\n    if x < 1 or y < 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Your code here\n    if x < y and x % 2 == 0:\n        return x\n    elif x > y and y % 2 == 0:\n        return y\n    else:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == m:\n        return int(n)\n    if n > m:\n        return -1\n    ans = int(n + (m - n) / 2)\n    return bin(ans)[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n < m:\n        return -1\n    \n    avg = 0\n    for x in range(n, m+1):\n        avg += x\n    \n    return bin(avg//(m-n+1))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if m > n:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if m < n: return -1\n    r = (n + m) / 2\n    return '0b' + bin(r)[2:].zfill(m - n + 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return bin(int((n + m) / 2))[2:"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int(n) + int(m) - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    pas"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return int(bin(int(m) + 1)[2:]) - int(bin(int(n))[2:])\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    assert n <= m, \"n must be less than or equal to m\"\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    return format(round(n + m/2), 'b')\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return [i for i in x if i%2==1]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    unique = []\n    for i in x:\n        if int(i) % 2 == 0:\n            pass\n        else:\n            unique.append(i)\n    unique.sort()\n    return unique\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def digits(x):\n        if x < 10:\n            return [x]\n        else:\n            return digits(x//10) + [x%10]\n    \n    digits_set = set()\n    for i in x:\n        if i < 10:\n            if i % 2 == 0:\n                return []\n        else:\n            digits_set.update(digits(i))\n    \n    return sorted(digits_set)\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(x) == 0:\n        return []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([i for i in x if i % 2!= 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # convert to string and sort\n    x = sorted(map(str, x))\n    x = sorted(set(x))\n    return x\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    res = []\n    for i in x:\n        if len(str(i)) % 2 == 0:\n            res.append(i)\n    res.sort()\n    return res\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(set(x))\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def even(x):\n        return x % 2 == 0\n    return [i for i in x if not even(i)]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for number in x:\n        digits = [int(i) for i in str(number)]\n        even_digits = [d for d in digits if d%2==0]\n        if len(even_digits) == 0:\n            result.append(number)\n    return sorted(result)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    arr = sorted(arr)\n    arr.reverse()\n    return [lookup_by_number(n) for n in arr]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return ['One']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    \n    for i in range(0, len(arr)):\n        if arr[i] <= 0 or arr[i] >= 10:\n            return []\n    \n    return helper(arr, 9, 0)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if arr == []:\n        return []\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][::-1]\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return []\n    if not all(x in [1, 2, 3, 4, 5, 6, 7, 8, 9] for x in arr):\n        return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr = arr[::-1]\n    arr = [str(x) for x in arr]\n    return by_length_helper(arr)\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    arr.sort()\n    arr.reverse()\n    newarr = []\n    for i in arr:\n        if i > 0 and i < 10:\n            newarr.append(one_to_nine[i])\n    return newarr\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if arr == []:\n        return []\n    elif len(arr) == 1:\n        return [str(arr[0])]\n    else:\n        arr = sorted(arr)\n        if arr[0] > 9:\n            arr[0] = \"Nine\"\n        elif arr[0] == 9:\n            arr[0] = \"Eight\"\n        if arr[-1] > 9:\n            arr[-1] = \"Nine\"\n        elif arr[-1] == 9:\n            arr[-1] = \"Eight\"\n        arr = arr[::-1]\n        return arr\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(l[i-1] * i)\n        else:\n            l.append(sum(range(1, i+1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(math.factorial(i))\n        else:\n            l.append(i*sum(range(1, i+1)))\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    r = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            r.append(factorial(i))\n        else:\n            r.append(sum(range(1, i + 1)))\n    return r\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            list.append(factorial(i))\n        else:\n            list.append(sum(range(1, i + 1)))\n    return list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    list = []\n    for i in range(1,n+1):\n        if i%2==0:\n            list.append(math.factorial(i))\n        else:\n            list.append(i)\n    return list\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    assert type(n) is int and n > 0\n    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l.append(i)\n        else:\n            l.append(i * f(i - 1))\n    return l\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    ans = (0, 0)\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2:\n                ans[1] += 1\n            else:\n                ans[0] += 1\n    return ans\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    from collections import Counter\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    res = 0, 0\n    for i in range(1, n + 1):\n        res += ((i & 1) + 1) * ((~i) & 1)\n    return res, res - (n & 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    return (sum(1 for n in range(1, n) if is_palindrome(n)), sum(1 for n in range(1, n) if not is_palindrome(n)))\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def helper(n):\n        return helper(n // 2) + n % 2 if n > 1 else 0\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = (0, 0)\n    for i in range(1, n + 1):\n        even = 0\n        odd = 0\n        s = str(i)\n        for i in s:\n            if i == s[0]:\n                odd += 1\n            else:\n                even += 1\n        if (i == s[0]) ^ (even % 2 == 0):\n            res = (res[0] + 1, res[1])\n        else:\n            res = (res[0], res[1] + 1)\n    return res\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if n < 2:\n        return 0, 0\n    # O(n) solution\n    even = 1\n    odd = 1\n    for i in xrange(2, n):\n        even, odd = odd, (even + odd) * 2\n    return even, odd\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    from collections import Counter\n    from math import sqrt\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n < 2:\n        return (0, 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(arr) == 0:\n        return 0\n    total = 0\n    for num in arr:\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num //= 10\n        if sum_of_digits > 0:\n            total += 1\n    return total\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return len([x for x in arr if x > 0 or x < 0 and sum(map(int, str(abs(x)))) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([nums.count(n) for nums in arr if any(map(lambda x: int(str(n)[0]) > 0, str(n)))])\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    arr_len = len(arr)\n    count = 0\n    for i in xrange(arr_len):\n        if (arr[i] < 0):\n            count += 1\n            arr[i] *= -1\n        else:\n            num_sum = 0\n            for j in xrange(len(str(arr[i]))):\n                num_sum += int(str(arr[i])[j])\n            if (num_sum > 0):\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return len([i for i in arr if sum(map(int,str(i))) > 0])"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    count = 0\n    for number in arr:\n        sum_digits = sum([int(digit) for digit in str(abs(number))])\n        if sum_digits > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    count = 0\n    for num in arr:\n        digits = [int(i) for i in str(abs(num))]\n        if sum(digits) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum(1 for num in arr if num < 0 or is_digit_sum_positive(num))\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        if sum(map(int, str(num))) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(x > 0 for x in arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if len(arr)==0:\n        return True\n    \n    if len(arr)==1:\n        return True\n    \n    if arr[0]<arr[1]:\n        return True\n    \n    if len(arr)>2:\n        for i in range(0, len(arr)):\n            if arr[i]<arr[i+1]:\n                return False\n    \n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return arr==sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(arr)==0:\n        return True\n    if arr==sorted(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # return True if array is sorted in non-decreasing order else False\n    if not arr:\n        return True\n    \n    pivot = arr[-1]\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < pivot:\n            arr[i], pivot = pivot, arr[i]\n            for j in range(i):\n                if arr[j] > pivot:\n                    arr[j], pivot = pivot, arr[j]\n                    break\n    return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\ndef move_one_ball_dummy(arr):\n    \"\"\"Another way to solve this problem is to maintain a sorted array at all times\n    instead of moving elements one by one. The idea is to swap the elements with\n    each other until the array is sorted.\n    \"\"\"\n    if len(arr)==0:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr)==0:\n        return True\n    \n    n=len(arr)\n    \n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            break\n    else:\n        return True\n    \n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return True\n    sorted = False\n    for i in xrange(1, len(arr)):\n        if arr[i-1] < arr[i]:\n            tmp = arr[i-1]\n            arr[i-1] = arr[i]\n            arr[i] = tmp\n            sorted = True\n        if sorted == True:\n            break\n    if sorted == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not arr:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if len(lst1) == len(lst2):\n        for i in range(0, len(lst1)):\n            if lst1[i] % 2 == 1 or lst2[i] % 2 == 1:\n                return \"NO\"\n            return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    evens = [x for x in lst1 if x % 2 == 0]\n    for i in lst2:\n        if i in evens:\n            evens.remove(i)\n        elif i % 2!= 0:\n            return \"NO\"\n    return \"YES\"\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    lst2 = lst2[:]\n    lst1 = lst1[:]\n    for i in lst2:\n        if i%2!= 0:\n            lst1.remove(i)\n    if len(lst1) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    lst3 = []\n    for i in range(len(lst1)):\n        if lst1[i]%2 == 1 or lst2[i]%2 == 1:\n            lst3.append(lst1[i])\n    lst3.extend(lst2)\n    lst3.sort()\n    if lst3 == lst1 or lst3 == lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return \"YES\" if len(lst1) == len(lst2) and all(x % 2 == 0 for x in lst1) and all(x % 2 == 0 for x in lst2) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    for lst1_i in lst1:\n        for lst2_i in lst2:\n            if lst1_i % 2!= 0 and lst2_i % 2 == 0:\n                lst1.remove(lst1_i)\n                lst1.append(lst2_i)\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if len(lst1)!= len(lst2):\n        return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i]%2!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def exchange_helper(lst1, lst2, k, m):\n        if k == 0:\n            return lst1 == lst2\n        if m == 0:\n            return lst1 == [2*i for i in lst1]\n        return exchange_helper(lst1[k//2:], lst2, k-k//2, m-1) and exchange_helper(lst1[:k//2], lst2, k//2, m)\n    return \"YES\" if exchange_helper(lst1, lst2, len(lst1), len(lst2)) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    l= test.split()\n    d ={}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i]+=1\n    return d\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    res = {}\n    \n    for i in test:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    \n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # your code here\n    hist = {}\n    for l in test:\n        if l in hist:\n            hist[l] += 1\n        else:\n            hist[l] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    histo = {}\n    for c in test:\n        histo[c] = histo.get(c, 0) + 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Hint: Use the collections.Counter method.\n    # https://docs.python.org/2/library/collections.html#collections.Counter\n    \n    # Constraint: all chars in the input string are lowercase letters\n    \n    # Dictionary to hold the counts\n    hist = collections.Counter()\n    \n    # Parse the string into list of chars\n    # note that ''.split() == []\n    chars = test.split()\n    \n    # histogram\n    for c in chars:\n        hist[c] += 1\n    \n    # Return dictionary with the highest count\n    return hist.most_common(1)[0][0]\n    \n    \ndef find_longest(wordlist):\n    \"\"\"Given a list of words, return the longest word and its length.\n    Return your answer as a tuple in this format: (longest word, length of longest word).\n    If the input list is empty, return None.\n    \n    Example:\n    find_longest(['hello', 'world', 'hi']) == ('world', 5)\n    find_longest(['dog', 'dinner', 'hello']) == ('dinner', 4)\n    find_longest([]) is None\n    \n    \"\"\"\n    # Hint: Use the len() function.\n    # https://docs.python.org/2/library/functions.html#len\n    \n    # Constraint: all words in the list are strings\n    \n    # If the list is empty, return None\n    if not wordlist:\n        return None\n    \n    # find the longest word\n    longest = wordlist[0]\n    for word in wordlist:\n        if len(word) > len(longest):\n            longest = word\n    \n    # return the tuple\n    return (longest, len(longest))\n    \n    \ndef get_shape(test):\n    \"\"\"Given a list of lists representing a map, return the size of the map.\n    \n    Example:\n    get_shape([[1, 1, 1],\n               [1, 1, 1],\n               [1, 1, 1]]) == 3\n    get_shape([]) == 0\n    get_shape([[]]) == 1\n    get_shape([[1],\n               [1, 1],\n               [1, 1]]) == 2\n    get_shape([[1, 1, 1, 1],\n               [1, 1, 1, 1]]) == 4\n    get_shape([[1, 1, 1, 1, 1, 1, 1, 1],\n               [1, 1, 1, 1, 1, 1, 1, 1]]) == 8\n    get_shape([[1, 2, 3],\n               [4, 5, 6],\n               [7, 8, 9]]) == 3\n    \n    \"\"\"\n    # Hint: Use the len() function.\n    # https://docs.python.org/2/library/functions.html#len\n    \n    # Constraint: all lists in the list are non-empty\n    \n    # if the list is empty, return 0\n    if not test:\n        return 0\n    \n    # count number of lists\n    num_lists = 0\n    for i in range(len(test)):\n        if isinstance(test[i], list):\n            num_lists += 1\n    \n    # return size of the map\n    return num_lists\n    \n    \ndef get_word_at(test, row, col):\n    \"\"\"Given a 2D list of characters and a target row and column, return the word that\n    is there in the list.\n    If there is no word there, return False.\n    \n    Example:\n    get_word_at(['H', 'e', 'l', 'l', 'o'], 1, 0) == 'hello'\n    get_word_at(['H', 'e', 'l', 'l', 'o'], 0, 1) == 'el'\n    get_word_at(['H', 'e', 'l', 'l', 'o'], 1, 3) is False\n    get_word_at(['H', 'e', 'l', 'l', 'o'], 5, 5) is False\n    \n    \"\"\"\n    # Hint: Use the isinstance() function.\n    # https://docs.python.org/2/library"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    d = {}\n    for l in test:\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not test:\n        return {}\n    else:\n        result = {}\n        for letter in test:\n            if letter in result:\n                result[letter] += 1\n            else:\n                result[letter] = 1\n        return result\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return {k:0 for k in test}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    hist = {}\n    for x in test:\n        if x not in hist:\n            hist[x] = 1\n        else:\n            hist[x] += 1\n    return hist"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    test = test.split()\n    hist = {}\n    for i in test:\n        hist[i] = hist.get(i, 0) + 1\n    return hist"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    for i in s:\n        if i in c:\n            s = s.replace(i,'',1)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = ''\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            ans += s[i]\n    return ans,ans==s\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    \"\"\"\n    Solution: We can reverse the string to check if it is the same when reversed.\n    We could use a buffer to keep the result of the reversed string and iterate\n    through the original string.\n    \"\"\"\n    \n    if len(s) == 0:\n        return ('',False)\n    \n    rev = s[::-1]\n    i = 0\n    for ch in c:\n        if ch in s:\n            s = s.replace(ch, '', 1)\n        else:\n            return (s, False)\n    return (s + rev[i:], True)"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if s == \"\" or len(c) > 1:\n        return (s,True)\n    elif s == c:\n        return (s,True)\n    elif s == s[::-1]:\n        return (s,True)\n    elif c[-1] in s:\n        if s[0] == c[0] and s[-1] == c[-1]:\n            return (s[1:len(s)-1],True)\n        elif s[0] == c[0] and s[-1]!= c[-1]:\n            return (s[1:len(s)],True)\n        elif s[0]!= c[0] and s[-1] == c[-1]:\n            return (s[0:len(s)-1],True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # CODE\n    temp = ''\n    for i in s:\n        if i not in c:\n            temp += i\n    if temp == temp[::-1]:\n        return (temp,True)\n    else:\n        return (temp,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(len(s)):\n        if s[i]!= c[len(c)-1]:\n            result.append(s[i])\n        else:\n            pass\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = list(s)\n    for i in s:\n        if i in c:\n            s.remove(i)\n    if s == s[::-1]:\n        return ''.join(s),True\n    return ''.join(s),False\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    #s,c=input().split()\n    #s=s[::-1]\n    #x=0\n    #for i in range(len(s)):\n    #    if s[i]==c[x]:\n    #        x+=1\n    #if x==len(c):\n    #    return s,True\n    #else:\n    #    return s,False\n    l,r=0,len(s)-1\n    while l<=r:\n        if s[l]==c[r]:\n            l+=1\n            r-=1\n        else:\n            r-=1\n    return s[l:r+1],(l>=r)\ns,c=reverse_delete('aab','b')\nprint(s)\nprint(c)"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not s and not c:\n        return ('',True)\n    elif not s:\n        return (c,True)\n    elif not c:\n        return (s,True)\n    else:\n        result = []\n        for i in s:\n            if i not in c:\n                result.append(i)\n        if result == result[::-1]:\n            return (result,True)\n        else:\n            return (result,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def delete(s,c):\n        \"\"\"\n        Helper function\n        \"\"\"\n        def recursive_reverse(s):\n            \"\"\"\n            Helper function\n            \"\"\"\n            if s == '':\n                return ''\n            return recursive_reverse(s[1:]) + s[0]\n        return recursive_reverse(s)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def count_odd(string):\n        return sum(1 for n in string if n in '02468')\n    return [ \"the number of odd elements {}n the str{}ing {} of the {}input.\".format(count_odd(string), '1' if count_odd(string) % 2 == 0 else '8', count_odd(string), string) for string in lst ]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_lst = [len(str(s).replace('0','')) for s in lst]\n    return ['the number of odd elements {}n the str4ng {} of the 4nput.'.format(n, str(s).replace('0',''))\n    for n, s in zip(new_lst, lst)]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return [str(len([c for c in i if int(c) % 2])) for i in lst]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ans=[]\n    for string in lst:\n        if int(string)%2!=0:\n            ans.append(\"the number of odd elements \"+str(len(string))+\" the \"+str(string)+\" of the \"+str(lst.index(string)+1)+\" input.\")\n        else:\n            ans.append(\"the number of even elements \"+str(len(string))+\" the \"+str(string)+\" of the \"+str(lst.index(string)+1)+\" input.\")\n    return ans\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    num_list = []\n    for item in lst:\n        num_list.append(len(item))\n    return ['the number of odd elements'+ str(i) + 'n the str4ng'+ str(lst[i]) +'of the'+ str(num_list[i]) + 'n input.' for i in range(len(num_list))]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = []\n    for item in lst:\n        counter = 0\n        for digit in item:\n            if int(digit) % 2!= 0:\n                counter += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(counter,item,item,lst.index(item)+1))\n    return result\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len(lst[i])%2,len(lst[i])//2+1,lst[i],i+1) for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return [str(len(i)) + \"n the str\" + str(len(i)) + \" of the \" + str(len(i)) + \"nput.\" for i in lst]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def count_digits(s):\n        return len(re.findall(r'\\d', s)) - len(re.findall(r'\\D', s))\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements %n the str%ng %s of the %nput.\" %(str(len(lst[i])).count('1'),\n        i,str(len(lst[i])).count('1'),i)\n        for i in range(len(lst))]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    min_sum = nums[0]\n    left, right = 0, 1\n    for i in range(1, len(nums)):\n        if nums[i - 1] > 0:\n            left = i\n        min_sum = min(min_sum, nums[i])\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    assert (isinstance(nums, list)), \"Input must be a list!\"\n    assert (isinstance(nums[0], int)), \"Input must be a list of ints!\"\n    n = len(nums)\n    if (n == 0):\n        return 0\n    sum_so_far = nums[0]\n    min_val = nums[0]\n    for i in range(1, n):\n        if (sum_so_far < 0):\n            sum_so_far = 0\n        sum_so_far += nums[i]\n        if (sum_so_far < min_val):\n            min_val = sum_so_far\n    return min_val\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    current_sum = 0\n    min_sum = sys.maxint\n    if not nums:\n        return 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum >= 0:\n            current_sum -= nums[0]\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    minSum = float('inf')\n    currSum = 0\n    for num in nums:\n        currSum += num\n        minSum = min(minSum, currSum)\n        currSum = max(currSum, 0)\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # pre-process the array\n    for i in range(1, len(nums)):\n        nums[i] += nums[i-1] if nums[i-1] > 0 else 0\n    return min(nums)\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    min_subarray_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_subarray_sum:\n            min_subarray_sum = current_sum\n    return min_subarray_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not nums:\n        return 0\n    sum = 0\n    min_sub = nums[0]\n    for n in nums:\n        sum += n\n        min_sub = min(min_sub, sum)\n    return min_sub\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    subarray_sum = nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        subarray_sum = min(nums[i], subarray_sum + nums[i])\n        if subarray_sum < min_sum:\n            min_sum = subarray_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return minSubArraySumRec(nums, len(nums), 0)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n_rows = len(grid)\n    n_columns = len(grid[0])\n    row_max_capacity = [0 for _ in range(n_rows)]\n    col_max_capacity = [0 for _ in range(n_columns)]\n    for row in range(n_rows):\n        for col in range(n_columns):\n            if grid[row][col] == 1:\n                row_max_capacity[row] += 1\n                col_max_capacity[col] += 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return int(math.ceil(capacity/grid.shape[1]))\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if not grid or not grid[0]:\n        return 0\n    num_row, num_col = len(grid), len(grid[0])\n    left_bucket, right_bucket = [0] * num_row, [0] * num_row\n    for row in range(num_row):\n        left_bucket[row] = grid[row].pop()\n    for row in reversed(range(num_row)):\n        right_bucket[row] = grid[row].pop()\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    N = len(grid)\n    M = len(grid[0])\n    visited = [[False] * M for _ in range(N)]\n    # count number of wells to fill\n    num = 0\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 1:\n                num += 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def run(grid, bucket_capacity, row, col):\n        if row >= len(grid):\n            return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    well_count = sum(sum(grid[i]) for i in range(len(grid)))\n    return well_count - capacity if well_count - capacity > 0 else 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rows, cols = len(grid), len(grid[0])\n    buckets = [[0] * cols for _ in range(rows)]\n    bucket_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            bucket_sum += grid[i][j]\n            buckets[i][j] = bucket_sum\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import numpy as np\n    def maximum_amount_cap(grid, capacity):\n        return sum([sum(g) for g in grid])//capacity\n    \n    def available_capacity(grid, capacity):\n        return np.prod([capacity-np.sum(g) for g in grid])\n    \n    return maximum_amount_cap(grid, capacity) - available_capacity(grid, capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    import math\n    rows, cols = len(grid), len(grid[0])\n    for row in grid:\n        if len(row)!= cols:\n            raise ValueError('All wells must have the same length')\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not grid:\n        return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    from functools import reduce\n    return reduce(lambda x, y: x + [y], [[i] for i in arr if i!= 0], [])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    arr.sort(key=lambda x: (len(bin(x)[2:]), x))\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if arr == []:\n        return []\n    #get array of bin values\n    binArr = [bin(x) for x in arr]\n    #create dictionaries for bin values and count of ones\n    binValCount = {}\n    for val in binArr:\n        binValCount[val] = val.count('1')\n    #sort by bin values and count of ones\n    return sorted(arr, key = lambda x: binValCount[bin(x)])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (len(bin(x)[2:]), -x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted([(num, bin(num)[2:].count('1')) for num in arr])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def count_bits(n):\n        return bin(n).count('1')\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    from itertools import groupby\n    import operator\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    res = [0] * len(arr)\n    for i in range(len(arr)):\n        count = bin(arr[i]).count('1')\n        res[count] = arr[i]\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if s == \"\":\n        return []\n    else:\n        return filter(lambda x: len(x) == n, map(lambda x: x.strip(), re.split('[\\W_]', s)))\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if s == \"\":\n        return []\n    else:\n        #return [word for word in s.split() if word.count(\"\") <= n]\n        return [word for word in s.split() if len([i for i in word if i.isalpha()]) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    result = []\n    if len(s) == 0:\n        return result\n    if s.find(\" \") == -1:\n        return [s]\n    s = s.split()\n    for word in s:\n        if (n - count_consonants(word)) <= 0:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    words = re.findall(r'\\w+', s)\n    # print(words)\n    if len(words) == 0:\n        return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if len(s) == 0:\n        return []\n    words = []\n    consonants = [chr(i) for i in range(97, 123) if chr(i) not in ['a', 'e', 'i', 'o', 'u']]\n    for word in s.split():\n        if len(list(filter(lambda x: x in consonants, word))) == n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [x for x in s.split(' ') if len([y for y in x if y not in \"aeiou\"]) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [word for word in re.split(\"\\s+\", s) if sum([1 for c in word if c not in 'aeiou']) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [word for word in s.split(\" \") if n == count_consonants(word)]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    vowels = \"aeiou\"\n    right_vowel_index = -1\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            right_vowel_index = i\n            break\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    # use index\n    # index = len(word) - 1\n    # while word[index] not in \"aeiouAEIOU\":\n    #     index -= 1\n    #     if index < 0:\n    #         return \"\"\n    # return word[index]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return \"\""
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if word[0] == word[-1] or len(word) == 1:\n        return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    vowels = \"aeiou\"\n    left_vowels = []\n    \n    # get left vowels\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            left_vowels.append(word[i])\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    #for i, letter in enumerate(reversed(word)):\n    #    if letter.lower() in vowels:\n    #        return word[-1-i]\n    \n    #return word[-1]\n    \n    word = word.lower()\n    for i, letter in enumerate(reversed(word)):\n        if letter.lower() in vowels:\n            return word[-1-i]\n    \n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return Non"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if lst[0][0]!= lst[1][0]:\n        return 'No'\n    i, j = 0, 0\n    while i < len(lst[0]) and j < len(lst[1]):\n        if lst[0][i] == ')' and lst[1][j] == '(':\n            i += 1\n            j += 1\n        elif lst[0][i] == ')' and lst[1][j] == ')':\n            return 'No'\n        elif lst[0][i] == '(':\n            j += 1\n        else:\n            i += 1\n    if j == len(lst[1]):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    opening_brackets = ['(', '{', '[', '<', '[']\n    closing_brackets = [')', '}', ']', '>', ']']\n    stack = []\n    for c in lst:\n        if c in opening_brackets:\n            stack.append(c)\n        elif c in closing_brackets:\n            if len(stack) == 0:\n                return 'No'\n            last_element = stack.pop()\n            if c == ')' and last_element!= '(':\n                return 'No'\n            if c == '}' and last_element!= '{':\n                return 'No'\n            if c == ']' and last_element!= '[':\n                return 'No'\n            if c == '>' and last_element!= '[':\n                return 'No'\n            if c == ']' and last_element!= '<':\n                return 'No'\n    return 'Yes' if len(stack) == 0 else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    stack = []\n    for i in lst:\n        if len(i) > 1:\n            if i[0] == ')' and i[-1] == '(':\n                stack.append(i[-1])\n            elif i[0] == ')' and i[-1]!= '(':\n                return \"No\"\n            elif i[-1] == ')' and i[0]!= '(':\n                return \"No\"\n            else:\n                stack.append(i[0])\n        else:\n            stack.append(i[0])\n    if len(stack) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def is_balanced(lst):\n        '''\n        @param lst: A list of characters\n        @return: Boolean\n        '''\n        stack = []\n        for ch in lst:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    stack = []\n    for s in lst:\n        if s[0] == ')' and stack and stack[-1] == '(':\n            stack.pop()\n        elif s[0] == ')' and not stack:\n            return 'No'\n        else:\n            stack.append(s[0])\n    return 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    stack = []\n    for c in lst[0]:\n        if c == ')' and stack[-1] == '(':\n            stack.pop()\n        else:\n            stack.append(c)\n    return 'Yes' if not stack else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # top_bracket = lst[0][0]\n    # bottom_bracket = lst[1][0]\n    # balanced = 0\n    # if top_bracket == ')' and bottom_bracket == '(':\n    #     balanced += 1\n    # elif top_bracket == '(' and bottom_bracket == ')':\n    #     balanced -= 1\n    # else:\n    #     return 'No'\n    # if balanced!= 0:\n    #     return 'No'\n    # else:\n    #     return 'Yes'\n    #\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return match_parens_helper(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if lst[0][0]!= lst[1][0]:\n        return 'No'\n    \n    stack = []\n    for char in lst[0][1:]:\n        if char == '(':\n            stack.append('(')\n        else:\n            if stack == []:\n                return 'No'\n            stack.pop()\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    open_parens = lst[0].count('(')\n    close_parens = lst[0].count(')')\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(arr)\n    max_arr = []\n    for i in range(0, k):\n        max_num = 0\n        for j in range(0, n):\n            if j == 0:\n                max_num = arr[j]\n            else:\n                if max_num < arr[j]:\n                    max_num = arr[j]\n        max_arr.append(max_num)\n        arr.remove(max_num)\n    return max_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    # Plan: Sorted array (max num) => [num k] => find max k numbers\n    # O(nlgn) time and O(k) space\n    def max_k_nums(arr, k):\n        if not arr:\n            return []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    ans = []\n    for i in range(k):\n        ans.append(max(arr))\n        arr.remove(max(arr))\n    return ans\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(arr)[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if k > len(arr): return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # maintain a list of size k\n    max_arr = []\n    for i in range(k):\n        max_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[max_index] < arr[j]:\n                max_index = j\n        arr[i], arr[max_index] = arr[max_index], arr[i]\n        max_arr.append(arr[i])\n    return max_arr\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(arr, reverse = True)[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # O(n) time\n    def helper(arr, k):\n        i, j = 0, len(arr) - 1\n        res = []\n        while i <= j:\n            m = (i + j) // 2\n            if arr[m] >= arr[j]:\n                j = m - 1\n            elif arr[m] < arr[j]:\n                i = m + 1\n        res.append(arr[j])\n        for i in range(j, -1, -1):\n            if len(res) < k:\n                res.append(arr[i])\n            else:\n                break\n        return res\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if lst[i]%2==1 and i%2==0])\n    \nassert(solution([5, 8, 7, 1])==12)\nassert(solution([3, 3, 3, 3, 3])==9)\nassert(solution([30, 13, 24, 321])==0)\nassert(solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])==2639)\nassert(solution([2, 3, 4, 5, 6, 7])==0)\nassert(solution([0])==0)\nassert(solution([1,2,3,4,5,6])==0"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    ans = 0\n    for num in lst:\n        if num % 2 == 0:\n            ans += num\n    return ans\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2 == 0 and lst[i]%2!= 0])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum([lst[i] for i in xrange(len(lst)) if i%2==0 if lst[i]%2==1])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    ans = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                ans += lst[i]\n    return ans\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    result = 0\n    for i in range(1,len(lst),2):\n        result += lst[i]\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2!= 0)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2])\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n    \nif __name__ == \"__main__\":\n    print(solution([5, 8, 7, 1]))\n    print(solution([3, 3, 3, 3, 3]))\n    print(solution([30, 13, 24, 321]))"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    #for i in range(0, len(lst), 2):\n        #if lst[i] % 2 == 0:\n            #lst[i] = 0\n    return sum(filter(lambda x: x % 2!= 0, lst))\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return 0\n    n = len(arr)\n    if k >= n:\n        return sum(arr)\n    s = 0\n    for i in range(k):\n        s += arr[i]\n    return s + add_elements(arr[k:], k)"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    res = 0\n    for i in range(k):\n        res += arr[i]\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    s = 0\n    for i in range(k):\n        s += arr[i]\n    if k == 1:\n        return s\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    s = 0\n    for i in range(min(k,len(arr))):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    idx = 0\n    while idx < len(arr) and len(str(arr[idx])) <= k:\n        idx += 1\n    return sum(arr[:idx])"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # add up the first k elements\n    total = 0\n    for i in range(k):\n        total += arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum([int(str(n)[:k]) for n in arr])"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    ret = 0\n    for i in range(k):\n        ret += arr[i]\n    s = 0\n    for i in range(k, len(arr)):\n        s += arr[i]\n        ret += s\n    return ret\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    while n > 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    result = []\n    while n > 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    return sorted(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 0:\n        raise ValueError(\"Invalid input\")\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    ret = []\n    while n > 1:\n        if n % 2 == 1:\n            ret.append(n)\n        n = (n + 1) / 2 if n % 2 == 0 else n * 3 + 1\n    return sorted(ret)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return [1]\n    seq = get_odd_collatz(n//2)\n    if n % 2 == 0:\n        seq.append(n)\n    else:\n        seq.append(n*3 + 1)\n    return sorted(seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    collatz_list = []\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    collatz_seq = []\n    while n > 1:\n        if n % 2 == 1:\n            collatz_seq.append(n)\n        n = (n + 1) / 2 if n % 2 == 0 else 3 * n + 1\n    return collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = []\n    while n!= 1:\n        if n % 2 == 1:\n            res.append(n)\n        n = (n * 3) + 1\n    return sorted(res)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    collatz_seq = []\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(collatz_seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n % 2 == 0:\n        return [n]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # your code here\n    import datetime\n    if len(date) == 0:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        if len(month)!= 2 or int(month) < 1 or int(month) > 12:\n            return False\n        if len(day)!= 2 or int(day) < 1 or int(day) > 31:\n            return False\n        if len(year)!= 4:\n            return False\n        if int(year) < 1 or int(year) > 3000:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    import re\n    date = re.findall(r\"\\d{2}\", date)\n    if len(date) == 3:\n        day, month, year = int(date[0]), int(date[1]), int(date[2])\n        if year < 1900 or year > 2040:\n            return False\n        elif year % 4 == 0 and month == 2 and day > 29:\n            return False\n        elif (month == 1 or month == 3 or month == 5 or month == 7 or\n                month == 8 or month == 10 or month == 12) and day > 31:\n            return False\n        elif (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:\n            return False\n        elif month > 12:\n            return False\n        elif (day < 1 or day > 31):\n            return False\n        return True\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    date_list = date.split('-')\n    if len(date_list)!= 3:\n        return False\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n    if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        return False\n    if int(date_list[2]) < 1 or int(date_list[2]) > 3000:\n        return False\n    if int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n            return False\n    if int(date_list[1]) in [1, 3, 5, 7, 8, 10, 12] and int(date_list[2]) < 1 or int(date_list[2]) > 31:\n        return False\n    if int(date_list[1]) in [4, 6, 9, 11] and int(date_list[2]) < 1 or int(date_list[2]) > 30:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import re\n    if (not date):\n        return False\n    if re.match(\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\", date):\n        if (int(date[2]) < 19) or ((int(date[2]) > 31) and ((int(date[0]) == 4) or (int(date[0]) == 6) or (int(date[0]) == 9) or (int(date[0]) == 11))):\n            return False\n        if (int(date[2]) < 1) or ((int(date[2]) > 30) and ((int(date[0]) == 4) or (int(date[0]) == 6) or (int(date[0]) == 9) or (int(date[0]) == 11))):\n            return False\n        if (int(date[0]) < 1) or ((int(date[0]) > 12) and (int(date[0])!= 2)):\n            return False\n        return True\n    return False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return True\n    \n    \ndef test_valid_date():\n    assert(valid_date('03-11-2000') is True)\n    assert(valid_date('15-01-2012') is False)\n    assert(valid_date('04-0-2040') is False)\n    assert(valid_date('06-04-2020') is True)\n    assert(valid_date('06/04/2020') is False)\n    \nif __name__ == \"__main__\":\n    test_valid_date()"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    txt = txt.split(\" \")\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    txt = txt.strip().replace(' ', '')\n    # print(txt)\n    if txt == '':\n        return txt\n    return txt.split(',')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    words = txt.split()\n    return words\n    \ndef find_missing_letter(txt):\n    '''\n    Given a string of letters, return a string of missing letters.\n    Examples\n    find_missing_letter(\"abcdef\") \u279e \"missing letter(s) is(are) e\"\n    find_missing_letter(\"adf\") \u279e \"missing letter(s) is(are) f\"\n    find_missing_letter(\"abcef\") \u279e \"\"\n    '''\n    letters = {}\n    for c in txt:\n        if c not in letters:\n            letters[c] = 1\n    \n    for i in range(ord('a'), ord('z')+1):\n        if i not in letters:\n            return chr(i)\n    \n    return ''\n    \ndef find_longest_word(words):\n    '''\n    Given a list of words, find the word with the most letters in it.\n    Examples\n    find_longest_word([\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]) \u279e \"world\"\n    find_longest_word([\"one\", \"two\", \"three\"]) \u279e \"three\"\n    find_longest_word([\"one\", \"two\", \"three\", \"four\"]) \u279e \"four\"\n    '''\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    \n    return longest\n    \ndef longest_word(txt):\n    '''\n    Given a string of words, return the length of the longest one.\n    Examples\n    longest_word(\"Hello world\") \u279e 12\n    longest_word(\"one\") \u279e 4\n    longest_word(\"This is a test\") \u279e 12\n    '''\n    words = split_words(txt)\n    return len(find_longest_word(words))\n    \ndef count_hi(txt):\n    '''\n    Given a string, return the number of times 'hi' appears in the string, ignore case.\n    Examples\n    count_hi('HiHiHiHi') \u279e 4\n    count_hi('hihi') \u279e 1\n    '''\n    return txt.lower().count('hi')\n    \ndef cat_dog(txt):\n    '''\n    Given a string, return True if the string contains the cat followed by the dog, and False otherwise.\n    Examples\n    cat_dog('CatDog') \u279e True\n    cat_dog('catdog') \u279e True\n    cat_dog('CatDOG') \u279e False\n    '''\n    return txt.lower().count('cat') == 1 and txt.lower().count('dog') == 1\n    \ndef count_code(txt):\n    '''\n    Given a string of code words, you need to find the number of different types of code words.\n    Examples\n    count_code(\"aaabbcxyz12345\") \u279e 4\n    count_code(\"abcxyz123\") \u279e 3\n    count_code(\"aabbccddeeffffggghhhhh\") \u279e 5\n    '''\n    count = 0\n    words = split_words(txt)\n    code_types = {}\n    for word in words:\n        if word[:3] == 'co' and word[3] in '0123456789':\n            code_type = word[3]\n            if code_type not in code_types:\n                count += 1\n                code_types[code_type] = 1\n            else:\n                code_types[code_type] += 1\n    \n    return count\n    \ndef count_words(txt, word):\n    '''\n    Given a string of words and a string of letters, count the number of times a word and letter appears in the string and return it.\n    Examples\n    count_words(\"The cat in the hat\", \"cat\") \u279e 2\n    count_words(\"This is a test\", \"t\") \u279e 3\n    count_words(\"This is a test\", \"is\") \u279e 0\n    '''\n    count = 0\n    words = split_words(txt)\n    \n    for word in words:\n        if word.lower() == word and word.lower() == word:\n            count += 1\n    \n    retur"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    def split_words2(txt):\n        return txt.split()\n    def split_words3(txt):\n        return txt.split(\",\")\n    def split_words4(txt):\n        return txt.split(\" \")\n    def split_words5(txt):\n        return txt.split(\",\")\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # BEGIN split_words\n    return txt.split()\n    # END split_words\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return [i for i in txt.split()]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if txt:\n        return txt.split()\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    txt = txt.replace(' ', '').replace(',', '')\n    return txt.lower().split(' ')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # txt = txt.split(' ')\n    # return txt\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    lst = [int(i) for i in lst]\n    if len(set(lst)) == len(lst):\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    lst = sorted(lst)\n    if len(lst)!= len(set(lst)):\n        return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # Sorted list is already sorted if all elem are sequential\n    # Remove duplicates\n    no_dupes = []\n    for elem in lst:\n        if elem not in no_dupes:\n            no_dupes.append(elem)\n    if no_dupes == lst:\n        return True\n    return False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    lst_copy = lst[:]\n    lst_copy.sort()\n    return lst_copy == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        sorted_lst = sorted(lst)\n        for i in range(1, len(lst)):\n            if lst[i-1]!= lst[i]:\n                return False\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    last_item = None\n    for item in lst:\n        if last_item is not None:\n            if item < last_item:\n                return False\n        last_item = item\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Base Case: list is empty\n    if len(lst) == 0:\n        return True\n    # Base Case: list has 1 element\n    elif len(lst) == 1:\n        return True\n    # Base Case: list has more than 1 duplicate\n    elif lst[0] == lst[1]:\n        return False\n    # Recursive Case: if list is sorted, return True\n    elif lst[0] < lst[1]:\n        return is_sorted(lst[1:])\n    # Recursive Case: if list is not sorted, return False\n    else:\n        return False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    # x = (interval1[0], interval1[1])\n    # y = (interval2[0], interval2[1])\n    x1, x2 = interval1\n    y1, y2 = interval2\n    if x2 < x1 or y2 < y1:\n        return \"NO\"\n    if x1 <= y2 and x2 >= y1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    start1, end1 = interval1[0], interval1[1]\n    start2, end2 = interval2[0], interval2[1]\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 < end1 and end2 < start1:\n        return \"NO\"\n    elif start1 <= start2 and end2 <= end1:\n        return \"YES\"\n    elif start2 <= start1 and end1 <= end2:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # Your code here\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def check_interval(interval):\n        start, end = interval\n        if start > end:\n            start, end = end, start\n        return end - start + 1\n    return \"YES\" if check_interval(interval1) == check_interval(interval2) and check_interval(interval1)!= 0 else \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    elif interval2[1] <= interval1[0]:\n        return \"NO\"\n    elif interval1[0] < interval2[0] < interval1[1]:\n        return interval2[0]\n    else:\n        return interval1[1]\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return 'YES' if is_prime(interval1.length + interval2.length) else 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if interval1[0] > interval1[1] or interval2[0] > interval2[1]:\n        return \"NO\"\n    elif interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not arr:\n        return None\n    return sum(abs(num) for num in arr) * product([1, -1, 0][num < 0])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if arr:\n        return sum([abs(n)*sign(n) for n in arr])\n    return None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    signs = []\n    for i in arr:\n        if i > 0:\n            signs.append(1)\n        elif i < 0:\n            signs.append(-1)\n        else:\n            signs.append(0)\n    return sum(abs(i) * j for i,j in zip(arr, signs))\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    signs = []\n    for i in arr:\n        if i < 0:\n            signs.append(-1)\n        elif i > 0:\n            signs.append(1)\n        else:\n            signs.append(0)\n    return sum([x * y for x, y in zip(arr, signs)])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return None\n    prod = 1\n    for el in arr:\n        prod *= (abs(el) + 1)\n    return prod"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return sum(abs(i) for i in arr) * prod([sign(i) for i in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n    res = 1\n    for elem in arr:\n        if elem < 0:\n            res *= -1\n        elif elem > 0:\n            res *= 1\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    arr = [abs(x) for x in arr]\n    res = 1\n    for el in arr:\n        res *= el\n    return res if res else None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    prod = 1\n    for num in arr:\n        prod *= (num * sign(num))\n    return prod\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n    arr = sorted(arr, key=abs)\n    return sum(arr[0] * sign for sign in [1, -1, 0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \"\"\"\n    @param grid: a list of lists of integers\n    @param k: an integer\n    @return: the result\n    \"\"\"\n    # from collections import deque\n    from functools import reduce\n    from operator import mul\n    from itertools import combinations\n    \n    M = len(grid)\n    N = len(grid[0])\n    k = min(k, M * N)\n    \n    # points = reduce(mul, map(len, grid))\n    points = reduce(mul, [len(l) for l in grid])\n    if k < points:\n        return []\n    \n    grid = [[i + j for i in range(M)] for j in range(N)]\n    \n    def make(i, j, k):\n        if i >= M or j >= N or k < 1 or grid[i][j] == 0:\n            return []\n        grid[i][j] = 0\n        if k == 1:\n            return [grid[i][j]]\n        \n        ans = [grid[i][j]]\n        if k % 2:\n            ans += make(i + 1, j, k - 1)\n        if k % 4:\n            ans += make(i - 1, j, k - 1)\n        if k % 8:\n            ans += make(i, j - 1, k - 1)\n        if k % 16:\n            ans += make(i, j + 1, k - 1)\n        return ans\n    \n    return make(0, 0, k)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not grid or not grid[0]:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    def get_all_neighbors(idx):\n        neighbors = []\n        if idx > 0:\n            neighbors.append(idx-1)\n        if idx < n-1:\n            neighbors.append(idx+1)\n        if idx % n!= 0:\n            neighbors.append(idx-n)\n        if idx % n!= n-1:\n            neighbors.append(idx+n)\n        return neighbors\n    \n    def bfs(start_idx):\n        q = [start_idx]\n        dist_dic = {start_idx: 0}\n        visited = set()\n        while q:\n            curr_idx = q.pop(0)\n            visited.add(curr_idx)\n            for neighbor in get_all_neighbors(curr_idx):\n                if neighbor not in visited and grid[neighbor] < grid[curr_idx]:\n                    q.append(neighbor)\n                    dist_dic[neighbor] = dist_dic[curr_idx] + 1\n        return dist_dic\n    \n    if not grid or not k:\n        return None\n    \n    n = len(grid)\n    if n == 1:\n        return grid[0][:k]\n    \n    min_path_idx = None\n    for i in range(1, n):\n        dist_dic = bfs(i)\n        if min_path_idx is None:\n            min_path_idx = dist_dic.keys()[0]\n        else:\n            curr_dist = dist_dic[min_path_idx]\n            next_dist = dist_dic[i]\n            if curr_dist < next_dist:\n                min_path_idx = i\n    \n    min_path = grid[min_path_idx][:k]\n    while min_path_idx > 0:\n        min_path_idx = min_path_idx - n\n        min_path.append(grid[min_path_idx][k-1])\n    \n    return min_path\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n    inf = float(\"inf\")\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    N = len(grid)\n    if N == 0 or k == 0:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def isValid(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not grid or not grid[0]:\n        return []\n    n = len(grid)\n    m = len(grid[0])\n    if k > m * n:\n        return []\n    if k == m * n:\n        return grid[0]\n    curr = None\n    next = None\n    s = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                curr = grid[i][j]\n                s.append(curr)\n                if len(s) == k:\n                    break\n    if len(s) == k:\n        return s\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[i] > s[j]:\n                next = s[i]\n                break\n        if next:\n            s[i], s[j] = s[j], next\n    return s\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    min_val = min(grid[0])\n    for row in grid:\n        row.append(float(\"inf\"))\n        row[0] = min_val\n    for i in range(1, len(grid[0])):\n        grid[0][i] += grid[0][i - 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    n = len(grid)\n    if k == 0:\n        return []\n    if n <= 0 or k < 1:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    N = len(grid)\n    if N == 0: return []\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return tribonacci(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    def trib(n):\n        if n == 0:\n            return []\n        elif n == 1:\n            return [1]\n        else:\n            result = [1, 3]\n            if n % 2:\n                result.append(result[-2] + result[-1] + result[-2])\n            else:\n                result.append(result[-2] + result[-3] + result[-2])\n            return result + trib(n - 1)\n    return trib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a, b, c = 3, 1, 1\n    res = [1]\n    while len(res) <= n:\n        if len(res) % 2 == 0:\n            res.append(a)\n        else:\n            res.append(b)\n        a, b, c = b, c, c + b + a\n    return re"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    tribonacci = [1, 3, 2]\n    while len(tribonacci) < n + 1:\n        tribonacci.append(tribonacci[-2] + tribonacci[-1] + tribonacci[-3])\n    return tribonacci[:n + 1]\n    \ndef test_tri():\n    assert tri(0) == []\n    assert tri(1) == [1]\n    assert tri(2) == [1, 2]\n    assert tri(3) == [1, 3, 2]\n    assert tri(4) == [1, 3, 2, 8]\n    assert tri(5) == [1, 3, 2, 8, 4]\n    assert tri(6) == [1, 3, 2, 8, 4, 10]\n    assert tri(7) == [1, 3, 2, 8, 4, 10, 13]\n    assert tri(8) == [1, 3, 2, 8, 4, 10, 13, 16]\n    assert tri(9) == [1, 3, 2, 8, 4, 10, 13, 16, 17]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # trib = [1, 1, 1, 1]\n    # # trib.append(trib[-1] + trib[-2] + trib[-3])\n    # for i in range(len(trib), n + 1):\n    #     trib.append(trib[-1] + trib[-2] + trib[-3])\n    # return trib\n    return [1] + [3] + [1] * (n - 2) + [2]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert n >= 0, \"Only non-negative integers are allowed.\"\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return trib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = [1]\n    for i in range(1, n+1):\n        if i % 2:\n            res.append(res[-1] + res[-2] + res[-3])\n        else:\n            res.append(res[-1] + res[-2] + res[-3] - 1)\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if n == 0:\n        return []\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # n = int(n)\n    t = [1,1,1]\n    if n <= 3:\n        return t[:n]\n    for i in range(3,n+1):\n        if i % 2 == 0:\n            t.append(t[i-1] + t[i-2])\n        else:\n            t.append(t[i-1] + t[i-2] + t[i-3])\n    return t\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    product = 1\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    total = 1\n    while n > 0:\n        if n % 10 % 2 == 1:\n            total *= n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return reduce(lambda x, y: x*y,\n        filter(lambda d: d%2,\n        map(int, str(n))),\n        1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    n = abs(n)\n    product = 1\n    while n:\n        product *= n % 10\n        n //= 10\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    n = str(n)\n    digits = 1\n    for d in n:\n        if int(d) % 2!= 0:\n            digits = digits * int(d)\n    return digits\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return n // 10 % 10 * n % 10\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    n_string = str(n)\n    if all([int(i) % 2 == 0 for i in n_string]):\n        return 0\n    else:\n        digits = [int(i) for i in n_string]\n        prod = 1\n        for i in digits:\n            prod = prod * i\n        return prod\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    res = 1\n    for i in str(n):\n        if int(i) % 2 == 1:\n            res *= int(i)\n    return res\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    product = 1\n    for c in str(n):\n        if int(c) % 2 == 1:\n            product *= int(c)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0: return 0\n    i = 0\n    prod = 1\n    while n > 0:\n        if n % 2 == 1:\n            prod *= n % 10\n        i += 1\n        n /= 10\n    return prod\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not string:\n        return True\n    count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(string) < 2:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(string) < 2:\n        return False\n    else:\n        for i in range(1,len(string)):\n            if string[i-1] == '[' and string[i] == ']':\n                return True\n            elif string[i-1] == '[' and string[i] == ']':\n                return False\n            else:\n                return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    index = 0\n    for i in range(len(string)):\n        if string[i] == '[' and string[-1] == ']':\n            index = i\n            break\n    return index!= 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    brackets = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    stack = []\n    for b in string:\n        if b in brackets.values():\n            stack.append(b)\n        elif b in brackets.keys():\n            if stack and brackets[stack[-1]] == b:\n                stack.pop()\n            else:\n                return False\n    return not bool(stack)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    string_in_brackets = []\n    list_of_brackets = []\n    # find all the brackets\n    for i in range(len(string)):\n        if string[i] == '[':\n            list_of_brackets.append(i)\n        elif string[i] == ']':\n            list_of_brackets.append(i)\n        elif string[i] == '(':\n            list_of_brackets.append(i)\n        elif string[i] == ')':\n            list_of_brackets.append(i)\n    \n    for bracket in list_of_brackets:\n        string_in_brackets.append(string[bracket + 1 :])\n    \n    # check if the string in brackets are nested\n    for bracket in string_in_brackets:\n        if bracket.count('[') > bracket.count(']'):\n            return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append('[')\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) > 0:\n        return False\n    return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # for i in range(len(string)):\n    #     if string[i] == ']' and string[:i] == '['*len(string[:i]):\n    #         print(True)\n    #     else:\n    #         print(False)\n    stack = []\n    for char in string:\n        if char == '[' and stack == []:\n            return False\n        elif char == '[' and stack!= []:\n            stack.append(char)\n        elif char == ']' and stack!= []:\n            stack.pop()\n        else:\n            return False\n    if stack!= []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    new_string = string[1:len(string) - 1]\n    while '[]' in new_string:\n        new_string = new_string.replace('[]', '')\n    if new_string == '':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    # Base case: empty string or string of length 1\n    if not string or len(string) == 1:\n        return False\n    # if the last character is [, then we have a pair of [\n    elif string[-1] == '[':\n        return True\n    # otherwise, if we have a matching open-close, we can recurse and add [\n    elif string[-2] == ']' and string[-1] == '[':\n        return is_nested(string[:-2])\n    # otherwise, return false\n    else:\n        return False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([round(x**2) for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # lst = [int(math.ceil(e)) for e in lst]\n    lst = [int(math.ceil(e)) for e in lst]\n    return sum([e * e for e in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    total = 0\n    for num in lst:\n        total += round(num ** 2, 2)\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(x**2 for x in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def sq(x):\n        return int(math.ceil(x * x))\n    return sum(map(sq, lst))\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return sum(i*i for i in lst)"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    # Write your solution here\n    lst = [int(round(num)) for num in lst]\n    return sum(num**2 for num in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([round(x)**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sum(map(lambda x: int(ceil(x**2)), lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    return sum(x**2 for x in lst)\n    \ndef sum_of_squares_of_two_numbers(a, b):\n    \"\"\"You are given two numbers a and b.\n    Calculate the sum of squared a and b.\n    Write your answer as a function of a and b.\n    Examples:\n    For a = 1, b = 3 the output should be sumOfSquared(a, b) = 4\n    For a = 1, b = 4 the output should be sumOfSquared(a, b) = 1\n    For a = 3, b = 4 the output should be sumOfSquared(a, b) = 5\n    For a = 3, b = -4 the output should be sumOfSquared(a, b) = 1\n    \n    \"\"\"\n    \n    return (a**2 + b**2)\n    \ndef sum_of_squares_of_three_numbers(a, b, c):\n    \"\"\"You are given three numbers a, b and c.\n    Calculate the sum of squared a, b and c.\n    Write your answer as a function of a, b and c.\n    Examples:\n    For a = 1, b = 2 and c = 3 the output should be sumOfSquares(a, b, c) = 10\n    For a = 1, b = 1 and c = 3 the output should be sumOfSquares(a, b, c) = 7\n    For a = 3, b = 2 and c = 1 the output should be sumOfSquares(a, b, c) = 8\n    For a = 3, b = 3 and c = 1 the output should be sumOfSquares(a, b, c) = 2\n    \n    \"\"\"\n    \n    return (a**2 + b**2 + c**2)\n    \ndef mul(lst):\n    \"\"\"You are given a list of integers.\n    You need to return a list which contains the product of each element of the given list.\n    Examples:\n    For lst = [1,2,3] the output should be [6,12,18]\n    For lst = [1,2,4,5] the output should be [1,2,5,10]\n    \n    \"\"\"\n    \n    return [x * x for x in lst]\n    \ndef get_squared_values(lst):\n    \"\"\"You are given a list of integers.\n    You need to return a list which contains the squared values of each element of the given list.\n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n    For lst = [1,2,4,5] the output should be [1,4,25,125]\n    \n    \"\"\"\n    \n    return [x * x for x in lst]\n    \ndef get_even_values(lst):\n    \"\"\"You are given a list of integers.\n    You need to return a list which contains the even values of each element of the given list.\n    Examples:\n    For lst = [1,2,3] the output should be [2,4]\n    For lst = [1,2,4,5] the output should be [2,4]\n    \n    \"\"\"\n    \n    return [x for x in lst if x % 2 == 0]\n    \ndef get_odd_values(lst):\n    \"\"\"You are given a list of integers.\n    You need to return a list which contains the odd values of each element of the given list.\n    Examples:\n    For lst = [1,2,3] the output should be [1,3]\n    For lst = [1,2,4,5] the output should be [1,3]\n    \n    \"\"\"\n    \n    return [x for x in lst if x % 2!= 0]\n    \ndef is_list_of_vowels(lst):\n    \"\"\"You are given a list of integers.\n    You need to return a list which contains the number of vowels in each element of the given list.\n    Examples:\n    For lst = [1,2,3,4,5] the output should be [0,0,0,0,0]\n    For lst = ['a','b','c','d','e'] the output should be [1,1,1,1,1]\n    \n    \"\"\"\n    \n    return "
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not txt:\n        return False\n    else:\n        return txt[-1].isalpha() and not txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # ---\n    # your code here\n    return None\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return not (txt[-1].isalpha() and not txt[-1].isnumeric())\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len(txt) > 0 and not txt[-1].isalpha() and not txt[-1] in''\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if txt == \"\": return False\n    return txt[-1].isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    txt = txt.rstrip()\n    #your code here\n    return txt[-1].isalpha() and not txt[-1].isnumeric()\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    if arr == None or len(arr) == 0:\n        return None\n    \n    previous_elem = arr[0]\n    \n    for i in range(1, len(arr)):\n        if previous_elem <= arr[i]:\n            return i-1\n        previous_elem = arr[i]\n    \n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return find_first_element(arr, lambda i: i-1 < arr[i])\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    for i in xrange(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def func(i):\n        if i == 0: return -1\n        for j in range(i-1, -1, -1):\n            if arr[j] <= arr[i]: return j\n        return -1\n    return func"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    for i in xrange(len(arr)-1):\n        if arr[i+1] <= arr[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    sorted_arr = sorted(arr)\n    for i in xrange(len(arr)):\n        if sorted_arr[i] < arr[i - 1]:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def func(i):\n        if i == len(arr):\n            return -1\n        else:\n            for j in range(i):\n                if arr[i] <= arr[j]:\n                    return j\n    return func\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    for i, val in enumerate(arr):\n        if i == 0:\n            continue\n        if val >= arr[i-1]:\n            continue\n        else:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    first_element = arr[0]\n    max_index = -1\n    for i in range(len(arr)-1):\n        if arr[i] <= arr[i+1]:\n            max_index = i+1\n    return max_index\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    large_small = None\n    small_large = None\n    for num in lst:\n        if num < 0:\n            if small_large is None or small_large < num:\n                small_large = num\n        else:\n            if large_small is None or large_small > num:\n                large_small = num\n    return (large_small, small_large)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n = [x for x in lst if x < 0]\n    p = [x for x in lst if x > 0]\n    return (max(n) if len(n) else None, min(p) if len(p) else None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n                a = i\n            else:\n                a = max(a, i)\n        else:\n            if b is None:\n                b = i\n            else:\n                b = min(b, i)\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    num = [x for x in lst if x < 0]\n    num = [x for x in lst if x > 0]\n    if len(num) == 0:\n        return (None, None)\n    return (max(num), min(num))\n    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    a = None\n    b = None\n    for num in lst:\n        if num < 0:\n            if a is None or num > a:\n                a = num\n        if num > 0:\n            if b is None or num < b:\n                b = num\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    negative_ints = [int(item) for item in lst if item < 0]\n    positive_ints = [int(item) for item in lst if item > 0]\n    if negative_ints:\n        return (negative_ints[-1], negative_ints[0])\n    elif positive_ints:\n        return (positive_ints[0], positive_ints[-1])\n    else:\n        return (None, None)\n    \n    \n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    numbers = []\n    for x in lst:\n        if x < 0:\n            numbers.append(x)\n    if not numbers:\n        return (None, None)\n    else:\n        return (max(numbers), min(numbers))\n    # or\n    # return (max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst)))\n    # or, better,\n    # return (max(filter(None, (x for x in lst if x < 0))), min(filter(None, (x for x in lst if x > 0))))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if not lst:\n        return None, None\n    else:\n        lst_negative = [x for x in lst if x < 0]\n        lst_positive = [x for x in lst if x > 0]\n        if not lst_negative and not lst_positive:\n            return None, None\n        elif lst_negative:\n            return (max(lst_negative), min(lst_positive))\n        else:\n            return (max(lst_positive), min(lst_negative))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    l = lst[:]\n    l.sort()\n    if l[0] < 0:\n        return (l[-1], l[0])\n    else:\n        return (l[0], l[-1])"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    max_neg = None\n    min_pos = None\n    for item in lst:\n        if item < 0:\n            if max_neg is None or max_neg < item:\n                max_neg = item\n        elif min_pos is None or min_pos > item:\n            min_pos = item\n    return (max_neg, min_pos)"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    if a < b:\n        return b\n    return None"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    elif a == b:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # a_is_bigger = False\n    # b_is_bigger = False\n    # if type(a) is str:\n    #     a = float(a)\n    # if type(b) is str:\n    #     b = float(b)\n    # if a > b:\n    #     a_is_bigger = True\n    # if a < b:\n    #     b_is_bigger = True\n    # if a_is_bigger and b_is_bigger:\n    #     return None\n    # elif a_is_bigger:\n    #     return a\n    # elif b_is_bigger:\n    #     return b\n    # else:\n    #     return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if type(a) is type(b):\n        return a if a > b else b\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if type(a) == str:\n        a = float(a)\n    elif type(a) == float:\n        a = a\n    if type(b) == str:\n        b = float(b)\n    elif type(b) == float:\n        b = b\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    elif a == b:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    try:\n        return int(a) if a < b else b\n    except:\n        return float(a) if a < b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if type(a) == type(b):\n        if a > b:\n            return a\n        else:\n            return b\n    else:\n        return None\n    \nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))\nprint(compare_one(\"1\", 1))\nprint(compare_one(1, \"1\"))\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def compare_one_helper(a, b):\n        if type(a) == str:\n            a = float(a)\n        if type(b) == str:\n            b = float(b)\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    return compare_one_helper(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if type(a) == type(b):\n        return a\n    if type(a) == int:\n        return b if a > b else a\n    if type(a) == float:\n        return b if a > b else a\n    if type(a) == str:\n        return b if float(a) > float(b) else a\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a == b:\n        return None\n    elif isinstance(a, str) or isinstance(b, str):\n        return max(a, b)\n    elif isinstance(a, float) or isinstance(b, float):\n        return max(a, b)\n    else:\n        return max(a, b)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum([x for x in range(2,n,2) if x <= n and n % x == 0]) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    n_list = [2*x for x in range(1,n/2+1)]\n    sum_list = [x for x in n_list if x%2==0]\n    sum_list.append(n-sum(sum_list))\n    return sum(sum_list)%2==0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sum_even = 0\n    for i in range(4):\n        if not n % 2:\n            sum_even += n\n            n -= 2\n    return sum_even == n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(range(0,n+1,2)) == n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum_of_n_digits_is_even(n) and sum_of_digits_is_even(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return is_sum_of_even_numbers(n, 4)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return is_even(n) and is_even(n/2) and is_even(n/4) and is_even(n/8)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sum([i for i in range(1,n/2,2) if n-i-1/2 == i]) == n/2\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    numbers = []\n    for i in xrange(1, n):\n        if is_even(i) and is_prime(n - i):\n            numbers.append(i)\n            if len(numbers) == 4:\n                return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return n%2==0 and n-4 in even_numbers\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    factorial = 1\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # BEGIN\n    return 1 if n <= 1 else n * special_factorial(n - 1)\n    # END\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n <= 0:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = 1\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    # --- YOUR CODE GOES HERE ---\n    \n    return text\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return text.replace(' ', '_').replace('  ', '-')\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # split by spaces\n    words = text.split(\" \")\n    new_text = \"\"\n    \n    # convert each word to have a single space\n    for word in words:\n        new_text += word + \"_\"\n    \n    # remove last space and add -\n    new_text = new_text[:-1] + \"_\"\n    \n    # replace any consecutive spaces with a hyphen\n    while \"__\" in new_text:\n        new_text = new_text.replace(\"__\",\"-\")\n    \n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    text = text.replace(\" \", \"_\")\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return ''.join([i if i!='' else '_' for i in text])\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    text = text.replace(\" \", \"_\")\n    if text.count(\" \") > 2:\n        text = text.replace(\" \", \"-\")\n    return text\n    \ndef clean_text(text):\n    \"\"\"\n    Given a string text, clean the text.\n    \n    clean_text(\"foo.bar.baz\") == \"foo_bar_baz\"\n    clean_text(\"  foo  \") == \"foo\"\n    clean_text(\"  foo  bar.baz  \") == \"foo_bar_baz\"\n    \"\"\"\n    return text.lower().replace(\".\", \"_\")\n    \ndef clean_date(text):\n    \"\"\"\n    Given a string text, remove date information from the string\n    \n    clean_date(\"20-10-2014\") == \"2014\"\n    clean_date(\"20/10/2014\") == \"2014\"\n    clean_date(\"20 October 2014\") == \"2014\"\n    clean_date(\"20-oct-2014\") == \"2014\"\n    clean_date(\"20-oct-2014\") == \"2014\"\n    clean_date(\"20-oct-2014-\") == \"2014\"\n    \"\"\"\n    if len(text) > 6:\n        # dates like 12-oct-2014\n        text = text[4:6]+\"-\"+text[7:9]+\"-\"+text[10:]\n    if len(text) > 11:\n        # dates like 12/10/2014\n        text = text[4:6]+\"/\"+text[7:9]+\"/\"+text[10:]\n    return text\n    \ndef fix_illegal_chars(text):\n    \"\"\"\n    Given a string text, remove any illegal characters from the string\n    \n    fix_illegal_chars(\"foo.bar.baz\") == \"foo_bar_baz\"\n    fix_illegal_chars(\"Foo.bar.baz\") == \"Foo_bar_baz\"\n    fix_illegal_chars(\"foo/bar/baz\") == \"foo_bar_baz\"\n    fix_illegal_chars(\"Foo/bar/baz\") == \"Foo_bar_baz\"\n    fix_illegal_chars(\"foo-bar-baz\") == \"foo_bar_baz\"\n    fix_illegal_chars(\"Foo-bar-baz\") == \"Foo_bar_baz\"\n    fix_illegal_chars(\"foo_bar_baz\") == \"foo_bar_baz\"\n    fix_illegal_chars(\"Foo_bar_baz\") == \"Foo_bar_baz\"\n    fix_illegal_chars(\"foo bar.baz\") == \"foo_bar_baz\"\n    fix_illegal_chars(\"Foo bar.baz\") == \"Foo_bar_baz\"\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9_]+', '', text)\n    \ndef replace_tense(word):\n    \"\"\"\n    Given a word, replace its tense with its approximate tense\n    \n    replace_tense(\"said\") == \"said\"\n    replace_tense(\"saids\") == \"said\"\n    replace_tense(\"said\") == \"said\"\n    replace_tense(\"said\") == \"said\"\n    replace_tense(\"saids\") == \"said\"\n    replace_tense(\"saids\") == \"said\"\n    replace_tense(\"said\") == \"said\"\n    replace_tense(\"said\") == \"said\"\n    \"\"\"\n    if word == \"said\":\n        return \"said\"\n    if word == \"saids\":\n        return \"said\"\n    if word.endswith(\"d\"):\n        if word[-2] == \"i\":\n            if word[-3] == \"e\":\n                return word[:-2] + \"ied\"\n            else:\n                return word[:-1] + \"ed\"\n        else:\n            return word[:-1] + \"ed\"\n    if word.endswith(\"ing\"):\n        return word[:-2] + \"ing\"\n    return word\n    \ndef replace_determiners(text):\n    \"\"\"\n    Given a string text, replace the determiners in the string\n    \n    replace_determiners(\"the cat in the hat\") == \"the_cat_in_the_hat\"\n    replace_determiners(\"the cat i"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    text = text.replace(\" \", \"_\")\n    \n    if len(text) > 2:\n        text = text.replace(\"  \", \"-\")\n        \n    return text\n    \n    \n    "
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if text.strip() == '':\n        return ''\n    text = text.strip()\n    text = re.sub(r'\\s+', '_', text)\n    text = re.sub(r'(\\s)\\s', '\\\\1-', text)\n    return text\n    \ndef dl_from_url(url):\n    \"\"\"\n    Return a file-like object containing the contents of the given URL\n    \"\"\"\n    headers = {'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'}\n    request = urllib2.Request(url, None, headers)\n    return urllib2.urlopen(request)\n    \ndef get_file_size(size):\n    \"\"\"\n    Convert a file size (number of bytes) to human readable format\n    \"\"\"\n    if size < 1024:\n        return '%d bytes' % size\n    if size < 1024**2:\n        return '%.2f kb' % (size/1024)\n    if size < 1024**3:\n        return '%.2f Mb' % (size/1024**2)\n    if size < 1024**4:\n        return '%.2f Gb' % (size/1024**3)\n    return '%.2f Tb' % (size/1024**4)\n    \ndef get_duration(video_time):\n    \"\"\"\n    Convert a video duration (time in seconds) to human readable format\n    \"\"\"\n    if video_time <= 60:\n        return '%02d:%02d' % (video_time / 60, video_time % 60)\n    if video_time < 60 * 60:\n        return '%d:%02d' % (video_time / 60, video_time % 60)\n    if video_time < 24 * 60 * 60:\n        return '%d:%02d:%02d' % (video_time / 60 / 60, video_time / 60 % 60, video_time % 60)\n    return '%d:%02d:%02d' % (video_time / 24 / 60 / 60, video_time / 24 / 60 % 60, video_time / 24 % 60)\n    \ndef get_time_elapsed(start, end):\n    \"\"\"\n    Return the time elapsed in seconds from start to end\n    \"\"\"\n    return float(end - start)\n    \ndef get_start_time(time):\n    \"\"\"\n    Convert a time in seconds to string with format %H:%M:%S\n    \"\"\"\n    return time / 3600, time / 60 % 60, time % 60\n    \ndef get_timestamp(time):\n    \"\"\"\n    Convert a time in seconds to timestamp string with format %Y-%m-%d %H:%M:%S\n    \"\"\"\n    return time / 86400, time / 3600 % 24, time / 60 % 60, time % 60\n    \ndef get_bitrate(bitrate):\n    \"\"\"\n    Convert a bitrate in kbps to human readable format\n    \"\"\"\n    if bitrate < 1000:\n        return '%d kbps' % bitrate\n    if bitrate < 1000 * 1000:\n        return '%.2f Mbps' % (bitrate / 1000)\n    if bitrate < 1000 * 1000 * 1000:\n        return '%.2f Gbps' % (bitrate / 1000**2)\n    return '%.2f Tbps' % (bitrate / 1000**3)\n    \ndef get_size(size):\n    \"\"\"\n    Convert a size in bytes to human readable format\n    \"\"\"\n    if size < 1024:\n        return '%d bytes' % size\n    if size < 1024**2:\n        return '%.2f kB' % (size / 1024)\n    if size < 1024**3:\n        return '%.2f MB' % (size / 1024**2)\n    if size < 1024**4:\n        return '%.2f GB' % (size / 1024**3)\n    return '%.2f TB' % (size / 1024**4)\n    \ndef get_progress(position, total):\n    \"\"\"\n    Return a progress bar for the current position out of the total\n    \"\"\"\n    if total == 0:\n        return ''\n    width = 50\n    pe"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not text:\n        return \"\"\n    return re.sub(\" +\", \"_\", text)\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return re.sub(r\"\\s{2,}\", \"_\", text)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def file_name_checker(file_name):\n        count = 0\n        for i in file_name:\n            if i.isdigit():\n                count += 1\n        if count > 3 or count == 0:\n            return \"No\"\n        else:\n            if file_name.find(\".\")!= -1:\n                index = file_name.rfind(\".\")\n                if file_name[:index].isalpha() and file_name[index+1:] in ['exe','dll','txt']:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                return \"No\"\n    return file_name_checker\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    l = file_name.split('.')\n    # if the file name has more than one dot, return 'No'\n    if len(l) > 1:\n        return 'No'\n    # if the file name doesn't have a dot, return 'No'\n    elif len(l) < 1:\n        return 'No'\n    # if the name has a dot but not an extension, return 'No'\n    elif len(l) == 1:\n        if l[0].isdigit():\n            return 'No'\n        elif l[0][0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n    if file_name.find('.') == -1:\n        return 'No'\n    if not file_name.split('.')[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return \"Yes\" if re.match(r'[^\\.0-9]+\\.\\w{3}', file_name) and re.match(r'^[a-zA-Z]', file_name) and re.match(r'^[a-zA-Z].+\\w{3}$', file_name) else \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    import re\n    if not re.search('[0-9]', file_name):\n        return 'Yes'\n    elif not re.search('\\.', file_name):\n        return 'No'\n    else:\n        if not re.search('^[a-zA-Z]', file_name):\n            return 'No'\n        elif not re.search('[exe|dll|txt]', file_name):\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    def file_name_valid(file_name):\n        # return True or False\n        return re.match(r'\\w+\\.?[\\w.]*\\.(txt|exe|dll)$', file_name)\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    invalid_chars = '0123456789'\n    dot = '.'\n    \n    if len(file_name) > 3:\n        return False\n    \n    if file_name.count(dot) > 1:\n        return False\n    \n    file_name = file_name.split(dot)\n    if file_name[0] == '' or not file_name[0].isalpha():\n        return False\n    \n    if file_name[1] in invalid_chars:\n        return False\n    \n    if file_name[1] in invalid_chars:\n        return False\n    \n    for extension in ('txt', 'exe', 'dll'):\n        if file_name[1].endswith(extension):\n            return True\n    \n    return False\n    \ndef main():\n    print file_name_check('example.txt')\n    print file_name_check('example.exe')\n    print file_name_check('example.dll')\n    print file_name_check('file.123')\n    print file_name_check('example')\n    print file_name_check('file')\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def checker(file_name):\n        if len(file_name) <= 3 or file_name.count('.')!= 1 or \\\n           not file_name[0].isalpha() or not file_name[file_name.index('.')+1:].lower() in ['txt', 'exe', 'dll']:\n            return 'No'\n        return 'Yes'\n    return checker\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    def is_valid_file_name(file_name):\n        if len(file_name) <= 3:\n            return False\n        if file_name.find('.') == -1:\n            return False\n        if file_name[0] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return False\n        if file_name[-4:] not in ['txt', 'exe', 'dll']:\n            return False\n        return True\n    if not is_valid_file_name(file_name):\n        return False\n    return True\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import re\n    file_name_regex = re.compile('^[a-zA-Z][a-zA-Z0-9]*[.]([txt|exe|dll])$')\n    if file_name_regex.match(file_name) is not None:\n        return 'Yes'\n    else:\n        return 'No'\n    \ndef file_name_generator(number_of_files=1):\n    \"\"\"Create a function which takes a number, and returns a list of file names generated\n    using the following process:\n    - First, you are given a number (n).\n    - Then, you generate a list of n random file names.\n    - Then, you print the file names (without the extension) on a single line, separated by \n    a space.\n    Example:\n    print(file_name_generator(2)) # => ['bat', 'lobster']\n    \"\"\"\n    import random\n    file_name_list = []\n    for i in range(number_of_files):\n        file_name = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for i in range(random.randint(3, 15)))\n        file_name_list.append(file_name + '.' + random.choice('txt|exe|dll'))\n    return file_name_list\n    \ndef write_to_file(file_name, text):\n    \"\"\"Create a function which takes a string as input, and writes the string to a file with\n    the given file name (file_name)\n    Example:\n    write_to_file(\"example.txt\", \"Hello World!\")\n    \"\"\"\n    file = open(file_name, 'w')\n    file.write(text)\n    file.close()\n    \ndef read_from_file(file_name):\n    \"\"\"Create a function which takes a file name as input, and returns the text in the file as a string.\n    Example:\n    print(read_from_file(\"example.txt\")) # => 'Hello World!'\n    \"\"\"\n    file = open(file_name, 'r')\n    text = file.read()\n    file.close()\n    return text\n    \ndef file_size_check(file_name):\n    \"\"\"Create a function which takes a file name as input, and returns the size of the file in \n    bytes as a string.\n    Example:\n    print(file_size_check(\"example.txt\")) # => '24'\n    \"\"\"\n    file = open(file_name, 'r')\n    text = file.read()\n    file.close()\n    return str(len(text))\n    \ndef encrypt(file_name):\n    \"\"\"Create a function which takes a file name as input, and encrypts the file by writing each\n    character of the file in reverse order, by writing the new characters to a new file.\n    Example:\n    encrypt(\"example.txt\")\n    \"\"\"\n    file = open(file_name, 'r')\n    text = file.read()\n    file.close()\n    file_name = file_name + '_' + str(random.randint(1000, 9999))\n    file = open(file_name, 'w')\n    for i in reversed(text):\n        file.write(i)\n    file.close()\n    return file_name\n    \ndef decrypt(file_name):\n    \"\"\"Create a function which takes a file name as input, and decrypts the file by writing the \n    characters of the file in the forward order to a new file.\n    Example:\n    decrypt(\"example.txt\")\n    \"\"\"\n    file = open(file_name, 'r')\n    text = file.read()\n    file.close()\n    file_name = file_name + '_' + str(random.randint(1000, 9999))\n    file = open(file_name, 'w')\n    for i in text:\n        file.write(i)\n    file.close()\n    return file_name\n    \ndef append_to_file(file_name, text):\n    \"\"\"Create a function which takes a file name as input, and appends the given text to the \n    file.\n    Example:\n    append_to_file(\"example.txt\", \"Hello World!\")\n    \"\"\"\n    file = open(file_name, 'a')"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    out = 0\n    for i in range(len(lst)):\n        if (i % 3) == 0:\n            lst[i] = lst[i] * lst[i]\n        if (i % 4) == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        if (i % 3) or (i % 4):\n            out += lst[i]\n    return out\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0 or i % 4 == 0:\n            sum += i**2\n        else:\n            sum += i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    return sum(i*i for i in lst if i>0 and (i*i)%3==0 or (i*i)%4==0 and i*i<0)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sum(i**2 if (i%3==0 or i%4==0) else i for i in lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i] * lst[i]\n            total = total + lst[i]\n        elif i % 3!= 0:\n            total = total + lst[i]\n    return total\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    pass\n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    s = 0\n    for i in range(len(lst)):\n        if i % 4 == 0:\n            lst[i] **= 3\n        if i % 3 == 0:\n            lst[i] **= 2\n    for i in lst:\n        s += i\n    return s\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if (i % 4 == 0):\n            lst[i] = lst[i]**3\n        elif (i % 3 == 0):\n            lst[i] = lst[i]**2\n        else:\n            sum += lst[i]\n    return sum\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i]**2\n        elif i % 3!= 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = 0\n    for i in lst:\n        if (i*i) % 3 == 0 or (i*i*i) % 4 == 0:\n            result += i*i\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n        return True\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    import string\n    words = sentence.split(' ')\n    ret = []\n    for word in words:\n        if len(word) == 1:\n            ret.append(word)\n        else:\n            p = 2\n            while p * p <= len(word):\n                if word[0:p] == word[p:2*p]:\n                    break\n                p += 1\n            ret.append(word[0:p])\n    return''.join(ret)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return''.join([w for w in sentence.split(' ') if len(w) > 2])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not sentence:\n        return ''\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if sentence is None or len(sentence) == 0:\n        return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    word_list = sentence.split(' ')\n    result = []\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    split_sentence = sentence.split(' ')\n    for word in split_sentence:\n        result.append(word)\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    words = sentence.split(\" \")\n    return \" \".join([word for word in words if is_prime(len(word))])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if len(word) > 2 and is_prime(len(word)):\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if not sentence:\n        return ''\n    sentence = sentence.lower().split(' ')\n    return''.join(map(lambda word: max(filter(lambda num: num % len(word) == 0, map(len, sentence)), key=len), sentence))"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    assert type(x) == str\n    assert type(n) == str\n    try:\n        x = int(x)\n    except ValueError:\n        return False\n    try:\n        n = int(n)\n    except ValueError:\n        return False\n    if n == 0:\n        return False\n    # try:\n    #     n = int(n)\n    # except ValueError:\n    #     return False\n    # if x == 0:\n    #     return False\n    # try:\n    #     x = int(x)\n    # except ValueError:\n    #     return False\n    # if x == 0:\n    #     return False\n    if x * n < 0:\n        return False\n    x = str(abs(x))\n    n = str(abs(n))\n    for i in range(0, len(x)):\n        if x[i] > n[i]:\n            return False\n    return True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    numerator, denominator = fraction(x)\n    if numerator == 0:\n        return True\n    if n == \"1\":\n        return True\n    numerator, denominator = fraction(n)\n    if n == \"0\":\n        return True\n    if n == \"1/1\":\n        return True\n    return numerator * int(numerator / denominator) == numerator and numerator / denominator == int(numerator / denominator)\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    #your code here\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n == 0:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    numerator, denominator = fraction(x)\n    gcd = gcd_of_numerators(numerator, denominator)\n    if denominator % gcd!= 0:\n        return False\n    else:\n        return numerator / denominator\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def convert_to_integer(x):\n        \"\"\"\n        Converts string fraction to integer fraction\n        \"\"\"\n        try:\n            fraction = x.split('/')\n            return int(fraction[0]), int(fraction[1])\n        except:\n            raise ValueError\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \"\"\"\n    x = x.replace(\"/\", \" \")\n    x = x.split()\n    n = n.replace(\"/\", \" \")\n    n = n.split()\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # hint: you can use eval() function to evaluate a fraction\n    # hint: use get_num() and get_den() functions to evaluate numerator and denominator respectively\n    # hint: use gcd() function to compute greatest common divisor\n    # hint: you can use floor() function to get the most significant number\n    # hint: use % operator to get the remainder of a division\n    # hint: use sign() function to get the sign of a fraction\n    # hint: use int() function to convert the result to an integer\n    # hint: use float() function to convert the result to a float\n    # hint: use long() function to convert the result to a long integer\n    # hint: use round() function to round the result to the given number of decimal places\n    # hint: use convert_fraction() function to convert x to a fraction\n    # hint: use convert_fraction() function to convert n to a fraction\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if not isinstance(n, str) or not isinstance(x, str):\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    x = x.split('/')\n    n = n.split('/')\n    if (x[0] == \"0\"):\n        return False\n    if (x[1] == n[1]):\n        return True\n    else:\n        a = int(x[0]) * int(n[1])\n        b = int(x[1]) * int(n[0])\n        if (a > b):\n            a = a % b\n        else:\n            b = b % a\n        if (a == 0):\n            return True\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    new_list = []\n    result = []\n    for i in nums:\n        sum_of_digits = 0\n        for j in str(i):\n            sum_of_digits += int(j)\n        new_list.append((sum_of_digits, i))\n    new_list.sort()\n    for k in new_list:\n        result.append(k[1])\n    return result\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(nums, key=lambda n: (sum(int(d) for d in str(n)), n))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # sort the list of integers according to sum of their digits\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    def helper(i, j):\n        return sum([int(nums[i] * pow(10, k))\n            for k in range(len(str(nums[i])))])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(nums, key=lambda x: sum(int(c) for c in str(abs(x))))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sum(1 for i in nums if i > 10 and (i % 10)!= 0 and ((i % 100) / 10) % 2!= 0)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return sum(1 for n in nums if n > 10 and not int(str(n)[0]) % 2 and not int(str(n)[-1]) % 2)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    def isOdd(n):\n        return n % 2 == 1\n    count = 0\n    for num in nums:\n        if isOdd(num) and num > 10:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return len(filter(lambda x: (x > 10) and (x%2==1) and (x%10==1), nums))\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return sum(1 for n in nums if 10 <= n <= 100 and (n % 10) % 2 == 1 and (n // 10) % 2 == 1)\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    counter = 0\n    for i in nums:\n        if i > 10 and i % 2 == 1 and i // 10 % 2 == 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    \n    return len([num for num in nums if num > 10 and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or num % 10 == 7 or num % 10 == 9)])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return len([n for n in nums if n > 10 and n % 2 and n // 10 % 2])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # use a counter\n    count = 0\n    # loop through nums\n    for num in nums:\n        # check if the first and last digits are odd\n        if (num % 10) % 2 == 1 and ((num // 10) % 10) % 2 == 1:\n            # add 1 to count\n            count += 1\n    # return count\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sum(1 for n in nums if n > 10 and (n % 100 // 10 + n % 10) % 2 == 1)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n    return sum([1 for i in a for j in a if i + j in a and i + j + i == 3 * (i + j)])\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    # a[i] = i * i - i + 1\n    # since a[i] is the index of a[i]\n    # so a[i] + a[j] + a[k] = i * i - i + 1\n    # since a[i] + a[j] + a[k] = 0\n    # the index of a[i] + a[j] + a[k] = a[i] + a[j] + a[k]\n    # therefore a[i] = a[j] + a[k]\n    # thus (a[i] + a[j] + a[k]) / 3 = a[i] + a[j]\n    # thus count of valid triple (a[i], a[j], a[k])\n    # is the count of valid triple (a[i], a[j], a[k]) that\n    # satisfies the condition that a[i] + a[j] + a[k] % 3 == 0\n    # a[i] + a[j] + a[k] % 3 = 0\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i + 1\n    # a[i] + a[j] + a[k] = i * i - i "
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return sum([(i*i - i + 1) * (n - i) for i in range(1, n//3 + 1)]) % int(1e9)\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    a = [0] * n\n    max_pairs = n // 3\n    for p in range(1, max_pairs+1):\n        for i in range(p, n):\n            a[i] = a[i] + a[i-p]\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    a = [i*i - i + 1 for i in range(1, n)]\n    return len([i for i in a if i % 3 == 0])\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    a = [0] * n\n    count = 0\n    for i in range(n):\n        a[i] = i * i - i + 1\n        if a[i] % 3 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n < 3:\n        return 0\n    if n == 3:\n        return 1\n    ans = 0\n    s = set()\n    for i in xrange(1, n):\n        if i * i - i + 1 % 3!= 0:\n            continue\n        for j in xrange(i + 1, n):\n            if i * i - i + 1 % 3!= 0:\n                continue\n            k = (i * i - i + 1) / 3\n            if j * j - j + 1 % 3!= 0:\n                continue\n            if k > j:\n                continue\n            ans += 1\n            s.add((i, j, k))\n    return ans\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n    \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    name1 = planet1.lower()\n    name2 = planet2.lower()\n    if name1 not in PLANET_NAMES or name2 not in PLANET_NAMES:\n        return ()\n    elif name1 == name2:\n        return (name1,)\n    elif name1 < name2:\n        name2, name1 = name1, name2\n    planet_names = (name1, name2)\n    planet_distance = [\n        (name1, name2, np.linalg.norm(np.array(PLANETS[name1]) - np.array(PLANETS[name2]))) \n        for name in planet_names\n    ]\n    return tuple(name for name, _, _ in sorted(planet_distance, key=lambda x: x[2]))\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # your code here\n    sun = \"Sun\"\n    planets = [sun, \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planets_in_orbit = []\n    for i in planets:\n        if i!= planet1 and i!= planet2:\n            planets_in_orbit.append(i)\n    return tuple(planets_in_orbit)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    sun = \"Sun\"\n    planet1 = planet1.title()\n    planet2 = planet2.title()\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    if planet1 == planet2:\n        return tuple()\n    if planet1 == sun:\n        return tuple(sorted(planets))\n    if planet2 == sun:\n        return tuple(sorted(planets, reverse=True))\n    planet1_orbit = set()\n    planet2_orbit = set()\n    planets_orbit = set()\n    for planet in planets:\n        planet_orbit = set()\n        if planet!= sun:\n            while planet!= sun:\n                planet_orbit.add(planet)\n                planet = g(planet)\n        planet1_orbit.add(planet1)\n        planet2_orbit.add(planet2)\n        if planet1 in planet_orbit and planet2 in planet_orbit:\n            planets_orbit.add(planet)\n    planets_orbit.remove(sun)\n    return tuple(sorted(planets_orbit))\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    planets = {\n        'Mercury': (0, 'Venus'),\n        'Venus': (60, 'Earth'),\n        'Earth': (120, 'Mars'),\n        'Mars': (180, 'Jupiter'),\n        'Jupiter': (240, 'Saturn'),\n        'Saturn': (300, 'Uranus'),\n        'Uranus': (360, 'Neptune'),\n        'Neptune': (420, 'Pluto'),\n        'Pluto': (480, '')\n    }\n    planet1 = planets.get(planet1, planet1)\n    planet2 = planets.get(planet2, planet2)\n    return tuple(planet for planet in planets if planet >= planet1 and planet <= planet2)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # convert to uppercase, lowercase, and remove whitespace\n    planet1 = planet1.upper().replace(\" \", \"\")\n    planet2 = planet2.upper().replace(\" \", \"\")\n    planet1 = list(planet1)\n    planet2 = list(planet2)\n    s = set(planet1) & set(planet2)\n    planet1 = set(planet1) - s\n    planet2 = set(planet2) - s\n    planet1 = list(planet1)\n    planet2 = list(planet2)\n    # if planet1 or planet2 are not correct planet names, return empty tuple\n    if planet1 == planet2 == []:\n        return tuple()\n    # add in sun's orbit\n    planet1.append('Sun')\n    planet2.append('Sun')\n    # get the indexes of the planet1 and planet2 in planet1 and planet2\n    planet1_index = planet1.index('Sun')\n    planet2_index = planet2.index('Sun')\n    # create a list of planets between planet1 and planet2\n    planet_orbit = []\n    # iterate over planets between planet1 and planet2\n    for planet in planet1[planet1_index:planet2_index]:\n        # add planet to the list if it is between planet1 and planet2\n        if planet1_index < planet2_index:\n            planet_orbit.append(planet)\n        # move to the next planet\n        planet1_index += 1\n    # return the list of planets\n    return tuple(planet_orbit)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    orbit1 = planets.index(planet1)\n    orbit2 = planets.index(planet2)\n    if orbit1 > orbit2:\n        orbit1, orbit2 = orbit2, orbit1\n    if orbit2 >= orbit1:\n        return tuple(planets[orbit1:orbit2+1])\n    return tuple()\n    \n    \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if planet1.title() == \"Jupiter\" or planet1.title() == \"Saturn\" or planet1.title() == \"Uranus\" or planet1.title() == \"Neptune\":\n        if planet2.title() == \"Jupiter\" or planet2.title() == \"Saturn\" or planet2.title() == \"Uranus\" or planet2.title() == \"Neptune\":\n            result = []\n            \n            if planet1.title() == \"Jupiter\" or planet1.title() == \"Saturn\" or planet1.title() == \"Uranus\" or planet1.title() == \"Neptune\":\n                result.append(planet2)\n                if planet2.title() == \"Jupiter\" or planet2.title() == \"Saturn\" or planet2.title() == \"Uranus\" or planet2.title() == \"Neptune\":\n                    result.append(planet1)\n                    return tuple(result)\n                else:\n                    return tuple(result)\n            else:\n                return tuple(result)\n        else:\n            return tuple()\n    else:\n        return tuple()\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return sorted(lst, key=lambda word: len(word))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \"\"\"\n    sorted_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            sorted_list.append(word)\n    return sorted(sorted_list)\n    \"\"\"\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    sorted_lst = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            sorted_lst.append(word)\n    sorted_lst = sorted(sorted_lst, key = len)\n    return sorted_lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return sorted(lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    def even_length(string):\n        return len(string) % 2 == 0\n    return sorted(filter(even_length, lst))\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    def list_sort(lst):\n        \"\"\"Write a function that accepts a list of strings as a parameter,\n        deletes the strings that have odd lengths from it,\n        and returns the resulted list with a sorted order,\n        The list is always a list of strings and never an array of numbers,\n        and it may contain duplicates.\n        The order of the list should be ascending by length of each word, and you\n        should return the list sorted by that rule.\n        If two words have the same length, sort the list alphabetically.\n        The function should return a list of strings in sorted order.\n        You may assume that all words will have the same length.\n        For example:\n        assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n        assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n        \"\"\"\n        return sorted(lst, key = lambda x: len(x))\n    return list_sort(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort()\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    def is_even(x):\n        if x % 2 == 0:\n            return True\n        return False\n    \n    def filter_even_word_len(x):\n        if is_even(len(x)):\n            return True\n        return False\n    \n    lst = list(filter(filter_even_word_len, lst))\n    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    length = len(lst)\n    for i in range(length):\n        if len(lst[i]) % 2:\n            del lst[i]\n    return sorted(lst, key=len)\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return sorted(filter(lambda x: len(x) % 2 == 0, lst))\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n    \ndef polygon_area(corners):\n    \"\"\"A program which should take a list of corners of a 2D polygon \n    and return the area of this polygon.\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if n % 2 == 0 and n > 2:\n        return x\n    elif n % 2!= 0:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if n%2 == 0:\n        return y\n    else:\n        return x\n    \n    \n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n    "
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    \n    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        return x\n    return y\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if n%2==0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    diff = 0\n    for x in lst:\n        if x % 2!= 0 and x > 0:\n            diff += x * x\n    return diff\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x > 0 and x % 2!= 0])"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    \n    return sum([num * num for num in lst if num % 2 == 1])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    # complete this function\n    # Note: we can use the sum() and abs() functions\n    # But if we do not know the number of items in the list, we can use the len() function\n    return sum( [ (i ** 2) for i in lst if (i % 2!= 0 and i > 0) ] )\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    \n    return sum([x**2 for x in lst if x % 2!= 0])\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    difference = 0\n    for i in lst:\n        if i % 2!= 0 and i > 0:\n            difference += i * i\n    return difference\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return sum(x**2 for x in lst if x%2 and x > 0)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    # Your code here\n    if lst == []:\n        return 0\n    elif lst == [0]:\n        return 0\n    else:\n        new_lst = []\n        for i in lst:\n            if i % 2 == 1 and i >= 0:\n                new_lst.append(i**2)\n        return sum(new_lst)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    \n    if lst == []:\n        return 0\n    \n    return sum([i**2 for i in lst if i % 2]"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    \n    if not lst: return 0\n    \n    return sum([(i+1)*i for i in lst if i > 0 and i % 2 == 1])\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    result = []\n    for i in xrange(len(guess)):\n        result.append(abs(guess[i] - game[i]))\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    guesses = []\n    for i, num in enumerate(guess):\n        if num == game[i]:\n            guesses.append(0)\n        else:\n            guesses.append(abs(guess[i]-game[i]))\n    return guesses\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [abs(guess[i]-game[i]) for i in range(len(game))]\n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # your code goes here\n    scores = []\n    for i in range(len(game)):\n        scores.append(abs(guess[i]-game[i]))\n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    compare = [abs(guess[i] - game[i]) for i in range(len(guess))]\n    return compare\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [abs(a-b) for a,b in zip(game,guess)]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return [guess[i] - game[i] if guess[i]!= game[i] else 0 for i in range(len(guess))]\n    \nassert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]\nassert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    result = []\n    for index,guess_val in enumerate(guess):\n        score_val = game[index]\n        diff = guess_val - score_val\n        if guess_val == score_val:\n            result.append(0)\n        else:\n            result.append(abs(diff))\n    return result\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    class_name = class_name.lower()\n    extension_names = []\n    for extension in extensions:\n        extension_name = extension.lower()\n        extension_names.append(extension_name)\n        strength = 0\n        for letter in extension_name:\n            if letter.isupper():\n                strength += 1\n            else:\n                strength -= 1\n        extension_names[-1] += '.' + extension_name + '.' + class_name\n        if strength == 0:\n            return extension_names[-1]\n        else:\n            extension_names[-1] += '.' + extension_name\n            if strength > 0:\n                return extension_names[-1]\n            else:\n                return extension_names[-2]"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    extension_strength = {}\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n        extension_strength[extension] = strength\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not isinstance(class_name, basestring):\n        raise TypeError('class_name is not a string')\n    if not isinstance(extensions, list):\n        raise TypeError('extensions is not a list')\n    for extension in extensions:\n        if not isinstance(extension, basestring):\n            raise TypeError('extension is not a string')\n    strength = 0\n    max_extension = \"\"\n    for extension in extensions:\n        lower = 0\n        upper = 0\n        for letter in extension:\n            if letter.isupper():\n                upper += 1\n            elif letter.islower():\n                lower += 1\n        strength = upper - lower\n        if strength > strength:\n            max_extension = extension\n    if len(max_extension) > 0:\n        return class_name + \".\" + max_extension\n    else:\n        raise ValueError('No extensions greater than 0')\n    \n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    strongest_extension = extensions[0]\n    strongest_strength = -1\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return '{0}.{1}'.format(class_name, strongest_extension)\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    strength_list = []\n    for i in extensions:\n        strength = 0\n        for letter in i:\n            if letter.isupper():\n                strength += 1\n            elif letter.islower():\n                strength -= 1\n        strength_list.append([i, strength])\n    \n    sorted_list = sorted(strength_list, key = lambda x: x[1])\n    \n    sorted_list = sorted(sorted_list, key = lambda x: len(x[0]))\n    \n    return class_name + '.' + sorted_list[-1][0]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    s = 0\n    n = 0\n    for e in extensions:\n        e = e.split('.')\n        n = n + len(e[1])\n        for l in e[1]:\n            if l.isupper():\n                s = s + 1\n    return class_name + '.' + extensions[n - s].split('.')[1]\n    \n    \n    \n    \ndef Second_Letter_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the second-highest extension and return a string in this \n    format: ClassName.SecondExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes second in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.Cheese' since 'Cheese' is the second-highest extension \n    (its strength is -1).\n    Example:\n    for Second_Letter_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n    \"\"\"\n    s = 0\n    n = 0\n    for e in extensions:\n        e = e.split('.')\n        n = n + len(e[1])\n        for l in e[1]:\n            if l.isupper():\n                s = s + 1\n    return class_name + '.' + extensions[n - s - 1].split('.')[1]\n    \n    \n    \n    \ndef First_Letter_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the highest extension and return a string in this \n    format: ClassName.HighestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the highest extension \n    (its strength is -1).\n    Example:\n    for First_Letter_Extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n    \"\"\"\n    s = 0\n    n = 0\n    for e in extensions:\n        e = e.split('.')\n        n = n + len(e[1])\n        for l in e[1]:\n            if l.isupper():\n                s = s + 1\n    return class_name + '.' + extensions[n - s].split('.')[1]\n    \n    \n    \n    \ndef get_class_name(line):\n    \"\"\"\n    Returns the class name from the line.\n    For example, if you are given \"class NumberAndString;\" \n    return \"NumberAndString\".\n    \"\"\"\n    return line.split(';')[0].split(' ')[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    extension_strength = {extension: sum(1 for letter in extension if letter.isupper()) - sum(1 for letter in extension if letter.islower()) for extension in extensions}\n    return '{}.{}'.format(class_name, max(extension_strength, key=extension_strength.get))\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    d = {'AA': 0, 'be': 0, 'cc': 0, 'ab': 0, 'bb': 0, 'a': 0, 'b': 0, 'c': 0}\n    for ext in extensions:\n        for letter in ext:\n            if letter.isupper():\n                d[letter] += 1\n            else:\n                d[letter.lower()] += 1\n    # use dictionary\n    s = sorted(d.items(), key=lambda x: x[1])\n    l = [x[0] for x in s if x[1] == s[0][1]]\n    return '{}.{}'.format(class_name, l[0])\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    def fn(s, t):\n        return s in t or t in s\n    return fn(a,b) or fn(a,a) or fn(b,b)\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    a = a.replace(' ',''); b = b.replace(' ','')\n    if len(a) == len(b):\n        return b in a\n    elif len(a) > len(b):\n        if b in a:\n            return True\n        for i in range(1,len(a)):\n            if a[i:] in a[:len(a)-i]:\n                return True\n    else:\n        if a in b:\n            return True\n        for i in range(1,len(b)):\n            if b[i:] in b[:len(b)-i]:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    len_a = len(a)\n    len_b = len(b)\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if len(b) > len(a):\n        return False\n    for i in range(0, len(b)):\n        if b in a:\n            return True\n        if b[1:] == a[len(a)-len(b):]:\n            return True\n        if b[2:] == a[len(a)-2*len(b):]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if len(a)!= len(b):\n        return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    return bool(re.search(b,a))"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    rotated = a + a\n    if b in rotated or b in rotated[1:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if len(b) > len(a):\n        return False\n    return any(b in c for c in (a, a[1:] + a[0], a[-1] + a[0:-1], a[::-1]))\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Convert both strings to their python equivalents\n    # Convert 1st string to a list\n    # Convert 2nd string to a list\n    # Loop through 1st list, if the list exists in 2nd list, return True\n    # Return False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    import copy\n    flag = False\n    for i in range(len(a)):\n        newb = copy.copy(b)\n        if newb in a:\n            flag = True\n            break\n        if i == len(a)-1:\n            return False\n        newb = newb[1:] + newb[0]\n        if newb in a:\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if num < 0:\n        num *= -1\n        return even_odd_count(num)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    even = 0\n    odd = 0\n    while num:\n        if num % 2:\n            odd += 1\n        else:\n            even += 1\n        num /= 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    digit_count = 0\n    even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = abs(num)\n    for i in str(num):\n        digit_count += 1\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    even_digits = 0\n    odd_digits = 0\n    while num:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num //= 10\n    return even_digits, odd_digits\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    return count_digits(num, [2,4,6,8])\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num *= -1\n    while num:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    digit_count = 0\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            digit_count += 1\n    return (digit_count, len(num_str) - digit_count)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return (len(str(num)[:int(len(str(num))/2)]), len(str(num)[int(len(str(num))/2):]))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    return int(str(abs(num)).count('1')), int(str(abs(num)).count('0'))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    even = 0\n    odd = 0\n    if num < 0:\n        num = abs(num)\n        if num % 2 == 0:\n            return (0, 1)\n        else:\n            return (1, 0)\n    else:\n        if num % 2 == 0:\n            even = 1\n        else:\n            odd = 1\n        while num > 0:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            num = num // 10\n        return (even, odd)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    i = 1\n    roman = ''\n    while number:\n        if i >= 5:\n            d, m = divmod(number, 5)\n            number -= d\n            roman += m * 'i'\n        elif i == 4:\n            d, m = divmod(number, 4)\n            number -= d\n            roman += m * 'ii'\n        elif i == 3:\n            d, m = divmod(number, 3)\n            number -= d\n            roman += m * 'iii'\n        elif i == 2:\n            d, m = divmod(number, 5)\n            number -= d\n            roman += m * 'v'\n        elif i == 1:\n            d, m = divmod(number, 10)\n            number -= d\n            roman += m * 'x'\n        else:\n            number -= i\n            roman += 'i'\n        i += 1\n    return roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('number must be positive integer between 1 and 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    if 1 <= number <= 1000:\n        if number < 10:\n            return 'i' + 'i' * (number - 1)\n        if 9 < number < 40:\n            return 'x' + 'x' * (number - 10)\n        if 39 < number < 100:\n            return 'l' + 'l' * (number - 40)\n        if 99 < number < 400:\n            return 'c' + 'c' * (number - 100)\n        if 399 < number < 500:\n            return 'd' + 'd' * (number - 400)\n        if 499 < number < 600:\n            return'm' +'m' * (number - 500)\n    else:\n        raise ValueError('Argument must be between 1 and 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    assert isinstance(number, int), 'Value must be an integer'\n    assert number >= 1 and number <= 1000, 'Value must be between 1 and 1000'\n    r = ''\n    r_list = [\n
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    # 1. Validate the input number\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        raise ValueError('invalid input number, must be an integer 1 <= num <= 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    assert 1 <= number <= 1000, 'num must be between 1 and 1000'\n    roman = ''\n    while number > 0:\n        if number in [1, 10, 100, 1000]:\n            roman += number * 'i'\n            number -= number\n        elif number in [9, 99]:\n            roman += 'x' + (number-9) * 'i'\n            number -= number\n        elif number in [4, 40, 400, 4000]:\n            roman += 'x' + (number//10 - 1) * 'i'\n            number -= (number//10 - 1) * 10\n        else:\n            roman += 'x' + (number//5 - 1) * 'i'\n            number -= (number//5 - 1) * 5\n    return roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    result = ''\n    roman = {1:'i', 4:'iv', 5:'v', 9:'ix', 10:'x', 40:'XL', 50:'L', 90:'XC', 100:'C', 400:'CD', 500:'D', 900:'CM', 1000:'M'}\n    for key in sorted(roman, reverse=True):\n        while number >= key:\n            result += roman[key]\n            number -= key\n    return result\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('int_to_mini_roman: invalid argument')\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    result = ''\n    for numeral, integer in roman_numerals.items():\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"You are trying to convert a number bigger than 1000 or less than 1.\")\n    # a variable to store the new string, and to convert to lowercase\n    mini_roman = \"\"\n    # a dictionary to store the conversion to roman numerals\n    conversion = {\"1\": \"I\", \"2\": \"II\", \"3\": \"III\", \"4\": \"IV\", \"5\": \"V\",\n                  \"6\": \"VI\", \"7\": \"VII\", \"8\": \"VIII\", \"9\": \"IX\", \"10\": \"X\",\n                  \"100\": \"C\", \"1000\": \"M\"}\n    # a dictionary to store the conversion to roman numerals\n    conversion2 = {\"1\": \"x\", \"2\": \"xx\", \"3\": \"xxx\", \"4\": \"xxxx\", \"5\": \"L\",\n                  \"6\": \"LX\", \"7\": \"LXX\", \"8\": \"LXXX\", \"9\": \"XC\", \"10\": \"C\",\n                  \"100\": \"C\", \"1000\": \"M\"}\n    # loop through the roman numerals\n    for i in range(len(str(number))):\n        # assign the roman numeral equivalent to the number at that index\n        mini_roman += conversion2[str(number)[i]]\n    # return the lowercase roman numeral equivalent\n    return mini_roman.lower()\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n    "
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return round(a**2 + b**2 == c**2, 3)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # Check the lengths of sides to see if they are valid\n    # return false if invalid\n    # check if one of the sides is equal to the other 2\n    # return false if one of the side is equal to the other\n    # return true if all sides are equal\n    if a == b or a == c or b == c:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if (a*a + b*b == c*c) or (b*b + c*c == a*a) or (c*c + a*a == b*b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    # YOUR CODE HERE\n    s = (a**2 + b**2)**(0.5)\n    c_angle = c**2 / (a**2 + b**2)\n    \n    if c_angle == math.sin(math.radians(60)):\n        return True\n    else:\n        return False\n    \n    \n    "
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return (a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    import math\n    if (math.sqrt(a**2 + b**2) == c) or (math.sqrt(b**2 + c**2) == a) or (math.sqrt(c**2 + a**2) == b):\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if (a**2 + b**2) == c**2 or (b**2 + c**2) == a**2 or (a**2 + c**2) == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    word_list = words\n    words = sorted(words, key=len)\n    max_count = 0\n    for i in range(len(words)):\n        if len(words[i]) == max_count:\n            if words[i] < words[i-1]:\n                max_count = 0\n        else:\n            max_count = len(words[i])\n    return words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    max_char = \"\"\n    for word in words:\n        if len(word) > len(max_char):\n            max_char = word\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    max_word = \"\"\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return max(words, key = lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    max_word = ''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_word = word\n            max_len = len(word)\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    maximum = len(words[0])\n    ans = words[0]\n    for i in words:\n        if len(i) > maximum:\n            maximum = len(i)\n            ans = i\n    return ans\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    res = \"\"\n    max_unique = -1\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            res = word\n            max_unique = unique\n    return res\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    return sorted(words, key=lambda x: len(set(x)))[-1]\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    max_len = 0\n    for word in words:\n        len_dict = {}\n        for c in word:\n            if c not in len_dict:\n                len_dict[c] = 1\n            else:\n                len_dict[c] += 1\n        if len(len_dict) > max_len:\n            max_len = len(len_dict)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    def num_unique(string):\n        chars = {}\n        for c in string:\n            if c in chars:\n                chars[c] += 1\n            else:\n                chars[c] = 1\n        return max(chars.values())\n    return min(words, key=num_unique)\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    remaining -= number\n    if remaining > 0:\n        return [need, remaining]\n    else:\n        return [need, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if (number + need) > remaining:\n        return [remaining, 0]\n    return [number + need, remaining - number - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    remaining -= need\n    if remaining < 0:\n        return [number, 0]\n    return [number + need, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = [0, 0]\n    if number < need:\n        return result\n    if number == need:\n        return result\n    if need > remaining:\n        result[1] = remaining\n    else:\n        result[1] = need\n    if remaining < need:\n        result[0] = remaining\n    else:\n        result[0] = remaining - need\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    \n    if remaining < need:\n        return [0, number]\n    \n    return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [number + need - remaining, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if number > need:\n        return [need, remaining]\n    elif number == need:\n        return [need, 0]\n    else:\n        remaining -= number\n        return [need, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [need + min(number, remaining), max(0, remaining - number)]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    \n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    \n    # Remove the first integer in each list, since it is unnecessary\n    # for a calculation\n    operator.pop(0)\n    operand.pop(0)\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    operand_len = len(operand)\n    if operand_len < 1 or operand_len!= len(operator) - 1:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    raise NotImplementedError(\"Do not use abstract method do_algebra.\")\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    raise NotImplementedError\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    n = len(s)\n    if n == 0:\n        return \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    #remove white spaces\n    s = s.replace(\" \", \"\")\n    #print(s)\n    #find letters\n    letters = re.findall(r\"[a-zA-Z]+\", s)\n    if letters!= []:\n        letters = list(letters)\n        for i in range(len(letters)):\n            if s[i].isalpha():\n                letters[i] = letters[i].lower()\n            else:\n                letters[i] = letters[i].upper()\n        #print(letters)\n        letters.reverse()\n        #print(letters)\n        letters = \"\".join(letters)\n        #print(letters)\n        #print(\" \".join(letters))\n        return letters\n    return s[::-1]"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    return \"\".join(s[::-1].lower().split('a')"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return ''.join([str(x).swapcase() for x in s if not x.isalpha()][::-1] + [x for x in s if x.isalpha()])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if not s:\n        return s\n    return \"\".join(reversed(sorted(s.lower())))\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if s.isdigit():\n        return s\n    if not s:\n        return s\n    result = list(s)\n    for i in xrange(len(result)):\n        if result[i].isalpha():\n            if result[i].islower():\n                result[i] = result[i].upper()\n            else:\n                result[i] = result[i].lower()\n    return \"\".join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not s:\n        return \"\"\n    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result += s[i]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    result = ''\n    for letter in s:\n        if letter.isalpha():\n            if letter.isupper():\n                result += letter.lower()\n            else:\n                result += letter.upper()\n        else:\n            result += letter\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    s = list(s)\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n    return ''.join(s)\n    \nif __name__ == \"__main__\":\n    print(solve(\"1234\"))\n    print(solve(\"ab\"))\n    print(solve(\"#a@C\")"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    a = list(s)\n    for i in xrange(len(a)):\n        if a[i].isalpha():\n            a[i] = a[i].swapcase()\n    return ''.join(a)\n    \nassert solve('1234') == '4321'\nassert solve('ab') == 'AB'\nassert solve('#a@C') == '#A@c'\nassert solve('a') == 'a'\nassert solve('#') == '#'\nassert solve('A') == 'A'\nassert solve('#a') == '#a'\nassert solve('#a@c') == '#A@c'\nassert solve('aa') == 'aa'\nassert solve('#b') == '#b'\nassert solve('a#') == 'a#'\nassert solve('ab#') == 'ba#'\nassert solve('#a#') == 'a#'\nassert solve('#a@c') == '#A@c'\nassert solve('#ab#') == 'ab#'\nassert solve('#ab@c#') == 'ab#@c#'"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode(\"utf-8\")).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    if not isinstance(text, str):\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    text = text.encode('utf-8')\n    return md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    if not text:\n        return None\n    else:\n        hash = hashlib.md5()\n        hash.update(text.encode('utf-8'))\n        return hash.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return hashlib.md5(text).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "    if a % 2 == 0 and b % 2 == 0:\n        return list(range(a, b + 1, 2))\n    else:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "    # TODO: change this to use yield\n    return [i for i in range(a, b, 2)]\n    \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "    return [i for i in range(a,b+1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "    result = []\n    if a > b:\n        a, b = b, a\n    while a <= b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "    range_a = range(a, b+1)\n    for num in range_a:\n        if is_even(num):\n            yield num\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "    if a % 2!= 0 or b % 2!= 0:\n        return []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "    # Generate integers between a and b\n    # Check for even digits\n    # Return even digits in ascending order\n    pass"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "    return [n for n in range(a, b) if n % 2 == 0]\n"
    }
]