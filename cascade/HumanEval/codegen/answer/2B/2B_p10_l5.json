[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for index in range(len(numbers) - 1):\n        if numbers[index + 1] - numbers[index] < threshold:\n            return True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # First, get the length of the list.\n    length = len(numbers)\n    # If the length is less than or equal to 2, then there are no elements to compare.\n    if length <= 2:\n        return False\n    # Add the first element to the dictionary.\n    # It will be the key.\n    dictionary = {numbers[0]: 0}\n    # For each element in the list.\n    for i in range(1, length):\n        # If the value for the element is not in the dictionary.\n        if numbers[i] not in dictionary.keys():\n            # Then add it to the dictionary.\n            dictionary[numbers[i]] = i\n        # If the element is in the dictionary, then get the index of the element.\n        else:\n            # Find the index of the element.\n            index = dictionary[numbers[i]]\n            # Compare the index to the i value.\n            if index!= i:\n                # If the difference is less than the threshold, return True.\n                if abs(index - i) < threshold:\n                    return True\n    # If the threshold was met, then return False.\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i] < threshold:\n            if numbers[i + 1] < threshold:\n                return True\n    return False"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(numbers) < 2:\n        return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers.sort()\n    close_elements = False\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            close_elements = True\n            break\n    return close_elements\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i, num in enumerate(numbers[:-1]):\n        for j in range(i+1, len(numbers)):\n            if num - numbers[j] <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers)):\n        if i!= len(numbers) - 1:\n            if numbers[i] == numbers[i + 1] and abs(numbers[i] - numbers[i + 1]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_groups = []\n    next_open_brace = ''\n    paren_group = ''\n    for i in paren_string:\n        if i == '(':\n            next_open_brace += i\n        elif i == ')':\n            paren_group += i\n            paren_groups.append(paren_group)\n            paren_group = ''\n            next_open_brace = ''\n        else:\n            paren_group += i\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if paren_string == '':\n        return paren_string\n    \n    lst = []\n    while paren_string:\n        ind = paren_string.find('(')\n        if ind == -1:\n            lst.append(paren_string)\n            break\n        elif ind == 0:\n            lst.append(paren_string[1:ind])\n            paren_string = paren_string[ind+1:]\n        else:\n            substr = paren_string[:ind]\n            lst.append(substr)\n            paren_string = paren_string[ind+1:]\n    return lst\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if paren_string is None:\n        raise ValueError\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    start_paren = paren_string.find(\"(\")\n    end_paren = paren_string.find(\")\")\n    paren_groups = []\n    while start_paren!= -1 or end_paren!= -1:\n        if start_paren == -1:\n            paren_groups.append(paren_string[0:end_paren + 1])\n            paren_string = paren_string[end_paren + 1:]\n            start_paren = paren_string.find(\"(\")\n            end_paren = paren_string.find(\")\")\n        elif end_paren == -1:\n            paren_groups.append(paren_string[0:start_paren + 1])\n            paren_string = paren_string[start_paren + 1:]\n            start_paren = paren_string.find(\"(\")\n            end_paren = paren_string.find(\")\")\n        else:\n            paren_groups.append(paren_string[0:start_paren + 1])\n            paren_string = paren_string[start_paren + 1:end_paren + 1]\n            start_paren = paren_string.find(\"(\")\n            end_paren = paren_string.find(\")\")\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '((')\n    paren_string = paren_string.replace(')', ')))')\n    paren_string = paren_string.replace(')', '))')\n    paren_string = paren_string.replace('(', '((')\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    paren_string = paren_string.replace(' ', '')\n    new_paren_string = ''\n    group_stack = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            group_stack.append(paren_string[i])\n        elif paren_string[i] == ')':\n            paren_string = new_paren_string + paren_string[i]\n            group_stack.pop()\n            new_paren_string = ''\n        elif paren_string[i]!='':\n            new_paren_string += paren_string[i]\n    if len(group_stack)!= 0:\n        return separate_paren_groups(paren_string)\n    else:\n        return [new_paren_string]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_groups = []\n    curr_group = []\n    if len(paren_string) == 0:\n        return paren_groups\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            curr_group.append('(')\n        elif paren_string[i] == ')':\n            if len(curr_group) == 0:\n                paren_groups.append(''.join(curr_group))\n                curr_group = []\n            else:\n                curr_group.pop()\n    if len(curr_group) > 0:\n        paren_groups.append(''.join(curr_group))\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_list = paren_string.split(\"( )\")\n    paren_list = list(map(lambda x: x.split(\"()\"), paren_list))\n    paren_list = list(map(lambda x: x[0].strip(), paren_list))\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    groups = []\n    parens = paren_string.split()\n    for p in parens:\n        parens_in_group = p.split('(')\n        parens_in_group = [x for x in parens_in_group if x!= '']\n        groups.append(parens_in_group)\n    return groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    paren_string = paren_string.split('(')\n    for index, group in enumerate(paren_string):\n        paren_string[index] = group.replace(')', '')\n    return paren_string\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    integer_part = int(number)\n    fractional_part = number - integer_part\n    return fractional_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    whole_part = int(number)\n    decimal_part = number - whole_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num, dec = str(number).split(\".\")\n    dec = dec[:max(1, len(dec) - 1)]\n    return float(num + \".\" + dec)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = float(number)\n    div = a // 1\n    dec = a % 1\n    return dec\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert(number > 0)\n    integer = math.floor(number)\n    fraction = number - integer\n    return fraction\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO\n    intpart = number\n    decimal_part = number - intpart\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return number - int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = int(number)\n    d = number - n\n    return n, d\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    integer = int(number)\n    decimal = number - integer\n    return decimal\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    integer = int(number)\n    fraction = number - integer\n    return fraction\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(1, len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for operation in operations:\n        if operation < 0:\n            total += operation\n    if total < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # return below_zero_recursive(operations, 0)\n    return below_zero_non_recursive(operations)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if the beginning balance is below zero, the function should return True. Otherwise, it should return False\n    if operations[0] <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    balance = 0\n    for i in range(len(operations)):\n        if balance < 0:\n            return True\n        balance += operations[i]\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bal = 0\n    for op in operations:\n        bal += op\n        if bal < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for idx in range(len(operations) - 1):\n        if operations[idx + 1] < 0:\n            if operations[idx] > 0:\n                return True\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # first_num = operations[0]\n    # for num in operations:\n    #     if num < 0:\n    #         return True\n    #     else:\n    #         first_num = num\n    # return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total_deposits = 0\n    total_withdrawals = 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(i < 0 for i in operations) > 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    mean_of_numbers = sum(numbers) / len(numbers)\n    return (sum([abs(x - mean_of_numbers) for x in numbers]) / len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(f'Expecting at least 2 numbers. {len(numbers)} provided.')\n    else:\n        return float(sum([abs(x - mean_of_list(numbers)) for x in numbers]) / len(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(numbers)\n    total = 0\n    for i in range(n):\n        total += abs(numbers[i] - mean(numbers))\n    return total / n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(numbers)\n    x_mean = sum(numbers) / n\n    # calc deviation from x_mean\n    dev = 0\n    for number in numbers:\n        dev += abs(number - x_mean)\n    return dev / n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert numbers, \"Must provide non-empty list of numbers\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not numbers:\n        raise ValueError('No numbers provided to mean_absolute_deviation.')\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = list(filter(lambda x: x is not None, numbers))\n    if numbers:\n        return sum(abs(x - mean(numbers)) for x in numbers) / len(numbers)\n    return 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    total_difference = 0\n    for number in numbers:\n        total_difference += abs(number - mean)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    if len(numbers) == 1:\n        return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers or len(numbers) < 2:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimeter])\n    result.extend([numbers[-1]])\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (numbers[i:i + 2] for i in range(0, len(numbers), 2))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        return numbers\n    length = len(numbers)\n    if length == 1:\n        return numbers\n    elif length == 2:\n        return numbers + [delimeter]\n    else:\n        length = len(numbers)\n        new_list = []\n        for i in range(0, length, 2):\n            new_list.append(numbers[i])\n            new_list.append(delimeter)\n        new_list.append(numbers[length - 1])\n        return new_list\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    index = 0\n    while index < len(numbers):\n        if index!= len(numbers) - 1:\n            result.extend([numbers[index], delimeter])\n        else:\n            result.extend([numbers[index], delimeter])\n        index += 1\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_list = []\n    for index, value in enumerate(numbers):\n        return_list.append(value)\n        return_list.append(delimeter)\n        if index == len(numbers) - 1:\n            return_list.append(delimeter)\n    return return_list\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not numbers:\n        return []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if i == 0:\n            res.append(numbers[i])\n        elif i < len(numbers) - 1:\n            res.append(delimeter)\n            res.append(numbers[i])\n        else:\n            res.append(delimeter)\n            res.append(numbers[i])\n    return res\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # use stack to store the level of nesting of parentheses\n    stack = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_stack = []\n    level = 0\n    p_length = len(paren_string)\n    result_list = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_stack = []\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n            paren_stack.pop()\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_list = paren_string.split(' ')\n    nested_list = []\n    for paren in paren_list:\n        nested_list.append(len(paren))\n    return nested_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_level_stack = []\n    paren_level = 0\n    for c in paren_string:\n        if c == \"(\":\n            paren_level_stack.append(paren_level)\n            paren_level += 1\n        elif c == \")\":\n            paren_level_stack.pop()\n            paren_level -= 1\n        else:\n            pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    results = []\n    curr_depth = 0\n    nested_count = 0\n    for p in paren_string:\n        if p == \"(\":\n            curr_depth += 1\n            nested_count += 1\n            if curr_depth > results[-1]:\n                results.append(curr_depth)\n        elif p == \")\":\n            curr_depth -= 1\n            nested_count -= 1\n        if curr_depth == 0:\n            results.append(nested_count)\n    return results\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = paren_string.strip()\n    i = 0\n    stack = []\n    while i < len(paren_string):\n        paren = paren_string[i]\n        if paren == '(':\n            stack.append(1)\n        elif paren == ')':\n            if len(stack) == 0:\n                return i\n            else:\n                stack.pop()\n        i += 1\n    return len(stack)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    depth = 0\n    parens = []\n    parens.append(paren_string)\n    for char in parens[0]:\n        if char == '(':\n            depth += 1\n        if char == ')':\n            depth -= 1\n    return depth\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def get_max_depth(paren_string: str, level: int, max_depth: int) -> int:\n        \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n        For each of the group, output the deepest level of nesting of parentheses.\n        E.g. (()()) has maximum two levels of nesting while ((())) has three.\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    filtered = []\n    for i in range(len(strings)):\n        if substring in strings[i]:\n            filtered.append(strings[i])\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered_string_list = []\n    for string in strings:\n        if substring in string:\n            filtered_string_list.append(string)\n    return filtered_string_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    output = []\n    for s in strings:\n        if substring in s:\n            output.append(s)\n    return output\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum_num = 0\n    pro_num = 1\n    if len(numbers) == 0:\n        return (sum_num, pro_num)\n    else:\n        for num in numbers:\n            sum_num += num\n            pro_num *= num\n    return (sum_num, pro_num)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Sum and product\n    sum_num = 0\n    product_num = 1\n    for i in numbers:\n        sum_num = sum_num + i\n        product_num = product_num * i\n    return sum_num, product_num\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum = 0\n    product = 1\n    for i in numbers:\n        sum += i\n        product *= i\n    return sum, product\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), numbers[0] * numbers[1] * numbers[2] * numbers[3]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not numbers:\n        return (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        sum_numbers = 0\n        product_numbers = 1\n        for number in numbers:\n            sum_numbers = sum_numbers + number\n            product_numbers = product_numbers * number\n        return (sum_numbers, product_numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # sum = 0\n    # product = 1\n    # for i in numbers:\n    #     sum += i\n    #     product *= i\n    # return (sum, product)\n    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum_of_numbers = 0\n    product_of_numbers = 1\n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum, product = 0, 1\n    for i in numbers:\n        sum, product = sum + i, product * i\n    return (sum, product)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # check if list is empty\n    if not numbers:\n        return []\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_list = []\n    curr_max = max(numbers)\n    max_list.append(curr_max)\n    for i in range(1, len(numbers)):\n        curr_max = max(curr_max, numbers[i - 1])\n        max_list.append(curr_max)\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_list = []\n    max_element = numbers[0]\n    for i in range(len(numbers)):\n        if max_element < numbers[i]:\n            max_element = numbers[i]\n        max_list.append(max_element)\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    max_value = float(\"-inf\")\n    for number in numbers:\n        if number > max_value:\n            max_value = number\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    curr_max = numbers[0]\n    for i in range(len(numbers)):\n        curr_max = max(numbers[i], curr_max)\n        result.append(curr_max)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result: List[int] = []\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    if len(numbers) == 1:\n        return numbers\n    else:\n        for i in range(len(numbers)):\n            if i == 0:\n                result.append(numbers[i])\n                continue\n            elif i > 0 and numbers[i] > numbers[i - 1]:\n                result.append(numbers[i])\n            else:\n                result.append(result[i - 1])\n        return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if not result or numbers[i] >= result[-1]:\n            result.append(numbers[i])\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # TODO: Complete this function\n    max_so_far = 0\n    current_max = max(numbers)\n    max_so_far = max(max_so_far, max_so_far)\n    for i in range(len(numbers)):\n        max_so_far = max(max_so_far, current_max)\n        if numbers[i] > max_so_far:\n            current_max = numbers[i]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_list = []\n    cur_max = numbers[0]\n    for i in range(len(numbers)):\n        max_list.append(cur_max)\n        cur_max = max(numbers[i], cur_max)\n    return max_list\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return prefix + suffix\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Setup: Find the longest postfix of the string\n    #         Get the longest prefix of the string\n    #         Get the longest prefix and suffix that are both palindromes\n    #         append the reverse of a prefix to the end of the string\n    # return the new string\n    if is_palindrome(string):\n        return string\n    # Loop through the length of the string\n    for length in range(1, len(string)):\n        # Loop through the first half of the string\n        for start in range(0, len(string) // 2):\n            # Check if the substring is a palindrome\n            if is_palindrome(string[start: start + length]):\n                # Check if the reverse of the substring is a palindrome\n                if is_palindrome(string[start: start + length][::-1]):\n                    return string[:start] + string[start: start + length][::-1] + string[start + length:]\n    return None\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    shortest = ''.join(sorted(string, reverse=True))\n    for i in range(len(shortest)):\n        suffix = shortest[i:]\n        prefix = shortest[:i]\n        if is_palindrome(prefix):\n            return prefix + suffix[::-1]\n    return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_postfix = ''\n    max_prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            max_postfix = string[i:]\n            break\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not string:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check for edge case\n    if len(string) == 0:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    string = list(string)\n    longest_palindrome = make_longest_palindrome(string)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for length in range(1, len(string)):\n        substring = string[:length]\n        if is_palindrome(substring):\n            return substring + string[length:]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def is_palindrome(string: str) -> bool:\n        \"\"\" Test if given string is a palindrome \"\"\"\n        return string == string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # First find the longest palindrome\n    max_len = 0\n    max_string = ''\n    for c in string:\n        if is_palindrome(c + string):\n            max_len += 1\n            max_string = c + string\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join([str(int(a) ^ int(b))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if len(a)!= len(b):\n    #     print(\"The input strings are of unequal length\")\n    #     exit(0)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join([bin(ord(a[i]) ^ ord(b[i]))[2:].zfill(8) for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    bit_xor = 0\n    for i in range(len(a)):\n        bit_xor += a[i] ^ b[i]\n    return bin(bit_xor)[2:]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        if a[i] == b[i]:\n            res += '0'\n        else:\n            res += '1'\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join([str(int(i) ^ int(j)) for i,j in zip(a,b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Solution\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == \"0\" and b[i] == \"0\":\n            result += \"0\"\n        else:\n            result += \"1\"\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a_string = a\n    b_string = b\n    result_string = \"\"\n    if len(a_string) > len(b_string):\n        length = len(a_string)\n    else:\n        length = len(b_string)\n    if length == 0:\n        return \"\"\n    for i in range(length):\n        if a_string[i]!= b_string[i]:\n            result_string += a_string[i]\n        else:\n            result_string += b_string[i]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = \"\"\n    a_dict = {'0': '0', '1': '1'}\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result = result + a_dict['0']\n        else:\n            result = result + a_dict['1']\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n    if strings == []:\n        return None\n    \n    max_len = len(strings[0])\n    max_str = strings[0]\n    for word in strings:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for word in strings:\n        if len(word) > len(longest_string):\n            longest_string = word\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not strings:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if strings == []:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(strings)\n    if n == 0:\n        return None\n    if n == 1:\n        return strings[0]\n    cur_str = strings[0]\n    cur_len = len(cur_str)\n    for i in range(1, n):\n        if len(strings[i]) > cur_len:\n            cur_str = strings[i]\n            cur_len = len(cur_str)\n    return cur_str\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while a!= 0:\n        a, b = b%a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while b!= 0:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a == 0 or b == 0:\n        return 0\n    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b > 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while b!= 0:\n        c = a % b\n        a = b\n        b = c\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a < b:\n        a, b = b, a\n    while a!= 0:\n        a, b = b % a, a\n    return b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # assume this is a prefix\n    prefixes = []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = []\n    for i in range(1, len(string)+1):\n        res.append(string[:i])\n    return res\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prefixes = []\n    # iterate over the characters in the string\n    # and add prefixes to the prefixes list\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        if prefix not in prefixes:\n            prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(string) == 0:\n        return []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(string) == 0:\n        return []\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[0:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string = str(0)\n    for i in range(1, n + 1):\n        string += f' {i}'\n    return string\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = max(n, 0)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    return f\"{n} {''.join(str(i) for i in range(1, n+1))}\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert (n >= 0), \"n must be non-negative\"\n    return''.join(str(x) for x in range(n+1))\n    \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = n + 1\n    if n == 0:\n        return '0'\n    else:\n        string = str(n)\n        return string_sequence(n - 1) + \" \" + string\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return f'{n}'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return''.join(map(str, range(n + 1)))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    distinct_characters = set()\n    for character in string:\n        if character.isalpha():\n            distinct_characters.add(character.lower())\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    chars = set()\n    for char in string:\n        chars.add(char.lower())\n    return len(chars)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    distinct_characters = set()\n    for char in string:\n        if char.upper() in distinct_characters:\n            distinct_characters.remove(char.upper())\n        distinct_characters.add(char.upper())\n    return len(distinct_characters)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for char in string:\n        if char.isalpha() and not char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    new_note = 0\n    for elem in music_string:\n        if elem == 'o' or elem == 'o|':\n            res.append(4)\n        elif elem == '.':\n            res.append(1)\n        elif elem == '|':\n            new_note = 1\n        elif elem =='':\n            if new_note:\n                res.append(1)\n                new_note = 0\n        else:\n            print(f'invalid input, got {elem}')\n    return res\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    notes = []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    music = music_string.split(\" \")\n    return_music = []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    cleaned_string = music_string.replace('\\n', '')\n    cleaned_string = cleaned_string.replace('o|', '1').replace('|', '1').replace('o', '1').replace('|', '0')\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [4 if music_string[i] in \"o|\" else 1 for i in range(len(music_string))]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [4 if s == 'o' else 2 if s == 'o|' else 1 if s == '|' else 0 for s in music_string]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert music_string.count('o') > 0, 'Music is not formatted properly!'\n    assert music_string.count('|') == 1, 'Music is not formatted properly!'\n    assert music_string.count('.|') == 1, 'Music is not formatted properly!'\n    assert music_string.count('o') + music_string.count('|') + music_string.count('.|') == len(music_string), 'Music is not formatted properly!'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    data = []\n    for line in music_string.splitlines():\n        data.extend(list(map(int, line.split())))\n    return data\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return []\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(1 for i in range(len(string)-len(substring)+1) if string[i:i+len(substring)] == substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert substring!= \"\"\n    assert string!= \"\"\n    count = 0\n    for index in range(len(string) - len(substring) + 1):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string.split(substring)) - 1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    number = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            number += 1\n    return number\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    length = len(string)\n    for i in range(length):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Find index of first character\n    first_char = string.find(substring)\n    # We start from second character\n    second_char = first_char + 1\n    # Current count of occurrence\n    occurrence = 1\n    while second_char < len(string):\n        # Find index of second character\n        second_char = string.find(substring, second_char)\n        # If the substring is not found\n        if second_char == -1:\n            break\n        # Update occurrence\n        occurrence += 1\n        # Update index\n        second_char += 1\n    return occurrence\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    substring_length = len(substring)\n    return count_pattern_matches(string, substring, substring_length)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string) - len(string.lstrip(substring))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    if len(substring) > len(string):\n        return count\n    for i in range(len(string)-len(substring)+1):\n        for j in range(len(substring)):\n            if i+j>len(string) or string[i+j]!= substring[j]:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers.split(' '), key=lambda x: (x!= 'zero', int(x), x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not isinstance(numbers, str):\n        raise TypeError(f\"{numbers} is not a string\")\n    try:\n        numbers = numbers.split()\n    except AttributeError:\n        raise AttributeError(f\"{numbers} is not a string\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    numbers_list = numbers.split()\n    numbers_list = sorted(numbers_list)\n    sorted_numbers = \"\"\n    for i in numbers_list:\n        sorted_numbers += i\n    return sorted_numbers\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    numbers_list = numbers.split()\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Convert input to a list of numbers.\n    number_list = []\n    for num in numbers.split():\n        number_list.append(int(num))\n    # Get the largest number in the list.\n    largest_num = max(number_list)\n    # Get the smallest number in the list.\n    smallest_num = min(number_list)\n    # Sort the list by value of each number, and print the sorted list.\n    number_list.sort(key=lambda x: x)\n    return''.join(str(n) for n in number_list)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = numbers.split()\n    numbers = list(map(int, numbers))\n    numbers.sort()\n    numbers = list(map(str, numbers))\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers = numbers.split()\n    numbers.sort()\n    return''.join(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    first_num, second_num = float('inf'), float('inf')\n    for num in numbers:\n        if num < first_num:\n            first_num = num\n        if num > second_num:\n            second_num = num\n    return first_num, second_num\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    length = len(numbers)\n    if length < 2:\n        raise ValueError(\"List must have at least 2 elements\")\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for i in range(1, length):\n        if numbers[i] < minimum:\n            minimum = numbers[i]\n        if numbers[i] > maximum:\n            maximum = numbers[i]\n    return (minimum, maximum)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Hint: Remember that if you don't find a closest pair then the closest pair has to be in the middle\n    if len(numbers) <= 1:\n        return 0.0, 0.0\n    left_pointer = 0\n    right_pointer = len(numbers) - 1\n    # Your code here\n    # Set up pointer to the left and right pointer\n    # Move left pointer until the left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Move right pointer to the right until left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Move left pointer to the left until left pointer and right pointer are equal\n    # Print out left and right pointers\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    # If right pointer is smaller than left pointer, then swap them\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    # If right pointer is smaller than left pointer, then swap them\n    # Use a while loop to find the closest pair\n    # Find out if left pointer is greater than right pointer\n    # If so, then swap them\n    # Then move left pointer to the left\n    # And then again move the right pointer until the left pointer and right pointer are equal\n    # Print out the left and right pointers\n    # If left pointer is smaller than right pointer, then find the closest pair\n    while left_pointer < right_pointer:\n        if numbers[left_pointer] < numbers[right_pointer]:\n            left_pointer += 1\n        elif numbers[left_pointer] > numbers[right_pointer]:\n            right_pointer -= 1\n        else:\n            break\n    if left_pointer < right_pointer:\n        left_pointer += 1\n    elif left_pointer > right_pointer:\n        right_pointer -= 1\n    else:\n        left_pointer += 1\n    return numbers[left_pointer - 1], numbers[right_pointer]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    num1 = num2 = None\n    if len(numbers) < 2:\n        raise ValueError(\"Invalid list of numbers\")\n    for n in numbers:\n        if not isinstance(n, (int, float)):\n            raise ValueError(\"Invalid list of numbers\")\n        if num1 is None or n > num1:\n            num1 = n\n        if num2 is None or n < num2:\n            num2 = n\n    return num1, num2\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_diff = float(\"inf\")\n    min_idx = None\n    min_idx_2 = None\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < min_diff:\n                min_diff = abs(numbers[i] - numbers[j])\n                min_idx = i\n                min_idx_2 = j\n    return numbers[min_idx], numbers[min_idx_2]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not numbers:\n        return None\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # first find the difference between the largest and smallest element\n    difference = numbers[-1] - numbers[0]\n    \n    # then find the index of the largest element\n    maximum_index = numbers.index(max(numbers))\n    \n    # find the index of the smallest element\n    minimum_index = numbers.index(min(numbers))\n    \n    # now find the closest values\n    if difference < 0:\n        first_smallest_value = min(numbers)\n        second_smallest_value = min(numbers[:maximum_index])\n        \n        # return the smallest values\n        return first_smallest_value, second_smallest_value\n    else:\n        first_largest_value = max(numbers)\n        second_largest_value = max(numbers[:minimum_index])\n        \n        # return the largest values\n        return first_largest_value, second_largest_value\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(numbers) >= 2, 'Input list must contain at least two numbers.'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    smallest_difference = abs(numbers[0] - numbers[1])\n    closest_pair_1 = numbers[0]\n    closest_pair_2 = numbers[0]\n    for number in numbers:\n        diff = abs(numbers[0] - number)\n        if diff < smallest_difference:\n            smallest_difference = diff\n            closest_pair_1 = number\n        if diff == smallest_difference:\n            if number < closest_pair_1:\n                closest_pair_1 = number\n            elif number > closest_pair_2:\n                closest_pair_2 = number\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    smallest_difference = 1_000_000_000_000_000_000_000_000\n    smallest_index = None\n    for index in range(len(numbers) - 1):\n        difference = numbers[index + 1] - numbers[index]\n        if difference < smallest_difference:\n            smallest_difference = difference\n            smallest_index = index\n    return numbers[smallest_index], numbers[smallest_index + 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    numbers.sort()\n    min_n = numbers[0]\n    max_n = numbers[-1]\n    return [(min_n + max_n)/2 for _ in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    numbers.sort()\n    midpoint = (numbers[-1] - numbers[0]) / 2\n    new_list = []\n    for n in numbers:\n        if n > midpoint:\n            new_list.append(n - midpoint)\n        else:\n            new_list.append(n + midpoint)\n    return new_list\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    min_value = min(numbers)\n    max_value = max(numbers)\n    if min_value == max_value:\n        raise ValueError('The smallest and largest values cannot be the same')\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # We divide the list by its largest value (i.e. the maximum value) to normalize\n    # the list to the range (0, 1)\n    # We then subtract that value from the list\n    max_value = max(numbers)\n    new_list = [num / max_value for num in numbers]\n    return [x - max_value for x in new_list]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Calculate the min and max values from the numbers\n    min_num = min(numbers)\n    max_num = max(numbers)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_element = max(numbers)\n    min_element = min(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_element) / (max_element - min_element)\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    rescale_factors = []\n    for number in numbers:\n        rescale_factors.append((number - min_number) / (max_number - min_number))\n    return rescale_factors\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a, b = numbers[0], numbers[1]\n    return [(a-b)/(a-min(a, b)) for a, b in zip(numbers, numbers[1:] + [numbers[0]])]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    diff = maximum - minimum\n    if diff == 0:\n        raise ValueError(\"Trying to rescale a vector with only one number\")\n    return [(x - minimum)/diff for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    min_number = numbers[0]\n    max_number = numbers[0]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [i for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int) or isinstance(x, float), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda i: isinstance(i, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [int(i) for i in values if isinstance(i, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(is_integer, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(is_integer, values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not string:\n        return 0\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert isinstance(string, str)\n    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 1\n    while n % i!= 0:\n        i = i + 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    largest = n\n    while n % 2 == 0:\n        n = n // 2\n    while n % 3 == 0:\n        n = n // 3\n    while n % 5 == 0:\n        n = n // 5\n    while n % 7 == 0:\n        n = n // 7\n    while n % 9 == 0:\n        n = n // 9\n    while n % 11 == 0:\n        n = n // 11\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(n,0,-1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    divisors.sort()\n    return divisors[-1]\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 1\n    while n % i!= 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n > 0, 'n must be a positive number.'\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # original\n    # factor = 2\n    # while factor * factor <= n:\n    #     while n % factor == 0:\n    #         n //= factor\n    #     factor += 1\n    # if n > 1:\n    #     factor = n\n    #     while factor * factor <= n:\n    #         while n % factor == 0:\n    #             n //= factor\n    #         factor += 1\n    #     if n > 1:\n    #         return []\n    # if n == 1:\n    #     return []\n    # else:\n    #     return [n]\n    # \u65b0\u7248\n    res = []\n    # factor = 2\n    while factor * factor <= n:\n        # print(factor)\n        while n % factor == 0:\n            n //= factor\n            res.append(factor)\n        factor += 1\n    if n > 1:\n        res.append(n)\n    return res\n    # return (res, n // res[-1])\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 1, \"Input number should be equal to the product of all factors\"\n    assert n % 2 == 0, \"Input number should be even\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n = n / 2\n    # print(f'{n}')\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n = n / i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n // i\n            result.append(i)\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n    \n    \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    divs = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            divs.append(i)\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        divs.append(n)\n    return divs\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factor_list = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n//i\n                factor_list.append(i)\n    return factor_list\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factors = []\n    while n > 1:\n        while n % 2 == 0:\n            n = n // 2\n            factors.append(2)\n        for i in range(3, int(n**0.5)+1, 2):\n            while n % i == 0:\n                n = n // i\n                factors.append(i)\n        if n > 2:\n            factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # ------------------------------------------------------------------------------------------------------------------\n    # 1)    Start with the naive approach.\n    # 2)    Let\u2019s say we have to factorize number 6 (\u201c6\u201d is the base case).\n    #     Instead of solving the problem in a way that requires some complex construction (nested loops, recursion,\n    #     etc.), we can decompose the task into simple cases.\n    #     Since we don\u2019t need to write complex code for each case, we can start with a naive approach.\n    #     If the number is divisible by any of the prime factors, the number becomes a factor.\n    #     Otherwise, we start with another factor and continue.\n    #     We have to start with the base case, which is the number itself.\n    #     The solution to this task is to recursively factorize and return result.\n    #     However, we don\u2019t need to write complex code for each case, so we can just call this naive approach.\n    #     It is simple and clear.\n    # 3)    Here we can write code to factorize the number.\n    #     We have to write a function factorize_with_naive_approach(n).\n    #     The function should receive an integer number and return a list with its factors.\n    #     First, factorize base case: the number itself.\n    #     Then, factorize all the factors of n and return a list with their counts.\n    # 4)    Finally, factorize_with_naive_approach(n) should return a list with its factors\n    #     In fact, this is the same function as factorize(n), but we can use it here to test the result.\n    # ------------------------------------------------------------------------------------------------------------------\n    \"\"\"\n    The naive approach:\n    \n    Start with the naive approach.\n    If the number is divisible by any of the prime factors, the number becomes a factor.\n    Otherwise, we start with another factor and continue.\n    We have to start with the base case, which is the number itself.\n    The solution to this task is to recursively factorize and return result.\n    However, we don\u2019t need to write complex code for each case, so we can just call this naive approach.\n    It is simple and clear.\n    \"\"\"\n    if n == 1:\n        return [1]\n    else:\n        return_list = []\n        for i in range(2, n):\n            if n % i == 0:\n                return_list.append(i)\n                return_list.append(n//i)\n                return_list.append(1)\n                return return_list\n        return_list.append(1)\n        return return_list\n    # ------------------------------------------------------------------------------------------------------------------\n    # 2)    Let\u2019s say we have to factorize number 6 (\u201c6\u201d is the base case).\n    #     Instead of solving the problem in a way that requires some complex construction (nested loops, recursion,\n    #     etc.), we can decompose the task into simple cases.\n    #     Since we don\u2019t need to write complex code for each case, we can start with a naive approach.\n    #     If the number is divisible by any of the prime factors, the number becomes a factor.\n    #     Otherwise, we start with another factor and continue.\n    #     We have to start with the base case, which is the number itself.\n    #     The solution to this task is to recursively factorize and return result.\n    #     However, we don\u2019t need to write complex code for each case, so we can just call this naive approach.\n    #     It is simple and clear.\n    # 3)    Here we can write code to factorize the number.\n    #     We have to write a function factorize_with_naive_approach(n).\n    #     The function should receive an integer number and return a list with its factors.\n    #     First, factorize base case: the number itself.\n    #     Then, factorize all the factors of n and return a list with their counts.\n    #     In fact, this is the same function as factorize(n), but we can use it here to test the result.\n    # ------------------------------------------------------------------------------------------------------------------\n    \n    \"\"\"\n    The naive approach:\n    \n    Start with the naive approach.\n    If the number is divisible by any of the prime factors, the number becomes a factor.\n    Otherwise, we start with another factor and continue.\n    We have to start with the base case, whic"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    # if n == 1:\n    #     return [1]\n    # factors = []\n    # while n % 2 == 0:\n    #     n = n // 2\n    #     factors.append(2)\n    # while n % 5 == 0:\n    #     n = n // 5\n    #     factors.append(5)\n    # while n % 7 == 0:\n    #     n = n // 7\n    #     factors.append(7)\n    # factors.append(n)\n    # return factors\n    \n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            while n % d == 0:\n                n = n // d\n            factors.append(d)\n        else:\n            d += 1\n    if n!= 1:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 0\n    while i < len(numbers):\n        if numbers.count(numbers[i]) > 1:\n            numbers.remove(numbers[i])\n        else:\n            i += 1\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    dup_nums = set()\n    new_nums = []\n    for num in numbers:\n        if num not in dup_nums:\n            new_nums.append(num)\n            dup_nums.add(num)\n    return new_nums\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    seen_items = []\n    for num in numbers:\n        if num not in seen_items:\n            seen_items.append(num)\n    return seen_items\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    seen = set()\n    result = []\n    for n in numbers:\n        if n in seen:\n            continue\n        seen.add(n)\n        result.append(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = set()\n    result = []\n    for n in numbers:\n        if n in s:\n            continue\n        result.append(n)\n        s.add(n)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return_list = []\n    for num in numbers:\n        if num not in return_list:\n            return_list.append(num)\n    return return_list\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    upper = string.upper()\n    lower = upper.lower()\n    return lower\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    upper = ''\n    lower = ''\n    for char in string:\n        if char.isupper():\n            upper += char.lower()\n        else:\n            lower += char.upper()\n    return upper+lower\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(c.upper() if c.islower() else c.lower() for c in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if string == \"\":\n    #     return \"\"\n    # if string[0].islower():\n    #     return string.upper() + string[1:].lower()\n    # else:\n    #     return string[0].lower() + string[1:].upper()\n    # print(\" \".join(map(lambda s: s.upper() if s.islower() else s.lower(), string)))\n    return \" \".join(map(lambda s: s.upper() if s.islower() else s.lower(), string))\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = \"\"\n    for word in strings:\n        result += word\n    return result\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    string = ''\n    for i in strings:\n        string += i\n    return string\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # You can split a string to obtain a list of words using the `split` function\n    # The `startswith` method is used to determine if the string starts with a given prefix\n    # The `append` function is used to add a word to a list of words\n    # The `in` function is used to determine if a list of words contains a word\n    # You can only use the `in` function inside a `for` loop\n    # You can't use `in` on an empty list\n    # You can't use a function on an empty list\n    # You can't use a string on an empty list\n    # Use the builtin `len` function to determine the length of a list\n    # Use the builtin `max` function to determine the length of the longest word in a list\n    # Use the builtin `min` function to determine the length of the shortest word in a list\n    # Use the `append` function to add an item to a list\n    # Use the `remove` function to remove an item from a list\n    # Use the `sort` function to sort a list of numbers\n    # Use the `sorted` function to sort a list of strings\n    # Use the `reverse` function to reverse the order of a list\n    # Use the `reverse` function to reverse the order of a list of strings\n    # Use the `clear` function to clear a list\n    # Use the `copy` function to copy a list of strings\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered = []\n    for s in strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x >= 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return l[::2]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = []\n    for el in l:\n        if el > 0:\n            res.append(el)\n    return res\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [i for i in l if i > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    positive = []\n    for i in range(len(l)):\n        if l[i] > 0:\n            positive.append(l[i])\n    return positive\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 1 or n == 0 or n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    if n == 2 or n == 3 or n == 5:\n        return True\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for divisor in range(2, n):\n        if n % divisor == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \"*** YOUR CODE HERE ***\"\n    # if number is divisible by 2\n    if n == 2:\n        return True\n    # if number is divisible by prime, and not divisible by any prime number\n    if n > 2 and n % 2 == 0:\n        return False\n    # if n is divisible by any prime number\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1 or n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    elif n <= 3:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return poly(xs, -1) / poly(xs, 2)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    for x in range(len(xs)):\n        if xs[x]!= 0:\n            i += 1\n    if i % 2 == 0:\n        return xs[0]\n    else:\n        return -xs[-1]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    roots = []\n    if len(xs) % 2 == 1:\n        return -1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xs = xs.copy()\n    xs.sort()\n    i = 0\n    while i < len(xs):\n        if xs[i] > 0:\n            break\n        i += 1\n    if xs[i] < 0:\n        print('there is no solution')\n        return\n    i = 0\n    while xs[i] > 0:\n        i += 1\n    while xs[i] < 0:\n        i += 1\n    if i == len(xs) - 1:\n        return -xs[i - 1] / xs[i]\n    return -xs[i - 1] / (xs[i] - xs[i - 1])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 0\n    if xs[i] == 0:\n        return i\n    i += 1\n    while xs[i] == 0:\n        i += 1\n        if i == len(xs):\n            break\n    return i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for x in range(0, len(xs)):\n        if xs[x] > 0:\n            return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not xs or len(xs) == 0:\n        raise ValueError\n    # check xs is even number of coefficients\n    if len(xs) % 2!= 0:\n        raise ValueError\n    # first try to find x that satisfies xs[i] * x^i = 0, i = 0..n-1\n    n = len(xs)\n    i = 0\n    while xs[i] == 0:\n        i += 1\n        if i >= n:\n            break\n    # if such x is found, return it\n    if i < n:\n        return xs[i]\n    # now try to find x that satisfies xs[i] * x^i = 0, i = n..2n-1\n    i = n - 1\n    while xs[i] == 0:\n        i -= 1\n        if i < 0:\n            break\n    # if such x is found, return it\n    if i >= 0:\n        return xs[i]\n    # if x is not found, raise exception\n    raise Exception\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for x in range(0, (len(xs) + 1) // 2):\n        # Check if given xs satisfies xs^x - 1 = 0.\n        # For even number of coeffients, this can't be true.\n        if x * (len(xs) - x) > 0 and xs[0] * x ** (len(xs) - x) - 1 == 0:\n            # Check if coeff(x) is positive.\n            if xs[x] >= 0:\n                return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0, \"xs must have even number of coefficients\"\n    assert all([coeff >= 0 for coeff in xs]), \"xs must be non-negative\"\n    x = 0\n    while (round(poly(xs, x), 6)!= 0):\n        x += 1\n    return x\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(l, key=lambda x: (x % 3!= 0, x))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = l.copy()\n    l.sort()\n    l_new = []\n    divisible_three = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            divisible_three.append(l[i])\n        else:\n            l_new.append(l[i])\n    divisible_three.sort()\n    for i in range(len(divisible_three)):\n        l_new.append(divisible_three[i])\n    return l_new\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            res.append(l[i])\n    for i in range(0, len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            res.append(l[i])\n    res = sorted(res)\n    return res\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(l, key=lambda x: x if not x % 3 else -1)"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l_sorted = []\n    l_sorted.append(l[0])\n    for i in range(1, len(l)):\n        if i % 3 == 0:\n            l_sorted.append(l[i])\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #create empty list l'\n    l_new = []\n    #create empty list l_c\n    l_c = []\n    #sort the list\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_new.append(l[i])\n        else:\n            l_c.append(l[i])\n    #sort the list of non divisible by three\n    l_c.sort()\n    #return a new list\n    return l_new + l_c\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    new_l = []\n    l_copy = l.copy()\n    for i in range(len(l)):\n        if i%3!= 0:\n            new_l.append(l_copy[i])\n    for i in range(len(l)):\n        if i%3 == 0:\n            l_copy[i] = min(new_l)\n            new_l.remove(min(new_l))\n    return l_copy\n    "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(l, key=lambda i: i if i % 3!= 0 else sorted(l, key=lambda j: j)[0])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert len(l) > 0, 'The list cannot be empty.'\n    assert isinstance(l, list), 'The list must be a list.'\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l1 = []\n    l2 = []\n    \n    for i in l:\n        if i%3 == 0:\n            l2.append(i)\n        else:\n            l1.append(i)\n    l1.sort()\n    return l1+l2\n    \n    \n    \n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(set(l), key=l.index)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set(l)))"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen = set()\n    result = []\n    for i in l:\n        if i in seen:\n            continue\n        seen.add(i)\n        result.append(i)\n    return result\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    m = l[0]\n    for num in l:\n        if num > m:\n            m = num\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Find maximum value\n    largest = -math.inf\n    for e in l:\n        if e > largest:\n            largest = e\n    return largest\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_value = l[0]\n    for i in l:\n        if max_value < i:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        raise ValueError(\"list is empty\")\n    max_val = l[0]\n    for val in l:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    maximum = 0\n    for i in range(len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return fizz_buzz_helper(n, 11, 13)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for num in range(1, n):\n        if num % 7 == 0:\n            count += 1\n        elif num % 11 == 0:\n            count += 1\n        elif num % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(1 for x in range(1, n) if x % 3 == 0 and x % 5 == 0 or x % 7 == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(n) is not int:\n        raise TypeError(\"n must be a positive integer\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    divisible_by_11 = divisible_by_13 = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            divisible_by_11 += 1\n        if i % 13 == 7:\n            divisible_by_13 += 1\n    return divisible_by_11, divisible_by_13"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #return fizz_buzz_helper(n, 3) + fizz_buzz_helper(n, 5)\n    return fizz_buzz_helper(n, 3) + fizz_buzz_helper(n, 5) + fizz_buzz_helper(n, 7)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return int(str(n)[-1] == \"7\") + int(str(n)[-1] == \"b\") * (int(str(n)[-1] == \"b\") * int(str(n)[-1] == \"i\"))\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0, \"n must be a positive integer.\"\n    divisible_by_11 = 0\n    divisible_by_13 = 0\n    for i in range(1, n+1):\n        if i % 11 == 0:\n            divisible_by_11 += 1\n        if i % 13 == 0:\n            divisible_by_13 += 1\n    return divisible_by_11 + divisible_by_13\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    count = 0\n    for i in range(n):\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([i for i in range(n) if i%11 == 7 or i%13 == 7])\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    evens = []\n    l = l.copy()\n    for i in range(0, len(l), 2):\n        evens.append(l[i])\n    l.sort()\n    evens.sort()\n    return evens + l[1::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even_indicies = list(range(0, len(l), 2))\n    odd_indicies = list(range(1, len(l), 2))\n    l_even = l[even_indicies]\n    l_odd = l[odd_indicies]\n    return l_odd + sorted(l_even)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l2 = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l2.append(l[i])\n    for i in range(len(l2)):\n        l2[i] = l[i+1]\n    l2 = sorted(l2)\n    return l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_copy = l.copy()\n    even_indicies = range(len(l))\n    even_values = l_copy[even_indicies]\n    odd_indicies = range(len(l))\n    odd_values = l_copy[odd_indicies]\n    even_indicies.sort()\n    for i in range(len(even_values)):\n        l[even_indicies[i]] = even_values[i]\n    l[even_indicies] = even_values\n    for i in range(len(odd_values)):\n        l[odd_indicies[i]] = odd_values[i]\n    l[odd_indicies] = odd_values\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    evens = []\n    l = l.copy()\n    evens_index = 0\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            evens.append(l[i])\n        else:\n            evens.append(l[evens_index])\n            evens_index += 1\n    return evens\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    i = 0\n    l = l.copy()\n    while i < len(l):\n        if l[i] % 2 == 0:\n            l.append(l[i])\n            l.remove(l[i])\n            i += 1\n        else:\n            i += 1\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_e = []\n    l_e_values = []\n    for i in range(0, len(l)):\n        if i % 2 == 0:\n            l_e_values.append(l[i])\n            l_e.append(l[i])\n    for j in range(0, len(l_e)):\n        for k in range(0, len(l_e)):\n            if l_e_values[j] == l_e[k]:\n                l_e_values[j] = l_e[k]\n    return l_e\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return l[::2] + l[1::2]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l = list(l)\n    even_indices = []\n    odd_indices = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(l[i])\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            continue\n        l[i], l[i + 1] = l[i + 1], l[i]\n    return l\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split encoded string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join groups.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    groups = s.split(\"@@\")\n    # decode groups.\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    groups = []\n    for i in range(len(s) // 3):\n        groups.append(s[3 * i:min((3 * i + 3), len(s))])\n    # make groups cyclic.\n    return \"\".join([g[1:] + g[0] for g in groups])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    groups = s.split(\"\".join([\"3\" for i in range((len(s) + 2) // 3)]))\n    # cycle each group, except last group\n    for i in range((len(groups) - 1)):\n        groups[i] = groups[i][1:] + groups[i][0]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s) % 3!= 0:\n        return \"Error, not cyclic\"\n    else:\n        # split string to groups. Each of length 3.\n        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n        # cycle elements in each group.\n        return \"\".join([groups[i][2] + groups[i][1] + groups[i][0] if len(groups[i]) == 3 else groups[i] for i in range(len(groups))])\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s[::-1]\n    return \"\".join([s[i * 3:i * 3 + 3] for i in range((len(s) + 3) // 3)])[::-1]\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fib_list = [0,1]\n    for i in range(2,n):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    if n>=6:\n        if is_prime(fib_list[-1]):\n            return fib_list[-1]\n        else:\n            return fib_list[-2]\n    else:\n        return fib_list[n]\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fib_numbers = [1, 2, 3, 5]\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n+1):\n            fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return prime_fib(n - 2) + prime_fib(n - 1)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    f1 = 2\n    f2 = 3\n    p = 5\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 1:\n        return 2\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    a, b, c = 0, 1, 2\n    while c < n:\n        c = a + b\n        a, b = b, c\n        if c % 2 == 0:\n            c = c * 3\n            c = c + 1\n    if c == n:\n        return c\n    return None\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    fib_n = fib_n_gen(n)\n    while True:\n        fib_p = fib_p_gen(n)\n        if fib_p!= 1:\n            break\n        n -= 1\n    return fib_n, fib_p\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n > 0\n    if n <= 1:\n        return n\n    primes = get_primes(n)\n    count = 0\n    for prime in primes:\n        if is_prime(prime):\n            count += 1\n        if count == 2:\n            return prime\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a, b = 2, 3\n    for i in range(n):\n        a, b = b, a+b\n        if a > b:\n            break\n        elif is_prime(a) and is_prime(b):\n            print(a)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Write your code here\n    seen = set()\n    for i in range(len(l)):\n        if l[i] in seen:\n            return False\n        seen.add(l[i])\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(l) < 3:\n        return False\n    \n    # Go through each element.\n    for i in range(len(l)-1):\n        # Go through the rest of the elements.\n        for j in range(i+1, len(l)):\n            # Check if the two elements sum to zero.\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # Hint: Try implementing the two_sum_in_list function\n    #        first\n    #         Create a dictionary {x : -1} to track seen numbers\n    #         loop through the list, checking to see if x + y == z\n    #         if found, return True\n    #         if not found, return False\n    #         then add x to seen\n    #         loop through the list again, checking if x + y == z\n    #         if found, return True\n    #         if not found, return False\n    #         then add y to seen\n    #         repeat\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) < 3:\n        return False\n    else:\n        l.sort()\n        for i in range(len(l)-2):\n            if l[i] > 0:\n                break\n            if l[i+1] > 0:\n                continue\n            if l[i+2] > 0:\n                return False\n            else:\n                return True"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(l) < 3:\n        return False\n    hash_table = {}\n    for i in l:\n        if i in hash_table:\n            hash_table[i] += 1\n        else:\n            hash_table[i] = 1\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) < 3:\n        return False\n    l = set(l)\n    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0 and i!= j and i!= k and j!= k:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # dict = {}\n    for x in l:\n        if x * 3 in l:\n            if x * 3 in dict:\n                dict[x * 3] += 1\n            else:\n                dict[x * 3] = 1\n    for x in dict:\n        if dict[x] == 3:\n            return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) < 3:\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(l)\n    if n == 0:\n        return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Count how many collisions the cars make\n    num_collisions = 0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if (i + j) >= n: break\n            if distance(car_positions[i], car_positions[j]) <= 10:\n                collisions += 1\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, 'Please enter a positive integer value for n.'\n    total_collisions = 0\n    for x in range(1, n+1):\n        for y in range(1, n):\n            if (x * abs(y)) >= n:\n                break\n            if x < y:\n                total_collisions += 1\n    return total_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n >= 2\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return car_race_collision(n - 1) + car_race_collision(n - 1)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #--- My code here ---\n    return\n    #return n\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    delta_x = 0.0\n    delta_y = 0.0\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return None\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(map(lambda x: x+1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for index, item in enumerate(l):\n        result.append(item + 1)\n    return result\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(l)\n    for i in range(n):\n        l[i] += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 1\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert isinstance(l, list), 'l must be of type list'\n    new_list = []\n    for i in range(len(l)):\n        new_list.append(l[i] + 1)\n    return new_list\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(map(lambda x: x + 1, l))\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)-1, -1, -1):\n        if l[i] == 10:\n            l[i] = 1\n        else:\n            l[i] += 1\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                count += 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = len(l)\n    if n < 2:\n        return False\n    for i in range(n):\n        if sum(l[:i]) + sum(l[i+1:]) == 0:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pairs_sum_to_zero_helper(l, set(), 0, {})\n    return True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l = list(l)\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    # if the length of the list is 2:\n    if len(l) == 2:\n        # if the pair (l[0], l[1]) is the sum of 0 and l[0]:\n        if l[0] == l[1]:\n            # return True\n            return True\n        # else:\n        else:\n            # return False\n            return False\n    # if the length of the list is 3:\n    elif len(l) == 3:\n        # if the pair (l[0], l[1]) is the sum of 0 and l[0]:\n        if l[0] == l[1]:\n            # return True\n            return True\n        # if the pair (l[1], l[2]) is the sum of 0 and l[1]:\n        if l[1] == l[2]:\n            # return True\n            return True\n        # else:\n        else:\n            # return False\n            return False\n    # if the length of the list is 4:\n    elif len(l) == 4:\n        # if the pair (l[0], l[1]) is the sum of 0 and l[0]:\n        if l[0] == l[1]:\n            # return True\n            return True\n        # if the pair (l[1], l[2]) is the sum of 0 and l[1]:\n        if l[1] == l[2]:\n            # return True\n            return True\n        # if the pair (l[2], l[3]) is the sum of 0 and l[2]:\n        if l[2] == l[3]:\n            # return True\n            return True\n        # else:\n        else:\n            # return False\n            return False\n    # if the length of the list is 5:\n    elif len(l) == 5:\n        # if the pair (l[0], l[1]) is the sum of 0 and l[0]:\n        if l[0] == l[1]:\n            # return True\n            return True\n        # if the pair (l[1], l[2]) is the sum of 0 and l[1]:\n        if l[1] == l[2]:\n            # return True\n            return True\n        # if the pair (l[2], l[3]) is the sum of 0 and l[2]:\n        if l[2] == l[3]:\n            # return True\n            return True\n        # if the pair (l[3], l[4]) is the sum of 0 and l[3]:\n        if l[3] == l[4]:\n            # return True\n            return True\n        # else:\n        else:\n            # return False\n            return False\n    # if the length of the list is 6:\n    elif len(l) == 6:\n        # if the pair (l[0], l[1]) is the sum of 0 and l[0]:\n        if l[0] == l[1]:\n            # return True\n            return True\n        # if the pair (l[1], l[2]) is the sum of 0 and l[1]:\n        if l[1] == l[2]:\n            # return True\n            return True\n        # if the pair (l[2], l[3]) is the sum of 0 and l[2]:\n        if l[2] == l[3]:\n            # return True\n            return True\n        # if the pair (l[3], l[4]) is the sum of 0 and l[3]:\n        if l[3] == l[4]:\n            # return True\n            return True\n        # if the pair (l[4], l[5]) is the sum of 0 and l[4]:\n        if l[4] == l[5]:\n            # return True\n            return True\n        # else:\n        else:\n            # return False\n            return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    my_set = set()\n    for num in l:\n        my_set.add(num)\n        if -num in my_set:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Write your code here.\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n    \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # define some constants\n    base_10 = '0123456789'\n    # define some constants\n    base_10 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    # convert to list\n    x_as_list = list(str(x))\n    # loop through\n    for i in range(len(x_as_list)):\n        # check if character is in base_10\n        if x_as_list[i] in base_10:\n            # if yes, convert\n            x_as_list[i] = str(base_10.index(x_as_list[i]))\n    # remove leading zeros\n    while x_as_list[0] == '0':\n        x_as_list.pop(0)\n    # return number\n    return ''.join(x_as_list)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string_num = str(x)\n    new_string = \"\"\n    for digit in string_num:\n        new_string += str(base**(len(string_num)-1))\n        new_string += digit\n    return new_string\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = \"\"\n    if x < base:\n        return result\n    while x >= base:\n        result = str(x % base) + result\n        x = x // base\n    return result\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    digits = {\n        0: '0',\n        1: '1',\n        2: '2',\n        3: '3',\n        4: '4',\n        5: '5',\n        6: '6',\n        7: '7',\n        8: '8',\n        9: '9',\n    }\n    if not isinstance(base, int):\n        raise TypeError(\"base must be an integer\")\n    if base not in range(10):\n        raise ValueError(\"base must be less than 10\")\n    string = \"\"\n    while x > 0:\n        string = digits[x % base] + string\n        x //= base\n    return string\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x >= 10:\n        return change_base(int(x/base), base) + str(x%base)\n    else:\n        return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = int(x)\n    q = n // base\n    r = n % base\n    s = \"\"\n    while q:\n        s = s + str(q % 2)\n        q = q // 2\n    s = s + str(r)\n    return s\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert base in (2, 3, 4)\n    if base == 3:\n        return str(int(str(x)[0] + str(x)[1:]))\n    elif base == 2:\n        return str(x)\n    else:\n        return str(int(str(x)[0] + str(x)[1:]))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x < base:\n        return str(x)\n    elif x == base:\n        return '1'\n    return change_base(x//base, base) + str(x % base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if x == 0:\n        return str(x)\n    if x >= 10:\n        return change_base(x // base, base) + str(x % base)\n    else:\n        return str(x)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    if x < base:\n        return digits[x]\n    else:\n        return change_base(x // base, base) + digits[x % base]\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    area = a * h / 2\n    print(\"Triangle area:\", area)\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return h * (a ** 2 / 2)\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    area = 0.5 * a * h\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 0.5*a*h\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def fib(n, fib0, fib1):\n        if n < 0:\n            return\n        if n == 0:\n            return fib0\n        if n == 1:\n            return fib1\n        return fib(n - 1, fib1, fib0 + fib1)\n    return fib(n, 0, 1)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 1:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0 or n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 2:\n        return n\n    return fib4(n - 1) + fib4(n - 2)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(l)\n    if n < 1:\n        raise ValueError(\"median requires at least one element\")\n    if n == 1:\n        return l[0]\n    sorted_l = sorted(l)\n    index = n//2\n    if n % 2 == 0:\n        return sorted_l[index-1] + sorted_l[index] / 2\n    else:\n        return sorted_l[index]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l.sort()\n    if len(l) % 2 == 0:\n        return (l[(len(l)//2)-1] + l[len(l)//2])/2\n    else:\n        return l[len(l)//2]"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert l!= []\n    l.sort()\n    if len(l) == 0:\n        raise Exception(\"No elements\")\n    if len(l) == 1:\n        return l[0]\n    if len(l) % 2 == 0:\n        return (l[int(len(l)/2)] + l[int(len(l)/2 - 1)]) / 2\n    else:\n        return l[int(len(l)/2)]\n    \ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    2.5\n    >>> mean([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    assert l!= []\n    total = 0\n    for item in l:\n        total += item\n    return total / len(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l = sorted(l)\n    size = len(l)\n    if size % 2 == 0:\n        return (l[size // 2] + l[size // 2 - 1]) / 2\n    else:\n        return l[(size - 1) // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # In case l is empty\n    if not l:\n        raise ValueError('Median not defined for empty list')\n    # Sort l\n    l = sorted(l)\n    # Return median\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[(len(l)-1)//2]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) % 2 == 0:\n        return _median_of_2(l)\n    else:\n        return _median_of_2(l[0:len(l) - 1])\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(l)\n    # smallest = 0\n    # largest = n-1\n    # if n % 2 == 1:\n    #     return l[n//2]\n    # else:\n    #     return (l[n//2] + l[n//2 - 1])/2\n    # return sorted(l)[n//2]\n    l = sorted(l)\n    print(l)\n    # if n % 2 == 1:\n    #     return l[n//2]\n    # else:\n    #     return (l[n//2] + l[n//2 - 1])/2\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # FIXME:\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1])/2.0\n    else:\n        return l[len(l)//2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(l)\n    if n == 0:\n        raise ValueError(\"list is empty\")\n    elif n % 2 == 1:\n        return sorted(l)[n//2]\n    else:\n        return sum(sorted(l)[n//2-1:n//2+1])/2\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(text) <= 1:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # we must make sure that we don't have anything other than alphanumeric\n    text = ''.join(filter(str.isalnum, text))\n    \n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    text_len = len(text)\n    if text_len <= 1:\n        return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    text = text.strip().lower()\n    return text == reverse(text)\n    \n    \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    text = text.lower()\n    text = ''.join(filter(str.isalnum, text))\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if text == text[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if text == '':\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert p > 0, 'p must be positive'\n    while n >= p:\n        n, r = divmod(n, p)\n        assert r == 0,'modulo operation is buggy: {} / {} = {}'.format(n, p, r)\n    return n\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (n % p) * (p - 1)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if p == 0:\n        return 1\n    if p == 1:\n        return 0\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % p == 0:\n        return 0\n    else:\n        return modp(n, p-1)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (n % p) * p + p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(ch for ch in text if ch not in vowels)\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 0\n    vowels = 'aeiou'\n    while i < len(text):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n            i = 0\n        i += 1\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #replace vowels in text with empty space\n    for vowel in \"aeiouAEIOU\":\n        text = text.replace(vowel,'')\n    #replace remaining vowels with empty space\n    for vowel in \"AEIOU\":\n        text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if vowel in text:\n            return text.replace(vowel,'')\n        else:\n            continue\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new_text = \"\"\n    for i in text:\n        if i not in \"aeiouAEIOU\":\n            new_text += i\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Converting text to lowercase and removing whitespaces.\n    # Then lowercase letters and vowels,\n    # Then join them back and return it.\n    text = text.lower()\n    text = text.strip()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    text = ''.join([x for x in text if not x in vowels])\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_text = ''\n    for i in text:\n        if i in \"aeiouAEIOU\":\n            new_text +=''\n        else:\n            new_text += i\n    return new_text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    no_vowels = \"\"\n    for c in text:\n        if c.lower() not in \"aeiouAEIOU\":\n            no_vowels += c\n    return no_vowels\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    no_vowel = ''\n    for l in text:\n        if l not in 'aeiouAEIOU':\n            no_vowel += l\n    return no_vowel\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. FINE SPLIT!\\n\")"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiou\"\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for number in l:\n        if number >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for item in l:\n        if item <= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for item in l:\n        if item >= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n    \ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    >>> subtract(2, 3)\n    -1\n    >>> subtract(5, 7)\n    -2\n    \"\"\"\n    return x - y\n    \ndef divide(x: int, y: int):\n    \"\"\"Divide two numbers x and y\n    >>> divide(2, 3)\n    0.6666666666666666\n    >>> divide(5, 7)\n    0.4285714285714286\n    \"\"\"\n    return x / y\n    \ndef multiply(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    210\n    \"\"\"\n    return x * y\n    \ndef square(x: int):\n    \"\"\"Square a number x\n    >>> square(2)\n    4\n    >>> square(5)\n    25\n    \"\"\"\n    return x ** 2\n    \ndef cube(x: int):\n    \"\"\"Cube a number x\n    >>> cube(2)\n    8\n    >>> cube(5)\n    125\n    \"\"\"\n    return x ** 3\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return all([s0.count(ch) == s1.count(ch) for ch in s0])\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s0 == s1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    count = {}\n    for char in s0:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in s1:\n        if char in count:\n            count[char] -= 1\n        else:\n            return False\n    for k in count:\n        if count[k]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s0_len = len(s0)\n    s1_len = len(s1)\n    for i in range(s0_len):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return all(c in s0 for c in s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return sorted(s0) == sorted(s1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n >= 1, \"n must be an integer > 0\"\n    if n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n >= 1\n    if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert brackets[0] == \"<\" and brackets[-1] == \">\"\n    left = 0\n    while left < len(brackets):\n        if brackets[left]!= \"<\":\n            return False\n        right = left\n        while right < len(brackets) - 1 and brackets[right + 1]!= \">\":\n            right += 1\n        if right == len(brackets) - 1:\n            return False\n        else:\n            left = right + 2\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for b in brackets:\n        if b == \">\":\n            count += 1\n        elif b == \"<\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    bracket_stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            bracket_stack.append('>')\n        elif bracket == '>':\n            if bracket_stack == []:\n                return False\n            bracket_stack.pop()\n        else:\n            return False\n    return bracket_stack == []\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while True:\n        if (brackets.count(\"<\") == brackets.count(\">\")):\n            return True\n        if (brackets.count(\"<\") > brackets.count(\">\")):\n            brackets = brackets.replace(\"<\", \"\", 1)\n        else:\n            brackets = brackets.replace(\">\", \"\", 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert brackets[0] == \"<\" and brackets[-1] == \">\"\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        else:\n            assert c == \">\"\n            if len(stack) > 0:\n                assert stack[-1] == \"<\"\n                stack.pop()\n            else:\n                return False\n    return False if len(stack) > 0 else True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    opening_brackets = list(brackets)\n    for i in range(len(opening_brackets)):\n        if opening_brackets[i] == \"<\":\n            if i!= len(opening_brackets) - 1:\n                if opening_brackets[i+1]!= \">\":\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    cbrackets = set(brackets)\n    correct = len(cbrackets) == len(set(brackets))\n    return correct\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    brackets = list(brackets)\n    for i in range(len(brackets)):\n        if brackets[i]!= '<' and brackets[i]!= '>':\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    bracket_stack = Stack()\n    bracket_match = {'<': '>', '{': '}', '(': ')'}\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            count += 1\n        elif l[i] < l[i + 1]:\n            count -= 1\n        if count!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(l)):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return True\n    return True"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    increasing = True\n    for i in range(len(l) - 1):\n        if l[i + 1] < l[i]:\n            increasing = False\n            break\n    if not increasing:\n        return False\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i + 1] > l[i]:\n            decreasing = False\n            break\n    if not decreasing:\n        return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(l)-1):\n        if l[i] >= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if l == []:\n        return False\n    last_element = l[0]\n    for i in l:\n        if i < last_element:\n            return False\n        last_element = i\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    is_increasing = True\n    is_decreasing = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            is_increasing = False\n        if l[i] < l[i+1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert l, \"Input cannot be empty.\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    prev = l[0]\n    for e in l:\n        if e < prev:\n            return False\n        prev = e\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Check if list is empty\n    if not l:\n        raise ValueError('List must have at least 1 element')\n    # Check if first element is > second element\n    if l[0] <= l[1]:\n        return False\n    # Check if last element is <= second to last element\n    if l[-2] <= l[-1]:\n        return False\n    # Check if every element is strictly increasing\n    for i in range(1, len(l)):\n        if l[i-1] > l[i]:\n            return False\n    # Check if every element is strictly decreasing\n    for i in range(1, len(l)):\n        if l[i-1] < l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s1 = set(l1)\n    s2 = set(l2)\n    return sorted(s1.intersection(s2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l1).intersection(l2))"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l3 = []\n    for i in l1:\n        if i in l2 and i not in l3:\n            l3.append(i)\n    return l3\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # l1, l2 = sorted(l1), sorted(l2)\n    # result = []\n    # for i in range(len(l1)):\n    #     for j in range(len(l2)):\n    #         if l1[i] == l2[j]:\n    #             result.append(l1[i])\n    # return result\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return l1[i:]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    common = set(l1).intersection(set(l2))\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(list(set(l1).intersection(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l3 = []\n    for x in l1:\n        if x in l2:\n            l3.append(x)\n    return sorted(l3)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not is_prime(n):\n        return n\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n + 1, 2):\n        if not is_prime(i):\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for prime in range(2, n):\n        if n % prime == 0:\n            return prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prime_factors = []\n    for candidate in range(1, n):\n        if n % candidate == 0:\n            prime_factors.append(candidate)\n    return max(prime_factors)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factor = 2\n    while factor <= n:\n        if is_prime(factor) and n % factor == 0:\n            return factor\n        else:\n            factor += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num_divisor = 2\n    while n % num_divisor!= 0:\n        num_divisor += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    largest = 0\n    for i in range(2, n):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    if n > 1:\n        largest = n\n    return largest\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    for x in range(1, n+1):\n        sum += x\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for num in range(1, n+1):\n        total += num\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for num in range(1,n+1):\n        total += num\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 1:\n        return None\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(range(1, n + 1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # print(f\"Sum of numbers from 1 to {n}: {n}\")\n    return n*(n+1) // 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    openers = set(\"([\" + \"\".join(MAP_BRACKETS.keys()) + \"]\")\n    closers = set(\"()\" + \"\".join(MAP_BRACKETS.keys()))\n    stack = []\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count_open = 0\n    count_close = 0\n    for ch in brackets:\n        if ch == \"(\":\n            count_open += 1\n        elif ch == \")\":\n            count_close += 1\n    return count_close == count_open\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    bracket_dict = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for char in brackets:\n        if char in bracket_dict:\n            if char in stack:\n                return False\n            else:\n                stack.append(bracket_dict[char])\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    match = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            match.append(brackets[i])\n        else:\n            if len(match) == 0:\n                return False\n            match.pop()\n    return len(match) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    opening_brackets = []\n    for b in brackets:\n        if b == \"(\":\n            opening_brackets.append(b)\n        else:\n            try:\n                opening_brackets.pop()\n            except IndexError:\n                return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert brackets, \"Must not be empty string\"\n    # could be a single character:\n    if len(brackets) == 1:\n        if brackets!= \")\":\n            return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = Stack()\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            stack.push(brackets[i])\n        else:\n            if stack.is_empty():\n                return False\n            else:\n                stack.pop()\n    return stack.is_empty()\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # we can start with the assumption that there are no mistakes\n    correct = True\n    # we can assume that brackets will be valid\n    for i in range(0, len(brackets), 2):\n        if brackets[i] == \")\":\n            correct = False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    brackets = brackets.replace(\"(\",\"\")\n    brackets = brackets.replace(\")\",\"\")\n    brackets = brackets.split(\" \")\n    brackets_dict = {}\n    for i in brackets:\n        if i in brackets_dict.keys():\n            brackets_dict[i] += 1\n        else:\n            brackets_dict[i] = 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    xs = deepcopy(xs)\n    i = 1\n    while i < len(xs):\n        xs[i] = xs[i] * i\n        i += 1\n    return xs\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [1 if i==0 else 0 for i in xs]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Make a copy of xs\n    xs_copy = xs[:]\n    # Make a new list that will contain d/dx(xs)\n    dxs_dx = []\n    # Calculate d/dx for each x in xs_copy\n    for x in range(len(xs_copy)):\n        # Calculate each of d/dx\n        dxs_dx.append(xs_copy[x] * (x + 1))\n    return dxs_dx\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(xs) == 1:\n        return [1]\n    ret = []\n    for i in range(1, len(xs)):\n        ret.append(xs[i] * i)\n    return ret\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    derivative_list = []\n    for x in range(1, len(xs)):\n        derivative_list.append((xs[x] * x) - (xs[x - 1] * x))\n    return derivative_list\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = [0, 0, 0]\n    for i in range(1, len(xs)):\n        res[i] = i * xs[i]\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    deriv = []\n    deriv.append(1)\n    for i in range(len(xs) - 1):\n        deriv.append(xs[i + 1] * deriv[i])\n    return deriv\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(xs) >= 1, \"Cannot calculate derivative for polynomial without coefficient list.\"\n    return [xs[i+1] + xs[i+2] * xs[i] for i in range(len(xs)-1)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    deriv = []\n    for i in range(len(xs) - 1):\n        deriv.append(xs[i + 1] * xs[i])\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(map(lambda x: x + 2, xs[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    fibseq = [0,1]\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            fibseq.append(fibseq[i-1] + fibseq[i-2])\n        else:\n            fibseq.append(fibseq[i-1] + fibseq[i-2])\n    return fibseq[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    fibfib = {0:0,1:1,2:1}\n    for i in range(3,n+1):\n        fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3]\n    return fibfib[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # state = (0, 0, 1)\n    # if n <= 3:\n    #     return state[n]\n    # else:\n    #     a, b, c = state\n    #     state = (b, c, a + b + c)\n    #     return state[n]\n    state = (0, 0, 1)\n    if n <= 3:\n        return state[n]\n    else:\n        a, b, c = state\n        state = (b, c, a + b + c)\n        return state[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    fibfib = [0,1]\n    while len(fibfib) < n:\n        fibfib.append(fibfib[len(fibfib)-1] + fibfib[len(fibfib)-2])\n    return fibfib[n-1]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = 0\n    for char in s:\n        if char in \"aeiou\":\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    cnt = 0\n    for i in range(len(s)):\n        if s[i] in ('a', 'e', 'i', 'o', 'u'):\n            if i == len(s) - 1:\n                cnt += 1\n            else:\n                if s[i+1] in ('a', 'e', 'i', 'o', 'u'):\n                    cnt += 1\n    return cnt\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # The length of the string is only greater than or equal to 1\n    assert len(s) >= 1\n    # The length of the string is at least 2\n    assert len(s) >= 2\n    # The string is always uppercase\n    assert s.isupper()\n    # The string is always lowercase\n    assert s.islower()\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    vowels = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1, 'y':1}\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] in vowels and i == len(s)-1:\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len([ch for ch in s if ch in 'aeiouy'])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 0\n    vowels += s.count(\"a\")\n    vowels += s.count(\"e\")\n    vowels += s.count(\"i\")\n    vowels += s.count(\"o\")\n    vowels += s.count(\"u\")\n    vowels += s.count(\"y\")\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert type(s) == str, \"Wrong type\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    return sum(1 for ch in s if ch in vowels)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouy':\n            count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = \"aeiouy\"\n    cnt = 0\n    for i in s:\n        if i in vowels:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for char in s:\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" or char == \"y\":\n            count += 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = \"\"\n    for i in range(len(x)):\n        if i - shift >= 0:\n            result += x[i - shift]\n    if len(x) < len(result):\n        result = result[::-1]\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([x[(i + shift) % len(x)] for i in range(len(x))])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = \"\".join(str(int(n)) for n in x)[shift:] + str(int(x))[:shift]\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = str(x)\n    if len(x) < shift:\n        x = x[::-1]\n        return x + x[:shift][::-1]\n    else:\n        return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    shifted = 0\n    shifted_string = \"\"\n    while shifted <= shift:\n        shifted += 1\n        shifted_string = str(x)[-shifted:] + shifted_string\n    return shifted_string\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in range(len(str(x))):\n        res = res + str(x)[(i+shift)%len(str(x))]\n    return res\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = \"\"\n    shift %= len(str(x))\n    if shift > 0:\n        for i in range(len(str(x))):\n            res += str(x)[(i + shift) % len(str(x))]\n    else:\n        for i in range(len(str(x))):\n            res += str(x)[(i + shift) % len(str(x))]\n    return res\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    digits = str(x)\n    length = len(digits)\n    if length >= shift:\n        shifted_digits = digits[shift:] + digits[:shift]\n    else:\n        shifted_digits = digits[length-shift:] + digits[:length-shift]\n    return shifted_digits\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if shift > len(str(x)):\n        return str(x)[len(str(x)):-shift] + str(x)[:len(str(x))-shift]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if shift > len(str(x)):\n        return reversed(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your Code Here\n    return sum([ord(i) for i in s])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([ord(x) for x in s.upper()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 0\n    for char in s:\n        total += ord(char)\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(map(lambda c: ord(c.upper()), s))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for c in s:\n        sum += ord(c) - ord('A') + 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(ord(char) for char in s.upper() if char.isdigit())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([ord(i) for i in s if ord(i) < 58])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([ord(x) for x in s if x.isupper()])\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #your code here\n    \n    a = s.split()\n    f = int(a[0])\n    o = int(a[1])\n    if (f+o)%2 == 0:\n        m = (f+o)//2\n    else:\n        m = (f+o+1)//2\n    return m\n    \n    \nfruit_distribution(\"100 apples and 1 oranges\",120)"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    apples = s.split(\" \")\n    apples_total = 0\n    oranges = s.split(\" \")\n    oranges_total = 0\n    mangoes = s.split(\" \")\n    mangoes_total = 0\n    for i in range(len(apples)):\n        if(apples[i]!= \"\"):\n            apples_total += int(apples[i])\n    for j in range(len(oranges)):\n        if(oranges[j]!= \"\"):\n            oranges_total += int(oranges[j])\n    for k in range(len(mangoes)):\n        if(mangoes[k]!= \"\"):\n            mangoes_total += int(mangoes[k])\n    return apples_total - oranges_total - mangoes_total"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return(s.count('mango'))"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    number_of_apples = 0\n    number_of_oranges = 0\n    count_mango = 0\n    while s!= 0:\n        if s[0] == \"a\" or s[0] == \"o\" or s[0] == \"m\":\n            if s[0] == \"a\":\n                number_of_apples += 1\n            elif s[0] == \"o\":\n                number_of_oranges += 1\n            elif s[0] == \"m\":\n                count_mango += 1\n            s = s[1:]\n        else:\n            s = s[1:]\n    return number_of_apples + number_of_oranges - count_mango\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s.count(\"mango\")"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = s.split(\" \")\n    n = n.split(\" \")\n    res = 0\n    for i in range(len(s)):\n        if int(s[i]) < int(n[i]):\n            res += int(s[i])\n            break\n        else:\n            res += int(n[i])\n    return res - int(s[i])\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return n-s.count('o')-s.count('a')\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    m=0\n    for i in s:\n        if i =='2' or i =='3':\n            m+=int(i)\n    return m-"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    m = s.split()\n    return int(n)-int(m[0])-int(m[1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) == 0: return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if not arr:\n    #     return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    arr.sort()\n    if arr[0] % 2 == 0:\n        return arr[:2]\n    return arr[:1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_values = filter(lambda x: x % 2 == 0, arr)\n    if not even_values:\n        return []\n    else:\n        return sorted([x for x in arr if x % 2 == 0])[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if not arr:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vals, indices = [], []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Step 1 - sort the array in ascending order\n    arr.sort()\n    print(f\"Input: {arr}\")\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    arr = sorted(arr)\n    # return (arr[0], arr.index(arr[0]))\n    return arr[0]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_vals = sorted(filter(lambda x: x % 2 == 0, arr))\n    return even_vals[0] if even_vals else []\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    greatest = 0\n    greatest_element = 0\n    for element in lst:\n        count = lst.count(element)\n        if count > greatest:\n            greatest = count\n            greatest_element = element\n    return(greatest_element)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # key: keep track of the frequency of each number\n    # value: it's number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == None or lst == []:\n        return -1\n    lst.sort()\n    if len(lst) == 0:\n        return -1\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] >= 0:\n            count += 1\n        if count >= lst[i]:\n            return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if lst == [] or len(lst) == 1:\n        return -1\n    else:\n        max_count = 0\n        max_num = 0\n        for num in lst:\n            if max_count == 0:\n                max_count = num\n                max_num = num\n            else:\n                if max_count < num:\n                    max_count = num\n                    max_num = num\n        return max_num\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = 0\n    m = 0\n    for i in lst:\n        if i > 0:\n            n += 1\n    if n == 0:\n        return -1\n    for i in lst:\n        if i == 0:\n            continue\n        if i > m:\n            m = i\n    return m"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if lst == []:\n        return -1\n    else:\n        max = lst[0]\n        max_freq = 1\n        for i in range(1, len(lst)):\n            if lst[i] > max and lst[i] > 0 and max_freq < lst[i]:\n                max_freq = lst[i]\n                max = lst[i]\n        return max\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    maxi = 0\n    for val in lst:\n        if val > 0 and val > maxi:\n            maxi = val\n    if maxi == 0:\n        return -1\n    else:\n        return maxi\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(lst):\n        if lst[i] > 0:\n            if lst[i] > i:\n                i = i + 1\n            else:\n                return -1\n        else:\n            i = i + 1\n    return lst[i]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #TODO:\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    if len(lst) == 0:\n        return -1\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return lst[i+1]\n    return -1\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if lst is empty, return empty list\n    if len(lst) == 0:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return []\n    else:\n        first = min(lst)\n        return [first] + strange_sort_list(list(filter(lambda x: x > first, lst)))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return lst\n    else:\n        lst_copy = lst[:]\n        lst_copy.sort()\n        if lst == lst_copy:\n            return lst\n        else:\n            return lst_copy"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    else:\n        for i in range(lst_len):\n            min_value = lst[i]\n            min_index = i\n            for j in range(i + 1, lst_len):\n                if lst[j] < min_value:\n                    min_value = lst[j]\n                    min_index = j\n            # swap\n            lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) == 0:\n        return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return lst\n    return strange_sort_list(sorted(lst, reverse=True)) + lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # We are going to use 2 pointers, the first one points to the minimum value,\n    # the second one points to the maximum value.\n    # We will have to switch the direction of pointer movement between both\n    # when we are going to move from the minimum to maximum.\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    min_index = 0\n    max_index = len(lst) - 1\n    for i in range(1, len(lst)):\n        if lst[i] < lst[min_index]:\n            min_index = i\n        elif lst[max_index] < lst[i]:\n            max_index = i\n    return sorted(lst[:min_index] + lst[max_index + 1:], reverse=True) + \\\n            sorted(lst[min_index + 1:max_index + 1]) + \\\n            sorted(lst[max_index + 1:])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # First time, reverse the list to show the\n    # numbers from minimum to maximum.\n    # It's a simple way to reverse a list,\n    # but it's not efficient.\n    if lst:\n        lst.sort(reverse=True)\n        return lst\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if(a + b > c and a + c > b and b + c > a):\n        return round((a * b * 0.5), 2)\n    else:\n        return -1"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return round(0.5 * (a + b + c), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Calculate area using Heron's formula\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    if area == 0:\n        print(\"This is not a valid triangle\")\n        return -1\n    else:\n        print(round(area, 2))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Input checking\n    if a == 0 or b == 0 or c == 0:\n        return -1\n    if a < 0 or b < 0 or c < 0:\n        return -1\n    if a > b + c:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a * b * 0.5), 2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b, 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        return round((a * b * (1/2)),2)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a + b < c:\n        return -1\n    if a + c < b:\n        return -1\n    if b + c < a:\n        return -1\n    \n    a = sqrt(a**2 + b**2)\n    b = sqrt(b**2 + c**2)\n    c = sqrt(c**2 + a**2)\n    \n    if round(a, 2) == round(b, 2) == round(c, 2):\n        return round(a*(b+c)/2, 2)\n    else:\n        return -1\n    \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b, c = sorted([a, b, c])\n    if a + b <= c or a + c <= b or c + b <= a:\n        return -1\n    # triangle area formula\n    return 0.5 * abs(a * b * c)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if a + b > c:\n    #     if a + c > b:\n    #         if b + c > a:\n    #             print(round((a + b + c) / 2, 2))\n    #     else:\n    #         print(-1)\n    # else:\n    #     print(-1)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return not q or (q==q[::-1] and sum(q)<=w)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = 0\n    for i in q:\n        s += i\n    return s <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def isBalanced(lst):\n        return lst == lst[::-1] and sum(lst) <= w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return True if len(q) <= w else (len(q) <= w and q[0] == q[-1] and sum(q) <= w)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if q==None or len(q)==0:\n        return False\n    if len(q)==1 and q[0]<=w:\n        return True\n    elif len(q)==2 and q[0]+q[1]<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Given a list, we can use the 'index' function to find the max.\n    # We can then use the palindrome function to check the list.\n    # If palindrome function returns True, then we can use'max' function to find the max.\n    if q == None:\n        return True\n    if palindrome(q) == True and max(q) <= w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return q[::]==sorted(q) and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #Solution\n    # only if it's balanced, the weight is < w. \n    if is_balanced(q) and sum(q) <= w:\n        return True \n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # is balanced\n    # is list, not string\n    # odd length\n    # all same number\n    # can be put in a set\n    #  x + y <= w\n    #  x + y > w\n    #  x * y < w\n    #  x * y > w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n        \ndef is_balanced(q):\n    '''\n    Write a function that checks whether a list is balanced (it is a palindromic list).\n    A list is considered balanced if the sum of all the elements of the list is equal to the length of the list.\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # This solution is pretty simple. We are going to keep track of the number of occurrences of each value.\n    # We can use this to compare if there are more than one count. If there is, we can just take the difference\n    # of the smallest count and the largest count.\n    counts = {}\n    for val in arr:\n        if val not in counts:\n            counts[val] = 1\n        else:\n            counts[val] += 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = sorted(arr)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def compare(arr):\n        for i in range(len(arr)):\n            if i!= len(arr) - 1:\n                if arr[i]!= arr[i+1]:\n                    return True\n        return False\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # sort the array\n    arr.sort()\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # O(n) time and space\n    counter = 1\n    curr_sum = 0\n    curr_max = 0\n    for i in range(len(arr)-1):\n        curr_sum += arr[i]\n        if i < len(arr)-2:\n            curr_max = max(curr_max, arr[i] + arr[i+1])\n        if curr_max >= counter:\n            counter = curr_max\n    return counter\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # We need to find the smallest number that needs to be changed\n    # we can do this by sorting and finding the second to last element of the sorted list\n    sorted_arr = sorted(arr)\n    print(sorted_arr)\n    return sorted_arr[-2]\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    seen = {0}\n    min_changes = 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr_len = len(arr)\n    i = arr_len - 1\n    while i > 0:\n        if arr[i]!= arr[~i]:\n            return i\n        i -= 1\n    return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ones_changes = 0\n    twos_changes = 0\n    ones_to_two = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ones_changes += 1\n            ones_to_two += 1\n        elif arr[i] == 2:\n            twos_changes += 1\n            ones_to_two += 1\n    if (ones_changes == 0):\n        return twos_changes\n    elif (twos_changes == 0):\n        return ones_changes\n    elif (twos_changes > ones_changes):\n        return ones_changes\n    else:\n        return twos_changes\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) == 1:\n        return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst1 = []\n    lst2 = []\n    for x in lst1:\n        if len(x) > len(lst2):\n            lst1.append(x)\n    for y in lst2:\n        if len(y) > len(lst1):\n            lst2.append(y)\n    if lst1 == [] or lst2 == []:\n        return lst1 if lst1 == [] else lst2\n    else:\n        return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst1 + lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) <= len(lst2[i]):\n            result.append(lst1[i])\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(lst1, list)\n    assert isinstance(lst2, list)\n    \n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst1) == 0:\n        return lst1\n    if len(lst2) == 0:\n        return lst2\n    if len(lst1) > len(lst2):\n        return lst1\n    return list(set(lst1) - set(lst2))\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(set(lst1) & set(lst2))\n    #lst = []\n    #for i in range(len(lst1)):\n        #for j in range(len(lst2)):\n            #if len(lst1[i]) < len(lst2[j]):\n                #break\n            #if len(lst1[i]) == len(lst2[j]) and lst1[i]!= lst2[j]:\n                #break\n        #else:\n            #lst.append(lst1[i])\n    #return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return lst1 + lst2 if len(lst1) < len(lst2) else lst2 + lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return lst1 if len(lst1) > len(lst2) else lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(100):\n        if i%2!=0 and a % 3 == 0 and is_prime(i) and is_prime(a/i):\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for x in range(2,100):\n        if x % 2 == 0 and x > 2 and x % 3 == 0:\n            continue\n        if a % x == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prime_a = []\n    for i in range(2, 100):\n        if is_prime(i):\n            prime_a.append(i)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    divisor = 2\n    while divisor <= 100:\n        if a % divisor == 0 and is_prime(divisor):\n            return True\n        divisor += 1\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a <= 100:\n        return False\n    for i in range(2, a//2):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    p = 2\n    q = 3\n    while p < 100:\n        if (a % p) == 0 and (a % q) == 0:\n            if p!= q:\n                return True\n            else:\n                return False\n        else:\n            p += 1\n            q += 1\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2,101):\n        if a % i == 0 and (a / i) % i!= 0:\n            return True\n        elif (a / i) % i == 0 and (a % i)!= 0:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a % 2 == 0 and a % 3 == 0\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(3,101,3):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return True if a%3==0 and a%5==0 else False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x**n==x"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x >= n:\n        return False\n    while x > n:\n        x = x * x\n    return x == n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # hint: keep exponent divisiblity test.\n    return n**x == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x ** int(n) == x\n    # do not change lines below\n    # check your work\n    # 0/1 points\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x == 1:\n        return True\n    if x == n:\n        return True\n    while x > 1:\n        if x % n == 0:\n            return True\n        x = x//n\n    return False"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return True if n**x == x else False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x**int(n)==x:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return True if x == int(x)**int(n) else False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x ** n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n**int(x) == x\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a*a*a == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (a**3) == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    for i in range(0,3):\n        for j in range(0,3):\n            for k in range(0,3):\n                if (i==0 and j==0 and k==0) or (i==1 and j==1 and k==1) or (i==2 and j==2 and k==2):\n                    if a==3*i*j*k:\n                        return True\n                    else:\n                        continue\n                else:\n                    continue\n    return False\n        \n    \n    \ndef istriangle(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a triangle of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    istriangle(1) ==> True\n    istriangle(2) ==> False\n    istriangle(-1) ==> True\n    istriangle(64) ==> False\n    istriangle(0) ==> True\n    istriangle(180) ==> False\n    '''\n    \n    for i in range(0,3):\n        for j in range(0,3):\n            if a==i*(i+1)*j:\n                return True\n            else:\n                continue\n    return False\n    \n    \ndef issquare(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a square of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    issquare(1) ==> True\n    issquare(2) ==> False\n    issquare(-1) ==> True\n    issquare(64) ==> False\n    issquare(0) ==> True\n    issquare(180) ==> False\n    '''\n    \n    for i in range(0,3):\n        for j in range(0,3):\n            if a==i*(i+1)*(i+2):\n                return True\n            else:\n                continue\n    return False\n    \n    \ndef find_root(a):\n    '''\n    Write a function that takes an integer a and returns the value\n    of this integer when it is written as the sum of squares\n    of its digits, so that the integer a is the sum of the squares\n    of the digits in its representation.\n    Note: you may assume the input is always valid.\n    Examples:\n    find_root(1) ==> 1\n    find_root(27) ==> 2\n    find_root(58) ==> 2\n    find_root(789) ==> 8\n    find_root(4058) ==> 8\n    find_root(12744) ==> 12\n    find_root(1697) ==> 16\n    find_root(6) ==> 3\n    find_root(90) ==> 7\n    find_root(19) ==> 2\n    find_root(64) ==> 6\n    find_root(0) ==> 0\n    find_root(180) ==> 2\n    '''\n    \n    return int(a**0.5)\n    \n    \ndef find_power_of_two(a):\n    '''\n    Write a function that takes an integer a and returns\n    the highest power of 2 that is less than or equal to a.\n    Note: you may assume the input is always valid.\n    Examples:\n    find_power_of_two(1) ==> 1\n    find_power_of_two(3) ==> 2\n    find_power_of_two(8) ==> 2\n    find_power_of_two(9) ==> 3\n    find_power_of_two(18) ==> 4\n    find_power_of_two(100) ==> 4\n    find_power_of_two(127) ==> 8\n    find_power_of_two(1000) ==> 8\n    find_power_of_two(1) ==> 1\n    find_power_of_two(2) ==> 2\n    find_power_of_two(4) ==> 2\n    find_power_of_two(8) ==> 2\n    find_power_of_two(16) ==> 2\n    find_power_of_two(32) ==> 2\n    find_power_of_two(64) ="
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a*a*a == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a**3 == a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a <= 0:\n        return True\n    if a ** 0.5 == int(a ** 0.5):\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a**3 == int(a**3)\n    \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num = num.upper()\n    l = 0\n    count = 0\n    for n in num:\n        l += 1\n        if n == 'B':\n            count += 1\n        if l == 3:\n            if n in 'ABCD':\n                count += 1\n            l = 0\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    return\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    num = num.upper()\n    digits = {}\n    for i in range(10):\n        digits[i] = 0\n    for i in range(len(num)):\n        if num[i] in digits:\n            digits[int(num[i])] += 1\n    sum = 0\n    for k in digits:\n        if k <= 9 and digits[k] == 1:\n            sum += 1\n        elif k >= 10 and digits[k] == 2:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    list_hex = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    count_primes = 0\n    for i in list_hex:\n        if i in num:\n            num = num.replace(i, \"\")\n        else:\n            continue\n    if not num:\n        return count_primes\n    else:\n        num = int(num, 16)\n        if isprime(num):\n            count_primes += 1\n        else:\n            while num!= 1:\n                if isprime(num):\n                    count_primes += 1\n                    break\n                num -= 1\n    return count_primes\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = 0\n    for i in range(len(num)):\n        if num[i] in 'ABCDEF':\n            res += 2\n        elif num[i] in '123456789':\n            res += 4\n        elif num[i] in 'ABCDEF0':\n            res += 5\n        elif num[i] == 'B':\n            res += 6\n        elif num[i] == 'D':\n            res += 7\n        elif num[i] == 'E':\n            res += 8\n    return res\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    num = num.upper()\n    p = 0\n    for i in num:\n        if i == 'B' or i == 'D':\n            p += 1\n    if p == 0:\n        p += 2\n    return p\n    # Your code here\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    ans = 0\n    num = str(num)\n    if len(num) < 7:\n        return ans\n    else:\n        for i in num:\n            if i == \"A\":\n                ans += 1\n            if i == \"B\":\n                ans += 1\n            if i == \"C\":\n                ans += 1\n            if i == \"D\":\n                ans += 1\n            if i == \"E\":\n                ans += 1\n            if i == \"F\":\n                ans += 1\n        return ans\n        \n        "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    hx = int(num, 16)\n    div = 1\n    while div <= hx:\n        if hx % div == 0:\n            return 0\n        div += 1\n    return 1\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # new_num = num.upper()\n    # lenght = len(num)\n    # a = len(num) - 1\n    # count = 0\n    # for i in range(lenght):\n    #     if int(new_num[i]) == 0 or int(new_num[i]) == 1:\n    #         count += 1\n    # print(count)\n    # if int(num) > 1:\n    #     if num[-1] == \"0\":\n    #         num = num[:-1]\n    #         count = count + 1\n    #     for i in range(lenght):\n    #         if num[i] == \"0\" or num[i] == \"1\":\n    #             count = count + 1\n    #     return count\n    # else:\n    #     return 0\n    # print(count)\n    a = num.upper()\n    b = 0\n    c = 0\n    if len(a) > 1:\n        for i in range(len(a)):\n            if a[i] == \"0\":\n                b = i\n                break\n    if len(a) > 1:\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == \"0\":\n                c = i\n                break\n    if len(a) == 1:\n        return 1\n    elif len(a) == 2 and a[0] == \"0\" and a[1] == \"0\":\n        return 0\n    elif len(a) == 2 and a[0] == \"0\" and a[1]!= \"0\":\n        return 1\n    else:\n        return (len(a)-b-c)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #result = 0\n    count = 0\n    for i in range(2,len(num)):\n        if is_prime(int(num[:i],16)) == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # INSERT YOUR CODE HERE\n    binary = ''\n    decimal = str(decimal)\n    for i in range(len(decimal)):\n        binary += str(decimal[i]) + 'db'\n    \n    binary = binary[:-2]\n    binary = binary + 'db'\n    binary = binary + 'db'\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary = bin(decimal)[2:] + binary\n        decimal = decimal // 2\n    \n    return \"db\" + binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    binary = \"\"\n    for i in range(10):\n        if decimal % 2 == 0:\n            binary = binary + \"0\"\n            decimal = decimal // 2\n        else:\n            binary = binary + \"1\"\n            decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    binary_string = \"\"\n    binary_list = []\n    i = 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return \"db\" + decimal_to_binary_helper(decimal)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"db\" + \"\".join(map(lambda x: str(int(x)), bin(decimal)[2:].zfill(7)))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    binary = []\n    while decimal >= 1:\n        decimal, remainder = divmod(decimal, 2)\n        binary.append(str(remainder))\n    binary.reverse()\n    return \"db\" + \"\".join(binary) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"db\" + \"db\" + \"db\" + \"db\" + \"db\" + \"db\" + \"db\" + str(bin(decimal)[2:].zfill(8))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"db\" + \"db\" * (decimal) + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join([str(x) for x in decimal_to_binary_recursive(decimal)[::-1]])\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return True\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([len(set(s[i:i+3])) == 3 for i in range(len(s)-2)]) >= 3\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # SOLUTION:\n    # Initialize an empty set\n    s_set = set()\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # print(s)\n    # print(s.isalpha())\n    # print(s.isalpha())\n    return True if s.isalpha() and len(s) >= 3 and sorted(s) == list(s) else False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    seen = {}\n    for letter in s:\n        if letter not in seen:\n            seen[letter] = True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if s.count(s[0]) == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s_set = set(s)\n    if len(s_set) < 3:\n        return False\n    for i in range(0, len(s)):\n        if i == len(s)-1 or i == len(s)-2:\n            return True\n        if s[i] == s[i+1]:\n            return False\n        if s[i+1] == s[i+2]:\n            return False\n    return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # loop through the string\n    # check if the string is length at least 3 and has at least 3 different consecutive letters\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s) < 3:\n        return False\n    if len(set(s))!= len(s):\n        return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen = set()\n    for i in range(len(s)):\n        if i == 0:\n            if s[i]!= s[i+1]:\n                return False\n            seen.add(s[i])\n        elif i == 1:\n            if s[i]!= s[i-1] and s[i]!= s[i+1]:\n                return False\n            if s[i]!= s[i-1]:\n                seen.add(s[i])\n        else:\n            if s[i]!= s[i-2] and s[i]!= s[i-1] and s[i]!= s[i+1]:\n                return False\n            if s[i] == s[i-2] or s[i] == s[i-1] or s[i] == s[i+1]:\n                seen.add(s[i])\n    return len(seen) >= 3\n    \nprint(is_happy(\"xyy\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"a\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"aabc\"))\nprint(is_happy(\"aabba\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"aaabc\"))\nprint(is_happy(\"aabbc\")"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(grades)):\n        if grades[i] <= 3.0:\n            grades[i] = 'A+'\n        elif grades[i] <= 3.3:\n            grades[i] = 'A'\n        elif grades[i] <= 3.7:\n            grades[i] = 'A-'\n        elif grades[i] <= 3.3:\n            grades[i] = 'B+'\n        elif grades[i] <= 3.0:\n            grades[i] = 'B'\n        elif grades[i] <= 3.3:\n            grades[i] = 'B-'\n        elif grades[i] <= 3.0:\n            grades[i] = 'C+'\n        elif grades[i] <= 2.7:\n            grades[i] = 'C'\n        elif grades[i] <= 2.3:\n            grades[i] = 'C-'\n        elif grades[i] <= 2.0:\n            grades[i] = 'D+'\n        elif grades[i] <= 1.7:\n            grades[i] = 'D'\n        elif grades[i] <= 1.3:\n            grades[i] = 'D-'\n        elif grades[i] <= 1.0:\n            grades[i] = 'E'\n        else:\n            grades[i] = 'F'\n    return grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F'])[grades]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    grades.sort(reverse=True)\n    letter_grades = []\n    for x in grades:\n        if x >= 4.0:\n            letter_grades.append('A+')\n        elif 3.7 <= x <= 4.0:\n            letter_grades.append('A')\n        elif 3.3 <= x <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 <= x <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 <= x <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 <= x <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 <= x <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 <= x <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 <= x <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 <= x <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 <= x <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 <= x <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    grades_letter = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    for i in grades:\n        if i < 3:\n            grades_letter.append(\"F\")\n        elif i < 3.7:\n            grades_letter.append(\"A\")\n        elif i < 3.8:\n            grades_letter.append(\"A-\")\n        elif i < 3.9:\n            grades_letter.append(\"B\")\n        elif i < 4:\n            grades_letter.append(\"B-\")\n        elif i < 4.1:\n            grades_letter.append(\"C\")\n        elif i < 4.2:\n            grades_letter.append(\"C-\")\n        elif i < 4.3:\n            grades_letter.append(\"D\")\n        elif i < 4.4:\n            grades_letter.append(\"D-\")\n        elif i < 4.5:\n            grades_letter.append(\"E\")\n        elif i < 4.6:\n            grades_letter.append(\"F\")\n        elif i < 4.7:\n            grades_letter.append(\"F\")\n        elif i < 4.8:\n            grades_letter.append(\"F\")\n        elif i < 4.9:\n            grades_letter.append(\"F\")\n        elif i < 5.0:\n            grades_letter.append(\"F\")\n        else:\n            grades_letter.append(\"F\")\n    return grades_letter\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Write your code here\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    grades = list(map(float, grades))\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    \n    grades = sorted(grades)\n    \n    list_of_letters = []\n    for g in grades:\n        if g >= 4.0:\n            list_of_letters.append('A+')\n        elif 3.7 > g >= 3.3:\n            list_of_letters.append('A')\n        elif 3.3 > g >= 3:\n            list_of_letters.append('A-')\n        elif 2.7 > g >= 2.3:\n            list_of_letters.append('B+')\n        elif 2.3 > g >= 2:\n            list_of_letters.append('B')\n        elif 2.0 > g >= 1.7:\n            list_of_letters.append('B-')\n        elif 1.7 > g >= 1.3:\n            list_of_letters.append('C+')\n        elif 1.3 > g >= 1:\n            list_of_letters.append('C')\n        elif 0.7 > g >= 0.3:\n            list_of_letters.append('C-')\n        elif 0.3 > g >= 0.0:\n            list_of_letters.append('D+')\n        elif 0.0 > g >= 0.0:\n            list_of_letters.append('D')\n        else:\n            list_of_letters.append('E')\n    return list_of_letters\n    \nif __name__ == '__main__':\n    # your code here\n    print(numerical_letter_grade([3.5, 3.5, 3, 3, 3]))\n    "
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    grades.sort()\n    grades = list(filter(lambda x: x > 0, grades))\n    grades = list(filter(lambda x: x <= 4.0, grades))\n    grades = list(filter(lambda x: x > 3.3, grades))\n    grades = list(filter(lambda x: x < 3.5, grades))\n    if len(grades) == 0:\n        return ['E']\n    else:\n        return ['A-' + str(grades[0] - 2) if grades[0] - 2 > 0 else 'A+' if grades[0] - 2 == 0 else 'A' + str(grades[0] - 2), 'A-' + str(grades[1] - 2) if grades[1] - 2 > 0 else 'A+' if grades[1] - 2 == 0 else 'A' + str(grades[1] - 2), 'A-' + str(grades[2] - 2) if grades[2] - 2 > 0 else 'A+' if grades[2] - 2 == 0 else 'A' + str(grades[2] - 2), 'A-' + str(grades[3] - 2) if grades[3] - 2 > 0 else 'A+' if grades[3] - 2 == 0 else 'A' + str(grades[3] - 2), 'A-' + str(grades[4] - 2) if grades[4] - 2 > 0 else 'A+' if grades[4] - 2 == 0 else 'A' + str(grades[4] - 2)]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    grades_list = []\n    for grade in grades:\n        if grade > 4.0:\n            grades_list.append(\"A+\")\n        elif grade >= 3.7:\n            grades_list.append(\"A\")\n        elif grade >= 3.3:\n            grades_list.append(\"A-\")\n        elif grade >= 3.0:\n            grades_list.append(\"B+\")\n        elif grade >= 2.7:\n            grades_list.append(\"B\")\n        elif grade >= 2.3:\n            grades_list.append(\"B-\")\n        elif grade >= 2.0:\n            grades_list.append(\"C+\")\n        elif grade >= 1.7:\n            grades_list.append(\"C\")\n        elif grade >= 1.3:\n            grades_list.append(\"C-\")\n        elif grade >= 1.0:\n            grades_list.append(\"D+\")\n        elif grade >= 0.7:\n            grades_list.append(\"D\")\n        elif grade >= 0.0:\n            grades_list.append(\"D-\")\n        else:\n            grades_list.append(\"E\")\n    return grades_list\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for x in string:\n        if(int(x) <= 1):\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in string:\n        count += 1\n        if count % 2 == 0:\n            count = 0\n            continue\n        if count == 1:\n            continue\n        elif count % 3 == 0:\n            count = 0\n            continue\n        elif count == 2:\n            count = 0\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.__len__() in prime_numbers\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(string)\n    prime_list = []\n    for i in range(2, n+1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_list.append(i)\n    if n in prime_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string) == 2\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #raise NotImplementedError()\n    if string == 'N':\n        return True\n    if string == 'R':\n        return False\n    for i in range(2, int(string**0.5)+1):\n        if string % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(string, str):\n        return False\n    return len(string) in prime_list\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    length = len(string)\n    if length < 2:\n        return False\n    else:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 10:\n        return 0\n    return 2 * starts_one_ends(n-10) + ends_one_starts(n-10)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Write your code here\n    return 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Note: the \"end with 1\" part of the question is different than the \"start with 1\" part.\n    # The start with 1 part only considers the numbers that start with 1, and ends with 1,\n    # while the end with 1 part only considers the numbers that end with 1.\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1,10):\n        if len(str(i)) == n:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # hard to make it an array since it can only be positive\n    # also counts start and end in the same number\n    return count(n, 1, 1)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i == str(i)[:len(str(i))] + '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in range(1, n+1):\n        str_num = str(num)\n        if str_num.startswith('1'):\n            count += 1\n        if str_num.endswith('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Make a dictionary of the numbers 1 to n, with each key being the\n    # number of digits it has.\n    dict = {i:0 for i in range(1,n+1)}\n    \n    # Create a counter\n    counter = 0\n    \n    # Loop through each integer from 1 to n\n    for i in range(1,n+1):\n        # Loop through each digit in the integer\n        for j in str(i):\n            # If the digit is 1, increment the counter\n            if int(j) == 1:\n                counter += 1\n                \n        # If the counter is greater than 0, add 1 to the dictionary\n        if counter > 0:\n            dict[counter] += 1\n        # Set counter to 0\n        counter = 0\n            \n    return dict\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def count_ones(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n //= 10\n        return count\n    \n    # This is the most optimized solution\n    # O(1) time and space\n    # use a for-loop, and then an if statement\n    count = 0\n    for i in range(1, n+1):\n        if count_ones(i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # count number of numbers\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    binary_str = \"\"\n    while N > 0:\n        binary_str += str(N % 2)\n        N //= 2\n    return binary_str\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # @N is supposed to be a positive integer\n    if N < 0 or N > 10000:\n        print('Invalid input. Please try again.')\n        return -1\n    \n    # @N is supposed to be a positive integer\n    if N <= 10:\n        return str(N)\n    \n    # Converts to binary\n    binary = ''\n    while N!= 0:\n        binary += str(N % 2)\n        N = N // 2\n    \n    # @binary is supposed to be a binary number\n    if len(binary) > 10:\n        print('Invalid input. Please try again.')\n        return -1\n    \n    return binary\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    bina_num = bin(N)\n    bina_num = bina_num.replace(\"0b\", \"\")\n    print(bina_num)\n    return bina_num\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # your code here\n    \n    return \"\".join(bin(N)[2:])\n    #return \"\".join(str(N))\n    #return \"\".join([str(x) for x in N])\n    \n    \n    #return 0\n    \n    \nprint(solve(1000))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # @0, @1, @2, @3, @4, @5, @6, @7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17, @18, @19, @20, @21, @22, @23, @24, @25, @26, @27, @28, @29, @30, @31, @32, @33, @34, @35, @36, @37, @38, @39, @40, @41, @42, @43, @44, @45, @46, @47, @48, @49, @50, @51, @52, @53, @54, @55, @56, @57, @58, @59, @60, @61, @62, @63, @64, @65, @66, @67, @68, @69, @70, @71, @72, @73, @74, @75, @76, @77, @78, @79, @80, @81, @82, @83, @84, @85, @86, @87, @88, @89, @90, @91, @92, @93, @94, @95, @96, @97, @98, @99, @100, @101, @102, @103, @104, @105, @106, @107, @108, @109, @110, @111, @112, @113, @114, @115, @116, @117, @118, @119, @120, @121, @122, @123, @124, @125, @126, @127, @128, @129, @130, @131, @132, @133, @134, @135, @136, @137, @138, @139, @140, @141, @142, @143, @144, @145, @146, @147, @148, @149, @150, @151, @152, @153, @154, @155, @156, @157, @158, @159, @160, @161, @162, @163, @164, @165, @166, @167, @168, @169, @170, @171, @172, @173, @174, @175, @176, @177, @178, @179, @180, @181, @182, @183, @184, @185, @186, @187, @188, @189, @190, @191, @192, @193, @194, @195, @196, @197, @198, @199, @200, @201, @202, @203, @204, @205, @206, @207, @208, @209, @210, @211, @212, @213, @214, @215, @216, @217, @218, @219, @220, @221, @222, @223, @224, @225, @226, @227, @228, @229, @230, @231, @232, @233, @234, @235, @236, @237, @238, @239, @240, @241, @242, @243, @244, @245, @246, @247, @248, @249, @250, @251, @252, @253, @254, @255, @256, @257, @258, @259, @260, @261, @262, @263, @264, @265, @266, @267, @268, @269, @270, @271, @272, @273, @274, @275, @276, @277, @278, @279, @280, @281, @282, @283, @284, @285, @286, @287, @288, @289, @290, @291, @292, @293, @294, @295, @296, @297, @298, @299, @300, @301, @302, @303, @304, @305, @306, @307, @308, @309, @310, @311, @312, @313, @314, @315, @316, @317, @318, @319, @320, @321, @322, @323, @324, @325, @326, @327, @328, @329, @330, @331, @332, @333, @334, @335, @336, @337, @338, @339, @34"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    ans = 0\n    n = N\n    while n > 0:\n        ans += n % 10\n        n //= 10\n    return str(bin(ans))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([int(i) for i in str(bin(N)[2:])])\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #Convert N to binary\n    binary = convertToBinary(N)\n    #List of digits and their counts\n    digits = []\n    count = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            count += 1\n        else:\n            digits.append(count)\n            count = 0\n    digits.append(count)\n    \n    #Convert digit counts to strings and concatenate them\n    digits = \"\".join(map(str,digits))\n    \n    return digits\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # your code here\n    return \"01\"\n    \nif __name__ == \"__main__\":\n    N = int(input().strip())\n    result = solve(N)\n    print(result"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    s = str(N)\n    \n    if s[0] == \"1\":\n        sum = N + 10\n    elif s[0] == \"0\":\n        sum = N\n    else:\n        sum = N - 10\n    \n    return sum"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst[i] = i+1\n    return lst"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst == []:\n        return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 0\n    for x in range(len(lst)):\n        if x % 2 == 0:\n            result += lst[x]\n    return result\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #     return sum(lst[i] for i in range(1, len(lst), 2) if i!= 0)\n    return sum(lst[i] for i in range(1, len(lst), 2) if i!= 0)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(x for i, x in enumerate(lst) if i % 2 == 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            lst.append(lst[i])\n    return lst\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        raise ValueError(\"The list lst is empty\")\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Find the odd indices of lst\n    odd_indices = [i for i in range(len(lst)) if i % 2!= 0]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Start with the first item in the list.\n    current_item = lst[0]\n    # For each item after the first...\n    for item in lst[1:]:\n        # If the current item is odd...\n        if item % 2!= 0:\n            #... add it to the result.\n            result.append(current_item)\n        # Add the current item to the next item.\n        current_item = item\n    return result"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return reduce((lambda x,y: x+y),[lst[i] for i in range(len(lst)) if i % 2 == 1])"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # return ''.join(sorted(s.split()))\n    new_s = ''\n    for i,c in enumerate(s.split()):\n        new_s = new_s + c[::-1] +''\n    return new_s.strip()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = ''.join(s.split())\n    s = \"\".join(sorted(s))\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \" \".join(sorted(s.split(), key=lambda x: ord(x)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = ''\n    new = ''\n    for i in range(len(s)):\n        if s[i]!='':\n            new += s[i]\n        else:\n            result += new +''\n            new = ''\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s =''.join(s.split())\n    s = s.split()\n    s = list(s)\n    s = list(set(s))\n    s.sort()\n    return''.join(s)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \" \".join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # code here\n    words = s.split()\n    output = []\n    for i in range(len(words)):\n        if words[i]!= '':\n            sorted_word = ''.join(sorted(words[i]))\n            output.append(sorted_word)\n    output =''.join(output)\n    return output\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.split()\n    s = sorted(s, key=lambda x: ord(x))\n    return''.join(s)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.split()\n    ascii_list = []\n    for i in range(0,len(s)):\n        ascii_list.append(ord(s[i][0]))\n    return ''.join([s[i][1:] for i in sorted(range(0,len(s)), key=lambda k: ascii_list[k])])\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    tuples = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            tuples.append((i, lst[i].index(x)))\n    if len(tuples) == 0:\n        return []\n    tuples = sorted(tuples, key=lambda k: (k[0], -k[1]))\n    tuples = sorted(tuples, key=lambda k: (k[0], k[1]))\n    return tuples\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # your code here\n    if lst == []:\n        return []\n    if type(lst[0])!= list:\n        return get_row([lst[x]] + get_row(lst[:x] + lst[x+1:], x), x)\n    else:\n        return sorted(get_row(lst[:x] + lst[x+1:], x), key = lambda tup: (tup[1], tup[0]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    row_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                row_lst.append((i, j))\n    row_lst.sort()\n    row_lst.sort(key=lambda x: (x[0], -x[1]))\n    return row_lst\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    coords = []\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                coords.append((row, col))\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    out = []\n    for i in range(len(lst)):\n        coords = []\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coords.append((i, j))\n        coords.sort()\n        coords.sort(key=lambda x: x[1], reverse=True)\n        out.append(coords)\n    return out\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    coords = []\n    \n    if lst:\n        for row in range(len(lst)):\n            for col in range(len(lst[row])):\n                if lst[row][col] == x:\n                    coords.append((row, col))\n    \n    coords.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return coords\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return []\n    else:\n        return sorted(\n            [(i,j) for i in range(len(lst)) for j in range(len(lst[0]))],\n            key = lambda x: (x[0], -x[1])\n        )\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    result = []\n    row = 0\n    col = 0\n    \n    for i in range(len(lst)):\n        if lst[i][col] == x:\n            result.append((row, col))\n        col += 1\n        \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return result\n    \n    \ndef get_max_row(lst, x):\n    \"\"\"\n    Given a list of lists, lst, which represents a matrix,\n    return integer representing maximum element in a row,\n    starting with 0.\n    \n    Examples:\n    get_max_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == 5\n    get_max_row([], 1) == 0\n    get_max_row([[], [1], [1, 2, 3]], 3) == 3\n    \"\"\"\n    \n    max_row = 0\n    \n    for i in range(len(lst)):\n        if lst[i][col] > max_row:\n            max_row = lst[i][col]\n    \n    return max_row\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst:\n        return []\n    \n    answer = []\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                answer.append((i, j))\n    answer = sorted(answer, key=lambda x: (x[0], x[1]))\n    return answer\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for row in lst:\n        for i, j in enumerate(row):\n            if j == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # input: list of integers\n    # output: list of integers\n    # return a copy of the input list with values sorted in ascending order if sum(first index value, last index value) is odd,\n    # or sort it in descending order if sum(first index value, last index value) is even\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    array = array[:]\n    array.sort(reverse=True)\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    array.sort(key=lambda x: (x, -x))\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Solution 1:\n    # Time: O(n)\n    # Space: O(n)\n    # res = []\n    # for i in range(len(array)):\n    #     res.append(array[i])\n    #     res.sort()\n    # return res\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # return sorted(array) if sum(first, last) % 2 == 1 else sorted(array, reverse=True)\n    return sorted(array) if sum(array) % 2 == 1 else sorted(array, reverse=True)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    array = array.copy()\n    i = 0\n    for j in range(1, len(array)):\n        if array[j] + array[i] == 0:\n            i += 1\n        else:\n            break\n    i += 1\n    # if sum(first index value, last index value) is odd\n    # sort the array in ascending order\n    if array[i] + array[0]!= 0:\n        array.sort(key=lambda x: x)\n    else:\n        # sort the array in descending order\n        array.sort(key=lambda x: -x)\n    return array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd, even = [], []\n    for num in array:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return sorted(odd, reverse=True) + sorted(even)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(array)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return_val = \"\"\n    for i in range(len(s)):\n        if s[i].isupper():\n            return_val = return_val + alphabet[(alphabet.index(s[i]) + 2) % 26]\n        else:\n            return_val = return_val + alphabet[(alphabet.index(s[i]) - 2) % 26]\n    return return_val\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def encrypt(s):\n        if len(s)>0:\n            s = list(s)\n            n = len(s)\n            for i in range(n):\n                if s[i] >= 'A' and s[i] <= 'Z':\n                    if s[i] >= 'E':\n                        s[i] = chr((((ord(s[i]) - ord('E')) - 2 ) % 26 ) + ord('A'))\n                    else:\n                        s[i] = chr((((ord(s[i]) - ord('A')) - 2 ) % 26 ) + ord('A'))\n                if s[i] >= 'a' and s[i] <= 'z':\n                    if s[i] >= 'e':\n                        s[i] = chr((((ord(s[i]) - ord('e')) - 2 ) % 26 ) + ord('a'))\n                    else:\n                        s[i] = chr((((ord(s[i]) - ord('a')) - 2 ) % 26 ) + ord('a'))\n            return \"\".join(s)\n        return \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # check if string is empty\n    if len(s) == 0:\n        return s\n    # create new list, increment the alphabet by 2\n    new = list(ALPHABET)\n    ALPHABET += ALPHABET\n    # map each character in the string to the new list\n    s = map(lambda x: new[x], map(ord, s))\n    # create a new string\n    return ''.join(list(s))\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'\n    \"\"\"\n    # check if string is empty\n    if len(s) == 0:\n        return s\n    # create new list, decrement the alphabet by 2\n    new = list(ALPHABET)\n    ALPHABET -= ALPHABET\n    # map each character in the string to the new list\n    s = map(lambda x: new[x], map(ord, s))\n    # create a new string\n    return ''.join(list(s))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    e = ''\n    for i in s:\n        if i in alphabet:\n            if i =='':\n                e +=''\n            else:\n                c = (alphabet.index(i) + 2) % len(alphabet)\n                e += alphabet[c]\n        else:\n            e += i\n    return e\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s[1:].join([s[0]] + s[2:].join([s[0]]))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # if no shift\n    if len(s) == 1:\n        return s\n    \n    # if letter\n    else:\n        shift = ((len(s) - 1) * 2) % 26\n        new_string = ''\n        \n        for letter in s:\n            if letter.isalpha():\n                ascii_value = ord(letter)\n                new_ascii_value = (ascii_value - ord('a') + shift) % 26 + ord('a')\n                new_letter = chr(new_ascii_value)\n            else:\n                new_letter = letter\n            \n            new_string = new_string + new_letter\n        \n        return new_string\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for letter in s:\n        if letter in alphabet:\n            letter_number = alphabet.find(letter)\n            letter_number += 2\n            encrypted += alphabet[letter_number]\n        else:\n            encrypted += letter\n    return encrypted\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    def rot(c):\n        return alpha[(alpha.index(c) + 2) % 26]\n    return ''.join([rot(c) for c in s])\n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'\n    \"\"\"\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    def rot(c):\n        return alpha[(alpha.index(c) - 2) % 26]\n    return ''.join([rot(c) for c in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    abc = 'abcdefghijklmnopqrstuvwxyz'\n    def rotate_alphabet(s, a):\n        return a[s-1]\n    return ''.join([rotate_alphabet(s, abc) for s in s])\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    encrypted_alphabet = alphabet[-2:] + alphabet[:5]\n    encrypted_s = \"\"\n    for i in range(len(s)):\n        if s[i] in alphabet:\n            encrypted_s += encrypted_alphabet[alphabet.index(s[i])]\n        else:\n            encrypted_s += s[i]\n    return encrypted_s\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst:\n        return None\n    \n    min_num = None\n    index = 0\n    for i in range(len(lst)):\n        if lst[i] < min_num or min_num is None:\n            min_num = lst[i]\n            index = i\n    return min_num if index < len(lst) - 1 else None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #get the smallest item from the list\n    smallest = min(lst)\n    #return None if there is no next smallest\n    if smallest == max(lst):\n        return None\n    #get the index of the smallest item\n    index = lst.index(smallest)\n    #swap the smallest item with the one directly after the smallest item\n    lst[index], lst[index + 1] = lst[index + 1], lst[index]\n    #return the new smallest item\n    return smallest\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    else:\n        return next(iter(sorted(set(lst), key=lambda x: x-1))) - 1\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not lst:\n        return None\n    if len(lst) <= 2:\n        return None\n    if lst[0] < lst[1]:\n        return lst[0]\n    return next_smallest(lst[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    if n == 1:\n        return lst[0]\n    l = lst[:]\n    l.sort()\n    return l[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n    lst.sort()\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if lst == None or len(lst) == 0:\n        return None\n    \n    pivot = lst[0]\n    less_pivot = []\n    greater_pivot = []\n    for num in lst[1:]:\n        if num > pivot:\n            greater_pivot.append(num)\n        else:\n            less_pivot.append(num)\n    if len(less_pivot) > 0:\n        return next_smallest(less_pivot)\n    return pivot\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    l = sorted(lst)\n    if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n    if l[1] < l[0]:\n        return l[1]\n    return l[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None\n    lst.sort()\n    if lst[0] == lst[1]:\n        return None\n    if lst[0]!= lst[1]:\n        return lst[1]\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    count = 0\n    for word in S:\n        if word.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    bored_count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith(\"I\"):\n            bored_count += 1\n    return bored_count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for word in S.split():\n        if word.startswith('I') and word!= \"I\":\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = S.split('.')\n    n_bored = 0\n    for word in words:\n        if word.startswith('I'):\n            n_bored += 1\n    return n_bored\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED; YOU'RE THE BEST!\\n\""
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in S.split():\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    bored_count = 0\n    words = S.split()\n    for i in range(len(words)):\n        if words[i] == \"I\":\n            if words[i] == words[i+1]:\n                bored_count += 1\n    return bored_count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # The sentence is 1 if it starts with I, and 0 otherwise\n    return S.count('I')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    boredom_count = 0\n    for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return any(x == (y + z), x == (z + y), x == y) and all(type(x) == int for x in (y, z))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if (x == y + z) and (x == y - z):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return True if (x+y) == (y+z) and all([type(i) == int for i in [x,y,z]]) else False\n  \n  \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x == y + z and type(x) == int and type(y) == int and type(z) == int\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x+y+z == z and all(isinstance(x, int) for x in (x, y, z)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #print(f'x:{x} y:{y} z:{z}')\n    if (x + y == z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return True\n    else:\n        return False\n        \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        return True if x == y+z and x == y and x == z and isinstance(x,int) and isinstance(y,int) and isinstance(z,int) else False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return all(isinstance(i, int) for i in (x, y, z)) and x + y == z\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    if (x == y + z) and (x == y * z):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return message.swapcase()\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join([chr(ord(c) + (ord(c) - ord('a') + 1)) if c.isalpha() else c for c in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = 'aeiou'\n    for letter in message:\n        if letter in vowels:\n            message = message.replace(letter, letter.upper())\n        else:\n            message = message.replace(letter, letter.lower())\n    return message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it switches case of all letters, replaces all \n    vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('THKS KS C MGSSCGG')\n    'test'\n    \"\"\"\n    vowels = 'aeiou'\n    for letter in message:\n        if letter.lower() in vowels:\n            message = message.replace(letter, letter.lower())\n        else:\n            message = message.replace(letter, letter.upper())\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # Creating a list of all characters\n    charList = list(message)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Since this function only has a little to do, we can simply\n    # declare the function and call it\n    # noqa\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # create a dictionary for each letter of the alphabet\n    alphabet_dict = {\n    'a': 'a',\n    'b': 'b',\n    'c': 'c',\n    'd': 'd',\n    'e': 'e',\n    'f': 'f',\n    'g': 'g',\n    'h': 'h',\n    'i': 'i',\n    'j': 'j',\n    'k': 'k',\n    'l': 'l',\n    'm':'m',\n    'n': 'n',\n    'o': 'o',\n    'p': 'p',\n    'q': 'q',\n    'r': 'r',\n    's':'s',\n    't': 't',\n    'u': 'u',\n    'v': 'v',\n    'w': 'w',\n    'x': 'x',\n    'y': 'y',\n    'z': 'z'\n    }\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return ''.join([symbols[symbols.index(s)-1] if s in vowels else s for s in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    new_message = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in message:\n        if char in vowels:\n            pos = vowels.index(char) + 2\n            new_message += vowels[pos]\n        else:\n            new_message += char\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    encoded = \"\"\n    vowels = 'aeiou'\n    \n    for i in message:\n        if i.lower() in vowels:\n            index = vowels.index(i.lower())\n            encoded += vowels[index + 2]\n        else:\n            encoded += i\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    print(lst)\n    for i in range(len(lst)):\n        if int(str(lst[i])[-1]) == 0:\n            continue\n        print(i)\n        print(str(lst[i])[-1])\n        print(i)\n        lst[i] = int(str(lst[i])[-1])\n    print(lst)\n    return sum(lst)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    lst = list(lst)\n    lst = list(map(int,lst))\n    \n    for i in range(len(lst)):\n        if i == 0:\n            if lst[i] > 9:\n                lst[i] = 1\n        if i > 0:\n            if lst[i] > 9:\n                if not isprime(lst[i-1]):\n                    lst[i] = 0\n                elif lst[i-1] < 9:\n                    lst[i] = lst[i-1]\n                else:\n                    lst[i] = 1\n        \n    return(sum(lst))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return 0\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # print(sorted([i for i in lst if isPrime(i)], reverse = True))\n    # print(max([int(i) for i in map(str, sorted([i for i in lst if isPrime(i)], reverse = True))], default = 0))\n    \n    a = [i for i in lst if isPrime(i)]\n    for i in a:\n        a = a[0]\n    print(a)\n    return sum([int(i) for i in str(a)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    import math as m\n    max_prime = 0\n    for x in lst:\n        if x > max_prime and is_prime(x):\n            max_prime = x\n    return sum([int(i) for i in str(max_prime)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = prime_numbers()\n    for i in range(len(lst)):\n        for j in range(2, int(lst[i])):\n            if lst[i]%j == 0:\n                break\n        else:\n            lst[i] = lst[i]//10\n            if lst[i]!= 0:\n                break\n    # print(lst)\n    for i in range(len(lst)):\n        if lst[i] < 10:\n            lst[i] = 0\n        if lst[i] >= 10 and lst[i] < 100:\n            lst[i] = lst[i]//10\n        if lst[i] >= 100 and lst[i] < 1000:\n            lst[i] = lst[i]//100\n        if lst[i] >= 1000 and lst[i] < 10000:\n            lst[i] = lst[i]//1000\n    print(sum(lst))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def prime_generator(n):\n        is_prime = [True] * (n + 1)\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if is_prime[i] == True:\n                for j in range(i * i, n + 1, i):\n                    is_prime[j] = False\n        return is_prime\n    def prime_sieve(n):\n        primes = [True] * (n + 1)\n        for i in range(2, n // 2 + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return primes\n    def prime(n):\n        primes = prime_sieve(n)\n        for i in range(n // 2, 1, -1):\n            if primes[i] and primes[n - i]:\n                return n - i\n        return 1\n    def digits(num):\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        return digits\n    primes = prime_generator(max(lst))\n    primes_lst = []\n    for i in range(len(primes)):\n        if primes[i] == True:\n            primes_lst.append(i)\n    if not primes_lst:\n        return 1\n    else:\n        primes_lst = sorted(primes_lst)\n        for i in range(len(primes_lst)):\n            if primes_lst[i]!= 0:\n                return sum(digits(primes_lst[i]))\n            else:\n                return 1\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    maxi = -1\n    for n in lst:\n        if (n>maxi):\n            maxi = n\n    s = 0\n    while(maxi>0):\n        s += maxi%10\n        maxi //= 10\n    return s\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = list(lst)\n    \n    #list of primes\n    primes = []\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    my_list = []\n    for i in lst:\n        my_list.append(int(str(i)))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if dict == {}:\n        return False\n    for i in dict:\n        if type(dict[i])!= str:\n            return False\n        if i.isupper() and dict[i].islower():\n            return False\n        if i.islower() and dict[i].isupper():\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if dict.keys() == {'state', 'zip'} or dict.keys() == {'state', 'zip'} else False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(dict) > 0:\n        if all(isinstance(k, str) for k in dict.keys()) and all(isinstance(v, str) for v in dict.values()):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        if len(dict.keys())!= 0:\n            for key in dict.keys():\n                if type(key)!= str:\n                    return False\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #Checking if dictionary is empty \n    if dict == {}:\n        return False\n    for item in dict.items():\n        if isinstance(item[0], str):\n            if not isinstance(item[0].lower(), str) and not isinstance(item[0].upper(), str):\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(dict) == 0:\n        return False\n    for k in dict:\n        if not isinstance(k, str):\n            return False\n        k.lower()\n        k.upper()\n    return True\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n        if keys[0].islower():\n            if keys[1].islower():\n                for i in range(2,len(keys)):\n                    if keys[i].isupper():\n                        return False\n            else:\n                return False\n        else:\n            if keys[1].isupper():\n                return False\n            else:\n                for i in range(2,len(keys)):\n                    if keys[i].islower():\n                        return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        dict_keys = list(dict.keys())\n        for i in range(len(dict_keys)):\n            if type(dict_keys[i]) is not str:\n                return False\n        else:\n            for i in range(len(dict_keys)):\n                dict_keys[i] = dict_keys[i].lower()\n                dict_keys[i] = dict_keys[i].upper()\n            if dict_keys == sorted(dict_keys):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(dict) == 0:\n        return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (len(dict) == 0) or ((all(isinstance(key, str) for key in dict.keys())) and (all(isinstance(key, str) for key in dict.keys())) and (all(key == key.lower() or key == key.upper() for key in dict.keys())))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    prime_numbers = primes(n)\n    next_prime = n\n    prime_numbers_array = []\n    while len(prime_numbers_array) < n:\n        for prime in prime_numbers:\n            if prime > next_prime:\n                break\n            if prime == next_prime:\n                prime_numbers_array.append(prime)\n                next_prime += prime\n                break\n    return prime_numbers_array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return []\n    primes = []\n    # 1 is not prime, so we need to put it first\n    primes.append(1)\n    # include 2 as prime\n    primes.append(2)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 1:\n        return []\n    \n    if n <= 2:\n        return [2]\n    \n    prime_numbers = []\n    current = 3\n    \n    while current < n:\n        is_prime = True\n        for x in range(2, int(current**0.5)+1):\n            if current % x == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            prime_numbers.append(current)\n        current += 1\n    \n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    primes = get_prime_list(n)\n    count = 0\n    array = []\n    for i in range(n):\n        if count < n and is_prime(i):\n            count += 1\n            array.append(i)\n    return array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 2:\n        return []\n    for i in range(3,n+1):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [2]\n    result = []\n    for i in range(2,n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return nums\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = [2, 3, 5, 7, 11, 13, 17]\n    for i in range(len(primes)):\n        if primes[i] > n:\n            return primes\n        else:\n            primes[i] += 1\n    return primes\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (int(str(a)[0]) * int(str(b)[0])) + (int(str(a)[1]) * int(str(b)[1]))"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    product = 0\n    while b!= 0:\n        product = product * 10 + a % 10\n        a = a // 10\n        b = b // 10\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return int(a * b % 100)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == 0:\n        return 0\n    if a == 1:\n        return b\n    return (a // 10) * (b // 10) + (a % 10) * (b % 10)"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a*b\n    \nmultiply(148, 412"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    mult = 1\n    for i in range(len(str(a))):\n        mult = mult * (b % 10)\n        b = b//10\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(str(a) * str(b))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    mult = 0\n    if a < 0:\n        a = abs(a)\n    while a:\n        mult += a % 10\n        a = int(a/10)\n    if b < 0:\n        b = abs(b)\n    while b:\n        mult += b % 10\n        b = int(b/10)\n    return mult\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO\n    while len(str(b))!= 1:\n        a, b = b % 10, a * 10\n    return a * b\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s) - 1):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in ['A', 'B', 'C', 'D', 'E', 'F', 'G']:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s_lower = s.lower()\n    count = 0\n    for i in range(len(s_lower)):\n        if s_lower[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # count_upper('aBCdEf') returns 1\n    # count_upper('abcdefg') returns 0\n    # count_upper('dBBE') returns 0\n    # return 1\n    \n    return sum([(chr(v) in 'A\u0104\u0106\u0118E\u0118' and s.index(chr(v)) % 2 == 0) for v in range(65, 91)])\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # Your code here\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    \n    return count\n    \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    total = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            total += 1\n    return total\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num = float(value)\n    num_int = int(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if value[0] == '-':\n        value = value[1:]\n        value = -int(value)\n    else:\n        value = int(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    number = float(value)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = float(value)\n    if x == int(x):\n        return int(x)\n    else:\n        return int(x + (abs(x) - abs(int(x))))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return round(value / (10 ** -4)) * (10 ** -4)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if isinstance(value, str):\n        number = int(value)\n        # number = float(value)\n        if number == 0:\n            return 0\n        elif abs(number) < abs(number - 1):\n            return int(number -.5)\n        else:\n            return int(number +.5)\n    else:\n        return value\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    value = float(value)\n    if value - int(value) < 0.5:\n        return int(value)\n    else:\n        return int(value) + 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    # (value, int(value), int(int(value)-1))\n    # return(value)\n    if value.count('.0') == 2:\n        return(int(value))\n    if value.count('.') == 1:\n        return(int(int(value) + 1))\n    if value.count('.') == 0:\n        return(int(value))\n    value = float(value)\n    value = int(value)\n    if value > 0:\n        if int(value) - 1 == value:\n            return(int(value))\n        else:\n            return(int(value))\n    elif value < 0:\n        if int(value) + 1 == value:\n            return(int(value))\n        else:\n            return(int(value))\n    else:\n        return(int(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if value.endswith('.'):\n        value = value[:-1]\n    return int(round(float(value)))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [n, n+1, 2*n]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #n = 3\n    #list_num = [3, 5, 7]\n    if n % 2 == 0:\n        list_num = [n//2]*(n+1)\n    if n % 2 == 1:\n        list_num = [n//2]*(n)\n        list_num +=[n+1]\n    return list_num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num_stone = lambda n: n if n % 2 else n + 1\n    n += 1\n    while n >= 1:\n        n = num_stone(n)\n        yield n\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    levels = [n]\n    level = n\n    while len(levels) < 3:\n        if level % 2 == 0:\n            level = level + 2\n        else:\n            level = level + 3\n        levels.append(level)\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n-1)\n    return [n-1] + make_a_pile(n-2)"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # 1.\n    if n % 2 == 1:\n        return [n+1] + make_a_pile(n-1)\n    else:\n        return make_a_pile(n-2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [i for i in range(1, n + 1, 2) if n % 2 == 0] + [i for i in range(0, n + 1, 2)]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert type(n) == int and n > 0, \"n must be a positive integer.\"\n    if n % 2 == 0:\n        n = n + 1\n    return ([n] * n)\n    # return make_a_pile.count(n)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n % 2 == 0:\n        n += 1\n    levels = [n]\n    while n > 1:\n        if n % 2 == 1:\n            n -= 2\n        else:\n            n -= 2\n        levels.append(n)\n    return levels\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % 2 == 1:\n        return [n] + make_a_pile(n + 1)\n    else:\n        return [n] + make_a_pile(n // 2)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split string into words using [ ]\n    # split string into words using,\n    # split string into words using spaces\n    # return words\n    return s.split()\n    "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.split()\n    return s\n    \ndef words_array(s):\n    \"\"\"\n    You will be given an array of strings. Your task is to return a new array\n    containing the same strings but with the words reversed.\n    \n    For example:\n    words_array([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"my\", \"name\", \"is\", \"John\", \"Hi\"]\n    words_array([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"]) == [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    \"\"\"\n    return s.copy()[::-1]\n    \ndef digits_array(s):\n    \"\"\"\n    You will be given an array of numbers. Your task is to return a new array\n    where each element of the new array is the sum of the digits of the original\n    array.\n    \n    For example:\n    digits_array([1, 2, 3]) == [1, 2, 3]\n    digits_array([4, 9, 6]) == [9, 6, 4]\n    \"\"\"\n    return list(map(int, str(s)))\n    \ndef array_range(n):\n    \"\"\"\n    You will be given an integer. Your task is to return a list of all the integers\n    from 0 to the given integer including the lower bound and excluding the upper\n    bound.\n    \n    For example:\n    array_range(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    array_range(1) == [0]\n    array_range(3) == [0, 1, 2]\n    array_range(5) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return list(range(n))\n    \ndef array_range_2(n):\n    \"\"\"\n    You will be given an integer. Your task is to return a list of all the integers\n    from 0 to the given integer including the lower bound and excluding the upper\n    bound.\n    \n    For example:\n    array_range_2(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    array_range_2(1) == [0]\n    array_range_2(3) == [0, 1, 2]\n    array_range_2(5) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return list(range(n)) + list(range(n+1, 2*n))\n    \ndef array_index(s):\n    \"\"\"\n    You will be given an array and an integer. Your task is to return the index\n    of the integer in the array. If the integer does not exist in the array,\n    return -1.\n    \n    For example:\n    array_index([0, 1, 2, 3, 4, 5], 3) == 2\n    array_index([0, 1, 2, 3, 4, 5], 6) == -1\n    array_index([0, 1, 2, 3, 4, 5], 0) == 0\n    array_index([0, 1, 2, 3, 4, 5], -1) == -1\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == s[int(s)]:\n            return i\n    return -1\n    \ndef array_contains(s):\n    \"\"\"\n    You will be given an array and an integer. Your task is to return True if the\n    integer is contained in the array and False if it is not.\n    \n    For example:\n    array_contains([0, 1, 2, 3, 4, 5], 3) == True\n    array_contains([0, 1, 2, 3, 4, 5], 6) == False\n    array_contains([0, 1, 2, 3, 4, 5], 0) == True\n    array_contains([0, 1, 2, 3, 4, 5], -1) == False\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == s[int(s)]:\n            return True\n    return False\n    \ndef list_append(s):\n    \"\"\"\n    You will be given an array and an integer. Your task is to return a new array\n    that includes the integer in the origina"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.split(\",\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.split(\", \")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.replace(\" \", \"\").replace(\",\", \"\").lower()\n    return s.split(\" \")\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # If x == y, return x\n    if x == y:\n        return x\n    # If x is greater than y, return max between x and y\n    if x > y:\n        return max(x, y)\n    # If x is smaller than y, return min between x and y\n    if x < y:\n        return min(x, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(x, y + 1):\n        if is_even(i):\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x < y:\n        return -1\n    elif x == y:\n        return x\n    elif x % 2 == 0:\n        return x\n    elif x < y:\n        for i in range(x + 1, y):\n            if i % 2 == 0:\n                return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert x > 0 and y > 0, \"The parameters must be positive.\"\n    assert x <= y, \"The range must be greater than zero.\"\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (x > y):\n        print(\"Error. No such number\")\n        return None\n    elif (x == y):\n        return x\n    else:\n        if (x % 2 == 0):\n            return x\n        else:\n            if (x > y):\n                return choose_num(x-2, y)\n            else:\n                return choose_num(x+2, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x == y:\n        return x\n    elif x > y:\n        return -1\n    else:\n        a = y\n        b = x\n        while b!= a:\n            if a % 2 == 0 and b % 2 == 0:\n                return b\n            a = a - 1\n            b = b + 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if x % 2 == 0 and y % 2 == 0:\n        return x if x < y else y\n    elif x % 2 == 1 and y % 2 == 0:\n        return x if x < y else y\n    elif x % 2 == 0 and y % 2 == 1:\n        return x if x > y else y\n    elif x % 2 == 1 and y % 2 == 1:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if x < y:\n        return -1\n    if x % 2 == 0:\n        return x\n    return choose_num(x + 2, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if x % 2 == 0:\n        if y % 2 == 0:\n            if x <= y:\n                num = (x + y) // 2\n                if num % 2 == 0:\n                    return num\n                else:\n                    return -1\n            elif x > y:\n                if y - x == 1:\n                    return y\n                else:\n                    return -1\n    elif x % 2!= 0:\n        if y % 2 == 0:\n            if x <= y:\n                num = (x - 1) + y // 2\n                if num % 2 == 0:\n                    return num\n                else:\n                    return -1\n            elif x > y:\n                if y - x == 1:\n                    return y\n                else:\n                    return -1\n        else:\n            return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    elif n == m:\n        return '0b1'\n    return '0b' + '1' * (n - m)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < m:\n        return -1\n    else:\n        return int(bin(int((n+m)/2))[2:],2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(bin(n))[2:]\n    return \"0b\" + str(round(sum(range(n, m + 1))/n))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    n_bits = bin(n)[2:]\n    m_bits = bin(m)[2:]\n    rounded_avg = (len(m_bits) - len(n_bits)) * \"0\" + n_bits\n    return rounded_avg\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    return int(f\"0b{int(n+1):0>{m}}\", 2)"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(math.ceil(n / 2) - 0.5) - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < m:\n        return -1\n    s = ((n + m) // 2)\n    b = 0\n    while s >= n:\n        b += s\n        s = (s // 2) + (s % 2)\n    return f'0b{int(b):04d}'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n > m:\n        return -1\n    else:\n        return (n + m) // 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    return \"{0:b}\".format(int(round((n + m)/2))).zfill(2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        avg = int((n + m) / 2)\n        if n > m:\n            return -1\n        return int(bin(avg)[2:].zfill(1 + abs(int(math.log2(n)) - int(math.log2(m))))[::-1], 2)\n    except TypeError:\n        return \"ZeroDivisionError\"\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    seen = set()\n    return_list = []\n    for i in x:\n        return_list.append(i)\n        if i not in seen:\n            seen.add(i)\n    return sorted(return_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # initial empty list to store unique digits\n    unique_digits = []\n    # iterate through list\n    for i in x:\n        # empty list to store a single element\n        single_element = []\n        # iterate through single element\n        for j in str(i):\n            # if j is even, add it to single_element list\n            if int(j) % 2 == 0:\n                single_element.append(j)\n        # append single_element to unique_digits list\n        unique_digits.append(single_element)\n    # return unique_digits list\n    return sorted(list(set(unique_digits)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted([i for i in x if i > 10 and i % 2 == 0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l = []\n    for i in x:\n        l.append(str(i))\n    l.sort()\n    return [int(x) for x in l if int(x) % 2 == 0]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = []\n    for i in range(len(x)):\n        s.append(x[i] % 10)\n    return sorted(set(s))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # generate a list of the digits of all elements in x\n    digits = []\n    for num in x:\n        digits += list(str(num))\n    \n    # return the list of all elements that doesn't have an even digit\n    return [num for num in digits if num % 2 == 1]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    nums = set()\n    \n    for x in x:\n        num = str(x)\n        \n        for i in range(len(num)):\n            if int(num[i])%2 == 0:\n                break\n        else:\n            nums.add(x)\n            \n    return sorted(nums)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted([n for n in x if not n % 2])\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return sorted(set(x))\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Solution 1:\n    \"\"\"\n    all_digits = []\n    for i in x:\n        all_digits += str(i)\n    return sorted(list(set(all_digits)))\n    \"\"\"\n    # Solution 2:\n    #return sorted(list(set([int(i) for i in str(x)])))\n    x = str(x)\n    return sorted(list(set([int(i) for i in x if i!='0'])))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lengths = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(1,10):\n        lengths.append(i)\n    for i in range(len(arr)):\n        if arr[i] <= 10 and arr[i] >= 0:\n            arr[i] = lengths[arr[i]]\n    reversed(arr)\n    arr[:] = map(str, arr)\n    arr.reverse()\n    arr = \"\".join(arr)\n    arr = arr.split()\n    arr = list(map(lambda x: x[::-1], arr))\n    arr = list(map(lambda x: x[::-1], arr))\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return []\n    arr.sort()\n    arr.reverse()\n    ans = []\n    for i in range(1, 10):\n        while i in arr:\n            arr.remove(i)\n        if arr:\n            ans.append(str(arr.pop(0)))\n        else:\n            break\n    return ans\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if not arr: return []\n    \n    new_arr = []\n    for n in arr:\n        if 1 <= n <= 9:\n            new_arr.append(name_by_length(n))\n    \n    arr.sort()\n    arr.reverse()\n    \n    for i in range(len(arr)):\n        if arr[i] <= 9 and arr[i] >= 1:\n            new_arr.append(name_by_length(arr[i]))\n    \n    return new_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if not arr:\n    #     return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # edge cases\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1 and arr[0] < 1 or arr[0] > 9:\n        return []\n    if arr[0] < 1 or arr[0] > 9:\n        return []\n    \n    # other cases\n    nums = []\n    for i in arr:\n        if i < 1 or i > 9:\n            continue\n        nums.append(num2word[i])\n    nums.sort()\n    \n    # reverse the array\n    nums.reverse()\n    \n    # convert the string to a list of characters\n    nums_list = []\n    for i in nums:\n        nums_list.append(i)\n    \n    return nums_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [digits[i] for i in range(1, 10)]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr_length = len(arr)\n    if arr_length == 0: return []\n    \n    # Sort the array\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    \n    # Reverse the array\n    arr_length = len(arr)\n    for i in range(arr_length):\n        for j in range(arr_length - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            \n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    arr_length = len(arr)\n    result = []\n    for i in range(arr_length):\n        if arr[i] in range(1, 9 + 1):\n            if arr[i] == 1:\n                result.append(\"One\")\n            elif arr[i] == 2:\n                result.append(\"Two\")\n            elif arr[i] == 3:\n                result.append(\"Three\")\n            elif arr[i] == 4:\n                result.append(\"Four\")\n            elif arr[i] == 5:\n                result.append(\"Five\")\n            elif arr[i] == 6:\n                result.append(\"Six\")\n            elif arr[i] == 7:\n                result.append(\"Seven\")\n            elif arr[i] == 8:\n                result.append(\"Eight\")\n            else:\n                result.append(\"Nine\")\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # ===Modify codes below=================\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = list(range(1,10))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if arr == []:\n        return []\n    result = []\n    arr.sort()\n    for i in arr:\n        if i >= 1 and i <= 9:\n            if i == 1:\n                result.append(\"One\")\n            if i == 2:\n                result.append(\"Two\")\n            if i == 3:\n                result.append(\"Three\")\n            if i == 4:\n                result.append(\"Four\")\n            if i == 5:\n                result.append(\"Five\")\n            if i == 6:\n                result.append(\"Six\")\n            if i == 7:\n                result.append(\"Seven\")\n            if i == 8:\n                result.append(\"Eight\")\n            if i == 9:\n                result.append(\"Nine\")\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return f(n - 1) + [i + 1 for i in f(n - 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(1)\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(1)\n        else:\n            res.append(1*i)\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    facto = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            facto.append(i)\n        else:\n            facto.append(1)\n    return facto\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * (i + 1))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    list_f = []\n    for i in range(n):\n        if i % 2 == 0:\n            list_f.append(int(factorial(i)))\n        else:\n            list_f.append(int(i + 1))\n    return list_f\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    f = []\n    if n == 0:\n        return f\n    else:\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                f.append(i)\n            else:\n                f.append(i * (i+1))\n        return f\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(sum(range(1, i + 1)))\n    return res"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert type(n) == int, \"n must be an integer.\"\n    assert n > 0, \"n must be positive.\"\n    assert n <= 20, \"n cannot be larger than 20\"\n    L = []\n    for i in range(n):\n        if i % 2 == 0:\n            L.append(int(i))\n    for i in range(1,n):\n        L.append(i)\n    for i in range(1,n+1):\n        L.append(int(factorial(i)))\n    return L\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return count_even_odd_palindrome(n)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count_even = 0\n    count_odd = 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(2, n):\n        if palindrome(i):\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count_even, count_odd = 0, 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # ********** Attempt 1 - TLE ********** #\n    # @lru_cache(maxsize=None)\n    # def count_palindrome(n):\n    #     if n == 1:\n    #         return 1\n    #     elif n % 2 == 0:\n    #         return 1 + count_palindrome(n // 2)\n    #     else:\n    #         return 1 + count_palindrome(n - 1)\n    # return (count_palindrome(n), n)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even_palindrome_cnt = 0\n    odd_palindrome_cnt = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_cnt += 1\n            else:\n                odd_palindrome_cnt += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_palindrome = even_palindrome = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and (i % 2 == 0 or i % 10!= 7):\n            even_palindrome += 1\n        if is_palindrome(i) and (i % 2!= 0 or i % 10 == 7):\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    even_palindromes = odd_palindromes = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_odd = 0\n    odd_even = 0\n    odd_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_odd += 1\n        elif is_palindrome(i) and i % 2!= 0:\n            odd_even += 1\n        elif not is_palindrome(i) and i % 2 == 0:\n            odd_odd += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                num = arr[i] + arr[j]\n                num = str(num)\n                if num[0] > '0':\n                    count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    count = 0\n    for num in arr:\n        if check_for_negative(num) and num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([int(x) for x in str(arr) if str(x).isdigit()])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums = 0\n    for i in arr:\n        if i > 0:\n            nums += 1\n    return nums\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in arr:\n        if(num > 0):\n            # positive numbers are all digits 1 and 2, 3 and 4 etc\n            i = 2\n            while(num > 0):\n                # if first digit is not 1, then it is not a positive number\n                if(num % 10!= i):\n                    break\n                # else, keep going\n                num = num // 10\n                i += 1\n            # if all digits are 1\n            if(i == 2):\n                count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            if sum(map(int, str(abs(num)))) > 0:\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if arr == []:\n        return 0\n    neg_sum = 0\n    pos_sum = 0\n    neg_num = []\n    pos_num = []\n    if len(arr) > 1:\n        if arr[0] < 0:\n            for i in range(1, len(arr)):\n                neg_sum += arr[i]\n                neg_num.append(arr[i])\n        else:\n            for i in range(1, len(arr)):\n                pos_sum += arr[i]\n                pos_num.append(arr[i])\n    else:\n        if arr[0] < 0:\n            neg_sum = arr[0]\n            neg_num = arr\n        else:\n            pos_sum = arr[0]\n            pos_num = arr\n    return sum([len(neg_num), len(pos_num)])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Counts of numbers which have at least one digit > 0\n    # If a number is negative, then its first signed digit will be negative:\n    # e.g. -123 has signed digits -1, 2, and 3.\n    return sum(1 for el in arr if not sum(int(d) for d in str(el)) < 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for num in arr:\n        s = 0\n        while num > 0:\n            s += num % 10\n            num //= 10\n        if s > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if arr == []:\n        return True\n    l = len(arr)\n    i = 0\n    while i < l and arr[i] < arr[i+1]:\n        i += 1\n    if i == 0:\n        return True\n    #print(arr[:i], arr[i+1:])\n    if not move_one_ball(arr[i:]):\n        return False\n    arr[:i] = arr[:i][::-1]\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        while arr[0] < arr[1]:\n            arr.pop(0)\n            arr.append(arr[0])\n            arr.pop(0)\n        if arr[0] > arr[-1]:\n            arr.reverse()\n        if len(arr) > 1:\n            while arr[0] == arr[1]:\n                arr.pop(0)\n                arr.append(arr[0])\n                arr.pop(0)\n        if arr[0] > arr[-1]:\n            arr.reverse()\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # special case where array is empty\n    if len(arr) == 0:\n        return True\n    # if we find a single element which is less than the last element then this\n    # is not possible to get non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # Base condition is true when the array is empty.\n    if len(arr) == 0:\n        return True\n    # We are moving to the left side and making sure that the array is decreasing.\n    # We have to maintain a flag to know if the array is decreasing or not.\n    decreasing = True\n    \n    for i in range(1, len(arr)):\n        # We are moving to the right.\n        # We have to make sure the array is decreasing.\n        if decreasing and arr[i] < arr[i - 1]:\n            decreasing = False\n        # We are moving to the left.\n        if not decreasing and arr[i] > arr[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_in_order(arr, n):\n        l = arr[:n//2]\n        r = arr[n//2:]\n        for i in range(n//2):\n            if l[i] >= r[i]:\n                return False\n        return True\n    \n    def move_by_one(arr):\n        for i in range(n-1):\n            arr[i] = arr[i+1]\n        return arr[0]\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(arr)==0:\n        return True\n    if len(arr)==1:\n        return True\n    if len(arr)==2:\n        if arr[0]>arr[1]:\n            return False\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    flag = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            flag = 1\n            break\n    if flag == 1:\n        return False\n    for i in range(n-2):\n        if arr[i] < arr[i+2]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr == sorted(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Empty array\n    if len(arr) == 0:\n        return True\n    # if even number of items\n    if len(arr) % 2 == 0:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n    # if odd number of items\n    elif len(arr) % 2!= 0:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n            if arr[i] < arr[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    evens = list(filter(lambda x: x%2 == 0, lst1))\n    nums = lst1[:len(evens)]\n    if nums!= evens:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    lst1 = [num for num in lst1 if num % 2 == 0]\n    lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(lst1) > len(lst2):\n        lst1, lst2 = lst2, lst1\n    \n    if lst1 == lst2:\n        return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst1)!= len(lst2):\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # a few corner cases\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # write your code here\n    c = 0\n    for i in lst1:\n        if i%2 == 0:\n            c += 1\n    if c == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    even_list = []\n    for i in range(len(lst1)):\n        if lst1[i]%2 == 0:\n            even_list.append(lst1[i])\n    for i in range(len(lst2)):\n        if lst2[i]%2 == 0:\n            even_list.append(lst2[i])\n    if len(even_list) == len(lst1):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # *** YOUR CODE HERE ***\n    for i in lst1:\n        if i % 2 == 1:\n            return 'NO'\n    for i in lst2:\n        if i % 2 == 0:\n            return 'YES'\n    return 'NO'\n    \n    \n    # return \"YES\" if len(lst1) == len(lst2) and sum(1 for i in lst1 if i % 2 == 0) == sum(1 for i in lst2 if i % 2 == 0) else \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # as a hint, to see how this works, you can try:\n    # print(\"lst1: \", lst1)\n    # print(\"lst2: \", lst2)\n    # print(\"lst1[0]: \", lst1[0])\n    # print(\"lst1[1]: \", lst1[1])\n    # print(\"lst1[2]: \", lst1[2])\n    # print(\"lst1[3]: \", lst1[3])\n    # print(\"lst2[0]: \", lst2[0])\n    # print(\"lst2[1]: \", lst2[1])\n    # print(\"lst2[2]: \", lst2[2])\n    # print(\"lst2[3]: \", lst2[3])\n    # print(\"lst1[0] + lst2[0]: \", lst1[0] + lst2[0])\n    # print(\"lst1[1] + lst2[1]: \", lst1[1] + lst2[1])\n    # print(\"lst1[2] + lst2[2]: \", lst1[2] + lst2[2])\n    # print(\"lst1[3] + lst2[3]: \", lst1[3] + lst2[3])\n    # print(\"lst1: \", lst1)\n    # print(\"lst2: \", lst2)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    counts = {}\n    for letter in test:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    hist = {}\n    for i in test.lower():\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # your code here\n    histo = {}\n    for letter in test:\n        if letter not in histo:\n            histo[letter] = 1\n        else:\n            histo[letter] += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    d = {}\n    for item in test.lower().split():\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not test: return {}\n    hist = {}\n    for letter in test: hist[letter] = hist.get(letter, 0) + 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = dict()\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #replace this for solution\n    letter_dict = {}\n    for letter in test:\n        if letter in letter_dict:\n            letter_dict[letter] += 1\n        else:\n            letter_dict[letter] = 1\n    return letter_dict\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    for s in test:\n        if s not in d:\n            d[s] = 1\n        else:\n            d[s] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    hist = {}\n    for c in test:\n        if c not in hist:\n            hist[c] = 1\n        else:\n            hist[c] += 1\n    return hist\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    d = {}\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for j in c:\n        if j not in d:\n            return (s,\"False\")\n        else:\n            d[j] -= 1\n    if len(d)>0:\n        return (s,\"False\")\n    else:\n        return (s,\"True\")\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    for i in range(len(s)):\n        if s[i] in c:\n            s = s[:i] + s[i+1:]\n    return s,True if s == s[::-1] else False\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(c)>len(s): return ('','False')\n    result = ''\n    for i in range(len(s)-len(c)+1):\n        if s[i:i+len(c)]==c:\n            if s[i:]==s[i:][::-1]:\n                result = s[i:i+len(c)]\n                return (result,True)\n    return ('','False')\n    \n    \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #create a new string by spliting the string in the given list and join it\n    #reverse the result\n    #check if the new string is the same as the original\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (s[::-1].replace(c,''),True if s==s[::-1] else False)\n    \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.lower()\n    c = c.lower()\n    #for i in range(len(s)):\n    #    if s[i] in c:\n    #        s = s.replace(s[i],'')\n    s = s.replace(c,'')\n    #s = s[::-1]\n    #print(s)\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)\n        \ns = 'abcde'\nc = 'ae'\nresult = reverse_delete(s,c)\nprint(result)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = list(s)\n    c = list(c)\n    check = True\n    for i in range(len(s)):\n        if s[i] in c:\n            check = False\n            s.pop(i)\n    if check == True:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    char_list = []\n    char_list = list(s)\n    char_list_rev = []\n    #step 1\n    for i in range(len(c)):\n        char_list_rev.append(c[-i-1])\n    char_list_rev.reverse()\n    print(char_list_rev)\n    print(char_list)\n    #step 2\n    if char_list == char_list_rev:\n        return (''.join(char_list),True)\n    return (''.join(char_list),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return(s[::-1],s==s[::-1])\n    \ndef reverse_string_words(s):\n    \"\"\"Task\n    Given a string, your task is to remove all spaces from both ends and reverse the string word by word.\n    For example,\n    Given s = \"Hello World\",\n    return \"eloll World\"\n    If the string has leading or trailing spaces, you should remove them.\n    If there are multiple spaces between words,\n    replace them with a single space''.\n    Note:\n    In a word only contains letters and spaces, no other characters.\n    The words in the result are separated by a single space.\n    \"\"\"\n    return s.replace(\" \",\"\").strip().title()\n    \ndef length_of_longest_word(s):\n    \"\"\"Task\n    Given a string, your task is to find the length of the longest word(s).\n    If there are multiple words, return the length of the first word.\n    \"\"\"\n    return max([len(word) for word in s.split()])\n    \ndef is_palindrome(s):\n    \"\"\"Task\n    Given a string, your task is to check if it is a palindrome.\n    A palindrome is a word or phrase that reads the same forwards and backwards.\n    \"\"\"\n    s=s.lower()\n    return s == s[::-1]\n    \ndef is_palindrome_again(s):\n    \"\"\"Task\n    Given a string, your task is to check if it is a palindrome.\n    A palindrome is a word or phrase that reads the same forwards and backwards.\n    \"\"\"\n    return s==s[::-1]\n    \ndef every_other_letter(s):\n    \"\"\"Task\n    Given a string, your task is to print every other letter in the string.\n    The first letter should be written first.\n    Don't print any spaces.\n    \"\"\"\n    return s[::2]\n    \ndef every_other_letter_again(s):\n    \"\"\"Task\n    Given a string, your task is to print every other letter in the string.\n    The first letter should be written first.\n    Don't print any spaces.\n    \"\"\"\n    return s[::2]\n    \ndef front_back(s):\n    \"\"\"Task\n    Given a string, your task is to print its first and last characters reversely.\n    \"\"\"\n    return s[:1] + s[-1:]\n    \ndef front_back_again(s):\n    \"\"\"Task\n    Given a string, your task is to print its first and last characters reversely.\n    \"\"\"\n    return s[:1] + s[-1:]\n    \ndef front3(s):\n    \"\"\"Task\n    Given a string, your task is to print the first 3 characters in reverse order.\n    If the length of the given string is less than 3,\n    then return whatever there is, not even the empty string.\n    \"\"\"\n    return s[:3] if len(s)>=3 else s[:1]\n    \ndef front3_again(s):\n    \"\"\"Task\n    Given a string, your task is to print the first 3 characters in reverse order.\n    If the length of the given string is less than 3,\n    then return whatever there is, not even the empty string.\n    \"\"\"\n    return s[:3] if len(s)>=3 else s[:1]\n    \ndef string_splosion(s):\n    \"\"\"Task\n    Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".\n    The string does not have to be just \"Code\" but can be any other string\n    that contains the letters in the string.\n    \"\"\"\n    return s[:0:-1] + s[:0]\n    \ndef string_splosion_again(s):\n    \"\"\"Task\n    Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".\n    The string does not have to be just \"Code\" but can be any other string\n    that contains the letters in the string.\n    \"\"\"\n    return s[:0:-1] + s[:0]\n    \ndef without_end(s):\n    \"\"\"Task\n    Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".\n    The string does not have to be just \"Code\" but can be any other string\n    that contains the letters in th"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    #Get the index of c in s\n    indx = 0\n    while indx < len(s):\n        if s[indx] == c[0]:\n            break\n        indx += 1\n    \n    #get the result string\n    result = \"\"\n    for i in range(indx,len(s)):\n        result += s[i]\n    result = result[::-1]\n    \n    #check if the result is palindrome\n    if result == s:\n        return (result,True)\n    else:\n        return (result,False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    output = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j == '0':\n                count += 1\n        count += count % 2\n        output.append(f\"the number of odd elements {count}n the str{count}ng {i} of the {count}nput.\")\n    return output\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst),i+1,i+1) for i in range(len(lst)) if not len(lst[i])%2==0]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_count = []\n    for i in lst:\n        total = 0\n        for j in i:\n            if j!= '0' and j!= '1':\n                total += 1\n        odd_count.append(\"the number of odd elements {}n the str{}n of the {}nput.\".format(total, len(i), len(i)))\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [str(len(set(x))) + \" the number of odd elements \" + str(x) + \" of the \" + str(x) + \" input.\" for x in lst]"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_counts = []\n    for i in range(len(lst)):\n        odds = 0\n        for char in lst[i]:\n            if (ord(char) % 2)!= 0:\n                odds += 1\n        odd_counts.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(odds, i+1, i+1))\n    return odd_counts\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in lst:\n        lst[lst.index(i)] = sum([1 for i in i if i % 2!= 0])\n    return lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ['the number of odd elements {}n the str{}n of the {}nput.'.format(n,n,n) for n in range(1,len(lst)+1) if len(lst[n-1]) % 2 == 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ([\"the number of odd elements {} of the {}.\".format(len(odd_num), element) for element in lst])\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ['the number of odd elements {}n the str{} of the {}nput.'.format(len(lst), i+1, i+1) for i, j in enumerate(lst) if list(filter(lambda x: x % 2!= 0, map(int, j.split(\"0\"))))]\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert nums, 'Empty nums'\n    \n    min_sum = float('inf')\n    current_sum = 0\n    for n in nums:\n        current_sum += n\n        \n        if current_sum <= min_sum:\n            min_sum = current_sum\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Edge case: empty list\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    size = len(nums)\n    if size == 0:\n        return\n    \n    min_sum = min(nums)\n    max_sum = max(nums)\n    \n    subarray_sum = 0\n    for i in range(0, size):\n        subarray_sum = max(subarray_sum + nums[i], nums[i])\n        if subarray_sum < min_sum:\n            min_sum = subarray_sum\n            \n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            \n    if min_sum == max_sum:\n        return min_sum\n    else:\n        return min_sum + max_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not nums:\n        return 0\n    best = nums[0]\n    curr = nums[0]\n    for i in range(1, len(nums)):\n        curr = min(nums[i], curr + nums[i])\n        best = min(best, curr)\n    return best\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    curr_sum = 0\n    min_sum = float('inf')\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Solution 1: Using Sum\n    # Time: O(n)\n    # Space: O(1)\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    current_sum = 0\n    result = float('inf')\n    for i in range(len(nums)):\n        if current_sum < 0:\n            current_sum = nums[i]\n        else:\n            current_sum += nums[i]\n        result = min(current_sum, result)\n    return result\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not nums:\n        return -1\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lo, hi = 0, 0\n    total = float('inf')\n    while hi < len(nums):\n        if total < nums[hi]:\n            total = nums[hi]\n            hi += 1\n        else:\n            total -= nums[lo]\n            lo += 1\n    return total\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # create a sliding window, going left to right\n    # for every window, we check if the current sum is smaller than the minimum\n    # substring, if it is, we update the minimum sum, if it is not, we don't\n    # update the minimum sum\n    # once we run out of elements in the array, we need to return the minimum sum\n    # note that we don't need to check the end of the array, since we can't have\n    # a negative sum\n    \n    curr_sum = 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        curr_sum += nums[i]\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return min_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Approach 1: Brute Force\n    # Time Complexity: O(n*n*c)\n    # Space Complexity: O(1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                return math.inf\n    \n    return rec_max_fill(grid, capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # edge cases\n    if not grid or not grid[0]:\n        return 0\n    if not grid[0][0]:\n        return math.inf\n    if not capacity:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #Approach 1:\n    #O(N * W) time | O(N * W) space\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = {}\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return math.ceil(sum([sum(row) for row in grid]) / capacity)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # n = len(grid)\n    # m = len(grid[0])\n    # table = [[0]*(m+1) for _ in range(n+1)]\n    # for i in range(1, n+1):\n    #     for j in range(1, m+1):\n    #         table[i][j] = grid[i-1][j-1] + table[i][j-1] + table[i-1][j] - table[i-1][j-1]\n    # for row in range(1, n+1):\n    #     for col in range(1, m+1):\n    #         if row == n and col == m:\n    #             table[row][col] = 0\n    #         else:\n    #             table[row][col] = table[row][col] + max(0, table[row][col+1]-capacity)\n    #             table[row][col] = table[row][col] + max(0, table[row+1][col]-capacity)\n    #             table[row][col] = table[row][col] + max(0, table[row+1][col+1]-capacity)\n    # return table[1][1]\n    n, m = len(grid), len(grid[0])\n    table = [[0]*(m+1) for _ in range(n+1)]\n    for row in range(1, n+1):\n        for col in range(1, m+1):\n            table[row][col] = grid[row-1][col-1] + table[row][col-1] + table[row-1][col] - table[row-1][col-1]\n    for row in range(1, n+1):\n        for col in range(1, m+1):\n            table[row][col] = table[row][col] + max(0, table[row][col+1]-capacity)\n            table[row][col] = table[row][col] + max(0, table[row+1][col]-capacity)\n            table[row][col] = table[row][col] + max(0, table[row+1][col+1]-capacity)\n    return table[1][1]\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for row in grid:\n    #     print(row)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not grid:\n        return 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # get the min row length\n    min_row_length = min([len(grid[i]) for i in range(len(grid))])\n    # iterate through the grid\n    for i in range(min_row_length):\n        # iterate through the rows\n        for j in range(len(grid)):\n            # if the current row is not empty\n            if grid[j][i]!= 0:\n                # check if the cell has the capacity\n                if grid[j][i] <= capacity:\n                    # if there is enough water\n                    if i + 1 < len(grid[j]):\n                        # fill the next cell\n                        if grid[j][i + 1] == 1:\n                            grid[j][i] = 1\n                            grid[j][i + 1] = 0\n                            # iterate through the next cell\n                            for k in range(i + 2, len(grid[j])):\n                                # update the water\n                                grid[j][k] = 1\n                                # check if the cell has the capacity\n                                if k + 1 < len(grid[j]):\n                                    if grid[j][k + 1] == 1:\n                                        grid[j][k] = 0\n                        # otherwise add the water\n                        else:\n                            grid[j][i] = 1\n                            # iterate through the next cell\n                            for k in range(i + 1, len(grid[j])):\n                                # update the water\n                                grid[j][k] = 1\n                                # check if the cell has the capacity\n                                if k + 1 < len(grid[j]):\n                                    if grid[j][k + 1] == 1:\n                                        grid[j][k] = 0\n    # check if the entire grid was filled\n    for i in range(len(grid)):\n        if sum([v == 0 for v in grid[i]]) > 0:\n            return 0\n    # get the max fill\n    max_fill = max([sum([v == 1 for v in grid[i]]) for i in range(len(grid))])\n    return max_fill\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Write your code here\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: (1, -x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda i: ((bin(i).count(\"1\"), i), i))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # do your thing\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # print(arr)\n    # https://stackoverflow.com/questions/7411290/counting-number-of-ones-in-binary-representation-in-python\n    # This is a way of finding the length of the binary representation\n    # https://stackoverflow.com/questions/26873638/counting-number-of-ones-in-binary-representation\n    # bin(num) # this returns the binary representation of the number\n    # how to get the number with the most ones\n    # 2^(n-1) -1 since the first bit is 0\n    # count = 0\n    # for x in arr:\n    #     count += bin(x).count('1')\n    # print(count)\n    # if count <= 0:\n    #     return -1\n    # else:\n    #     count = 0\n    #     for x in arr:\n    #         count += bin(x).count('1')\n    #     return count\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (x*2,x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (sum(bin(x).count(\"1\")), x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower() not in \"aeiou\":\n                if n > 0:\n                    if s[i].lower() not in words:\n                        words.append(s[i].lower())\n                        n -= 1\n                    if n == 0:\n                        return words\n        elif s[i] == \" \":\n            if n > 0:\n                if words == []:\n                    return words\n                if words[-1] not in words:\n                    words.append(words[-1])\n                    n -= 1\n                if n == 0:\n                    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = []\n    for i in s.split():\n        n_consonants = 0\n        for j in i.lower():\n            if j in \"bcdfghjklmnpqrstvwxyz\":\n                n_consonants += 1\n        if n_consonants == n:\n            words.append(i)\n    return words\n    \ndef test_select_words():\n    assert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n    assert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n    assert select_words(\"simple white space\", 2) == []\n    assert select_words(\"Hello world\", 4) == [\"world\"]\n    assert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n    print('You passed all the tests! Congrats!')\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if s==None:\n        return []\n    else:\n        s = s.split()\n        temp = []\n        for word in s:\n            if n >= len(word) and word.count(' ') == 0 and word.count('-') == 0 and word.count('\\'') == 0:\n                if word not in temp:\n                    temp.append(word)\n        return temp\n        \n    return []\n        \nif __name__==\"__main__\":\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3)"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return []\n    if n < 1:\n        return []\n    words = s.split()\n    ans = []\n    for i in range(len(words)):\n        if s.count(words[i][0]) == n:\n            ans.append(words[i])\n    return ans\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s == \"\":\n        return []\n    else:\n        return [s[i] for i in range(len(s)) if s.count(s[i]) == n]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = s.split()\n    res = []\n    for word in words:\n        if len(word) == n:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = []\n    if len(s) == 0:\n        return words\n    for word in s.split():\n        if len(word) <= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words_list = []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [word for word in s.split() if len(word) == n and is_consonant(word)]\n    "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    s = s.lower()\n    if len(s) < n:\n        return []\n    return [s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1) if s[i:j].isalpha() and s[i:j].islower() and s[i].isalpha() and s[i].islower()]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    word = word.lower()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    closest = \"\"\n    for i in range(len(word) - 1):\n        if word[i] in \"aeiou\":\n            if word[i + 1] in \"aeiou\" and word[i]!= word[i + 1]:\n                closest = word[i + 1]\n                break\n    return closest\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n        else:\n            return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    word = word.lower()\n    vowels = ['a','e','i','o','u']\n    count = 0\n    vowel_cons = set(vowels)\n    vowel_cons_set = vowel_cons.copy()\n    vowel_cons_set.remove(word[0])\n    while count < len(word):\n        if word[count] in vowel_cons_set:\n            if count == 0:\n                return word[count]\n            elif count > 0 and count < len(word):\n                if word[count-1] in vowel_cons and word[count+1] in vowel_cons:\n                    return word[count]\n        count += 1\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    word = word.lower()\n    vowels = \"aeiou\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    word = word.lower()\n    for letter in word[::-1]:\n        if letter in VOWELS:\n            return letter\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    word = word.upper()\n    vowels = 'AEIOU'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    right_vowel = word[0]\n    for letter in word[1:]:\n        if letter in vowels:\n            right_vowel = letter\n            break\n    return right_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for i, letter in enumerate(word[::-1]):\n        if letter in vowels:\n            return word[i:]\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # The sequence of the string\n    seq = []\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Convert the string to list\n    input_list = list(lst)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Approach 1\n    # Build a Tree of the string\n    # Check whether the tree is balanced or not\n    # Return True if the tree is balanced\n    # Else return False\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    stack = []\n    for paren in lst:\n        if paren == '(':\n            stack.append(paren)\n        else:\n            if len(stack) == 0:\n                return 'No'\n            else:\n                stack.pop()\n    return 'Yes' if len(stack) == 0 else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while lst:\n        if lst[0] == '(':\n            if not lst[1].endswith(')'):\n                return 'No'\n            lst.pop(0)\n            lst.pop(0)\n            lst.pop(0)\n        else:\n            if not lst[0].endswith(')'):\n                return 'No'\n            lst.pop(0)\n            lst.pop(0)\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = sorted(lst)\n    op = []\n    ch = []\n    for i in lst:\n        if i == '(':\n            op.append(i)\n        else:\n            if len(op) > 0:\n                op.pop()\n            else:\n                ch.append(i)\n    if len(op) > 0 or len(ch) > 0:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0 or len(lst) == 1:\n        return 'Yes' if len(lst) == 0 else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # S = '(' + match_parens(lst[1:]) + ')'\n    S = '(' + match_parens(lst[1:]) + ')'\n    if lst[0] == ')' and S.count('(') == S.count(')'):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return False\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    stack = []\n    for char in lst:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    size = len(arr)\n    if k > size:\n        return arr\n    max_val = arr[0]\n    idx = 0\n    for i in range(1, k + 1):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            idx = i\n    return arr[:idx + 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Write your solution here\n    n = len(arr)\n    if k >= n:\n        return arr\n    max_value = max(arr[:k])\n    max_index = arr.index(max_value)\n    # max_index = len(arr) - k\n    # print(max_index)\n    return arr[max_index:] + arr[:max_index]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert k <= len(arr)\n    \n    stack = []\n    for i in range(k):\n        while stack and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        stack.append(i)\n    \n    return stack\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return heapq.nlargest(k, arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def sort(arr, k):\n        # max_sort(arr, 0, len(arr) - 1, k)\n        if k <= 1:\n            return arr\n        l = 0\n        r = len(arr) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid] < arr[r]:\n                r = mid\n            elif arr[mid] > arr[r]:\n                l = mid + 1\n            else:\n                r = mid\n        return arr[l : l + k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr.sort()\n    return arr[-k:]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Brute force\n    # Time: O(n ^ 2)\n    # Space: O(1)\n    # i = 0\n    # max_idx = 0\n    # while i < k:\n    #     max_val = -float(\"inf\")\n    #     for j in range(len(arr)):\n    #         if arr[j] > max_val:\n    #             max_val = arr[j]\n    #             max_idx = j\n    #     arr[max_idx] = -float(\"inf\")\n    #     i += 1\n    # return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    size = len(arr)\n    if size == 0: return arr\n    if size == 1: return arr[:k]\n    if k == size: return arr\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # solution 1\n    # if not k or k == 0:\n    #     return []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(arr)):\n        if count < k and arr[i] > arr[count]:\n            count += 1\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    ret = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 1:\n            ret += lst[i]\n    return ret\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    oddsum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            oddsum = oddsum + lst[i]\n    return oddsum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # convert list into set and then use set.intersection() to get the intersection elements\n    s = set(lst)\n    return sum([x for x in s if x%2==1 and x%2!=0]"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([x for i, x in enumerate(lst) if i % 2!= 0])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) < 2:\n        return 0\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    oddsum = 0\n    for i, val in enumerate(lst):\n        if (i % 2 == 1):\n            oddsum += val\n    return oddsum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2))\n    \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(lst[::2])"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2))"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    if len(lst) == 0:\n        return sum\n    for i in range(0,len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    k_arr = arr[:k]\n    return sum(int(str(element)[:2]) for element in k_arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # corner case\n    if k == 0:\n        return 0\n    # my brute force solution\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(arr[:k])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    two_digit = 0\n    less_than_two = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert 1 <= len(arr) <= 100\n    assert 1 <= k <= len(arr)\n    res = 0\n    for i in range(k):\n        # search in arr\n        # while i < len(arr):\n        if len(str(arr[i])) > 2:\n            break\n        else:\n            res += arr[i]\n    return res\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    window = arr[:k]\n    result = sum(x*10 + y for x,y in window)\n    return result\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert len(arr) >= k\n    return sum(sorted(arr)[k:][:2])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(k):\n        result += arr[i]\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if k > len(arr):\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # # Solution 1\n    # # Time: O(n) | Space: O(n)\n    # res = 0\n    # for i in range(k):\n    #     res += arr[i]\n    # for i in range(k, len(arr)):\n    #     res += arr[i]\n    # return res\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd_seq = []\n    curr = 1\n    while curr!= 1:\n        if curr % 2 == 1:\n            odd_seq.append(curr)\n        curr = get_next_odd_collatz(curr)\n    return sorted(odd_seq)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odds = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [n] + get_odd_collatz(collatz(n))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_collatz_seq = []\n    for i in range(2, n + 1):\n        if is_odd(i):\n            odd_collatz_seq.append(i)\n        if is_odd(collatz(i)):\n            odd_collatz_seq.append(collatz(i))\n    odd_collatz_seq.sort()\n    return odd_collatz_seq\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # for each n in collatz sequence\n    # if n % 2 == 1\n    # add to result\n    # if n == 1\n    # stop and return result\n    \n    result = []\n    sequence = [n]\n    \n    while n!= 1:\n        if n % 2 == 1:\n            result.append(n)\n            n = n * 3 + 1\n            sequence.append(n)\n        else:\n            n = n // 2\n            sequence.append(n)\n            \n    result.append(1)\n    return sequence\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    collatz_sequence = []\n    curr = 1\n    while curr > 0:\n        if curr % 2 == 1:\n            collatz_sequence.append(curr)\n        curr = get_next_odd(curr)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # create a list with the odd numbers\n    odd_collatz = []\n    # create a list to store the nums of collatz seq\n    collatz = []\n    collatz.append(n)\n    while n not in collatz:\n        # if the num is even\n        if n % 2 == 0:\n            collatz.append(n)\n            n = int(n / 2)\n        # if the num is odd\n        elif n % 2 == 1:\n            collatz.append(n)\n            n = 3*n + 1\n    odd_collatz.extend(collatz)\n    return sorted(odd_collatz)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not isinstance(n, int) or n < 1:\n        return None\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    # Not really used. \n    # for i in range(1, n + 1):\n    #     x = i\n    #     # Even\n    #     if x % 2 == 0:\n    #         x = int(x / 2)\n    #         res.append(x)\n    #     # Odd\n    #     else:\n    #         x = 3 * x + 1\n    #         res.append(x)\n    # return res\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    try:\n        \n        if len(date) == 0:\n            return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if date.strip() == '':\n        return False\n    try:\n        splitted_date = date.split('-')\n        if len(splitted_date)!= 3:\n            return False\n        else:\n            year, month, day = splitted_date\n            if month.strip() == '':\n                return False\n            else:\n                month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n                if month not in month_name:\n                    return False\n                elif len(month)!= 2:\n                    return False\n                else:\n                    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #if the date string is empty return false\n    if date == \"\":\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        return date!= \"\" and (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 31 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 30 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 30 and\n                1 <= int(date.split('-')[1]) <= 12 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        ) or (\n                1 <= int(date.split('-')[0]) <= 31 and\n                1 <= int(date.split('-')[1]) <= 1 and\n                1 <= int(date.split('-')[2]) <= int(datetime.now().strftime('%Y'))\n        )\n    except:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    months = ['January','March','May','July','August','October','December']\n    days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n    months_months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    if date[0] in months or date[0] == '2':\n        if int(date[1]) not in days:\n            return False\n        if date[2] not in years:\n            return False\n        return True\n    if int(date[1]) not in days:\n        return False\n    if date[0] not in months_months:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if date == None or date == '':\n        return False\n    \n    try:\n        #date = date.split('-')\n        date = str(date).split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if month in (1,3,5,7,8,10,12):\n            if day < 1 or day > 31:\n                return False\n        if month in (4,6,9,11):\n            if day < 1 or day > 30:\n                return False\n        if month == 2:\n            if year < 1 or year > 20:\n                return False\n            if day < 1 or day > 29:\n                return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if date == \"\":\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    date = date.split('-')\n    if date[0]!= '' and len(date[0]) == 3 and len(date[1]) == 2 and len(date[2]) == 4:\n        day = int(date[1])\n        month = int(date[0])\n        year = int(date[2])\n        if month > 12:\n            return False\n        elif month == 1:\n            if day > 31:\n                return False\n        elif month == 2:\n            if day > 29:\n                return False\n        elif month == 3:\n            if day > 31:\n                return False\n        elif month == 4:\n            if day > 30:\n                return False\n        elif month == 5:\n            if day > 31:\n                return False\n        elif month == 6:\n            if day > 30:\n                return False\n        elif month == 7:\n            if day > 31:\n                return False\n        elif month == 8:\n            if day > 31:\n                return False\n        elif month == 9:\n            if day > 30:\n                return False\n        elif month == 10:\n            if day > 31:\n                return False\n        elif month == 11:\n            if day > 30:\n                return False\n        elif month == 12:\n            if day > 31:\n                return False\n        elif month > 12:\n            return False\n        elif month == 0:\n            return False\n        if year < 2040:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    date_format = \"%m-%d-%Y\"\n    date_pattern = re.compile(date_format)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if date == \"\" or date == None:\n        return False\n    d1 = date.split(\"-\")\n    if len(d1)!= 3:\n        return False\n    if not isinstance(d1[0], str) or not isinstance(d1[1], str) or not isinstance(d1[2], str):\n        return False\n    if not (1 <= int(d1[0]) <= 12 and 1 <= int(d1[1]) <= 31 and 2010 <= int(d1[2]) <= 2020):\n        return False\n    if not (1 <= int(d1[1]) <= 31 and 1 <= int(d1[0]) <= 12 and (int(d1[1]) <= 31 and int(d1[0]) <= 31)):\n        return False\n    if not (1 <= int(d1[0]) <= 12 and 1 <= int(d1[1]) <= 31 and 1 <= int(d1[2]) <= 2020):\n        return False\n    if not (1 <= int(d1[0]) <= 12 and 1 <= int(d1[1]) <= 31 and 1 <= int(d1[2]) <= 2020):\n        return False\n    return True\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    return txt.split()\n    \ndef top_n_words(txt, n):\n    '''\n    Given a string of words, return a list of the top n words in the text, ordered in decreasing order of frequency.\n    If there is a tie, choose the word that appears earliest in the text.\n    Examples\n    top_n_words(\"The quick brown fox jumps over the lazy dog\", 2) \u279e [\"quick\", \"over\"]\n    top_n_words(\"The quick brown fox jumps over the lazy dog\", 1) \u279e [\"brown\"]\n    top_n_words(\"The quick brown fox jumps over the lazy dog\", 4) \u279e [\"fox\", \"jumps\", \"dog\"]\n    '''\n    # Your code here\n    txt = txt.lower()\n    txt = split_words(txt)\n    d = {}\n    for word in txt:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    d = sorted(d.items(),key=lambda x: x[1],reverse=True)\n    top = d[:n]\n    return top\n    \ndef top_n_words_alt(txt, n):\n    '''\n    Given a string of words, return a list of the top n words in the text, ordered in decreasing order of frequency.\n    If there is a tie, choose the word that appears earliest in the text.\n    Examples\n    top_n_words_alt(\"The quick brown fox jumps over the lazy dog\", 2) \u279e [\"quick\", \"over\"]\n    top_n_words_alt(\"The quick brown fox jumps over the lazy dog\", 1) \u279e [\"brown\"]\n    top_n_words_alt(\"The quick brown fox jumps over the lazy dog\", 4) \u279e [\"fox\", \"jumps\", \"dog\"]\n    '''\n    # Your code here\n    txt = txt.lower()\n    txt = split_words(txt)\n    txt = sorted(txt,reverse=True)\n    d = {}\n    for word in txt:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    top = sorted(d.items(),key=lambda x: x[1],reverse=True)[:n]\n    return top\n    \ndef top_n_words_alt2(txt, n):\n    '''\n    Given a string of words, return a list of the top n words in the text, ordered in decreasing order of frequency.\n    If there is a tie, choose the word that appears earliest in the text.\n    Examples\n    top_n_words_alt2(\"The quick brown fox jumps over the lazy dog\", 2) \u279e [\"quick\", \"over\"]\n    top_n_words_alt2(\"The quick brown fox jumps over the lazy dog\", 1) \u279e [\"brown\"]\n    top_n_words_alt2(\"The quick brown fox jumps over the lazy dog\", 4) \u279e [\"fox\", \"jumps\", \"dog\"]\n    '''\n    # Your code here\n    txt = txt.lower()\n    txt = split_words(txt)\n    txt = sorted(txt,reverse=True)\n    d = {}\n    for word in txt:\n        if word in d:\n            d[word] += 1\n        else:\n            d[word] = 1\n    top = sorted(d.items(),key=lambda x: x[1],reverse=True)[:n]\n    return top\n    \ndef top_n_words_alt3(txt, n):\n    '''\n    Given a string of words, return a list of the top n words in the text, ordered in decreasing order of frequency.\n    If there is a tie, choose the word that appears earliest in the text.\n    Examples\n    top_n_words_alt3(\"The quick brown fox jumps over the lazy dog\", 2) \u279e [\"quick\", \"over\"]\n    top_n_words_alt3(\"The quick brown fox jumps over the lazy dog\", 1) \u279e [\"brown\"]\n    top_n_words_alt3(\"The quick brown fox jumps over the lazy dog\", 4) \u279e [\"fox\", \"jumps\", \"dog\"]\n    '''\n    # Your code here\n    txt = txt.lower()\n    txt = split_words(txt)\n    txt = sorted(tx"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    list_of_words = txt.split()\n    return list_of_words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = re.findall('\\w+', txt)\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    txt = txt.split()\n    return txt\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = txt.split()\n    return words\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt.split()\n    \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 1:\n        return True\n    else:\n        for i in range(1,len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i+1] < lst[i]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # checks if list has more than 1 duplicate of the same number\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # ===TODO===\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (lst[:] == sorted(lst))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (all([i > j for i, j in zip(lst[:-1], lst[1:])]) and len(lst) > 2)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_lst = sorted(lst)\n    return sorted_lst == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Make a copy of the list\n    lst2 = copy.deepcopy(lst)\n    # Sort the list and keep track of the index of the element of interest\n    lst2.sort()\n    # Return True if elements are in order, else return False\n    return lst == lst2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return lst == sorted(set(lst))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # We'll need an array of size len(lst) + 1, so we'll need to add one more\n    # number to the array\n    # We'll also need an array of size len(lst) to keep track of the number\n    # which is currently being examined\n    # We'll need another array of size len(lst) to keep track of how many times\n    # the number is repeated\n    # So we'll create 2 arrays of the size of len(lst) + 1\n    # Then we'll create a 2nd array of size len(lst)\n    # Then we'll create a 3rd array of size len(lst)\n    # Then we'll add 1 to the last element in each array\n    # And then we'll check if the 2nd array is sorted or not\n    \n    # So we'll first create an array of size len(lst) + 1\n    # Then we'll add 1 to the last element in each array\n    # And then we'll check if the 2nd array is sorted or not\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # your code here\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Edge case\n    if interval1[0] >= interval2[1] or interval2[0] >= interval1[1]:\n        return \"NO\"\n    # Brute force\n    if interval1 == interval2:\n        return \"YES\"\n    # Intersection\n    ans = float('inf')\n    for i in range(1, min(interval1[1], interval2[1]) + 1):\n        if interval1[1] >= interval2[0] + i:\n            if ans > i:\n                ans = i\n    return str(ans)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    #---start your code---\n    # (1, 2) = (2, 3)\n    # (2, 4) = (3, 4)\n    # (3, 4) = (4, 5)\n    # (4, 5) = (5, 6)\n    # (5, 6) = (6, 7)\n    # (6, 7) = (7, 8)\n    # (7, 8) = (8, 9)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO: complete this function\n    return 'YO'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Test cases:\n    # (1, 2) and (2, 3) -> No Intersection\n    # (1, 2) and (2, 4) -> Yes Intersection\n    # (2, 3) and (2, 4) -> Yes Intersection\n    # (1, 2) and (2, 3) and (3, 4) -> Yes Intersection\n    # (1, 2) and (2, 3) and (4, 5) -> Yes Intersection\n    # (0, 4) and (1, 2) and (2, 3) -> No Intersection\n    # (0, 4) and (1, 2) and (2, 3) and (3, 4) and (4, 5) -> Yes Intersection\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a, b = sorted(interval1)\n    c, d = sorted(interval2)\n    if a <= c <= b <= d:\n        if gcd(a - c, d - c)!= 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    intersection = 0\n    if intersection < 0:\n        return 'NO'\n    elif intersection == 0:\n        return 'NO'\n    else:\n        for i in range(interval1[0], interval1[1]+1):\n            if i in range(interval2[0], interval2[1]+1):\n                intersection += 1\n        if not isPrime(intersection):\n            return 'NO'\n        else:\n            return 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    if (interval1[0] > interval2[0]) and (interval1[1] < interval2[1]):\n        return \"YES\"\n    elif (interval1[0] > interval2[0]) and (interval1[1] > interval2[1]):\n        return \"NO\"\n    elif (interval1[0] < interval2[0]) and (interval1[1] > interval2[1]):\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # store the intervals which ends with the lower boundary\n    interval_lower = []\n    for interval in interval1:\n        if interval[0] < interval1[0]:\n            break\n        elif interval[0] == interval1[0]:\n            interval_lower.append(interval)\n    # store the intervals which ends with the higher boundary\n    interval_higher = []\n    for interval in interval2:\n        if interval[1] > interval2[1]:\n            break\n        elif interval[1] == interval2[1]:\n            interval_higher.append(interval)\n    \n    if len(interval_lower) == 0 and len(interval_higher) == 0:\n        return \"NO\"\n    \n    if len(interval_lower)!= 0 and len(interval_higher)!= 0:\n        interval_lower.sort(key=lambda x: x[0])\n        interval_higher.sort(key=lambda x: x[1])\n        # get the intersection\n        if interval_lower[0][0] <= interval_higher[0][0]:\n            start = max(interval_lower[0][0], interval_higher[0][0])\n            end = min(interval_lower[-1][1], interval_higher[-1][1])\n            if end - start + 1!= 1:\n                return \"NO\"\n        else:\n            start = max(interval_lower[-1][1], interval_higher[0][1])\n            end = min(interval_lower[0][0], interval_higher[-1][0])\n            if end - start + 1!= 1:\n                return \"NO\"\n        return \"YES\"\n    elif len(interval_lower) == 0:\n        return \"YES\"\n    elif len(interval_higher) == 0:\n        return \"NO\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr:\n        return None\n    summ = 0\n    for x in arr:\n        if x > 0:\n            summ += x\n        elif x < 0:\n            summ -= x\n        elif x == 0:\n            pass\n    return summ\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not arr: return\n    return sum([(abs(i) * (abs(i) + 1) if i < 0 else i * (i + 1))\n        for i in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if arr == []: return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([abs(val) * sign for val, sign in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr:\n        return None\n    sum = 0\n    for i in arr:\n        if i == 0:\n            continue\n        if i > 0:\n            sum += i\n        elif i < 0:\n            sum -= i\n    return sum\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([i * sign for i, sign in enumerate(arr) if sign!= 0])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    num = 0\n    for i in arr:\n        num += abs(i) * abs(i)\n    return num\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for i in arr:\n        if i > 0:\n            total += i\n    if total < 0:\n        return total * (-1)\n    else:\n        return total"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if arr == []:\n        return None\n    prod = 1\n    for i in arr:\n        if i == 0:\n            continue\n        if i > 0:\n            prod *= i\n        elif i < 0:\n            prod *= -i\n    return prod"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    m, n = len(grid), len(grid[0])\n    visited = set()\n    queue = [(i, j) for i in range(m) for j in range(n) if (i, j) not in visited]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # handle corner case\n    if len(grid) == 0 or len(grid[0]) == 0: return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # PREPARE DATA\n    grid_size = len(grid)\n    visited = set()\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if k < 1 or k > len(grid) * len(grid[0]):\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m, n = len(grid), len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # edge case\n    if len(grid) == 1 and len(grid[0]) == 1:\n        return grid\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if k == 1:\n        return grid[0]\n    res = []\n    visited = set()\n    def helper(start, depth):\n        if start in visited:\n            return\n        if depth == k:\n            res.append(start)\n        else:\n            visited.add(start)\n            for i in range(len(grid)):\n                if i not in visited:\n                    helper(i, depth + 1)\n    helper(0, 0)\n    return res"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    m, n = len(grid), len(grid[0])\n    memo = {}\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # DFS\n    # \n    def dfs(grid, m, n, k, visited):\n        if k == 0:\n            return [i for i in range(m*n)]\n        # edge case\n        if m == 0 or n == 0:\n            return []\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    return [1, 1, 2] + tri(n - 1) if n % 2 else [1] + tri(n - 2) + tri(n - 1)"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a, b = 1, 3\n    res = []\n    res.append(a)\n    res.append(b)\n    for i in range(2, n+1):\n        tmp = a + (b / 2)\n        a = b\n        b = tmp\n        res.append(tmp)\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(n, int):\n        raise ValueError(\"Argument should be a positive integer.\")\n    if n <= 0:\n        raise ValueError(\"Argument should be a positive integer.\")\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    a, b, c = 0, 1, 1\n    while n > 0:\n        if n == 1:\n            return [1, b, c]\n        if n == 2:\n            return [1, 1, b, c]\n        a, b, c = b, c, a + b + c\n        n -= 3\n    return a, b, c\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = []\n    a.append(3)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            a.append(a[i - 1] + a[i - 2])\n        else:\n            a.append(a[i - 1] + a[i - 2] + a[i - 3])\n    return a\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # My first attempt\n    '''\n    result = []\n    result.append(3)\n    result.append(1)\n    result.append(2)\n    for i in range(3, n + 1):\n        a = result[i - 1]\n        b = result[i - 2]\n        c = result[i - 3]\n        result.append(a + b + c)\n    return result\n    '''\n    \n    # A better solution\n    '''\n    def trib(n):\n        a, b, c = 1, 1, 1\n        for _ in range(1, n + 1):\n            yield a\n            a, b, c = b, c, a + b + c\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    else:\n        a = 1\n        b = 2\n        c = 0\n        nums = []\n        while len(nums) < n + 1:\n            c = a + b + c\n            nums.append(c)\n            a = b\n            b = c\n        return nums\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return []\n    ret = []\n    a, b, c = 3, 1, 0\n    while n:\n        ret.append(a)\n        a, b, c = b, c, a + b + c\n        n -= 1\n    return ret\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    else:\n        if n > 2:\n            return [1, 1, 1] + tri(n - 1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    tribonacci = (1,2,3)\n    if n <= 1:\n        return tribonacci[:n]\n    \n    tribonacci = tribonacci + (tribonacci[-1] + tribonacci[-2] + tribonacci[-3],)\n    if n <= 3:\n        return tribonacci[:n+1]\n    \n    return tribonacci"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # initialise\n    tri_sequence = [0, 3, 2]\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(int(i) % 2 for i in str(n))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % 2 == 0:\n        return 0\n    return sum(map(int, str(n)))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n % 10 % 2:\n        return n % 10 * digits(n//10)\n    else:\n        return digits(n//10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n <= 10:\n        return n\n    else:\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2!= 0:\n                product *= int(digit)\n        return product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while n > 0:\n        if n % 10 % 2:\n            return n % 10 * digits(n // 10)\n        n = n // 10\n    return 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    digits_product = 1\n    for i in range(1, n+1):\n        if i % 10 == 0:\n            digits_product = digits_product * 10\n        else:\n            digits_product = digits_product * i\n    return digits_product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(x % 2 for x in map(int, list(str(n))))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Make a list of the digits of n\n    digits = list(str(n))\n    # For each digit in the list of the digits,\n    # check if the digit is an odd number\n    odds = 0\n    for digit in digits:\n        if int(digit) % 2!= 0:\n            odds += 1\n    # If the number of odd digits is odd,\n    # return 0. If not, return the product.\n    if odds % 2 == 0:\n        return 0\n    else:\n        return product(digits)\n    \ndef product(digits):\n    \"\"\"Given a list of digits, return the product of those digits\n    For example, product([1,2,3,4]) == 24\n    \"\"\"\n    product = 1\n    for digit in digits:\n        product *= int(digit)\n    return product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 10:\n        return n\n    n, r = divmod(n, 10)\n    return n * digits(r) if r else n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return 0\n    else:\n        product = 1\n        while n > 0:\n            if n % 10 % 2 == 1:\n                product *= n % 10\n            n = n // 10\n        return product\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split the string, then find the brackets in the string\n    string = string.split(']')\n    # if the number of elements in the list is not equal to 1\n    if len(string)!= 1:\n        # check to see if there are nested brackets\n        for i in range(len(string)):\n            # check if there are nested brackets\n            if string[i].find('[]')!= -1:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if string.find('[')!=-1 and string.find(']')!=-1 and string[string.find('[')+1:string.find(']')].find('[')!= -1 else False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(string) < 3:\n        return False\n    s = []\n    if string[0] == '[' and string[len(string)-1] == ']':\n        return is_nested(string[1:len(string)-1])\n    for i in range(len(string)):\n        if string[i] == '[':\n            s.append(i)\n        if string[i] == ']':\n            if s!= []:\n                s.pop()\n            else:\n                return False\n    if len(s) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pattern = '\\[\\]'\n    if pattern not in string:\n        return False\n    return True if re.findall(pattern, string) else False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if (len(string) == 0):\n        return False\n    stack = []\n    for i in range(len(string)):\n        if (string[i] == \"[\"):\n            stack.append(i)\n        elif (string[i] == \"]\"):\n            if len(stack) == 0:\n                return False\n            elif (string[stack[-1]] == \"[\"):\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if string == '':\n        return False\n    string = list(string)\n    temp = ''\n    i = 0\n    while i < len(string):\n        if string[i] == '[':\n            temp = string[i]\n            i += 1\n            while i < len(string) and string[i] == '[':\n                temp += string[i]\n                i += 1\n            if temp == '':\n                return True\n            elif temp == ']' * len(temp):\n                return True\n            else:\n                temp = ''\n        i += 1\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l = []\n    for i in range(len(string)):\n        if string[i] == \"[\" and string[i+1] == \"[\" and string[i+2] == \"[\":\n            l.append(i)\n    if len(l) == 0:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] - 3 >= 0 and string[l[i]+1] == \"]\":\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not string:\n        return False\n    if not string[0]=='[':\n        return False\n    if not string[-1]==']':\n        return False\n    for i in range(len(string)-1):\n        if string[i]=='[':\n            if string[i+1]==']':\n                return True\n            if string[i+1]=='[':\n                return False\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    string = string.replace(' ', '')\n    if '[]' not in string:\n        return False\n    else:\n        sub_str = string.split('[]')\n        for element in sub_str:\n            if element == '':\n                sub_str.remove(element)\n        if len(sub_str) == 1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if type(string)!= str:\n        raise TypeError('Input must be a string')\n    \n    stack = []\n    \n    for i in range(len(string)):\n        if string[i] == '[':\n            stack.append('[')\n        elif string[i] == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return len(stack) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return round(sum([x**2 for x in lst]), 2)"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(map(lambda x: x ** 2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    lst = [int(i) if i!= int(i) else i for i in lst]\n    squared_lst =[x**2 for x in lst]\n    return sum(squared_lst)\n    \n    \nlst = [-2.4,1,1]\nprint(sum_squares(lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst_new = []\n    for i in lst:\n        lst_new.append(i**2)\n    return sum(lst_new)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    numbers = []\n    for number in lst:\n        numbers.append(number * number)\n        \n    return sum(numbers)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(i*i for i in lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return round(sum([i**2 for i in lst]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([x**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return sum([x * x for x in lst])\n    \n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return(sum(i**2 for i in lst))\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return not txt or txt[-1].isalpha() and txt.find(' ') == -1\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return not (txt[-1].isalpha() and txt[-1].isnumeric() and txt[-1] not in \" \")\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return not check_if_last_char_is_a_word(txt)[0]\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return \"\".join(txt.split(\" \")[-1]).isalpha()\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return not(txt and not txt[-1].isalpha() and not txt[-1].isnumeric())\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalpha() in \"aeiou\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return not txt[-1].isalpha() and not txt[-1] in [' ', '\\t', '\\n', '\\r']\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #pass\n    # check if last character is a letter\n    if is_string(txt):\n        return len(txt) > 0 and txt[-1].isalpha() and not is_word(txt)\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(txt)==0:\n        return False\n    return ord(txt[-1].lower())>=ord('a') and ord(txt[-1].lower())<=ord('z')\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return False if not txt else txt[-1].isalpha()\n    \nprint(check_if_last_char_is_a_letter(\"apple pie\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))\nprint(check_if_last_char_is_a_letter(\"\")"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Find the largest index which is not greater than or equal to its\n    # adjacent element and return it\n    # If no such index exists, return -1\n    if len(arr) <= 2: return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return i\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max([i for i in range(len(arr)) if arr[i] < arr[i + 1]])\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_index = -1\n    for i, x in enumerate(arr):\n        if x > arr[i - 1]:\n            max_index = i\n    return max_index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num_list = []\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            num_list.append(i)\n    print(num_list)\n    index = -1\n    for i in range(len(num_list)-1):\n        if num_list[i+1] == num_list[i]+1:\n            index = num_list[i]\n            break\n    return index\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    index = 0\n    for item in arr:\n        if item <= arr[index - 1]:\n            index += 1\n        else:\n            return index\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr.sort()\n    for i, val in enumerate(arr):\n        if val >= arr[i - 1]:\n            return i - 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(arr) < 3:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) <= 1:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] <= arr[i-1]:\n            return -1\n        i += 1\n    return i-1\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert lst, \"cannot test an empty list\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x = 0\n    y = 0\n    for i in lst:\n        if i > x:\n            x = i\n        elif i < y:\n            y = i\n    return (x, y)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if lst == [] or lst == None:\n        return None, None\n    elif lst == [0] or lst == [1]:\n        return None, None\n    else:\n        minimum = float(\"inf\")\n        maximum = float(\"-inf\")\n        negative_max = 0\n        positive_min = 0\n        for i in lst:\n            if i < 0:\n                if i > minimum:\n                    minimum = i\n                    negative_max = maximum\n                elif i < negative_max:\n                    negative_max = i\n            else:\n                if i > maximum:\n                    maximum = i\n                    positive_min = minimum\n                elif i > positive_min:\n                    positive_min = i\n        return minimum, maximum\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    negatives = []\n    positives = []\n    for i in lst:\n        if i < 0:\n            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n    if negatives and positives:\n        if len(negatives) < len(positives):\n            return negatives[0], positives[0]\n        else:\n            return negatives[0], positives[-1]\n    else:\n        return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Add your code here\n    return None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pos_lst = []\n    neg_lst = []\n    for num in lst:\n        if num > 0:\n            pos_lst.append(num)\n        elif num < 0:\n            neg_lst.append(num)\n    if len(pos_lst) == 0:\n        return (None, None)\n    else:\n        return (min(neg_lst), max(pos_lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # I'd like you to write a solution which doesn't use\n    # the * operator\n    if lst == []:\n        return (None, None)\n    if lst[0] >= 0:\n        return (lst[0], lst[0])\n    else:\n        return (None, lst[0])\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    neg_max = -1\n    neg_min = -1\n    pos_max = -1\n    pos_min = -1\n    for i in lst:\n        if i < 0:\n            if neg_max < i:\n                neg_max = i\n            if neg_min > i:\n                neg_min = i\n        else:\n            if pos_max < i:\n                pos_max = i\n            if pos_min > i:\n                pos_min = i\n    return (neg_max, neg_min), (pos_max, pos_min)"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Edge cases\n    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n        return (None, lst[0])\n    \n    # Pre-processing\n    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda x: x > 0, lst))\n    \n    # Calculations\n    if len(negatives) > 0:\n        smallest = negatives[0]\n        largest = negatives[-1]\n    else:\n        smallest = None\n        largest = None\n    if len(positives) > 0:\n        largest = positives[0]\n        smallest = positives[-1]\n    else:\n        largest = None\n        smallest = None\n    \n    # Formatting\n    if smallest == None and largest == None:\n        return (None, None)\n    if smallest == None:\n        return (None, largest)\n    if largest == None:\n        return (smallest, None)\n    return (smallest, largest)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a == b:\n        return None\n    if type(a) == float or type(a) == int:\n        if a > b:\n            return a\n        else:\n            return b\n    if type(b) == float or type(b) == int:\n        if b > a:\n            return b\n        else:\n            return a\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif type(a)!= type(b):\n        if type(a) == float:\n            if a > b:\n                return float(b)\n            elif a < b:\n                return float(a)\n            else:\n                return None\n        elif type(a) == str:\n            if a > b:\n                return b\n            elif a < b:\n                return a\n            else:\n                return None\n        else:\n            if a > b:\n                return a\n            elif a < b:\n                return b\n            else:\n                return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if type(a) == type(b):\n        return a\n    elif type(a)!= type(b):\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a == b:\n        return None\n    else:\n        return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a if a > b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a > b:\n        return a\n    elif a == b:\n        return None\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    if a < b:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if type(a) == str:\n        return None if a == str else b if type(b) == str else compare_one(float(a), float(b))\n    else:\n        return a if type(a) == type(b) else compare_one(float(a), float(b))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if is_even(n):\n        return (n-2) % 2 == 0\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return not is_sum_of_four_odd(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n in range(8, 15) and (n % 2 == 0)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n%2 == 0 and n//2 >= 4\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0 and n >= 4:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # n > 0\n    if n < 0:\n        return False\n    # n % 2 == 0\n    if n % 2!= 0:\n        return False\n    # n < 4\n    if n < 4:\n        return False\n    # sum of even numbers < n\n    sum_even = n\n    i = 3\n    while i <= n:\n        if sum_even >= i:\n            sum_even -= i\n        else:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    if n % 2 == 0:\n        n /= 2\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n % 2 == 0 and (n-2) % 2 == 0 and (n-4) % 2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(n):\n        if (n - i) % 2 == 0:\n            if is_even_number(n - i):\n                return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = 1\n    if n == 0:\n        return 1\n    for i in range(1, n):\n        res *= (i+1)\n    return res\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return math.factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 1\n    for i in range(1, n):\n        result *= i\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    return n * special_factorial(n - 1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return '-'.join(text.split())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join(\"_\" if \" \" in line else line for line in text.split())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    spaces = text.replace(\" \", \"_\")\n    spaces = spaces.replace(\"  \", \"-\")\n    return spaces\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return text.replace(' ', '_').replace('  ', '_')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \",\"-\").strip(\"-\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text.replace(' ', '_').replace('  ','_')\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    file_name = file_name.strip()\n    if(file_name.count('.') == 1):\n        if(file_name[0].isalpha()):\n            if(file_name.count('.') == 2 and (file_name.split('.')[1] in ['txt', 'exe', 'dll'])):\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if file_name.count('.')!= 1 or file_name[:1] not in 'abcdefghijklmnopqrstuvwxyz' or file_name[-3:] not in 'txt exe dll':\n        return 'No'\n    if file_name[:1] not in 'a-z' and file_name[:1] not in 'A-Z':\n        return 'No'\n    if file_name[-3:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(file_name) > 3 and file_name.count('.') == 1 and file_name[0].isalpha() and file_name[-3:] in ['txt', 'exe', 'dll']:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(file_name) >= 3 and file_name.find('.') > -1:\n        for letter in file_name:\n            if letter.isdigit() == False and not (ord(letter) >= ord('a') and ord(letter) <= ord('z') or ord(letter) >= ord('A') and ord(letter) <= ord('Z')):\n                return 'No'\n        if file_name[0].isalpha() == False:\n            return 'No'\n        if file_name[-3:].lower() == 'exe' or file_name[-3:].lower() == 'dll':\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(file_name) < 3 or file_name[0] < '0' or file_name[0] > '9' or file_name[1] < 'a' or file_name[1] > 'z' or file_name[2] < 'a' or file_name[2] > 'z' or file_name[2]!= '.' or file_name[3:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not len(file_name) or file_name[0] not in alph_letters or file_name[-1]!= '.':\n        return \"No\"\n    if len(file_name) > 3:\n        return \"No\"\n    if file_name[0] == '.':\n        return \"No\"\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if file_name.split('.')[0] == '':\n        return \"No\"\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(file_name) > 3:\n        return \"No\"\n    if file_name[0].isalpha() and file_name[1] == '.' and file_name[2].isalpha():\n        if file_name[0].lower() in 'abcdefghijklmnopqrstuvwxyz' or file_name[0].upper() in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            if file_name[3:].lower() in 'txt exe dll':\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if type(file_name) is not str:\n        return 'No'\n    if len(file_name) > 3:\n        return 'No'\n    if file_name == '':\n        return 'No'\n    if file_name[0] not in string.ascii_letters and file_name[0]!= '.':\n        return 'No'\n    if file_name[-3:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if file_name.count('.')!= 1:\n        return 'No'\n    \n    if file_name[0].isalpha() == False:\n        return 'No'\n    \n    substring = file_name.split('.')\n    if substring[0] == '':\n        return 'No'\n    \n    if len(substring)!= 2:\n        return 'No'\n    \n    if substring[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 0:\n                lst[i] = lst[i]**2\n            else:\n                lst[i] = lst[i]**3\n        sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0:\n            lst[i] = lst[i] * lst[i]\n        elif i%4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        else:\n            lst[i] = lst[i]\n        sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            i = i ** 3\n        result += i\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #your code here\n    i = 0\n    sum = 0\n    while i < len(lst):\n        if i % 4 == 0:\n            sum = sum + lst[i] ** 2\n        elif i % 3 == 0:\n            sum = sum + lst[i] ** 3\n        else:\n            sum = sum + lst[i]\n        i += 1\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in lst:\n        if i%3 == 0:\n            sum += i*i\n        elif i%4 == 0:\n            sum += i*i*i\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    result = 0\n    for element in lst:\n        if element % 3 == 0:\n            element = element**2\n        elif element % 4 == 0:\n            element = element**3\n        else:\n            element = element**2\n        result += element\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    list1 = []\n    for i in lst:\n        if i % 3 == 0:\n            list1.append(i**2)\n        elif i % 4 == 0:\n            list1.append(i**3)\n    return sum(list1)\n        \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i] * lst[i]\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i] * lst[i]\n        elif i % 3!= 0 and i % 4!= 0:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i] ** 3\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = sentence.split()\n    word_set = set(words)\n    for i in range(2, len(words) + 1):\n        prime_number_set = set(range(2, i))\n        if i in prime_number_set:\n            prime_number_set.remove(i)\n            divisors = set([1, i])\n            for j in prime_number_set:\n                if i % j == 0:\n                    divisors.add(j)\n            for divisor in divisors:\n                if divisor in prime_number_set:\n                    prime_number_set.remove(divisor)\n            if not prime_number_set:\n                return ''.join(sorted(words))\n    return \"\".join(sorted(word_set))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = sentence.split(\" \")\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not sentence:\n        return\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([word for word in sentence.split(\" \") if len(word) > 2 and is_prime(len(word))])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    words = sentence.split()\n    for word in words:\n        if len(word) == 1:\n            continue\n        if not is_prime(len(word)):\n            continue\n        else:\n            return word\n    return None"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = sentence.split()\n    ans = \"\"\n    for word in words:\n        if len(ans) == 0 or (len(ans)!= 0 and int(ans) > int(word)):\n            ans = word\n    return ans\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = sentence.split(' ')\n    words = [word for word in words if word.isalpha()]\n    return \" \".join(words)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for word in sentence.split():\n        if len(word) in prime_numbers:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    return \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n[0] == \"0\":\n        return False\n    if x[0] == \"0\":\n        return False\n    if x[0] == \"0\" and n[0] == \"0\":\n        return False\n    x = int(x)\n    n = int(n)\n    if x == 0:\n        return False\n    if n == 0:\n        return False\n    # x * n = y = n / x\n    y = x * n\n    # y = (n / x) * y\n    y = y * n\n    if y!= n:\n        return False\n    # x * n = y = n / x\n    y = x * n\n    # y = (n / x) * y\n    y = y * n\n    # y = n / x\n    y = n / x\n    if y == x:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = n[::-1]\n    x = x[::-1]\n    y = \"\"\n    if len(n) > 1:\n        i = 0\n        for a in n:\n            if a == \"/\":\n                i += 1\n            else:\n                y = a + y\n        n = int(y[::-1])\n    if len(x) > 1:\n        i = 0\n        for a in x:\n            if a == \"/\":\n                i += 1\n            else:\n                y = a + y\n        x = int(y[::-1])\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return True\n    if x == 1 or n == 1:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if(n == \"1/1\"):\n        return True\n    elif(x == \"1/0\"):\n        return False\n    elif(x == \"0/1\"):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = str(x)\n    n = str(n)\n    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if int(x[0]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[0]) == 1 and int(n[1]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[0]) == 1:\n        return True\n    if int(x[1]) == 1 and int(n[1]) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Get the numerator and denominator from x and n\n    x_num = x.split(\"/\")[0]\n    x_den = x.split(\"/\")[1]\n    n_num = n.split(\"/\")[0]\n    n_den = n.split(\"/\")[1]\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x, n = str(x), str(n)\n    if '.' in x:\n        x = x.split('.')\n        x = '.'.join(x)\n    x = x.split('/')\n    x = float(x[0])/float(x[1])\n    n = float(n)/float(n)\n    return x*n == int(x*n)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    x = x.replace(\" \", \"\")\n    n = n.replace(\" \", \"\")\n    \n    try:\n        x = int(x)\n        n = int(n)\n    except ValueError:\n        return False\n        \n    if (x // n) * n == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    try:\n        if x == \"1\" or x == \"0\":\n            return True\n        x = x.split(\"/\")\n        return int(float(x[0]) / float(x[1])) == int(x[0] / x[1])\n    except Exception as e:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if x == \"0\" or x == \"1\" or x == \"2\":\n        return True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    import math\n    a,b=x.split(\"/\")\n    n_a,n_b=n.split(\"/\")\n    a_n=int(a)\n    b_n=int(b)\n    n_a_n=int(n_a)\n    n_b_n=int(n_b)\n    if n_a==1 and n_b==1:\n        return False\n    if n_a==1 and n_b_n==0:\n        return True\n    if n_a_n==1 and n_b_n==0:\n        return True\n    if n_a_n==1 and n_b_n==1:\n        return True\n    if n_a_n==0 and n_b_n==0:\n        return False\n    if n_a_n==0 and n_b_n==1:\n        return False\n    if n_a_n==1 and n_b_n==0:\n        return False\n    if a_n==0:\n        return False\n    if a_n==1 and b_n==0:\n        return True\n    if a_n==1 and b_n==1:\n        return True\n    if a_n==1 and n_b_n==1:\n        return True\n    if b_n==1 and n_a_n==1:\n        return True\n    if a_n==0 and b_n==0:\n        return False\n    if a_n==1 and b_n==1:\n        return True\n    if a_n==1 and b_n==0:\n        return False\n    if a_n==0 and b_n==1:\n        return False\n    if a_n==1 and b_n==1:\n        return True\n    if b_n==1 and n_a_n==1:\n        return False\n    if b_n==0 and n_a_n==1:\n        return False\n    if n_a_n==1 and b_n==1:\n        return False\n    if a_n==1 and b_n==1:\n        return True\n    if a_n==0 and b_n==1:\n        return False\n    if b_n==1 and n_a_n==1:\n        return False\n    if n_a_n==1 and b_n==1:\n        return False\n    if b_n==1 and n_a_n==1:\n        return False\n    if a_n==0:\n        return False\n    if a_n==1 and b_n==0:\n        return False\n    if a_n==1 and b_n==1:\n        return True\n    if a_n==1 and b_n==0:\n        return True\n    if a_n==1 and b_n==1:\n        return True\n    if a_n==0 and b_n==1:\n        return False\n    if a_n==1 and b_n==0:\n        return False\n    if a_n==1 and b_n==0:\n        return True\n    if a_n==0 and b_n==1:\n        return False\n    if a_n==0 and b_n==1:\n        return False\n    if b_n==0 and n_a_n==1:\n        return False\n    if b_n==1 and n_a_n==1:\n        return True\n    if b_n==1 and n_a_n==0:\n        return False\n    if b_n==0 and n_a_n==1:\n        return False\n    if b_n==0 and n_a_n==0:\n        return True\n    if b_n==0 and n_a_n==1:\n        return False\n    if b_n==0 and n_a_n==0:\n        return False\n    if b_n==1 and n_a_n==0:\n        return False\n    if b_n==0 and n_a_n==0:\n        return True\n    if b_n==1 and n_a_n==0:\n        return False\n    if b_n==1 and n_a_n==1:\n        return True\n    if a_n==0 and n_a_n==1:\n        return False\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def gen_nums(n):\n        if n == 0:\n            return (n,)\n        else:\n            return (n, ) + gen_nums(n - 1)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # O(n^2)\n    return sorted(nums, key=lambda x: (sum(x), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums.sort()\n    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums = nums.copy()\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_nums = []\n    for num in nums:\n        sorted_nums.append((sum(int(char) for char in str(num)), num))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(nums) == 0:\n        return nums\n    \n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not nums:\n        return []\n    nums = sorted(nums, key=lambda x: sum(x))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(nums) < 1:\n        return nums\n    sorted_nums = []\n    while nums:\n        max_num = max(nums)\n        min_num = min(nums)\n        if max_num < 0:\n            max_num = -max_num\n            if min_num > -100:\n                sorted_nums.append(min_num)\n                nums.remove(min_num)\n            else:\n                sorted_nums.append(-min_num)\n                nums.remove(-min_num)\n        elif min_num < 0:\n            min_num = -min_num\n            if max_num > -100:\n                sorted_nums.append(max_num)\n                nums.remove(max_num)\n            else:\n                sorted_nums.append(-max_num)\n                nums.remove(-max_num)\n        else:\n            sorted_nums.append(max_num)\n            nums.remove(max_num)\n        max_num = max(nums)\n        min_num = min(nums)\n        if max_num < 0:\n            max_num = -max_num\n            if min_num > -100:\n                sorted_nums.append(min_num)\n                nums.remove(min_num)\n            else:\n                sorted_nums.append(-min_num)\n                nums.remove(-min_num)\n        elif min_num < 0:\n            min_num = -min_num\n            if max_num > -100:\n                sorted_nums.append(max_num)\n                nums.remove(max_num)\n            else:\n                sorted_nums.append(-max_num)\n                nums.remove(-max_num)\n        else:\n            sorted_nums.append(max_num)\n            nums.remove(max_num)\n    return sorted_nums\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2 == 1) and (num % 10 > 5 and num % 10 < 7):\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and (num % 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    oddDigitCount = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            oddDigitCount += 1\n    return oddDigitCount\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in nums:\n        if num > 10 and num%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_nums = 0\n    for num in nums:\n        if isOdd(num) and isOdd(num,2):\n            odd_nums += 1\n    return odd_nums\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for num in nums:\n        if (num > 10 and num % 2!= 0 and num % 10 % 2!= 0):\n            count += 1\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # is this a list comprehension?\n    odds = lambda x: x % 2 == 1\n    return sum(odds(num) for num in nums if num > 10)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odds = 0\n    for num in nums:\n        if (num > 10 and num % 2 == 1) or (num < 0 and num % 2 == 0):\n            odds += 1\n    return odds\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len([i for i in nums if len(str(i))>2 and str(i)[0]%2 and str(i)[-1]%2])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(1,n):\n        for j in range(i+1,n):\n            k = n - i - j\n            if i*i + j*j + k*k == 3*(i+j+k):\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    return get_number_of_triples(a, 3)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # use DP\n    if n == 1:\n        return 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + j < n:\n                for k in range(j + 1, n):\n                    if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) == 3 * k:\n                        res += 1\n    return res\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = 0\n    i = 2\n    while i*i <= n:\n        j = i\n        while j*j <= n:\n            k = j\n            while k*k <= n:\n                if (i*i + j*j + k*k) % 3 == 0:\n                    res += 1\n                k += 1\n            j += 1\n        i += 1\n    return res"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = [i * i - i + 1 for i in range(1, n+1)]\n    c = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    c += 1\n    return c\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def triple(n):\n        a = []\n        for i in range(1, n):\n            for j in range(i, n):\n                k = n - i - j\n                if k > 0 and i + j + k == 3 * n:\n                    a.append([i, j, k])\n        return a\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    a = list(range(1,n+1))\n    ans = 0\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    triples = 0\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Create the planet dictionary\n    planets = { \"Mercury\" : {\"lat\" : -23, \"lng\" : 151, \"orbits\" : [\"Venus\", \"Earth\"]},\n    \"Venus\" : {\"lat\" : -4, \"lng\" : 51, \"orbits\" : [\"Earth\", \"Mars\"]},\n    \"Earth\" : {\"lat\" : -22, \"lng\" : -17, \"orbits\" : [\"Mars\", \"Jupiter\"]},\n    \"Mars\" : {\"lat\" : -4, \"lng\" : -38, \"orbits\" : [\"Jupiter\", \"Saturn\"]},\n    \"Jupiter\" : {\"lat\" : 11, \"lng\" : 100, \"orbits\" : [\"Saturn\", \"Uranus\"]},\n    \"Saturn\" : {\"lat\" : 24, \"lng\" : 78, \"orbits\" : [\"Uranus\", \"Neptune\"]},\n    \"Uranus\" : {\"lat\" : 18, \"lng\" : -71, \"orbits\" : [\"Neptune\", \"Pluto\"]},\n    \"Neptune\" : {\"lat\" : 15, \"lng\" : -24, \"orbits\" : [\"Pluto\", \"Sol\"]},\n    \"Pluto\" : {\"lat\" : 0, \"lng\" : -32, \"orbits\" : [\"Sol\"]}}\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return sorted(planet for planet in get_planets() if planet.orbite_to(planet1) or planet.orbite_to(planet2))\n    planet1_parent = get_parent(planet1)\n    planet2_parent = get_parent(planet2)\n    if planet1_parent == planet2_parent:\n        return (planet1_parent)\n    else:\n        return (planet1_parent, planet2_parent)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    list_1 = list(planets)\n    list_2 = list(planets)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    planets = []\n    for i in range(0, 9):\n        if planets_dict[i] == planet1:\n            planets.append(i)\n        elif planets_dict[i] == planet2:\n            planets.append(i)\n    \n    planet_names = []\n    for i in planets:\n        planet_names.append(planets_dict[i])\n    \n    planet_names.sort(key=lambda x: x[3])\n    \n    return planet_names\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Pluto\"]\n    \n    try:\n        if planet1 not in planets or planet2 not in planets:\n            raise ValueError\n        return sorted(planets, key=lambda x:distance(planet1, x))\n    except ValueError:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    r = {\n    \"Mercury\":  'Mercury',\n    \"Venus\":    'Venus',\n    \"Earth\":    'Earth',\n    \"Mars\":      'Mars',\n    \"Jupiter\":  'Jupiter',\n    \"Saturn\":   'Saturn',\n    \"Uranus\":   'Uranus',\n    \"Neptune\":  'Neptune'\n    }\n    planets = list(r.keys())\n    return tuple(filter(lambda x: planet1 in x or planet2 in x, planets))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #finds the orbits of the planets in the system\n    #assigns planets to planets and orbits to orbits\n    orbits = []\n    planets = {}\n    planets[planet1] = bf1(planet1)\n    planets[planet2] = bf1(planet2)\n    for i in planets:\n        for j in planets[i]:\n            orbits.append(j)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (planet1, planet2)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    planets = {\n        \"Mercury\": \"Mercury\",\n        \"Venus\": \"Venus\",\n        \"Earth\": \"Earth\",\n        \"Mars\": \"Mars\",\n        \"Jupiter\": \"Jupiter\",\n        \"Saturn\": \"Saturn\",\n        \"Uranus\": \"Uranus\",\n        \"Neptune\": \"Neptune\"\n    }\n    \n    planets1 = {\n        \"Mercury\": {\n            \"name\": \"Mercury\",\n            \"orbit\": planets[\"Mercury\"]\n        },\n        \"Venus\": {\n            \"name\": \"Venus\",\n            \"orbit\": planets[\"Venus\"]\n        },\n        \"Earth\": {\n            \"name\": \"Earth\",\n            \"orbit\": planets[\"Earth\"]\n        },\n        \"Mars\": {\n            \"name\": \"Mars\",\n            \"orbit\": planets[\"Mars\"]\n        },\n        \"Jupiter\": {\n            \"name\": \"Jupiter\",\n            \"orbit\": planets[\"Jupiter\"]\n        },\n        \"Saturn\": {\n            \"name\": \"Saturn\",\n            \"orbit\": planets[\"Saturn\"]\n        },\n        \"Uranus\": {\n            \"name\": \"Uranus\",\n            \"orbit\": planets[\"Uranus\"]\n        },\n        \"Neptune\": {\n            \"name\": \"Neptune\",\n            \"orbit\": planets[\"Neptune\"]\n        }\n    }\n    \n    return planets1[planet1][\"orbit\"], planets1[planet2][\"orbit\"]\n    \n    \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    planet1 = str(planet1).title()\n    planet2 = str(planet2).title()\n    plants = (planet1, planet2)\n    if planet1 == \"Mercury\":\n        if planet2 == \"Venus\":\n            plants = (\"Saturn\", \"Uranus\", \"Earth\", \"Mars\")\n    if planet1 == \"Venus\":\n        if planet2 == \"Earth\":\n            plants = (\"Mars\", \"Jupiter\")\n    if planet1 == \"Mars\":\n        if planet2 == \"Jupiter\":\n            plants = (\"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 == \"Jupiter\":\n        if planet2 == \"Saturn\":\n            plants = (\"Uranus\", \"Neptune\", \"Earth\")\n    if planet1 == \"Saturn\":\n        if planet2 == \"Uranus\":\n            plants = (\"Neptune\", \"Earth\", \"Mars\")\n    if planet1 == \"Neptune\":\n        if planet2 == \"Earth\":\n            plants = (\"Mars\", \"Jupiter\")\n    return plants\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert isinstance(lst, list)\n    for word in lst:\n        assert isinstance(word, str)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    sorted_list = []\n    sorted_list = sorted(lst)\n    return sorted_list\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Write your code here.\n    lst = sorted(lst)\n    for x in range(1, len(lst)):\n        if lst[x]!= lst[x-1]:\n            lst.pop(x)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = list(lst)\n    lst = sorted(filter(lambda x: len(x) == len(set(x)), lst))\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda word: (len(word), word))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = list(lst)\n    lst = sorted_list_by_length(lst)\n    lst = sorted_list_by_length_descending(lst)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    #return sorted(lst, key=lambda x: len(x))\n    return sorted(lst, key=lambda x: (len(x), x))\n    \ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    #new_lst = []\n    #for word in lst:\n    #    if len(word) % 2!= 0:\n    #        new_lst.append(word)\n    #return sorted(new_lst, key=lambda x: len(x))\n    return sorted(lst, key=lambda x: (len(x), x))\n    \ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    new_lst = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            new_lst.append(word)\n    return sorted(new_lst, key=lambda x: len(x))\n    \ndef list_sort(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    new_lst = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            new_lst.append(word)\n    return sorted(new_lst, key=lambda x: len(x))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(lst, key=lambda i: (len(i), i))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst.sort()\n    lst = delete_odd(lst)\n    lst = sorted(lst)\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    nums_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            nums_lst.append(word)\n    return sorted(nums_lst)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x if is_prime(n) else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Checking if n is a prime number\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return x\n    else:\n        return y"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        else:\n            return x\n    return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % x == 0 and n % y == 0:\n        return x\n    else:\n        return y\n    \n    \nprint(x_or_y(7, 34, 12)) #>>> 34\nprint(x_or_y(15, 8, 5)) #>>> 5\nprint(x_or_y(1, 5, 6)) #>>> 5\nprint(x_or_y(5, 8, 6)) #>>> 8\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return x\n    elif n == 2:\n        return y\n    else:\n        if is_prime(n) == True:\n            return x\n        else:\n            return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n in range(2, 5) or n in range(8, 10):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if lst == []:\n        return 0\n    else:\n        total = 0\n        for num in lst:\n            if num % 2 == 1:\n                total += num**2\n        return total\n            \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if num % 2!= 0:\n            total += num**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Initiate a counter\n    counter = 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # For every item in the list, subtract the value from the squared sum \n    # in the list\n    \n    odd_list = []\n    even_list = []\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            odd_list.append(lst[i])\n        else:\n            even_list.append(lst[i])\n    \n    total = 0\n    for num in odd_list:\n        total += num**2\n    for num in even_list:\n        total += num\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if lst is None:\n    #     return 0\n    # else:\n    #     result = 0\n    #     for num in lst:\n    #         if num % 2!= 0:\n    #             result += num ** 2\n    #     return result\n    return sum(num ** 2 for num in lst if num % 2!= 0)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_sum += lst[i] ** 2\n    return odd_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Initialize the sum of squares, sss, to 0\n    sss = 0\n    \n    # Loop through the input list, adding each number to the sum of squares\n    # of even numbers\n    for num in lst:\n        if num % 2 == 0:\n            sss += num * num\n            \n    # Return the sum of squares of odd numbers\n    return sss\n    \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    #\n    # Your code here\n    #\n    sum = 0\n    for i in range(0, len(lst)):\n        if(lst[i] % 2 == 1):\n            sum += lst[i] ** 2\n    return sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if not lst:\n        return 0\n    \n    total = 0\n    for number in lst:\n        if not number % 2:\n            total += number**2\n    return total\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if lst:\n        return sum([i*i for i in lst if i%2 and i!= 0])\n    else:\n        return 0\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    matches = 0\n    results = 0\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            matches += 1\n    for i in range(len(game)):\n        results += abs(guess[i] - game[i])\n    return (results - matches"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    guess_indices=[]\n    guess_index_map={}\n    for i,num in enumerate(guess):\n        guess_index_map[num]=i\n    for i,num in enumerate(game):\n        guess_indices.append(guess_index_map.get(num,None))\n    return guess_indices\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return -1\n    \nif __name__ == \"__main__\":\n    game = [[1,2,3,4,5,1],[1,2,3,4,2,-2]]\n    guess = [4,1,1,0,0,-2]\n    print(compare(game,guess)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    score=[]\n    for i in range(len(guess)):\n        if guess[i]==game[i]:\n            score.append(0)\n        else:\n            score.append(abs(guess[i]-game[i]))\n    return score\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    r = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            r.append(0)\n        else:\n            r.append(abs(game[i] - guess[i]))\n    return r\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    comp = []\n    \n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            comp.append(0)\n        else:\n            comp.append(abs(game[i] - guess[i]))\n    return comp"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    scores = game[0]\n    guesses = game[1]\n    scores = np.array(scores)\n    guesses = np.array(guesses)\n    out = []\n    for i in range(len(guesses)):\n        if guesses[i] == scores[i]:\n            out.append(0)\n        else:\n            out.append(abs(guesses[i] - scores[i]))\n    return out\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    d = {}\n    l = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            l.append(0)\n        else:\n            l.append(abs(game[i]-guess[i]))\n    for i in range(len(l)):\n        d[i] = l[i]\n    return d\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(abs(game-guess) for guess,game in zip(guess,game))\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #dict = {'A':[0,0], 'B':[0,0], 'C':[0,0]}\n    dict = {}\n    for ext in extensions:\n        dict[ext[0]] = [0,0]\n        for char in ext:\n            if char.isupper():\n                dict[ext[0]][0] += 1\n            elif char.islower():\n                dict[ext[0]][1] += 1\n            else:\n                raise Exception('Unknown Character')\n    max = 0\n    max_key = None\n    for key in dict:\n        if dict[key][0] + dict[key][1] > max:\n            max = dict[key][0] + dict[key][1]\n            max_key = key\n    return class_name + '.' + max_key\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    strongest_extension = None\n    max_strength = -1\n    for ext in extensions:\n        strength = -1\n        for ch in ext:\n            if ch.isupper():\n                strength += 1\n            if ch.islower():\n                strength -= 1\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # TODO\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    class_name = class_name.upper()\n    res = ''\n    extensions = sorted(extensions, key=lambda x: (-len(x), x))\n    for ext in extensions:\n        if class_name.find(ext.lower()) > -1:\n            res += class_name[:class_name.find(ext.lower())] + '.' + ext.upper() + '.'\n    return res\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    extension_list = []\n    \n    #check if there are more than one extensions\n    if len(extensions) > 1:\n        #sort the extensions\n        extensions = sorted(extensions)\n        #append extension_list and check if a stronger extension is added\n        for ext in extensions:\n            if Check_extension_strength(ext, class_name):\n                extension_list.append(ext)\n    else:\n        #append extension_list and check if a stronger extension is added\n        extension_list.append(extensions[0])\n        \n    #append the class_name with the first extension name\n    strongest_extension = class_name + \".\" + extension_list[0]\n    return strongest_extension\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if len(extensions) == 0:\n        return class_name\n    strength = []\n    for extension in extensions:\n        cap = extension.count('A')\n        low = extension.count('a')\n        strength.append(cap - low)\n    strength = sorted(strength)\n    strongest_index = strength.index(max(strength))\n    return class_name + extensions[strongest_index]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    extension_list = []\n    for extension in extensions:\n        if extension[0].isupper() == True:\n            extension_list.append(extension)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    extension_name_list = []\n    for extension in extensions:\n        extension_name_list.append(extension)\n    extension_name_list = sorted(extension_name_list)\n    extension_name_list.append('my_class.my_class')\n    extension_name_list.append('my_class')\n    \n    extension_dict = {}\n    for extension in extension_name_list:\n        extension_name = extension.split('.')[0]\n        extension_dict[extension_name] = {'class_name': extension_name,'strength': extension_name.count('c') + extension_name.count('C')}\n    \n    extension_strength = sorted(extension_dict.items(), key=lambda x: x[1]['strength'], reverse=True)\n    extension_class_name = extension_strength[0][0]\n    return extension_class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # this is the code to calculate the strength of each extension\n    extensions_strength = []\n    for i in extensions:\n        if i.isupper():\n            extensions_strength.append(len(i)-2)\n        elif i.islower():\n            extensions_strength.append(len(i)-1)\n    extensions_strength.sort()\n    return class_name + extensions_strength[-1]"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    for i in range(1, len(b)):\n        if b.startswith(a[-i:]):\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = a.lower()\n    b = b.lower()\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(a)):\n        if b == a[i:] + a[:i]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a in b[::-1] or b in a\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_rotation(str1, str2):\n        if str1 == str2: return True\n        else:\n            for i in range(len(str1)):\n                if str1[i:] + str1[:i] == str2: return True\n            return False\n    return is_rotation(a, b) or is_rotation(b, a)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # This is just a brute force solution.\n    # if a in b:\n    #     for i in range(1,len(b)):\n    #         if b[-i] in a:\n    #             return True\n    #     return False\n    # else:\n    #     return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(0,len(a)):\n        s = a[i:] + a[0:i]\n        if s == b:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = len(a)\n    n = len(b)\n    if n>=len(a) and len(a)==len(b):\n        for i in range(n):\n            if a[i]!= b[i]:\n                return False\n        return True\n    elif n<len(a) and len(a)==len(b):\n        for i in range(n):\n            if a[i]!= b[i] and a[i] in b:\n                return True\n        return False\n    else:\n        if len(a)<len(b):\n            for i in range(n):\n                if a[i]!= b[i] and b[i] in a:\n                    return True\n            return False\n        else:\n            for i in range(n):\n                if a[i]!= b[i] and a[i] in b:\n                    return True\n            return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a in b or any(c in b for c in (a+a))\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a = a.lower()\n    b = b.lower()\n    for i in range(1,len(b)):\n        if a.startswith(b[:i]):\n            return True\n    return False\nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint(cycpattern_check(\"efef\",\"eeff\"))\nprint(cycpattern_check(\"himenss\",\"simen\"))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return tuple(count(num, 2) + count(num, 3))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    evens = 0\n    odds = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Use the '%' operator to get the least significant digit\n    # and divide by 2 and take the result.\n    # Since the result is an integer, you can use\n    # floor division to get the number of evens.\n    return (int(num)%2 == 0, int(num)%2!= 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if num < 0:\n        return (0, 0)\n    else:\n        odds = 0\n        evens = 0\n        while num > 0:\n            if num % 2 == 1:\n                odds += 1\n            else:\n                evens += 1\n            num = num // 10\n        return (evens, odds)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (num % 10 if num % 10 % 2 == 0 else num % 10 + 1, num // 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert(num >= 0), \"Number must be a positive integer.\"\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count_even = 0\n    count_odd = 0\n    while num:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return count_even, count_odd\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num > 0:\n        num, remainder = divmod(num, 10)\n        if remainder % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #The number of even digits is equal to the number of ones in the binary representation of the number.\n    #The number of odd digits is equal to the number of zeros in the binary representation of the number.\n    return (num // 10 % 2, num % 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # get the length of the number\n    length = len(str(num))\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if number == 0:\n        return ''\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 21:\n        return 'xiix'\n    if number == 22:\n        return 'xiiix'\n    if number == 23:\n        return 'xiiiix'\n    if number == 24:\n        return 'xivix'\n    if number == 25:\n        return 'xvix'\n    if number == 26:\n        return 'xviix'\n    if number == 27:\n        return 'xviiix'\n    if number == 28:\n        return 'xviiiix'\n    if number == 29:\n        return 'xixix'\n    if number == 30:\n        return 'xxi'\n    if number == 31:\n        return 'xxii'\n    if number == 32:\n        return 'xxiii'\n    if number == 33:\n        return 'xxiv'\n    if number == 34:\n        return 'xxv'\n    if number == 35:\n        return 'xxvi'\n    if number == 36:\n        return 'xxvii'\n    if number == 37:\n        return 'xxviii'\n    if number == 38:\n        return 'xxix'\n    if number == 39:\n        return 'xxx'\n    if number == 40:\n        return 'xxx'\n    if number == 41:\n        return 'xxxi'\n    if number == 42:\n        return 'xxii'\n    if number == 43:\n        return 'xxiii'\n    if number == 44:\n        return 'xxiv'\n    if number == 45:\n        return 'xxv'\n    if number == 46:\n        return 'xxvi'\n    if number == 47:\n        return 'xxvii'\n    if number == 48:\n        return 'xxviii'\n    if number == 49:\n        return 'xxix'\n    if number == 50:\n        return 'xxl'\n    if number == 51:\n        return 'xxli'\n    if number == 52:\n        return 'xxlii'\n    if number == 53:\n        return 'xxliv'\n    if number == 54:\n        return 'xxlv'\n    if number == 55:\n        return 'xxlvi'\n    if number == 56:\n        return 'xxlvii'\n    if number == 57:\n        return 'xxlviii'\n    if number == 58:\n        return 'xxlix'\n    if number == 59:\n        return 'xxlx'\n    if number == 60:\n        return 'xxlix'\n    if number == 61:\n        return 'xxlxi'\n    if number == 62:\n        return 'xxliv'\n    if number == 63:\n        return 'xxlv'\n    if number == 64:\n        return 'xxlvi'\n    if number == 65:\n        return 'xxlvii'\n    if number == 66:\n        return 'xxlviii'\n    if number == 67:\n        return 'xxlix'\n    if number == 68:\n        return 'xxlx'\n    if number == 69:\n        return 'xxli'\n    if number == 70:\n        return 'xxliv'\n    if number == 71:\n        return 'xxlv'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not isinstance(number, int) or number <= 0 or number > 1000:\n        raise ValueError('Input value must be a positive integer <= 1000')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = ''\n    r = int(number) % 10\n    if r == 1:\n        s += 'i'\n    elif r == 2:\n        s += 'ii'\n    elif r == 3:\n        s += 'iii'\n    elif r == 4:\n        s += 'iv'\n    elif r == 5:\n        s += 'v'\n    elif r == 6:\n        s += 'vi'\n    elif r == 7:\n        s += 'vii'\n    elif r == 8:\n        s += 'viii'\n    elif r == 9:\n        s += 'ix'\n    if int(number) >= 100:\n        r = int(int(number) / 10)\n        if r == 1:\n            s += 'x'\n        elif r == 2:\n            s += 'xx'\n        elif r == 3:\n            s += 'xxx'\n        elif r == 4:\n            s += 'xl'\n        elif r == 5:\n            s += 'l'\n        elif r == 6:\n            s += 'xl'\n        elif r == 7:\n            s += 'lxx'\n        elif r == 8:\n            s += 'lxxx'\n        elif r == 9:\n            s += 'xix'\n    return s\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    symbol_to_roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI',\n                       7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X', 50: 'L',\n                       100: 'C', 200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D',\n                       600: 'DC', 700: 'DCC', 800: 'DCCC', 900: 'CM'}\n    roman_to_symbol = {'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5, 'VI': 6,\n                       'VII': 7, 'VIII': 8, 'IX': 9, 'X': 10, 'L': 50,\n                       'C': 100, 'CC': 200, 'CCC': 300, 'CD': 400, 'D': 500,\n                       'DC': 600, 'DCC': 700, 'DCCC': 800, 'CM': 900}\n    if not 1 <= number <= 1000:\n        return None\n    roman = \"\"\n    while number > 0:\n        roman += symbol_to_roman[int(number/10)]\n        number = number%10\n    return roman\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert number > 0 and number <= 1000, \"0 <= number <= 1000\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not isinstance(number, int):\n        raise TypeError(\"Argument must be a positive integer\")\n    if number <= 0:\n        raise ValueError(\"Argument must be a positive integer\")\n    if number > 1000:\n        raise OverflowError(\"Argument must be less than or equal to 1000\")\n    digits = (('', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'),\n        ('', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC'),\n        ('', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM'),\n        ('', 'M', 'MM', 'MMM'))\n    if number < 4:\n        return digits[0][number]\n    for num in range(4, number + 1):\n        for i, d in enumerate(digits[num // 100]):\n            if num % (100 * i + d) == 0:\n                return digits[num // 100][i] + d\n        if num % (100 * num) == 0:\n            return digits[num // 100][num // 100]\n    raise OverflowError(\"Argument must be less than or equal to 1000\")\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert 1 <= number <= 1000\n    \n    roman_numerals = {\n        1: 'i',\n        2: 'ii',\n        3: 'iii',\n        4: 'iv',\n        5: 'v',\n        6: 'vi',\n        7: 'vii',\n        8: 'viii',\n        9: 'ix',\n        10: 'x',\n        11: 'xi',\n        12: 'xii',\n        13: 'xiii',\n        14: 'xiv',\n        15: 'xv',\n        16: 'xvi',\n        17: 'xvii',\n        18: 'xviii',\n        19: 'xix'\n    }\n    \n    roman = ''\n    # get roman numeral\n    for number in range(1, number + 1):\n        roman += roman_numerals[number]\n    \n    return roman"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    roman = {\n        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\",\n    }\n    count = 1000\n    roman_num = \"\"\n    while count > 0:\n        for value in roman.keys():\n            if count == value:\n                roman_num = roman_num + roman[value]\n                count = count - value\n                break\n    return roman_num.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError('Input value out of range')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = \"\"\n    for i,c in enumerate(mini_roman_dict):\n        if number in c:\n            result += c[0]\n            number -= c[1]\n    return result\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check if a and b are greater than c\n    if a > c:\n        if a > b:\n            if a == b:\n                return False\n            else:\n                return True\n    else:\n        if b > c:\n            if b == c:\n                return False\n            else:\n                return True\n        else:\n            if a == c:\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (a ** 2 + b ** 2 == c ** 2) and (b ** 2 + c ** 2 == a ** 2)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # There are only three sides of a right-angled triangle\n    if a == b == c:\n        return True\n    elif a == b or b == c or c == a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (\n        ((a**2) + (b**2) - (c**2)) == 0) and \\\n        ((((a**2) + (b**2))**(1/2)) < c)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a*a + b*b == c*c or a*a + c*c == b*b or c*c + b*b == a*a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not is_side_valid(a) or not is_side_valid(b) or not is_side_valid(c):\n        return False\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or c**2 + b**2 == a**2:\n        return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (a**2) == (b**2) + (c**2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if (a**2 + b**2 - c**2)/2 <= 0:\n        return False\n    if (a**2 + b**2 - c**2)/2 >= 0:\n        return True"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    max_count = 0\n    max_str = \"\"\n    \n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n            if count == len(word):\n                count = 0\n        if count > max_count:\n            max_count = count\n            max_str = word\n            \n    return max_str\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    char_dict = {}\n    for word in words:\n        for c in word:\n            if c in char_dict:\n                char_dict[c] += 1\n            else:\n                char_dict[c] = 1\n    max_char = \"\"\n    max_count = 0\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    if max_count > 1:\n        return \"\"\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_words = []\n    for word in words:\n        if len(word) > len(max_words):\n            max_words = word\n    return max_words\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return max(words, key=lambda word: len(set(word)))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # words = input().split()\n    max_char = \"\"\n    max_char_count = 0\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(words) == 0:\n        return \"\"\n    else:\n        dict_freq = {}\n        for word in words:\n            dict_freq[word] = len(word)\n        sorted_words = sorted(words, key = lambda x: (dict_freq[x], x))\n        return sorted_words[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_count = 0\n    word_max = \"\"\n    for word in words:\n        word_count = len(set(word))\n        if word_count > max_count:\n            max_count = word_count\n            word_max = word\n    return word_max\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    dict = {}\n    for word in words:\n        dict[word] = len(set(word))\n    max_key = max(dict, key=lambda x: dict[x])\n    return max_key\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # Check if no strings in list\n    if len(words) == 0:\n        return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # using set()\n    # letters_per_word = {}\n    # for word in words:\n    #     letters_per_word[word] = len(word)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # num_eaten = (remaining - need) // number\n    num_eaten = (remaining - need) // need\n    \n    return num_eaten, remaining - need\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Return 0s if either the number of remaining carrots or the need is 0\n    if remaining == 0 or need == 0:\n        return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    number = number if number <= 1000 else 1000\n    need = need if need <= 1000 else 1000\n    remaining = remaining if remaining <= 1000 else 1000\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if remaining == 0:\n        return [0, 0]\n    if need > remaining:\n        return [0, remaining]\n    if number == 0:\n        return [remaining, 0]\n    number += 1\n    return [number, remaining-need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    result = []\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if remaining < need:\n        number += (need - remaining)\n        remaining = 0\n    else:\n        number += need\n        remaining -= need\n    return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if number == 0:\n        return [0, 0]\n    elif number == need:\n        return [need, 0]\n    elif number < need:\n        return [number, need - number]\n    else:\n        return [need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # YOUR CODE GOES HERE\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    # calculate how many carrots you need to eat\n    if remaining < need:\n        return [number, remaining]\n    else:\n        return [number+need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here!\n    if remaining >= need:\n        number += need\n        remaining -= need\n        return [number, remaining]\n    else:\n        number += remaining\n        remaining = 0\n        return [number, 0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if operator == '+':\n        return operand[0] + operand[1]\n    elif operator == '-':\n        return operand[0] - operand[1]\n    elif operator == '*':\n        return operand[0] * operand[1]\n    elif operator == '/':\n        return operand[0] / operand[1]\n    elif operator == '^':\n        return operand[0] ** operand[1]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if operator == ['+', '*', '-']:\n        return eval(f'{operand[0]} + {operand[1]} * {operand[2]}')\n    elif operator == ['+', '-']:\n        return eval(f'{operand[0]} + {operand[1]}')\n    elif operator == ['-']:\n        return eval(f'{operand[0]} - {operand[1]}')\n    elif operator == ['*']:\n        return eval(f'{operand[0]} * {operand[1]}')\n    elif operator == ['//']:\n        return eval(f'{operand[0]} // {operand[1]}')\n    elif operator == ['**']:\n        return eval(f'{operand[0]} ** {operand[1]}')\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '/':\n            if operand[i] == 0:\n                return None\n            result = result // operand[i]\n        elif operator[i] == '^':\n            result = result ** operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert len(operator) == len(operand) - 1\n    result = operand[0]\n    for i in range(len(operator)):\n        result = operator[i] + result * operand[i + 1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # get the length of the operand list\n    length_of_operand_list = len(operand)\n    # check whether the length of operator list is equal to the length of operand list minus one\n    if length_of_operand_list == len(operator)-1:\n        # if the length of operator list is equal to the length of operand list minus one, the first and last element of operand list are the operand of operator list\n        # set the first operand of operand list to be operand of the operator list and the second operand to be the result of the algebric expression\n        operator[0] = operand[0]\n        operator[-1] = do_algebra(operator, operand[1:])\n        return do_algebra(operator[:-1], operand[1:])\n    else:\n        # if the length of operator list is equal to the length of operand list minus one, the first element of operand list are the operand of operator list\n        # set the first operand of operand list to be the result of the algebric expression\n        operator[0] = do_algebra(operator[:-1], operand[1:])\n        return operator[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(operator) == len(operand) - 1:\n        result = operator[0]\n        for i in range(1, len(operator)):\n            if operator[i] == '+':\n                result += operand[i]\n            elif operator[i] == '-':\n                result -= operand[i]\n            elif operator[i] == '*':\n                result *= operand[i]\n            elif operator[i] == '/':\n                result //= operand[i]\n            elif operator[i] == '**':\n                result **= operand[i]\n    else:\n        print(\"Operation list and operand list don't match.\")\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #print(operator, operand)\n    return eval(f\"{operand[0]} {operator[0]} {operand[1]}\")\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    length = len(operator)\n    if length == 0:\n        return operand[0]\n    elif length == 1:\n        return operator[0](operand)\n    elif length == 2:\n        return operator[0](operator[1](operand))\n    elif length == 3:\n        return operator[0](operator[1](operator[2](operand)))\n    else:\n        return operator[0](operator[1](operator[2](operator[3](operand)))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # First, put the elements of operand in a 2D array, and the elements of operator\n    # in a 2D array.\n    length_operand = len(operand) - 1\n    length_operator = len(operator)\n    matrix_operand = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n    matrix_operator = [[0 for i in range(length_operand+1)] for j in range(length_operator)]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not s:\n        return s\n    upper = s[:]\n    lower = s[:]\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.isupper():\n                upper = upper[:i] + upper[i].lower() + upper[i + 1:]\n            else:\n                lower = lower[:i] + lower[i].upper() + lower[i + 1:]\n    return lower if len(lower) < len(upper) else upper\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not s:\n        return s\n    upper = False\n    lower = False\n    s = list(s)\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if c.islower():\n                s[i] = c.upper()\n                lower = True\n            else:\n                s[i] = c.lower()\n                upper = True\n        else:\n            s[i] = c\n    if lower and upper:\n        return ''.join(s)\n    return ''.join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not s:\n        return s\n    s = s.lower() if s[0].isalpha() else s.upper()\n    return s[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not s: return s\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s[i] = s[i].lower()\n            else:\n                s[i] = s[i].upper()\n        else:\n            continue\n    return \"\".join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = list(s)\n    for i, l in enumerate(s):\n        if l.isalpha():\n            if l.isupper():\n                s[i] = l.lower()\n            elif l.islower():\n                s[i] = l.upper()\n            else:\n                continue\n        else:\n            continue\n    return ''.join(s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for c in s:\n        if not c.isalpha():\n            s = s.replace(c,\"\")\n            s = s[::-1]\n        else:\n            s = s.replace(c.lower(),c.upper())\n            s = s.replace(c.upper(),c.lower())\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = s.replace('a', 'A').replace('b', 'B').replace('c', 'C').replace('d', 'D').replace('e', 'E').replace('f', 'F').replace('g', 'G').replace('h', 'H').replace('i', 'I').replace('j', 'J').replace('k', 'K').replace('l', 'L').replace('m', 'M').replace('n', 'N').replace('o', 'O').replace('p', 'P').replace('q', 'Q').replace('r', 'R').replace('s', 'S').replace('t', 'T').replace('u', 'U').replace('v', 'V').replace('w', 'W').replace('x', 'X').replace('y', 'Y').replace('z', 'Z')\n    b = a[::-1]\n    c = b.replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('D', 'd').replace('E', 'e').replace('F', 'f').replace('G', 'g').replace('H', 'h').replace('I', 'i').replace('J', 'j').replace('K', 'k').replace('L', 'l').replace('M','m').replace('N', 'n').replace('O', 'o').replace('P', 'p').replace('Q', 'q').replace('R', 'r').replace('S','s').replace('T', 't').replace('U', 'u').replace('V', 'v').replace('W', 'w').replace('X', 'x').replace('Y', 'y').replace('Z', 'z')\n    return c\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    str_list = list(s)\n    for i in range(len(str_list)):\n        if str_list[i].isalpha():\n            if str_list[i].isupper():\n                str_list[i] = str_list[i].lower()\n            else:\n                str_list[i] = str_list[i].upper()\n    return \"\".join(str_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.lower() if s.isalpha() else s\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[i].lower() + s[i+1:]\n            else:\n                s = s[i].upper() + s[i+1:]\n        else:\n            s = s[i:] + s[:i]\n    return "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join(sorted(s, key=lambda x: x.isalpha() and not x.isdigit(), reverse=True)) if s else s\n    \n    \ndef solve2(s):\n    \"\"\"You are given a string s.\n    the function reverses the string only if it has more than one letter.\n    if the string contains no letters, reverse the string.\n    the function should return the resulted string.\n    Examples\n    solve2(\"1234\") = \"4321\"\n    solve2(\"ab\") = \"AB\"\n    solve2(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    return ''.join(sorted(s, key=lambda x: x.isalpha(), reverse=True)) if s else s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text == '':\n        return None\n    hash_obj = hashlib.md5()\n    hash_obj.update(text.encode('utf-8'))\n    return hash_obj.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    text_bytes = bytes(text, 'utf-8')\n    return hashlib.md5(text_bytes).hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.encode('utf-8') if type(text) == str else hashlib.md5(text).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [str(n) for n in range(a, b) if int(n) % 2 == 0]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # BEGIN Question 1\n    return list(range(a, b+1, 2))\n    # END Question 1\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(range(a, b, 2)))\n    \n    \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return_list = []\n    for i in range(a, b):\n        if i % 2 == 0:\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > b:\n        a, b = b, a\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(range(a, b+1, 2))\n"
    }
]