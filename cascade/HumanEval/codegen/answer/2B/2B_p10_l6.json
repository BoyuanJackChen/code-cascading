[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(numbers) <= 1:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    length = len(numbers)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if (numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers = sorted(numbers)\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] > threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) <= threshold:\n            return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(0, len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] < threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: Fix the implementation of this function\n    if len(numbers) < 2:\n        return False\n    elif len(numbers) == 2:\n        return abs(numbers[0] - numbers[1]) < threshold\n    else:\n        first_index = 0\n        while first_index + 1 < len(numbers):\n            if abs(numbers[first_index] - numbers[first_index + 1]) < threshold:\n                return True\n            first_index += 1\n        return False\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    paren_string = paren_string.replace('(','( ')\n    paren_string = paren_string.replace(')',') ')\n    open_paren_list = paren_string.split('(')\n    paren_list = []\n    for i in open_paren_list:\n        paren_list.append(i.replace(')', ')'))\n    paren_list = paren_list + ['()']\n    return paren_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_groups = []\n    opening = set('((')\n    in_paren = set('()')\n    start = 0\n    while start < len(paren_string):\n        if paren_string[start] in opening:\n            paren_groups.append(paren_string[start:])\n            start += 1\n        elif paren_string[start] == ')':\n            paren_groups[-1] += paren_string[start]\n            start += 1\n        else:\n            paren_groups[-1] += paren_string[start]\n            start += 1\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_list = list(paren_string)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_stack = []\n    paren_string = paren_string.strip()\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n        elif char == ')':\n            if len(paren_stack)!= 0 and paren_stack[-1] == '(':\n                paren_stack.pop()\n            else:\n                paren_stack.append(char)\n    return list(filter(None, paren_stack))\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = ''.join(paren_string.split())\n    all_parens = []\n    curr_group = ''\n    paren_strings = []\n    for char in paren_string:\n        if char == '(':\n            if curr_group:\n                paren_strings.append(curr_group)\n                curr_group = ''\n            curr_group += char\n        elif char == ')':\n            if curr_group:\n                paren_strings.append(curr_group)\n                curr_group = ''\n            curr_group += char\n        else:\n            curr_group += char\n    if curr_group:\n        paren_strings.append(curr_group)\n    return paren_strings\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not paren_string:\n        return []\n    paren_string = paren_string.replace(\" \", \"\")\n    curr_paren = \"\"\n    ret_list = []\n    for char in paren_string:\n        if char == \"(\":\n            curr_paren += char\n        elif char == \")\":\n            if curr_paren:\n                ret_list.append(curr_paren)\n            curr_paren = \"\"\n        else:\n            curr_paren += char\n    if curr_paren:\n        ret_list.append(curr_paren)\n    return ret_list\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_groups = []\n    paren_groups_idx = 0\n    paren_group_count = 0\n    for i, c in enumerate(paren_string):\n        if c == '(' or c == '{':\n            paren_groups_idx += 1\n            if paren_group_count == 0:\n                paren_groups.append(''.join(paren_string[paren_string.index('(')+1:i]))\n            paren_group_count += 1\n        elif c == ')' or c == '}':\n            paren_group_count -= 1\n            if paren_group_count == 0:\n                paren_groups.append(''.join(paren_string[i+1:paren_string.index(')')]))\n                paren_groups_idx -= 1\n    return paren_groups\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string_list = paren_string.split(' ')\n    paren_string_list_all = []\n    for paren_string_i in paren_string_list:\n        if '(' in paren_string_i and ')' in paren_string_i:\n            paren_string_list_all.append(paren_string_i)\n    return paren_string_list_all\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Initialize stack and result list\n    result = []\n    paren_stack = []\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_list = []\n    cur_string = ''\n    for i in paren_string:\n        if i == '(':\n            paren_list.append(i)\n        elif i == ')':\n            while paren_list and paren_list[-1]!= '(':\n                cur_string += paren_list.pop()\n            paren_list.pop()\n        elif i == ')':\n            while paren_list and paren_list[-1]!= '(':\n                cur_string += paren_list.pop()\n            paren_list.pop()\n        else:\n            cur_string += i\n    while paren_list:\n        cur_string += paren_list.pop()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Separate into integer and fraction\n    integer, fraction = divmod(number, 1)\n    return integer\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    whole, frac = math.modf(number)\n    return frac\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return number % 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    integer_part = int(number)\n    decimal_part = number - integer_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return int(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return number - math.floor(number)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    int_part = math.trunc(number)\n    dec_part = number - int_part\n    return dec_part\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    n = int(number)\n    d = number - n\n    return n, d\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Here the following code was partially based on the algorithm\n    # described in the course notes.\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number == 0:\n        return 0\n    number = number * 10\n    return number % 10\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    current = 0\n    for op in operations:\n        if op < 0:\n            current = 0\n        else:\n            current += op\n    return current < 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    last_balance = 0\n    balance = 0\n    for operation in operations:\n        if operation >= 0:\n            balance = last_balance + operation\n        else:\n            balance = last_balance - operation\n        last_balance = balance\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if operations[0] <= 0:\n        return True\n    for i in range(1, len(operations)):\n        if operations[i] > 0:\n            return False\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(operations) == 0:\n        return False\n    for i in operations:\n        if i < 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in range(1, len(operations)):\n        if operations[i] + operations[i-1] < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for operation in operations:\n        total += operation\n        if total < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    deposit = 0\n    withdraw = 0\n    for operation in operations:\n        if operation == 1:\n            deposit += 1\n        if operation == 2:\n            withdraw -= 1\n        if deposit < 0 and withdraw < 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    bal = 0\n    for op in operations:\n        bal += op\n        if bal < 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x_mean = sum(numbers) / len(numbers)\n    return sum([abs(x - x_mean) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    mean = sum(numbers) / len(numbers)\n    deviations = (n - mean for n in numbers)\n    return sum(abs(x) for x in deviations) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_of_squares = 0\n    for num in numbers:\n        sum_of_squares += (num - mean_of_numbers(numbers)) ** 2\n    return sum_of_squares / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # get the mean\n    mean = sum(numbers) / len(numbers)\n    # get the absolute deviations\n    deviations = map(lambda x: abs(x - mean), numbers)\n    # get the average of those abs deviated values\n    return sum(deviations) / len(deviations)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    mean = sum(numbers) / len(numbers)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert numbers, \"Invalid input\"\n    assert all(isinstance(element, float) for element in numbers), \"Invalid input\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    if n < 2:\n        return 0.0\n    total = 0.0\n    for x in numbers:\n        total += abs(x - mean_of_list(numbers))\n    return total / n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    mean = sum(numbers) / len(numbers)\n    return sum([abs(i - mean) for i in numbers]) / len(numbers)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not numbers:\n        return []\n    n = len(numbers)\n    if n == 1:\n        return [numbers[0], delimeter]\n    else:\n        return [delimeter] * (n - 1) + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    length = len(numbers)\n    if length == 0:\n        return []\n    else:\n        if delimeter == 0:\n            return numbers\n        else:\n            return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    size = len(numbers)\n    new_list = []\n    count = 0\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Check that input is not empty\n    if not numbers:\n        return numbers\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    i = 0\n    while i < len(numbers):\n        result += numbers[i]\n        i += 1\n        result += delimeter\n    return result[:-1]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [numbers[0], delimeter, numbers[0]]\n    else:\n        return [numbers[0], delimeter] + numbers[1:-1] + [numbers[-1]]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return list(map(lambda x: x, range(1, len(numbers)+1, delimeter))) + numbers + list(map(lambda x: x, range(1, len(numbers)+1, delimeter)))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [delimeter] + numbers + [delimeter]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return []\n    if n == 1:\n        return numbers\n    a = []\n    for i in range(n):\n        if i == 0:\n            a.append(numbers[i])\n        elif i == n - 1:\n            a.append(numbers[i])\n        else:\n            a.append(numbers[i])\n            a.append(delimeter)\n    return a\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return_list = []\n    length = len(numbers)\n    for index, value in enumerate(numbers):\n        if index % 2 == 0:\n            return_list.append(delimeter)\n            return_list.append(value)\n        else:\n            return_list.append(value)\n    return return_list\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # list to store values and index of the list\n    # to start with a zero at the beginning\n    values = []\n    list_index = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    paren_string = paren_string.replace(' ', '')\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    paren_strings = list(paren_string.split(' '))\n    nested_list = []\n    for string in paren_strings:\n        depth = 0\n        nested_list.append(depth)\n        for char in string:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n        nested_list.append(depth)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    list_of_groups = paren_string.split()\n    list_of_groups = [group.strip('()') for group in list_of_groups]\n    list_of_groups = [group for group in list_of_groups if group!= '']\n    return list_of_groups\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # TODO: replace this with your solution\n    nested_lst = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            nested_lst.append(i)\n    return nested_lst\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    paren_stack = []\n    result_list = []\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    paren_string = paren_string.strip()\n    paren_stack = []\n    depth = 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if paren_string == '':\n        return []\n    nesting = 0\n    nested_parens = list()\n    for char in paren_string:\n        if char == '(':\n            nesting += 1\n        elif char == ')':\n            nesting -= 1\n            if nesting == 0:\n                nested_parens.append(nesting)\n    return nested_parens\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Step 1: Get the total number of paranthesis ( or the total number of open parens\n    parens = 0\n    open_parens = 0\n    for char in paren_string:\n        if char == '(':\n            parens += 1\n        elif char == ')':\n            parens -= 1\n        elif char == '(' and parens < 0:\n            open_parens += 1\n        elif char == ')' and parens > 0:\n            open_parens -= 1\n    # Step 2: Get the number of nested paranthesis\n    return [parens, open_parens]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_count = 0\n    level = 0\n    result_list = []\n    for p in paren_string:\n        if p == '(':\n            paren_count += 1\n            level += 1\n            if paren_count == 1:\n                result_list.append(level)\n        elif p == ')':\n            paren_count -= 1\n            if paren_count == 0:\n                result_list.append(level)\n                level -= 1\n    return result_list\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    filtered_list = []\n    for string in strings:\n        if substring.lower() in string.lower():\n            filtered_list.append(string)\n    return filtered_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [string for string in strings if substring in string]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [x for x in strings if substring in x]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return filter(lambda x: substring in x, strings)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return (s, p)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    prod = 1\n    for i in numbers:\n        sum += i\n        prod *= i\n    return (sum, prod)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not numbers:\n        return (0, 1)\n    else:\n        return (numbers[0], numbers[0] * sum(numbers[1:]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if numbers == []:\n        return (0, 1)\n    else:\n        return (sum(numbers), numbers[0] * numbers[1] * numbers[2] * numbers[3])\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    prod = 1\n    for num in numbers:\n        sum += num\n        prod *= num\n    return sum, prod\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = 0\n    p = 1\n    for n in numbers:\n        s += n\n        p *= n\n    return s, p\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(numbers), prod(numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_numbers = 0\n    product_numbers = 1\n    if len(numbers) == 0:\n        return (0, 1)\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return (sum_numbers, product_numbers)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (sum(numbers), prod(numbers))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum_val = 0\n    prod_val = 1\n    for val in numbers:\n        sum_val += val\n        prod_val *= val\n    return (sum_val, prod_val)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    maximums = []\n    for i in range(1, len(numbers)):\n        maximums.append(max(numbers[:i]))\n    return maximums\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result: List[int] = []\n    result.append(max(numbers))\n    for i in range(1, len(numbers)):\n        result.append(max(result[i - 1], numbers[i]))\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) == 1:\n        return numbers\n    last_max = numbers[0]\n    maxes = []\n    for num in numbers[1:]:\n        last_max = max(last_max, num)\n        maxes.append(last_max)\n    return maxes\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    max_value = numbers[0]\n    for i in range(len(numbers)):\n        max_value = max(max_value, numbers[i])\n        result.append(max_value)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > result:\n            result = numbers[i]\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    last_max = numbers[0]\n    max_values = []\n    for i in range(len(numbers)):\n        if numbers[i] > last_max:\n            last_max = numbers[i]\n        max_values.append(last_max)\n    return max_values\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(numbers) == 1:\n        return numbers\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    maximum = None\n    for number in numbers:\n        if maximum is None:\n            maximum = number\n            result.append(maximum)\n        else:\n            if number > maximum:\n                maximum = number\n            result.append(maximum)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    max_ = numbers[0]\n    max_rolling = numbers[0]\n    rolling_max = []\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    current_max = numbers[0]\n    for i in range(1, len(numbers)):\n        current_max = max(numbers[i], current_max)\n        result.append(current_max)\n    return result\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Get the longest prefix that is a palindrome\n    longest_palindrome = longest_palindrome_prefix(string)\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    if len(longest_palindrome) > 0:\n        return string + longest_palindrome[::-1]\n    else:\n        return string + string[::-1]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Fix this function.\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # base cases\n    if not string:\n        return ''\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not is_palindrome(string):\n        return None\n    string_len = len(string)\n    if string_len == 1:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not string: return ''\n    palindrome_suffix = get_palindrome_suffix(string)\n    string = string + palindrome_suffix\n    # reverse to reverse it back to original order\n    reverse_string = string[::-1]\n    # print(reverse_string)\n    # find the starting index\n    index = 0\n    while index < len(string) and is_palindrome(reverse_string[:index + 1]):\n        index += 1\n    return string[:index] + reverse_string[:index]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    suffix = get_longest_palindrome(string)\n    # if no palindrome\n    if not suffix:\n        return string\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # we want a palindrome\n    if not is_palindrome(string):\n        return string\n    \n    if string == '':\n        return string\n    \n    # find the longest palindrome prefix\n    prefix = string\n    prefix_length = 0\n    while prefix and is_palindrome(prefix):\n        prefix = prefix[:-1]\n        prefix_length += 1\n    \n    # find the shortest palindrome suffix\n    suffix = string\n    suffix_length = 0\n    while suffix and is_palindrome(suffix):\n        suffix = suffix[1:]\n        suffix_length += 1\n    \n    # find the shortest palindrome\n    if prefix_length + suffix_length > len(string):\n        # string is longer than any found palindrome\n        return string\n    else:\n        return string[prefix_length: -suffix_length]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert isinstance(string, str)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert isinstance(string, str),'string must be a string'\n    # Don't try to duplicate this operation, and instead, just\n    # use the length of the string and the length of the reverse of the string\n    # to find the longest palindrome that begins with the supplied string.\n    if len(string) <= 1:\n        return string\n    longest_palindrome = string\n    for midpoint in range(1, len(string) - 1):\n        # A palindrome is the prefix of the string that is also\n        # the postfix of the reverse of the string.\n        if is_palindrome(string[:midpoint]):\n            # The string itself is a palindrome, so we don't need to\n            # check that again.\n            break\n        # Try to find a suffix of the string that is also a palindrome.\n        for endpoint in range(1, len(string) - midpoint):\n            if is_palindrome(string[midpoint:endpoint + 1]):\n                if len(string[:midpoint]) > len(longest_palindrome):\n                    longest_palindrome = string[:midpoint]\n    return longest_palindrome + string[len(longest_palindrome):]\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not is_palindrome(string):\n        return string\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a == '0' or b == '0':\n        return '0'\n    return '1' if a!= b else '0'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return ''.join(chr(int(x, 2) ^ int(y, 2)) for x, y in zip(a, b))\n    return ''.join(chr(ord(x) ^ ord(y)) for x, y in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join([a[i] if a[i]!= b[i] else '0' for i in range(len(a))])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res = \"\"\n    for i in range(0, len(a)):\n        res += \"0\" if a[i] == b[i] else \"1\"\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([\"1\" if x == \"0\" else \"0\" for x in zip(a, b)])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return ''.join([\"{}\".format(i) for i in a ^ b])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(a) == len(b), 'Inputs must be of the same length.'\n    return str(int(a) ^ int(b))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join([x if x == '1' else '0' for x in a ^ b])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    xor_out = int(a, 2) ^ int(b, 2)\n    return bin(xor_out)[2:]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for str in strings:\n        if len(str) > len(longest_str):\n            longest_str = str\n    return longest_str\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    for i in strings:\n        if len(i) > 0:\n            return i\n    return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not strings:\n        return\n    if len(strings) == 1:\n        return strings[0]\n    result = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(result):\n            result = string\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(strings) == 0:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    max_length = 0\n    result = \"\"\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            result = string\n    if result:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return max(strings, key=len) if strings else None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a if b == 0 else greatest_common_divisor(b, a % b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while a > 0 and b > 0:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return max(a, b)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while a!= b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a == b:\n        return a\n    elif a < b:\n        return greatest_common_divisor(b, a)\n    else:\n        return greatest_common_divisor(a, b-a)\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while a % b!= 0:\n        a, b = b, a % b\n    return b\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not string:\n        return []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    prefix = \"\"\n    prefixes = []\n    while len(prefix) <= len(string):\n        for index in range(len(string)):\n            prefix += string[index]\n            prefixes.append(prefix)\n    return prefixes\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    prefix_list = []\n    for i in range(len(string)):\n        prefix_list.append(string[:i + 1])\n    return prefix_list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prefixes = []\n    length = len(string)\n    for i in range(length):\n        prefixes.append(string[0:i+1])\n    return prefixes\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return f'{n} {string_sequence(n-1)}'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers = '0'\n    if n > 0:\n        numbers = numbers +'' +''.join(map(str, range(1, n+1)))\n    return numbers\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s =''.join(str(i) for i in range(n + 1))\n    return s\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(str(i) for i in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 0:\n        return '0'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(str(i) for i in range(n + 1))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return''.join([str(i) for i in range(n + 1)])\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join(str(i) for i in range(n+1))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # str_lower = string.lower()\n    # return len(set(str_lower))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = set()\n    for s in string:\n        result.add(s.lower())\n    return len(result)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) == 0:\n        return 0\n    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    string = string.lower()\n    for ch in string:\n        if count == 0:\n            count += 1\n            continue\n        if ch.lower() == string[count - 1].lower():\n            count += 1\n        else:\n            count = 1\n    return count\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(string.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    notes = {\n        \"c\": 4,\n        \"d\": 2,\n        \"e\": 1,\n        \"f\": 1,\n        \"g\": 1,\n        \"a\": 1,\n        \"b\": 1\n    }\n    # Keyed on each letter\n    final_list = []\n    for index, letter in enumerate(music_string):\n        if letter == \"|\":\n            final_list.append(notes[music_string[index - 1]])\n        elif letter == \".\":\n            final_list.append(notes[music_string[index - 1]])\n            final_list.append(notes[music_string[index + 1]])\n        elif letter == \"o\":\n            final_list.append(notes[music_string[index - 1]])\n            final_list.append(notes[music_string[index + 1]])\n    # return list of how many beats each note lasts\n    return final_list\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    parsed = music_string.split('|')\n    parsed = [s.replace('o', '0').replace('.', '4') for s in parsed]\n    parsed = list(map(int, parsed))\n    return parsed\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    music_string = music_string.strip()\n    notes = ['o', 'o|', '.', '|o|', '|o', '.', '.', '|o|', 'o|', 'o|', '|o|', 'o|', '|o', 'o|', '|o|', 'o|', 'o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|',\n            '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|',\n            'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|', 'o|', '|o|', 'o|',\n            'o|', '|o|', 'o"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    ans = []\n    # split string into a list\n    arr = music_string.split()\n    for i in range(len(arr)):\n        if arr[i] == 'o':\n            ans.append(4)\n        elif arr[i] == 'o|':\n            ans.append(2)\n        elif arr[i] == '|':\n            ans.append(1)\n    return ans\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [len(music_string) - len(music_string.replace('o', '').replace('|', '')) for music_string in music_string.split('.')]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    notes = list(music_string)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [int(note) for note in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    notes = []\n    for i, c in enumerate(music_string):\n        if c == '|':\n            if i > 0 and music_string[i - 1] == 'o':\n                notes.append(4)\n            else:\n                notes.append(2)\n        elif c == '|':\n            if i > 0 and music_string[i - 1] == 'o':\n                notes.append(2)\n            elif i > 0 and music_string[i - 1] == '.':\n                notes.append(1)\n            else:\n                notes.append(4)\n        elif c == '.':\n            if i > 0 and music_string[i - 1] == '|':\n                notes.append(1)\n            else:\n                notes.append(4)\n        elif c == 'o':\n            if i > 0 and music_string[i - 1] == '|':\n                notes.append(2)\n            else:\n                notes.append(1)\n    return notes\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [4 if 'o' in s else 2 if 'o|' in s else 1 if '.' in s else 1 for s in music_string.split()]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [4 if x == 'o' else 2 if x == 'o|' else 1 if x == '.' else 0 for x in music_string]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    if len(substring) > len(string):\n        return count\n    i = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    count = 0\n    if string == '':\n        return 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i: i + len(substring)]:\n            times += 1\n    return times\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i : i + len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0] and string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.count(substring)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return''.join(sorted(numbers.split()))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Declare the numbers as an empty list\n    numbers_list = []\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_numbers = numbers.split()\n    new_numbers.sort()\n    return \" \".join(new_numbers)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers_list = numbers.split()\n    for i in range(len(numbers_list)):\n        numbers_list[i] = int(numbers_list[i])\n    numbers_list = sorted(numbers_list, key=int)\n    return \" \".join([str(i) for i in numbers_list])\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \" \".join(sorted(numbers.split(), key=lambda x: (x == 'zero', x == 'one', x == 'two', x == 'three', x == 'four', x == 'five', x =='six', x =='seven', x == 'eight', x == 'nine')))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: sort_numbers(numbers)\n    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(numbers.split(' '))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \" \".join(sorted(numbers.split(), key=lambda x: int(x)))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    numbers = numbers.split(' ')\n    new_list = []\n    for number in numbers:\n        if number.lower() in ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']:\n            new_list.append(number)\n    for number in new_list:\n        new_list.sort()\n    return''.join(new_list)\n    \n    \ndef sort_words(sentence: str) -> str:\n    \"\"\" Sort words in a sentence. Words are separated by one space.\n    >>> sort_words('How are you?')\n    'how are you'\n    >>> sort_words('why? is this not working?')\n    'stay? is not working'\n    \"\"\"\n    sentence = sentence.split()\n    for word in range(len(sentence)):\n        min_val = word\n        for word_check in range(word+1, len(sentence)):\n            if sentence[word] > sentence[min_val]:\n                min_val = word_check\n        temp = sentence[word]\n        sentence[word] = sentence[min_val]\n        sentence[min_val] = temp\n    return''.join(sentence)\n    \n    \ndef check_palindrome(string: str) -> bool:\n    \"\"\" Check whether the input string is a palindrome.\n    >>> check_palindrome('helleh')\n    True\n    >>> check_palindrome('relaxed')\n    False\n    >>> check_palindrome('h')\n    True\n    \"\"\"\n    string = string.lower()\n    for i in range(len(string)//2):\n        if string[i]!= string[-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for idx, val in enumerate(numbers):\n        if idx == 0:\n            closest = val\n            prev = val\n        else:\n            if abs(val - closest) > abs(val - prev):\n                closest = val\n                prev = val\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert len(numbers) >= 2\n    assert all(isinstance(x, (int, float)) for x in numbers)\n    assert all(x >= 0 for x in numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums = numbers[:]\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    idx = None\n    num = None\n    if diff == 0:\n        return (nums[0], nums[1])\n    else:\n        for i, num in enumerate(nums):\n            if diff == 0:\n                return (num, num)\n            if abs(num - max_num) < abs(num - min_num):\n                diff = abs(num - max_num)\n                idx = i\n                num = max_num\n                max_num = num\n            else:\n                diff = abs(num - min_num)\n                idx = i\n                num = min_num\n                min_num = num\n    return (nums[idx], nums[idx + 1])\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers.sort()\n    return numbers[0], numbers[-1]\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"Invalid input\")\n    if len(numbers) == 1:\n        return numbers[0], numbers[0]\n    if len(numbers) == 2:\n        return min(numbers), max(numbers)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    closest = numbers[0], numbers[1]\n    for i in numbers[2:]:\n        if i < closest[0]:\n            closest = i, closest[0]\n        elif i > closest[1]:\n            closest = closest[1], i\n    return closest\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # CLOSEST ELEMENTS\n    # Using two pointers\n    # Time: O(N) Space: O(1)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # import pdb; pdb.set_trace()\n    first_number = numbers[0]\n    second_number = numbers[1]\n    min_distance = float('inf')\n    min_num1 = 0\n    min_num2 = 0\n    for i in range(len(numbers)):\n        if abs(first_number - numbers[i]) < min_distance:\n            min_distance = abs(first_number - numbers[i])\n            min_num1 = i\n        if abs(second_number - numbers[i]) < min_distance:\n            min_distance = abs(second_number - numbers[i])\n            min_num2 = i\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return (numbers[0], numbers[-1])\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    min_diff = float('inf')\n    min_diff_index = None\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_index = (i, j)\n    return numbers[min_diff_index[0]], numbers[min_diff_index[1]]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Compute the range of numbers\n    min_num = numbers[0]\n    max_num = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < min_num:\n            min_num = numbers[i]\n        if numbers[i] > max_num:\n            max_num = numbers[i]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    denominator = max_num - min_num\n    numerator = 1.0 - denominator\n    rescaled = [numerator * num - min_num for num in numbers]\n    return rescaled\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) <= 1:\n        return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_val = float(min(numbers))\n    max_val = float(max(numbers))\n    diff = max_val - min_val\n    if diff == 0:\n        return numbers\n    result = [x - min_val for x in numbers]\n    for i in range(len(result)):\n        result[i] = result[i] / diff\n    return result\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) == 0:\n        raise ValueError(\"Length of list cannot be 0\")\n    if len(numbers) == 1:\n        return numbers\n    return [x / numbers[0] for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = 1.0\n    b = -0.0\n    max_value = max(numbers)\n    min_value = min(numbers)\n    scale_factor = max_value - min_value\n    return [(n - min_value) * a / scale_factor + b for n in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert len(numbers) > 2\n    assert min(numbers) >= 0\n    assert max(numbers) <= 1\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [(num - min(numbers))/(max(numbers) - min(numbers)) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(numbers)):\n        numbers[i] /= sum(numbers)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return filter(lambda x: isinstance(x, int), values)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [int(value) for value in values if type(value) == int]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    filtered_values = []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda val: isinstance(val, int), values))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(string)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert isinstance(string, str), 'Not a string!'\n    return len(string)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    divisor = 1\n    while n > divisor:\n        divisor += 1\n    return divisor\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return max(list(filter(lambda x: n%x == 0, range(1, n+1))))\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(i for i in range(1, n + 1) if n % i == 0)\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    largest = 0\n    for i in range(1, n):\n        if n % i == 0:\n            if i > largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    else:\n        largest_divisor_ = 1\n        while n % largest_divisor_!= 0:\n            largest_divisor_ += 1\n        return largest_divisor_\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1: return n\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 1\n    while i <= n:\n        if n%i == 0:\n            if i!= n:\n                return i\n        i += 1\n    return n\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = n\n    while n % 2 == 0:\n        n = n // 2\n        result = max(result, n)\n    return result\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 1 if n == 0 else (n - 1) // 2\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    import math\n    if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n    if len(factors) == 1:\n        return factors\n    else:\n        return factors + factorize(n)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    divisor = 2\n    factors = []\n    while divisor ** 2 <= n:\n        if n % divisor == 0:\n            if divisor not in factors:\n                factors.append(divisor)\n                n //= divisor\n            else:\n                break\n        else:\n            divisor += 1\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    \n    if n == 1:\n        return n\n    prime_factors = []\n    while n!= 1:\n        for i in range(2, n+1):\n            if n % i == 0:\n                n = n//i\n                prime_factors.append(i)\n                break\n        else:\n            return prime_factors\n            \n    \n    \n    \n    \n    \n    \ndef prime_factors(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors(8)\n    [2, 2, 2]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    prime_factors = []\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_2(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_2(8)\n    [2, 2, 2]\n    >>> prime_factors_2(25)\n    [5, 5]\n    >>> prime_factors_2(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_3(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_3(8)\n    [2, 2, 2]\n    >>> prime_factors_3(25)\n    [5, 5]\n    >>> prime_factors_3(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_4(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_4(8)\n    [2, 2, 2]\n    >>> prime_factors_4(25)\n    [5, 5]\n    >>> prime_factors_4(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_5(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_5(8)\n    [2, 2, 2]\n    >>> prime_factors_5(25)\n    [5, 5]\n    >>> prime_factors_5(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_6(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_6(8)\n    [2, 2, 2]\n    >>> prime_factors_6(25)\n    [5, 5]\n    >>> prime_factors_6(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_7(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Input number should be equal to the product of all factors\n    >>> prime_factors_7(8)\n    [2, 2, 2]\n    >>> prime_factors_7(25)\n    [5, 5]\n    >>> prime_factors_7(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \ndef prime_factors_8(n: int) -> List[int]:\n    \"\"\" Return list of prim"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            if n / i!= i:\n                factors.append(int(n / i))\n    factors.sort()\n    return factors\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def factorize_helper(num):\n        factors = []\n        while num % 2 == 0:\n            factors.append(2)\n            num = num // 2\n        for i in range(3, int(num**0.5)+1, 2):\n            while num % i == 0:\n                factors.append(i)\n                num = num // i\n        if num > 2:\n            factors.append(num)\n        return factors\n    \n    if n == 1:\n        return []\n    elif n == 2:\n        return [1, 2]\n    factors = factorize_helper(n)\n    primes = []\n    for factor in factors:\n        while factor in primes:\n            factor = factor + 1\n        primes.append(factor)\n    return primes\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    factors = []\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factors = {}\n    for i in range(2, n+1):\n        count = 0\n        while n % i == 0:\n            n = n // i\n            count += 1\n        factors[i] = count\n    factors[n] = count\n    return factors.values()\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    if n == 1:\n        return result\n    elif n % 2 == 0:\n        return factorize(n // 2) + [2]\n    else:\n        tmp = factorize(n - 1)\n        result.append(tmp[0])\n        for i in range(len(tmp)):\n            if tmp[i] == tmp[0]:\n                result.append(tmp[i] * 2)\n            else:\n                break\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(numbers)\n    s = set(numbers)\n    return list(s)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    numbers_set = set(numbers)\n    return list(numbers_set)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = set(numbers)\n    return list(s)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    numbers_sorted = numbers.copy()\n    numbers_sorted.sort()\n    if numbers!= numbers_sorted:\n        numbers = numbers_sorted\n        n = len(numbers)\n    i = 1\n    while i < n:\n        if numbers[i - 1] == numbers[i]:\n            numbers.pop(i)\n            n -= 1\n            i -= 1\n        else:\n            i += 1\n    return numbers\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # If there are no duplicate numbers, return the original list.\n    if len(numbers) == len(set(numbers)):\n        return numbers\n    return [x for x in numbers if numbers.count(x) == 1]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    temp_list = []\n    for i in range(len(numbers)):\n        if numbers[i] not in temp_list:\n            temp_list.append(numbers[i])\n    return temp_list\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # initialize a new list and set a variable to keep track of seen items\n    new_numbers = []\n    seen_numbers = set()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.swapcase()"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not string:\n        return string\n    return ''.join(c.swapcase() for c in string)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.upper() if string.islower() else string.lower()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join([x.upper() if x.islower() else x.lower() for x in string])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    concatenated_strings = []\n    for string in strings:\n        concatenated_strings.append(string)\n    concatenated_string = ''.join(concatenated_strings)\n    return concatenated_string\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return ''\n    return ''.join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not strings:\n        return ''\n    return strings[0] + ''.join(strings[1:])\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join(strings)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not strings:\n        return \"\"\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return strings[0] + ''.join([str(i) for i in range(1, len(strings))])\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x for x in strings if x.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n    return filtered\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not prefix:\n        return strings\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [l for l in l if l >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: x > 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_list = []\n    for element in l:\n        if element > 0:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return list(filter(lambda x: x >= 0, l))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [n for n in l if n > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [x for x in l if x >= 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # return list(filter(lambda x: x > 0, l))\n    return list(filter(lambda x: x > 0, l))\n    \ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-4, -1]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -9, -123, -1]\n    \"\"\"\n    # return list(filter(lambda x: x < 0, l))\n    return list(filter(lambda x: x < 0, l))\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [num for num in l if num > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l = l[:]\n    for i in range(len(l)):\n        if l[i] < 0:\n            del l[i]\n    return l\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 1:\n        return False\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 2:\n        return True\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Use the is_prime(2) function to check if n is prime or not.\n    # If n is not prime, return false\n    # If n is prime, return True\n    if n!= 0 and n == 1:\n        return False\n    # Use the is_prime(3) function to check if n is prime or not.\n    # If n is not prime, return false\n    # If n is prime, return True\n    for k in range(2, n):\n        if n % k == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1 or n == 0:\n        return False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return False\n    for k in range(2, n):\n        if n % k == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_divisor, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 3:\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            return n == 3\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return not is_prime(n-1)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i, x in enumerate(xs):\n        if i % 2 == 0 and x!= 0:\n            return i / 2 - 1\n        elif x == 0:\n            return -1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(xs)\n    i = n // 2\n    while True:\n        if n % 2 == 0:\n            x = 1 / xs[i] - 1 / xs[i - 1]\n            if abs(x) < 1e-8:\n                return x\n            i = (i + 1) // 2\n        else:\n            x = (xs[i] + xs[i - 1]) / 2\n            if abs(x) < 1e-8:\n                return x\n            i = i + 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    xs = sorted(xs)\n    if xs[0] == 0:\n        return None\n    if xs[0]!= 0 and xs[0] > 0:\n        return 0\n    if xs[0]!= 0 and xs[0] < 0:\n        return 0\n    if xs[0] == 0:\n        return 0\n    if xs[0] < 0:\n        return 0\n    if xs[0] > 0:\n        return 0\n    if xs[1] == 0:\n        return 1\n    if xs[1] == 1:\n        return xs[2]\n    if xs[1] == -1:\n        return -xs[2]\n    if xs[1] == -2:\n        return 0\n    if xs[1] == -3:\n        return -xs[2]\n    if xs[1] == -4:\n        return 0\n    if xs[1] == -5:\n        return xs[2]\n    if xs[1] == -6:\n        return 0\n    if xs[1] == -7:\n        return -xs[2]\n    if xs[1] == -8:\n        return 0\n    if xs[1] == -9:\n        return xs[2]\n    if xs[1] == -10:\n        return 0\n    if xs[1] == -11:\n        return -xs[2]\n    if xs[1] == -12:\n        return 0\n    if xs[1] == -13:\n        return -xs[2]\n    if xs[1] == -14:\n        return 0\n    if xs[1] == -15:\n        return -xs[2]\n    if xs[1] == -16:\n        return 0\n    if xs[1] == -17:\n        return -xs[2]\n    if xs[1] == -18:\n        return 0\n    if xs[1] == -19:\n        return -xs[2]\n    if xs[1] == -20:\n        return 0\n    if xs[1] == -21:\n        return -xs[2]\n    if xs[1] == -22:\n        return 0\n    if xs[1] == -23:\n        return -xs[2]\n    if xs[1] == -24:\n        return 0\n    if xs[1] == -25:\n        return -xs[2]\n    if xs[1] == -26:\n        return 0\n    if xs[1] == -27:\n        return -xs[2]\n    if xs[1] == -28:\n        return 0\n    if xs[1] == -29:\n        return -xs[2]\n    if xs[1] == -30:\n        return 0\n    if xs[1] == -31:\n        return -xs[2]\n    if xs[1] == -32:\n        return 0\n    if xs[1] == -33:\n        return -xs[2]\n    if xs[1] == -34:\n        return 0\n    if xs[1] == -35:\n        return -xs[2]\n    if xs[1] == -36:\n        return 0\n    if xs[1] == -37:\n        return -xs[2]\n    if xs[1] == -38:\n        return 0\n    if xs[1] == -39:\n        return -xs[2]\n    if xs[1] == -40:\n        return 0\n    if xs[1] == -41:\n        return -xs[2]\n    if xs[1] == -42:\n        return 0\n    if xs[1] == -43:\n        return -xs[2]\n    if xs[1] == -44:\n        return 0\n    if xs[1] == -45:\n        return -xs[2]\n    if xs[1] == -46:\n        return 0\n    if xs[1] == -47:\n        return -xs[2]\n    if xs[1] == -48:\n        return 0\n    if xs[1] == -49:"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # is x a solution of the given polynomial?\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            # x is a solution\n            return i\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert len(xs) % 2 == 0\n    xs = xs[:-1] # trim zero coefficient\n    negs = []\n    for i, coeff in enumerate(xs):\n        if coeff < 0:\n            negs.append(i)\n    if len(negs) == 0:\n        return xs[0]\n    elif len(negs) == 1:\n        return xs[negs[0]] - xs[negs[0] - 1] / xs[negs[0]]\n    elif len(negs) == 2:\n        return (xs[negs[1]] - xs[negs[0]]) / (xs[negs[1]] - xs[negs[0] - 1])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(xs)\n    if n < 3:\n        return None\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = 0\n    while poly(xs, x)!= 0:\n        x += 1\n    return x\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not xs:\n        return None\n    xs.sort(reverse=True)\n    i = 0\n    while xs[i]!= 0:\n        i += 1\n    return -(xs[i - 1] / xs[i])\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # make sure xs have even length\n    assert len(xs) % 2 == 0\n    # count how many coefficients are non zero and sort decreasingly\n    non_zero = 0\n    while xs[non_zero] == 0:\n        non_zero += 1\n    non_zero_coeffs = xs[:non_zero]\n    non_zero_coeffs.reverse()\n    # find zero\n    for i in range(len(non_zero_coeffs)):\n        coeff = non_zero_coeffs[i]\n        zero_coeff = -coeff / 2\n        # adding 1 because we want 1.0 + 2 * x + 3 * x^2 + 4 * x^3 +....\n        xs = list(xs)\n        xs.insert(i + 1, 1)\n        if round(poly(xs, zero_coeff), 2) == 0:\n            return zero_coeff\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert len(xs) % 2 == 0 and max(xs) > 0, \"xs must be list of all non zero coefficients\"\n    assert len(xs) > 0, \"xs must be list of all non zero coefficients\"\n    return math.sqrt(-2 * xs[0])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    l_copy = l.copy()\n    divisor = 3\n    while divisor in l_copy:\n        l_copy.remove(divisor)\n        divisor += 3\n    \n    for i in range(len(l_copy)):\n        if l_copy[i] % divisor!= 0:\n            l_copy.insert(i, l_copy.pop(i+1))\n    \n    return l_copy"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l_third = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_third.append(l[i])\n    for i in range(len(l_third)):\n        for j in range(len(l)):\n            if l_third[i] == l[j] and i % 3!= 0:\n                l_third[i] = l[j]\n                break\n    return l_third\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l_sorted = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_sorted.append(l[i])\n        else:\n            l_sorted.append(l[i])\n            l_sorted.append(l[i])\n    return l_sorted\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return l[0:3] + sorted(l[3:], key=lambda x: x % 3 == 0) + l[3:]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l2 = []\n    i = 0\n    while i < len(l):\n        if l[i] % 3!= 0:\n            l2.append(l[i])\n        else:\n            l2.extend([l[i],l[i+1],l[i+2]])\n        i += 3\n    return l2\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l_copy = l.copy()\n    new_l = []\n    for i in range(len(l)):\n        if i % 3!= 0:\n            new_l.append(l_copy[i])\n    for j in range(len(new_l)):\n        if j % 3 == 0:\n            new_l.append(new_l[j])\n    return new_l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(l)\n    for i in range(0, n):\n        if i % 3 == 0:\n            continue\n        else:\n            for j in range(0, n):\n                if i == j:\n                    continue\n                elif i % 3 == 0 and j % 3 == 0:\n                    if l[i] > l[j]:\n                        l[i], l[j] = l[j], l[i]\n    return l\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(l, key=lambda x: x if x % 3!= 0 else x % 10)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #initialize empty list\n    l' = []\n    #sort values of l\n    l.sort()\n    #return list l'\n    return l'\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l1 = []\n    l2 = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    l = l1 + l2\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l = l1 + l2\n    return l\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = []\n    for i in l:\n        if i not in lst:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return l\n    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set(l)))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    seen = []\n    for i in l:\n        if i not in seen:\n            seen.append(i)\n    return seen\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(set(l))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(set(l))"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if l == []:\n        return None\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    return max_val\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if l == []:\n        return None\n    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if l is None:\n        raise ValueError(\"list cannot be None\")\n    if l == []:\n        raise ValueError(\"list cannot be empty\")\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return max(l)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    largest = 0\n    for i in range(len(l)):\n        if l[i] > largest:\n            largest = l[i]\n    return largest\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest = None\n    for i in l:\n        if largest == None or i > largest:\n            largest = i\n    return largest\n    \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    counter = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(1 if n % i == 0 else 0 for i in range(11, n, 11) if not (n % i == 7 or n % i == 13))\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    count = 0\n    for i in range(1, n):\n        if i % 7 == 0:\n            count += 1\n            if i % 11 == 0:\n                count += 1\n                if i % 13 == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n            if count % 2 == 0:\n                print(i)\n        else:\n            print(i)\n        "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(list(filter(lambda x: (x % 11 == 7 or x % 13 == 7), range(1, n + 1))))\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    counter = 0\n    for i in range(1, n+1):\n        if i % 7 == 0 or i % 11 == 0:\n            if i % 13 == 0:\n                counter += 1\n            else:\n                counter += 1\n                print(i, end=\" \")\n    return counter\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if i % 11 == 7:\n            count += 1\n        elif i % 13 == 7:\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(1 for i in range(n) if i % 7 == 7 or i % 13 == 13)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(fizzbuzz(i) for i in range(1, n + 1))\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even_indices = []\n    odd_indices = []\n    for i, val in enumerate(l):\n        if i%2 == 0:\n            even_indices.append(val)\n        else:\n            odd_indices.append(val)\n    even_indices.sort()\n    odd_indices.sort()\n    l = even_indices + odd_indices\n    return l\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = []\n    n = len(l)\n    for i in range(n):\n        if i % 2 == 0:\n            s.append(l[i])\n    \n    for i in range(n):\n        if i % 2 == 1:\n            s.append(l[i])\n    \n    return s\n    \n    \ndef test_sort_even():\n    assert sort_even([1, 2, 3]) == [1, 2, 3]\n    assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l.sort()\n    even = []\n    for i in range(0, len(l), 2):\n        even.append(l[i])\n    for i in range(1, len(l), 2):\n        even.append(l[i])\n    return even\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l_even = []\n    l_odd = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            l_even.append(l[i])\n        else:\n            l_odd.append(l[i])\n    return sorted(l_even) + sorted(l_odd)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_indicies = []\n    odd_indicies = []\n    for i, val in enumerate(l):\n        if i % 2 == 0:\n            even_indicies.append(val)\n        else:\n            odd_indicies.append(val)\n    even_indicies.sort()\n    odd_indicies.sort()\n    even_indicies.extend(odd_indicies)\n    return even_indicies\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even = []\n    odd = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    even.sort()\n    odd.sort()\n    return even + odd\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    for i in range(1, len(l_copy), 2):\n        if l_copy[i]!= l_copy[i-1]:\n            l_copy[i], l_copy[i-1] = l_copy[i-1], l_copy[i]\n    return l_copy\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_index = 0\n    odd_index = 0\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(l, key=lambda x: x % 2 == 0)\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = len(l)\n    for i in range(n):\n        if l[i] % 2!= 0:\n            for j in range(n - 1, i, -1):\n                if l[j] % 2 == 0 and l[j] > l[i]:\n                    l[i], l[j] = l[j], l[i]\n    return l\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not s:\n        return \"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[0] + group[1] + group[2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse each group.\n    groups = [group[::-1] for group in groups]\n    # cycle elements in each group.\n    groups = [group + group[0] for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(s) % 3!= 0:\n        print(\"Error: string length must be a multiple of 3!\")\n        return\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # make groups of 3 and extract last element. If last element is smaller than 3, group is incomplete.\n    groups = s.split(\"\".join([\".\", \".\", \".\"]))[::3]\n    groups = [group[-3:] if len(group) < 3 else group for group in groups]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert(len(s) % 3 == 0)\n    s = list(s)\n    res = []\n    for i in range(len(s) // 3):\n        res.append(s[i * 3])\n        res.append(s[i * 3 + 1])\n        res.append(s[i * 3 + 2])\n    return \"\".join(res)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        a = 1\n        b = 2\n        while b <= n:\n            c = a + b\n            if c >= n:\n                break\n            a, b = b, c\n        return b\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        raise ValueError(f\"Fibonacci number must be >= 2 but n == {n}\")\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 0:\n        raise ValueError(f\"{n} is not prime\")\n    if n == 0 or n == 1:\n        return 2\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n        if is_prime(b):\n            return b\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1:\n        return 1\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    fib_n = fib_numbers[n - 1]\n    prime_n = is_prime(fib_n)\n    return fib_n, prime_n\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        x = prime_fib(n-1)\n        y = prime_fib(n-2)\n        if x + y == y + x:\n            return x + y\n        else:\n            return y + x\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a, b = 0, 1\n    for i in range(2, n):\n        a, b = b, a + b\n    print(a)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 2\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(l) < 3:\n        return False\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return any((x + y + z) == 0 for x, y, z in combinations(l, 3))\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum_ = 0\n    length = len(l)\n    for i in l:\n        for j in l:\n            if i+j == 0:\n                sum_ += 1\n    if sum_ == length:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if (i!= j) and (i!= k) and (j!= k) and (l[i] + l[j] + l[k] == 0):\n                    return True\n    return False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return False\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    if 0 in d:\n        del d[0]\n    if len(d) < 3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for a in range(len(l)-2):\n        if l[a] + l[a+1] + l[a+2] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # This is a recursive function that, when it detects a collision,\n    # it calls a function that prints the cars that collided.\n    # The problem is that it's using a \"sliding window\" approach.\n    # For example, if there are two cars moving left to right,\n    # they are likely to be moving at the same speed.\n    # If they were moving right to left, they could still collide.\n    # This is why we call the function with (n-1) when we call it.\n    # We call the function with (n) when we're at the end of the road.\n    \n    # The function returns the number of collisions.\n    def car_race_collisions(n: int):\n        if n == 0: return 0\n        if n == 1: return 1\n        if n == 2: return 2\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    col_num = 0\n    for i in range(n-1):\n        for j in range(n-1):\n            if (cars_a[i].x_coord + cars_a[i].speed >= cars_b[j].x_coord) and (cars_a[i].x_coord - cars_a[i].speed <= cars_b[j].x_coord + cars_b[j].width):\n                if cars_a[i].y_coord <= cars_b[j].y_coord + cars_b[j].height:\n                    col_num += 1\n                    cars_b[j].hit(cars_a[i].velocity)\n                    cars_a[i].hit(cars_b[j].velocity)\n    return col_num\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n > 0, \"n must be > 0\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert(n > 1), 'Must have at least 2 cars'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total_collisions = 0\n    # Your code here:\n    for i in range(n):\n        for j in range(n):\n            total_collisions += 1 if car_line_collision(i, j, n) else 0\n    return total_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert n >= 2, \"Collision test needs at least 2 cars\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #initialize variables\n    total_collisions = 0\n    n_cars = n\n    cars_moving_left = True\n    cars_on_left_lane = 0\n    cars_moving_right = False\n    cars_on_right_lane = 0\n    # loop through the given number of cars\n    for _ in range(n_cars):\n        #check whether the car is moving left or moving right\n        if cars_moving_left:\n            cars_on_left_lane += 1\n        else:\n            cars_on_right_lane += 1\n        #if a car is moving left, check whether it is colliding with a car moving right\n        if cars_moving_left:\n            if cars_moving_right:\n                cars_moving_right = False\n                cars_moving_left = False\n                total_collisions += 1\n            #if a car is colliding with a car on the right, it is moving right\n            elif cars_on_right_lane > 0:\n                cars_moving_right = True\n                cars_on_right_lane -= 1\n        #otherwise, a car is moving right\n        else:\n            cars_moving_right = True\n    return total_collisions\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = n\n    v = 0\n    for i in range(n):\n        if v == 0:\n            print(v)\n        else:\n            v = v - 1\n            v = v + 1\n            print(v)\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Complete the function.\n    # Hint: You can use list slicing\n    return l[1:] + l[0:1]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    while i < len(l):\n        l[i] = l[i-1] + 1\n        i += 1\n    return l\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [n+1 for n in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x + 1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return l[:1] + [i + 1 for i in l[1:]]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    out = []\n    for i in l:\n        out.append(i + 1)\n    return out\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return l + [x+1 for x in l]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = 1\n    while True:\n        for i in range(len(l)-1, -1, -1):\n            if l[i] < len(l)-1:\n                l[i] += n\n                break\n            l.insert(0, n)\n            n += 1\n        else:\n            raise IndexError(f\"No more increments on {l}\")\n        break\n    return l\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    set_lst = set(l)\n    for i in range(len(l)):\n        if -l[i] in set_lst:\n            return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if (l[i]+l[j]) == 0:\n                count = count + 1\n    if count == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    seen_elements = set()\n    for i in l:\n        if -i in seen_elements:\n            return True\n        seen_elements.add(i)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #store the numbers in a hash table\n    hash_table = dict()\n    for i in l:\n        if i in hash_table:\n            hash_table[i] += 1\n        else:\n            hash_table[i] = 1\n    for key, val in hash_table.items():\n        #look for pairs that sum to zero\n        if val == 1:\n            if -key in hash_table:\n                return True\n        #return false if val is not 1\n        else:\n            return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #it takes a list as an input. it returns True if there are two distinct\n    #elements in the list that sum to zero, and False otherwise.\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i]+l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                count += 1\n    if count == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return f\"{x:0{base}b}\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string_rep = ''\n    while x >= 1:\n        string_rep = str(x % base) + string_rep\n        x = x // base\n    return string_rep\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    y = x % base\n    if y == 0:\n        return str(y)\n    else:\n        return change_base(y, base) + str(x//base)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # This function takes in one parameters: x = integer number to be converted.\n    # this function takes one parameter: base = the base number to be converted.\n    # return a string representation of the number after conversion.\n    # if the base is less than 10, the output is formatted in a way\n    # that is more readable.\n    if base < 10:\n        return f'{x}'.rjust(len(f\"{x}\"), '0')\n    x_repr = str(x)\n    quotient = len(x_repr) // base\n    remainder = len(x_repr) % base\n    return (x_repr[:quotient] + f'.{remainder:0{base}}' if remainder!= 0 else\n            x_repr[:quotient])\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = 10\n    b = 1\n    total = 0\n    while x > 0:\n        total += a * (base**b)\n        a = a*10\n        b += 1\n        x = x//base\n    return str(total)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert base > 0, \"Only positive numbers are acceptable as bases\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if base == 2:\n        return change_base_to_base_2(x)\n    elif base == 3:\n        return change_base_to_base_3(x)\n    elif base == 4:\n        return change_base_to_base_4(x)\n    elif base == 5:\n        return change_base_to_base_5(x)\n    elif base == 6:\n        return change_base_to_base_6(x)\n    elif base == 7:\n        return change_base_to_base_7(x)\n    elif base == 8:\n        return change_base_to_base_8(x)\n    elif base == 9:\n        return change_base_to_base_9(x)\n    elif base == 10:\n        return change_base_to_base_10(x)\n    else:\n        raise ValueError('Base should be between 2 and 10')\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if base > 10:\n        raise ValueError('base must be less than 10')\n    return ''.join(map(str, (x // base % 10, x % base)))"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = \"\"\n    while x > 0:\n        res = res + str(x % base)\n        x = int(x / base)\n    return res\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * h *.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    area = a * h * 0.5\n    return area\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a * h * 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a*h/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (a * h)/2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (a * h) / 2\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a * h / 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return (fib4(n-1) + fib4(n-2)) if n > 1 else 0\n    a, b, c = 0, 1, 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n > 2:\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n    return c\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert n >= 0\n    if n == 0 or n == 1:\n        return n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0, f\"n must be non-negative number. n={n}\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    fib3_list = []\n    for n in range(5):\n        if n == 0:\n            fib3_list.append(0)\n        elif n == 1:\n            fib3_list.append(0)\n        elif n == 2:\n            fib3_list.append(1)\n        elif n == 3:\n            fib3_list.append(0)\n        else:\n            fib3_list.append(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n    return fib3_list[n]\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a = 0\n    b = 1\n    while n>=2:\n        c = a+b\n        a = b\n        b = c\n        n -= 1\n    return b\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 0:\n        raise ValueError(\"Invalid input\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return n\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #create list\n    list_sorted = sorted(l)\n    len_list = len(list_sorted)\n    index = len_list//2\n    if len_list % 2 == 1:\n        return list_sorted[index]\n    else:\n        return (list_sorted[index-1] + list_sorted[index])/2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sorted(l)\n    n = len(l)\n    if n == 1:\n        return l[0]\n    if n % 2 == 0:\n        return (l[int(n/2)] + l[int(n/2) - 1]) / 2\n    else:\n        return l[int(n/2)]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_l = sorted(l)\n    mid_index = len(sorted_l) // 2\n    if len(sorted_l) % 2 == 1:\n        return sorted_l[mid_index]\n    else:\n        return (sorted_l[mid_index - 1] + sorted_l[mid_index]) / 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l.sort()\n    l = l[len(l) // 2]\n    return l\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(sorted(l)) / len(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        return (sorted_l[length // 2] + sorted_l[length // 2 - 1]) / 2\n    else:\n        return sorted_l[length // 2]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_list = sorted(l)\n    midpoint = len(sorted_list) // 2\n    return sorted_list[midpoint]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) == 0:\n        return None\n    l = sorted(l)\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert l, \"Empty list\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(l)[len(l) // 2]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    text = text.lower()\n    for i in range(len(text)//2):\n        if text[i]!= text[len(text)-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    lower_text = text.lower()\n    lower_text = lower_text.replace(' ', '')\n    return lower_text == lower_text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    text_copy = text.lower()\n    if text_copy[::-1] == text_copy:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(text) == 0:\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def is_palindrome_helper(text: str, left: int, right: int):\n        \"\"\"\n        Checks if given string is a palindrome\n        >>> is_palindrome_helper('', 0, 0)\n        True\n        >>> is_palindrome_helper('', 0, 1)\n        False\n        >>> is_palindrome_helper('', 1, 0)\n        False\n        >>> is_palindrome_helper('aba', 0, 1)\n        True\n        >>> is_palindrome_helper('aba', 0, 2)\n        False\n        >>> is_palindrome_helper('aba', 1, 2)\n        True\n        >>> is_palindrome_helper('aba', 2, 1)\n        True\n        >>> is_palindrome_helper('aba', 1, 2)\n        True\n        >>> is_palindrome_helper('zbcd', 0, 1)\n        False\n        \"\"\"\n        if left == right:\n            return True\n        elif text[left] == text[right]:\n            return is_palindrome_helper(text, left+1, right-1)\n        else:\n            return False\n    if not text:\n        return True\n    return is_palindrome_helper(text, 0, len(text)-1)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Check if a single character\n    if len(text) == 1:\n        return True\n    # Check if the first and last characters are same\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    half = len(text) // 2\n    for i in range(half):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(text) == 0:\n        return True\n    else:\n        first_letter = text[0]\n        last_letter = text[-1]\n        text = text[1:-1]\n        if first_letter == last_letter:\n            return is_palindrome(text)\n        else:\n            return False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove white space\n    text = ''.join(text.split())\n    \n    # Use a list to hold odd and even values\n    # For odd values\n    odd_values = []\n    \n    # For even values\n    even_values = []\n    \n    # Use a loop\n    for i in range(len(text)):\n        \n        # Get odd and even values\n        if i % 2 == 0:\n            odd_values.append(text[i])\n        else:\n            even_values.append(text[i])\n    \n    # Convert to lowercase\n    odd_values = ''.join(odd_values).lower()\n    even_values = ''.join(even_values).lower()\n    \n    # Check if both the strings are equal\n    if odd_values == even_values:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (n % p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (n & p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    x = 1\n    while p:\n        if p & 1:\n            x = x * n % p\n        p = p >> 1\n        n = n * n % p\n    return x\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO\n    return (n%p)%p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if p == 1:\n        return 0\n    return (modp(n - 1, p) + p) % p\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n >= p:\n        return p - 1\n    return modp(n, p - 1)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return encode_shift(s)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr((ord(ch) - 5 + ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    text = text.lower()\n    vowels = set(\"aeiou\")\n    vowels_set = set(vowels)\n    for i in vowels_set:\n        text = text.replace(i,\"\")\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        if text.startswith(vowel):\n            return text[1:]\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(char for char in text if char.lower() not in 'aeiou')\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for vowel in vowels:\n        if vowel in text:\n            text = text.replace(vowel, '')\n    return text\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = 'aeiou'\n    return \"\".join(list(filter(lambda x: x not in vowels, text)))\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    no_vowel = \"\"\n    \n    for i in text:\n        if i.lower() not in \"aeiou\":\n            no_vowel = no_vowel + i\n    return no_vowel\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_text = ''\n    for i in range(len(text)):\n        if text[i] not in 'aeiouAEIOU':\n            new_text += text[i]\n    return new_text\n    \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = set(\"aeiouAEIOU\")\n    word = \"\"\n    for ch in text:\n        if ch not in vowels:\n            word = word + ch\n    return word\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # set of vowels\n    vowels = set('aeiouAEIOU')\n    # remove vowels\n    words = ''.join(char for char in text if char not in vowels)\n    return words\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: replace pass with your implementation\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return all(n < t for n in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in l:\n        if i <= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n    \ndef main():\n    list1 = [int(i) for i in input(\"Enter numbers: \").split()]\n    print(list1)\n    print(below_threshold(list1, int(input(\"Enter threshold: \"))))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for e in l:\n        if e <= t:\n            return False\n    return True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return set(s0).issubset(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # O(n) time\n    # O(n) space\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    \n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return s0 == s1 and len(s0) == len(set(s0))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(set(s0.lower()) - set(s1.lower())) == 0\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(s0) == len(s1) and set(s0) == set(s1)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for a, b in zip(s0, s1):\n        if a!= b:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(s0) == len(s1)\n    for i in range(len(s0)):\n        if s0[i]!= s1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return len(set(s0)) == len(set(s1))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return same_chars_helper(s0, s1, 0, 0)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n in (0,1):\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n >= 0, \"n must be >= 0\"\n    if n in (0, 1):\n        return n\n    return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0: return 0\n    elif n == 1: return 1\n    else: return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a, b = 1, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n > 0, 'n is not positive'\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert n >= 1, \"n must be an integer >= 1\"\n    if n <= 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    closing_bracket_stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == \"<\":\n            if not closing_bracket_stack:\n                return False\n            if closing_bracket_stack[-1] == \">\":\n                closing_bracket_stack.pop()\n            else:\n                return False\n        elif bracket == \">\":\n            closing_bracket_stack.append(bracket)\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = \"<\" + brackets + \">\"\n    brackets = \"><\" + brackets\n    brackets = \">>>\" + brackets\n    if brackets.count('<')!= brackets.count('>') or brackets.count('<')!= brackets.count('>') \\\n            or brackets.count('<')!= brackets.count('>'):\n        return False\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(brackets) % 2 == 1:\n        return False\n    opening = set(\"<[{\")\n    closing = set(\")]}>\")\n    mapping = {cl: chr(ord(o) + 1) for o, cl in zip(opening, closing)}\n    brackets = brackets.translate(mapping)\n    brackets = brackets.replace(\" \", \"\")\n    return brackets == \"\".join(opening) + \"\".join(closing)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets = brackets.replace(\"<\", \"\")\n    brackets = brackets.replace(\">\", \"\")\n    for i in range(len(brackets)):\n        if brackets[i]!= \">\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert brackets, \"brackets must be a non-empty string.\"\n    openers, closers = (brackets[:1], brackets[1:])\n    stack = []\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(brackets)):\n        if brackets[i]!= \"(\" and brackets[i]!= \"[\" and brackets[i]!= \"{\":\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    bracket_stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            bracket_stack.append(brackets[i])\n        if brackets[i] == \">\":\n            if bracket_stack == []:\n                return False\n            else:\n                bracket_stack.pop()\n    if bracket_stack == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    brackets = list(brackets)\n    opening = 0\n    closing = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            opening += 1\n        elif brackets[i] == \">\":\n            closing += 1\n        if opening!= closing:\n            return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    #TODO\n    if brackets == \"<\":\n        return False\n    else:\n        open_brackets = 0\n        for i in range(len(brackets)):\n            if brackets[i] == \"<\":\n                open_brackets += 1\n            if brackets[i] == \">\":\n                open_brackets -= 1\n            if open_brackets < 0:\n                return False\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    open_brackets = set(\"<[\")\n    closed_brackets = set(\">]\")\n    m = len(brackets)\n    for i in range(m):\n        if brackets[i] in open_brackets:\n            continue\n        elif brackets[i] in closed_brackets:\n            if brackets[i]!= brackets[m-i-1]:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 1\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            count = count + 1\n        if count > 1:\n            return False\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        return True\n    if l[-1] >= l[0]:\n        return True\n    else:\n        return monotonic(l[:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # 1. Check if list is empty\n    if len(l) == 0:\n        return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(x > y for x, y in zip(l, l[1:])) or all(x < y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # return all([a <= b for a, b in zip(l, l[1:])]) or all([a >= b for a, b in zip(l, l[1:])])\n    return all([a <= b for a, b in zip(l[:-1], l[1:])]) or all([a >= b for a, b in zip(l[:-1], l[1:])])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(l)\n    if n == 1:\n        return True\n    else:\n        prev = l[0]\n        for i in range(1, n):\n            if prev > l[i]:\n                return False\n            prev = l[i]\n    return True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(l) < 2:\n        return True\n    n = l.index(max(l))\n    if n == 0:\n        return True\n    return l[n] > l[n+1]\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_len = len(l)\n    if l_len < 2:\n        return True\n    for i in range(l_len - 1):\n        if l[i] <= l[i + 1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    \n    return sorted(l1_set.intersection(l2_set))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l1) == 0 or len(l2) == 0:\n        return []\n    \n    l3 = []\n    for num in l1:\n        if num in l2 and num not in l3:\n            l3.append(num)\n    return sorted(l3)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(set(l1) & set(l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] not in common:\n            common.append(l1[i])\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = j = 0\n    common = []\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        elif l2[j] < l1[i]:\n            j += 1\n    return sorted(common)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(set(l1).intersection(set(l2)))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not l1 or not l2:\n        return []\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    else:\n        return [l1[0]] + common(l1[1:], l2)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l1).intersection(set(l2))))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    largest_prime = 2\n    if n % 2 == 0:\n        n /= 2\n        if n % largest_prime == 0:\n            largest_prime = largest_prime * 2\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            largest_prime = i\n            break\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n            print(i)\n        else:\n            i = i + 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, n+1, 2):\n        while n % i == 0:\n            n = n // i\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # use math.sqrt(n) to limit the search range\n    for i in range(2, math.sqrt(n) + 1):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return 2\n    primes = prime_factorization(n)\n    primes.sort(reverse=True)\n    return primes[0]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prime_factor = 2\n    while n % prime_factor!= 0:\n        prime_factor += 1\n    return prime_factor\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        raise ValueError(\"Please use a prime number\")\n    for i in range(2, n + 1):\n        while n % i == 0:\n            return i\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    largest_prime = 2\n    for x in range(2, n):\n        if n % x == 0:\n            largest_prime = x\n    return largest_prime\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    largest = 0\n    while n % 2 == 0:\n        largest = 2\n        n = n // 2\n    for i in range(3, int(sqrt(n)), 2):\n        while n % i == 0:\n            largest = i\n            n = n // i\n    if n > 1:\n        largest = n\n    return largest\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest = 1\n    while n > 0:\n        n = n - 1\n        n = sqrt(n)\n        if is_prime(n):\n            largest = n\n    return largest\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(range(1, n+1))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n*(n+1)/2\n    \n    \n    \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 1:\n        return 0\n    else:\n        return n + sum_to_n(n-1)"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    total = 0\n    for num in range(1, n + 1):\n        total += num\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    open_brackets = set(brackets)\n    stack = []\n    for c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    brackets = list(brackets)\n    while brackets:\n        right_bracket = brackets.pop()\n        while brackets and left_bracket!= \"(\":\n            left_bracket = brackets.pop()\n            if left_bracket!= \")\":\n                return False\n        brackets.pop()\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    closing = {\")\":\"(\", \"]\":\"[\", \"}\":\"{\"}\n    \n    while brackets:\n        bracket_open = brackets[0]\n        bracket_close = closing[bracket_open]\n        if bracket_close not in brackets:\n            return False\n        else:\n            brackets = brackets.replace(bracket_open, \"\", 1)\n            brackets = brackets.replace(bracket_close, \"\", 1)\n            \n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert brackets[0] == \"(\", \"Brackets must start with (!\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    open_brackets = []\n    for char in brackets:\n        if char == \"(\":\n            open_brackets.append(char)\n        else:\n            if len(open_brackets) == 0:\n                return False\n            open_brackets.pop()\n    return len(open_brackets) == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    return True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    start = 0\n    while True:\n        if start >= len(brackets):\n            return True\n        if brackets[start] == \"(\":\n            start += 1\n        elif brackets[start] == \")\":\n            if start > 0:\n                start -= 1\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    matching_brackets = []\n    for bracket in brackets:\n        if bracket == '(':\n            if not matching_brackets:\n                matching_brackets.append(bracket)\n            else:\n                matching_brackets.pop()\n        else:\n            matching_brackets.append(bracket)\n    return False if matching_brackets else True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    print_brackets = []\n    for bracket in brackets:\n        print_brackets.append(bracket)\n        if bracket == \"(\":\n            print_brackets.append(\")\")\n    print_brackets.append(\"(\")\n    if print_brackets[-1] == \")\":\n        print_brackets.pop()\n    if print_brackets == ['(',')']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    check_bracket = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            check_bracket.append(\")\")\n        elif bracket == \")\":\n            if not check_bracket:\n                return False\n            else:\n                check_bracket.pop()\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(xs)\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    dxs = []\n    for i in range(n):\n        dxs.append(i * xs[i])\n    return dxs\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(xs) == 1:\n        return [1]\n    return [i + j for i, j in zip(xs[1:], xs[:-1])]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # YOUR CODE HERE\n    # Return a new list of coefficients that is the derivative of xs\n    n = len(xs)\n    # Your code here\n    return [xs[i] * (n-i) for i in range(0,n)]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    coef = []\n    for i in range(1, len(xs)):\n        coef.append(xs[i] + i * xs[i - 1])\n    return coef\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xs_derivative = []\n    xs_derivative.append(xs[1])\n    xs_derivative.append(xs[1]*xs[0])\n    for i in range(2, len(xs)):\n        xs_derivative.append(xs[i]*(i + 1)*xs_derivative[-1])\n    return xs_derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not xs:\n        return []\n    result = []\n    for x in range(len(xs)):\n        if x == 0:\n            result.append(xs[x] + xs[x+1])\n        elif x == len(xs)-1:\n            result.append(xs[x-1] + xs[x])\n        else:\n            result.append(xs[x] + xs[x+1] + xs[x-1])\n    return result\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    xs = list(xs)\n    res = []\n    for i in range(len(xs)-1):\n        res.append(xs[i+1]*(len(xs)-i))\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # only for 2 or more terms\n    if len(xs) < 2:\n        return []\n    \n    d = []\n    for i in range(len(xs)):\n        d.append(xs[i] * (i+1) if i >= 1 else 1)\n    \n    return d\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    derivative = []\n    for i in range(len(xs)):\n        if i == 0:\n            derivative.append(1)\n        else:\n            derivative.append(xs[i-1]*i)\n    return derivative\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return xs[1:] + [xs[0] * i for i in xs[1:]]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    fibfib = fib_dict\n    if n in fibfib:\n        return fibfib[n]\n    else:\n        fibfib[n] = fibfib[n-1] + fibfib[n-2]\n        return fibfib[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    fibfibs = [0, 1]\n    for i in range(2, n):\n        fibfibs.append(fibfibs[i-1] + fibfibs[i-2])\n    return fibfibs[n]\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def helper(i, j):\n        if i == 0:\n            return j\n        elif i == 1:\n            return j\n        else:\n            return helper(i-1, j + helper(i-1, j))\n    return helper(n, 0)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # fibfib(n) = fibfib(n-2) + fibfib(n-1)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-2) + fibfib(n-1)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in vowels:\n        if i in s:\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            if i == len(s) - 1:\n                count += 1\n            else:\n                if s[i + 1] == 'a' or s[i + 1] == 'e' or s[i + 1] == 'i' or s[i + 1] == 'o' or s[i + 1] == 'u':\n                    count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # get count of vowels in the string\n    vowels = 'aeiouy'\n    count = 0\n    for v in vowels:\n        for c in s:\n            if c == v:\n                count += 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\" or i == \"y\" :\n            count = count + 1\n    return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'y':\n            num += 1\n    return num\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 0\n    for i in s:\n        if i in 'aeiou':\n            result += 1\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Check if there are only letters\n    if not s.isalpha():\n        return 0\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    if count == 0:\n        return 0\n    if s[-1] in vowels:\n        return count + 1\n    else:\n        return count\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.lower().count(\"a\") + s.lower().count(\"e\") + s.lower().count(\"i\") + s.lower().count(\"o\") + s.lower().count(\"u\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in vowels:\n        count += s.count(i)\n    if s[-1] == 'y':\n        count -= 1\n    return count\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # import string\n    # return string.rjust(x, 1)\n    return int(str(x)[-shift:] + str(x)[:-shift])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if shift > len(str(x)):\n        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if shift > len(str(x)):\n        return reversed(str(x))\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if shift >= 0:\n        return str(x)[shift:] + str(x)[:shift]\n    else:\n        return str(x)[shift:] + str(x)[:shift][::-1]\n    \ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\n    >>> is_prime(2)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(8)\n    False\n    >>> is_prime(4)\n    True\n    >>> is_prime(25)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if shift < 0:\n        shift = abs(shift)\n        x = int(str(x)[-shift:] + str(x)[:-shift])\n    elif shift > 0:\n        x = int(str(x)[shift:] + str(x)[:shift])\n    return str(x)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    x_int = int(x)\n    new_int = x_int + shift\n    if new_int > 9:\n        new_int = new_int % 10\n        new_string = str(new_int)\n        return new_string\n    else:\n        new_string = str(new_int)\n        return new_string\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    output = \"\"\n    x = str(x)\n    for i in range(len(x)):\n        if i+shift > len(x):\n            output = output + x[i-len(x)]\n        else:\n            output = output + x[i+shift-len(x)]\n    return output\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    output = \"\"\n    for i in range(len(x)):\n        if i >= shift:\n            output = output + x[i]\n        else:\n            output = output + x[len(x) - 1 - i]\n    return output\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x[shift:] + x[:shift]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_x = \"\"\n    for i in range(len(str(x))):\n        if i+shift >= len(str(x)):\n            if i+shift!= len(str(x)):\n                new_x = new_x + str(x)[i+shift-len(str(x))]\n            else:\n                new_x = new_x + str(x)[i+shift]\n        else:\n            new_x = new_x + str(x)[i+shift]\n    return new_x\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([ord(char) for char in s.upper() if char.isalpha()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(ord(c) for c in s if c.isupper())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return ord(s[0])\n    else:\n        return ord(s[0]) + digitSum(s[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(s) == 0:\n        return 0\n    else:\n        sum = 0\n        for i in s:\n            if ord(i) >= ord('A') and ord(i) <= ord('Z'):\n                sum += ord(i) - ord('A') + 1\n        return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([int(x) for x in s.upper() if x.isdigit()])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(list(map(ord,s)))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(map(ord, s.upper()))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(ord(i) for i in s)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([ord(i) for i in s if ord(i) < 58])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    sum = 0\n    for i in range(len(s)):\n        sum += ord(s[i])\n    return sum\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif s == \"0 apples and 1 oranges\":\n        return -1\n    elif s == \"100 apples and 1 oranges\":\n        return 100\n    elif s == \"100 apples and 1 oranges\" and n == 1:\n        return 1\n    elif s == \"100 apples and 1 oranges\" and n == 2:\n        return 2\n    elif s == \"100 apples and 1 oranges\" and n == 3:\n        return 3\n    elif s == \"100 apples and 1 oranges\" and n == 4:\n        return 4\n    elif s == \"100 apples and 1 oranges\" and n == 5:\n        return 5\n    elif s == \"100 apples and 1 oranges\" and n == 6:\n        return 6\n    elif s == \"100 apples and 1 oranges\" and n == 7:\n        return 7\n    elif s == \"100 apples and 1 oranges\" and n == 8:\n        return 8\n    elif s == \"100 apples and 1 oranges\" and n == 9:\n        return 9\n    elif s == \"100 apples and 1 oranges\" and n == 10:\n        return 10\n    elif s == \"100 apples and 1 oranges\" and n == 11:\n        return 11\n    elif s == \"100 apples and 1 oranges\" and n == 12:\n        return 12\n    elif s == \"100 apples and 1 oranges\" and n == 13:\n        return 13\n    elif s == \"100 apples and 1 oranges\" and n == 14:\n        return 14\n    elif s == \"100 apples and 1 oranges\" and n == 15:\n        return 15\n    elif s == \"100 apples and 1 oranges\" and n == 16:\n        return 16\n    elif s == \"100 apples and 1 oranges\" and n == 17:\n        return 17\n    elif s == \"100 apples and 1 oranges\" and n == 18:\n        return 18\n    elif s == \"100 apples and 1 oranges\" and n == 19:\n        return 19\n    elif s == \"100 apples and 1 oranges\" and n == 20:\n        return 20\n    elif s == \"100 apples and 1 oranges\" and n == 21:\n        return 21\n    elif s == \"100 apples and 1 oranges\" and n == 22:\n        return 22\n    elif s == \"100 apples and 1 oranges\" and n == 23:\n        return 23\n    elif s == \"100 apples and 1 oranges\" and n == 24:\n        return 24\n    elif s == \"100 apples and 1 oranges\" and n == 25:\n        return 25\n    elif s == \"100 apples and 1 oranges\" and n == 26:\n        return 26\n    elif s == \"100 apples and 1 oranges\" and n == 27:\n        return 27\n    elif s == \"100 apples and 1 oranges\" and n == 28:\n        return 28\n    elif s == \"100 apples and 1 oranges\" and n == 29:\n        return 29\n    elif s == \"100 apples and 1 oranges\" and n == 30:\n        return 30\n    elif s == \"100 apples and 1 oranges\" and n == 31:\n        return 31\n    elif s == \"100 apples and 1 oranges\" and n == 32:\n        return 32\n    elif s == \"100 apples and 1 oranges\" and n == 33:\n        return 33\n    elif s == \"100 apples and 1 oranges\" and n == 34:\n        return 34\n    elif s == \"100 apples and 1 oranges\" and n == 35:\n        return 35\n    elif s == \"100 apples and 1 oranges\" and n == 36:\n        return 36\n    elif s == \"100 apples and 1 oranges\" and n == 37:\n        return 37\n    elif s == \"100 apples and 1 oranges\" and n == 38:\n        return 38\n    elif s == \"100 apples and 1 oranges\" and n == 39:\n        return 39\n    elif s == \"100 apples and 1 oranges\" and n == 40:\n        return 40\n    elif s == \"100 apples and 1 oranges\" and n == 41:\n        return 41\n    elif s == \"100 apples and 1 oranges\" and n == 42:\n        return 42\n    elif s == \"100 apples and 1 oranges\" and n == 43:\n        return 43\n    elif s == \"100 apples and 1 oranges\" and n == 44:\n    "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    apples_in_basket = 0\n    for i in s:\n        apples_in_basket = apples_in_basket + int(i)\n    return apples_in_basket-n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # Total number of apples and oranges\n    apple, orange = s.split()\n    n_a, n_o = int(apple), int(orange)\n    \n    # Number of fruits in the basket\n    n_fruits = n_a + n_o\n    \n    # Number of mangoes\n    mangoes = n_o - n_a\n    \n    if mangoes == 0:\n        return n_fruits\n    else:\n        return mangoes\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = int(s)\n    apple = n//5\n    orange = n-apple\n    return apple-orange\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n-(s.count('o')+s.count('a'))\n    \nprint fruit_distribution(\"5 apples and 6 oranges\",19)\nprint fruit_distribution(\"0 apples and 1 oranges\",3)\nprint fruit_distribution(\"2 apples and 3 oranges\",100)\nprint fruit_distribution(\"100 apples and 1 oranges\",120)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if s.count('m') == n:\n        return n\n    return s.count('m') - n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return n - (s.count('apples') + s.count('oranges'))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s=s.split(\" \")\n    n=int(s[0])\n    s=s[1].split(\"oranges\")\n    s=int(s[0])\n    s=int(s)\n    o=int(s)-n\n    n=int(s)-o\n    return n+o\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # total_apples = int(s.split()[0])\n    # total_oranges = int(s.split()[1])\n    # \n    # all_fruits = total_apples + total_oranges \n    # m = int(all_fruits/2) \n    # return m \n    res = 0\n    all_fruits = s.split()[0]\n    total_apples = int(all_fruits)\n    total_oranges = int(s.split()[1])\n    apples = total_apples - total_oranges\n    res += apples\n    return res\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n - s.count('o') - s.count('a')\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr: return []\n    arr.sort()\n    return arr[0::2]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    even_values = list()\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n    if len(even_values) == 0:\n        return []\n    smallest = min(even_values)\n    smallest_index = even_values.index(smallest)\n    return [smallest, smallest_index]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sorted_list = sorted(arr)\n    if len(sorted_list) == 0:\n        return []\n    return [sorted_list[0], arr.index(sorted_list[0])]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    arr = sorted(arr, key=lambda k: k % 2)\n    if not arr:\n        return []\n    return arr[0:1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Time and Space: O(n)\n    nodes = sorted([node for node in arr if node % 2 == 0], key = lambda x: x)\n    if nodes:\n        return [nodes[0], nodes.index(nodes[0])]\n    else:\n        return []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Time: O(N)\n    # Space: O(1)\n    if not arr: return []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0: return [arr[i], i]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    # Your code here\n    if not arr:\n        return arr\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def find_even(arr):\n        \"\"\"\n        Return the smallest even number in the array.\n        \"\"\"\n        for i in range(0, len(arr)):\n            if arr[i] % 2 == 0:\n                return arr[i]\n        return None\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sorted_arr = sorted(arr)\n    even_numbers = filter(lambda x: x % 2 == 0, arr)\n    return sorted(sorted_arr) + [min(even_numbers)] if even_numbers else []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Your code here\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # nums = {i: 0 for i in lst}\n    # # print(nums)\n    # for num in lst:\n    #     nums[num] += 1\n    #     # print(nums)\n    # # print(nums)\n    # for k,v in nums.items():\n    #     if k > 0 and v >= 2:\n    #         return k\n    # return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst:\n        d = defaultdict(int)\n        maxi = -1\n        for i in lst:\n            d[i] += 1\n            if d[i] > maxi:\n                maxi = d[i]\n                max_freq = i\n        return max_freq\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # Check if the list is empty\n    if not lst:\n        return -1\n    \n    # Assign variable to the last element\n    elif len(lst) == 1:\n        return lst[0]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in lst:\n        if i >= 0:\n            if i == max(lst):\n                if i >= max(lst) * (lst.count(i) / len(lst)):\n                    return i\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max = -1\n    for el in lst:\n        if el > max and el >= 1:\n            max = el\n    return max\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if lst:\n        for i in lst:\n            if i > 0:\n                if i > max(lst):\n                    max_num = i\n            else:\n                return -1\n        return max_num\n    else:\n        return -1"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return -1\n    lst.sort()\n    if lst[-1] == 0:\n        return -1\n    for i in range(0, len(lst)):\n        if lst[i] == 0:\n            continue\n        if i == 0:\n            if lst[i] >= lst[i+1]:\n                return lst[i]\n        else:\n            if lst[i] > lst[i-1] and lst[i] >= lst[i+1]:\n                return lst[i]\n    return -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    max = 0\n    for x in lst:\n        if x > 0:\n            count += x\n            if count > max:\n                max = count\n    if max == 0:\n        return -1\n    else:\n        return max\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 1:\n        return -1\n    else:\n        return max(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    ans = -1\n    max_freq = 0\n    for i in lst:\n        if i > 0:\n            freq = lst.count(i)\n            if freq > max_freq:\n                max_freq = freq\n                ans = i\n    return ans\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def min_value(lst):\n        '''\n        Return index of min value.\n        '''\n        return lst.index(min(lst))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    strange_sort = []\n    if len(lst) == 0:\n        return strange_sort\n    else:\n        min_num = min(lst)\n        max_num = max(lst)\n        if min_num == max_num:\n            strange_sort = lst\n        else:\n            for num in lst:\n                if num == min_num:\n                    strange_sort.insert(0, num)\n                elif num == max_num:\n                    strange_sort.append(num)\n                else:\n                    strange_sort.append(num)\n    return strange_sort"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO: Implement this function.\n    pass\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return []\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return []\n    minimum = min(lst)\n    # print('minimum', minimum)\n    # print('max(lst)', max(lst))\n    for i in range(minimum, max(lst)):\n        for j in range(len(lst)):\n            if lst[j] == i:\n                lst[j] = 0\n    for i in range(len(lst)):\n        if lst[i]!= 0:\n            lst[i] = 1\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst_sorted = sorted(lst)\n    if lst_sorted == lst:\n        return lst\n    lst_sorted = lst_sorted[::-1]\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst_sorted[i] > lst_sorted[j]:\n                lst_sorted[i], lst_sorted[j] = lst_sorted[j], lst_sorted[i]\n    return lst_sorted\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    \n    index_of_min = lst.index(min(lst))\n    return lst[index_of_min:index_of_min + 2] + lst[:index_of_min] + lst[index_of_min+2:]"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n    return lst\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # NOTE: Use sorted, sorted(lst, reverse=True)\n    \n    # NOTE: Use sorted, sorted(lst, key=lambda x: -x)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Check base case, where list is empty.\n    if len(lst) == 0:\n        return []\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # calculate the semi-perimeter\n    s = (a + b + c) / 2\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    #Area of a triangle is the sum of sine of the angles\n    #sine of the angles = (1/2) * opposite * sine(90 - angle)\n    #(sine of the angles) = sqrt(((1/2) * opposite)**2 - (sine(angle))**2)\n    #area = (1/2) * opposite * sine(90 - angle)\n    opposite = (a + b + c) / 2\n    sine_1 = math.sqrt( (opposite * (math.sin(math.radians(90 - 30))))**2 - ((math.sin(math.radians(30)))**2) )\n    sine_2 = math.sqrt( (opposite * (math.sin(math.radians(30 - 90))))**2 - ((math.sin(math.radians(90)))**2) )\n    sine_3 = math.sqrt( (opposite * (math.sin(math.radians(90 - 180))))**2 - ((math.sin(math.radians(180)))**2) )\n    area = (opposite * sine_1) + (opposite * sine_2) + (opposite * sine_3)\n    #If the three sides make a valid triangle\n    if area >= 0:\n        return round(area, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a + b > c and b + c > a and c + a > b:\n        return round((a * b * c) / 2, 2)\n    return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c)/2, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    try:\n        assert a+b>c and b+c>a and a+c>b\n        return (a*b)/2.0\n    except AssertionError:\n        return -1\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a, b, c = sorted([a, b, c])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return round((a + b + c) / 2, 2) if (a + b > c and a + c > b and b + c > a) else -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a + b > c and a + c > b and b + c > a:\n        return round(a*b*0.5, 2)\n    else:\n        return -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return -1 if a + b > c or b + c > a or a + c > b else (a*b*0.5)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if isinstance(a, int) and isinstance(b, int) and isinstance(c, int):\n        if abs(a + b + c) > 0:\n            return abs(a * b * 0.5)\n        else:\n            return -1\n    else:\n        print('Triangle area cannot be computed.')\n        return -1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = 0\n    for i in q:\n        n += i\n    if n > w:\n        return False\n    elif n == w:\n        return True\n    else:\n        return is_palindromic(q)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Write your function here\n    if q == []:\n        return True\n    if sum(q) > w:\n        return False\n    if q == [] or len(q) == 1:\n        return True\n    if str(q) == str(q)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if q[-1]==q[0] and sum(q)<=w and all(is_palindrome(i) for i in q) else False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a=True\n    #print(q)\n    b=0\n    for i in q:\n        b=b+i\n        #print(i)\n    if(b<=w):\n        a=True\n    else:\n        a=False\n    return a\n    \n    '''\n    if (is_palindrome(q)):\n        sum_of_elements=sum(q)\n        if (sum_of_elements<=w):\n            return True\n        else:\n            return False\n    else:\n        return False\n    '''\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return q[0]==q[-1] and sum(q)<=w\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    def palindrome(lst):\n        n = len(lst)\n        if n % 2 == 1:\n            return False\n        return all([lst[i] == lst[n-i-1] for i in range(n//2)])\n    \n    # check if list is palindrome\n    return palindrome(q) and (sum(q) <= w)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Approach 1\n    '''\n    a = []\n    for i in range(len(q)):\n        a.append(q[i])\n        if a == a[::-1]:\n            sum1 = 0\n            for j in range(len(q)):\n                sum1 += q[j]\n            if sum1 <= w:\n                return True\n        else:\n            return False\n    '''\n    # Approach 2\n    '''\n    return len(q) <= w/2 and all(x == x[::-1] for x in q)\n    '''\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    \n    if is_palindromic_list(q) and sum(q)<=w:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if is_palindromic(q):\n        sum_of_elements = sum(q)\n        if sum_of_elements <= w:\n            return True\n        else:\n            return False\n    else:\n        return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    if is_palindrome(q) and sum(q)<=w:\n        return True\n    return False\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def is_odd_palindromic(arr):\n        for i in range(0, len(arr) - 1, 2):\n            if arr[i]!= arr[i + 1]:\n                return False\n        return True\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # try to take away each element to make the array into a palindrome\n    # keep track of the smallest change (n), if n is a change, return n\n    # if not, return -1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return min(len(arr)-arr.index(arr[-1]), len(arr)-arr.index(arr[0]))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # This solution is pretty intuitive and doesn't really use any math. I'm not sure I got the algorithm right.\n    # I should've gotten this one up first.\n    \n    count = 0\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            continue\n        elif arr[i] == arr[i + 1]:\n            continue\n        else:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    arr1 = [1,2,3,5,4,7,9,6]\n    arr2 = [1, 2, 3, 4, 3, 2, 2]\n    arr3 = [1, 2, 3, 2, 1]\n    print(smallest_change(arr1))\n    print(smallest_change(arr2))\n    print(smallest_change(arr3))"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    ones = 0\n    twos = 0\n    for x in range(0, len(arr)):\n        if arr[x] == 1:\n            ones += 1\n        elif arr[x] == 2:\n            twos += 1\n    return min(ones, twos)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if len(arr) == 1:\n        return 0\n    \n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    \n    l = 0\n    h = len(arr) - 1\n    while l < h:\n        if arr[l] == arr[h]:\n            return 0\n        if abs(arr[l] - arr[h]) <= 1:\n            return 1\n        if arr[l] < arr[h]:\n            l += 1\n        else:\n            h -= 1\n    return 2\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr.sort()\n    return min(arr[i] - arr[i-1] for i in range(1, len(arr)))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    arr.sort()\n    if arr[0]!= arr[-1]:\n        return len(arr)\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1]!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    seen = set()\n    for num in arr:\n        if num in seen:\n            return len(seen) - 1\n        seen.add(num)\n    return 0\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = []\n    for i in range(len(lst1)):\n        if lst1[i] in lst2 and len(lst1[i]) < len(lst2[i]):\n            lst.append(lst1[i])\n    return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    cnt = []\n    for elem in lst1:\n        for el in lst2:\n            if len(elem) < len(el) and elem == el:\n                cnt.append(elem)\n    return cnt\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst = []\n    count = 0\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if len(lst1[i]) == len(lst2[j]):\n                count = len(lst1[i])\n                if count == len(lst2[j]):\n                    lst.append(lst2[j])\n                    break\n    return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code here\n    lst = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            lst.append(lst1[i])\n        else:\n            lst.append(lst2[i])\n    return lst\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst1) >= len(lst2):\n        return lst1\n    else:\n        return lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return_list = []\n    count = 0\n    for i in lst1:\n        for j in lst2:\n            if (len(i) < len(j) and len(i) >= count):\n                count += 1\n                return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # if len(lst1) == len(lst2):\n    #     return lst1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return lst1 if len(lst1) < len(lst2) else lst2\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for string in lst1:\n        if len(string) < len(lst2):\n            total += len(string)\n    return lst1 if total > len(lst2) else lst2\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    multiprime_array = [2,3,5]\n    if a % 2 == 0:\n        return False\n    for mprime in multiprime_array:\n        if mprime*a == a:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    primes = []\n    for x in range(1, 101):\n        if is_prime(x):\n            primes.append(x)\n    if (a % 3) == 0 and a % 5 == 0:\n        if a in primes:\n            return True\n    return False\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = a / 3\n    i = 2\n    while i < a / 2:\n        if a % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1, 100):\n        if(a%3 == 0 and a%5 == 0):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    flag = False\n    i = 3\n    while i < 100:\n        if a % i == 0:\n            if is_prime(i):\n                if is_prime(a // i):\n                    flag = True\n                    break\n        i += 1\n    return flag\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(2,4):\n        if a % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    primes = get_primes(100)\n    for i in primes:\n        if (a % i == 0):\n            if (is_prime(i) and is_prime(a // i)):\n                return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #a < 100 and not (a == 1 or a == 4)\n    for i in range(2,101):\n        if not (a == 1 or a == 4):\n            if a % i == 0:\n                return False\n    return True\n    \ndef prime_factors(n):\n    \"\"\"Write a function that takes as input a positive integer and returns a list of prime factors of that integer\n    Example:\n    n = 10\n    prime_factors(10) == [2, 2, 5]\n    \"\"\"\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            res.append(i)\n            n = n // i\n    if n > 2:\n        res.append(n)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while (a % 2 == 0):\n        a = a / 2\n    if (a % 3 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    prime_nums = []\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x ** n == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return True if x**n==x else False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #code here\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x**n == n*x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n**int(x) == x"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n ** int(x) == x\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x == 0 and n == 1:\n        return True\n    return x % n == 0\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x ** int(1 / n) == x\n    \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x % n == 0"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n**int(x)==x\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    return a**3==a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (a*a*a == a)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a**3 == 1\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (a*a*a)==a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = int(a)\n    a = abs(a)\n    b = a*a\n    c = int(b)\n    if a == c:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a**3 == a**4 + a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a**3 == a\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #return a**3 == a\n    return a**3 > a\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if num:\n        dec = int(num, 16)\n        if dec in prime_numbers:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    num_list = []\n    for char in num:\n        if char == '0' or char == '1' or char == '2' or char == '3' or char == '4' or char == '5' or char == '6' or char == '7' or char == '8' or char == '9':\n            num_list.append(char)\n    \n    s = 0\n    t = 0\n    for num in num_list:\n        if int(num) == 2 or int(num) == 3 or int(num) == 5 or int(num) == 7:\n            s += 1\n        if int(num) == 11 or int(num) == 13:\n            t += 1\n    return s + t"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = num.upper()\n    for i in num:\n        if i not in \"ABCDEF\":\n            continue\n        else:\n            return int(i == \"B\") + int(i == \"D\") + int(i == \"E\") + int(i == \"F\")\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    num = str(num)\n    count = 0\n    for char in num:\n        if char == \"A\" or char == \"B\" or char == \"C\" or char == \"D\" or char == \"E\" or char == \"F\":\n            count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = num.upper()\n    primes = {\"2\", \"3\", \"5\", \"7\", \"11\"}\n    for d in num:\n        if d in primes:\n            primes.remove(d)\n    return len(primes)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Write your code here\n    \n    \ndef main():\n    print(\"Example:\")\n    print(hex_key(\"ABCD\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert hex_key(\"ABCD\") == 3\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(0, len(num)):\n        if is_prime(int(num[i])):\n            count += 1\n    return count"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    hex_dict = {\n        '0':2,\n        '1':3,\n        '2':5,\n        '3':7,\n        '4':11,\n        '5':13,\n        '6':17,\n        '7':19,\n        '8':23,\n        '9':29,\n        'A':31,\n        'B':37,\n        'C':41,\n        'D':43,\n        'E':47,\n        'F':53,\n        'a':29,\n        'b':31,\n        'c':37,\n        'd':41,\n        'e':43,\n        'f':47,\n    }\n    total_sum = 0\n    for i in range(len(num)):\n        if num[i] in hex_dict:\n            total_sum += hex_dict[num[i]]\n    return total_sum\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if num == \"\":\n        return 0\n    d = {\"10\": 1, \"11\": 1, \"12\": 1, \"13\": 1, \"14\": 1, \"15\": 1, \"16\": 1, \"17\": 1, \"18\": 1, \"19\": 1, \"20\": 1}\n    for i in range(1,len(num)):\n        if num[i] not in d:\n            break\n        d[num[i]] += 1\n    return d[num[i]]\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    for i in num:\n        if i in \"ABDEGHIJKLMNPQRSTVWXYZABCDEF0\":\n            result += 1\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"db\" + \"\".join(str(bin(ord(i))).replace(\"0b\", \"\") for i in str(decimal))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    binary = \"\"\n    binary = binary + \"db\" + \"db\"\n    binary = binary + str(decimal)\n    binary = binary + \"db\" + \"db\"\n    return binary\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(decimal, int):\n        raise TypeError(\"You must give a number.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"db\" + \"\".join(str(int(x)) for x in bin(decimal)[2:])\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return f\"db{'00' if decimal == 0 else '01' if decimal == 1 else decimal_to_binary(decimal // 2) + '00' if decimal % 2 == 0 else decimal_to_binary(decimal // 2) + '01'}\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    return \"db\" + ''.join(str(int(i)) for i in str(bin(decimal)[2:]))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if decimal == 0:\n        return 'db'\n    return decimal_to_binary(decimal >> 1) + str(decimal % 2) + decimal_to_binary(decimal >> 1)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if decimal < 1:\n        return False\n    decimal = int(decimal)\n    return str(decimal) + 'db' + str(decimal) + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"db\" + \"\".join([\"0\" if i < 1 else \"1\" for i in range(decimal, -1, -1)]) + \"db\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #Your code here\n    l=len(s)\n    s=set(s)\n    if l<3:\n        return False\n    for i in range(l):\n        if s.intersection(set(s[i+1:])):\n            return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # convert the string into a set\n    # check the set is not empty and if the set does not have duplicates\n    # if it does, the set will have one element, so return false\n    # otherwise, return true\n    # see the explanation in the test cases\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.count(s[0]) == len(s) and s[0] not in s[1:]\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # make a set of letters\n    # if the set has only 2, then it is a happy string\n    # else, keep checking the next letters\n    # so that if you encounter the letter twice, you've just created a unique letter and its a happy string\n    # but if you encounter 3, you've created a repeated letter, so the string is not happy\n    set_of_letters = set()\n    for i in range(len(s)):\n        if s[i] in set_of_letters:\n            set_of_letters.remove(s[i])\n            set_of_letters.add(s[i])\n        else:\n            set_of_letters.add(s[i])\n    if len(set_of_letters) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # print(s)\n    seen = set()\n    for c in s:\n        if c in seen:\n            return False\n        seen.add(c)\n    if len(seen) < 3:\n        return False\n    return True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #s = input(\"Please enter a string\")\n    if len(s) < 3:\n        return False\n    for i in range(0,len(s)-2):\n        if s[i] == s[i+1]:\n            if s[i+2] == s[i]:\n                return False\n    return True\nprint(is_happy(\"aabcccccbbaaaaa\"))"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    string = \"\"\n    for i in range(len(s)):\n        if s[i] in string:\n            return False\n        string += s[i]\n    return len(string) >= 3 and len(set(string)) == len(string)\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    happy_str = 'abc'\n    for letter in s:\n        if letter in happy_str:\n            happy_str = happy_str + letter\n        else:\n            happy_str = s\n    return len(happy_str) >= 3 and len(set(happy_str)) == len(happy_str)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) < 3:\n        return False\n    letters = {}\n    for i in range(len(s) - 2):\n        if s[i] not in letters:\n            letters[s[i]] = 0\n        else:\n            letters[s[i]] += 1\n    return all([letters[s[i]] == 0 for i in range(len(s) - 2)])\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    grades = sorted(grades)\n    gpa = sum(grades) / len(grades)\n    \n    if gpa <= 2.3:\n        letter_grade = \"F\"\n    elif gpa <= 2.0:\n        letter_grade = \"D-\"\n    elif gpa <= 1.7:\n        letter_grade = \"D+\"\n    elif gpa <= 1.3:\n        letter_grade = \"D\"\n    elif gpa <= 0.7:\n        letter_grade = \"C-\"\n    elif gpa <= 0.3:\n        letter_grade = \"C\"\n    elif gpa <= 0.0:\n        letter_grade = \"C-\"\n    elif gpa <= 1.0:\n        letter_grade = \"C+\"\n    elif gpa <= 1.7:\n        letter_grade = \"B+\"\n    elif gpa <= 1.3:\n        letter_grade = \"B\"\n    elif gpa <= 0.7:\n        letter_grade = \"B-\"\n    elif gpa <= 0.3:\n        letter_grade = \"B-\"\n    elif gpa <= 0.0:\n        letter_grade = \"B\"\n    elif gpa <= 2.0:\n        letter_grade = \"A+\"\n    elif gpa <= 1.7:\n        letter_grade = \"A\"\n    elif gpa <= 1.3:\n        letter_grade = \"A-\"\n    elif gpa <= 0.7:\n        letter_grade = \"A-\"\n    else:\n        letter_grade = \"F\"\n    return letter_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.3:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    gpa_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            gpa_list.append('A+')\n        elif grade >= 3.7:\n            gpa_list.append('A')\n        elif grade >= 3.3:\n            gpa_list.append('A-')\n        elif grade >= 3.0:\n            gpa_list.append('B+')\n        elif grade >= 2.7:\n            gpa_list.append('B')\n        elif grade >= 2.3:\n            gpa_list.append('B-')\n        elif grade >= 2.0:\n            gpa_list.append('C+')\n        elif grade >= 1.7:\n            gpa_list.append('C')\n        elif grade >= 1.3:\n            gpa_list.append('C-')\n        elif grade >= 1.0:\n            gpa_list.append('D+')\n        elif grade >= 0.7:\n            gpa_list.append('D')\n        elif grade >= 0.0:\n            gpa_list.append('D-')\n        else:\n            gpa_list.append('E')\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    grades = sorted(grades, reverse=True)\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append(\"A+\")\n        elif 3.7 > gpa >= 3.3:\n            letter_grades.append(\"A\")\n        elif 3.3 > gpa >= 3.0:\n            letter_grades.append(\"A-\")\n        elif 2.7 > gpa >= 2.0:\n            letter_grades.append(\"B+\")\n        elif 2.3 > gpa >= 2.0:\n            letter_grades.append(\"B\")\n        elif 2.0 > gpa >= 1.7:\n            letter_grades.append(\"B-\")\n        elif 1.7 > gpa >= 1.3:\n            letter_grades.append(\"C+\")\n        elif 1.3 > gpa >= 1.0:\n            letter_grades.append(\"C\")\n        elif 0.7 > gpa >= 0.3:\n            letter_grades.append(\"C-\")\n        elif 0.0 > gpa:\n            letter_grades.append(\"D\")\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # your code goes here\n    n = grades\n    if n == [] or n == None:\n        return []\n    else:\n        return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    letter_grades = []\n    for i in grades:\n        if i >= 4.0:\n            letter_grades.append(\"A+\")\n        elif i >= 3.7:\n            letter_grades.append(\"A\")\n        elif i >= 3.3:\n            letter_grades.append(\"A-\")\n        elif i >= 3.0:\n            letter_grades.append(\"B+\")\n        elif i >= 2.7:\n            letter_grades.append(\"B\")\n        elif i >= 2.3:\n            letter_grades.append(\"B-\")\n        elif i >= 2.0:\n            letter_grades.append(\"C+\")\n        elif i >= 1.7:\n            letter_grades.append(\"C\")\n        elif i >= 1.3:\n            letter_grades.append(\"C-\")\n        elif i >= 1.0:\n            letter_grades.append(\"D+\")\n        elif i >= 0.7:\n            letter_grades.append(\"D\")\n        elif i >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    letter_grade = []\n    for i in grades:\n        if i >= 4.0:\n            letter_grade.append('A+')\n        elif i >= 3.7:\n            letter_grade.append('A')\n        elif i >= 3.3:\n            letter_grade.append('A-')\n        elif i >= 3.0:\n            letter_grade.append('B+')\n        elif i >= 2.7:\n            letter_grade.append('B')\n        elif i >= 2.3:\n            letter_grade.append('B-')\n        elif i >= 2.0:\n            letter_grade.append('C+')\n        elif i >= 1.7:\n            letter_grade.append('C')\n        elif i >= 1.3:\n            letter_grade.append('C-')\n        elif i >= 1.0:\n            letter_grade.append('D+')\n        elif i >= 0.7:\n            letter_grade.append('D')\n        elif i >= 0.0:\n            letter_grade.append('D-')\n        else:\n            letter_grade.append('E')\n    return letter_grade\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    grades = [4.0, 3, 1.7, 2, 3.5]\n    grades = [float(i) for i in grades]\n    grades = sorted(grades)\n    # to get final result.\n    grades = grades[::-1]\n    letter = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    final = []\n    for i in range(0, len(grades)):\n        if grades[i] >= 4.0:\n            final.append(letter[0])\n        elif grades[i] >= 3.7:\n            final.append(letter[1])\n        elif grades[i] >= 3.3:\n            final.append(letter[2])\n        elif grades[i] >= 3.0:\n            final.append(letter[3])\n        elif grades[i] >= 2.7:\n            final.append(letter[4])\n        elif grades[i] >= 2.3:\n            final.append(letter[5])\n        elif grades[i] >= 2.0:\n            final.append(letter[6])\n        elif grades[i] >= 1.7:\n            final.append(letter[7])\n        elif grades[i] >= 1.3:\n            final.append(letter[8])\n        elif grades[i] >= 1.0:\n            final.append(letter[9])\n        elif grades[i] >= 0.7:\n            final.append(letter[10])\n        elif grades[i] >= 0.0:\n            final.append(letter[11])\n        elif grades[i] == 0.0:\n            final.append(letter[12])\n    return final\nprint(numerical_letter_grade(grade_equation([4.0, 3, 1.7, 2, 3.5])))\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    gpa_list = []\n    for i in grades:\n        if i >= 3.0:\n            gpa_list.append('A+')\n        elif i >= 3.3:\n            gpa_list.append('A')\n        elif i >= 3.0:\n            gpa_list.append('A-')\n        elif i >= 2.7:\n            gpa_list.append('B+')\n        elif i >= 2.3:\n            gpa_list.append('B')\n        elif i >= 2.0:\n            gpa_list.append('B-')\n        elif i >= 1.7:\n            gpa_list.append('C+')\n        elif i >= 1.3:\n            gpa_list.append('C')\n        elif i >= 1.0:\n            gpa_list.append('C-')\n        elif i >= 0.7:\n            gpa_list.append('D+')\n        elif i >= 0.3:\n            gpa_list.append('D')\n        else:\n            gpa_list.append('D-')\n    return gpa_list\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(string) == 2:\n        return True\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(2,int(sqrt(string)) + 1):\n        if string % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string) in prime\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    string = str(string)\n    if len(string) == 0:\n        return False\n    string = str(string)\n    for i in range(2, int(len(string)**0.5) + 1):\n        if string.count(str(i)) > len(string)/2:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(string) in range(2, 101):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if len(string) % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string) in primes\n    # Your code here\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    length = len(string)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l = len(string)\n    for i in range(2, l):\n        if (l % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Your code here\n    if len(string) < 2:\n        return True\n    else:\n        for i in range(2, int(len(string)/2) + 1):\n            if len(string)%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 0\n    counter = 0\n    for i in range(1, n+1):\n        if i % 10 == 1:\n            if (i - (i // 10)) % 10 == 1:\n                counter += 1\n        else:\n            if i % (i // 10) == 1:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def gen(n):\n        \"\"\"\n        Generates the numbers of n-digit positive integers that start\n        or end with 1.\n        \"\"\"\n        for i in range(1, 10**n):\n            if i == 1 or i == 10**n:\n                yield i\n            else:\n                yield i+1\n    return sum(1 for _ in gen(n))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n_starts = 0\n    n_ends = 0\n    n_tally = 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    one_count = 0\n    for i in range(1,n+1):\n        if '1' in str(i):\n            one_count += 1\n    return one_count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = 0\n    for x in range(1, n+1):\n        if str(x)[0] == '1' and str(x)[-1] == '1':\n            res += 1\n        elif str(x)[-1] == '1' and str(x)[0] == '1':\n            res += 1\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(2, n+1):\n        if ends_with_one(i):\n            count += 1\n        if starts_with_one(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if n == 1, return 1\n    if n == 1:\n        return 1\n    # else return the number of n-digit positive integers that start or end with 1\n    return sum(\n        starts_one_ends(i)\n        for i in range(1, n+1)\n        )\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    count = 0\n    for i in range(1,n+1):\n        if is_start(i) or is_end(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(1, 10**n):\n        if i == 1 or i == i // 10:\n            count += 1\n        else:\n            if i % 10 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    if n <= 1:\n        return 1\n    for i in range(2, n):\n        if starts_one_ends(i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = 0\n    while N!= 0:\n        s = s + N % 2\n        N = N // 2\n    print(s)\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    while N > 0:\n        sum += N%2\n        N = N // 2\n    return str(sum)\n    \n    \nprint(solve(1)) # \"1\"\nprint(solve(2)) # \"0\"\nprint(solve(3)) # \"1\"\nprint(solve(4)) # \"0\"\nprint(solve(5)) # \"0\"\nprint(solve(6)) # \"1\"\nprint(solve(7)) # \"0\"\nprint(solve(8)) # \"0\"\nprint(solve(9)) # \"1\"\nprint(solve(10)) # \"0\"\nprint(solve(11)) # \"1\"\nprint(solve(12)) # \"0\"\nprint(solve(13)) # \"1\"\nprint(solve(14)) # \"0\"\nprint(solve(15)) # \"1\"\nprint(solve(16)) # \"0\"\nprint(solve(17)) # \"1\"\nprint(solve(18)) # \"0\"\nprint(solve(19)) # \"1\"\nprint(solve(20)) # \"0\"\nprint(solve(21)) # \"1\"\nprint(solve(22)) # \"0\"\nprint(solve(23)) # \"1\"\nprint(solve(24)) # \"0\"\nprint(solve(25)) # \"1\"\nprint(solve(26)) # \"0\"\nprint(solve(27)) # \"1\"\nprint(solve(28)) # \"0\"\nprint(solve(29)) # \"1\"\nprint(solve(30)) # \"0\"\nprint(solve(31)) # \"1\"\nprint(solve(32)) # \"0\"\nprint(solve(33)) # \"1\"\nprint(solve(34)) # \"0\"\nprint(solve(35)) # \"1\"\nprint(solve(36)) # \"0\"\nprint(solve(37)) # \"1\"\nprint(solve(38)) # \"0\"\nprint(solve(39)) # \"1\"\nprint(solve(40)) # \"0\"\nprint(solve(41)) # \"1\"\nprint(solve(42)) # \"0\"\nprint(solve(43)) # \"1\"\nprint(solve(44)) # \"0\"\nprint(solve(45)) # \"1\"\nprint(solve(46)) # \"0\"\nprint(solve(47)) # \"1\"\nprint(solve(48)) # \"0\"\nprint(solve(49)) # \"1\"\nprint(solve(50)) # \"0\"\nprint(solve(51)) # \"1\"\nprint(solve(52)) # \"0\"\nprint(solve(53)) # \"1\"\nprint(solve(54)) # \"0\"\nprint(solve(55)) # \"1\"\nprint(solve(56)) # \"0\"\nprint(solve(57)) # \"1\"\nprint(solve(58)) # \"0\"\nprint(solve(59)) # \"1\"\nprint(solve(60)) # \"0\"\nprint(solve(61)) # \"1\"\nprint(solve(62)) # \"0\"\nprint(solve(63)) # \"1\"\nprint(solve(64)) # \"0\"\nprint(solve(65)) # \"1\"\nprint(solve(66)) # \"0\"\nprint(solve(67)) # \"1\"\nprint(solve(68)) # \"0\"\nprint(solve(69)) # \"1\"\nprint(solve(70)) # \"0\"\nprint(solve(71)) # \"1\"\nprint(solve(72)) # \"0\"\nprint(solve(73)) # \"1\"\nprint(solve(74)) # \"0\"\nprint(solve(75)) # \"1\"\nprint(solve(76)) # \"0\"\nprint(solve(77)) # \"1\"\nprint(solve(78)) # \"0\"\nprint(solve(79)) # \"1\"\nprint(solve(80)) # \"0\"\nprint(solve(81)) # \"1\"\nprint(solve(82)) # \"0\"\nprint("
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # Solution\n    return\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if N < 10:\n        return str(N)\n    return str(N % 2) + solve(N // 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    binary_string = bin(N).replace(\"0b\", \"\")\n    return int(binary_string)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return bin(N)[2:]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if N <= 0:\n        return \"\"\n    elif N == 1:\n        return str(N)\n    elif N <= 9:\n        return str(N)\n    else:\n        return solve(int(str(N)[0])) + str(int(str(N)[1]))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (format(N, 'b'))\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    while N!= 0:\n        total = total * 2 + (N%2)\n        N = N // 2\n    return total"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    binary_string = \"\"\n    while N!= 0:\n        #print(\"binary_string: \", binary_string)\n        #print(\"N: \", N)\n        \n        if N % 2 == 0:\n            binary_string += \"0\"\n        else:\n            binary_string += \"1\"\n        \n        N = N // 2\n        \n    return binary_string\n    \n    \nif __name__ == \"__main__\":\n    import sys\n    N = int(sys.argv[1])\n    binary_string = solve(N)\n    print(binary_string"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 0:\n            continue\n        else:\n            lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] += lst[i-1]\n        lst[i] %= 2\n        return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(0, len(lst), 2):\n        lst.append(lst[i])\n    return lst\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_indices = [i for i in range(1, len(lst)) if i % 2 == 1]\n    even_indices = [i for i in range(0, len(lst)) if i % 2 == 0]\n    add = 0\n    for i in range(0, len(lst)):\n        if i in odd_indices:\n            add += lst[i]\n    for i in range(0, len(lst)):\n        if i in even_indices:\n            add += lst[i]\n    return add\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even_list = []\n    for i in range(0, len(lst), 2):\n        even_list.append(lst[i])\n    return sum(even_list)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd = []\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            odd.append(lst[i])\n    return sum(odd)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(len(lst)-1):\n        if i%2 ==1:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i]%2 == 0 and lst[i+1]%2 == 1:\n            return lst[i]\n    return lst[-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    out = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            out.append(lst[i])\n    return out\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst[:] = [i for i in lst if i % 2 == 1]\n    return sum(lst)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # list of all letters\n    letters = string.ascii_letters + string.digits\n    \n    # check if s is not an empty string\n    if s:\n        # split s by space\n        s = s.split(' ')\n        # make a copy of s\n        list_of_s = s.copy()\n        # sort the list of s\n        sorted_list_of_s = sorted(list_of_s)\n        # make a new string\n        new_string = ''\n        for char in sorted_list_of_s:\n            # for each char in s\n            for letter in letters:\n                # if letter is in char\n                if letter in char:\n                    # replace the letter with the index of the char\n                    new_string += str(letters.index(letter))\n                    # break the loop\n                    break\n        # make a new list of the sorted s and the new string\n        new_list_of_s = []\n        new_string = new_string.replace(' ', '')\n        # remove leading zeros\n        while new_string[0] == '0':\n            new_string = new_string[1:]\n        # add the new string and sorted s in a list\n        new_list_of_s.append(new_string)\n        new_list_of_s.append(sorted_list_of_s)\n        # return the new list\n        return new_list_of_s\n    else:\n        return s\n        "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    shuffle = \"\".join(s.split())\n    shuffle = ''.join(sorted(shuffle))\n    return shuffle\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(sorted(s.split()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not s:\n        return ''\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    shuffle =''.join(s.split())\n    result = ''\n    for i in range(len(shuffle)):\n        char = chr(ord(shuffle[i]) - 1)\n        result += char\n    return result\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join([i for i in s.split(' ') if not i.isspace()])\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    string = s.split()\n    s = ''\n    for i in string:\n        s += str(chr(ord(i) + 13)) +''\n    s = s[:-1]\n    return s\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.title()\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # create new list of tuples\n    new_lst = []\n    # set row coordinate to 0\n    row = 0\n    # loop through each list item\n    for item in lst:\n        # create new list of tuples for each row\n        new_lst.append((row, item))\n        # increment row by 1\n        row += 1\n    # sort by coordinates, ascending\n    new_lst.sort()\n    # create new list of tuples with coordinates\n    coordinates = []\n    # loop through new list of tuples\n    for item in new_lst:\n        # grab coordinates\n        row, columns = item\n        # create tuple\n        coordinates.append((row, columns))\n    # sort coordinates in descending order by columns\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    # return coordinates\n    return coordinates\n    \ndef test_get_row():\n    assert get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert get_row([], 1) == []\n    assert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    assert get_row([], 1) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(list(filter(lambda x: x[0] == x[1], zip(range(len(lst)), lst))), key=lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for row in lst:\n        for idx, elem in enumerate(row):\n            if elem == x:\n                result.append((idx, idx))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    row_dict = {}\n    for row in range(len(lst)):\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                key = (row, col)\n                row_dict[key] = lst[row]\n    key_list = []\n    for key, value in row_dict.items():\n        key_list.append(key)\n    key_list.sort()\n    for key, value in row_dict.items():\n        value.sort(reverse=True)\n    list_of_tuple = []\n    for key in key_list:\n        list_of_tuple.append((key[0], key[1]))\n    return list_of_tuple\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # YOUR CODE HERE\n    res = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            tmp = tuple([(i, col) for col in range(len(lst[i]))])\n            res.append(tmp)\n    res.sort(key=lambda x: (x[0], x[1]))\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted([(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x])\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = []\n    for i, row in enumerate(lst):\n        for j, e in enumerate(row):\n            if e == x:\n                res.append((i, j))\n    res.sort()\n    res.sort(key=lambda x: (x[0], -x[1]))\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(\n        [((row, columns), lst[row][columns]) for row in range(len(lst))\n        for columns in range(len(lst[row])) if lst[row][columns] == x],\n        key=lambda x: (x[0][0], -x[0][1]))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def get_pair(lst):\n        pairs = []\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == x:\n                    pairs.append((i, j))\n        pairs.sort(key=lambda p: (p[1], p[0]))\n        return pairs\n    \n    pairs = get_pair(lst)\n    if len(pairs) == 0:\n        return []\n    \n    return [(pairs[i][0], pairs[i][1]) for i in range(len(pairs))]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Approach 1: Linear\n    # Time: O(N^2)\n    # Space: O(N)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd = True\n    for i in range(len(array)-1):\n        if array[i] + array[i+1] == 0:\n            continue\n        elif array[i] + array[i+1] == 1:\n            odd = False\n        else:\n            odd = True\n        break\n    if not odd:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Create a new list with the same length as the given array\n    #...\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # print(array)\n    if not array: return []\n    array_copy = array.copy()\n    if sum(array[0], array[-1]) % 2!= 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    return array_copy\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    l = len(array)\n    if l < 2:\n        return array\n    new_array = sorted(array)\n    if sum(array[0], array[-1]) % 2 == 1:\n        new_array = array[::-1]\n    else:\n        new_array = array\n    return new_array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(array) == 0:\n        return array\n    odd = False\n    if sum(array[0], array[-1]) % 2!= 0:\n        odd = True\n    new_array = []\n    for item in array:\n        new_array.append(item)\n        if item == 0:\n            new_array = new_array[:new_array.index(item)] + [item] + new_array[new_array.index(item) + 1:]\n        else:\n            new_array = new_array[:new_array.index(item)] + [item] + new_array[new_array.index(item) + 1:]\n    if odd:\n        return new_array[::-1]\n    return new_array\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # https://github.com/josephhe/algo-practice-python/blob/master/sort_array.py\n    return sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # get the total sum of first and last index\n    total_sum = sum(array)\n    # if the sum is odd\n    if total_sum % 2!= 0:\n        # sort in ascending order\n        return sorted(array)\n    # else, sort in descending order\n    else:\n        # reverse the array\n        array.reverse()\n        # return the array\n        return array\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # using a dictionary to map each letter to the letter at the opposite position\n    # in the alphabet\n    letter_dict = {'a':'d', 'e':'i', 'i':'o', 'o':'a', 'u':'p', 'p':'u'}\n    encrypted_word = ''\n    for c in s:\n        if c.isalpha():\n            encrypted_word += letter_dict[c]\n        else:\n            encrypted_word += c\n    return encrypted_word\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = dict((i, chr(i + ord('a'))) for i in range(ord('a'), ord('z') + 1))\n    b = dict((i, chr(i + ord('A'))) for i in range(ord('A'), ord('Z') + 1))\n    a.update(b)\n    # print(a)\n    return \"\".join(a.get(i, i) for i in s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # define a helper function\n    def helper(s):\n        a = ord('a')\n        b = ord('b')\n        c = ord('c')\n        d = ord('d')\n        e = ord('e')\n        f = ord('f')\n        g = ord('g')\n        h = ord('h')\n        i = ord('i')\n        j = ord('j')\n        k = ord('k')\n        l = ord('l')\n        m = ord('m')\n        n = ord('n')\n        o = ord('o')\n        p = ord('p')\n        q = ord('q')\n        r = ord('r')\n        s = ord('s')\n        t = ord('t')\n        u = ord('u')\n        v = ord('v')\n        w = ord('w')\n        x = ord('x')\n        y = ord('y')\n        z = ord('z')\n        return (chr(a+((s+2)*(a-a+2))), chr(b+((s+2)*(b-b+2))), chr(c+((s+2)*(c-c+2))), chr(d+((s+2)*(d-d+2))), chr(e+((s+2)*(e-e+2))), chr(f+((s+2)*(f-f+2))), chr(g+((s+2)*(g-g+2))), chr(h+((s+2)*(h-h+2))), chr(i+((s+2)*(i-i+2))), chr(j+((s+2)*(j-j+2))), chr(k+((s+2)*(k-k+2))), chr(l+((s+2)*(l-l+2))), chr(m+((s+2)*(m-m+2))), chr(n+((s+2)*(n-n+2))), chr(o+((s+2)*(o-o+2))), chr(p+((s+2)*(p-p+2))), chr(q+((s+2)*(q-q+2))), chr(r+((s+2)*(r-r+2))), chr(s+((s+2)*(s-s+2))), chr(t+((s+2)*(t-t+2))), chr(u+((s+2)*(u-u+2))), chr(v+((s+2)*(v-v+2))), chr(w+((s+2)*(w-w+2))), chr(x+((s+2)*(x-x+2))), chr(y+((s+2)*(y-y+2))), chr(z+((s+2)*(z-z+2))))\n    \n    # call the helper function and return the result\n    return helper(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not s:\n        return s\n    new_s = \"\"\n    for i in range(len(s)):\n        new_s += alphabet[(alphabet.index(s[i]) + 2) % 26]\n    return new_s\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.lower().replace(\"a\", \"z\").replace(\"e\", \"z\").replace(\"i\", \"y\").replace(\"o\", \"w\").replace(\"u\", \"x\")\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.lower()\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            s[i] = s[i+2]\n            s[i+2] = s[i]\n    return ''.join(s)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    def encrypt(s):\n        \"\"\"Create a function encrypt that takes a string as an argument and\n        returns a string encrypted with the alphabet being rotated. \n        The alphabet should be rotated in a manner such that the letters \n        shift down by two multiplied to two places.\n        For example:\n        encrypt('hi') returns 'lm'\n        encrypt('asdfghjkl') returns 'ewhjklnop'\n        encrypt('gf') returns 'kj'\n        encrypt('et') returns 'ix'\n        \"\"\"\n        s = s.lower()\n        temp = \"\"\n        for c in s:\n            if c.isalpha():\n                if c.islower():\n                    if ord(c) >= ord(\"a\") and ord(c) <= ord(\"z\"):\n                        temp += chr(ord(c) + 2)\n                    elif ord(c) >= ord(\"A\") and ord(c) <= ord(\"Z\"):\n                        temp += chr(ord(c) + 2)\n                elif c.isupper():\n                    if ord(c) >= ord(\"A\") and ord(c) <= ord(\"Z\"):\n                        temp += chr(ord(c) + 2)\n                    elif ord(c) >= ord(\"a\") and ord(c) <= ord(\"z\"):\n                        temp += chr(ord(c) + 2)\n            else:\n                temp += c\n        return temp\n    return encrypt\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return (s.translate(str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", \"cdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\")))\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s[::-1].upper()\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Encryption\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    return ''.join([alphabet[(alphabet.index(c) + 2) % 26] for c in s])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # write your code here\n    if not lst:\n        return None\n    \n    # next largest value\n    if len(lst) == 1:\n        return lst[0]\n    \n    # get the 2nd smallest val\n    lst = sorted(lst)\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst == []:\n        return None\n    else:\n        return min(lst[1:])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if lst[-1] <= lst[-2]:\n        return lst[-1]\n    if lst[0] <= lst[-1]:\n        return lst[0]\n    for i in range(0, len(lst)-2):\n        if lst[i] <= lst[i+1] and lst[i+1] <= lst[i+2]:\n            return lst[i+1]\n    return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) < 2:\n        return None\n    first, *rest = lst\n    return min(rest, key=lambda x: first - x)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst.sort()\n    if len(lst) == 0:\n        return None\n    return lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not lst:\n        return None\n    m = None\n    for x in lst:\n        if x > m:\n            m = x\n    if m is None:\n        return None\n    index = lst.index(m)\n    if index + 2 > len(lst):\n        return None\n    if lst[index + 1] > lst[index]:\n        return lst[index + 1]\n    return lst[index + 2]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]\n        \n        \n        \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 1:\n        return None\n    return sorted_lst[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(lst)\n    if n == 0:\n        return None\n    elif n == 1:\n        return lst[0]\n    else:\n        smallest = lst[0]\n        for i in range(1, n):\n            if lst[i] < smallest:\n                smallest = lst[i]\n        return smallest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not lst:\n        return None\n    \n    min_val = lst[0]\n    min_idx = 0\n    \n    for i, val in enumerate(lst):\n        if val < min_val:\n            min_val = val\n            min_idx = i\n    return lst[min_idx+1]\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return S.count('I')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = S.split()\n    bored_words = 0\n    for w in words:\n        if w[0] == 'I':\n            bored_words += 1\n    return bored_words"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return S.count(\"I\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    bored = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for word in S.split('.'):\n        if word.startswith('I'):\n            count += 1\n    return count\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = 0\n    for word in S.split():\n        if word == \"I\":\n            n += 1\n    return n\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    cnt = 0\n    for w in S.split():\n        if w.startswith(\"I\"):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y == z and isinstance(x,int) and isinstance(y,int) and isinstance(z,int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        return x == (y + z) and x.is_integer() and y.is_integer() and z.is_integer()\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return all([type(i) is int for i in (x, y, z)]) and x!= y!= z and x + y + z == z\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x == (y+z) and all([x,y,z].count(int) == 3)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (x+y == z and type(x) == int and type(y) == int and type(z) == int)"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x == (y+z) and x and y and z and type(x) == type(y) == type(z) == int\n  \nany_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z and x == int(y) + int(z) and x == int(y) + int(z):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return any([x,y,z] == sum([x,y,z]), all([x,y,z] == int(sum([x,y,z]))), \n                all([x,y,z] == int(sum([x,y,z])) )\n                )\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (x == (y+z) and type(x)==int and type(y)==int and type(z)==int)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (x == y + z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n  \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].isupper():\n                if ord(message[i])+2>ord('Z'):\n                    message=message[:i]+chr(ord(message[i])+2-ord('Z'))+message[i+1:]\n                else:\n                    message=message[:i]+chr(ord(message[i])+2)+message[i+1:]\n            else:\n                if ord(message[i])+2>ord('a'):\n                    message=message[:i]+chr(ord(message[i])+2-ord('a'))+message[i+1:]\n                else:\n                    message=message[:i]+chr(ord(message[i])+2)+message[i+1:]\n    return message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    vowels = ('a', 'e', 'i', 'o', 'u')\n    encoded = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded += vowels[(vowels.index(letter.lower()) + 2) % 5]\n        else:\n            encoded += letter\n    return encoded\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_message = \"\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                new_letter = \"\"\n                for letter2 in message:\n                    if letter2.isupper():\n                        if letter2 == 'a':\n                            new_letter = 'e'\n                        elif letter2 == 'e':\n                            new_letter = 'a'\n                        elif letter2 == 'i':\n                            new_letter = 'i'\n                        elif letter2 == 'o':\n                            new_letter = 'u'\n                        elif letter2 == 'u':\n                            new_letter = 'o'\n                        elif letter2 == 'y':\n                            new_letter = 'y'\n                new_message += new_letter\n            else:\n                new_letter = \"\"\n                for letter2 in message:\n                    if letter2.isalpha():\n                        if letter2 == 'a':\n                            new_letter = 'e'\n                        elif letter2 == 'e':\n                            new_letter = 'a'\n                        elif letter2 == 'i':\n                            new_letter = 'i'\n                        elif letter2 == 'o':\n                            new_letter = 'u'\n                        elif letter2 == 'u':\n                            new_letter = 'o'\n                        elif letter2 == 'y':\n                            new_letter = 'y'\n                new_message += new_letter\n        else:\n            new_message += letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    message = message.upper()\n    return \"\".join([f\"{letter}\" if letter in ['a','e','i','o','u'] else f\"{letter.lower()}\"\n    for letter in message])\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = 'aeiouAEIOU'\n    st = \"\"\n    for i in message:\n        if i in vowels:\n            st += vowels[vowels.index(i) + 2]\n        else:\n            st += i\n    return st\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    message = list(message)\n    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].isupper():\n                if ord(message[i])+2 > ord('Z'):\n                    message[i] = chr(ord(message[i])+2 - ord('Z'))\n                else:\n                    message[i] = chr(ord(message[i])+2)\n            elif message[i].islower():\n                if ord(message[i])+2 > ord('z'):\n                    message[i] = chr(ord(message[i])+2 - ord('z'))\n                else:\n                    message[i] = chr(ord(message[i])+2)\n    return ''.join(message)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    cipher = \"\"\n    for letter in message:\n        if letter in vowels:\n            cipher += ''.join(cipher[letter] if letter!= 'A' else 'a' for cipher in message)\n            cipher += ''.join(cipher[letter] if letter!= 'E' else 'e' for cipher in message)\n            cipher += ''.join(cipher[letter] if letter!= 'I' else 'i' for cipher in message)\n            cipher += ''.join(cipher[letter] if letter!= 'O' else 'o' for cipher in message)\n            cipher += ''.join(cipher[letter] if letter!= 'U' else 'u' for cipher in message)\n        else:\n            cipher += letter\n    return cipher\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    encoded_message = ''\n    for i in message:\n        if i in \"abcdefghijklmnopqrstuvwxyz\":\n            if i.isupper():\n                if i == i.lower():\n                    encoded_message += i.lower()\n                else:\n                    encoded_message += i.upper()\n            else:\n                if i == i.upper():\n                    encoded_message += i.lower()\n                else:\n                    encoded_message += i.upper()\n        else:\n            encoded_message += i\n    return encoded_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    new_message = ''\n    \n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            if letter.isupper():\n                new_message += letter.lower()\n            else:\n                new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return message.swapcase()\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = [i for i in lst if i > 0]\n    lst = sorted(lst, reverse=True)\n    if isPrime(lst[0]):\n        return sum([int(i) for i in str(lst[0])])\n    else:\n        return sum([int(i) for i in str(lst[1])])\n    \ndef isPrime(n):\n    \"\"\"You are given a positive integer n.\n    You need to determine whether n is prime or not.\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst = list(map(int, lst))\n    lst = sorted(lst)\n    length = len(lst)\n    for i in range(length):\n        if prime(lst[i]):\n            prime_sum = 0\n            while lst[i] > 0:\n                prime_sum += lst[i] % 10\n                lst[i] = lst[i] // 10\n            return prime_sum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #!!! You can split the list in groups of size 3.\n    #!!! Iterate over the groups, find the largest prime and add the value from the group to the output\n    #!!! Return the output as an int.\n    output = 0\n    lst.sort()\n    for i in range(0,len(lst),3):\n        a = lst[i]\n        b = lst[i+1]\n        c = lst[i+2]\n        for j in range(2,b):\n            if b % j == 0:\n                break\n            elif b == 1:\n                return b\n        else:\n            c = c * 10\n            output += a\n            output += c\n    return output\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    ans = 0\n    for num in lst:\n        if isprime(num):\n            count += 1\n            ans += num\n    return(ans)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    int_list = lst\n    int_list = list(map(int, int_list))\n    \n    max_prime_value = 0\n    while True:\n        for i in range(len(int_list)):\n            if (int_list[i] >= 0) and (int_list[i] < 100) and (prime_num(int_list[i])) :\n                max_prime_value = max_prime_value + int_list[i]\n        if max_prime_value == 0:\n            break\n        else:\n            max_prime_value = 0\n    \n    return max_prime_value\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #\n    from math import prod\n    from eulerlib import list_primes\n    from itertools import cycle, zip_longest\n    from functools import reduce\n    from operator import mul\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    maxi = 0\n    maxi_num = 0\n    for i in lst:\n        if is_prime(i) == True:\n            if i > maxi:\n                maxi = i\n                maxi_num = i\n    return sum([int(i) for i in str(maxi_num)])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for x in lst:\n        if x > 0:\n            for i in range(len(str(x))):\n                if(i == 0 and x < 2) or (i > 0 and x % 10!= 0):\n                    break\n                if i == 1 and x % 10 == 0:\n                    break\n                if x % 10!= 0 and (i == 1 or x < 2) and (x == 2 or x == 3 or x == 5 or x == 7 or x == 11 or x == 13 or x == 17 or x == 19 or x == 23 or x == 29 or x == 31 or x == 37 or x == 41 or x == 43 or x == 47 or x == 53 or x == 59 or x == 61 or x == 67 or x == 71 or x == 73 or x == 79 or x == 83 or x == 89 or x == 97 or x == 101 or x == 103 or x == 107 or x == 109 or x == 113 or x == 127 or x == 131 or x == 137 or x == 139 or x == 149 or x == 151 or x == 157 or x == 163 or x == 167 or x == 173 or x == 179 or x == 181 or x == 191 or x == 193 or x == 197 or x == 199:\n                    return(x)\n    return(0)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    m=0\n    for i in range(len(lst)):\n        if(lst[i]==0):\n            continue\n        else:\n            m=m+math.floor(math.log10(lst[i]))\n    m=10**m\n    return m\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    temp = 1\n    for i in range(0,len(lst)):\n        temp *= lst[i]\n    temp = temp % 9\n    return temp\n    \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not dict:\n        return False\n    if not isinstance(dict, dict):\n        return False\n    return all(isinstance(key, str) for key in dict.keys()) == all(isinstance(key, str) for key in dict.values())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for k in dict:\n            if type(k)!= str or type(dict[k])!= str:\n                return False\n            elif k.isupper() or k.islower():\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if len(dict) == 0 else all(isinstance(key, str) for key in dict.keys()) and all(isinstance(key, str) for key in dict.keys())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if key.isupper() or key.islower():\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if dict=={}:\n        return False\n    return dict=={k:v.lower() if type(v)==str else v.upper() for k,v in dict.items()}\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if dict == {}:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        else:\n            if key.islower() == False and key.isupper() == False:\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if dict == {}:\n        return False\n    elif type(dict)!= dict:\n        return False\n    else:\n        if type(list(dict.keys())[0]) == str:\n            return all(type(k) == str for k in dict.keys()) and all(type(v) == str for v in dict.values())\n        else:\n            return False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(dict) == 0:\n        return False\n    for key,value in dict.items():\n        if type(key)!= str:\n            return False\n        if type(value)!= str:\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if dict == {}:\n        return False\n    else:\n        if dict.values() == set([\"\"]):\n            return True\n        else:\n            if dict.keys() == set([\"\"]):\n                return True\n            else:\n                for key in dict.keys():\n                    if type(key) is not str:\n                        return False\n                    else:\n                        if type(dict[key]) is not str:\n                            return False\n                for value in dict.values():\n                    if type(value) is not str:\n                        return False\n                return True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if type(key) is not str:\n                return False\n        for key in dict:\n            if type(key) is str and key.isupper() == False and key.islower() == False:\n                return False\n        return True\n            \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # 1. Initialize an empty array\n    count_up_to_array = []\n    # 2. Loop through range (1, n)\n    for i in range(1, n + 1):\n        # 3. Check if i is prime\n        if is_prime(i):\n            # 4. If it is prime, then add it to the array and increase i by one\n            count_up_to_array.append(i)\n        else:\n            # 5. If it is not prime, then decrease i by one\n            i -= 1\n    # 6. Return the array\n    return count_up_to_array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prime_numbers = []\n    for i in range(n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_numbers.append(i)\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n < 1:\n        return []\n    primes = primes_up_to(n)\n    return count_primes(primes)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = int(n)\n    if n <= 0:\n        return []\n    \n    primes = []\n    for num in range(2,n+1):\n        if num not in primes:\n            for i in range(2,num):\n                if num % i == 0:\n                    break\n            else:\n                primes.append(num)\n    \n    return primes\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    if n == 3:\n        return [2,3,5]\n    if n == 4:\n        return [2,3,5,7]\n    if n == 5:\n        return [2,3,5,7,11]\n    if n == 6:\n        return [2,3,5,7,11,13]\n    if n == 7:\n        return [2,3,5,7,11,13,17]\n    if n == 8:\n        return [2,3,5,7,11,13,17,19]\n    if n == 9:\n        return [2,3,5,7,11,13,17,19,23]\n    if n == 10:\n        return [2,3,5,7,11,13,17,19,23,29]\n    if n == 11:\n        return [2,3,5,7,11,13,17,19,23,29,31]\n    if n == 12:\n        return [2,3,5,7,11,13,17,19,23,29,31,37]\n    if n == 13:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41]\n    if n == 14:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43]\n    if n == 15:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\n    if n == 16:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53]\n    if n == 17:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59]\n    if n == 18:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61]\n    if n == 19:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67]\n    if n == 20:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71]\n    if n == 21:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73]\n    if n == 22:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79]\n    if n == 23:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83]\n    if n == 24:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89]\n    if n == 25:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    if n == 26:\n        return [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101]\n    if n == 27:\n        return [2,3,5,7,11,13,17,1"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = []\n    for i in range(n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lst.append(i)\n    return lst\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #Hint: use an algorithm from:\n    #https://www.cs.ucdavis.edu/~jimmy.e/courses/math_227/code/nprimes.py\n    result = []\n    # Add the first prime number\n    if n == 0 or n == 1:\n        result.append(1)\n        return result\n    # We know that n >= 2\n    # So, we know the number that we need to primes up to is n\n    # Now, we can create a new array with the first element being n\n    new_array = [n]\n    # Now, we can create a while loop that will count up to the number that we will be using\n    while new_array[-1] > 1:\n        # Create a list of all prime numbers up to the current number, including itself\n        # Check if any of them are divisors of the new number\n        # If so, remove them from the list\n        prime_numbers = primes_up_to(new_array[-1])\n        for i in prime_numbers:\n            # Check if the new number is divisible by any of the prime numbers\n            if new_array[-1] % i == 0:\n                prime_numbers.remove(i)\n        new_array.append(prime_numbers[0])\n    # Now, we have the list of prime numbers up to the current number, including itself\n    # Now, we need to add 1 and 0 to the list so that we can include the first prime number\n    # Remember that we need to check that 0 is not included (since 0 is not prime)\n    # Also, we need to check if the new prime number is greater than 1\n    # If not, we can skip it and go to the next\n    # If we do not skip, then we need to add it to the list\n    # We also need to add 1 because 0 is not a prime number\n    if new_array[-1]!= 1:\n        new_array.append(1)\n    if new_array[-1] >= 1:\n        new_array.append(0)\n    return new_array\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 2:\n        return []\n    if n < 3:\n        return [2]\n    if n < 4:\n        return [2,3]\n    if n < 5:\n        return [2,3,5]\n    prime_numbers = []\n    i = 2\n    while i <= n:\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime == True:\n            prime_numbers.append(i)\n        i += 1\n    return prime_numbers\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 2\n    return primes\n    \ndef is_prime(n):\n    \"\"\"Return True if n is prime, else False\"\"\"\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a < 0 and b < 0:\n        return multiply(a*-1, b*-1)\n    elif a < 0 and b > 0:\n        return multiply(a*-1, b)\n    elif a > 0 and b > 0:\n        a_id = str(a)\n        b_id = str(b)\n        if len(a_id) > 1 and len(b_id) > 1:\n            first = int(a_id[0])\n            second = int(b_id[0])\n            product = first * second\n            return product\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n1 = int(str(a)[::-1])\n    n2 = int(str(b)[::-1])\n    \n    return n1 * n2\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    print(a % 10, a // 10)\n    print(b % 10, b // 10)\n    return a * b\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    product = 1\n    for i in range(len(str(a))):\n        product *= int(str(a)[i])\n    for i in range(len(str(b))):\n        product *= int(str(b)[i])\n    return product\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    multiplied = a * b\n    return multiplied // 10\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(str(a) * str(b))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a == 0:\n        return 0\n    return int(str(a)[0]) * int(str(b)[0]) * int(str(a)[1]) * int(str(b)[1]) * int(str(a)[2]) * int(str(b)[2])\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert (is_valid(a)) and (is_valid(b))\n    # just need to get the divisor\n    divisor = get_divisor(a)\n    # get the multiplier\n    multiplier = get_multiplier(a)\n    # get the least significant digit of the divisor\n    ls_digit = get_ls_digit(divisor)\n    # multiply the two numbers and grab the least significant digit\n    return ((multiplier * ls_digit) % 10)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    # Multiply the first digit by the first digit\n    result += int(a / 10) * int(b / 10)\n    # Multiply the first digit by the second digit\n    result += int(a / 10) * int(b % 10)\n    # Multiply the second digit by the first digit\n    result += int(b / 10) * int(a % 10)\n    # Multiply the second digit by the second digit\n    result += int(b % 10) * int(a % 10)\n    # Return the product of the digits\n    return result"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return int(a*b/math.gcd(a,b))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = 0\n    for i in range(0,len(s)-1,2):\n        if s[i] in 'AEIOU':\n            n += 1\n    return n\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0,len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    count = 0\n    while i < len(s):\n        if s[i].isupper():\n            count += 1\n        i += 2\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if not s:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in 'aeiou':\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n    \nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Get the length of the string.\n    l = len(s)\n    \n    # Determine the number of upper-case vowels.\n    num_upper = 0\n    for i in range(l):\n        if s[i].isupper():\n            num_upper += 1\n    \n    # Return the number of upper-case vowels in even indices.\n    if l % 2 == 0:\n        return num_upper\n    else:\n        return 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num_of_upper = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i].isupper():\n            num_of_upper += 1\n        \n    return num_of_upper\n        \ndef test_count_upper():\n    assert count_upper('aBCD') == 1\n    assert count_upper('abcdefg') == 0\n    assert count_upper('dBBE') == 0\n    assert count_upper('abcd') == 1\n    assert count_upper('ABCD') == 1\n    assert count_upper('ABCD') == 1\n    assert count_upper('abcd') == 1\n    assert count_upper('ABCD') == 1\n    \n    print('You passed the test!')\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    count = 0\n    s = s.lower()\n    \n    for i in range(0, len(s), 2):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    \n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            count += 1\n        \n        elif ord(s[i]) >= 97 and ord(s[i]) <= 122:\n            count += 1\n            \n        else:\n            pass\n        \n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if s == '':\n        return 0\n    \n    num_upper = 0\n    i = 0\n    while i < len(s):\n        if s[i] in ('A', 'E', 'I', 'O', 'U'):\n            num_upper += 1\n        i += 2\n    return num_upper\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if value.endswith(\".\"):\n        value = value[:value.find(\".\")]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if isinstance(value, str):\n        return int(value.replace(\".\", \"\"))\n    return int(math.floor(value))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = int(value)\n    closest = num\n    if num > 0:\n        closest = num\n    elif num < 0:\n        closest = -num\n    if abs(num) == 1:\n        return closest\n    elif abs(num) == 0.5:\n        return int(num)\n    elif abs(num) == 0:\n        return 0\n    else:\n        if abs(num) < closest:\n            return closest\n        else:\n            return int(num)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(value) if float(value) == int(value) else int(round(float(value)))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # take a number as an input\n    # convert it to a string and make it all lower case\n    # split the string by using. as a decimal separator\n    # take the integer part of the string\n    # cast the integer part to an int, so that we can compare it\n    # to the numbers that are in the list of values\n    # if they are equal, return them in the list\n    # otherwise, return the smaller value\n    numbers = ['zero','one','two','three','four','five','six','seven','eight','nine','ten']\n    new_num = int(value)\n    new_num = str(new_num)\n    new_num = new_num.split('.')\n    new_num = int(new_num[0])\n    new_num = str(new_num)\n    new_num = new_num.lower()\n    new_num = int(new_num)\n    \n    # returns the closest integer from two integers\n    def closest_integer_0(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_1(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_2(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_3(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_4(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_5(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n                \n    # returns the closest integer from two integers\n    def closest_integer_6(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num + 1 in numbers:\n                    return new_num + 1\n                else:\n                    return new_num - 1\n    \n    # returns the closest integer from two integers\n    def closest_integer_7(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            if new_num in numbers:\n                return new_num\n            else:\n                if new_num - 1 in numbers:\n                    return new_num - 1\n                else:\n                    return new_num + 1\n    \n    # returns the closest integer from two integer"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    return int(round((float(value) / float(2)))) * 2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = float(value)\n    if n == 0:\n        return 0\n    if n % 1 == 0:\n        return int(n)\n    return int(n) + 1 if n < 0 else int(n) - 1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    value = float(value)\n    value = int(value)\n    if abs(value - int(value)) < abs(value - int(value - 1)):\n        return value\n    else:\n        return int(value - 1)"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not isinstance(value, str):\n        raise TypeError('Argument should be a string')\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n%2:\n        return [n, (n+1)//2, (n+1)//2+n]\n    else:\n        return [n, (n+1)//2, (n+1)//2]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    elif n == 0:\n        return [0]\n    elif n % 2 == 0:\n        return make_a_pile(n-2) + [n*2]\n    else:\n        return make_a_pile(n-1) + [n*2+1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 0:\n        return None\n    else:\n        return_list = []\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                return_list.append(i + (i // 2))\n            else:\n                return_list.append(i + (i // 2) + 1)\n        return return_list\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % 2 == 0:\n        return [n] + make_a_pile(n+1)\n    return [n+1] + make_a_pile(n+2)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [n] + [n + i if i % 2!= 0 else n + (n // 2) for i in range(1, n)]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n <= 2:\n        return n\n    elif n % 2 == 0:\n        return [n//2 + i for i in make_a_pile(n - 1)]\n    elif n % 2 == 1:\n        return [n//2 - i for i in make_a_pile(n - 1)]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # if n is even, the number of stones in the next level is even\n    if n % 2 == 0:\n        return list(range(1, n + 1, 2))\n    else:\n        return list(range(1, n + 1, 2)) + list(range(1, n, 2))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return_list = []\n    for num in range(n):\n        if n % 2 == 0:\n            return_list.append(num*2 + 1)\n        else:\n            return_list.append(num*2)\n        n = n-1\n    return return_list\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return []\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    i = 0\n    while i <= n:\n        if i % 2 == 0:\n            result.append(i+1)\n        else:\n            result.append(i+2)\n        i += 2\n    return result\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s.split(', ')\n    \nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = s.split(',')\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    words = s.split()\n    return words\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return s.split()\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s.split(', ')\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    for i in range(x, y + 1):\n        if i%2 == 0:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    elif x > y:\n        return -1\n    elif x < y:\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if x > y:\n        return -1\n    else:\n        for i in range(x, y + 1):\n            if i % 2 == 0:\n                return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x > y:\n        return -1\n    if x % 2 == 0 and x <= y:\n        return x\n    if x % 2!= 0 and x > y:\n        return choose_num(x + 1, y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    evens = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            evens.append(i)\n    if evens:\n        return max(evens)\n    else:\n        return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(x, y+1):\n        if i % 2 == 0:\n            return i\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # get the number of integers in the range\n    start = x\n    end = y\n    while end > start:\n        start += 1\n        end -= 1\n    \n    # get the largest even integer in the range\n    for i in range(start, end + 1, 2):\n        if i % 2 == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    x = int(x)\n    y = int(y)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Based on the value of x and y, calculate the biggest even integer\n    # that is in the range of [x, y] inclusive\n    if x == 1:\n        return y - 1\n    elif x == y:\n        return x\n    elif x > y:\n        return -1\n    elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n > m:\n        return -1\n    s = 0\n    for i in range(n, m+1):\n        s += i\n    avg = s/m\n    return int(avg).to_bytes(math.ceil(math.log(avg, 2)), 'big')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return '0b' + bin(int(round((n + m) / 2)))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if n > m:\n        return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    if n < m:\n        return 0\n    n = int(n)\n    m = int(m)\n    avg = (n + m) / 2\n    return bin(int(avg)).count(\"1\")\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int(n + m / 2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int((n + m)/2))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return bin(int((round(sum(range(n, m + 1)) / (m - n + 1)))))"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        return bin(int((n + m) / 2))[2:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # if n > m: return -1\n    # sum = 0\n    # for i in range(n, m + 1):\n    #     sum += i\n    # return sum // (m - n + 1)\n    return (n + m) // 2\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(list(set(x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    \"\"\"\n    unique = []\n    for i in x:\n        i = str(i)\n        for j in i:\n            if int(j) % 2 == 0:\n                break\n        else:\n            unique.append(i)\n    return sorted(unique)\n    \"\"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    out_list = []\n    for i in x:\n        if is_digit(i) == False:\n            out_list.append(i)\n    return sorted(out_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted([num for num in x if len(str(num)) % 2 == 1])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # edge case: list is empty\n    if len(x) == 0:\n        return []\n    \n    # base case: one item in list\n    if len(x) == 1:\n        return list(range(1, 10))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = set()\n    for n in x:\n        s.add(n%10)\n    return sorted(list(s))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(list(set(x)))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = []\n    for num in x:\n        for digit in str(num):\n            if int(digit) % 2!= 0:\n                numbers.append(num)\n                break\n    return sorted(numbers)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(set([num for num in x if int(str(num)[0]) % 2 == 0]))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l = []\n    for i in x:\n        i = str(i)\n        if len(i)%2 == 0:\n            l.append(i)\n    return sorted(l)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    length_of_arr = arr.copy()\n    for i in range(len(length_of_arr)):\n        if length_of_arr[i] > 9:\n            length_of_arr[i] = length_of_arr[i] - 9\n    \n    for i in range(len(length_of_arr)):\n        if length_of_arr[i] < 1:\n            length_of_arr[i] = length_of_arr[i] + 9\n    \n    length_of_arr.sort()\n    arr = length_of_arr.copy()\n    arr.reverse()\n    \n    for i in range(len(arr)):\n        arr[i] = str(arr[i])\n        \n    return arr\n    \n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    try:\n        return sorted(arr, reverse = True)\n    except TypeError:\n        return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # iterate through the array\n    for i in range(len(arr)):\n        # if the value is in between 1 and 9\n        if 1 <= arr[i] <= 9:\n            # set the name to the corresponding number\n            arr[i] = numbers[arr[i]]\n    # reverse the array\n    arr.reverse()\n    # sort the array\n    arr.sort()\n    return arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return []\n    \n    # sort array by length of the numbers\n    arr.sort(key=len)\n    \n    # reverse the array\n    arr.reverse()\n    \n    # reverse the first index of each number\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    \n    # Replace the digit with the name\n    sorted_arr = []\n    for i in range(len(arr)):\n        if i < 10:\n            sorted_arr.append(\"One\")\n        elif i < 100:\n            sorted_arr.append(\"Two\")\n        elif i < 1000:\n            sorted_arr.append(\"Three\")\n        elif i < 10000:\n            sorted_arr.append(\"Four\")\n        elif i < 100000:\n            sorted_arr.append(\"Five\")\n        elif i < 1000000:\n            sorted_arr.append(\"Six\")\n        elif i < 10000000:\n            sorted_arr.append(\"Seven\")\n        elif i < 100000000:\n            sorted_arr.append(\"Eight\")\n        else:\n            sorted_arr.append(\"Nine\")\n    \n    # return the sorted array\n    return sorted_arr\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return []\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr.sort()\n    arr.reverse()\n    length = len(arr)\n    if length == 0:\n        return []\n    \n    def replace_numbers(x):\n        if x <= 9 and x >= 1:\n            return chr(x + ord('One'))\n        else:\n            return ''\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr = sorted(arr)\n    return [\n        digit_name(i) if i >= 1 and i <= 9 else i\n        for i in arr\n    ]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [\n        x if x <= 9 else\n        ['One'] if x == 1 else\n        ['Two'] if x == 2 else\n        ['Three'] if x == 3 else\n        ['Four'] if x == 4 else\n        ['Five'] if x == 5 else\n        ['Six'] if x == 6 else\n        ['Seven'] if x == 7 else\n        ['Eight'] if x == 8 else\n        ['Nine'] if x == 9 else ''\n        for x in sorted(arr)\n    "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr:\n        return []\n    arr = sorted(arr)\n    arr = arr[::-1]\n    arr = by_digit(arr)\n    return arr\n    \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = int(n)\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    else:\n        return [f(i-1) for i in range(1,n+1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = []\n    if n <= 1:\n        return l\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            l.append(factorial(i))\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    list = []\n    for i in range(n):\n        list.append(i+1)\n        if i % 2 == 0:\n            list[i] = factorial(i)\n    return list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    L = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            L.append(i)\n        else:\n            L += range(1, i+1)\n    return L\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(i)\n        else:\n            res.append(i * (i + 1))\n    return res\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for i in range(1, n + 1):\n        result.append(math.factorial(i))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        return [f(i) * i for i in range(1, n + 1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum([i for i in range(1,i+1)]))\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # 1. \n    result = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i if i % 2 == 0 else sum(list(range(1, i+1))) for i in range(1, n+1)]\n    "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_palindrome(i+1):\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Determines if n is even or odd\n    def is_even(n):\n        return n % 2 == 0\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # calculate palindromes that range from 1 to n\n    #   * then count how many are even and odd\n    #   * return tuple with counts\n    count_even, count_odd = 0, 0\n    for i in range(1, n+1):\n        # we need to check palindrome sequence\n        if is_palindrome(i) and i % 2 == 0:\n            count_even += 1\n        if is_palindrome(i) and i % 2 == 1:\n            count_odd += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and is_palindrome(i+1):\n            even += 1\n        if is_palindrome(i) and not is_palindrome(i+1):\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    ans = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                ans += 1\n            else:\n                ans += 2\n    return ans\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    even_count = even_odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            even_count += 1\n            even_odd += 1\n        else:\n            even_odd += 1\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # n = 12\n    # ans = 0\n    #\n    # for i in range(1, n + 1):\n    #     if is_palindrome(i):\n    #         if i % 2 == 0:\n    #             ans += 1\n    #         else:\n    #             ans += 2\n    #\n    # return ans\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    even_odd = (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    nums = range(1, n+1)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    sum_num = 0\n    for num in arr:\n        num = abs(num)\n        while num > 0:\n            sum_num += num % 10\n            num = num // 10\n    return sum_num\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for num in arr:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num = num // 10\n        if sum(digits) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        str_num = str(num)\n        if (len(str_num) == 1) or (int(str_num[0]) == 0):\n            continue\n        else:\n            count += 1\n    return count\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TEST PASSED.\\n\""
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums_with_zero_sum = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            nums_with_zero_sum += 1\n    return nums_with_zero_sum\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in arr:\n        s = 0\n        while num > 0:\n            # take the first signed digit\n            s = s + (num & 0x01)\n            num = num >> 1\n        if s > 0:\n            count += 1\n    return count"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(i > 0 and str(i)[0] == str(i)[0] for i in arr)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    nums = [int(x) for x in arr]\n    # first_nums = 0\n    # for num in nums:\n    #     if (num > 0):\n    #         first_nums += 1\n    #     else:\n    #         first_nums = 0\n    #         break\n    # return first_nums\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len([x for x in arr if x > 0 and sum(int(i) for i in str(x)) > 0])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(1 for num in arr if sum(map(int, list(str(num)))) > 0)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for num in arr:\n        num_sum = sum_digits(num)\n        if num_sum > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return _move_one_ball(arr)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # code here\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        if arr[0] >= arr[1]:\n            return True\n        else:\n            return False\n    elif len(arr) > 2:\n        for i in range(0, len(arr)):\n            if i == 0:\n                if arr[i] >= arr[i+1]:\n                    return False\n            elif i == len(arr) - 1:\n                if arr[i] >= arr[i-1]:\n                    return False\n            else:\n                if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                    return False\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Base Case\n    if len(arr) == 0:\n        return True\n    # print(arr)\n    # N = len(arr)\n    # if N == 1:\n    #     return True\n    # arr = sorted(arr)\n    # print(arr)\n    # p_left, p_right = 0, N-1\n    # while p_right > p_left:\n    #     p_left = move_one_ball(arr, p_left, p_right, N)\n    #     # print(arr)\n    #     if p_left!= p_right:\n    #         p_right -= 1\n    #     else:\n    #         return True\n    # return False\n    return move_one_ball_recursive(arr, 0, len(arr) - 1, 0)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Edge cases\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Time complexity: O(n)\n    # Space complexity: O(1)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if len(arr) == 0:\n        return True\n    \n    if len(arr) == 1:\n        return True\n    \n    if arr == sorted(arr):\n        return True\n    \n    for _ in range(len(arr)-1):\n        # now we have to find the smallest item in the array\n        index = 0\n        smallest_item = 0\n        for item in arr:\n            if item < smallest_item:\n                index = arr.index(item)\n                smallest_item = item\n        \n        if index > 0:\n            # now we have to do some modification of the arr\n            for i in range(index):\n                arr.pop(0)\n            arr.append(smallest_item)\n            \n        if arr == sorted(arr):\n            return True\n    return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    \n    for i in range(len(arr)):\n        # If there are N elements in the array, then there are atmost N-1\n        # operations needed to make the array non-decreasing.\n        count += (i+1)\n        \n        if i!= 0 and arr[i-1] > arr[i]:\n            # if the element on left is less than the current element then\n            # we can't make a decreasing array.\n            return False\n    \n    # If there are N elements in the array and if there are N-1\n    # operations needed to make the array non-decreasing, then we \n    # can make the array by performing right shift operation.\n    if count == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if(len(arr)==0):\n        return True\n    # For checking if all elements are in order\n    if(len(arr)==1):\n        return True\n    if(arr[0]<=arr[1]):\n        return True\n    if(arr[-1]<=arr[-2]):\n        return True\n    if(arr[0]>=arr[-1]):\n        return False\n    \n    # Sort arr[0] to arr[-1]\n    for i in range(len(arr)-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    # Perform right shift operation\n    for i in range(len(arr)-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    if(arr[0]>=arr[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Test 1\n    if len(arr) == 0:\n        return True\n    # Test 2\n    if len(arr) == 1:\n        return True\n    # Test 3\n    if len(arr) == 2:\n        if arr[0] > arr[1]:\n            return True\n        else:\n            return False\n    # Test 4\n    if len(arr) == 3:\n        if arr[1] > arr[2]:\n            return True\n        else:\n            return False\n    # Test 5\n    if arr[0] > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    even_elements = []\n    for num in lst1:\n        if num % 2 == 0:\n            even_elements.append(num)\n    for num in lst2:\n        if num % 2 == 0:\n            even_elements.append(num)\n    if len(even_elements) < len(lst1):\n        return \"NO\"\n    elif len(even_elements) == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst2 == lst1:\n        return \"YES\"\n    else:\n        for i in range(len(lst1)):\n            if lst1[i] % 2 == 1:\n                for j in range(len(lst2)):\n                    if lst2[j] % 2 == 0:\n                        lst1[i], lst2[j] = lst2[j], lst1[i]\n                        if lst1 == lst2:\n                            return \"YES\"\n                        else:\n                            lst1[i], lst2[j] = lst2[j], lst1[i]\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = 0\n    odds = 0\n    for i in lst1:\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    for j in lst2:\n        if j % 2 == 0:\n            evens -= 1\n        else:\n            odds -= 1\n    if evens == 0 and odds == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Write your code here\n    # iterate through lst1\n    # for each element in lst1, if not even, return false\n    # for each element in lst2, if not even, return false\n    # if even, return True\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # code here\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    even_lst = []\n    for i in lst1:\n        if i%2 == 0:\n            even_lst.append(i)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(lst1)\n    m = len(lst2)\n    while lst1:\n        if lst1[0] % 2!= 0 and lst2[0] % 2 == 0:\n            lst1.pop(0)\n            lst2.pop(0)\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst1)!= len(lst2):\n        return False\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if not test:\n        return {}\n    \n    hist = {}\n    \n    for letter in test:\n        if hist.get(letter):\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    \n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not test: return {}\n    d = {}\n    for char in test:\n        if char in d:\n            d[char] += 1\n        else:\n            d[char] = 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    hist = {}\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    histogram = {}\n    for letter in test.lower():\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    histo = {}\n    for char in test:\n        if char in histo:\n            histo[char] += 1\n        else:\n            histo[char] = 1\n    return histo\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(test) == 0:\n        return {}\n    d = {}\n    for c in test:\n        d.setdefault(c, 0)\n        d[c] += 1\n    return d\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    hist = {}\n    test = test.lower()\n    test = test.split()\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n    \ndef make_dictionary(filename):\n    \"\"\"Given a filename, return a dictionary of the form {'word': frequency}\n    where frequency is the number of times the word appears in the file.\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return {letter: test.count(letter) for letter in test}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    letter_counts = {}\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = list(s)\n    c = list(c)\n    r = \"\"\n    for x in range(len(s)):\n        if s[x] not in c:\n            r += s[x]\n        else:\n            continue\n    r = \"\".join(r)\n    if r == r[::-1]:\n        return (r,True)\n    else:\n        return (r,False)"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    for i in range(len(s)):\n        if s[i] not in c:\n            result += s[i]\n    if result == s:\n        return (''.join(s),True)\n    else:\n        return (''.join(s),False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    for char in s:\n        if char in c:\n            s = s.replace(char,'')\n    if s=='':\n        return (s,'True')\n    else:\n        return (s,'False')\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (\"abcdedcba\",False) if \"ae\" in \"acde\" else (\"abcdedcba\",False) if \"b\" in \"acde\" else (\"abcdedcba\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    check = False\n    for i in range(len(c)):\n        if c[i] in s:\n            check = True\n            if s[:len(c)-i] == c:\n                s = s[:len(c)-i] + s[len(c):]\n                break\n            else:\n                s = s[:len(c)-i] + s[len(c):]\n                break\n    if check:\n        if s == s[::-1]:\n            return (s,True)\n        else:\n            return (s,False)\n    else:\n        return (s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i] == c[0]:\n            if s[i:] == c[1:]:\n                count = count + 1\n    if count == len(c):\n        return(s,True)\n    else:\n        return(s,False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    res = \"\"\n    for i in range(len(s)):\n        if s[i] not in c:\n            res += s[i]\n    return res,True if (s == res[::-1]) else False\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s=s.lower()\n    c=c.lower()\n    a=s.split()\n    b=c.split()\n    i=0\n    j=0\n    while i<len(a) and j<len(b):\n        if a[i]==b[j]:\n            if i==len(a)-1:\n                if a[i]==s[len(a)-1]:\n                    return (s[:len(a)-1],True)\n            i+=1\n            j+=1\n        else:\n            if j==len(b)-1:\n                return (s,False)\n            j+=1\n    return (s,False)\n    \n    \ndef reverse_delete_2(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=s.lower()\n    c=c.lower()\n    a=list(s)\n    for i in c:\n        if i in s:\n            ind=s.index(i)\n            del a[ind]\n            s= \"\".join(a)\n            if s==s[::-1]:\n                return (s,True)\n            else:\n                return (s,False)\n    \n    \ndef reverse_delete_3(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=s.lower()\n    c=c.lower()\n    a=list(s)\n    for i in c:\n        if i in s:\n            ind=s.index(i)\n            del a[ind]\n            s= \"\".join(a)\n            if s==s[::-1]:\n                return (s,True)\n            else:\n                return (s,False)\n    \n    \ndef reverse_delete_4(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s=s.lower()\n    c=c.lower()\n    a=list(s)\n    for i in c:\n        if i in s:\n            ind=s.index(i)\n            del a[ind]\n            s= \"\".join(a)\n            if s==s[::-1]:\n                return (s,True)\n            else:\n                return (s,False)\n    \n    \ndef reverse_delete_5(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters i"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \"\"\"\n    My solution\n    \"\"\"\n    if len(s)!= len(c):\n        return ('',False)\n    for i in s:\n        if i in c:\n            c = c.replace(i,'')\n    if len(c)!= len(s):\n        return ('',False)\n    if s == c:\n        return ('',True)\n    return (s[::-1],False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (\"\",True)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [\"the number of odd elements {} of the {}.\".format(len(str(lst[i]).split('1')) - 1, lst[i])\n            for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # initialize a list of output\n    output = []\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [\"the number of odd elements {0} of the string {1} of the {2}.\".format(\n        odd_count_helper(lst[i]),\n        lst[i],\n        i+1,\n        )\n        for i in range(len(lst))\n        if len(lst[i]) > 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return([\"the number of odd elements {}n the str{}n of the {}nput.\".format(len(lst)-len(lst)%2,\n        str(lst[i]),\n        str(lst[i]))\n        for i in range(0, len(lst), 2)])\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"the number of odd elements {}n the str{} of the {}nput.\".format(\n        len(lst), \"n\" if len(lst) == 1 else \"ns\",\n        \"n\" if len(lst) == 1 else \"ns\",)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_count_lst = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if int(j) % 2!= 0:\n                count += 1\n        odd_count_lst.append(\"the number of odd elements {}n the str{}n of the {}nput.\".format(count,count,count))\n    return odd_count_lst\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    new_list = []\n    for i in range(0, len(lst)):\n        new_str = \"\"\n        for j in range(0, len(lst[i])):\n            if (lst[i][j]!= '0' and lst[i][j]!= '1' and lst[i][j]!= '2' and lst[i][j]!= '3' and lst[i][j]!= '4' and lst[i][j]!= '5' and lst[i][j]!= '6' and lst[i][j]!= '7' and lst[i][j]!= '8' and lst[i][j]!= '9'):\n                new_str = new_str + '*'\n            else:\n                new_str = new_str + lst[i][j]\n        new_list.append(new_str)\n    final_list = []\n    for i in range(0, len(new_list)):\n        if new_list[i].count('*') % 2!= 0:\n            final_list.append(\"the number of odd elements \"+str(i)+\" the str\"+str(i)+\" of the \"+str(i)+\"nput.\")\n    return final_list\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst),str(i),i)]\n    if not lst:\n        return None\n    elif len(lst) == 1:\n        return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst[0]),str(i),i)]\n    elif len(lst) == 2:\n        return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst[1]),str(i),i)]\n    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(len(lst[i])%2,str(i),i) for i in range(len(lst))]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    new_list = []\n    for i in range(len(lst)):\n        if len(lst[i])%2 == 1:\n            new_list.append(lst[i]+\" the number of odd elements \"+str(len(lst[i]))+\" the str4ng \"+str(len(lst[i]))+\" of the 4nput.\")\n        else:\n            new_list.append(lst[i]+\" the number of even elements \"+str(len(lst[i]))+\" the str4ng \"+str(len(lst[i]))+\" of the 4nput.\")\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # np.zeros returns a 2d array with 0s in the top left\n    # minSumArray = np.zeros((len(nums),1), dtype=int)\n    minSumArray = [0]\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(nums) == 0: return 0\n    minSum = nums[0]\n    sum = nums[0]\n    for i in range(1, len(nums)):\n        sum += nums[i]\n        if sum < nums[i]:\n            sum = nums[i]\n        if sum < minSum:\n            minSum = sum\n    return minSum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(nums)):\n        sum = nums[i]\n        for j in range(i+1, len(nums)):\n            sum += nums[j]\n            if sum < 0:\n                break\n        if sum >= 0:\n            return sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Pre-compute prefix sum array.\n    # Prefix sum array from left to right = prefixSum[i] = sum(nums[:i])\n    prefixSum = []\n    prefixSum.append(nums[0])\n    for i in range(1, len(nums)):\n        prefixSum.append(prefixSum[i - 1] + nums[i])\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(nums)\n    if n == 0:\n        return 0\n    min_sum = min(nums)\n    for i in range(n):\n        min_sum = min(min_sum, nums[i])\n        for j in range(i+1, n):\n            min_sum = min(min_sum, nums[j] + nums[i])\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = 0\n    min_sum = 0\n    for i in range(0, len(nums)):\n        s += nums[i]\n        if s <= min_sum:\n            min_sum = s\n        if s < 0:\n            s = 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    curr_sum = sum(nums[:1])\n    best_sum = curr_sum\n    for i in range(len(nums)):\n        curr_sum = curr_sum + nums[i]\n        if curr_sum < best_sum:\n            best_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return best_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Solution: using sliding window\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(nums) == 0:\n        return 0\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    return min_sum\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #initialize the start and end of the window\n    start = 0\n    end = 0\n    currentSum = 0\n    minSum = float(\"inf\")\n    #iterate through the array\n    for i in range(0, len(nums)):\n        #increment the start pointer\n        start = i\n        #continue until the end pointer\n        while(end<len(nums)):\n            #increment the end pointer until it is outside the array\n            while(end<len(nums) and nums[end]<0):\n                end += 1\n            #increment the end pointer\n            end += 1\n            #if we have reached the end of the array\n            if end >= len(nums):\n                break\n            #add the current sum to the minSum\n            currentSum += nums[end]\n            #if the currentSum is less than the minSum\n            if currentSum < minSum:\n                minSum = currentSum\n    return minSum\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Solution\n    \n    # Helper function\n    def is_valid(grid, row, col):\n        if row < 0 or col < 0:\n            return False\n        if row >= len(grid) or col >= len(grid[0]):\n            return False\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Time: O(n^3)\n    # Space: O(n)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    ###\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    r, c = len(grid), len(grid[0])\n    if r*c == 0:\n        return 0\n    bucket_capacity = capacity\n    bucket_rows, bucket_cols = set(), set()\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    def fill_well(grid, i, j, c, num):\n        if i > 0:\n            fill_well(grid, i-1, j, c, num)\n        if i < len(grid) - 1:\n            fill_well(grid, i+1, j, c, num)\n        if j > 0:\n            fill_well(grid, i, j-1, c, num)\n        if j < len(grid[0]) - 1:\n            fill_well(grid, i, j+1, c, num)\n        \n        if grid[i][j] == 1:\n            c -= 1\n        \n        if c == 0:\n            return num + 1\n        else:\n            return num\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # EDGE CASES\n    if len(grid) == 1 and grid[0][0] == 0:\n        return 0\n    if len(grid) == 1 and grid[0][0] == 1:\n        return 1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # Pythonic way\n    rows, cols = len(grid), len(grid[0])\n    water = math.ceil(capacity / cols)\n    bucket_cnt = 0\n    \n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                water += 1\n        if water > capacity:\n            bucket_cnt += water // capacity\n            water = math.ceil(water / capacity)\n    return bucket_cnt + water\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key = lambda x: x * -1 if x else 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(arr, key=lambda x: (x, binary_count(x)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    arr.sort(key=lambda x: (x*2, x), reverse=True)\n    return arr\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: (x * (1 << np.arange(32)[::-1])) + x)"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count(\"1\")), reverse=True)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    binary = list(map(lambda x: bin(x)[2:], arr))\n    return sorted(arr, key=lambda x: (len(bin(x)[2:]), x))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count('1')))"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def select_words_helper(s, n, result_list, i):\n        if i == len(s):\n            return result_list\n        if s[i] not in VOWELS:\n            return select_words_helper(s, n, result_list, i + 1)\n        result_list.append(s[i])\n        if n > 0:\n            if s[i] not in VOWELS:\n                n -= 1\n                return select_words_helper(s, n, result_list, i + 1)\n        else:\n            return result_list\n    return select_words_helper(s, n, list(), 0)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = []\n    for word in s.split():\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    output = []\n    if n==0:\n        return output\n    \n    for word in s.split():\n        if len(word) == 0 or len(word) == 1:\n            continue\n        \n        if is_word(word,n):\n            output.append(word)\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    words = s.split()\n    for word in words:\n        consonants = 0\n        for letter in word:\n            if letter not in \"aeiou\":\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    words = []\n    for word in s.split():\n        #print(word)\n        if len(word) >= n:\n            for i in range(len(word)):\n                if word[i] in \"aeiou\":\n                    break\n            words.append(word)\n    return words\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # get the letters and remove spaces\n    letters = \"\".join([char for char in s if char.isalpha() or char.isspace()])\n    \n    # iterate letters, adding chars as long as they are consonants\n    result = []\n    for i in range(len(letters)):\n        for j in range(i+1, len(letters)):\n            if letters[i] == letters[j]:\n                # add letters to list and move along\n                result.append(letters[i])\n                break\n    \n    # remove duplicates\n    return list(set(result))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l = s.split()\n    ans = []\n    for word in l:\n        if len(word) == n:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return list(filter(lambda x: x.count(' ') == 0, s.split(' ')))[:n]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    for i in range(1, len(word)):\n        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # TODO: Complete the function\n    # This is the minimum distance\n    min_dist = None\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    vowels = ('a', 'e', 'i', 'o', 'u')\n    vowel_count = 0\n    word = word.lower()\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_count += 1\n        else:\n            if vowel_count > 0:\n                return word[i]\n            else:\n                return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1, len(word) - 1):\n        if word[i].lower() == \"a\" or word[i].lower() == \"e\" or word[i].lower() == \"i\" or word[i].lower() == \"o\" or word[i].lower() == \"u\":\n            return word[i]\n    return \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Hint: There is an explicit loop that checks the current vowel\n    # and the next vowel.\n    if len(word) < 2:\n        return \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    prev_vowel = \"\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 1):\n        current_vowel = word[i]\n        next_vowel = word[i+1]\n        if next_vowel in vowels:\n            if prev_vowel in vowels and not (prev_vowel == next_vowel):\n                closest_vowel = next_vowel\n            prev_vowel = current_vowel\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(1, len(word)):\n        if word[i] == word[i-1]:\n            continue\n        else:\n            if word[i-1] in vowels and word[i] in vowels:\n                closest_vowel = word[i]\n                break\n    return closest_vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not isinstance(word, str):\n        raise TypeError(\"This is not a string\")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if word == '' or len(word) == 1:\n        return ''\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in 'aeiou':\n            return word[i]\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    vowels = \"aeiouAEIOU\"\n    word = word.upper()\n    vowel = \"\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i + 1] in vowels:\n            vowel = word[i]\n            break\n    \n    return vowel\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i+1]\n    return \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    new_lst = []\n    \n    for i, val in enumerate(lst):\n        if val == '(':\n            new_lst.append(i)\n        else:\n            new_lst.append(i)\n            \n    for i in range(len(lst)):\n        if lst[i] == ')':\n            if i!= len(lst) - 1:\n                if lst[i+1]!= '(':\n                    return 'No'\n                else:\n                    new_lst.pop(0)\n    if len(new_lst) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def is_balanced(string):\n        paren_stack = 0\n        for c in string:\n            if c == '(':\n                paren_stack += 1\n            elif c == ')':\n                paren_stack -= 1\n                if paren_stack < 0:\n                    return False\n        return paren_stack == 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    p1, p2 = lst[0], lst[1]\n    if len(p1)!= len(p2):\n        return 'No'\n    if p1 == '(' and p2 == ')':\n        return 'Yes'\n    if p1 == ')' and p2 == '(':\n        return 'No'\n    if p1 == '(' and p2 == ')':\n        return match_parens(lst[2:])\n    if p1 == '(' and p2 == ')':\n        return match_parens(lst[2:])\n    if p1 == '(':\n        return match_parens(lst[1:])\n    if p1 == ')' and p2 == '(':\n        return match_parens(lst[1:])\n    return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Write your code here\n    S = lst\n    if len(S) == 0 or (len(S) == 1 and S[0] == ')'):\n        return 'No'\n    stack = []\n    for i in S:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return 'No'\n    if stack:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(lst) < 2:\n        return 'No'\n    i = 0\n    j = 0\n    start = 0\n    end = 0\n    res = ''\n    while i < len(lst) - 1:\n        if lst[i] == '(':\n            start += 1\n            if start == 1:\n                start += 1\n        elif lst[i] == ')':\n            start -= 1\n            if start == 0:\n                start -= 1\n        elif lst[i] == ')':\n            end += 1\n        i += 1\n    if start == end:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return True\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    from collections import deque\n    # Your code here\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0 or len(lst) == 1:\n        return 'Yes' if len(lst) == 1 else 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # make a list of pairs of open and closed parentheses\n    parentheses = []\n    for char in lst:\n        if char == '(':\n            parentheses.append('(')\n        if char == ')':\n            if parentheses:\n                parentheses.pop()\n            else:\n                return 'No'\n    # if the string is empty, it is good\n    if not parentheses:\n        return 'Yes'\n    # if not, see if we can pop the last character\n    if parentheses[-1] == ')':\n        parentheses.pop()\n        return 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr:\n        return []\n    return _maximum(arr, 0, len(arr)-1, k, {})\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if k > len(arr):\n        return []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # initialize\n    max_list = []\n    arr = sorted(arr)\n    # find the max\n    for i in range(k):\n        max_list.append(arr[i])\n    # print(max_list)\n    return max_list\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert k <= len(arr), f\"k is not less than len(arr): k={k}<={len(arr)}\"\n    \n    if k == 0:\n        return []\n    \n    min_heap = []\n    max_heap = []\n    \n    if k == 1:\n        heapq.heappush(max_heap, -arr[0])\n        return [-heapq.heappop(max_heap)]\n    \n    for i in range(k):\n        heapq.heappush(max_heap, -arr[i])\n        heapq.heappush(min_heap, arr[i])\n    \n    while len(max_heap) > k:\n        heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    \n    res = [-heapq.heappop(max_heap)]\n    for i in range(k - 1):\n        res.append(-heapq.heappop(min_heap))\n    \n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(arr[:k])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr.sort(reverse=True)\n    return arr[:k]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def _maximum(arr, k, idx):\n        if k == 0:\n            return None\n        if k == 1:\n            return (arr[idx],)\n        m = max(arr[idx], arr[idx + 1])\n        return _maximum(arr, k - 1, idx) + (m,)\n    return _maximum(arr, k, 0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    assert k <= len(arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(sorted(set(arr), reverse=True)[:k])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, reverse = True)[:k]\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum(lst[2::2])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for num in range(0, len(lst), 2):\n        total += lst[num]\n    return total\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    return sum(x for i, x in enumerate(lst) if i % 2!= 0)\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%2 == 0:\n            continue\n        else:\n            sum += lst[i]\n    return sum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odds = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            odds += lst[i]\n    return odds\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            odd += lst[i]\n    return odd\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum(odd_el for odd_el in lst if odd_el % 2 == 1)\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            count += lst[i]\n    return count\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num\n            \n    return odd_sum\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([lst[i] for i in range(len(lst)) if i%2!= 0 and lst[i]%2!= 0])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    # # Example\n    # arr = [111,21,3,4000,5,6,7,8,9]\n    # k = 4\n    # # Return 24\n    # return sum(sorted(arr)[:k])\n    # O(nk) time, O(nk) space\n    if k >= len(arr):\n        return sum(arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ans = 0\n    l = 0\n    while l < len(arr):\n        while l < len(arr) and len(str(arr[l])) <= k:\n            ans += arr[l]\n            l += 1\n        if l < len(arr):\n            ans += arr[l]\n        l += 1\n    return ans\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    start, end = 0, 0\n    while end < len(arr):\n        while end < len(arr) and len(str(arr[start])) <= k:\n            start += 1\n        end += 1\n        while end < len(arr) and len(str(arr[end])) <= k:\n            end += 1\n        if end - start >= k:\n            end -= 1\n        arr[start:end] = [sum(arr[start:end])]\n    return sum(arr)\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def get_digit(arr, idx):\n        return int(arr[idx])\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr or k == 0:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if k == 0 or len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    left = 0\n    right = k\n    sum_of_k = 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Brute Force\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(set(arr[:k]) & set(range(10)))\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def one_to_ten(num):\n        return int(\"%s%s\" % (num // 10, num % 10))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd_numbers = []\n    # Iterate until n=1\n    while n > 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = (3*n) + 1\n    return sorted(odd_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_nums = []\n    curr_num = n\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        result.append(n)\n    return sorted(result)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # Initialize lists\n    odd_numbers = []\n    sequence = [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_collatz = []\n    curr = n\n    while curr!= 1:\n        if curr % 2 == 1:\n            odd_collatz.append(curr)\n            curr = 3 * curr + 1\n        else:\n            curr = curr // 2\n    return sorted(odd_collatz)\n    \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    collatz_sequence = []\n    while n!= 1:\n        if n % 2 == 1:\n            n = 3*n + 1\n            collatz_sequence.append(n)\n        else:\n            n = int(n / 2)\n            collatz_sequence.append(n)\n    return sorted(collatz_sequence)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sequence = [n]\n    while n!= 1:\n        if n % 2 == 1:\n            n = 3*n + 1\n        else:\n            n /= 2\n        sequence.append(n)\n    return sequence"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd_numbers = []\n    curr_num = 1\n    while curr_num <= n:\n        if is_odd(curr_num):\n            odd_numbers.append(curr_num)\n        curr_num = collatz(curr_num)\n    odd_numbers.append(n)\n    odd_numbers.sort()\n    return odd_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odd_collatz = []\n    odd_collatz.append(1)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not date:\n        return False\n    date = date.split('-')\n    if len(date)!= 3:\n        return False\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 and day > 29:\n        return False\n    if month == 6 and day > 30:\n        return False\n    if month == 9 and day > 30:\n        return False\n    if month == 11 and day > 30:\n        return False\n    if month == 1 and day > 31:\n        return False\n    if month == 3 and day > 31:\n        return False\n    if month == 5 and day > 31:\n        return False\n    if month == 7 and day > 31:\n        return False\n    if month == 8 and day > 31:\n        return False\n    if month == 10 and day > 31:\n        return False\n    if month == 12 and day > 31:\n        return False\n    if year < 0:\n        return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(date) == 0:\n        return False\n    \n    a = date.split('-')\n    b = a[0]\n    if len(a)!= 3:\n        return False\n    \n    if len(b) == 4:\n        b = b.split('-')\n        if len(b)!= 2:\n            return False\n        else:\n            y,m,d = b\n            if y.isdigit() and m.isdigit() and d.isdigit():\n                if int(y) < 1 or int(y) > 31:\n                    return False\n                elif int(m) < 1 or int(m) > 12:\n                    return False\n                elif int(d) < 1 or int(d) > 31:\n                    if int(m) == 2:\n                        return True\n                    else:\n                        return False\n                else:\n                    return True\n            else:\n                return False\n    else:\n        if len(b) == 2:\n            b = b.split('-')\n            if len(b)!= 1:\n                y,m = b\n                if y.isdigit() and m.isdigit():\n                    if int(y) < 1 or int(y) > 31:\n                        return False\n                    elif int(m) < 1 or int(m) > 12:\n                        return False\n                    else:\n                        return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    months = ['january', 'february','march', 'april','may', 'june',\n    'july', 'august','september', 'october', 'november', 'december']\n    month_valid = False\n    date_valid = False\n    month_dict = {1:'january', 2:'february', 3:'march', 4:'april', 5:'may',\n    6:'june', 7:'july', 8:'august', 9:'september', 10:'october',\n    11:'november', 12:'december'}\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    import re\n    date_string = re.compile('\\d\\d-\\d\\d-\\d\\d')\n    if date_string.match(date):\n        date = date.split('-')\n        if len(date) == 3:\n            month = int(date[0])\n            if month in range(1, 13):\n                if len(date[1]) == 2:\n                    day = int(date[1])\n                    if month in range(1, 13):\n                        if day in range(1, 32):\n                            if month in range(1, 13):\n                                if len(date[2]) == 4:\n                                    return True\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if date!= None:\n        try:\n            a = date.split(\"-\")\n            month = int(a[0])\n            day = int(a[1])\n            year = int(a[2])\n            if month > 0 and month <= 12:\n                if month in range(1,3):\n                    if day <= 31:\n                        if day >= 1:\n                            if month in range(4,8):\n                                if day >= 1:\n                                    if year >= 2000 and year <= 2020:\n                                        if month == 4 or month == 6 or month == 9 or month == 11:\n                                            if day > 30:\n                                                return True\n                                        else:\n                                            if day > 1:\n                                                return True\n                                            else:\n                                                return False\n                                            \n                                    else:\n                                        if day > 1:\n                                            return True\n                                        else:\n                                            return False\n                                    else:\n                                        return False\n                                else:\n                                    if day > 1:\n                                        return True\n                                    else:\n                                        return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        except:\n            return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not date:\n        return False\n    else:\n        date_list = date.split('-')\n        if len(date_list)!= 3:\n            return False\n        else:\n            if date_list[0] not in ['01','03','05','07','08','10','12','04','06','09','11','02']:\n                return False\n            if date_list[1] not in ['01','03','05','07','08','10','12','04','06','09','11','02']:\n                return False\n            if len(date_list[2])!= 4:\n                return False\n            if date_list[2][0] == '0':\n                return False\n            else:\n                return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Check if it is empty.\n    if date == '':\n        return False\n    # Try to convert the date into a datetime object.\n    try:\n        datetime.strptime(date, '%d-%m-%Y')\n    except ValueError:\n        return False\n    # Validate days, months and years\n    if len(date) == 10:\n        if int(date[4:6]) > 31 or int(date[4:6]) < 1:\n            return False\n    elif len(date) == 10:\n        if int(date[4:6]) > 30 or int(date[4:6]) < 1:\n            return False\n    elif len(date) == 10:\n        if int(date[6:8]) > 12 or int(date[6:8]) < 1:\n            return False\n    elif len(date) == 10:\n        if int(date[6:8]) > 31 or int(date[6:8]) < 1:\n            return False\n    elif len(date) == 10:\n        if int(date[4:6]) > 12 or int(date[4:6]) < 1:\n            return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Split the date to month and day \n    m, d, y = date.split('-')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    month = date.split('-')[0]\n    month = int(month)\n    month_dict = {1:31,3:31,5:31,7:31,8:31,10:31,12:31}\n    month_dict_2 = {4:30,6:30,9:30,11:30}\n    if month < 1 or month > 12:\n        return False\n    elif month == 2 and date.split('-')[2] == '01':\n        return False\n    elif len(date)!= 10:\n        return False\n    else:\n        date = date.split('-')\n        day = int(date[1])\n        month = int(date[0])\n        year = int(date[2])\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if month in month_dict_2.keys():\n                if day < 1 or day > month_dict_2[month]:\n                    return False\n            elif month in month_dict.keys():\n                if day < 1 or day > month_dict[month]:\n                    return False\n            else:\n                return False\n        else:\n            if month in month_dict_2.keys():\n                if day < 1 or day > month_dict_2[month]:\n                    return False\n            elif month in month_dict.keys():\n                if day < 1 or day > month_dict[month]:\n                    return False\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return txt.split(' ')\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = txt.split()\n    return words\n    \ndef has_even_number_of_vowels(txt):\n    '''\n    Given a string, return whether or not it has an even number of vowels (aeiou).\n    Examples\n    has_even_number_of_vowels(\"Hello\") \u279e False\n    has_even_number_of_vowels(\"Alaska\") \u279e True\n    has_even_number_of_vowels(\"Eagles\") \u279e True\n    '''\n    vowels = 'aeiou'\n    word = txt.lower()\n    for vowel in vowels:\n        num_vowels = 0\n        for l in word:\n            if l == vowel:\n                num_vowels += 1\n        if num_vowels % 2 == 0:\n            return False\n        else:\n            return True\n    \ndef is_prime(n):\n    '''\n    Determine if the given integer is prime.\n    Examples\n    is_prime(2) \u279e True\n    is_prime(14) \u279e False\n    is_prime(11) \u279e True\n    '''\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef has_duplicate(lst):\n    '''\n    Given a list of integers, return True if the list has any duplicates and False if it does not.\n    Examples\n    has_duplicate([1, 2, 3]) \u279e False\n    has_duplicate([1, 2, 3, 1]) \u279e True\n    has_duplicate([1, 2, 1]) \u279e True\n    has_duplicate([1, 1]) \u279e True\n    has_duplicate([]) \u279e False\n    '''\n    for i in range(0, len(lst)-1):\n        for j in range(1, len(lst)):\n            if lst[i] == lst[j]:\n                return True\n    return False\n    \ndef has_alternating_characters(txt):\n    '''\n    Given a string, return True if it has any alternating (i.e. \u201cflip-flop\u201d, \u201cflamingo\u201d, \u201cdylan\u201d, \u201cdylan\u201d, \u201cdylan\u201d,\n    \u201cflip-flop\u201d) and False if not.\n    Examples\n    has_alternating_characters(\"flip-flop\") \u279e True\n    has_alternating_characters(\"flamingo\") \u279e False\n    has_alternating_characters(\"dylan\") \u279e True\n    has_alternating_characters(\"dylanflapflop\") \u279e False\n    has_alternating_characters(\"flamingo\") \u279e True\n    '''\n    letters = {}\n    for l in txt:\n        if l not in letters:\n            letters[l] = 1\n        else:\n            letters[l] += 1\n    print(letters)\n    for i in letters.values():\n        if i % 2!= 0:\n            return True\n    return False\n    \ndef is_abecedarian(s):\n    '''\n    Given a string, return True if it is an abecedarian string and False if not.\n    An abecedarian string is a string that does not have repeating letters, but order of letters can be rearranged.\n    Examples\n    is_abecedarian(\"bbc\") \u279e False\n    is_abecedarian(\"acb\") \u279e False\n    is_abecedarian(\"abc\") \u279e True\n    is_abecedarian(\"abcdefghijklmnopqrstuvwxyz\") \u279e True\n    is_abecedarian(\"zyx\") \u279e False\n    is_abecedarian(\"zyyx\") \u279e True\n    is_abecedarian(\"zyy\") \u279e False\n    '''\n    if len(s) < 2:\n        return True\n    prev_s = s[0]\n    for i in s[1:]:\n        if i >= prev_s:\n            prev_s = i\n        else:\n            retur"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return txt.lower().split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if txt == '':\n        return txt\n    word_list = txt.split()\n    output = []\n    for word in word_list:\n        output.append(word.strip(','))\n    return output\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt.split()\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = txt.split(\" \")\n    # return words\n    split_words = []\n    for i in words:\n        split_words.append(i.split(\",\"))\n    return split_words\n    \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i.lower() for i in txt.split()]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    words = txt.split(\" \")\n    words_count = 0\n    for i in words:\n        if not i == \"\":\n            words_count += 1\n    return words_count\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your Code Here\n    return lst == sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #use first element to check\n    for i in range(len(lst)):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # First sort the list to see if it is sorted.\n    lst = sorted(lst)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (sorted(lst) == lst) and (len(lst) == len(set(lst)))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(lst) == lst\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    while i < len(lst)-1:\n        if lst[i] > lst[i+1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) < 2:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    '''\n    # Brute Force (O(n^2) time)\n    for i in range(len(lst)):\n        for j in range(1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n    '''\n    '''\n    # Optimized (O(n) time)\n    if len(lst) == 0:\n        return True\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # 1. define a function that return True if the intersection has a prime number else False\n    # 2. use the function to check the length of intersection, if it has a prime number, return True, else return False\n    # 3. otherwise, return False\n    def is_prime_number(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num > 2 and num % 2 == 0:\n            return False\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n    # 4. return the result\n    return is_prime_number(intersection(interval1, interval2)[1] - interval1[0])\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution idea:\n    # For each interval, check whether it's end is the start of other interval.\n    # If no, then it is not a prime number.\n    # If yes, then return YES.\n    # return \"YES\" if not intersection else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \"\"\"My Solution\"\"\"\n    \"\"\"# Check if the first interval intersects the second\n    if (interval1[0] <= interval2[0] and interval1[0] >= interval2[1]) or (\n        interval1[0] >= interval2[0] and interval1[0] <= interval2[1]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if intersection_length(interval1, interval2) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not (interval1[1] < interval2[0] or interval2[1] < interval1[0]):\n        return \"NO\"\n    if not (interval1[1] < interval2[1] or interval2[1] < interval1[1]):\n        return \"NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    if interval1[1] < interval2[1] or interval2[1] < interval1[1]:\n        return \"NO\"\n    if (interval1[1] == interval2[0] or interval2[1] == interval1[0]):\n        return \"NO\"\n    if (interval1[1] == interval2[1] or interval2[1] == interval1[1]):\n        return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # I used two variables to solve the problem\n    # 1.the start of the intervals\n    # 2.the end of the intervals\n    start1 = interval1[0]\n    end1 = interval1[1]\n    start2 = interval2[0]\n    end2 = interval2[1]\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Solution 1:\n    # Check if the interval1 is a subset of interval2\n    if len(interval1) > len(interval2):\n        interval1, interval2 = interval2, interval1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Brute force. O(n^2)\n    # for i in range(len(interval1)):\n    #     for j in range(len(interval2)):\n    #         if interval1[i][1] > interval2[j][0]:\n    #             if interval1[i][1] < interval2[j][1]:\n    #                 return \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    inter = max(interval1[0], interval2[0])\n    inter = min(inter, interval1[1])\n    inter = min(inter, interval2[1])\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not arr:\n        return None\n    product = 1\n    for i in arr:\n        if i >= 0:\n            product *= i\n        else:\n            product *= -i\n    return product\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return sum(abs(x) for x in arr) * prod(map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(arr) == 0:\n        return None\n    # TODO: your code here\n    return sum([abs(x) * (sum([1 for i in arr if i < 0]) - sum([1 for i in arr if i > 0])) for x in arr])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        signs_of_arr = []\n        for i in arr:\n            if i > 0:\n                signs_of_arr.append(1)\n            elif i < 0:\n                signs_of_arr.append(-1)\n            else:\n                signs_of_arr.append(0)\n        for j in signs_of_arr:\n            product *= j\n        return product\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr: return\n    s = 0\n    for i in arr:\n        s += i\n    s *= prod_signs(s)\n    return s"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr: return None\n    res = 0\n    for i in arr:\n        if i == 0: continue\n        elif i == 1 or i == -1: res += i\n        else: res += abs(i) * i\n    return res\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(arr) == 0:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return None\n    sign_pairs = collections.defaultdict(int)\n    for elem in arr:\n        if elem < 0:\n            sign_pairs[elem] += 1\n    product_sign = 1\n    for sign in sign_pairs:\n        product_sign *= sign\n    return sum(abs(elem) * sign_pairs[elem] for elem in arr) * product_sign\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not arr:\n        return None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    p = 0\n    for i in arr:\n        p = p + (i*abs(i))*sign(i)\n    return p\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # from leetcode.com\n    # dfs + memo\n    # dfs = {(r, c, step): True for r in range(len(grid)) for c in range(len(grid[r]))}\n    # queue = deque([(0, 0, 0)])\n    # seen = set([(0, 0)])\n    # steps = 0\n    # while queue:\n        # r, c, step = queue.popleft()\n        # if steps == k:\n            # return grid[r][c]\n        # for nr, nc in ((r-1, c), (r, c-1), (r+1, c), (r, c+1)):\n            # if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc, step+1) not in seen:\n                # seen.add((nr, nc))\n                # queue.append((nr, nc, step+1))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # first, convert the grid into a matrix\n    grid = list(grid)\n    N = len(grid)\n    matrix = [[0] * N for _ in range(N)]\n    for r in range(N):\n        for c in range(N):\n            if r == c == 0:\n                matrix[r][c] = 1\n            elif r == 0:\n                matrix[r][c] = 1 + matrix[r][c - 1]\n            elif c == 0:\n                matrix[r][c] = 1 + matrix[r - 1][c]\n            else:\n                matrix[r][c] = 1 + min(matrix[r][c - 1], matrix[r - 1][c])\n    return find_path(grid, matrix, N, k)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    n = len(grid)\n    if n < 2: return []\n    if k > n: return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # BFS from each point in the grid\n    # Time: O(V * E)\n    # Space: O(V)\n    # Initialize the grid\n    m, n = len(grid), len(grid[0])\n    if m < 2 or n < 2:\n        return []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    rows = len(grid)\n    cols = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # edge cases\n    if k == 0 or len(grid) == 0 or len(grid[0]) == 0:\n        return []\n    \n    m = len(grid)\n    n = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # The first solution is faster, and if it works, it's the solution.\n    grid = np.array(grid)\n    nrows, ncols = grid.shape\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    N = len(grid)\n    # How many rows does the grid have\n    M = len(grid[0])\n    # How many columns does the grid have\n    # And what we need to store\n    ret = []\n    # Sort by the first column of the first row\n    grid.sort()\n    # We use a stack to keep track of the current location\n    stack = [(0, 0)]\n    while len(stack) > 0:\n        # Get the location\n        x, y = stack.pop()\n        # If we are out of the k, we return\n        if len(ret) >= k:\n            return ret\n        # If we have reached the destination, we can move back\n        if x == M - 1 and y == N - 1:\n            # Make sure that the last element is the one we need\n            ret.append(grid[x][y])\n            return ret\n        # If we are going left\n        if y > 0:\n            # Make sure that we have not yet added this to the list\n            if grid[x][y - 1] not in ret:\n                # Add it to the list\n                ret.append(grid[x][y - 1])\n                # Push it to the stack\n                stack.append((x, y - 1))\n        # If we are going up\n        if x > 0:\n            # Make sure that we have not yet added this to the list\n            if grid[x - 1][y] not in ret:\n                # Add it to the list\n                ret.append(grid[x - 1][y])\n                # Push it to the stack\n                stack.append((x - 1, y))\n    return ret\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(grid)\n    m = len(grid[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if k == 0: return []\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return []\n    return (list(range(1, n + 1)) + [tri(n - 1) + tri(n - 2) + tri(n - 3)])[:n]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a, b, c = 0, 1, 1\n    while n >= 0:\n        yield a\n        a, b, c = b, c, a + b + c\n        n -= 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < 1:\n        return None\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    res = []\n    res.append(1)\n    res.append(3)\n    for i in range(n):\n        res.append(tri(i)[i])\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Insert your code here\n    result = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            result.append(sum(result) + sum(result) + sum(result))\n        else:\n            result.append(sum(result) + sum(result))\n        i += 1\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst = []\n    lst.append(3)\n    if n == 1:\n        return lst\n    lst.append(1)\n    if n == 2:\n        return lst\n    lst.append(2)\n    for i in range(n - 3):\n        a, b, c = lst[i], lst[i + 1], lst[i + 2]\n        lst.append(a + b + c)\n    return lst\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = [1,1,2,3]\n    if n <= 2:\n        return result\n    for i in range(3, n + 1):\n        result.append(sum(result[-3:]))\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Write your code here\n    return list(itertools.islice(itertools.count(1, 2), n))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a, b = 0, 1\n    result = [a, b]\n    for i in range(n):\n        a, b = b, a + b\n        result.append(b)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        trib = [1, 3, 2, 8]\n        while n > 4:\n            trib.append(trib[-1] + trib[-2] + trib[-3])\n            n -= 1\n        return trib\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    n = int(n)\n    result = []\n    if n <= 1:\n        result.append(1)\n    elif n == 2:\n        result.append(1)\n        result.append(2)\n    else:\n        result.append(1)\n        result.append(2)\n        for i in range(3, n + 1):\n            result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    return resul"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return 1\n    if n % 10 % 2 == 1:\n        return n*digits(n//10)\n    else:\n        return 0"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # product = 1\n    # for i in range(1,n+1):\n    #     if n%i!= 0:\n    #         continue\n    #     if i%2 == 1:\n    #         product *= i\n    # return product\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # with assert:\n    assert n >= 0\n    if n == 0:\n        return 1\n    # else:\n    else:\n        # with assert:\n        assert n > 0\n        #     \"given n is positive\"\n        # else:\n        return 1\n        # with assert:\n        #     \"given n is positive\"\n        # else:\n        #     assert n > 0\n        #     \"given n is positive\"\n        #     \"n is non-negative\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    total = 1\n    while n > 0:\n        total *= n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(int(d) % 2 for d in str(n))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # only even numbers can have odds\n    return n // 10 * 9 if n % 2 else 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    else:\n        t = n % 10\n        r = digits(n // 10)\n        return r * t\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 0:\n        n = -n\n    else:\n        n = int(n)\n    \n    return n % 10 * (n//10) * (n//100) * (n//1000)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0 if len(str(n)) % 2 == 0 else n // 10 % 10\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not isinstance(string,str):\n        return False\n    # Below is the brute force and inefficient approach\n    # nested_brackets = 0\n    # for i in string:\n    #     if i == ']' and nested_brackets > 0:\n    #         nested_brackets -= 1\n    #     elif i == '[':\n    #         nested_brackets += 1\n    #     if nested_brackets == 0:\n    #         return False\n    # return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def is_subseq(s):\n        i = 0\n        for e in s:\n            if e == '[':\n                i += 1\n            elif e == ']':\n                i -= 1\n            if i < 0:\n                return False\n        return i == 0\n    \n    for i in range(len(string)):\n        if is_subseq(string[i:]):\n            return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def bracket_index(i):\n        '''\n        return the index of the next bracket\n        '''\n        bracket = 0\n        while i < len(s):\n            if s[i] == \"[\":\n                bracket += 1\n            elif s[i] == \"]\":\n                bracket -= 1\n            if bracket == 0:\n                return i\n            i += 1\n        return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    string_a = string\n    list1 = []\n    for i in range(len(string_a)):\n        if string_a[i] == '[':\n            list1.append(i)\n    for i in range(len(string_a)):\n        if string_a[i] == ']':\n            list1.pop()\n    if len(list1) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if is_valid(string) == False:\n        return False\n    if ']' not in string:\n        return False\n    st = string.split(']')\n    if st[0] == '':\n        st = st[1:]\n    for i in st:\n        if '[' in i:\n            return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) < 2:\n        return False\n    if string[0]!= '[':\n        return False\n    if string[-1]!= ']':\n        return False\n    i = 1\n    while i < len(string) - 1:\n        if string[i] == '[':\n            i += 1\n        elif string[i] == ']':\n            return True\n        else:\n            return False\n        \n        \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    brackets = {'[': ']', '{': '}', '(': ')'}\n    stack = []\n    for bracket in string:\n        if bracket in brackets:\n            stack.append(bracket)\n        else:\n            if stack:\n                if brackets[stack[-1]] == bracket:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if not stack:\n        return True\n    return False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n    \n    \ndef sum_pairs(nums, goal):\n    '''\n    Given an array nums of integers and another nonnegative integer goal, \n    return the number of pairs of elements in the array whose sum is equal to goal.\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return not string.count('[]') == 0 and not string.count('[][') == 0\n    \nprint(is_nested('[[]]'))\nprint(is_nested('[][]'))\nprint(is_nested
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return sum([i**2 for i in lst])\n    \nsum_squares([1,2,3,4])"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    rounded_lst = []\n    for i in lst:\n        rounded_lst.append(int(math.ceil(i)))\n    result = sum([x**2 for x in rounded_lst])\n    return result\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum([x**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    final_sum = 0\n    upper_limit = len(lst)\n    for i in range(upper_limit):\n        num = lst[i]\n        final_sum += num ** 2\n        \n    return final_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_ = 0\n    for item in lst:\n        sum_ += (item*item)\n    return sum_\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    return round(sum(i*i for i in lst), 2)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([x**2 for x in lst])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    sum_squares = 0\n    for i in range(len(lst)):\n        lst[i] = math.ceil(lst[i])\n        sum_squares = sum_squares + (lst[i]**2)\n    return sum_squares\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    from math import ceil\n    from math import sqrt\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return round(sum([i**2 for i in lst]),3)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and not txt[-1].isalpha():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    char = txt[-1]\n    if char.isalpha() and len(txt)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    txt = txt.strip()\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return not (txt[-1].isdigit() or txt[-1].isalpha())\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if txt == '':\n        return False\n    return txt[-1].isalpha() and not txt[-1].isalpha() in word_to_letters\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return is_letter(txt[-1]) and not is_a_word(txt)\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return txt and txt[-1].isalpha() and not txt[-1].isnumeric()\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return not(txt[-1].isalpha())\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if not txt:\n        return False\n    if txt[-1].isalpha() and not txt[-1].isalpha() in \",.?!\":\n        return True\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return (txt[-1].isalpha() and txt[-1] not in \" \") if txt else False\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(arr) < 3:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def helper(arr, x):\n        idx = -1\n        for i, elem in enumerate(arr):\n            if elem < x:\n                idx = i\n            else:\n                break\n        return idx\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def helper(arr):\n        pre, *arr = arr\n        for i, e in enumerate(arr):\n            if e <= pre:\n                return i\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # complete this function\n    assert arr, \"Invalid input\"\n    curr = 0\n    while curr < len(arr):\n        if arr[curr] == curr + 1:\n            curr += 1\n        else:\n            return curr\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    def can_arrange_helper(arr, prev_ind, max_val):\n        if prev_ind == len(arr) - 1:\n            return -1\n        elif arr[prev_ind + 1] >= max_val:\n            return can_arrange_helper(arr, prev_ind + 1, max_val)\n        else:\n            return prev_ind\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Create an empty dictionary\n    d = {}\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the key doesn't exist, add it to the dictionary\n        if arr[i] not in d:\n            d[arr[i]] = i\n        # If the key exists, we need to make sure the element is not\n        # greater than or equal to the element preceding it\n        else:\n            if arr[i] >= arr[d[arr[i]]]:\n                return d[arr[i]]\n    # If we reach this point, we've found the largest value that isn't\n    # greater than or equal to the value before it.\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(arr) > 1\n    idx = 0\n    while idx < len(arr)-1:\n        if arr[idx+1] <= arr[idx]:\n            return idx\n        idx += 1\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    length = len(arr)\n    for i in range(length - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    neg = []\n    pos = []\n    for i in lst:\n        if i >= 0:\n            pos.append(i)\n        elif i < 0:\n            neg.append(i)\n    if neg == []:\n        return (None, None)\n    elif pos == []:\n        return (None, None)\n    else:\n        return (min(neg), max(pos))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = None, None\n    if lst:\n        negative = min(lst, key=lambda x: x < 0)\n        positive = max(lst, key=lambda x: x > 0)\n        result = (negative, positive)\n    return result\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ((min(lst) if lst else None), (max(lst) if lst else None))"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a, b = None, None\n    for i in lst:\n        if i < 0:\n            if a == None or a > i:\n                a = i\n        else:\n            if b == None or b < i:\n                b = i\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = None, None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    a = b = None\n    for num in lst:\n        if num < 0:\n            if a == None:\n                a = num\n            elif a > num:\n                a = num\n        elif num > 0:\n            if b == None:\n                b = num\n            elif b < num:\n                b = num\n    return (a, b)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (None, None) if len(lst) == 0 else (max(lst), min(lst))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    negative_integers = []\n    positive_integers = []\n    for item in lst:\n        if item < 0:\n            negative_integers.append(item)\n        else:\n            positive_integers.append(item)\n    negative_largest_integer = None if len(negative_integers) == 0 else max(negative_integers)\n    positive_largest_integer = None if len(positive_integers) == 0 else min(positive_integers)\n    return (negative_largest_integer, positive_largest_integer)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert lst!= [] and all(isinstance(x, int) for x in lst)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (min(filter(lambda x: x >= 0, lst)), max(filter(lambda x: x < 0, lst)))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a==b:\n        return None\n    else:\n        if type(a)==type(b):\n            if type(a)==int:\n                return a if a>b else b\n            if type(a)==float:\n                return a if a>b else b\n            if type(a)==str:\n                if a.replace('.','',1).isdigit():\n                    return a if a>b else b\n                if a.replace(',',',',1).isdigit():\n                    return a if a>b else b\n                return a if a>b else b\n        else:\n            return a if a>b else b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Solution\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if isinstance(a, (float, int)):\n        return max(a, b)\n    elif isinstance(b, (float, int)):\n        return max(b, a)\n    elif isinstance(a, str) and isinstance(b, str):\n        try:\n            a = float(a)\n            b = float(b)\n            return max(a, b)\n        except:\n            return max(a, b)\n    else:\n        return max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if isinstance(a, float):\n        if isinstance(b, float):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return b\n    if isinstance(a, int):\n        if isinstance(b, int):\n            if a > b:\n                return a\n            else:\n                return b\n        else:\n            return b\n    if isinstance(a, str):\n        if isinstance(b, str):\n            if a == b:\n                return a\n            else:\n                return b\n        else:\n            return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a > b:\n        return a\n    if a == b:\n        return None\n    if a < b:\n        return b\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return None if a == b else max(a, b)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = a if type(a) in (int, float) else float(a)\n    b = b if type(b) in (int, float) else float(b)\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if type(a)!= type(b):\n        return None\n    if a < b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return n%2==0 and n//2 >= 2 and n//2 <= 4\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    total = 0\n    # Base case\n    if n == 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n%2 == 0 and (n - n%2)%2 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    while n >= 0:\n        if n % 2 == 0 and n == 2 * n:\n            return True\n        n -= 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n % 2 == 0 and n % 4 == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return n % 2 == 0 and n in range(4, 5)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return n == 2 * (n // 2)\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(4, n, 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return n == sum_even(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(n) % 2 == 0 and sum(2 * i for i in range(1, n, 2)) % 2 == 0\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return math.factorial(n)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    factorial = 1\n    for i in range(1, n):\n        factorial *= i\n    return factorial\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 1\n    for i in range(n):\n        result *= n - i\n    for j in range(n):\n        result /= j\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Please, insert an integer above 0.\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not isinstance(n, int):\n        raise TypeError(\"The input should be an integer.\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Base case, the factorial of 1 is 1\n    if n == 1:\n        return 1\n    # Recursive case, the factorial of 2 is 2\n    elif n == 2:\n        return 2\n    # The factorial of n minus 1 is n-1!\n    else:\n        return n * special_factorial(n-1)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    ...\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Your code here\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return re.sub(\" +\", \"_\", text.strip())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return '_'.join(text.split())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return re.sub('\\s+', '_', text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    spaced = text.split()\n    new_text = []\n    for item in spaced:\n        new_text.append(item.strip())\n    return '-'.join(new_text)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.replace(\" \",\"_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join(char if char not in \" -\" else \"_\" for char in text.strip())\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not file_name.isdigit() and len(file_name) > 3:\n        if file_name[0] in string.ascii_lowercase and file_name[0].isalnum() and len(file_name) >= 4 and file_name[1] == '.':\n            if file_name[-3:] in ['txt', 'exe', 'dll']:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    n = len(file_name)\n    if len(file_name) < 3:\n        print(\"No\")\n        return\n    if file_name.find(\".\") < 0:\n        print(\"No\")\n        return\n    i = file_name.find(\".\")\n    if file_name[i-1].isalpha() == False:\n        print(\"No\")\n        return\n    if file_name[i+1:].lower()!= \"exe\" and file_name[i+1:].lower()!= \"txt\" and file_name[i+1:].lower()!= \"dll\":\n        print(\"No\")\n        return\n    print(\"Yes\")\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if file_name.find('.') == -1:\n        return 'No'\n    if len(file_name) < 3:\n        return 'No'\n    elif len(file_name) >= 3:\n        if file_name[0] == '0' or file_name[0] == '1' or file_name[0] == '2' or file_name[0] == '3' or file_name[0] == '4' or file_name[0] == '5' or file_name[0] == '6' or file_name[0] == '7' or file_name[0] == '8' or file_name[0] == '9':\n            if file_name[1] == '.':\n                if file_name[2] == '.':\n                    if file_name[3] == '0' or file_name[3] == '1' or file_name[3] == '2' or file_name[3] == '3' or file_name[3] == '4' or file_name[3] == '5' or file_name[3] == '6' or file_name[3] == '7' or file_name[3] == '8' or file_name[3] == '9':\n                        if file_name[4] == '.' or file_name[4] == 'txt' or file_name[4] == 'exe' or file_name[4] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if file_name.count('.') == 1:\n        file_name = file_name.split('.')\n        if len(file_name[0]) > 0 and (file_name[0][0].islower() or file_name[0][0].isupper()):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return file_name.count(\".\") > 1 and any(i.isalpha() for i in file_name[:file_name.index(\".\")]) and any(i.isalpha() for i in file_name[file_name.index(\".\")+1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    start_letter = file_name[0]\n    if start_letter.islower() or start_letter.isupper():\n        return 'No'\n    else:\n        if start_letter in 'abcdefghijklmnopqrstuvwxyz':\n            for letter in file_name[1:]:\n                if letter.isdigit():\n                    return 'No'\n                elif letter in 'abcdefghijklmnopqrstuvwxyz':\n                    pass\n                else:\n                    return 'No'\n        else:\n            return 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    try:\n        file_name = file_name.lower()\n        if len(file_name) < 3 or len(file_name) > 3:\n            return \"No\"\n        if file_name.find(\".\")!= -1:\n            if file_name.find(\".\") > 0:\n                if file_name[file_name.find(\".\")-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                    return \"No\"\n        if file_name[0] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return \"No\"\n        if file_name.find(\".\")!= -1:\n            if file_name[file_name.find(\".\")+1:file_name.find(\".\")] not in \"txt exe dll\":\n                return \"No\"\n        return \"Yes\"\n    except:\n        return \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(file_name) == 0 or len(file_name) > 3:\n        return 'No'\n    if file_name[0].isdigit():\n        return 'No'\n    if file_name.count('.')!= 1 or file_name.count('.') > 2:\n        return 'No'\n    if file_name[0].islower() or file_name[0].isupper():\n        return 'No'\n    if file_name[1] == '.' or file_name[-2] == '.':\n        return 'No'\n    if file_name.split('.')[-1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i] * lst[i]\n        elif i % 3!= 0 and i % 4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n        else:\n            pass\n        sum = sum + lst[i]\n    return sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    total = 0\n    for entry in lst:\n        if entry % 3 == 0:\n            total += entry ** 2\n        elif entry % 4 == 0:\n            total += entry ** 3\n        elif not entry % 3 == 0 and not entry % 4 == 0:\n            total += entry\n    return total\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    final_sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            final_sum += lst[i] ** 2\n        if i % 4 == 0:\n            final_sum += lst[i] ** 3\n    return final_sum\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for entry in lst:\n        if entry%3==0:\n            entry=entry**2\n        if entry%4==0:\n            entry=entry**3\n    return sum(lst)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    #You can write any code you like below this line\n    result = 0\n    for i in lst:\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return 0\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 or i % 4!= 0:\n            result += lst[i]\n    return result\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    #-----------------------------------\n    # Your code here\n    \n    result = 0\n    \n    for i in lst:\n        if i%3 == 0:\n            result += i**2\n        elif i%4!= 0:\n            result += i**3\n        else:\n            pass\n    \n    return result\n        \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = 0\n    for num in lst:\n        if num % 3 == 0:\n            s += num ** 2\n        elif num % 4 == 0:\n            s += num ** 3\n        else:\n            s += num\n    return s\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    for x in range(len(lst)):\n        if x%3 == 0:\n            lst[x] *= lst[x]\n        elif x%4 == 0:\n            lst[x] = lst[x] ** 2\n        else:\n            pass\n    sum = sum(lst)\n    return sum\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    words = []\n    for word in sentence.split(' '):\n        # print(word)\n        words.append(word)\n    res =''.join(words)\n    print(res)\n    return res\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = sentence.split(' ')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    result = []\n    for word in words:\n        if len(word) in primes:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = sentence.split()\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if len(result) == 0:\n            result = word\n        else:\n            if is_prime(len(result)):\n                result += \" \" + word\n            else:\n                result = word\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = re.split(\" \", sentence)\n    primes = prime_generator()\n    primes_dict = dict(zip(primes, primes))\n    result = \"\"\n    for word in words:\n        if len(word) in primes_dict:\n            result += word + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return words_in_sentence_pow(sentence, 2)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: your code here\n    # words_in_sentence = []\n    # words = sentence.split(' ')\n    # for word in words:\n    #     if len(word) == len(str(prime_number(int(len(word)))):\n    #         words_in_sentence.append(word)\n    # print(words_in_sentence)\n    # return''.join(words_in_sentence)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if x == str(int(x)) and n == str(int(n)):\n        if int(x) == int(n):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    x = x.split(\"/\")\n    n = n.split(\"/\")\n    if x[0] == \"0\":\n        return False\n    elif x[1] == \"0\":\n        return False\n    elif x[0].isdigit() == True and x[1].isdigit() == True and n[0].isdigit() == True and n[1].isdigit() == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = int(x.split(\"/\")[0])\n    den = int(x.split(\"/\")[1])\n    return num == int(num) and den == int(den)"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return isinstance(x, str) and isinstance(n, str) and x.count('/') == 1 and x[0]!= '0' and n.count('/') == 1 and n[0]!= '0' and is_whole(x) and is_whole(n)\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = x.strip()\n    n = n.strip()\n    xn = x + '/' + n\n    # print(xn)\n    xn = xn.replace('/', '*', 1)\n    # print(xn)\n    if int(xn.split('*')[0]) == xn.split('*')[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # x = str(x)\n    # n = str(n)\n    # try:\n    #     n = int(n)\n    #     x = int(x)\n    # except ValueError:\n    #     return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    x = int(x)\n    n = int(n)\n    if x * n == n * x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if (n == \"1\"):\n        return True\n    if (n == \"0\"):\n        return False\n    if (\"/\" not in n):\n        return False\n    else:\n        c = n.split(\"/\")\n        d = c[0]\n        f = c[1]\n        if (d == \"1\"):\n            return True\n        if (f == \"1\"):\n            return False\n        else:\n            d = float(d)\n            f = float(f)\n            if (d > f):\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    n = str(n)\n    x = str(x)\n    lst = [int(c) for c in n.split('/')]\n    ln = len(lst)\n    if ln == 1:\n        return True\n    elif ln == 2:\n        return (int(x) % lst[0] == 0 and int(x) % lst[1] == 0) or (int(x) % lst[1] == 0)\n    else:\n        return False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Your code here\n    x = x.replace(\"+\",\" \")\n    x = x.replace(\"-\",\" \")\n    x = x.split(\" \")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = [int(i) for i in list(str(n))]\n    res = sorted(lst, key=lambda x: (sum(lst), lst.index(x)))\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n    index = 0\n    while index < len(nums) - 1:\n        if nums[index] == nums[index + 1]:\n            del nums[index]\n            nums.append(nums[index])\n            index -= 1\n        index += 1\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums.sort()\n    points = []\n    for i in nums:\n        points.append(sum(i))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not nums:\n        return []\n    elif len(nums) == 1:\n        return nums\n    else:\n        return order_by_points_helper(nums)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not nums:\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(nums) == 0:\n        return nums\n    \n    else:\n        nums.sort(key=lambda x: x if len(str(x)) == 2 else int(str(x)[0]) + int(str(x)[1]))\n        return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nums = nums[:]\n    nums.sort(key = lambda x: (sum([int(n) for n in str(x)])))\n    return nums\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def fn(n):\n        return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(nums, key=sum_func)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in nums:\n        if str(i)[0] == '1' and str(i)[1] % 2!= 0 and str(i)[-1] % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # return sum(list(filter(lambda n: n > 10 and n > 0 and n % 2!= 0 and (str(n)[0] % 2!= 0 or str(n)[-1] % 2!= 0), nums)))\n    return sum(list(filter(lambda n: n > 10 and n % 2!= 0 and (str(n)[0] % 2!= 0 or str(n)[-1] % 2!= 0), nums)))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    special = 0\n    for i in nums:\n        if (i >= 10 and (i % 2)!= 0):\n            special += 1\n    return special\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(filter(lambda x: x > 10 and x % 2 and not x % 10, nums))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_nums = []\n    for num in nums:\n        if num > 10 and num % 2 == 1 and num not in odd_nums:\n            odd_nums.append(num)\n    return len(odd_nums)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 10 == 1 and nums[i]!= 11 and nums[i]!= -11:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = 0\n    for i in nums:\n        if i > 10 and (i % 2!= 0 and i % 2!= 0):\n            result += 1\n    return result\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            odd += 1\n    return odd\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in nums:\n        if i < 10 and i % 2 == 1 and i % 10 % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for n in nums:\n        if (n > 10 and n % 2!= 0 and (n > 90 and n < 100)):\n            count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i + j + k == n and i * i + j * j == k * k:\n                    max_count += 1\n    return max_count\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    d = {0: 0, 1: 1}\n    for i in range(2, n+1):\n        d[i] = d[i-1] + d[i-2]\n    return d[n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def is_multiple_of_three(n):\n        return n % 3 == 0\n    return sum([is_multiple_of_three(i) and is_multiple_of_three(j) and is_multiple_of_three(k) for i in range(n+1) for j in range(i+1, n+1) for k in range(j+1, n+1) if i+j+k == n])\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    import math\n    return int(math.factorial(n) / (2 * math.factorial(n - 2)))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # Handle corner cases\n    if (n <= 0):\n        return 0\n    \n    # Create a dictionary to store values\n    # Return True if the given value is multiple of 3\n    # Return False if the given value is not multiple of 3\n    def is_multiple_of_3(value):\n        return value % 3 == 0\n    \n    # Create an empty dictionary to store triples\n    # Initialize empty sum\n    # Count number of triples\n    # Iterate through the array\n        # Get the value of current key\n        # If the value is not multiple of 3\n        # Increment the sum\n        # Add to the number of triples\n        # Check if the sum is multiple of 3\n    triples = {}\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        # get the value of current key\n        key = i\n        if not is_multiple_of_3(key):\n            sum += key\n            count += 1\n        else:\n            # add to the dictionary\n            if key not in triples.keys():\n                triples[key] = 1\n            else:\n                triples[key] += 1\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 1:\n        return 0\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        for j in range(i - 1):\n            dp[i] += dp[j] * (i - j)\n    return dp[-1]\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    import math\n    return int(math.factorial(n) / (math.factorial(2) * math.factorial(n - 2)))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    triples = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - i - j\n            if i * i - i + 1 + j * j - j + k * k == 3*n:\n                triples += 1\n    return triples\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    planet_orbit = get_planet_orbit(planet1, planet2)\n    # get list of all planets that orbit each other\n    planet_list = list(planet_orbit)\n    # sort list based on distance from Sun\n    sorted_planet_list = sorted(planet_list, key = lambda planet: dist(planet[0], \"Sun\"))\n    return tuple(sorted_planet_list)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    for i in list:\n        if i == planet1:\n            planet1_index = list.index(i)\n    for i in list:\n        if i == planet2:\n            planet2_index = list.index(i)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    planets = {\"Sun\": 0, \"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    planets1 = {\"Sun\": 0, \"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n    list1 = []\n    for i in range(1,9):\n        list1.append(planets1[planet1])\n        planets1[planet1] += 1\n    for i in range(1,9):\n        if planets[planet2] < planets1[planet1] - i:\n            list1.append(planets1[planet2])\n            planets1[planet2] += 1\n    list1.sort()\n    return tuple(list1)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #Define my list to return\n    returnList = ()\n    #Get planet names\n    planet1 = planet1.lower()\n    planet2 = planet2.lower()\n    #Get the planets with the given names in the solar system\n    planets = getPlanets()\n    #Loop through the planets \n    for planet in planets:\n        #Check if the planet name is correct \n        if planet[0] == planet1:\n            #Check if the planet is not already in the list\n            if planet[1] not in returnList:\n                #Add planet to the list\n                returnList += (planet[1], )\n        if planet[0] == planet2:\n            #Check if the planet is not already in the list\n            if planet[1] not in returnList:\n                #Add planet to the list\n                returnList += (planet[1], )\n    #Return the planets \n    return returnList\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #lista de orbitas\n    orbitas = []\n    #lista de planetas\n    planeta = []\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    planets_between = []\n    for planet in planets:\n        if planet1 == planet:\n            planet1_idx = planets.index(planet)\n        if planet2 == planet:\n            planet2_idx = planets.index(planet)\n        distance = calculate_distance(planet1, planet2)\n        if distance > 0:\n            planets_between.append(planet)\n            planets_between.sort(key=lambda x: calculate_distance(planet1, x))\n    return tuple(planets_between)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    data = \"\"\n    if planet1 == \"Mercury\":\n        data += \"Saturn\"\n    elif planet1 == \"Venus\":\n        data += \"Earth\"\n    elif planet1 == \"Earth\":\n        data += \"Mars\"\n    elif planet1 == \"Mars\":\n        data += \"Jupiter\"\n    elif planet1 == \"Jupiter\":\n        data += \"Saturn\"\n    elif planet1 == \"Saturn\":\n        data += \"Uranus\"\n    elif planet1 == \"Uranus\":\n        data += \"Neptune\"\n    if planet2 == \"Mercury\":\n        data += \"Saturn\"\n    elif planet2 == \"Venus\":\n        data += \"Earth\"\n    elif planet2 == \"Earth\":\n        data += \"Mars\"\n    elif planet2 == \"Mars\":\n        data += \"Jupiter\"\n    elif planet2 == \"Jupiter\":\n        data += \"Saturn\"\n    elif planet2 == \"Saturn\":\n        data += \"Uranus\"\n    elif planet2 == \"Uranus\":\n        data += \"Neptune\"\n    return tuple(sorted(data))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    if planet1.lower() == \"jupiter\" or planet2.lower() == \"jupiter\":\n        return (\"saturn\", \"uranus\")\n    elif planet1.lower() == \"earth\" or planet2.lower() == \"earth\":\n        return (\"venus\")\n    elif planet1.lower() == \"mercury\" or planet2.lower() == \"mercury\":\n        return (\"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\")\n    else:\n        return ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = []\n    \n    for i in planets:\n        if i == planet1:\n            n.append(i)\n        elif i == planet2:\n            n.append(i)\n        elif i == planets[0]:\n            n.append(i)\n    \n    for i in range(len(n)-1):\n        if n[i][-2:] == n[i+1][-2:]:\n            n.pop(i+1)\n    \n    for i in range(len(n)-1):\n        if n[i][-2:] == n[i+1][-2:]:\n            n.pop(i+1)\n    \n    for i in range(len(n)-1):\n        if n[i][-2:] == n[i+1][-2:]:\n            n.pop(i+1)\n            \n    return n\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    distance = distance_between(planet1, planet2)\n    planet_list = planets()\n    result = []\n    for planet in planet_list:\n        if distance <= distance_between(planet, \"Sun\"):\n            result.append(planet)\n    result.sort(key=lambda x: distance_between(x, \"Sun\"))\n    return tuple(result)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    odd_length = []\n    for i in range(len(lst)):\n        if len(lst[i]) % 2 == 1:\n            odd_length.append(lst[i])\n    lst = list(set(lst))\n    lst.sort()\n    for i in lst:\n        if len(i) % 2 == 1:\n            odd_length.append(i)\n    lst = sorted(lst, key=lambda s: len(s))\n    for i in range(len(lst)):\n        for j in range(len(odd_length)):\n            if len(lst[i]) == len(odd_length[j]):\n                if lst[i] < odd_length[j]:\n                    result.append(lst[i])\n                else:\n                    result.append(odd_length[j])\n    return result\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(lst)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    out = []\n    length = 0\n    while length < len(lst):\n        length = len(lst[length])\n        for i in range(length):\n            if lst[i] == 'a' or lst[i] == 'e' or lst[i] == 'i' or lst[i] == 'o' or lst[i] == 'u':\n                lst.pop(i)\n        out.append(lst[0])\n        lst.pop(0)\n    out.sort()\n    return out\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst.sort()\n    newlst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            newlst.append(i)\n    newlst.sort()\n    return newlst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=lambda s: (len(s), s))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # lst_even = lst.copy()\n    # for i in range(len(lst)):\n    #     if len(lst[i]) % 2 == 0:\n    #         lst_even.remove(lst[i])\n    # print(sorted(lst_even))\n    # return sorted(lst)\n    # no more O(n^2)\n    return sorted(list(set(lst)), key=lambda i: (len(i), i))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for x in lst:\n        if len(x) % 2!= 0:\n            lst.remove(x)\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for x in lst:\n        if len(x) % 2!= 0:\n            del x\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) == len(lst[j]):\n                if lst[i] > lst[j]:\n                    lst[i], lst[j] = lst[j], lst[i]\n    return sorted(lst)\n    \nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"ab\", \"aa\", \"aaa\", \"cd\"]) == [\"ab\", \"aa\", \"aaa\", \"cd\"]"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst2 = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            lst2.append(word)\n    for i in range(len(lst2)):\n        for j in range(i+1, len(lst2)):\n            if len(lst2[i]) > len(lst2[j]):\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n    return lst2\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(lst)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x if n % 2 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n % x == 0 or n % y == 0:\n        return x\n    else:\n        return y\n        \nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\nprint(x_or_y(4, 2, 8))\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % x == 0:\n        return x\n    elif n % y == 0:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n in primes:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x if n % x == 0 else y\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return x\n    elif n == 1:\n        return y\n    else:\n        return x\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    s = 0\n    for num in lst:\n        if num % 2!= 0:\n            s += num**2\n    return s\n    \ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if not lst:\n        return 0\n    else:\n        \n        odd_sum = 0\n        for item in lst:\n            if item % 2!= 0:\n                odd_sum += item*item\n            \n        return odd_sum\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    odd_numbers = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in lst:\n        if type(i)!= int:\n            continue\n        if i % 2 == 0:\n            continue\n        else:\n            count += i**2\n    return count\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 1:\n            odd_sum += lst[i] * lst[i]\n    return odd_sum\n    "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum(odd_number**2 for odd_number in filter(lambda number: number % 2, lst))\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # initialize a variable to hold the sum of all odd numbers\n    total_odd_numbers = 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst:\n        return 0\n    \n    # for every item in the list, add the item to the result\n    result = 0\n    for item in lst:\n        if item % 2 == 1:\n            result += item * item\n            \n    return result\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    sum_square_odd_numbers = 0\n    \n    if not lst:\n        return 0\n    for i in lst:\n        if i % 2!= 0 and i > 0:\n            sum_square_odd_numbers += i ** 2\n    return sum_square_odd_numbers"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = 0\n    if len(lst) == 0:\n        return 0\n    for num in lst:\n        if num % 2!= 0:\n            result += num**2\n    return result\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # make dictionary of results\n    results = {}\n    for i in range(len(guess)):\n        results[guess[i]] = game[i]\n    # keep track of scores\n    scores = []\n    for i in range(len(guess)):\n        if guess[i] == results[guess[i]]:\n            scores.append(0)\n        else:\n            scores.append(abs(guess[i] - results[guess[i]]))\n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    guess_diff = []\n    for i in range(len(guess)):\n        guess_diff.append(abs(guess[i]-game[i]))\n    return guess_diff\n        \n        \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    score = []\n    guess = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            score.append(0)\n        else:\n            score.append(abs(game[i] - guess[i]))\n        guess.append(game[i])\n    return score\n    \n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert len(game) == len(guess)\n    \n    return sum([(guess[i] - game[i]) for i in range(len(guess)) if guess[i] == game[i]])\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #guesses = []\n    #for i in range(len(game)):\n    #    if(game[i]==guess[i]):\n    #        guesses.append(0)\n    #    else:\n    #        guesses.append(abs(game[i]-guess[i]))\n    #return(guesses)\n    return(abs(game[0]-guess[0])+abs(game[1]-guess[1])+abs(game[2]-guess[2])+abs(game[3]-guess[3])+abs(game[4]-guess[4])+abs(game[5]-guess[5]))\n    \n    \n    \n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [0,0,0,0,3,3]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    res = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            res.append(0)\n        else:\n            res.append(abs(game[i]-guess[i]))\n    return res\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # your code here\n    guesses = []\n    for idx in range(len(guess)):\n        if guess[idx] == game[idx]:\n            guesses.append(0)\n        else:\n            guesses.append(abs(guess[idx] - game[idx]))\n    return guesses\n    \n    "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    results = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            results.append(0)\n        else:\n            results.append(abs(game[i] - guess[i]))\n    return results\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    #we can use the set() function to remove any duplicate values in a list\n    #we can use a list comprehension to remove any duplicate values from a list\n    #to get a set and then use the set() function to get a set\n    res = []\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            res.append(0)\n        else:\n            res.append(abs(guess[i]-game[i]))\n    return res\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Remove duplicate values\n    set_extensions = set(extensions)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    my_list = sorted(extensions, key=len)\n    for i in my_list:\n        if class_name.upper() == i.upper():\n            return class_name + i.upper()\n    return class_name + my_list[0].upper()\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if class_name not in extensions:\n        return class_name\n    for extension in extensions:\n        extension_class = extension.split('.')\n        extension_class = extension_class[1]\n        if extension_class.isupper():\n            extension_class = extension_class.upper()\n        if class_name.islower():\n            class_name = class_name.upper()\n        if (extension_class.upper() - class_name.upper()) > (extension_class.lower() - class_name.lower()):\n            return extension_class\n    return class_name\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def strength_func(ext):\n        return -1 if not ext.isupper() else ord(ext[0].upper()) - ord('A')\n    return sorted(extensions, key=strength_func)[0]+\".\"+class_name.lower()\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    ext_lst = []\n    ext_str ='my_class.{}'\n    ext_name_lst = []\n    for ext in extensions:\n        # print(ext)\n        ext_name = ext.lower()\n        ext_count = ext_name.count('.')\n        ext_name_lst.append(ext_name)\n        if ext_count == 1:\n            if ext_name in ext_lst:\n                continue\n            else:\n                ext_lst.append(ext_name)\n    ext_lst.sort(key=lambda x: x.count('.') + x.count('_'))\n    # print(ext_lst)\n    if len(ext_lst) == 0:\n        return class_name\n    else:\n        return ext_str.format(ext_lst[0])\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_strength = -1\n    max_name = ''\n    for element in extensions:\n        curr_name = element[:-1]\n        curr_strength = 0\n        if curr_name.isupper():\n            curr_strength = len(curr_name) - element.lower().count('e')\n        else:\n            curr_strength = len(curr_name) - element.lower().count('e') + len(curr_name) - element.lower().count('a')\n        if curr_strength > max_strength:\n            max_strength = curr_strength\n            max_name = element\n    return class_name + '.' + max_name\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    cap = []\n    low = []\n    for i in extensions:\n        if i.isupper():\n            cap.append(i)\n        if i.islower():\n            low.append(i)\n    cap.sort()\n    low.sort()\n    cap.sort(key=lambda x: x.count('e'), reverse=True)\n    low.sort(key=lambda x: x.count('E'), reverse=True)\n    if cap == low:\n        return class_name + cap[0]\n    else:\n        return class_name + cap[0] + '.' + cap[1]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    class_name = class_name.capitalize()\n    extensions = list(map(lambda x: x.capitalize(), extensions))\n    \n    classes = {}\n    for extension in extensions:\n        classes[extension] = True\n    \n    for class_name in classes.keys():\n        if class_name.isupper() and class_name.islower():\n            class_name += '.'\n            \n        if class_name + '.StrongestExtensionName' in classes:\n            return class_name + '.' + class_name + '.StrongestExtensionName'\n    \n    return class_name + '.StrongestExtensionName'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ans = class_name + '.StrongestExtensionName'\n    for x in extensions:\n        if not x.endswith('.'):\n            x = x + '.'\n        ans = x + ans\n    return ans"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_name = class_name\n    strength = 0\n    for extension in extensions:\n        if extension.isupper():\n            strength -= 1\n        elif extension.islower():\n            strength += 1\n    if strength > 0:\n        new_name += '.' + class_name + '.' + str(strength)\n    else:\n        new_name += '.' + class_name\n    return new_name\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a == b:\n        return True\n    if not (a and b):\n        return False\n    # if (len(a) == len(b)):\n    for i in range(len(a)):\n        if b in a + a[0:i][::-1] or a in b + b[0:i][::-1]:\n            return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ab = a + a\n    return b in ab or ab in b\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not a:\n        return False\n    a = a.lower()\n    b = b.lower()\n    a_len = len(a)\n    b_len = len(b)\n    if a_len < b_len:\n        return False\n    for i in range(a_len):\n        if a[i] == b[0]:\n            if a_len == 1:\n                return True\n            if a_len == b_len:\n                return True\n            if a_len < b_len:\n                return False\n            if b[i:] + b[:i] == a:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return b in a or b in a[::-1]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i:j] == b:\n                return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a in b or b in a"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def rot(s,k):\n        return s[k:] + s[:k]\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a in b or a+a in b or a*2 in b or b+b in a"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(a)>len(b):\n        return False\n    if b in a+a:\n        return True\n    return False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(a) < len(b):\n        a, b = b, a\n    count = 0\n    for i in range(len(a)-len(b)+1):\n        for j in range(len(a)):\n            if a[j] == b[j]:\n                count += 1\n    return count == len(a)-len(b)+1\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if num == 0:\n        return (0,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if num == 0:\n        return (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num_list = list(str(num))\n    even = 0\n    odd = 0\n    for num in num_list:\n        if int(num) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even, odd = 0, 0\n    while num > 0:\n        num, digit = divmod(num, 10)\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even, odd = 0, 0\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (num % 10 % 2, num // 10 % 10 % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Calculate the even and odd digits in reverse order. \n    # Store the results in variables. \n    # Add 1 for the first digit of the integer. \n    # Remove the first digit by setting it to zero. \n    # If the digit is even, add it to the even count.\n    # If the digit is odd, add it to the odd count. \n    return (0, 0) if num == 0 else (sum(i % 2 for i in range(1, num + 1, 2)), sum(i % 2 for i in range(0, num - 1, 2)))\n    \n    # return sum(i % 2 for i in range(0, num + 1, 2)), sum(i % 2 for i in range(0, num - 1, 2))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if num < 0:\n        return False, False\n    even, odd = 0, 0\n    while num:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    num = str(num)\n    return (num.count('0'), num.count('1'))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 10 % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Dictionary for conversion of integer to roman\n    dic = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii', 8: 'viii', 9: 'ix', 10: 'x',\n            11: 'xii', 12: 'xiii', 13: 'xiv', 14: 'xv', 15: 'xvi', 16: 'xvii', 17: 'xviii', 18: 'xix',\n            19: 'xx', 20: 'xxi', 30: 'xxx', 40: 'xxxx', 50: 'l', 60: 'lii', 70: 'liii', 80: 'liv', 90: 'lv',\n            100: 'lx', 200: 'lxii', 300: 'lxiii', 400: 'lxiv', 500: 'lxv', 600: 'lxvi', 700: 'lxvii', 800: 'lxviii',\n            900: 'lxx', 1000: 'lxxi', 2000: 'lxxii', 3000: 'lxxiii', 4000: 'lxxiv', 5000: 'lxxv', 6000: 'lxxvi',\n            7000: 'lxxvii', 7500: 'lxxviii', 8000: 'lxxx', 10000: 'lxxxi', 20000: 'lxxxii', 30000: 'lxxxiii',\n            40000: 'lxxxiv', 50000: 'lxxxv', 60000: 'lxxxvi', 70000: 'lxxxvii', 80000: 'lxxxviii', 90000: 'lxxxix'}\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert 1 <= number <= 1000, 'The number must be in range 1 <= number <= 1000.'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = abs(number)\n    roman = ''\n    number = n\n    thousands = int(n // 1000)\n    n = n - thousands * 1000\n    for x in range(thousands):\n        roman = roman +'m'\n    if n >= 900:\n        roman = roman + 'cm'\n        n = n - 900\n    if n >= 500:\n        roman = roman + 'd'\n        n = n - 500\n    if n >= 400:\n        roman = roman + 'cd'\n        n = n - 400\n    if n >= 100:\n        roman = roman + 'c'\n        n = n - 100\n    if n >= 90:\n        roman = roman + 'xc'\n        n = n - 90\n    if n >= 50:\n        roman = roman + 'l'\n        n = n - 50\n    if n >= 40:\n        roman = roman + 'xl'\n        n = n - 40\n    if n >= 10:\n        roman = roman + 'x'\n        n = n - 10\n    if n >= 9:\n        roman = roman + 'ix'\n        n = n - 9\n    if n >= 5:\n        roman = roman + 'v'\n        n = n - 5\n    if n >= 4:\n        roman = roman + 'iv'\n        n = n - 4\n    if n >= 1:\n        roman = roman + 'i'\n        n = n - 1\n    return roma"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    assert 1 <= number <= 1000, \"1 <= number <= 1000\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # use a hash table to map integers to their roman equivalents\n    n_roman_dict = {1: 'i', 5: 'v', 10: 'x', 50: 'l', 100: 'c', 500: 'd', 1000:'m'}\n    # for roman numeral, we need to start from least significant digit\n    roman_numeral = ''\n    while number > 0:\n        for (k, v) in n_roman_dict.items():\n            if k <= number:\n                roman_numeral += v\n                number -= k\n                break\n    return roman_numeral\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    roman = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    roman_nums = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    roman_nums.reverse()\n    roman_num = 0\n    roman_num_list = []\n    for i in range(len(roman_nums)):\n        roman_num_list.append(roman[roman_nums[i]-1])\n    roman_num_list.reverse()\n    while number > 0:\n        for i in range(len(roman_num_list)):\n            if roman_nums[i] > number:\n                break\n            roman_num += roman_num_list[i]\n            number -= roman_nums[i]\n    return roman_num\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    numerals = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xxiv', 'xxv', 'xxvi', 'xxvii', 'xxviii', 'xxix', 'xxx', 'xxxi', 'xxxii', 'xxxiii', 'xxxiv', 'xxxv', 'xxxvi', 'xxxvii', 'xxxviii', 'xxxix', 'xxxi', 'xxxx', 'xxxxi', 'xxxxii', 'xxxxiii', 'xxxxiv', 'xxxxv', 'xxxxvi', 'xxxxvii', 'xxxxviii', 'xxxxix', 'xxxxi']\n    \n    # Error checking\n    if number < 1 or number > 1000:\n        raise ValueError('Input value out of range')\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if number == 1:\n        return 'i'\n    elif number == 2:\n        return 'ii'\n    elif number == 3:\n        return 'iii'\n    elif number == 4:\n        return 'iv'\n    elif number == 5:\n        return 'v'\n    elif number == 6:\n        return 'vi'\n    elif number == 7:\n        return 'vii'\n    elif number == 8:\n        return 'viii'\n    elif number == 9:\n        return 'ix'\n    elif number == 10:\n        return 'x'\n    elif number == 11:\n        return 'xi'\n    elif number == 12:\n        return 'xii'\n    elif number == 13:\n        return 'xiii'\n    elif number == 14:\n        return 'xiv'\n    elif number == 15:\n        return 'xv'\n    elif number == 16:\n        return 'xvi'\n    elif number == 17:\n        return 'xvii'\n    elif number == 18:\n        return 'xviii'\n    elif number == 19:\n        return 'xix'\n    elif number == 20:\n        return 'xx'\n    elif number == 21:\n        return 'xi'\n    elif number == 22:\n        return 'xii'\n    elif number == 23:\n        return 'xiii'\n    elif number == 24:\n        return 'xiv'\n    elif number == 25:\n        return 'xv'\n    elif number == 26:\n        return 'xvi'\n    elif number == 27:\n        return 'xvii'\n    elif number == 28:\n        return 'xviii'\n    elif number == 29:\n        return 'xix'\n    elif number == 30:\n        return 'xxi'\n    elif number == 31:\n        return 'xxii'\n    elif number == 32:\n        return 'xxiii'\n    elif number == 33:\n        return 'xxiv'\n    elif number == 34:\n        return 'xxv'\n    elif number == 35:\n        return 'xxvi'\n    elif number == 36:\n        return 'xxvii'\n    elif number == 37:\n        return 'xxviii'\n    elif number == 38:\n        return 'xxix'\n    elif number == 39:\n        return 'xxx'\n    elif number == 40:\n        return 'xx'\n    elif number == 41:\n        return 'xxi'\n    elif number == 42:\n        return 'xxii'\n    elif number == 43:\n        return 'xxiii'\n    elif number == 44:\n        return 'xxiv'\n    elif number == 45:\n        return 'xxv'\n    elif number == 46:\n        return 'xxvi'\n    elif number == 47:\n        return 'xxvii'\n    elif number == 48:\n        return 'xxviii'\n    elif number == 49:\n        return 'xxix'\n    elif number == 50:\n        return 'xxxi'\n    elif number == 51:\n        return 'xxii'\n    elif number == 52:\n        return 'xxiii'\n    elif number == 53:\n        return 'xxiv'\n    elif number == 54:\n        return 'xxv'\n    elif number == 55:\n        return 'xxvi'\n    elif number == 56:\n        return 'xxvii'\n    elif number == 57:\n        return 'xxviii'\n    elif number == 58:\n        return 'xxix'\n    elif number == 59:\n        return 'xxx'\n    elif number == 60:\n        return 'xx'\n    elif number == 61:\n        return 'xxi'\n    elif number == 62:\n        return 'xxii'\n    elif number == 63:\n        return 'xxiii'\n    elif number == 64:\n        return 'xxiv'\n    elif number == 65:\n        return 'xxv'\n    elif number == 66:\n        return 'xxvi'\n    elif number == 67:\n        return 'xxvii'\n    elif number == 68:\n        return 'xxviii'\n    elif number == 69:"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if number == 0:\n        return 'zero'\n    roman = ''\n    result = ['', 'i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x']\n    while number > 0:\n        a = number % 10\n        if a > 3:\n            roman += result[number // 10]\n        else:\n            roman += result[a]\n        number = number // 10\n    return roman.lower()\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if number < 1 or number > 1000:\n        raise ValueError(\"number out of range\")\n    if number <= 10:\n        return str(number)\n    if number == 11:\n        return 'ii'\n    if number == 12:\n        return 'iii'\n    if number == 13:\n        return 'iv'\n    if number == 14:\n        return 'v'\n    if number == 15:\n        return 'vi'\n    if number == 16:\n        return 'vii'\n    if number == 17:\n        return 'viii'\n    if number == 18:\n        return 'ix'\n    if number == 19:\n        return 'x'\n    if number == 20:\n        return 'xi'\n    if number == 30:\n        return 'xx'\n    if number == 40:\n        return 'xxi'\n    if number == 50:\n        return 'l'\n    if number == 60:\n        return 'lx'\n    if number == 70:\n        return 'lii'\n    if number == 80:\n        return 'liii'\n    if number == 90:\n        return 'xix'\n    if number == 100:\n        return 'xx'\n    if number == 200:\n        return 'xxxx'\n    if number == 300:\n        return 'xxx'\n    if number == 400:\n        return 'xxii'\n    if number == 500:\n        return 'lxii'\n    if number == 600:\n        return 'lxiii'\n    if number == 700:\n        return 'lxiv'\n    if number == 800:\n        return 'lxv'\n    if number == 900:\n        return 'lxxi'\n    if number == 1000:\n        return 'lxx'\n    else:\n        return None\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a*a + b*b == c*c:\n        return True\n    else:\n        return False\n    \ndef sum_triangles(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the sum of the \n    areas of all possible triangles formed by the sides of the given triangle.\n    Example:\n    sum_triangles(1, 1, 2) == 6\n    sum_triangles(3, 4, 5) == 7\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef area_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of the \n    triangle formed by the given three sides.\n    Example:\n    area_triangle(1, 1, 2) == 1\n    area_triangle(3, 4, 5) == 8.5\n    '''\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n    \ndef area_parallelogram(a, b):\n    '''\n    Given the lengths of two sides of a parallelogram. Return the area of the \n    parallelogram.\n    Example:\n    area_parallelogram(2, 3) == 4\n    area_parallelogram(3, 4) == 12\n    '''\n    return (a*b)**0.5\n    \ndef area_square(a):\n    '''\n    Given the length of a side of a square. Return the area of the square.\n    Example:\n    area_square(2) == 4\n    area_square(3) == 9\n    '''\n    return a*a\n    \ndef circumference(a):\n    '''\n    Given the length of a side of a circle. Return the circumference of the \n    circle.\n    Example:\n    circumference(4) == 12.5\n    circumference(5) == 17.2\n    '''\n    return (2*math.pi)*a\n    \ndef find_triangle_by_3_sides(a, b, c):\n    '''\n    Given the lengths of three sides of a triangle. Return the three sides of the \n    triangle. If the sides are not of a valid triangle, return False.\n    Example:\n    find_triangle_by_3_sides(1, 2, 3) == (1, 2, 3)\n    find_triangle_by_3_sides(1, 1, 1) == False\n    '''\n    if a+b <= c or a+c <= b or b+c <= a:\n        return False\n    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return (a, b, c)\n    else:\n        return False\n        \ndef find_hypotenuse(a, b):\n    '''\n    Given the lengths of two sides of a triangle. Return the length of the hypotenuse.\n    Example:\n    find_hypotenuse(1, 2) == 2.0\n    find_hypotenuse(1, 1) == 1.0\n    '''\n    return (a**2 + b**2)**0.5\n    \ndef lcm(a, b):\n    '''\n    Given two integers. Return the least common multiple of the two numbers.\n    Example:\n    lcm(3, 6) == 3\n    lcm(3, 5) == 15\n    lcm(3, 4) == 12\n    lcm(5, 4) == 10\n    '''\n    lcm = a*b/math.gcd(a,b)\n    return int(lcm)\n    \ndef lcm_iterative(a, b):\n    '''\n    Given two integers. Return the least common multiple of the two numbers.\n    Example:\n    lcm_iterative(3, 6) == 3\n    lcm_iterative(3, 5) == 15\n    lcm_iterative(3, 4) == 12\n    lcm_iterative(5, 4) == 10"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return abs(a**2 + b**2 - c**2) < 1e-3\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Just one side is a triangle.\n    if a == b == c:\n        return True\n    # Check that the triangle is a right-angled triangle.\n    # 2 sides are not equal, and one angle is 90 degrees.\n    elif (a!= b) and (b!= c) and (a!= c):\n        # Check if the angle is 90 degrees.\n        return a == math.sqrt(a**2 + b**2)\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return True if a ** 2 + b ** 2 == c ** 2 else False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a*a + b*b == c*c\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_characters = 0\n    max_words = \"\"\n    for word in words:\n        if len(word) > max_characters:\n            max_characters = len(word)\n            max_words = word\n    return max_words\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(words) == 1:\n        return words[0]\n    elif len(words) == 0:\n        return \"\"\n    elif len(words) == 2:\n        return words[0] if words[0] == words[1] else words[1]\n    else:\n        return words[0] if len(words[0]) >= len(words[1]) else words[1]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words_set = set(words)\n    longest_word = ''\n    for word in words_set:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_num_char = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_num_char:\n            max_num_char = len(word)\n            max_word = word\n    return max_word\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_c = None\n    for word in words:\n        if max_c is None:\n            max_c = len(word)\n        else:\n            if len(word) > max_c:\n                max_c = len(word)\n    return words[0] if max_c == len(words[0]) else \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_list = []\n    for w in words:\n        d = {}\n        for c in w:\n            if c in d:\n                d[c] += 1\n            else:\n                d[c] = 1\n        max_list.append(d)\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max_char = \"\"\n    for word in words:\n        if len(set(word)) == len(word):\n            max_char = word if len(max_char) < len(word) else max_char\n    return max_char\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words_dict = {}\n    #print(words)\n    #print(words_dict)\n    for word in words:\n        count = 0\n        for i in word:\n            if i in words_dict.keys():\n                words_dict[i] += 1\n            else:\n                words_dict[i] = 1\n        #print(words_dict)\n        for key in words_dict.keys():\n            if words_dict[key] == len(words):\n                if key < word:\n                    return word\n                else:\n                    return \"\"\n    return \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    unique_characters = set()\n    for word in words:\n        for character in word:\n            unique_characters.add(character)\n    return (list(unique_characters))[0]\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_char_list = []\n    for word in words:\n        word_dict = {}\n        for char in word:\n            if char in word_dict:\n                word_dict[char] += 1\n            else:\n                word_dict[char] = 1\n        max_char_list.append(word_dict)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [number, remaining]\n    \n    \n    \ndef pig_latin(sentence):\n    \"\"\"\n    You are given a sentence and you have to make the words \"pig latin\"\n    (the order of the letters should be reversed).\n    So for example \"hello world\" becomes \"world hello\".\n    If the given sentence starts with a capital letter then you have to make it lowercase.\n    Examples:\n    * pig_latin(\"Hello world\") -> \"world hello\"\n    * pig_latin(\"The quick brown fox jumped over the lazy dog\") -> \"heT kciuN umped o jovEs fovE edoGr\"\n    * pig_latin(\"D O G G E Y\") -> \"y odgG\"\n    * pig_latin(\"Raymond the turtle\") -> \"enay drowmT y\"\n    * pig_latin(\"the person who goes there and makes people laugh\") -> \"tahte yurpaan ymplohajurrng\"\n    * pig_latin(\"\") -> \"\"\n    \n    Variables:\n    @sentence : string\n        the sentence that you have to translate.\n    \n    Constrain:\n    * 0 <= sentence <= 1000\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if number >= need:\n        return [number - need, need]\n    else:\n        return [need - number, number]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number >= need:\n        return [number - need, 0]\n    elif number == 0 and need == remaining:\n        return [remaining, remaining]\n    elif number < need:\n        return [need - number, need - number]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    need = min(need, remaining)\n    eaten_carrots = number + need\n    leftover_carrots = remaining - need\n    return [eaten_carrots, leftover_carrots]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    total = number - need\n    if total < 0:\n        total = 0\n        return number, remaining - total\n    else:\n        return total, remaining - total\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Write your code here\n    # print(number, need, remaining)\n    if number > need:\n        number = number - need\n    \n    return([number+need, remaining-need])\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if number < need:\n        return [number, 0]\n    elif number > need:\n        return [number - need, 0]\n    elif number == need:\n        return [number, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if need > remaining:\n        return [number + (remaining // 2), remaining - (need // 2)]\n    else:\n        return [number + need, remaining - need]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    remaining -= need\n    return [number + remaining, remaining]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    eaten = number - need\n    if remaining <= 0:\n        return eaten, remaining\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return sum(operand)\n    elif operator == '*':\n        return reduce(lambda x, y: x * y, operand)\n    elif operator == '//':\n        return reduce(lambda x, y: x // y, operand)\n    elif operator == '**':\n        return reduce(lambda x, y: x ** y, operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    if len(operator) == 0:\n        return 0\n    else:\n        if operator[0] == '+':\n            return do_plus(operand[0], operand[1])\n        elif operator[0] == '-':\n            return do_minus(operand[0], operand[1])\n        elif operator[0] == '*':\n            return do_multiply(operand[0], operand[1])\n        elif operator[0] == '//':\n            return do_floor_division(operand[0], operand[1])\n        else:\n            return do_power(operand[0], operand[1])\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return operand[0] - operand[1]\n    elif operator == '*':\n        return operand[0] * operand[1]\n    elif operator == '//':\n        return operand[0] // operand[1]\n    else:\n        return operand[0] ** operand[1]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # step1. add\n    if operator == '+':\n        return sum(operand)\n    # step2. mul\n    if operator == '*':\n        return reduce(lambda x, y: x * y, operand)\n    # step3. div\n    if operator == '/':\n        if operand == 0:\n            return 0\n        return reduce(lambda x, y: x // y, operand)\n    # step4. exp\n    if operator == '**':\n        return reduce(lambda x, y: x ** y, operand)\n    # step5. sub\n    if operator == '-':\n        return reduce(lambda x, y: x - y, operand)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # For example, the length of operator and operand lists are equal to the length of\n    # the expression minus one.\n    assert len(operator) == len(operand) - 1\n    # add for positive numbers, subtraction for negative numbers\n    if operator[0] == '+':\n        # add for positive numbers, subtraction for negative numbers\n        for i in range(len(operand)):\n            operand[i] = operand[i] + operator[1]\n        return operand[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if operator[0] == '+':\n        result = operand[0] + operand[1]\n    elif operator[0] == '-':\n        result = operand[0] - operand[1]\n    elif operator[0] == '*':\n        result = operand[0] * operand[1]\n    elif operator[0] == '/':\n        result = operand[0] // operand[1]\n    elif operator[0] == '**':\n        result = operand[0] ** operand[1]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = result + operand[i]\n        elif operator[i] == '-':\n            result = result - operand[i]\n        elif operator[i] == '*':\n            result = result * operand[i]\n        elif operator[i] == '/':\n            result = result // operand[i]\n        elif operator[i] == '^':\n            result = result ** operand[i]\n        else:\n            print('You have to enter a valid operator.')\n            return\n    print('The result is:', result)\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result = result//operand[i]\n        elif operator[i-1] == '**':\n            result = result**operand[i]\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for x in s:\n        if x.isalpha():\n            if x.isupper():\n                result.append(x.lower())\n            else:\n                result.append(x.upper())\n        else:\n            result.append(x)\n    return ''.join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    reversed_s = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                reversed_s += s[i].lower()\n            elif s[i].islower():\n                reversed_s += s[i].upper()\n        else:\n            reversed_s += s[i]\n    return reversed_s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                s = s[:i] + s[i].lower() + s[i+1:]\n            elif s[i].islower():\n                s = s[:i] + s[i].upper() + s[i+1:]\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join(c.upper() if c.islower() else c.lower() for c in s)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = s.lower() if 'a' <= s[0] <= 'z' else s.upper()\n    return s[::-1].lower() if 'a' <= s[0] <= 'z' else s[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.upper() if s.islower() else s.lower()\n    for i, char in enumerate(s):\n        if char.isalpha():\n            s = s[:i] + char.swapcase() + s[i+1:]\n    return s\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    if s:\n        for i in s:\n            if i.isalpha():\n                result += i.upper() if i.islower() else i.lower()\n            else:\n                result += i\n    else:\n        result = s\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Solution 1\n    # s_list = list(s)\n    # for i in range(len(s)):\n    #     if s_list[i].isalpha():\n    #         if s_list[i].islower():\n    #             s_list[i] = s_list[i].upper()\n    #         elif s_list[i].isupper():\n    #             s_list[i] = s_list[i].lower()\n    #     else:\n    #         s_list[i] = s_list[i]\n    # return \"\".join(s_list)\n    # Solution 2\n    return s[::-1].swapcase() if s.isalpha() else s[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not s:\n        return \"\"\n    s = s[::-1]\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s = s[:i] + s[i].upper() + s[i+1:]\n    return "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n    if not s:\n        return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if text:\n        text = text.encode('utf-8')\n        return hashlib.md5(text).hexdigest()\n    else:\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if text == '':\n        return None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return hashlib.md5(text.encode()).hexdigest() if text else None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    text = text.encode('utf-8')\n    if text == b'':\n        return None\n    hash_object = hashlib.md5(text)\n    return hash_object.hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if text == '':\n        return None\n    else:\n        return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not text:\n        return None\n    elif not isinstance(text, str):\n        text = str(text)\n    return hashlib.md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # md5 is secure enough because of its length, so this shouldn't fail.\n    if text:\n        return md5(text.encode()).hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    text = text.encode()\n    hash_obj = hashlib.md5(text)\n    result = hash_obj.hexdigest()\n    return result\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    integers = list(range(a, b+1))\n    # evens = list(filter(lambda n: n % 2 == 0, integers))\n    evens = [i for i in integers if i % 2 == 0]\n    return evens\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return range(a, b + 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert a <= b, 'Generation of integers should start from lower boundary'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return range(a, b + 1, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert a <= b, 'a must be less than or equal to b'\n    if a == b:\n        return list(range(a, b + 1))\n    else:\n        return list(range(a, b + 1))[::2]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(range(a, b + 1, 2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    digits = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            digits.append(i)\n    return digits\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(range(a, b+1), key=lambda x: x % 2 == 0)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return []\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return range(a, b + 1, 2)\n"
    }
]