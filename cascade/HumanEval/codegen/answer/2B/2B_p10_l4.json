[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_numbers = sorted(numbers)\n    last_number = sorted_numbers[0]\n    for number in sorted_numbers[1:]:\n        if number - last_number <= threshold:\n            return True\n        else:\n            last_number = number\n    return False\n",
        "num_ids": 70
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] - numbers[j] <= threshold:\n                return True\n",
        "num_ids": 52
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False",
        "num_ids": 58
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert isinstance(threshold, float)\n    assert threshold > 0\n",
        "num_ids": 18
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert threshold > 0\n    for index in range(len(numbers)):\n        for other_index in range(index+1, len(numbers)):\n            if abs(numbers[index] - numbers[other_index]) <= threshold:\n                return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(1, len(numbers)):\n        for j in range(i):\n            if numbers[i] - numbers[j] <= threshold:\n                return True\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    paren_list = []\n",
        "num_ids": 24
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    stack = []\n    res = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            while stack and stack[-1]!= '(':\n                res.append(stack.pop())\n            stack.pop()\n        else:\n            res.append(char)\n    while stack:\n        res.append(stack.pop())\n    return res\n",
        "num_ids": 106
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # initialize variables\n    parens = []\n    brace_level = 0\n    string_level = 0\n    paren_string = paren_string.strip()\n    # loop through each character of the string\n    for char in paren_string:\n        # if the character is the opening brace\n        if char == '(':\n            # increase brace level by 1\n            brace_level += 1\n            # add the character to the list of parens\n            parens.append(char)\n        # if the character is the closing brace\n        elif char == ')':\n            # decrease the brace level by 1\n            brace_level -= 1\n            # check if the brace level is 0\n            if brace_level == 0:\n                # if it is, then add the character to the list of parens\n                parens.append(char)\n        # if the character is the opening bracket\n        elif char == '[':\n            # increase the string level by 1\n            string_level += 1\n            # add the character to the list of parens\n            parens.append(char)\n        # if the character is the closing bracket\n        elif char == ']':\n            # decrease the string level by 1\n            string_level -= 1\n            # check if the string level is 0\n            if string_level == 0:\n                # if it is, then add the character to the list of parens\n                parens.append(char)\n    # return the list of parens\n    return parens\n",
        "num_ids": 347
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # i = 0\n    # groups = []\n    # while i < len(paren_string):\n    #     if paren_string[i] == '(':\n    #         groups.append('(')\n    #         i += 1\n    #     elif paren_string[i] == ')':\n    #         groups.append(')')\n    #         i += 1\n    #     else:\n    #         i += 1\n",
        "num_ids": 104
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    paren_string = paren_string.strip()\n    paren_string = paren_string.replace(' ', '')\n    s = list(paren_string)\n    ans = []\n    new_ans = []\n    bracket = False\n    for i in range(len(s)):\n        if s[i] == '(':\n            if bracket == False:\n                bracket = True\n                new_ans.append(s[i])\n            else:\n                ans.append(new_ans)\n                bracket = False\n                new_ans = []\n        if s[i] == ')':\n            if bracket == True:\n                ans.append(new_ans)\n                bracket = False\n                new_ans = []\n            else:\n                new_ans.append(s[i])\n    if bracket == False:\n        ans.append(new_ans)\n    return ans\n",
        "num_ids": 210
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    open_parens = ['(', '[', '{']\n    close_parens = [')', ']', '}']\n    open_stack = []\n    idx = 0\n    while idx < len(paren_string):\n        curr_paren = paren_string[idx]\n        if curr_paren in open_parens:\n            open_stack.append(curr_paren)\n        elif curr_paren in close_parens:\n            if not open_stack:\n                result.append(curr_paren)\n            else:\n                open_paren = open_stack.pop()\n                if open_paren == '(':\n                    result.append('()')\n                elif open_paren == '[':\n                    result.append('[]')\n                elif open_paren == '{':\n                    result.append('{}')\n        idx += 1\n    return result\n",
        "num_ids": 217
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    group_stack = []\n    paren_string = paren_string.replace(' ', '')\n    for index in range(len(paren_string)):\n        if paren_string[index] == '(':\n            group_stack.append(paren_string[index])\n        elif paren_string[index] == ')':\n            while True:\n                if len(group_stack) == 0:\n                    break\n                elif group_stack[-1] == '(':\n                    group_stack.pop()\n                    break\n                else:\n                    break\n    return group_stack\n",
        "num_ids": 138
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    paren_string = paren_string.replace(' ', '')\n    index = 0\n    nest_dict = {}\n    output = []\n    while index < len(paren_string):\n        if paren_string[index] == '(':\n            if paren_string[index+1]!= ')':\n                nest_dict[paren_string[index]] = paren_string[index+1]\n                index += 2\n            else:\n                index += 1\n        else:\n            index += 1\n        if len(nest_dict) > 0:\n            nest_dict[paren_string[index]] = paren_string[index+1]\n            index += 2\n        else:\n            output.append(paren_string[index])\n    return output\n",
        "num_ids": 183
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_string = paren_string.split()\n    paren_groups = []\n    for paren_group in paren_string:\n        if paren_group == '(':\n            paren_groups.append(paren_group)\n        elif paren_group == ')':\n            if paren_groups[-1] == '(':\n                paren_groups.pop(-1)\n            else:\n                paren_groups.append(paren_group)\n    return paren_groups\n",
        "num_ids": 115
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    paren_groups = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_groups.append(paren_string[i])\n        elif paren_string[i] == ')':\n            if paren_groups[-1] == '(':\n                paren_groups.pop()\n            else:\n                paren_groups.append(paren_string[i])\n    return paren_groups\n",
        "num_ids": 111
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return float(int(number))\n",
        "num_ids": 10
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    number = float(number)\n    integer = int(number)\n    decimals = number - integer\n    return decimals\n",
        "num_ids": 32
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    int_part, dec_part = integer_part(number)\n    return dec_part\n",
        "num_ids": 23
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if the number is not positive, it should be negative\n    if number < 0:\n        number = -number\n    integer, decimals = divmod(number, 1)\n    return decimal",
        "num_ids": 46
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    positive = True if number >= 0 else False\n    decimal_part = number - int(number)\n    return int(decimal_part) if positive else -int(decimal_part)\n",
        "num_ids": 46
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # for handling small numbers\n    decimal = int(number % 1 * 100)\n",
        "num_ids": 21
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    integer, decimal = _decompose_number(number)\n    return decimal\n",
        "num_ids": 20
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    number = number + 0.001\n    # print(f'number = {number}')\n    \n    int_part, dec_part = math.modf(number)\n    # print(f'int_part = {int_part}')\n    # print(f'dec_part = {dec_part}')\n    \n    int_part = int(int_part)\n    # print(f'int_part = {int_part}')\n    \n    return dec_part\n",
        "num_ids": 117
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if number <= 0:\n        raise ValueError(\"Input number should be positive\")\n    return int(number)\n",
        "num_ids": 27
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    integer = int(number)\n    if number == integer:\n        return 0\n    else:\n        return number - integer\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(operations)\n    if n == 0:\n        return False\n    i = 0\n    while i < n - 1:\n        if operations[i] <= 0:\n            i += 1\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    amount = 0\n    for i in range(len(operations)):\n        if operations[i] >= 0:\n            amount += operations[i]\n        else:\n            amount -= operations[i]\n    if amount < 0:\n        return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total_balance = 0\n    for operation in operations:\n        total_balance += operation\n        if total_balance < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def check(operations: List[int]) -> bool:\n        summ = 0\n        for operation in operations:\n            if operation >= 0:\n                summ += operation\n            else:\n                summ -= operation\n        if summ < 0:\n            return True\n        else:\n            return False\n",
        "num_ids": 71
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = 0\n    while i < len(operations):\n        if operations[i] <= 0:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(operations)-1):\n        if operations[i] < 0:\n            for j in range(i,len(operations)):\n                if operations[j] < 0:\n                    return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # for number in operations:\n    #     if number < 0:\n    #         return True\n    # return False\n",
        "num_ids": 29
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        elif balance < 0:\n            return True\n        else:\n            balance = 0\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    bal = 0\n    for o in operations:\n        bal += o\n        if bal < 0:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    initial = 0\n    balance = 0\n",
        "num_ids": 11
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    m_n = mean(numbers)\n    s_n = sum(map(abs, numbers))\n    return s_n / len(numbers)\n",
        "num_ids": 38
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([abs(x - mean(numbers)) for x in numbers]) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(abs(n - mean(numbers)) for n in numbers) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # my_sum = 0\n    # for n in numbers:\n    #     my_sum += abs(n - mean)\n    # return my_sum / len(numbers)\n    mean = sum(numbers) / len(numbers)\n    differences = []\n    for n in numbers:\n        differences.append(abs(n - mean))\n    return sum(differences) / len(numbers)\n",
        "num_ids": 99
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    m = mean(numbers)\n    return average_absolute_deviation(numbers, m)\n",
        "num_ids": 25
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    total_sum = sum(abs(num) for num in numbers)\n    return total_sum / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(numbers)\n    mean = sum(numbers) / n\n    return sum(abs(n - mean) for n in numbers) / n\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([abs(i - mean(numbers)) for i in numbers]) / len(numbers)\n",
        "num_ids": 26
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    avg = sum(numbers)/len(numbers)\n    return (sum([abs(n - avg) for n in numbers])/len(numbers))\n",
        "num_ids": 39
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    avg = sum(numbers) / len(numbers)\n    return sum([abs(n - avg) for n in numbers]) / len(numbers)\n",
        "num_ids": 39
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if delimeter == 0:\n        return []\n    if delimeter > 0:\n        i = 0\n        while i < len(numbers) - 1:\n            if i == 0:\n                numbers.insert(0, delimeter)\n                return numbers\n            elif numbers[i] + 1 == numbers[i + 1]:\n                numbers.insert(i + 2, delimeter)\n                i += 3\n            else:\n                numbers.insert(i + 1, delimeter)\n                i += 2\n    else:\n        i = 0\n        while i < len(numbers) - 1:\n            if i == 0:\n                numbers.append(delimeter)\n                return numbers\n            elif numbers[i] + 1 == numbers[i + 1]:\n                numbers.insert(i + 2, delimeter)\n                i += 3\n            else:\n                numbers.insert(i + 1, delimeter)\n                i += 2\n",
        "num_ids": 223
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 15
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert numbers, 'The input list `numbers` is empty.'\n    assert delimeter, 'The delimeter `delimeter` is not specified.'\n    assert all(isinstance(x, int) for x in numbers), 'The input list `numbers` must only contain integers.'\n    assert delimeter >= 0, 'The delimeter `delimeter` must be a non-negative integer.'\n",
        "num_ids": 89
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(map(lambda _: delimeter, reversed(numbers)))\n",
        "num_ids": 19
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(numbers) == 1:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Base cases\n    if not numbers:\n        return numbers\n    if len(numbers) == 1:\n        return [delimeter] + numbers\n    if len(numbers) == 2:\n        return [numbers[0]] + [delimeter] + [numbers[1]]\n",
        "num_ids": 68
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    out = []\n    for i in range(len(numbers) - 1):\n        out.append(numbers[i])\n        out.append(delimeter)\n        out.append(numbers[i + 1])\n    return out\n",
        "num_ids": 58
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n            result.append(delimeter)\n            continue\n        elif i == len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n            continue\n        else:\n            result.append(numbers[i])\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # list of lists\n    inter_numbers = []\n    length = len(numbers)\n    if length <= 1:\n        return numbers\n    # if delimeter is 1, just return the input list\n    if delimeter == 1:\n        return numbers\n",
        "num_ids": 61
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(numbers) == 0:\n        return []\n    return [delimeter] + numbers + [delimeter]\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    paren_stack = []\n    result = []\n    for paren in paren_string.split(' '):\n        if paren == '(':\n            paren_stack.append(1)\n        elif paren == ')':\n            while paren_stack and paren_stack[-1]!= 0:\n                paren_stack.pop()\n            paren_stack.pop()\n        else:\n            paren_stack.append(0)\n    for i in range(len(paren_stack)):\n        result.append(paren_stack[i])\n    return result\n",
        "num_ids": 136
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    final_string = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            open_paren = 1\n            while paren_string[i]!= ')':\n                i += 1\n                if paren_string[i] == '(':\n                    open_paren += 1\n                elif paren_string[i] == ')':\n                    open_paren -= 1\n            final_string.append(open_paren)\n            i += 1\n        i += 1\n    return final_string\n",
        "num_ids": 134
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return_list = []\n    depth = 0\n    for i in paren_string:\n        if i == '(':\n            depth += 1\n        elif i == ')':\n            depth -= 1\n        else:\n            continue\n        if depth > return_list[-1]:\n            return_list.append(depth)\n    return return_list\n",
        "num_ids": 84
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    paren_stack = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_stack.append(0)\n        elif paren == ')':\n            paren_stack.pop()\n        else:\n            paren_stack.append(1)\n    return paren_stack\n",
        "num_ids": 76
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_level = 0\n    level = 0\n    result = []\n",
        "num_ids": 18
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_nested_parens = []\n",
        "num_ids": 12
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if paren_string == \"\":\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    nested_parens = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(0)\n        elif char == ')':\n            level = 0\n            while stack and stack[-1]!= '(':\n                level += stack.pop()\n            stack.pop()\n            if not stack:\n                nested_parens.append(level + 1)\n    return nested_parens\n",
        "num_ids": 109
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    paren_stack = []\n    res = []\n",
        "num_ids": 13
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Remove trailing and leading whitespaces\n    paren_string = paren_string.strip()\n",
        "num_ids": 23
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [string for string in strings if substring in string]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not strings:\n        return strings\n    return list(filter(lambda string: substring in string, strings))\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [s for s in strings if substring in s]\n",
        "num_ids": 16
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    substring_indexes = []\n    substring_search = substring.lower()\n    for i in range(len(strings)):\n        if strings[i].lower().find(substring_search) >= 0:\n            substring_indexes.append(i)\n",
        "num_ids": 65
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 41
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(filter(lambda s: substring in s, strings))\n",
        "num_ids": 18
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return list(filter(lambda x: substring in x, strings))\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    product = 1\n    for num in numbers:\n        total += num\n        product *= num\n    return (total, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n",
        "num_ids": 53
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum = 0\n    prod = 1\n    for n in numbers:\n        sum += n\n        prod *= n\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = (0, 1)\n    if len(numbers) == 0:\n        return result\n    else:\n        result = (sum(numbers) * result[1], result[0] * result[1] * numbers[0])\n        numbers.pop(0)\n        return sum_product(numbers)\n",
        "num_ids": 77
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(numbers)\n    if n == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), n * (n + 1) // 2)\n",
        "num_ids": 48
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n",
        "num_ids": 37
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num_sum = 0\n    num_prod = 1\n",
        "num_ids": 16
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum(numbers), prod(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(numbers) == 0:\n        return (0, 1)\n",
        "num_ids": 20
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum_ = 0\n    prod = 1\n    for i in numbers:\n        sum_ += i\n        prod *= i\n    return (sum_, prod)\n",
        "num_ids": 42
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    for i in range(len(numbers)):\n        if not res or res[-1] < numbers[i]:\n            res.append(numbers[i])\n        else:\n            res.append(max(res[-1], numbers[i]))\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    max_seq = numbers[:]\n    for i in range(1, len(numbers)):\n        max_seq[i] = max(max_seq[i - 1], numbers[i])\n    return max_seq\n",
        "num_ids": 54
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    results = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        results.append(current_max)\n    return results\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return list(map(lambda i: max(numbers[i:i + 1]), range(len(numbers))))\n",
        "num_ids": 29
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not numbers:\n        return []\n    result = []\n    # We can initiate the result with the first element in the list\n    result.append(numbers[0])\n    # We can initiate the value of the max with the first element in the list\n    max_value = numbers[0]\n    for num in numbers[1:]:\n        # If the current value is greater than the max value found so far, it is now the new max value\n        if num > max_value:\n            max_value = num\n        # The max value found so far is now the max value of the previous rolling maximum elements\n        result.append(max_value)\n    return result\n",
        "num_ids": 154
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    current = max_ = numbers[0]\n    for num in numbers:\n        if num > current:\n            current = num\n        else:\n            current = max_\n        result.append(current)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for i in range(len(numbers)):\n        # The max so far\n        cur_max = max(numbers[:i + 1])\n        result.append(cur_max)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(numbers) == 1:\n        return numbers\n",
        "num_ids": 16
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    cur_max = 0\n",
        "num_ids": 13
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    maximum = numbers[0]\n    out = []\n    out.append(maximum)\n    for i in range(1, len(numbers)):\n        maximum = max(maximum, numbers[i])\n        out.append(maximum)\n    return out\n",
        "num_ids": 61
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Find the longest postfix of supplied string that is a palindrome.\n    # Linear search (postfix must be palindrome, otherwise raise an error)\n    for i in range(len(string)):\n        if is_palindrome(string[i:]) == True:\n            string = string[:i] + string[i + 1:]\n            break\n",
        "num_ids": 86
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string = list(string)\n",
        "num_ids": 9
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefix = suffix = ''\n    while string:\n        suffix, prefix = prefix + string, string\n        if is_palindrome(suffix):\n            return prefix\n",
        "num_ids": 41
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not string:\n        return ''\n    \n    # Find longest prefix that is a palindrome\n    prefix = string[:len(string)//2]\n    while prefix and not is_palindrome(prefix):\n        prefix = prefix[:-1]\n    \n    if prefix:\n        # Append the prefix to the end of the string\n        return string + prefix\n    else:\n        return string\n",
        "num_ids": 96
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # find the longest palindrome\n    longest_palindrome = ''\n    for index, letter in enumerate(string):\n        longest_palindrome = max(longest_palindrome, letter + helper(string, index), key=len)\n",
        "num_ids": 62
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    if string[0] == string[-1]:\n        # No need to reverse the string if the first and last characters are the same\n        return make_palindrome(string[1:-1]) + string[-1]\n    suffix_palindrome = ''.join(reversed(list(string)))\n    return make_palindrome(string[:-1]) + suffix_palindrome\n",
        "num_ids": 119
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # handle special cases\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n",
        "num_ids": 35
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if string == '':\n        return string\n",
        "num_ids": 12
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    substr = substr_palindrome(string)\n    return ''.join(string[:len(substr)] + substr[::-1])\n",
        "num_ids": 36
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # I could have also done this using a stack, but this is easier to read\n    # I'm using a recursive function that calls itself until the answer is found\n    # A bit tricky to think of and why I'd do this in a way that is easy to understand\n    # However, I think of it the most intuitive way and that's why I chose to do this\n    if not string:\n        return ''\n    # get the longest suffix that is a palindrome\n    i = len(string) - 1\n    while i > 0 and not is_palindrome(string[i:]):\n        i -= 1\n    if i == 0:\n        return string\n    # find the prefix that comes before the suffix and append it to the end\n    # then reverse the prefix\n    prefix = string[:i]\n    suffix = string[i:]\n    return suffix + prefix[::-1]\n",
        "num_ids": 203
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert len(a) == len(b)\n    res = \"\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            res += '1'\n        else:\n            res += '0'\n    return res\n",
        "num_ids": 65
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(int(a[i])^int(b[i])) for i in range(len(a))])\n",
        "num_ids": 35
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([str(int(a_bit) ^ int(b_bit)) for a_bit, b_bit in zip(a, b)])\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return ''.join([str(int(a) ^ int(b)) for i in range(len(a))])\n",
        "num_ids": 29
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([str(int(a_i) ^ int(b_i)) for a_i, b_i in zip(a, b)])\n",
        "num_ids": 39
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    xor = 0\n    length = len(a)\n    for i in range(length):\n        xor += (ord(a[i]) ^ ord(b[i]))\n    return str(bin(xor))[2:]\n",
        "num_ids": 57
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    a_bin = str(bin(int(a, 2)))\n    b_bin = str(bin(int(b, 2)))\n    ans = ''\n    for i in range(1, len(a_bin)):\n        if a_bin[i] == b_bin[i]:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans\n",
        "num_ids": 92
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a_bin = \"{0:b}\".format(int(a, 2))\n    b_bin = \"{0:b}\".format(int(b, 2))\n    xor_bin = ''.join(['1' if a_bin[i]!= b_bin[i] else '0' for i in range(len(a_bin))])\n    return xor_bin\n",
        "num_ids": 93
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    longest_string = None\n    for string in strings:\n        if len(string) > len(longest_string) or (len(string) == len(longest_string) and string < longest_string):\n            longest_string = string\n    return longest_string\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        return strings[0] if strings[0] > strings[1] else strings[1]\n    if len(strings) == 3:\n        return strings[0] if strings[0] > strings[1] else strings[1] if strings[1] > strings[2] else strings[2]\n    length = 1\n    start = 0\n    result = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) > length:\n            result = strings[i]\n            length = len(strings[i])\n            start = i\n    return result\n",
        "num_ids": 178
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    if len(strings) == 2:\n        return strings[1] if len(strings[0]) > len(strings[1]) else strings[0]\n    if len(strings) == 3:\n        return strings[2] if len(strings[0]) > len(strings[2]) else strings[0]\n    \n    current_longest = strings[0]\n    current_longest_index = 0\n    \n    for i in range(1, len(strings)):\n        if len(strings[i]) > len(current_longest):\n            current_longest = strings[i]\n            current_longest_index = i\n    return current_longest\n",
        "num_ids": 188
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(strings) == 0:\n        return None\n    else:\n        tmp = strings[0]\n        for string in strings:\n            if len(string) >= len(tmp):\n                tmp = string\n        return tmp\n",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    len_ = lambda string: len(string)\n    if len(strings) == 0:\n        return None\n    longest_str = max(strings, key=len_)\n    return longest_str\n",
        "num_ids": 49
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(strings) == 0:\n        return None\n    max_length = 0\n    max_string = strings[0]\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string\n",
        "num_ids": 74
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = []\n    for s in strings:\n        lst.append((s,len(s)))\n    lst.sort(key=lambda x:x[1])\n    res = lst[0][0]\n    for i in range(len(lst)):\n        if lst[i][1] > len(res):\n            res = lst[i][0]\n    if len(strings) > 0:\n        return res\n    else:\n        return None\n",
        "num_ids": 115
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        max_length = max([len(string) for string in strings])\n        return max([string for string in strings if len(string) == max_length], key=len)\n",
        "num_ids": 73
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not strings:\n        return None\n    return_string = strings[0]\n    for i in strings:\n        if len(i) > len(return_string):\n            return_string = i\n    return return_string\n",
        "num_ids": 55
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for i in range(1, len(strings)):\n        if len(longest_string) < len(strings[i]):\n            longest_string = strings[i]\n    return longest_string\n",
        "num_ids": 75
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    while b:\n        a, b = b, a%b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    while b:\n        a, b = b, a % b\n",
        "num_ids": 17
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == 0 or b == 0:\n        raise ValueError(\"Enter two positive integers\")\n    elif a == b:\n        return a\n    elif a > b:\n        return greatest_common_divisor(a-b, b)\n    else:\n        return greatest_common_divisor(a, b-a)\n    \n    \n",
        "num_ids": 85
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    while a!= b:\n        a, b = max(a, b), min(a, b)\n        if a % b == 0:\n            a = a // b\n    return a\n",
        "num_ids": 47
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    while b:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 21
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a >= b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)\n",
        "num_ids": 46
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    while b!= 0:\n        a, b = b, a % b\n    return a\n",
        "num_ids": 24
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    while a!= 0 and b!= 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b\n",
        "num_ids": 45
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    while b:\n        a, b = b, a % b\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    res = []\n    for i in range(len(string)):\n        res.append(string[:i + 1])\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    output_list = []\n    if not string:\n        return output_list\n    for i in range(len(string)):\n        output_list.append(string[:i+1])\n    return output_list\n",
        "num_ids": 53
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prefixes = []\n    for i in range(len(string) + 1):\n        prefixes.append(string[0:i])\n    return prefixes\n",
        "num_ids": 39
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    prefix_list = []\n    for index in range(1, len(string) + 1):\n        prefix_list.append(string[:index])\n    return prefix_list\n",
        "num_ids": 43
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n",
        "num_ids": 44
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes\n",
        "num_ids": 38
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    for i in range(len(string)):\n        result.append(string[:i + 1])\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return _all_prefixes(string, 0)\n",
        "num_ids": 14
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0:\n        return '0'\n    else:\n        return '{0} {1}'.format(n, string_sequence(n - 1))\n",
        "num_ids": 41
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = int(n)\n    if n == 0:\n        return '0'\n    else:\n        s =''\n        s += str(0) +''\n        s +=''.join(str(i) for i in range(1, n+1))\n        return s\n",
        "num_ids": 68
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return''.join([f'{i}' for i in range(n + 1)])\n",
        "num_ids": 23
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return''.join(map(str, range(0, n+1)))\n",
        "num_ids": 19
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return''.join(f'{i}' for i in range(n + 1))\n",
        "num_ids": 22
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return''.join(map(str, range(n + 1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return''.join(str(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = ''\n    for i in range(n + 1):\n        s = s + str(i) +''\n    return s.strip()\n",
        "num_ids": 36
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return''.join(map(str, range(n + 1)))\n",
        "num_ids": 17
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return''.join([str(x) for x in range(0, n+1)])\n",
        "num_ids": 23
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for char in string:\n        if char.lower() == char:\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Make a dictionary with each character as the key and the count of that character as the value\n    # Note: when a character is found, increase the count of that character in the dictionary\n    # Return the final number of distinct characters in the string\n    counts = dict()\n    for char in string:\n        if char.isalpha():\n            # if character is alpha (i.e. a letter), increase count by 1\n            counts[char.lower()] = counts.get(char.lower(), 0) + 1\n        else:\n            # if character is not alpha, just increment the count\n            counts[char.lower()] = counts.get(char.lower(), 0) + 1\n    return len(counts)\n",
        "num_ids": 167
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # character count will be unique in case of multiple spaces\n    # we can use a dict to count distinct characters\n    return len(set(string.lower().replace(' ', '')))\n",
        "num_ids": 42
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(set(string.lower()))\n",
        "num_ids": 13
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(set(string))\n",
        "num_ids": 10
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    characters = set()\n    for char in string:\n        characters.add(char.lower() if char.isupper() else char.upper())\n    return len(characters)\n",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for char in string:\n        if not char.isalpha():\n            continue\n        if char.islower():\n            if not char.lower() == char:\n                count += 1\n        if char.isupper():\n            if not char.upper() == char:\n                count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # count the number of occurences for each character\n    result = {}\n    for character in string:\n        if character in result:\n            result[character] += 1\n        else:\n            result[character] = 1\n    return len(result.keys())\n",
        "num_ids": 62
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = []\n    for i in music_string:\n        if i == 'o':\n            res.append(4)\n        elif i == 'o|':\n            res.append(2)\n        elif i == '.':\n            res.append(1)\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    music_list = []\n    note = 0\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(map(int, music_string.split()))\n",
        "num_ids": 17
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # we are going to take each character and convert it to ascii values\n    # 0 = 'o'\n    # 1 = '|'\n    # 2 = '.'\n    # 3 = '|'\n    # 4 = 'o'\n    # 5 = '|'\n    # 6 = '|'\n    # 7 = 'o'\n    # 8 = '|'\n    # 9 = '|'\n    # 10 = 'o'\n    # 11 = '|'\n    # 12 = 'o'\n    # 13 = '|'\n    # 14 = 'o'\n    # 15 = '|'\n",
        "num_ids": 146
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    list_of_beats = []\n    if len(music_string) == 0:\n        return list_of_beats\n    if music_string[0] == '.':\n        list_of_beats.append(1)\n        music_string = music_string[1:]\n    if music_string[0] == '|':\n        list_of_beats.append(2)\n        music_string = music_string[1:]\n    if music_string[0] == 'o':\n        list_of_beats.append(4)\n        music_string = music_string[1:]\n    if music_string[0] == '|':\n        list_of_beats.append(2)\n        music_string = music_string[1:]\n    if music_string[0] == '.':\n        list_of_beats.append(1)\n        music_string = music_string[1:]\n    if music_string[0] == '|':\n        list_of_beats.append(2)\n        music_string = music_string[1:]\n    if music_string[0] == 'o':\n        list_of_beats.append(4)\n        music_string = music_string[1:]\n    if music_string[0] == '|':\n        list_of_beats.append(2)\n        music_string = music_string[1:]\n    if music_string[0] == '.':\n        list_of_beats.append(1)\n        music_string = music_string[1:]\n    if music_string[0] == '|':\n        list_of_beats.append(2)\n        music_string = music_string[1:]\n    if music_string[0] == 'o':\n        list_of_beats.append(4)\n        music_string = music_string[1:]\n    return list_of_beats\n",
        "num_ids": 459
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    new_music = []\n    for i in music_string:\n        if i == 'o' or i == '.':\n            new_music.append(4)\n        if i == 'o|':\n            new_music.append(2)\n        if i == '|.':\n            new_music.append(1)\n    return new_music\n",
        "num_ids": 85
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    chars = ['o', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', 'o|', 'o', 'o|', '.', 'o|', 'o|', '.', 'o', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.', 'o|', 'o|', '.'",
        "num_ids": 1024
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    output = list()\n    beats_parsed = 0\n    notes = 0\n    for i in music_string:\n        if i == 'o':\n            output.append(4)\n            beats_parsed += 4\n            notes += 1\n        elif i == 'o|':\n            output.append(2)\n            beats_parsed += 2\n            notes += 1\n        elif i == '.':\n            output.append(1)\n            beats_parsed += 1\n            notes += 1\n        elif i == '|':\n            output.append(1)\n            beats_parsed += 1\n            notes += 1\n        else:\n            raise ValueError('Wrong symbol: {}'.format(i))\n    return output\n",
        "num_ids": 183
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    notes_list = music_string.split()\n    return_list = []\n    for note in notes_list:\n        if note == 'o' or note == 'o|':\n            return_list.append(4)\n        elif note == 'o|' or note == '.|':\n            return_list.append(2)\n        else:\n            return_list.append(1)\n",
        "num_ids": 94
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return music_string.count('|')\n",
        "num_ids": 12
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(get_substring_indexes(string, substring))\n",
        "num_ids": 19
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    index = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert substring!= ''\n    return string.count(substring)\n",
        "num_ids": 19
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    occurrences = 0\n    \n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            occurrences += 1\n    return occurrences\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert substring!= ''\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            times += 1\n    return times\n",
        "num_ids": 61
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(list(filter(lambda x: x == substring, string)))\n",
        "num_ids": 20
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # first try with an int\n    times = string.count(substring)\n    # then try with a generator expression\n    # times = sum(1 for char in string if char == substring)\n    return times\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if string == \"\":\n        return 0\n    if substring == \"\":\n        return 0\n    return string.count(substring)\n",
        "num_ids": 34
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.count(substring) + string.count(substring.lower())\n",
        "num_ids": 21
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return string.count(substring)\n",
        "num_ids": 11
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \" \".join(sorted(numbers.split(), key=int))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_string = \"\"\n    numbers = numbers.split()\n    for item in numbers:\n        if item == \"zero\":\n            new_string = new_string + \"one\"\n        elif item == \"one\":\n            new_string = new_string + \"two\"\n        elif item == \"two\":\n            new_string = new_string + \"three\"\n        elif item == \"three\":\n            new_string = new_string + \"four\"\n        elif item == \"four\":\n            new_string = new_string + \"five\"\n        elif item == \"five\":\n            new_string = new_string + \"six\"\n        elif item == \"six\":\n            new_string = new_string + \"seven\"\n        elif item == \"seven\":\n            new_string = new_string + \"eight\"\n        elif item == \"eight\":\n            new_string = new_string + \"nine\"\n        elif item == \"nine\":\n            new_string = new_string + \"zero\"\n        else:\n            new_string = new_string + item\n    return new_string\n",
        "num_ids": 264
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    num = numbers.split()\n    num.sort()\n    print(num)\n    \n    return''.join(num)\n",
        "num_ids": 31
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    numbers = numbers.split()\n    count = {'zero': 0, 'one': 0, 'two': 0, 'three': 0, 'four': 0, 'five': 0,'six': 0,'seven': 0, 'eight': 0, 'nine': 0}\n    for i in range(len(numbers)):\n        count[numbers[i]] += 1\n    ans = ''\n    for i in range(len(count)):\n        if count[str(i)]!= 0:\n            for j in range(count[str(i)]):\n                ans += str(i)\n    return ans\n",
        "num_ids": 143
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if numbers == '':\n        return ''\n    str_num = ''\n    for i in range(len(numbers)):\n        if numbers[i] =='':\n            continue\n        if numbers[i] == '0' or numbers[i] == '1' or numbers[i] == '2' or numbers[i] == '3' or numbers[i] == '4' or numbers[i] == '5' or numbers[i] == '6' or numbers[i] == '7' or numbers[i] == '8' or numbers[i] == '9':\n            str_num += numbers[i]\n        if numbers[i] == '0' or numbers[i] == '1' or numbers[i] == '2' or numbers[i] == '3' or numbers[i] == '4' or numbers[i] == '5' or numbers[i] == '6' or numbers[i] == '7' or numbers[i] == '8' or numbers[i] == '9':\n            str_num += '0'\n    return''.join(sorted(str_num.split()))\n",
        "num_ids": 264
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #numbers = 'one two three four five six seven eight nine'.split(' ')\n    sorted_numbers = 'zero one two three four five six seven eight nine'.split(' ')\n    for index, number in enumerate(sorted_numbers):\n        if number == numbers:\n            #print(index)\n            sorted_numbers.pop(index)\n            sorted_numbers.insert(index, numbers)\n            #print(sorted_numbers)\n    return''.join(sorted_numbers)\n    #return sorted_numbers\n",
        "num_ids": 133
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    numbers = numbers.split()\n",
        "num_ids": 12
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    numbers = list(numbers)\n    numbers.sort()\n    return''.join(numbers)\n",
        "num_ids": 27
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    numbers = numbers.split()\n    output = \"\"\n    for number in numbers:\n        if number in \"zero one two three four five six seven eight nine\".split():\n            output = output + number + \" \"\n    return output\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \" \".join(sorted(numbers.split()))\n",
        "num_ids": 17
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    largest = numbers[0]\n    smallest = numbers[0]\n    for num in numbers:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return (smallest, largest)\n",
        "num_ids": 59
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    diff = float('inf')  # The difference, initially, between any two numbers.\n    lowest_diff = float('inf')\n    lowest_index = None\n    for i in range(len(numbers)):\n        diff = numbers[i] - numbers[lowest_index]\n        if diff < lowest_diff:\n            lowest_diff = diff\n            lowest_index = i\n",
        "num_ids": 94
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(numbers) < 2:\n        raise ValueError(\"list must contain at least 2 numbers\")\n",
        "num_ids": 26
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(numbers)\n    assert n > 1\n    assert all(x >= 0 and x < n for x in numbers)\n    \n    return min(numbers), max(numbers)\n",
        "num_ids": 48
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # close_1, close_2 = None, None\n    # closest_to_1, closest_to_2 = None, None\n    # min_distance = None\n    #\n    # # for each of the numbers in the list (at least 2)\n    # for i in range(len(numbers)):\n    #     # for each of the numbers (at least 2) in the list\n    #     for j in range(i, len(numbers)):\n    #         # calculate the distance between the two numbers\n    #         distance = abs(numbers[i] - numbers[j])\n    #         # if the distance is smaller than the previous closest\n    #         if min_distance == None or distance < min_distance:\n    #             # if we haven't found any closest yet\n    #             if closest_to_1 == None or distance < closest_to_1:\n    #                 # set the closest to 1 and the new closest_to_1\n    #                 closest_to_1, closest_to_2 = numbers[i], numbers[j]\n    #                 min_distance = distance\n    #\n    # return (closest_to_1, closest_to_2)\n",
        "num_ids": 280
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(numbers) < 2:\n        raise ValueError('Length of list must be at least two.')\n    minimum = abs(numbers[0] - numbers[1])\n    minimum_index = 0\n    maximum = abs(numbers[0] - numbers[1])\n    maximum_index = 0\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < minimum:\n            minimum = abs(numbers[i] - numbers[i - 1])\n            minimum_index = i - 1\n        if abs(numbers[i] - numbers[i - 1]) > maximum:\n            maximum = abs(numbers[i] - numbers[i - 1])\n            maximum_index = i - 1\n    return (numbers[minimum_index], numbers[maximum_index])\n",
        "num_ids": 200
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Sort the list first\n    numbers.sort()\n    # Get the first element in the list\n    first_element = numbers[0]\n    # Now go through the list and for each element, calculate the distance from the first element\n    # to the other elements and keep track of the minimum distance\n    min_distance = numbers[1] - first_element\n    min_distance_index = 0\n    for i in range(1, len(numbers) - 1):\n        if numbers[i] - first_element < min_distance:\n            min_distance = numbers[i] - first_element\n            min_distance_index = i\n    # Now return the two elements that are closest in distance to the first element\n    return (first_element, numbers[min_distance_index])\n",
        "num_ids": 181
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    min_distance = 100000000000\n    min_index = -1\n    for i in range(len(numbers)):\n        curr_distance = abs(numbers[i] - numbers[i + 1])\n        if curr_distance < min_distance:\n            min_distance = curr_distance\n            min_index = i\n    return (numbers[min_index], numbers[min_index + 1])\n",
        "num_ids": 100
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    dist_1 = abs(numbers[0] - numbers[1])\n    dist_2 = abs(numbers[0] - numbers[2])\n    dist_3 = abs(numbers[1] - numbers[2])\n    if dist_1 <= dist_2 and dist_1 <= dist_3:\n        return numbers[0], numbers[1]\n    elif dist_2 <= dist_1 and dist_2 <= dist_3:\n        return numbers[1], numbers[2]\n    elif dist_3 <= dist_1 and dist_3 <= dist_2:\n        return numbers[2], numbers[0]\n    else:\n        raise ValueError(\"invalid list provided!\")\n",
        "num_ids": 163
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Select two numbers (close to each other) and return them\n    largest_number = max(numbers)\n    closest_elements = []\n    for num in numbers:\n        if num == largest_number:\n            closest_elements.append(num)\n    return min(closest_elements), max(closest_elements)\n",
        "num_ids": 87
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check if the list has at least two elements\n    assert len(numbers) > 1, \"The list must have more than one element\"\n    # Sort the list\n    numbers.sort()\n    # Loop through the list\n    for i in range(len(numbers)):\n        # For each element, make the number between 0 and 1\n        numbers[i] = (numbers[i] - min(numbers)) / (max(numbers) - min(numbers))\n    # Return the transformed list\n    return numbers\n",
        "num_ids": 125
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled_numbers = []\n",
        "num_ids": 33
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    max_number = max(numbers)\n    min_number = min(numbers)\n",
        "num_ids": 25
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_ = min(numbers)\n    max_ = max(numbers)\n    assert min_ < max_\n    if min_ == max_:\n        return [0.0,] * len(numbers)\n    else:\n        return [x / max_ for x in numbers]\n",
        "num_ids": 70
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]\n",
        "num_ids": 30
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    minimum = min(numbers)\n    maximum = max(numbers)\n    assert minimum <= maximum, \"minimum > maximum\"\n    minimum_unit = 0\n    maximum_unit = 1\n    if minimum!= maximum:\n        ratio = (maximum_unit - minimum_unit) / (maximum - minimum)\n        rescaled = [(number - minimum) * ratio + minimum_unit for number in numbers]\n        return rescaled\n    else:\n        return numbers\n",
        "num_ids": 108
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_number = max(numbers)\n    min_number = min(numbers)\n    result = []\n    if max_number == min_number:\n        for i in range(len(numbers)):\n            result.append(0.5)\n    else:\n        for i in range(len(numbers)):\n            result.append((numbers[i] - min_number) / (max_number - min_number))\n    return result\n",
        "num_ids": 109
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (numbers - min(numbers)) / (max(numbers) - min(numbers))\n",
        "num_ids": 26
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # we assume at least 2 elements\n    n = len(numbers)\n    min_num = min(numbers)\n    max_num = max(numbers)\n    new_numbers = []\n    for num in numbers:\n        if num == min_num:\n            new_numbers.append(0.0)\n        elif num == max_num:\n            new_numbers.append(1.0)\n        else:\n            new_numbers.append(num)\n    return new_numbers\n",
        "num_ids": 123
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n    \ndef filter_negative(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers with negative values\n    >>> filter_negative(['a', -3.14, -5])\n    [-5]\n    >>> filter_negative([1, 2, 3, 'abc', {}, []])\n    []\n    \"\"\"\n    result = []\n    for item in values:\n        if isinstance(item, int) and item < 0:\n            result.append(item)\n    return result\n",
        "num_ids": 160
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for val in values:\n        if type(val) is int:\n            result.append(val)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids": 20
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [int(value) for value in values if isinstance(value, int)]\n",
        "num_ids": 21
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = []\n    for item in values:\n        if isinstance(item, int):\n            result.append(item)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n",
        "num_ids": 29
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(string)\n",
        "num_ids": 8
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    while n % 2 == 0:\n        n /= 2\n    while n % 5 == 0:\n        n /= 5\n    return int(n)\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return 1\n    else:\n        divisor = 2\n        while divisor <= n:\n            if n % divisor == 0:\n                return divisor\n            divisor += 1\n",
        "num_ids": 56
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(n // i for i in range(1, n+1) if n % i == 0)\n",
        "num_ids": 27
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    divisor = 1\n    while n%divisor!= 0:\n        divisor += 1\n    return divisor\n",
        "num_ids": 33
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n % 2 == 0:\n        return n // 2\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n",
        "num_ids": 40
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n > 0\n    if n == 1:\n        return 1\n    x = n\n    while True:\n        x = x//n\n        if x == 1:\n            return n\n        if x == 1 or x == n:\n            return x\n",
        "num_ids": 61
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return 1\n    for i in range(2, n+1):\n        if n%i == 0:\n            return i\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    div = 2\n    while div < n:\n        if n % div == 0:\n            return div\n        div += 1\n    return n\n",
        "num_ids": 35
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return max(divisors)\n",
        "num_ids": 49
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    largest_div = 1\n    while n > 0:\n        if n % largest_div == 0:\n            return largest_div\n        else:\n            largest_div += 1\n",
        "num_ids": 43
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return []\n    if n % 2 == 0:\n        return factorize(n // 2) + factorize(n // 2)\n    else:\n        return factorize(3 * n + 1) + factorize(n // 3)\n",
        "num_ids": 63
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #if we know we have factorized it\n    if is_prime(n):\n        return [n]\n    #generate a list of all factors\n    factors = []\n    #check if we have a factor\n    for i in range(1,n+1):\n        #if so, we have added it to the list\n        if is_prime(i):\n            factors.append(i)\n        #if not, we check if there is a factor that is prime and not equal to i\n        else:\n            for j in range(i, n+1, i):\n                #if so, we have added it to the list\n                if is_prime(j) and j!= i:\n                    factors.append(j)\n                    break\n    return factors\n",
        "num_ids": 180
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n//2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            result.append(i)\n            n = n//i\n    if n!= 1:\n        result.append(n)\n    return result\n",
        "num_ids": 95
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    if n == 1:\n        return []\n    \n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n        \n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n            \n    if n > 2:\n        factors.append(n)\n",
        "num_ids": 114
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # See https://www.geeksforgeeks.org/factorial-function-python/\n    # Implement more efficient algorithm to factorize large numbers\n    factors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            # Add the product of factors to the list\n            factors.append(i)\n        i += 1\n    # Return list of factors\n    return factors\n",
        "num_ids": 98
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n",
        "num_ids": 85
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n <= 2:\n        return list(range(1, n + 1))\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = n - 1\n    d = 2\n    factors = []\n    while n > 1:\n        while n % d == 0:\n            factors.append(d)\n            n = n // d\n        if len(factors) > 1:\n            d += 1\n        else:\n            d = 2\n    return factors\n",
        "num_ids": 120
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n < 2:\n        return []\n    n_factors = 2\n    factors = [1, n]\n    while n % n_factors!= 0:\n        n_factors += 1\n        factors.append(n_factors)\n    return factors\n",
        "num_ids": 67
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factors = []\n    if n == 1:\n        return factors\n    \n    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    return factors\n",
        "num_ids": 64
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n /= 2\n    for i in range(3,int(n**0.5)+1,2):\n        while n % i == 0:\n            factors.append(i)\n            n = n/i\n    if n > 2:\n        factors.append(n)\n    return factors\n",
        "num_ids": 97
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(set(numbers))\n    #return list(map(numbers.remove, numbers))\n",
        "num_ids": 26
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for num in numbers:\n        if num in result:\n            pass\n        else:\n            result.append(num)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    seen = []\n    for num in numbers:\n        if num not in seen:\n            seen.append(num)\n    return seen\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # for i in range(1, len(numbers)):\n    #     if numbers[i] == numbers[i - 1]:\n    #         numbers.pop(i)\n    #         numbers.append(numbers[i - 1])\n    # return numbers\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] == numbers[i - 1]:\n            numbers.pop(i)\n    return numbers\n",
        "num_ids": 114
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    seen = set()\n    return[x for x in numbers if not (x in seen or seen.add(x))]\n",
        "num_ids": 30
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    seen = set()\n    new_list = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            new_list.append(n)\n    return new_list\n",
        "num_ids": 53
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    unique = []\n    for number in numbers:\n        if number not in unique:\n            unique.append(number)\n    return unique\n",
        "num_ids": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = []\n    seen = set()\n    for n in numbers:\n        if n in seen:\n            continue\n        seen.add(n)\n        result.append(n)\n    return result\n",
        "num_ids": 49
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for i in numbers:\n        if i not in res:\n            res.append(i)\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # results = []\n    # for char in string:\n    #     if char.islower():\n    #         results.append(char.upper())\n    #     else:\n    #         results.append(char.lower())\n    # return ''.join(results)\n",
        "num_ids": 65
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return string.lower().upper() + string.lower().upper()\n",
        "num_ids": 17
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return string.lower() + string.upper()[::-1]\n",
        "num_ids": 18
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(char.swapcase() if char.islower() else char.swapcase() for char in string)\n",
        "num_ids": 32
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return string.upper() if string.islower() else string.lower()\n",
        "num_ids": 19
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return string.swapcase()",
        "num_ids": 9
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return string.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(string)):\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n",
        "num_ids": 80
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = \"\"\n    for string in strings:\n        result += string\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + ''.join(strings[1:])\n",
        "num_ids": 32
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return \"\".join(strings)\n    \n",
        "num_ids": 12
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join(strings)\n",
        "num_ids": 10
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(strings) == 0:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 32
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if strings == []:\n        return ''\n    return strings[0] + concatenate(strings[1:])\n",
        "num_ids": 29
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(prefix) == 0:\n        return strings\n    else:\n        return list(filter(lambda x: x.startswith(prefix), strings))\n",
        "num_ids": 39
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [string for string in strings if string.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    output = []\n    for string in strings:\n        if string.startswith(prefix):\n            output.append(string)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    filtered_list = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_list.append(string)\n    return filtered_list\n",
        "num_ids": 44
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
        "num_ids": 21
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "num_ids": 44
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    filtered = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered.append(string)\n",
        "num_ids": 34
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return filter(lambda x: x.startswith(prefix), strings)\n",
        "num_ids": 19
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [s for s in strings if s.startswith(prefix)]\n",
        "num_ids": 19
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for x in l:\n        if x > 0:\n            result.append(x)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [x for x in l if x >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [x for x in l if x > 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(filter(lambda n: n > 0, l))\n",
        "num_ids": 17
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [i for i in l if i >= 0]\n",
        "num_ids": 15
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n",
        "num_ids": 32
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \nprint(\"You can see all the prime numbers below:\")\nprint(find_primes(10000))\n",
        "num_ids": 65
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 2:\n        return True\n    if n <= 3 or n % 2 == 0:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n",
        "num_ids": 78
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    assert n > 0, 'n must be a positive integer'\n",
        "num_ids": 16
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n >= 0\n    # TODO: Implement this function.\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 2:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return False\n    for k in range(2, n):\n        if n % k == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(xs) - 1, 0, -1):\n        if xs[i - 1] < 0:\n            break\n    else:\n        return []\n",
        "num_ids": 44
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i, _ in enumerate(xs):\n        if xs[i] == 0:\n            return xs[i+1]\n        else:\n            return None\n",
        "num_ids": 42
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    assert len(xs) % 2 == 0\n    assert all(map(lambda x: x!= 0, xs))\n",
        "num_ids": 30
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return -xs[1] / (2 * xs[0])\n",
        "num_ids": 18
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    xs.sort(reverse=True)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            break\n    for j in range(i, len(xs)):\n        if xs[j]!= 0:\n            return -sum([math.pow(x, j) for x in xs]) / xs[j]\n",
        "num_ids": 91
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if xs:\n        return (0, poly(xs, 0))[xs[-1] == 0]\n    return None\n",
        "num_ids": 32
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert(len(xs) % 2 == 0 and len(xs) > 1)\n    coeffs = []\n    for i in range(1, len(xs), 2):\n        if xs[i]!= 0:\n            coeffs.append(xs[i])\n            break\n",
        "num_ids": 70
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(xs) % 2 == 0, \"xs has to be a list of even length.\"\n",
        "num_ids": 24
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    i = 0\n    while i < len(xs):\n        if xs[i] == 0:\n            return i\n        i += 1\n    return None\n",
        "num_ids": 39
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            return xs[i]\n    return -999999\n",
        "num_ids": 37
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l1 = l[:]\n    for i in range(len(l1)):\n        if i % 3 == 0:\n            continue\n        else:\n            l1[i], l1[i-1] = l1[i-1], l1[i]\n    return l1\n",
        "num_ids": 70
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #define a list of indicies where l[i] is not divisible by 3\n    not_div_by_3 = [i for i in range(len(l)) if l[i] % 3!= 0]\n    #define a list of indicies where l[i] is divisible by 3\n    div_by_3 = [i for i in range(len(l)) if l[i] % 3 == 0]\n    #add the indicies not_div_by_3 to the end of l'\n    l' = l + not_div_by_3\n    #sort the indicies div_by_3 and add their values to l'\n    l' += sorted(div_by_3, key=lambda k: l[k])\n    #remove the indicies from l not_div_by_3 from the beginning of l'\n    l' = l'[len(not_div_by_3):]\n    return l'\n",
        "num_ids": 222
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) % 3!= 0:\n        l.append(l[-1])\n    return sorted(l, key=lambda x: x if x % 3!= 0 else l[x])\n",
        "num_ids": 50
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l.sort()\n    l2 = []\n    for i in range(0, len(l)):\n        if i % 3!= 0:\n            l2.append(l[i])\n    return l2\n",
        "num_ids": 53
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    l_copy = l.copy()\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_copy[i] = l[i]\n    \n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy[i] = l[i]\n    \n    l_copy.sort()\n    return l_copy\n",
        "num_ids": 102
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(sorted([x for x in l if x % 3!= 0], key=lambda x: x % 3)) + list(sorted(l, key=lambda x: x % 3))\n",
        "num_ids": 48
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    l_copy = l.copy()\n    l_copy.sort()\n    l_copy_sorted = l_copy.copy()\n    for i in range(len(l)):\n        if i % 3!= 0:\n            l_copy_sorted.append(l_copy[i])\n    return l_copy_sorted\n",
        "num_ids": 82
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    index = 0\n    l_sorted = []\n    while index < len(l):\n        if index % 3 == 0:\n            l_sorted.append(l[index])\n        else:\n            l_sorted.append(l[index])\n        index += 1\n    return l_sorted\n",
        "num_ids": 74
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_copy = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            continue\n        else:\n            l_copy[i], l_copy[i-1] = l_copy[i-1], l_copy[i]\n    return l_copy\n",
        "num_ids": 76
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(l, key=lambda x: x if x % 3!= 0 else l.index(x))\n",
        "num_ids": 28
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(dict.fromkeys(l))\n",
        "num_ids": 13
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = set(l)\n    return sorted(s)\n",
        "num_ids": 16
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    un = []\n    for i in l:\n        if i not in un:\n            un.append(i)\n    return sorted(un)\n",
        "num_ids": 36
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(set(l))\n",
        "num_ids": 10
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l_list = list(set(l))\n    l_list.sort()\n    return l_list\n",
        "num_ids": 27
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set(l)))\n",
        "num_ids": 12
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    max_num = l[0]\n    for i in range(len(l)):\n        if l[i] > max_num:\n            max_num = l[i]\n    return max_num\n",
        "num_ids": 51
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if l == []:\n        raise ValueError(\"Empty list\")\n    result = l[0]\n    for item in l:\n        if item > result:\n            result = item\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n",
        "num_ids": 32
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max = l[0]\n    for i in range(len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return max(l)\n",
        "num_ids": 8
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    max_element = l[0]\n    for item in l:\n        if item > max_element:\n            max_element = item\n    return max_element\n",
        "num_ids": 40
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_element = 0\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n",
        "num_ids": 48
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not l:\n        raise ValueError('Invalid list.')\n    max_item = l[0]\n    for i in l:\n        if i > max_item:\n            max_item = i\n    return max_item\n",
        "num_ids": 56
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    div_7 = div_13 = 0\n    for i in range(1, n):\n        if i % 11 == 7 or i % 13 == 7:\n            div_7 += 1\n        if i % 11 == 13 or i % 13 == 13:\n            div_13 += 1\n    return div_7, div_13\n",
        "num_ids": 77
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n        if i % 11 == 7 or i % 13 == 7:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(n // i == 7 or n // i == 13 for i in range(1, n + 1))\n",
        "num_ids": 28
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for x in range(1, n+1):\n        if x % 11 == 0 or x % 13 == 0:\n            count += 1\n        else:\n            count += 0\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for i in range(n):\n        if i % 15 == 7 or i % 5 == 0:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([1 for x in range(1, n) if x % 7 == 0 or x % 13 == 0])\n",
        "num_ids": 29
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    for i in range(1,n):\n        if i%13 == 0 or i%11 == 0:\n            if i%7 == 0:\n                count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    if n < 13:\n        return 0\n    n = str(n)\n    if n[-1] == '7':\n        return n.count('7')\n    if n[-1] == 'b':\n        return fizz_buzz(int(n[:-1])) + 1\n    if n[-1] == 'f':\n        return fizz_buzz(int(n[:-1])) + 2\n    if n[-1] =='s':\n        return fizz_buzz(int(n[:-1])) + 3\n    if n[-1] == 'i':\n        return fizz_buzz(int(n[:-1])) + 5\n    if n[-1] == 'l':\n        return fizz_buzz(int(n[:-1])) + 7\n    if n[-1] == 'n':\n        return fizz_buzz(int(n[:-1])) + 8\n    if n[-1] =='m':\n        return fizz_buzz(int(n[:-1])) + 9\n",
        "num_ids": 260
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(1 for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0)\n",
        "num_ids": 31
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l = list(l)\n    for i in range(1, len(l), 2):\n        l[i - 1] = l[i]\n    l = sorted(l[:])\n    return l\n",
        "num_ids": 51
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(l, key=lambda x: x%2, reverse=True)\n",
        "num_ids": 21
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_l = []\n    for i in range(len(l)):\n        if i%2 == 0:\n            new_l.append(l[i])\n    for i in range(len(l)):\n        if i%2!= 0:\n            new_l.append(l[i])\n    return new_l\n",
        "num_ids": 81
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sorted_even = []\n    for i in range(0, len(l), 2):\n        sorted_even.append(l[i])\n    for i in range(1, len(l), 2):\n        sorted_even.append(l[i])\n    return sorted_even\n",
        "num_ids": 71
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even = []\n    odd = []\n",
        "num_ids": 11
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    return l\n",
        "num_ids": 11
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert isinstance(l, list)\n    even_idx = list(range(0, len(l), 2))\n    return [l[i] for i in even_idx] + [l[i] for i in sorted(even_idx) if i not in even_idx]\n",
        "num_ids": 71
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    evens = []\n    odds = []\n",
        "num_ids": 13
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    odd = []\n    even = []\n    for i in range(0, len(l), 2):\n        odd.append(l[i])\n    for j in range(1, len(l), 2):\n        even.append(l[j])\n    return sorted(odd) + even\n",
        "num_ids": 70
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l_even = l[::2]\n    l_odd = l[1::2]\n    l_even.sort()\n    l_odd.sort()\n    return l_even + l_odd\n",
        "num_ids": 50
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return encode_cyclic(s)[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # create groups. Each group of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    # join all groups to make a single string.\n    return \"\".join(groups)\n",
        "num_ids": 117
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)",
        "num_ids": 107
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    groups = s.split(\" \")\n    # cycle groups.\n    groups = [groups[(i * 3):min((i * 3 + 3), len(groups))] for i in range((len(groups) + 2) // 3)]\n    # break each group into 3 parts and join.\n    return \"\".join([group[1] + group[2] + group[0] for group in groups])\n",
        "num_ids": 95
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    groups = re.findall(r\"(.{3})\", s)\n    return \"\".join(groups).replace(\" \", \"\")\n",
        "num_ids": 33
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 109
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return encode_cyclic(s[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return encode_cyclic(s)[::-1]\n",
        "num_ids": 15
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # find last three characters in string.\n    i = s.rfind(\"0\")\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((i + 1) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "num_ids": 126
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    fib_number = fibonacci_number(n - 1) + fibonacci_number(n - 2)\n    if prime_number(fib_number) == True:\n        print(fib_number)\n    else:\n        return 0\n",
        "num_ids": 61
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return 2\n    a = 3\n    b = 5\n    fib_n = a + b\n    while fib_n!= n:\n        fib_n = a + b\n        a = b\n        b = fib_n\n    return fib_n\n",
        "num_ids": 70
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    fib = lambda n: (n < 2) or ((n % 2) and (fib(n - 1) + fib(n - 2)) % 2 == 0)\n    if (n == 1 or n == 2) or fib(n) == False:\n        return 1\n    else:\n        return fib(n)\n",
        "num_ids": 76
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return 5*prime_fib(n-1) + 2*prime_fib(n-2)\n",
        "num_ids": 27
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return n\n",
        "num_ids": 12
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 1:\n        return 2\n    else:\n        last_num = 2\n        second_last = 1\n        for i in range(n - 1):\n            last_num, second_last = second_last, last_num + second_last\n        return last_num\n",
        "num_ids": 68
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
        "num_ids": 65
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 1:\n        return 2\n    fib_1, fib_2 = 1, 2\n    while fib_2 <= n:\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1\n",
        "num_ids": 63
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x, y = 1, 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            x, y = y, x + y\n        else:\n            x, y = y, x + y\n    return y\n",
        "num_ids": 60
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n < 2:\n        return 2\n    for i in range(3, n + 1):\n        if is_prime(i):\n            return i\n",
        "num_ids": 38
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in l:\n        for j in l:\n            for k in l:\n                if i + j + k == 0:\n                    return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in l:\n        if (sum(l) - i) in l:\n            if sum(l) - i!= i:\n                return True\n            else:\n                return False\n",
        "num_ids": 47
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # break the list into separate sublists\n    sublists = list(l)\n    sublists = list(map(lambda x: x - x, sublists))\n    # check if each sublist sums to zero\n    for i in range(0, len(sublists)):\n        if sublists[i] == 0:\n            return True\n    # if they don't, then they're not the same\n    return False\n",
        "num_ids": 98
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return False\n    s = set(l)\n    for i in s:\n        for j in s:\n            if j!= i:\n                for k in s:\n                    if k!= i and k!= j:\n                        if i + j + k == 0:\n                            return True\n    return False",
        "num_ids": 83
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # create an empty set and add all pairs of integers to it\n    s = set()\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                s.add((l[i], l[j]))\n    # check if there are 3 distinct elements in the set\n    if len(s) == 3:\n        return True\n    else:\n        return False\n",
        "num_ids": 113
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) == 0:\n        return False\n    seen = set()\n    for i in l:\n        seen.add(i)\n        diff = -i\n        if diff in seen or diff + i in seen or diff + i in seen:\n            return True\n    return False\n",
        "num_ids": 69
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)-2):\n        for j in range(i+1,len(l)-1):\n            for k in range(j+1,len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    l.sort()\n    l_set = set(l)\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Set up\n    car_col_count = 0\n    \n    # Loop through cars\n    for car_index in range(n):\n        # Loop through cars\n        for other_index in range(n):\n            # if car_index!= other_index\n            if car_index!= other_index:\n                # if car_index is moving left to right\n                if (car_index < n - 1):\n                    # if car_index is moving right to left\n                    if (car_index > 0):\n                        # if cars are overlapping\n                        if car_index == other_index:\n                            # increment car collision count\n                            car_col_count += 1\n        \n    return car_col_count\n",
        "num_ids": 165
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # initialize the distance (along the x-axis) travelled by a car\n    dist_x = 0.0\n    # keep a copy of the x-coordinate of the current car\n    x = 0.0\n    # keep a copy of the x-coordinate of the previous car\n    prev_x = 0.0\n    # keep a count of the number of cars that have collided\n    count = 0\n",
        "num_ids": 94
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # BEGIN PROBLEM 10\n    return n + (n - 1)\n",
        "num_ids": 21
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return car_race_collision_recur(n, {})\n",
        "num_ids": 18
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # n is the number of cars, so there are n^2 possibilities.\n    # There are n-1, so we have the possibility of having a collision\n    # when comparing all the options.\n    # So, we can get the total number of collisions, which is n-1\n    # We can get the collision possibilities, which is n-1 (n-1)\n    # And add it to the total collisions.\n    collisions = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if(are_cars_colliding(i, j)):\n                collisions += 1\n    return collisions\n",
        "num_ids": 150
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Put your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    colisions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i == 1:\n                continue\n            else:\n                if (road[i] + speed[i] < road[j] + speed[j]) or (road[j] + speed[j] < road[i] + speed[i]):\n                    if i < j:\n                        colisions += 1\n    return colisions\n",
        "num_ids": 108
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    num_collisions = 0\n    for i in range(1, n):\n        if distance_between(i, n, 0, n) < distance_between(0, n, i, n):\n            num_collisions += 1\n    return num_collisions\n",
        "num_ids": 63
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    cars = [Car(0, 1)]\n    cars.extend(Car(0, 1) for _ in range(n-1))\n    last_cars = list(reversed(cars))\n    #print(cars)\n    #print(last_cars)\n    for i, c1 in enumerate(cars):\n        for j, c2 in enumerate(last_cars[i+1:]):\n            if c1.collide_with(c2):\n                #print(c1.position, c2.position, c1.velocity, c2.velocity)\n                #print(c1.position, c2.position, c1.velocity, c2.velocity)\n                c1.velocity += c2.velocity\n                c1.velocity = round(c1.velocity, 3)\n                c1.position += c1.velocity\n                c1.position = round(c1.position, 3)\n                c2.velocity *= -1\n                c2.position += c2.velocity\n                c2.position = round(c2.position, 3)\n                last_cars[i+j] = c2\n                break\n",
        "num_ids": 279
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return [x + 1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    new_list = l[:]\n    for i in range(len(new_list)):\n        new_list[i] += 1\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # i = 0\n    # while i < len(l):\n    #     l[i] = l[i] + 1\n    #     i += 1\n    # return l\n    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 75
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(l) == 0:\n        return []\n",
        "num_ids": 15
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(l)):\n        l[i] = l[i] + 1\n",
        "num_ids": 26
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    i = 0\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return list(map(lambda x: x + 1, l))\n",
        "num_ids": 17
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [x+1 for x in l]\n",
        "num_ids": 13
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    i = 1\n    while i < len(l):\n        l[i] += 1\n        i += 1\n    return l\n",
        "num_ids": 32
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    l = sorted(l)\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    d = {}\n    for i in range(len(l)):\n        x = l[i]\n        if x not in d.keys():\n            d[x] = 1\n        else:\n            return False\n    for i in range(len(l)):\n        x = l[i]\n        y = -x\n        if y in d.keys():\n            return True\n    return False\n",
        "num_ids": 123
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Assumes the list is of length > 1\n    # if no pairs exist, the length of the list is < 2, then return False\n    # if there are 2 distinct elements, and the sum of those two elements is zero,\n    # then return True\n",
        "num_ids": 59
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # check for an empty list\n    if l == []:\n        return False\n    else:\n        # loop over the list\n        for i in range(len(l)):\n            # create a new list, which contains the values, except\n            # for the current value in the list\n            new_list = l[:i] + l[i + 1:]\n            # sum the values in the new list, and check for a match\n            if sum(new_list) == 0:\n                return True\n    return False\n",
        "num_ids": 121
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in range(0, len(l)):\n        for j in range(i, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l)):\n        if 0 - l[i] in l:\n            if i!= (l.index(0 - l[i]) + 1):\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    else:\n        for i in range(len(l)):\n            j = i + 1\n            sum = l[i] + l[j]\n            if sum == 0:\n                return True\n    return False\n",
        "num_ids": 80
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    res = ''\n    while x:\n        res += str(x % base)\n        x //= base\n    return res[::-1]\n",
        "num_ids": 36
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if x == 0:\n        return 0\n    else:\n        output = \"\"\n        while x > 0:\n            remainder = x % base\n            if remainder > 9:\n                remainder = str(remainder)\n            output += str(remainder)\n            x = x // base\n        return output[::-1]\n",
        "num_ids": 82
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Base 10 to Base 2\n    x_in_base2 = format(x, 'b')\n    x_in_base10 = int(x_in_base2, 2)\n    return str(x_in_base10)\n",
        "num_ids": 57
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return base_to_string(x, base)\n",
        "num_ids": 14
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return str(x) if x < 10 else change_base(x // base, base) + str(x % base)\n",
        "num_ids": 30
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x == 0:\n        return '0'\n    elif x == 1:\n        return '1'\n    else:\n        return change_base(x//base, base) + str(x%base)\n",
        "num_ids": 52
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    str_representation = str(x)\n    return int2base(int(str_representation), base)\n",
        "num_ids": 28
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x >= 10:\n        x %= base\n    while x >= 1:\n        s = ''\n        for i in range(len(str(x))):\n            s = s + str(x % base)\n            x = x // base\n        x = s\n    return s\n",
        "num_ids": 68
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if base == 10:\n        return str(x)\n    return change_base(x//base, base)*(x % base)\n",
        "num_ids": 33
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    num = ''\n    while x > 0:\n        num = chr(x % base + ord('A')) + num\n        x = x // base\n    return num\n",
        "num_ids": 42
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # A = 0.5 * a * h\n    A = 0.5 * a * h\n    return A\n",
        "num_ids": 28
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 0.5 * a * h\n",
        "num_ids": 11
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (a*h)/2\n",
        "num_ids": 10
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return a*h/2\n",
        "num_ids": 9
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return a * h / 2\n",
        "num_ids": 9
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 50
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 86
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    f4 = (1, 0, 1, 1)\n    for i in range(n-2):\n        f4 = (f4[2], f4[0] + f4[1], f4[1], f4[2] + f4[0])\n    return f4[2]\n",
        "num_ids": 72
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0 or n == 1 or n == 2:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 58
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 79
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n in fib4.memo:\n        return fib4.memo[n]\n    else:\n        fib4.memo[n] = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        return fib4.memo[n]\n",
        "num_ids": 81
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b\n",
        "num_ids": 47
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 0\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n",
        "num_ids": 79
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a, b = 0, 1\n    while n > 0:\n        a, b = b, a + b\n        n -= 1\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if n <= 1:\n        return n\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n",
        "num_ids": 48
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    n = len(l)\n    if n == 0:\n        return None\n    m = n // 2\n    pivot = m\n    # sorting l\n    l = mergeSort(l)\n",
        "num_ids": 47
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not l:\n        raise ValueError(\"List is empty.\")\n    l.sort()\n    if len(l) % 2 == 0:\n        return float(l[len(l)//2] + l[len(l)//2 - 1]) / 2.0\n    else:\n        return float(l[len(l)//2])\n",
        "num_ids": 83
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(l)[len(l) // 2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # find the middle element\n    n = len(l)\n    if n == 0:\n        return None\n    else:\n        mid = n // 2\n        if n % 2 == 0:\n            return (l[mid] + l[mid - 1]) / 2.0\n        else:\n            return l[mid]",
        "num_ids": 76
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return median_helper(l, 0, len(l))\n",
        "num_ids": 17
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(l)[len(l) // 2]\n",
        "num_ids": 15
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    n = len(l)\n    # Handle odd number of elements.\n    if n % 2:\n        return sorted(l)[n // 2]\n    else:\n        return sum(sorted(l)[n // 2 - 1: n // 2 + 1]) / 2\n",
        "num_ids": 64
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not l:\n        raise ValueError('median requires non-empty list')\n    sorted_l = sorted(l)\n    mid_i = len(sorted_l) // 2\n    if len(sorted_l) % 2:\n        return sorted_l[mid_i]\n    else:\n        return (sorted_l[mid_i - 1] + sorted_l[mid_i]) / 2\n",
        "num_ids": 101
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    l.sort()\n    n = len(l)\n    m = n // 2\n    if n % 2 == 1:\n        return l[m]\n    else:\n        return (l[m - 1] + l[m]) / 2\n",
        "num_ids": 59
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    assert l, \"Please enter a list with elements.\"\n    n = len(l)\n    l.sort()\n    return (n + 1) / 2 - (n + 1) % 2\n    \ndef average(l: list):\n    \"\"\"Return average of elements in the list l.\n    >>> average([3, 1, 2, 4, 5])\n    3.0\n    >>> average([-10, 4, 6, 1000, 10, 20])\n    10.0\n    \"\"\"\n    assert l, \"Please enter a list with elements.\"\n    s = sum(l)\n    return s / len(l)\n",
        "num_ids": 144
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(text) // 2):\n        if text[i]!= text[len(text) - i - 1]:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    j = len(text) - 1\n    while i <= j:\n        if text[i]!= text[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if text == '':\n        return True\n    else:\n        return text == text[::-1]\n",
        "num_ids": 27
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(text) == 0:\n        return True\n    if len(text) == 1:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 62
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return text == text[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(text) < 2:\n        return True\n    if text[0]!= text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n",
        "num_ids": 48
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    assert text!= ''\n    \n    # for i in range(len(text) // 2):\n    #     if text[i]!= text[len(text) - i - 1]:\n    #         return False\n",
        "num_ids": 53
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    i = 0\n    j = len(text) - 1\n    \n    while i < j:\n        if text[i]!= text[j]:\n            return False\n        i += 1\n        j -= 1\n    \n    return True\n",
        "num_ids": 60
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # The modulus is defined to be 0 modulo the prime number p\n    return n % p\n",
        "num_ids": 24
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (p-1) % n\n",
        "num_ids": 11
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (n % p) + p if n < 0 else (n % p)\n",
        "num_ids": 21
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return n % p\n",
        "num_ids": 7
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (n % p)\n",
        "num_ids": 9
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ((n % p) * p) % p\n",
        "num_ids": 14
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    res = 1\n    while n:\n        if n & 1:\n            res = (res * p) % (p - 1)\n        n >>= 1\n        p >>= 1\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return pow(2, n, p)\n",
        "num_ids": 12
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #return pow(2, n) % p\n    \n    if n == 0:\n        return 1\n    \n    else:\n        r = modp(n // 2, p)\n        return (r * r) % p if n % 2 == 0 else r * r % p\n",
        "num_ids": 67
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return encode_shift(s)\n",
        "num_ids": 10
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return \"\".join([chr((ord(ch) - 5 + ord(\"a\")) % 26) for ch in s])\n",
        "num_ids": 30
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "num_ids": 36
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    vowels = set('aeiou')\n    return ''.join(ch for ch in text if ch not in vowels)\n",
        "num_ids": 32
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for i in text:\n        if i.lower() not in vowels:\n            new_text += i\n    return new_text\n",
        "num_ids": 54
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = ''\n    for i in text:\n        if i in 'aeiouAEIOU':\n            result = result + i\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n",
        "num_ids": 34
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = 'aeiou'\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] not in vowels:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 59
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #YOUR CODE HERE\n    vowels = 'aeiouAEIOU'\n    new_string = ''\n    for char in text:\n        if char not in vowels:\n            new_string += char\n    return new_string\n",
        "num_ids": 58
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    \"\"\"\n    The following code is not good, can you make it better?\n    Keep iterating the loop until we remove the vowel and return the result.\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = \"\"\n    for char in text:\n        if char in vowels:\n            pass\n        else:\n            result += char\n    return result\n    \n    \"\"\"\n    End of not good code\n    \"\"\"\n",
        "num_ids": 118
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # vowels = 'aeiouAEIOU'\n    # text = str(text)\n    # vowels = 'aeiouAEIOU'\n    # for char in text:\n    #     if char in vowels:\n    #         text = text.replace(char, '')\n    # return text\n    vowels = 'aeiouAEIOU'\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n",
        "num_ids": 120
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels = 'aeiouAEIOU'\n    return \"\".join(filter(lambda x: not x in vowels, text))\n",
        "num_ids": 35
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return text[0:].replace('a','b').replace('e','b').replace('i','b').replace('o','b').replace('u','b')\n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 65
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for item in l:\n        if item >= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for x in l:\n        if x > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in l:\n        if i > t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return len(l) == 0 or all(x < t for x in l)\n",
        "num_ids": 21
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for item in l:\n        if item <= t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for num in l:\n        if num < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in l:\n        if i < t:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return x + y\n",
        "num_ids": 7
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Check length of both strings\n    if len(s0)!= len(s1):\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(s0) == sorted(s1)\n",
        "num_ids": 15
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # if len(s0)!= len(s1):\n    #     return False\n    if set(s0)!= set(s1):\n        return False\n    for c0 in s0:\n        if s1.count(c0)!= s0.count(c0):\n            return False\n    return True\n    \n",
        "num_ids": 79
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return all(s0[i] == s1[i] for i in range(len(s0)))\n",
        "num_ids": 27
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s0)!= len(s1):\n        return False\n    for ch0, ch1 in zip(s0, s1):\n        if ch0!= ch1:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for c0, c1 in zip(s0, s1):\n        if c0 == c1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # check if both strings are the same length\n    if len(s0)!= len(s1):\n        return False\n    \n    # Create a list of characters in each string\n    s0_characters = list(s0)\n    s1_characters = list(s1)\n    \n    # Check if both strings are the same characters\n    for i in range(len(s0_characters)):\n        if s0_characters[i]!= s1_characters[i]:\n            return False\n    \n    # Return true if they are the same characters\n    return True\n",
        "num_ids": 140
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # This problem uses hashing and a subset of strings.\n    # A basic brute-force solution would be to compute the\n    # hash of each word.  The problem is that words are not\n    # necessarily string literals, and the results could be\n    # different if words are of different lengths.\n    s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0)!= len(s1):\n        return False\n    d = {}\n    for i in range(len(s0)):\n        d[s0[i]] = s1[i]\n    for i in range(len(s0)):\n        if s0[i] not in d:\n            return False\n    return True\n",
        "num_ids": 172
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return set(s0.lower()) == set(s1.lower())\n",
        "num_ids": 19
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(set(s0) & set(s1)) == len(s0)\n",
        "num_ids": 23
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    assert n > 0\n    if n <= 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 45
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    a, b = 1, 1\n    for _ in range(n):\n        a, b = b, a+b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert n >= 0\n    if n in (0, 1):\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 41
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n < 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert n >= 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 50
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 0:\n        raise ValueError('n must be positive')\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n",
        "num_ids": 50
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \"\"\"\n    while brackets:\n        bracket_open, bracket_close = brackets[0], brackets[-1]\n        if bracket_open == \">\" and bracket_close == \"<\":\n            brackets = brackets[1:-1]\n        else:\n            return False\n    return True\n    \"\"\"\n    brackets = bracket_parser(brackets)\n    brackets.reverse()\n",
        "num_ids": 90
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if brackets == \"\":\n        return True\n    \n    # Use stack\n    stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(\">\")\n        elif c == \">\":\n            if stack == []:\n                return False\n            elif stack.pop()!= \"<\":\n                return False\n    return True\n",
        "num_ids": 86
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    while i < len(brackets):\n        if brackets[i] == \"<\":\n            brackets = brackets[:i] + \">\" + brackets[i + 1 :]\n        i += 1\n    return brackets\n",
        "num_ids": 56
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets_stack = []\n    for b in brackets:\n        if b == \"<\":\n            if not brackets_stack:\n                return False\n            brackets_stack.pop()\n        else:\n            brackets_stack.append(b)\n    return not brackets_stack\n",
        "num_ids": 66
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Brackets contain the exact same number of \"<\" and \">\".\n    # We check for each opening bracket, if it has corresponding closing\n    # bracket in the first line.\n    # If it doesn't, then the bracket is invalid.\n    # The condition is true for each opening bracket in the brackets string.\n    # The first line in the brackets string is the first line of the brackets.\n    # The last line in the brackets string is the last line of the brackets.\n    # If it is, then the bracket is valid.\n    # Otherwise, it's invalid.\n    # If the brackets are correct, then we can recurse with the bracketless\n    # string.\n    bracket_counts = get_bracket_counts(brackets)\n    return is_brackets_valid(bracket_counts)\n",
        "num_ids": 188
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\")\n    return brackets == \"\"\n",
        "num_ids": 26
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while \"<\" in brackets:\n        left = brackets.index(\"<\")\n        bracket = brackets[left]\n        if bracket == \"<\":\n            if \">\" not in brackets[left+1:]:\n                return False\n        if bracket == \">\":\n            if \">\" not in brackets[left+1:]:\n                return False\n        brackets = brackets[left+1:]\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = []\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            stack.append(\"<\")\n        elif brackets[i] == \">\":\n            if not stack:\n                return False\n            elif stack.pop()!= \">\":\n                return False\n    return not stack\n",
        "num_ids": 81
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    stack = []\n    bracket_map = {\n        \"<\": \">\",\n        \">\": \"<\",\n        \"<>\": \">\",\n        \"<<\": \">\",\n        \">>\": \"<\",\n    }\n",
        "num_ids": 57
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    opening, closing = brackets.split(\"<\")\n    # lengths of the 2 strings, we know their length is even\n    opening_length = len(opening)\n    closing_length = len(closing)\n    # length must be even, so we can use floor division\n    opening_index = int(opening_length // 2)\n    closing_index = int(closing_length // 2)\n    # we can only compare if we are in the correct position\n    if (opening[opening_index] == closing[closing_index] and\n        opening_index!= closing_index):\n        return False\n    # if we made it here, we are in the correct position\n    # we can return True if the lengths are the same\n    return opening_length == closing_length\n",
        "num_ids": 180
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 1\n    while i < len(l) and l[i] > l[i - 1]:\n        i += 1\n    while i < len(l) and l[i] < l[i - 1]:\n        i += 1\n    return i == len(l)\n",
        "num_ids": 67
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n = len(l)\n    if n < 2:\n        return True\n    for i in range(n-1):\n        if l[i] > l[i+1]:\n            return False\n    return True",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    increasing = decreasing = True\n    prev = None\n    for x in l:\n        if prev is None:\n            prev = x\n        elif x < prev:\n            increasing = False\n        elif x > prev:\n            decreasing = False\n        else:\n            return True\n    return increasing or decreasing\n",
        "num_ids": 74
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n = len(l)\n    if n <= 1:\n        return True\n    i = 1\n    while i < n:\n        if l[i] < l[i-1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if l == None or len(l) < 2:\n        return True\n    last = l[0]\n    for x in l[1:]:\n        if x < last:\n            return False\n        last = x\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = l[0]\n    if len(l) == 1:\n        return True\n    for i in range(1, len(l)):\n        if a < l[i]:\n            return False\n        a = l[i]\n    return True\n",
        "num_ids": 62
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(l) < 2:\n        return True\n    \n    if l[0] >= l[1]:\n        return False\n    else:\n        for i in range(1, len(l)):\n            if l[i-1] >= l[i]:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 80
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            return False\n    return True\n    \n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if l[0] < l[-1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n        return True\n",
        "num_ids": 90
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Get index of next element\n    l.sort()\n    for i in range(1, len(l)):\n        if l[i-1] >= l[i]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    l1 = set(l1)\n    l2 = set(l2)\n    return sorted(l1 & l2)\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sorted(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    return sorted(list(l1_set.intersection(l2_set)))\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # l1 = sorted(l1)\n    # l2 = sorted(l2)\n    i, j = 0, 0\n    result = []\n    while (i < len(l1) and j < len(l2)):\n        if (l1[i] == l2[j]):\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        elif l1[i] > l2[j]:\n            j += 1\n    return result\n",
        "num_ids": 138
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    l1, l2 = set(l1), set(l2)\n    return sorted(list(l1 & l2))\n",
        "num_ids": 32
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return list(set(l1) & set(l2))\n",
        "num_ids": 17
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if l1 == l2:\n        return l1\n    else:\n        return list(set(l1).intersection(set(l2)))\n",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    assert len(l1) == len(l2)\n",
        "num_ids": 15
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    for i in l2:\n        if i not in common:\n            common.append(i)\n    common.sort()\n    return common\n",
        "num_ids": 64
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return common\n",
        "num_ids": 46
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # TODO: Implement this function.\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n    \"\"\"\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n    \"\"\"\n",
        "num_ids": 79
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return max(prime_factorize(n))\n",
        "num_ids": 13
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return next(factor_until(n))\n",
        "num_ids": 12
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    largest = 0\n    if n == 0:\n        return -1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n    if n > largest:\n        largest = n\n    return largest\n",
        "num_ids": 89
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    factors = factor(n)\n    return max(factors)\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    while n % 2 == 0:\n        n //= 2\n    return 3\n",
        "num_ids": 20
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    largest = 0\n    for i in range(2, n):\n        while n % i == 0:\n            largest = i\n            n = n / i\n    if n > 1:\n        largest = n\n    return largest\n",
        "num_ids": 54
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    factor = 2\n    while factor < n:\n        if is_prime(factor):\n            if n % factor == 0:\n                return factor\n        factor += 1\n    return n\n",
        "num_ids": 44
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Find the largest prime factor\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n = n / i\n            i = i + 1\n    if i*i!= n:\n        i = n\n    return i",
        "num_ids": 73
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    i = 1\n    total = 0\n    while i <= n:\n        total += i\n        i += 1\n    print(total)\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n    \n",
        "num_ids": 30
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    total = 0\n    for x in range(1, n + 1):\n        total += x\n    return total\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 1 + sum_to_n(n-1)\n",
        "num_ids": 16
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n + sum_to_n(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 0\n    for i in range(1,n+1):\n        total = total + i\n    return total\n",
        "num_ids": 30
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    num_open = brackets.count(\"(\")\n    num_close = brackets.count(\")\")\n    return num_open == num_close\n",
        "num_ids": 35
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    opening_brackets = []\n    closing_brackets = []\n",
        "num_ids": 18
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            if b!= stack.pop():\n                return False\n    return not stack\n",
        "num_ids": 61
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    brackets = list(brackets)\n    bracket_stack = []\n    correct = True\n",
        "num_ids": 24
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    brackets_dict = {\")\":\"(\",\"]\":\"[\",\"}\":\"{\"}\n    closing = brackets_dict.get(brackets)\n    opening = brackets_dict.get(closing)\n    count = 0\n    for i in brackets:\n        if i == opening:\n            count += 1\n        elif i == closing:\n            count -= 1\n        if count < 0:\n            return False\n    if count > 0:\n        return False\n    return True\n",
        "num_ids": 111
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    brackets_match = True\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            brackets_match = brackets_match and find_matching_bracket(brackets, i)\n    return brackets_match\n    \n",
        "num_ids": 64
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(brackets) % 2!= 0:\n        return False\n    opening_brackets = []\n    for char in brackets:\n        if char == \"(\":\n            opening_brackets.append(char)\n        else:\n            if len(opening_brackets) == 0:\n                return False\n            opening_brackets.pop()\n    return len(opening_brackets) == 0\n",
        "num_ids": 94
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    stack = []\n    for bracket in brackets:\n        if bracket in \"([{\":\n            stack.append(bracket)\n        elif stack:\n            stack.pop()\n        else:\n            return False\n",
        "num_ids": 51
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return not brackets.startswith('(') or not brackets.endswith(')')\n",
        "num_ids": 23
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 56
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    der = []\n",
        "num_ids": 8
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return xs[1:]\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(len(xs)):\n        xs[i] = xs[i] * i\n    return xs\n",
        "num_ids": 32
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [xs[i] + xs[i+1]*xs[i+1] for i in range(len(xs) - 1)]\n",
        "num_ids": 36
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return [xs[i + 1] + xs[i + 2] * x for i, x in enumerate(xs[:-1])]\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your Code Here\n    return [1 if i == 0 else 0 for i in xs]\n",
        "num_ids": 24
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return [xs[i+1] + xs[i+2] * xs[i] + xs[i+3] * (xs[i]**2) for i in range(len(xs) - 1)]\n",
        "num_ids": 54
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def _derivative(xs: list):\n        result = []\n        for i in range(len(xs) - 1):\n            result.append(xs[i + 1])\n        return result\n    return _derivative(xs)\n",
        "num_ids": 58
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = len(xs)\n    derivative = []\n    for i in range(1, n):\n        d = i\n        for j in range(0, i):\n            d *= (n - 1)\n        derivative.append(d)\n    return derivative\n",
        "num_ids": 67
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [i * x for i, x in enumerate(xs[1:], start=1)]\n",
        "num_ids": 25
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 0 or n == 1:\n        return n\n",
        "num_ids": 16
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2)\n",
        "num_ids": 32
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a,b = 0,1\n    for _ in range(n):\n        a,b = b,a+b\n    return a\n",
        "num_ids": 34
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # I have an optimization problem where I want to calculate fibonacci and fibonacci sequence. I used a dictionary to get fibonacci sequence and then use it to calculate fibonacci.\n    # so, I had to figure out how to store the fibonacci sequence. I've written a function fibsequence(n) to get fibonacci sequence and then I used fibsequence(n-1) + fibsequence(n-2) + fibsequence(n-3) to calculate fibonacci number.\n    # Now, I used a dictionary to store fibonacci number and then use fibsequence(n) - fibsequence(n-1) - fibsequence(n-2) - fibsequence(n-3) to calculate fibonacci number.\n    if n == 0 or n == 1 or n == 2:\n        return n\n    elif n == 3:\n        return 1\n    else:\n        fibsequence = {1:0, 2:1, 3:1}\n        for i in range(4,n+1):\n            fibsequence[i] = fibsequence[i-1] + fibsequence[i-2] + fibsequence[i-3]\n        return fibsequence[n]\n        \n",
        "num_ids": 275
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib1 = 0\n    fibfib2 = 1\n    for i in range(3, n+1):\n        fibfib1, fibfib2 = fibfib2, fibfib1 + fibfib2\n    return fibfib2\n",
        "num_ids": 99
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
        "num_ids": 63
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n",
        "num_ids": 36
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in s:\n        if i == \"a\" or i == \"e\" or i == \"i\" or i == \"o\" or i == \"u\":\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0,len(s)):\n        if s[i] in 'aeiouy':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for ch in s:\n        if ch == \"a\" or ch == \"e\" or ch == \"i\" or ch == \"o\" or ch == \"u\":\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    vowels = \"aeiou\"\n    for v in vowels:\n        count += s.lower().count(v)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouy':\n            vowels += 1\n    return vowels\n",
        "num_ids": 46
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n    # s = s.lower()\n    # return s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u')\n    vowels = 'aeiou'\n    count = 0\n    for i in s:\n        if i in vowels:\n            count += 1\n    return count\n",
        "num_ids": 126
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = set(['a', 'e', 'i', 'o', 'u'])\n",
        "num_ids": 25
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    s = s.lower()\n    for c in s:\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    vowels_count = 0\n    for i in s:\n        if i in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n",
        "num_ids": 43
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if shift > len(x):\n        x = x[::-1]\n        shift = len(x) - shift\n    return x[shift:] + x[:shift]\n",
        "num_ids": 43
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x[shift:] + x[:shift]\n",
        "num_ids": 14
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if shift > len(x):\n        x = x[::-1]\n    res = \"\"\n    for i in range(shift):\n        res = res + x[0]\n        x = x[1:]\n        x = x + x[0]\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    x = list(x)\n    for i in range(shift):\n        x.append(x.pop(0))\n    return \"\".join(x)\n",
        "num_ids": 39
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if shift < 0:\n        return \"\".join(reversed(x[:abs(shift)][::-1])) + x[abs(shift):]\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # number of digits in x\n    digits = len(str(x))\n    # circular shift of x by shift\n    circ_shift = x * shift\n    # set leftmost digits in the original integer to the rightmost digits of\n    # the new integer\n    if shift > digits:\n        circ_shift = circ_shift[:-shift]\n    return str(circ_shift)\n",
        "num_ids": 90
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = \"\"\n    for i in range(len(x)):\n        if len(x) < shift:\n            result += x[i]\n        else:\n            result += x[(i + shift) % len(x)]\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return \"\".join(reversed(str(x)[-shift:]))\n",
        "num_ids": 20
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if shift > len(x):\n        return x[-shift:] + x[:-shift]\n    else:\n        return x[shift:] + x[:shift]\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    digits = list(str(x))\n    shifted_digits = digits[shift:] + digits[:shift]\n    return ''.join(shifted_digits)",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Do your work here\n    return sum([int(i) for i in s.upper() if i.isdigit()])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([ord(i) for i in s.upper() if i.isnumeric()])\n",
        "num_ids": 25
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    if s == \"\":\n        return 0\n    else:\n        return sum([ord(x) for x in s])\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sum(map(lambda x: ord(x), list(s.upper())))\n    \n",
        "num_ids": 24
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(ord(x) for x in s.upper() if x.isdigit())\n",
        "num_ids": 24
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert type(s) == str,'str is required as input'\n    #check input is not empty\n    if len(s) == 0:\n        return 0\n    #digits\n    digits = 0\n    for x in s:\n        if x.isdigit():\n            digits += int(x)\n    return digits\n",
        "num_ids": 79
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # list = []\n    # for i in s:\n    #     list.append(ord(i))\n    # return sum(list)\n    return sum(map(ord, s.upper()))",
        "num_ids": 48
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([ord(i) for i in s])\n",
        "num_ids": 15
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(ord(i) for i in s if ord(i) >= 65 and ord(i) <= 90)\n",
        "num_ids": 29
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(s) == 0: return 0\n    return sum([ord(char) - 48 for char in s])\n",
        "num_ids": 29
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return 100 - s.count(\"0\") - s.count(\"1\")\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (n-s.count('o')) - (n-s.count('a'))\n    \n    \n    \n    \nif __name__ == '__main__':\n    a = input()\n    b = input()\n    print(fruit_distribution(a,int(b)))",
        "num_ids": 70
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for char in s:\n        if char =='m':\n            count += int(n)\n        else:\n            count += int(n) - int(char)\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = s.split()\n    sum = 0\n    for i in range(1, len(a) - 1):\n        if a[i] == \"apples\":\n            sum += int(a[i - 1])\n        if a[i] == \"oranges\":\n            sum += int(a[i - 1])\n    if a[len(a) - 1] == \"oranges\":\n        sum += int(a[len(a) - 1])\n    return sum",
        "num_ids": 113
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return n - s.count('a') - s.count('o') - s.count('m'",
        "num_ids": 25
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    s = s.split(\" \")\n    if s[0] == \"0\" or s[1] == \"0\":\n        return 0\n    apples = int(s[0])\n    oranges = int(s[1])\n    mango = apples + oranges\n    return mango - apples - oranges\n",
        "num_ids": 73
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # pass the string and the number\n    # pass the string and the number and return the number\n    return s.count(\"mango\")\n",
        "num_ids": 33
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.count(\"mango\")\n",
        "num_ids": 11
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (s.split())[1] - (s.split())[0]\n    \ndef same_tree(s,t):\n    \"\"\"\n    You are given two strings s and t of equal length consisting of alphanumeric characters. \n    String t is generated by random shuffling string s and then add one more letter at a random position. \n    Find the letter that was added in t.\n    Example:\n    Input: s = \"abcd\" t = \"abcd\"\n    Output: a\n    Input: s = \"abcde\" t = \"abcde\"\n    Output: e\n    Input: s = \"a\" t = \"aa\"\n    Output: a\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        elif s[i]!= t[i]:\n            return t[i]\n            break\n",
        "num_ids": 211
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        if int(s) > 0:\n            if int(s) < n:\n                return n - int(s)\n            else:\n                return 0\n        else:\n            return 0\n    except Exception:\n        return 0\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = []\n    if len(arr) > 0:\n        arr = sorted(arr, key=lambda x: x%2)\n        if arr[0]%2 == 0:\n            result.append(arr[0])\n        return result\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # for i in range(len(arr)):\n    #     if arr[i]%2 == 0:\n    #         return arr[i]\n    # return []\n    # arr = sorted([i for i in arr if i%2 == 0])\n    # return arr[0] if arr else []\n    \n    # same idea with the other sol\n    arr = sorted([i for i in arr if i%2 == 0])\n    return arr[0] if arr else []\n",
        "num_ids": 113
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nodes = arr\n    if nodes == []:\n        return []\n",
        "num_ids": 18
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # DONE: 1. Implement the algorithm\n    # BONUS: Improve time complexity\n    pass\n",
        "num_ids": 25
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if arr:\n        vals = [n.value for n in arr]\n        evens = [n for n in vals if n % 2 == 0]\n        if evens:\n            smallest = min(evens)\n            i = vals.index(smallest)\n            return [smallest, i]\n        return []\n    return []\n",
        "num_ids": 83
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    smallest_even = []\n    arr = sorted(arr, reverse=True)\n    for i, x in enumerate(arr):\n        if (x % 2) == 0:\n            smallest_even = x\n            break\n    for i, x in enumerate(arr):\n        if (x % 2) == 0:\n            if (x == smallest_even):\n                return [x, i]\n",
        "num_ids": 96
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not arr:\n        return []\n",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if arr:\n        return [min([node.value for node in arr if node.value%2 == 0]), arr[0].index]\n    else:\n        return []\n",
        "num_ids": 42
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not arr:\n        return arr\n",
        "num_ids": 11
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    maxi = 0\n    for i in lst:\n        if i > maxi:\n            maxi = i\n        if i == maxi and i >= lst.count(maxi):\n            return maxi\n    return -1\n",
        "num_ids": 59
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst == []:\n        return -1\n    # Filter out any values that are greater than 0\n    lst = filter(lambda x: x > 0, lst)\n    # Sort the list by the frequency\n    lst = sorted(lst, key = lambda x: x, reverse=True)\n    # Find the next number that is greater than the number just sorted\n    for i in range(len(lst)):\n        if lst[i] > lst[i - 1]:\n            return lst[i]\n    return -1\n    \n    ",
        "num_ids": 133
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    #if lst == []:\n    #    return -1\n",
        "num_ids": 17
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    lst.sort(reverse=True)\n    for i in range(0, len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(lst) == 1:\n        if lst[0] > 0:\n            return lst[0]\n        else:\n            return -1\n    else:\n        if lst[0] > 0:\n            lst.sort()\n            for i in range(1, len(lst)):\n                if lst[i] >= lst[i - 1]:\n                    return lst[i]\n            if lst[-1] > 0:\n                return lst[-1]\n            else:\n                return -1\n        else:\n            return -1\n    \nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))",
        "num_ids": 165
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(lst)):\n        if lst[i] > 0 and lst.count(lst[i]) > lst[i]:\n            return lst[i]\n    return -1\n",
        "num_ids": 54
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst:\n        return -1\n    max = -1\n    for e in lst:\n        if e > max and e >= e:\n            max = e\n    return max\n",
        "num_ids": 47
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not lst:\n        return -1\n    max_element = max(lst)\n    max_freq = lst.count(max_element)\n    for i in range(len(lst)):\n        if lst[i] == max_element and max_freq >= lst[i]:\n            return max_element\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in lst:\n        if i > 0 and i >= max(lst) and i in lst:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    nums = set(lst)\n    for i in nums:\n        if (i > 0 and lst.count(i) >= i):\n            return i\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return []\n    return min_val_to_max_val(lst)\n",
        "num_ids": 28
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(lst, key=lambda x: -x)\n",
        "num_ids": 17
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0:\n        return lst\n    return sorted(lst, key=lambda x: (x, -x))\n",
        "num_ids": 36
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = len(lst)\n    if n == 0:\n        return []\n    if n == 1:\n        return lst\n",
        "num_ids": 33
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(lst, key=lambda x: (min(lst), max(lst)))\n",
        "num_ids": 25
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst.sort()\n",
        "num_ids": 8
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def strange_sort(lst):\n        if not lst:\n            return lst\n        else:\n            min_index = lst.index(min(lst))\n            new_list = lst[min_index:] + lst[:min_index]\n            return strange_sort(new_list)\n",
        "num_ids": 76
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(lst, reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n",
        "num_ids": 73
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        area = (a+b+c)/2\n        if area < a or area < b or area < c:\n            return -1\n        else:\n            return area\n",
        "num_ids": 65
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sides = (a, b, c)\n    sides = sorted(sides)\n    if sides[0] < sides[1] + sides[2]:\n        return round((sides[0] + sides[1] + sides[2])/2, 2)\n    else:\n        return -1\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n",
        "num_ids": 73
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    else:\n        return (a + b + c)/2\n",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Check if any of the sides are 0\n    if a == 0 or b == 0 or c == 0:\n        return -1\n",
        "num_ids": 32
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Checks if sum of any 2 sides is greater than the third side\n    if (a + b) > c:\n        return round((a + b) * c / 2, 2)\n    elif (a + c) > b:\n        return round((a + c) * b / 2, 2)\n    elif (b + c) > a:\n        return round((b + c) * a / 2, 2)\n    else:\n        return -1\n    \nprint(triangle_area(1, 2, 10)) # == -1\nprint(triangle_area(3, 4, 5)) # == 6.00\nprint(triangle_area(2, 4, 6)) # == -1",
        "num_ids": 165
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        return round(s*(s - a)*(s - b)*(s - c),2)\n",
        "num_ids": 62
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a, b, c = sorted((a, b, c))\n    if a + b > c and a + c > b and b + c > a:\n        return (a * b * 0.5)\n    return -1\n",
        "num_ids": 55
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if (a+b <= c) or (c+b <= a) or (a+c <= b):\n        return -1\n    \n    return 0.5*(a+b+c)",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a + b <= c or c + b <= a or a + c <= b:\n        return -1\n    return 0.5 * abs(a * b * c)\n",
        "num_ids": 42
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    w = w + 1\n    lst = []\n    for i in range(len(q)):\n        lst.append(q[i])\n    lst = sorted(lst)\n    if len(lst) == 1 or q == lst:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        if sum(lst) <= w:\n            return True\n        else:\n            return False\n",
        "num_ids": 114
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def f(l):\n        if l[0] == l[-1] and l[0] == len(l)-1:\n            if sum(l) <= w:\n                return True\n        else:\n            return False\n    return f(q)",
        "num_ids": 61
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if q is None or len(q)==0 or max(q)>w:\n        return False\n    for i in range(len(q)):\n        if sum(q) > w:\n            return False\n        q.reverse()\n        q = [str(i) for i in q]\n        q = \"\".join(q)\n        q = list(q)\n        return all(i == q.pop() for i in q)\n    \n'''\nThe first step of this problem is to split a string into two halves: the first half and the second half of the string. \nLet's say that the string is s. Then the string will be split into two halfs. The first half is s[:n/2] (the first half), \nwhere n is the length of s. The second half is s[n/2+1:] (the second half).\n",
        "num_ids": 203
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if q == []:\n        return True\n    if is_palindromic(q):\n        if sum(q) <= w:\n            return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # q_len=len(q)\n    # if(q_len<=1):\n    #     return True\n    # else:\n    #     if(q==list(reversed(q))):\n    #         return True\n    #     else:\n    #         return False\n    q_len=len(q)\n    if(q_len==0):\n        return True\n    for i in range(q_len):\n        if(q[i]<=w):\n            return True\n        else:\n            return False\n",
        "num_ids": 129
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if q == \"\":\n        return True\n    \n    if q[0] == \"\":\n        return False\n    \n    else:\n        if palindrome(q):\n            if w >= sum(q):\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if (is_palindromic(q) and sum(q)<=w):\n        return True\n    else:\n        return False\n    \ndef will_it_fly(q, w):\n    if (is_palindromic(q) and sum(q)<=w):\n        return True\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def is_palindrom(word):\n        return word == word[::-1]\n    \n    def is_sum(word, w):\n        return sum(word) <= w\n",
        "num_ids": 45
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if q[0] < 0:\n        return False\n    elif len(q) == 1:\n        return True\n    else:\n        for i in range(1, len(q)):\n            if (q[0] + q[i]) > w:\n                return False\n        return True\n    ",
        "num_ids": 73
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if type(q) is not list:\n        return False\n    if type(w) is not int:\n        return False\n    \n    # first check for palindromic list:\n    for i in range(len(q)//2):\n        if q[i]!= q[-1-i]:\n            return False\n    # then check for the maximum possible weight:\n    s = sum(q)\n    if s > w:\n        return False\n    return True\n",
        "num_ids": 113
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sum([arr[i] - arr[i - 1] for i in range(1, len(arr))])\n",
        "num_ids": 29
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # edge cases\n    if len(arr) == 1:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for x in range(len(arr)-1):\n        # one element\n        if arr[x]!= arr[x+1]:\n            count += 1\n        # two elements\n        if x < len(arr)-2 and arr[x]!= arr[x+1] and arr[x+1]!= arr[x+2]:\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    chars = set(arr)\n    \n    def count_pairs(s, t):\n        c = 0\n        for x in s:\n            if x in t:\n                c += 1\n        return c\n    \n    pairs = 0\n    for i in range(len(arr)-1):\n        pairs += count_pairs(arr[i+1:], arr[i])\n    \n    return pairs\n",
        "num_ids": 100
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # nums = {}\n    # for n in arr:\n    #     if n in nums:\n    #         nums[n] += 1\n    #     else:\n    #         nums[n] = 1\n    # print(nums)\n    # return min(nums.values())\n",
        "num_ids": 73
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    arr.sort()\n    rev = arr[::-1]\n    i = 0\n    j = len(arr)-1\n    ans = len(arr)\n    while i < j:\n        if arr[i]!= rev[j]:\n            ans = min(ans, j-i)\n            if arr[i] < rev[j]:\n                i += 1\n            else:\n                j -= 1\n        else:\n            i += 1\n            j -= 1\n    return ans\n",
        "num_ids": 115
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Time: O(n)\n    # Space: O(1)\n    # The time complexity of this algorithm is O(n)\n    # The space complexity of this algorithm is O(1)\n",
        "num_ids": 47
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Only one element is a palindromic sequence\n    if len(arr) == 1:\n        return 0\n    \n    # Get the first element and the last element\n    first = arr[0]\n    last = arr[-1]\n",
        "num_ids": 58
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    counts = {}\n    for i in range(len(arr)):\n        counts[arr[i]] = counts.get(arr[i], 0) + 1\n    print(counts)\n    max_count = max(counts.values())\n    return max_count - 1\n",
        "num_ids": 69
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Counts\n    count = {}\n    for n in arr:\n        if n in count:\n            count[n] += 1\n        else:\n            count[n] = 1\n",
        "num_ids": 45
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not lst1 and not lst2:\n        return []\n    elif not lst1 or not lst2:\n        return lst1 or lst2\n    elif len(lst1) > len(lst2):\n        return lst1\n    else:\n        return lst2\n",
        "num_ids": 75
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst1\n",
        "num_ids": 56
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #create a variable to hold the return list\n    return_list = []\n    #if the lists are the same length and there are characters in the strings in the list\n    if len(lst1) == len(lst2) and len(lst1)!= 0:\n        #create a for loop to iterate through the list\n        for i in range(len(lst1)):\n            #if the character length of the list is longer than the other list\n            if len(lst1) > len(lst2):\n                #if the characters equal in length, add the characters to the return list\n                if lst1[i] == lst2[i]:\n                    return_list.append(lst1[i])\n            #if the characters not equal in length, add the characters to the return list\n            else:\n                return_list.append(lst1[i])\n    #if the lists are the same length and there are no characters in the strings in the list\n    if len(lst1) == len(lst2) and len(lst1) == 0:\n        #create a variable to hold the return list\n        return_list = []\n    #if the lists are the same length and there are characters in the strings in the list\n    if len(lst1) < len(lst2) and len(lst1)!= 0:\n        #create a for loop to iterate through the list\n        for i in range(len(lst2)):\n            #if the character length of the list is longer than the other list\n            if len(lst1) > len(lst2):\n                #if the characters equal in length, add the characters to the return list\n                if lst1[i] == lst2[i]:\n                    return_list.append(lst1[i])\n            #if the characters not equal in length, add the characters to the return list\n            else:\n                return_list.append(lst1[i])\n    #if the lists are not the same length and there are characters in the strings in the list\n    if len(lst1) > len(lst2) and len(lst1)!= 0:\n        #create a for loop to iterate through the list\n        for i in range(len(lst1)):\n            #if the character length of the list is longer than the other list\n            if len(lst1) > len(lst2):\n                #if the characters equal in length, add the characters to the return list\n                if lst1[i] == lst2[i]:\n                    return_list.append(lst1[i])\n            #if the characters not equal in length, add the characters to the return list\n            else:\n                return_list.append(lst1[i])\n    #if the lists are not the same length and there are no characters in the strings in the list\n    if len(lst1) < len(lst2) and len(lst1) == 0:\n        #create a variable to hold the return list\n        return_list = []\n    #if the lists are not the same length and there are no characters in the strings in the list\n    if len(lst1) < len(lst2) and len(lst1) == 0:\n        #create a variable to hold the return list\n        return_list = []\n    #return the return list\n    return return_list\n",
        "num_ids": 794
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return lst1 if len(lst1) < len(lst2) else lst2\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    lst3 = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if len(lst1[i]) < len(lst2[j]):\n                count += 1\n            elif len(lst1[i]) == len(lst2[j]):\n                if lst1[i] == lst2[j]:\n                    count += 1\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[count]):\n            lst3.append(lst1[i])\n        elif len(lst1[i]) == len(lst2[count]):\n            if lst1[i] == lst2[count]:\n                lst3.append(lst1[i])\n    return lst3\n",
        "num_ids": 217
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    lst_a = []\n    lst_b = []\n    for i in range(len(lst1)):\n        if len(lst1[i]) < len(lst2[i]):\n            lst_a.append(lst1[i])\n    for i in range(len(lst2)):\n        if len(lst2[i]) < len(lst1[i]):\n            lst_b.append(lst2[i])\n    return lst_a + lst_b",
        "num_ids": 128
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # create a empty list\n    lst = []\n    for i in lst1:\n        # loop through the list\n        if len(i) <= len(lst2) and len(i) > 0:\n            # if the length of the strings is smaller than the length of the list, append the string\n            lst.append(i)\n    for i in lst2:\n        if len(i) <= len(lst) and len(i) > 0:\n            lst.append(i)\n    return lst\n",
        "num_ids": 126
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # code goes here\n    # if the lists are empty, return empty list\n    if len(lst1) == 0 or len(lst2) == 0:\n        return []\n    # if the lists have the same number of chars, return the first list\n    if len(lst1) == len(lst2):\n        return lst1\n    # check if the first list is shorter\n    if len(lst1) < len(lst2):\n        # return the list\n        return lst1\n    # otherwise check if the second list is shorter\n    else:\n        return lst2\n",
        "num_ids": 142
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    p = 1\n    for i in range(1, 100):\n        if i * p == a:\n            return True\n        p += 1\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(100):\n        if a % 2 == 0 or a % 3 == 0 or a % 5 == 0:\n            if a % 2 == 0 and a % 3 == 0 and a % 5 == 0:\n                print(f\"{a} is a mulitplication of 3 prime number.\")\n                break\n        else:\n            print(f\"{a} is not a mulitplication of 3 prime number.\")\n            break\n",
        "num_ids": 103
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    a = str(a)\n    if len(a) > 1:\n        if a[1] == \"0\":\n            a = a[2:]\n            if not is_prime(int(a)):\n                return False\n            else:\n                return True\n    else:\n        if not is_prime(int(a)):\n            return False\n        else:\n            return True\n",
        "num_ids": 92
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    i = 2\n    while i < 100:\n        if a % i == 0:\n            if (i * 3) % 2 == 0 or (i * 5) % 2 == 0 or (i * 7) % 2 == 0:\n                return False\n            i += 1\n        else:\n            i += 1\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Create a list of all prime numbers less than 100\n    # There are 9 prime numbers under 100 \n    # 2,3,5,7,11,13,17,19,23,29,31\n    primes = [2,3,5,7,11,13,17,19,23,29,31]\n    # The function checks if the given number a is a multiple of the three prime numbers \n    for i in primes:\n        if a % i == 0:\n            # If the given number a is a multiple of any of the prime numbers then it is not a multiply of any prime numbers\n            return False\n    # If the given number a is not a multiple of any prime numbers it is a multiply of any prime number\n    return True\n",
        "num_ids": 173
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(2,100):\n        if a % i == 0:\n            if(i % 3 ==0 or i % 5 ==0):\n                return True\n            return False\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    for i in range(2,100):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a_list = list(range(1,100))\n    a_list.remove(a)\n    for i in a_list:\n        if a % i == 0:\n            if not is_prime(i):\n                a_list.remove(i)\n    if len(a_list) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    import math\n    n = 1\n    while n <= 100:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not is_prime(a):\n        return False\n    if a == 1:\n        return False\n    if a == 2:\n        return True\n    for i in range(2, int(a**(0.5))+1):\n        if a % i == 0:\n            return False\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if (n==0):\n        return False\n    if (n==1):\n        return True\n    if (n==x):\n        return True\n    if ((n<0)):\n        return False\n    return is_simple_power(x, n//x)\n",
        "num_ids": 65
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return x**n == x\n",
        "num_ids": 9
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return True if x ** int(n) == x else False\n",
        "num_ids": 16
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 1:\n        return True\n    return x % n == 0\n    \ndef is_simple_power_improved(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    if x == 1:\n        return True\n    if x == n or x == -n:\n        return True\n    return False\n    \ndef is_simple_power_brute(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    x = abs(x)\n    while x % 2 == 0:\n        x = x // 2\n    if x == 1:\n        return True\n    if x == n or x == -n:\n        return True\n    return False\n    \nif __name__ == '__main__':\n    x = 2\n    n = 2\n    print(is_simple_power_improved(x, n)",
        "num_ids": 477
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return int(math.log(x, n)) == int(math.log(n, x))\n",
        "num_ids": 25
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return x**int(1/n) == x\n",
        "num_ids": 14
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x**int(n) == x",
        "num_ids": 11
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x == n:\n        return True\n    if x < n:\n        return False\n    if n < 0:\n        return False\n    while x!= 1:\n        x = x * n\n        if x == 1:\n            return True\n        if x < n:\n            return False\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return x ** int(n) == x\n",
        "num_ids": 12
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n ** int(x) == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #pass #delete this line and replace with your code here\n    return (a**3) == a\n",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a**3 == a\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return a**3 == 3*a**2\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # this solution is O(n)\n    \n    # find the square root\n    sqrt = math.sqrt(a)\n    \n    return sqrt*sqrt == a\n",
        "num_ids": 44
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if (a**3) % a == 0:\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # your code here\n    return a**3\n",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (a**3)%1 == 0\n",
        "num_ids": 13
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if num == '':\n        return 0\n    digits = []\n    for i in range(len(num)):\n        digits.append(num[i])\n    prime = 0\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if(int(digits[i]) % int(digits[j]) == 0):\n                break\n        else:\n            prime += 1\n    return prime\n        \n",
        "num_ids": 116
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    ans = 0\n    i = 0\n    while i < len(num):\n        if isPrime(int(num[i:i+2], 16)):\n            ans += 1\n        i += 2\n    return ans\n",
        "num_ids": 53
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 0\n    for x in num:\n        if x == \"A\":\n            result += 1\n        elif x == \"B\":\n            result += 2\n        elif x == \"C\":\n            result += 3\n        elif x == \"D\":\n            result += 5\n        elif x == \"E\":\n            result += 6\n        elif x == \"F\":\n            result += 7\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return (len(re.findall(r\"\\d\", num)))\n",
        "num_ids": 19
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num = num.upper()\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n    return count",
        "num_ids": 38
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    num = num.upper()\n    a,b = 0,0\n    for i in num:\n        if i.isupper():\n            if i == \"B\" or i == \"D\":\n                b += 1\n            elif i == \"E\" or i == \"F\":\n                a += 1\n            elif i == \"A\":\n                a += 1\n                b += 1\n        elif i.islower():\n            if i == \"c\" or i == \"d\":\n                b += 1\n            elif i == \"f\":\n                a += 1\n            elif i == \"a\":\n                a += 1\n                b += 1\n            elif i == \"b\":\n                a += 1\n                b += 1\n                b += 1\n    return (a + b)\n",
        "num_ids": 184
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    digits = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, \n            'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n",
        "num_ids": 90
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Convert the hexadecimal number to a list of digits.\n    num_list = []\n    for i in num:\n        if i.isnumeric():\n            num_list.append(i)\n        else:\n            num_list.append(i.upper())\n    num_list = ''.join(num_list)\n",
        "num_ids": 80
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(10,15):\n        count = 0\n        for j in str(i):\n            if hex(i).count(j) == 1:\n                count += 1\n        if count == 1:\n            print(i)\n    return\n",
        "num_ids": 61
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = 0\n    for i in num:\n        res += 1 if i in 'ABED1A33' else 0\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    bin_str = \"\"\n    while decimal > 0:\n        bin_str = str(decimal % 2) + bin_str\n        decimal = decimal // 2\n    return \"db\" + bin_str\n",
        "num_ids": 50
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if decimal < 0:\n        raise ValueError(\"This function can't be applied to negative numbers\")\n    return f\"db{decimal:b}\"\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # your code here\n    binary = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary += str(remainder)\n        decimal = decimal // 2\n    return binary\n",
        "num_ids": 50
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code goes here\n    return str(bin(int(decimal))[2:])\n",
        "num_ids": 24
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Your code here\n    n = decimal\n    while n > 1:\n        n = n//2\n        if n > 0:\n            b = '0'\n            s = bin(n)\n            s = s.replace(\"0b\",\"\")\n            s = s + b\n            return s\n    return 'db' + str(n) + 'db'\n    \n    \n    \n",
        "num_ids": 92
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return ''.join([f'{int(x):b}' for x in str(decimal)[::-1]])\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return \"db\" + \"db\" + \"db\" + str(bin(decimal)[2:].zfill(8))\n",
        "num_ids": 31
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    binary = ''\n",
        "num_ids": 6
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 'db' + str(decimal) + 'db'\n",
        "num_ids": 17
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 'db' + ''.join([format(int(decimal / 2 ** (i + 1)), 'b').replace('0', '0').replace('1', '1') for i in range(len(decimal) - 1)]) + 'db'\n    \nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))",
        "num_ids": 86
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Create the list and initialize it with the first character\n    # If the value of the index is the same as the value at the index + 3, it will return False.\n    # If the index is less than 3, return False.\n    # If the index is greater than the length, return False.\n    # If the index is not equal to the value at the index + 3, return True.\n    # If it is greater than the length, return False.\n    # Check every third letter.\n    # If it is not equal to the value at the index + 3, return False.\n    # If it is equal to the value at the index + 3, return True.\n    # Keep checking until you reach the end of the string.\n    # Time: O(n), Space: O(n)\n    \n    # Using Set\n    # Create a set\n    # Run through the string and keep checking if the next letter is not in the set\n    # If not, check if the current letter is not in the set\n    # If they are not, return False\n    # If they are, return True\n    # If the string is only 3 characters, it has to be False.\n    # Time: O(n), Space: O(n)\n    \n    # Using Lists\n    # Create a list\n    # Check every 3 indices.\n    # If the 3 indices are not equal, return False.\n    # If they are equal, return True.\n    # If they are not equal, run through the list, and check if the next 3 indices are not equal to the previous 3 indices.\n    # If they are not equal, return False\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they are not equal, return True\n    # If they are equal, return True\n    # If they are equal, return False\n    # If they are not equal, return True\n    # If they are not equal, return False\n    # If they ar",
        "num_ids": 1025
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    a = set(s)\n    if len(a)<3: return False\n    for i in range(0,len(s)-1):\n        if s[i]==s[i+1]:\n            a.remove(s[i])\n    return False if len(a)==0 else True\n",
        "num_ids": 73
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count >= 3\n",
        "num_ids": 45
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return is_happy_rec(s,0)\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s) < 3:\n        return False\n    seen = set()\n    for i in range(len(s)-2):\n        if s[i] not in seen:\n            seen.add(s[i])\n        else:\n            return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(s)\n    if n < 3:\n        return False\n    i = 0\n    seen = set()\n    while i < n:\n        if s[i] in seen:\n            return False\n        seen.add(s[i])\n        i = i + 1\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    num = 0\n    for i in s:\n        num += int(i)**3\n    return num == 1\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if s==s[::-1]:\n        return True\n    s_lst=[]\n    while(len(s)>3):\n        for i in range(len(s)-1):\n            if s[i]!=s[i+1]:\n                s_lst.append(s[i])\n        s=''\n        for i in s_lst:\n            s+=i\n        s_lst=[]\n    return False\n",
        "num_ids": 108
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return len(s) >= 3 and len(set(s[i:i+3]) for i in range(len(s)-2)) == 1\n",
        "num_ids": 36
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    grades = list(grades)\n    \n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades[i] = 'A+'\n        elif 3.7 > grades[i] >= 3.3:\n            grades[i] = 'A'\n        elif 3.3 > grades[i] >= 3.0:\n            grades[i] = 'A-'\n        elif 2.7 > grades[i] >= 2.3:\n            grades[i] = 'B+'\n        elif 2.3 > grades[i] >= 2.0:\n            grades[i] = 'B'\n        elif 2.0 > grades[i] >= 1.7:\n            grades[i] = 'B-'\n        elif 1.7 > grades[i] >= 1.3:\n            grades[i] = 'C+'\n        elif 1.3 > grades[i] >= 1.0:\n            grades[i] = 'C'\n        elif 0.7 > grades[i] >= 0.3:\n            grades[i] = 'C-'\n        elif 0.3 > grades[i] >= 0.0:\n            grades[i] = 'D+'\n        elif 0.0 > grades[i] >= -0.7:\n            grades[i] = 'D'\n        else:\n            grades[i] = 'D-'\n    return grades\n",
        "num_ids": 338
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n",
        "num_ids": 22
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    grades = sorted(grades)\n    grades_list = []\n    for i in range(len(grades)):\n        if grades[i] >= 4.0:\n            grades_list.append(\"A+\")\n        elif grades[i] >= 3.7:\n            grades_list.append(\"A\")\n        elif grades[i] >= 3.3:\n            grades_list.append(\"A-\")\n        elif grades[i] >= 3.0:\n            grades_list.append(\"B+\")\n        elif grades[i] >= 2.7:\n            grades_list.append(\"B\")\n        elif grades[i] >= 2.3:\n            grades_list.append(\"B-\")\n        elif grades[i] >= 2.0:\n            grades_list.append(\"C+\")\n        elif grades[i] >= 1.7:\n            grades_list.append(\"C\")\n        elif grades[i] >= 1.3:\n            grades_list.append(\"C-\")\n        elif grades[i] >= 1.0:\n            grades_list.append(\"D+\")\n        elif grades[i] >= 0.7:\n            grades_list.append(\"D\")\n        elif grades[i] >= 0.0:\n            grades_list.append(\"D-\")\n        elif grades[i] < 0.0:\n            grades_list.append(\"E\")\n    return grades_list\n",
        "num_ids": 340
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # code here\n    #print(grades)\n    for i in range(len(grades)):\n        if 4.0 <= grades[i] <= 3.7:\n            grades[i] = 'A+'\n        elif 3.3 <= grades[i] <= 3.0:\n            grades[i] = 'A'\n        elif 3.0 <= grades[i] <= 2.7:\n            grades[i] = 'A-'\n        elif 2.7 <= grades[i] <= 2.3:\n            grades[i] = 'B+'\n        elif 2.0 <= grades[i] <= 2.3:\n            grades[i] = 'B'\n        elif 2.3 <= grades[i] <= 1.7:\n            grades[i] = 'B-'\n        elif 1.7 <= grades[i] <= 1.3:\n            grades[i] = 'C+'\n        elif 1.3 <= grades[i] <= 1.0:\n            grades[i] = 'C'\n        elif 1.0 <= grades[i] <= 0.7:\n            grades[i] = 'C-'\n        elif 0.7 <= grades[i] <= 0.3:\n            grades[i] = 'D+'\n        elif 0.0 <= grades[i] <= 0.3:\n            grades[i] = 'D'\n        elif 0.0 <= grades[i] <= 0.0:\n            grades[i] = 'D-'\n        else:\n            grades[i] = 'E'\n    return grades\n",
        "num_ids": 370
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def grade_equation(grades):\n        '''\n        A function that takes a list of grades and return a list of grades that use the grades list\n        '''\n        grades_list = []\n        for g in grades:\n            if g >= 4.0:\n                grades_list.append('A+')\n            elif g >= 3.7:\n                grades_list.append('A')\n            elif g >= 3.3:\n                grades_list.append('A-')\n            elif g >= 3.0:\n                grades_list.append('B+')\n            elif g >= 2.7:\n                grades_list.append('B')\n            elif g >= 2.3:\n                grades_list.append('B-')\n            elif g >= 2.0:\n                grades_list.append('C+')\n            elif g >= 1.7:\n                grades_list.append('C')\n            elif g >= 1.3:\n                grades_list.append('C-')\n            elif g >= 1.0:\n                grades_list.append('D+')\n            elif g >= 0.7:\n                grades_list.append('D')\n            elif g >= 0.0:\n                grades_list.append('D-')\n            else:\n                grades_list.append('E')\n        return grades_list\n",
        "num_ids": 321
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    output = []\n    for i in grades:\n        if i < 3.0:\n            output.append(\"F\")\n        elif i < 3.7:\n            output.append(\"D\")\n        elif i < 3.3:\n            output.append(\"C\")\n        elif i < 3.0:\n            output.append(\"B\")\n        elif i < 2.7:\n            output.append(\"B\")\n        elif i < 2.3:\n            output.append(\"A\")\n        elif i < 2.0:\n            output.append(\"A\")\n        elif i < 1.7:\n            output.append(\"A-\")\n        elif i < 1.3:\n            output.append(\"C-\")\n        elif i < 1.0:\n            output.append(\"C\")\n        elif i < 0.7:\n            output.append(\"D-\")\n        elif i < 0.0:\n            output.append(\"E\")\n        else:\n            output.append(\"F\")\n    return output\n",
        "num_ids": 247
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code goes here\n    grades = list(grades)\n    grades_to_numbers = {4.0: 'A+', 3: 'A', 1.7: 'A-', 2: 'B+', 3.5: 'B', 0.7: 'D', 0.0: 'E'}\n    letter_grades = list(grades_to_numbers.keys())\n    for grade in grades:\n        if grade < grades_to_numbers[grade]:\n            grades_to_numbers[grade] = 'F'\n    return letter_grades\n",
        "num_ids": 134
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    grades_equation = []\n    for grade in grades:\n        if grade >= 4.0:\n            grades_equation.append('A+')\n        elif grade >= 3.7:\n            grades_equation.append('A')\n        elif grade >= 3.3:\n            grades_equation.append('A-')\n        elif grade >= 3.0:\n            grades_equation.append('B+')\n        elif grade >= 2.7:\n            grades_equation.append('B')\n        elif grade >= 2.3:\n            grades_equation.append('B-')\n        elif grade >= 2.0:\n            grades_equation.append('C+')\n        elif grade >= 1.7:\n            grades_equation.append('C')\n        elif grade >= 1.3:\n            grades_equation.append('C-')\n        elif grade >= 1.0:\n            grades_equation.append('D+')\n        elif grade >= 0.7:\n            grades_equation.append('D')\n        elif grade >= 0.0:\n            grades_equation.append('D-')\n        else:\n            grades_equation.append('E')\n    return grades_equation\n",
        "num_ids": 297
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    pass\n    # YOUR CODE HERE\n",
        "num_ids": 10
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    grades = sorted(grades)\n    result = []\n    for i in grades:\n        if i >= 3.0:\n            result.append(\"A+\")\n        elif i >= 2.7:\n            result.append(\"A\")\n        elif i >= 2.3:\n            result.append(\"A-\")\n        elif i >= 2.0:\n            result.append(\"B+\")\n        elif i >= 1.7:\n            result.append(\"B\")\n        elif i >= 1.3:\n            result.append(\"B-\")\n        elif i >= 0.7:\n            result.append(\"C+\")\n        elif i >= 0.3:\n            result.append(\"C\")\n        elif i >= 0.0:\n            result.append(\"C-\")\n        else:\n            result.append(\"D+\")\n    return result\n",
        "num_ids": 205
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return True if len(string) > 1 and all(string[i]!= string[i + 1] for i in range(len(string) - 1)) else False\n",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if len(string) == 1:\n        return False\n    if len(string) == 2:\n        return True if int(string) > 1 else False\n    if len(string) % 2 == 0:\n        return False\n    if is_prime(len(string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    n = len(string)\n    \n    if n == 0:\n        return False\n        \n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n    \n    \n    \n",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    length = len(string)\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(string) > 1:\n        return prime_length(string[:-1])\n    elif len(string) == 1:\n        return True\n    return False",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return len(string) > 0 and is_prime(len(string))\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(string) > 1:\n        if sum(1 for i in range(2, int(len(string) ** 0.5 + 1)) if not len(string) % i) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False",
        "num_ids": 68
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    # Check if the number is divisible by any number in the list:\n    nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if string in nums:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        if int(string) == 2:\n            return True\n        else:\n            return False\n    else:\n        for x in range(0, len(string) - 1):\n            for y in range(0, len(string) - 1):\n                if int(string[x:y+1]) in nums:\n                    return True\n            return False\n",
        "num_ids": 564
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == string[count]:\n            count += 1\n    if count > 1:\n        return False\n    else:\n        return True",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Define the variable length_prime with a variable length as False\n    length_prime = False\n    # Define the variable length_prime_max with a variable length as False\n    length_prime_max = False\n    # Loop through the range of the string length to calculate a prime number\n    for length in range(len(string)):\n        # Calculate the number\n        number = int(string[length])\n        # Check if the number is prime\n        if number > 1:\n            # Check to see if number is not a prime number\n            for x in range(2, number):\n                # Check to see if number is not a prime number\n                if number % x == 0:\n                    break\n            # Check to see if number is prime\n            else:\n                # Set length_prime to True\n                length_prime = True\n    # If length_prime is True\n    if length_prime == True:\n        # Set length_prime_max to True\n        length_prime_max = True\n    # Return length_prime_max\n    return length_prime_max\n",
        "num_ids": 246
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in range(2, n+1):\n        if i == 1:\n            count += 1\n        elif i == n:\n            count += 1\n        elif i % 10 == 1 or i % 10 == 0:\n            count += 1\n        else:\n            count += 0\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    n_start = 1\n    n_end = 1\n    sum = 0\n    while n_start <= n and n_end <= n:\n        #start\n        if str(n_start)[0] == '1':\n            sum += 1\n        #end\n        if str(n_end)[-1] == '1':\n            sum += 1\n        n_start += 1\n        n_end += 1\n    return sum\n",
        "num_ids": 102
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in range(2, n+1):\n        str_num = str(num)\n        if str_num[0] == '1' or str_num[-1] == '1':\n            count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(1, 10 ** n):\n        if i[0] == 1 or i[-1] == 1:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 1 if n > 9 else 0\n",
        "num_ids": 11
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(1, n):\n        if str(i)[0] == \"1\" and str(i)[-1] == \"1\":\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*(starts_one_ends(n-1)+starts_one_ends(n-2))\n",
        "num_ids": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if int(str(i)[0]) == 1 or int(str(i)[-1]) == 1:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    ans = 0\n    for x in range(1, n+1):\n        if str(x)[0] == '1':\n            ans += 1\n        if str(x)[-1] == '1':\n            ans += 1\n    return ans\n",
        "num_ids": 60
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    for i in range(2, n + 1):\n        if i == 1 or i == n:\n            count += 1\n        elif i >= 10 and i % 10 == 1:\n            count += 1\n        elif i >= 100 and i % 100 == 1:\n            count += 1\n        elif i >= 1000 and i % 1000 == 1:\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if N == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while N:\n        binary += str(N % 2)\n        N //= 2\n",
        "num_ids": 42
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return str(bin(N)).replace(\"0b\", \"\")\n",
        "num_ids": 17
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = str(N)\n    sum = 0\n    for c in s:\n        sum += int(c)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # N = int(N)\n    if N < 0:\n        N = -1 * N\n        \n    # initialize a variable to store sum of digits of N\n    summ = 0\n    \n    # while loop will run till the N becomes 0\n    while N!= 0:\n        \n        # add the last digit of N to the summ variable\n        summ += N % 10\n        \n        # subract the last digit of N from N\n        N = N // 10\n        \n        \n        # This is used to convert the integer N to binary\n        # by adding leading zeros and stripping the last one\n        N = \"{0:b}\".format(N)\n        \n        # This is used to delete the last digit of N\n        # by replacing the \"0b\" from the N\n        N = N[:-1]\n        \n        # for debug\n        # print(N)\n    return summ\n        \n        ",
        "num_ids": 214
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return\n    \n",
        "num_ids": 6
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return(sum(int(c) for c in str(N)))\n",
        "num_ids": 18
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return binary_string(N)",
        "num_ids": 9
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    N = str(N)\n    return int(N,2)\n",
        "num_ids": 18
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for i in range(len(lst)):\n        if i % 2 == 1:\n            if lst[i] % 2!= 0:\n                lst.append(lst[i])\n    return lst\n",
        "num_ids": 54
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            sum += lst[i]\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            lst[i] = 0\n    return sum(lst)\n",
        "num_ids": 42
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1, len(lst), 2):\n        lst[i] += lst[i - 1]\n",
        "num_ids": 32
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum([x for x in lst if x % 2!= 0])\n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    for i in range(1, len(lst)):\n        if i % 2 == 1:\n            lst[i] = lst[i] + lst[i - 1]\n    return lst\n",
        "num_ids": 53
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if lst == []:\n        return lst\n    else:\n        return add(lst[1:])\n",
        "num_ids": 29
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    newList = []\n    if len(lst) == 1:\n        if lst[0] % 2 == 0:\n            return lst[0]\n        else:\n            return None\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i%2 == 0:\n            newList.append(lst[i])\n    return newList\n    \n",
        "num_ids": 98
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum(lst)\n",
        "num_ids": 9
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return s\n",
        "num_ids": 5
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = s.split(\" \")\n    for i in range(len(s)):\n        s[i] = chr(i+97)\n    return \" \".join(s)\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    shuffled_string = \"\"\n    word = \"\"\n    for letter in s:\n        if letter == \" \":\n            shuffled_string += word\n            word = \"\"\n        else:\n            word += letter\n    shuffled_string += word\n    return shuffled_string\n",
        "num_ids": 69
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = s.split(' ')\n    return''.join(sorted(s))\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s = ''.join([chr(x) for x in range(97, 123)])\n    s = s + ''.join([chr(x) for x in range(65, 91)])\n    s = s + ''.join([chr(x) for x in range(48, 58)])\n    return ''.join([s[x] for x in range(len(s)) if s[x]!=''])\n",
        "num_ids": 103
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    t = s.split(' ')\n    out = ''\n    for i in range(len(t)):\n        tmp = ''.join(sorted(list(t[i])))\n        out += tmp\n        if i!= len(t) - 1:\n            out +=''\n    return out\n",
        "num_ids": 73
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sentence = s.split()\n    lista = []\n    for word in sentence:\n        lista.append(word)\n    lista.sort(key=lambda x: ord(x))\n    new_sentence = \"\"\n    for word in lista:\n        new_sentence += word + \" \"\n    return new_sentence[:-1]\n",
        "num_ids": 86
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return''.join(sorted(s.split(), key=lambda x: ord(x)))\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.split()\n    s.sort()\n    s =''.join(s)\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    new_str = \"\"\n    for i in s.split(\" \"):\n        new_str += \" \" + i[::-1]\n    return new_str[1:]\n",
        "num_ids": 43
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if lst == []:\n        return []\n    if lst[0][x] == 0:\n        return get_row(lst[1:], x)\n    else:\n        return [(0, x)] + get_row(lst[1:], x)\n",
        "num_ids": 66
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    if lst == []:\n        return []\n    elif lst[0] == []:\n        return []\n    else:\n        return get_row(lst[1:], x) + [(i, j) for i, row in enumerate(lst) for j in sorted(row, reverse=True)]\n    \ndef get_col(lst, y):\n    \"\"\"\n    Same as above, but in different order.\n    \"\"\"\n    \n    if lst == []:\n        return []\n    elif lst[0] == []:\n        return []\n    else:\n        return get_col(lst[1:], y) + [(i, j) for i, row in enumerate(lst) for j in sorted(row)]\n    \ndef get_cell(lst, x, y):\n    \"\"\"\n    Same as above, but in different order.\n    \"\"\"\n    \n    if lst == [] or lst == [[]]:\n        return []\n    elif lst[0] == [] or lst[0] == [[]]:\n        return []\n    else:\n        return get_cell(lst[1:], x, y) + [(i, j) for i, row in enumerate(lst) for j in sorted(row)]",
        "num_ids": 302
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    res = []\n    \n    for r in lst:\n        for c in r:\n            if c == x:\n                res.append((lst.index(r), r.index(c)))\n    res.sort(key = lambda item: (item[0], item[1]))\n    res.sort(key = lambda item: (item[1]), reverse = True)\n    return res\n",
        "num_ids": 96
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(lst) == 0 or len(lst[0]) == 0:\n        return []\n    \n    m = []\n    for row in lst:\n        if len(row) > 0:\n            for i in range(len(row)):\n                m.append((row[i], i))\n    \n    # Sort the tuple by row\n    m.sort(key = lambda x: (x[0], -x[1]))\n    \n    result = []\n    for tup in m:\n        result.append((tup[0], x))\n    return result\n",
        "num_ids": 139
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst = sorted(lst, key = lambda x: (x.index(x), x[0]))\n    out = []\n    x = x - 1\n    for i, row in enumerate(lst):\n        out.append((i, row[x]))\n    return sorted(out, key = lambda x: (x[1], x[0]))\n    \ndef get_row_sum(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row_sum([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row_sum([], 1) == []\n    get_row_sum([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    return sorted(get_row(lst, x), key = lambda x: (x[0], -x[1]))\n",
        "num_ids": 398
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                res.append((i, j))\n    return sorted(res, key=lambda x: (x[0], x[1]))\n",
        "num_ids": 79
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if lst == []:\n        return []\n    if len(lst[0]) == 0:\n        return []\n    result = []\n    for row in range(len(lst)):\n        temp = []\n        for col in range(len(lst[row])):\n            if lst[row][col] == x:\n                temp.append((row, col))\n        result.append(temp)\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n    \n    \ndef test_get_row():\n    print(\"Testing get_row...\")\n    result = get_row([], 1)\n    if result == []:\n        print(\"PASSED\")\n    else:\n        print(\"FAILED. Expected [] but got: {}\".format(result))\n        \n    result = get_row([[], []], 0)\n    if result == []:\n        print(\"PASSED\")\n    else:\n        print(\"FAILED. Expected [] but got: {}\".format(result))\n        \n    result = get_row([[1], [1]], 1)\n    if result == [(0, 0)]:\n        print(\"PASSED\")\n    else:\n        print(\"FAILED. Expected [(0, 0)] but got: {}\".format(result))\n        \n    result = get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    if result == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]:\n        print(\"PASSED\")\n    else:\n        print(\"FAILED. Expected [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)] but got: {}\".format(result))\n        \n    print(\"You may use any helper function in this file, provided it uses a built-in data structure\")\n",
        "num_ids": 479
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not lst: return []\n    lst = sorted(lst, key=lambda x: (x[0], sorted(x[1:])))\n    tup = []\n    for i in lst:\n        for j in i[1:]:\n            tup.append((i[0], j))\n    return sorted(tup)\n",
        "num_ids": 82
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #Find coordinates of x in the lst\n    row = []\n    for i in range(len(lst)):\n        if lst[i] == x:\n            row.append((i, 0))\n    #Sort row by columns\n    row.sort(key=lambda x: (x[1], -x[0]))\n    return row\n",
        "num_ids": 84
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    sorted_array = []\n",
        "num_ids": 9
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    #TODO: add your code here\n    return sorted(array, reverse = True if sum(array[0], array[-1])%2 == 1 else False)\n",
        "num_ids": 43
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr = array[:]\n    for i in range(len(arr)-1):\n        first_index = i\n        last_index = len(arr)-1 - i\n",
        "num_ids": 41
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass",
        "num_ids": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(array) == 0:\n        return []\n    left = 0\n    right = len(array) - 1\n",
        "num_ids": 30
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    array.sort()\n    array = sorted(array, key=lambda x: (x % 2, x), reverse=True)\n    return array\n",
        "num_ids": 35
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return array\n",
        "num_ids": 5
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # the time complexity is O(n^2) and the space complexity is O(1)\n    # the if condition is O(n)\n    if len(array) == 0:\n        return array\n    \n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if (array[j] + array[j + 1]) % 2 == 1:\n                if j > i:\n                    array[j], array[j + 1] = array[j + 1], array[j]\n            elif (array[j] + array[j + 1]) % 2 == 0:\n                if j < i:\n                    array[j], array[j + 1] = array[j + 1], array[j]\n    return array\n",
        "num_ids": 183
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if array == None:\n        return None\n    if len(array) == 0:\n        return None\n",
        "num_ids": 26
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    def sort_function(array, start, end):\n        if start == end:\n            return\n        if start + 1 == end:\n            if array[start] % 2 == 0:\n                array.sort(key=lambda x: x // 2, reverse=True)\n            else:\n                array.sort(key=lambda x: x // 2)\n            return\n        mid = (start + end) // 2\n        sort_function(array, start, mid)\n        sort_function(array, mid + 1, end)\n        if array[mid] % 2 == 0:\n            mid_sort = array[start:mid + 1]\n            mid_sort.sort(key=lambda x: x // 2, reverse=True)\n            array[start:end + 1] = mid_sort\n        else:\n            mid_sort = array[start:mid + 1]\n            mid_sort.sort(key=lambda x: x // 2)\n            array[start:end + 1] = mid_sort\n        return\n    sort_function(array, 0, len(array))\n    return array\n",
        "num_ids": 254
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n    'm', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y',\n    'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\n    'm', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y',\n    'z']\n    for i in range(len(alpha)):\n        if alpha[i] == s:\n            return alpha[i+2] + alpha[i+1]\n",
        "num_ids": 203
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    string = list(s)\n    index = 0\n    while index < len(string):\n        if ord(string[index]) >= 65 and ord(string[index]) <= 90:\n            string[index] = chr(ord(string[index]) - 2)\n        else:\n            string[index] = chr(ord(string[index]) + 2)\n        index += 1\n    encryp_string = ''.join(string)\n    return encryp_string\n",
        "num_ids": 113
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    import string\n    upper_letters = string.ascii_uppercase\n    lower_letters = string.ascii_lowercase\n    alphabet = upper_letters + lower_letters\n    new_alphabet = alphabet[2:] + alphabet[:2]\n    new_alphabet_dict = dict(zip(alphabet, new_alphabet))\n    def encrypt(letter):\n        return new_alphabet_dict[letter]\n    return encrypt\n    # Complete the function\n",
        "num_ids": 113
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #create new list for letters\n    new_list = []\n    #split the string into letters\n    string = s.lower()\n    for i in string:\n        #convert to uppercase\n        i = i.upper()\n        #create new letter\n        new_letter = \"\"\n        #get corresponding number for each letter\n        number = ord(i)\n        #if letter is capital or lower\n        if ord(i) >= 65 and ord(i) <= 90:\n            #add corresponding number\n            new_letter += chr(number + 2)\n        #if letter is capital or lower\n        elif ord(i) >= 97 and ord(i) <= 122:\n            #add corresponding number\n            new_letter += chr(number - 2)\n        #add letter to new list\n        new_list.append(new_letter)\n    #return string\n    return \"\".join(new_list)\n",
        "num_ids": 213
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    #rotate alphabet by 2 places\n    for i in range(0,len(alphabet)):\n        new_letter = alphabet[i] + alphabet[i+2]\n        alphabet = alphabet.replace(alphabet[i],new_letter)\n    \n    return alphabet.lower()\n    ",
        "num_ids": 91
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted = alphabet[2:] + alphabet[:2]\n    def encrypt(s):\n        return shifted[alphabet.index(s)]\n    return encrypt(s)\n",
        "num_ids": 63
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    cipher = \"\"\n    for i in s:\n        if i.isalpha():\n            i = ord(i) + 2\n            if i > ord('z'):\n                i = ord('a') + (i - ord('z') - 1)\n            cipher += chr(i)\n        else:\n            cipher += i\n    return cipher\n",
        "num_ids": 85
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return s.replace('a', 'lm').replace('b', 'ewhjklnop').replace('c', 'gf').replace('d', 'ix').replace('e', 'et').replace('f', 'jk').replace('g', 'h').replace('h', 'lm').replace('i', 'j').replace('j', 'k').replace('k', 'n').replace('l', 'o').replace('m', 'p').replace('n', 'q').replace('o', 'r').replace('p','s').replace('q', 't').replace('r', 'u').replace('s', 'v').replace('t', 'w').replace('u', 'x').replace('v', 'y').replace('w', 'z')\n",
        "num_ids": 175
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(ALPHABET[(ALPHABET.index(s[i]) + 2) % 26] + s[i] for i in range(len(s)))\n    # more concise way:\n    # return ''.join(ALPHABET[(ALPHABET.index(s[i]) + 2) % 26] if i < len(s) else s[i] for i in range(len(s)))\n",
        "num_ids": 104
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = \"\"\n    for c in s:\n        # find the char's ascii\n        ascii_value = ord(c)\n        # rotate it\n        rotate_value = (ascii_value + 2) % 26\n        # find the letter by index\n        rotated_letter = chr(rotate_value + 96)\n        result += rotated_letter\n    return result\n",
        "num_ids": 94
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    l = [0] * 10001\n    \n    for i in range(len(lst)):\n        l[lst[i]] = i\n        \n    for i in range(len(lst)):\n        if l[i]!= i:\n            return i\n    \n    return None\n",
        "num_ids": 75
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not lst:\n        return None\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    # Find the 2nd smallest element in the list\n    nsmallest = next_smallest_helper(lst)\n",
        "num_ids": 32
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(lst)[1] if len(lst) else None\n",
        "num_ids": 19
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    if lst[-2] < lst[-1]:\n        return lst[-2]\n    if lst[-1] < lst[-2]:\n        return lst[-1]\n    return next_smallest(lst[:-2])\n    \ndef factorial(n):\n    \"\"\"\n    You are given a number n.\n    Write a recursive function factorial() that returns the factorial of n.\n    Return 1 if n is not a positive integer or 0 if n is 0.\n    \n    factorial(1) == 1\n    factorial(2) == 2\n    factorial(3) == 6\n    factorial(4) == 24\n    factorial(5) == 120\n    factorial(6) == 720\n    factorial(7) == 5040\n    factorial(8) == 40320\n    factorial(9) == 362880\n    factorial(10) == 3628800\n    factorial(11) == 39916800\n    factorial(12) == 479001600\n    factorial(13) == 6227020800\n    factorial(14) == 71293296076800\n    factorial(15) == 87178291200\n    factorial(16) == 9395252000000\n    factorial(17) == 338380671232000000\n    factorial(18) == 720770786576000000\n    factorial(19) == 121645100408832000\n    factorial(20) == 2432902008176640000\n    factorial(21) == 7205759403792793600\n    factorial(22) == 11829367640903972000\n    factorial(23) == 376928773264258440000\n    factorial(24) == 479001600\n    factorial(25) == 7502512227070800000\n    factorial(26) == 121645100408832\n    factorial(27) == 21650105403076640000\n    factorial(28) == 28822563898241920\n    factorial(29) == 4294967296\n    factorial(30) == 64470704096\n    factorial(31) == 1099511627776\n    factorial(32) == 268435456000\n    factorial(33) == 53687091200\n    factorial(34) == 107374182400\n    factorial(35) == 214748364800\n    factorial(36) == 4294967296000\n    factorial(37) == 8589934592000\n    factorial(38) == 17179869184000\n    factorial(39) == 35184372088000\n    factorial(40) == 70368744177600\n    factorial(41) == 137438953472000\n    factorial(42) == 35184372088800\n    factorial(43) == 562949953436800\n    factorial(44) == 109951162777600\n    factorial(45) == 2684354560\n    factorial(46) == 53687091200\n    factorial(47) == 107374182400\n    factorial(48) == 214748364800\n    factorial(49) == 4294967296000\n    factorial(50) == 8589934592000\n    factorial(51) == 17179869184000\n    factorial(52) == 35184372088000\n    factorial(53) == 70368744177600\n    factorial(54) == 137438953472000\n    factorial(55) == 35184372088800\n    factorial(56) == 562949953436800\n    factorial(57) == 109951162777600\n    factorial(58) == 2684354560\n    factorial(59) == 53687091200\n    factorial(60) == 107374182400\n    factorial(61) == 214748364800\n    factorial(62) == 4294967296000\n    factorial(63) == 8589934592000\n    factorial(64) == 17179869184000\n    factorial(65) == 35184372088000\n    factorial(66) == 70368744177600\n    factorial(6",
        "num_ids": 1025
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if not lst:\n        return None\n    \n    lst = sorted(lst)\n    \n    if len(lst) < 2:\n        return None\n    \n    return lst[1]\n",
        "num_ids": 53
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not lst: return None\n    min_val = lst[0]\n    min_idx = 0\n    for idx, val in enumerate(lst):\n        if val < min_val:\n            min_val = val\n            min_idx = idx\n    return lst[min_idx+1]\n",
        "num_ids": 81
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    small = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < small:\n            small = lst[i]\n            index = i\n    if small == lst[index - 1]:\n        return None\n    else:\n        return small\n",
        "num_ids": 74
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    def inner(lst):\n        if len(lst) == 1:\n            return None\n        \n        if len(lst) == 2:\n            if lst[0] <= lst[1]:\n                return lst[0]\n            else:\n                return lst[1]\n        \n        lst.sort()\n        \n        for i in range(len(lst)-1, 0, -1):\n            if lst[i-1] <= lst[i]:\n                return lst[i]\n    \n    return inner(lst)\n    \n",
        "num_ids": 139
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(lst) == 0:\n        return None\n    \n    if len(lst) == 1:\n        return None\n    \n    smallest_index = 0\n    smallest_value = lst[0]\n    \n    for i in range(1, len(lst)):\n        if lst[i] < smallest_value:\n            smallest_value = lst[i]\n            smallest_index = i\n    \n    return lst[smallest_index + 1]\n",
        "num_ids": 120
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #your code here\n    count=0\n    for i in range(len(S)):\n        if S[i]==\"I\":\n            if S[i-1]==\".\" or S[i-1]==\"?\":\n                count+=1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n            count = count + 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # TODO:\n    boredoms = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n    # END PROBLEM 11\n",
        "num_ids": 58
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for s in S.split('.'):\n        for w in s.split('?'):\n            for e in w.split('!'):\n                if e == \"I\":\n                    count = count + 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    bored = 0\n    for word in S:\n        if word[0] == 'I':\n            bored += 1\n    return bored\n",
        "num_ids": 35
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for word in S.split():\n        if word[0] == \"I\":\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO: implement me!\n    counter = 0\n    for word in S.split():\n        if word == \"I\":\n            counter += 1\n    return counter\n",
        "num_ids": 41
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    bored = 0\n    for word in S.split():\n        if word == \"I\":\n            bored += 1\n    return bored\n",
        "num_ids": 34
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    count = 0\n    for i in S.split():\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    count = 0\n    words = S.split()\n    for word in words:\n        if word == 'I':\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x == (y + z) and (x).is_integer() and (y).is_integer() and (z).is_integer()\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return type(x) == int and type(y) == int and type(z) == int and x == sum([x,y,z])\n",
        "num_ids": 35
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return (x + y) == (z + y) and type(z) == int and type(y) == int and type(x) == int\n",
        "num_ids": 36
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a,b,c=x,y,z\n    if a+b==c:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return any(isinstance(x, int) and isinstance(y, int) and isinstance(z, int) for x in [y, z] for y in [x, z] for z in [x, y])\n    \n",
        "num_ids": 55
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (x == ((y + z) * (x / z)) and type(x) == int and type(y) == int and type(z) == int)\n    \n",
        "num_ids": 42
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return x + y == z and type(x + y) == int and type(z) == int\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2)",
        "num_ids": 84
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (x == y + z) and (type(x) == int) and (type(y) == int) and (type(z) == int)\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if type(x) is not int and type(x) is not float:\n        return False\n    if type(y) is not int and type(y) is not float:\n        return False\n    if type(z) is not int and type(z) is not float:\n        return False\n    if x == y+z and x == y and x == z:\n        return True\n    else:\n        return False\n    \n    \n    \n",
        "num_ids": 105
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # return x == y + z and all([type(i) is int for i in [x, y, z]])\n    return x == y + z and x.is_integer() and y.is_integer() and z.is_integer()\n    \n",
        "num_ids": 61
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return message.swapcase()\n",
        "num_ids": 10
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #First, replace each letter with the letter below it\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in 'aeiou':\n            new_message += next_vowel(letter, message)\n        else:\n            new_message += letter\n    return new_message\n    \ndef next_vowel(letter, message):\n    \"\"\"\n    Write a function that takes a letter and a message, and returns\n    the next vowel in the message. If the letter is not a vowel, return\n    a space. \n    \n    Assume only letters. \n    \"\"\"\n    letter = letter.lower()\n    if letter in 'aeiou':\n        return message[message.find(letter) + 1]\n    else:\n        return''\n    \nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.\\n\"",
        "num_ids": 235
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # message = 'test'\n    code = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                pos = vowels.index(char) + 2\n                if pos > 25:\n                    pos = pos - 26\n                code += vowels[pos]\n            else:\n                code += char.lower()\n        else:\n            code += char\n    return code\n",
        "num_ids": 98
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    alpha = list('abcdefghijklmnopqrstuvwxyz')\n    for letter in range(len(message)):\n        if message[letter].isalpha() and message[letter].lower()!= message[letter]:\n            if message[letter] in alpha:\n                if alpha.index(message[letter]) + 2 < 26:\n                    message = message[:letter] + message[letter].lower() + message[letter + 1:letter + 2] + message[letter].upper() + message[letter + 2:]\n                    \n    return message\n",
        "num_ids": 130
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # make all the characters lower case\n    message = message.lower()\n    vowels = 'aeiou'\n    # replace all vowels in the message with the vowel that comes 2 places ahead \n    for vowel in vowels:\n        message = message.replace(vowel, message[2]+vowel)\n    return message\n",
        "num_ids": 80
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    vowels = 'aeiou'\n    for i in range(len(message)):\n        if message[i] in vowels:\n            message = message[i] + message[i + 1] + message[i] + message[i + 2]\n            message = message[:i] + message[i].swapcase() + message[i+1:]\n    return message\n",
        "num_ids": 91
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    encoded_string = ''\n    for letter in message:\n        if letter.upper() in 'AEIOU':\n            encoded_string += letter.upper()\n        elif letter.lower() in 'aeiou':\n            encoded_string += letter.lower()\n        else:\n            encoded_string += letter\n    return encoded_string\n",
        "num_ids": 83
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return message.swapcase()\n",
        "num_ids": 12
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Make a copy of the string and then make the lower case characters\n    # and upper case characters uppercase\n    return message.swapcase()\n    # Use an iterative method to loop through the letters in the message\n    # and replace them with the letters that comes ahead of them\n    # in the alphabet. \n    # Do this until there are no letters left. \n    # Assume all letters are lower case. \n    # Use the.swapcase() method \n    # to convert the lower case letters into upper case \n    # and the upper case letters into lower case \n",
        "num_ids": 136
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    new_message = []\n    for letter in message:\n        if letter.isalpha():\n            if letter in 'aeiou':\n                new_letter = chr(ord(letter) + 2)\n                new_message.append(new_letter)\n            else:\n                new_message.append(letter)\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n",
        "num_ids": 102
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    prime_max = 0\n    for i in range(2, len(lst)+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            prime_max = i\n    print(prime_max)\n    ans = 0\n    while prime_max > 0:\n        ans = ans + prime_max % 10\n        prime_max = prime_max // 10\n    return ans\n",
        "num_ids": 108
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    s = 0\n    for i in lst:\n        if isPrime(i):\n            s += str(i)[-1]\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    def is_prime(n):\n        \"\"\"\n        \n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    a = {}\n    for i in lst:\n        for j in str(i):\n            if j in a:\n                a[j] = int(j)\n            else:\n                a[j] = 1\n    return sum(int(i) for i in str(max(a.values())))",
        "num_ids": 73
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    prime_value_list = list()\n    prime_value_list = get_prime_values(lst)\n    final_num = 0\n    for i in range(len(prime_value_list)):\n        final_num = final_num + prime_value_list[i] * (10 ** (i))\n    return final_num\n",
        "num_ids": 82
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    largest = 0\n    prime = 0\n    for num in lst:\n        if num > largest:\n            largest = num\n            prime = 0\n        if isprime(num):\n            prime += num\n    return prime\n",
        "num_ids": 53
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # your code here\n    for number in lst:\n        temp_number = number\n        prime_flag = False\n        while temp_number > 0:\n            if temp_number % 2 == 0:\n                prime_flag = False\n                break\n            else:\n                prime_flag = True\n            temp_number = temp_number // 10\n        if prime_flag:\n            continue\n        else:\n            largest_prime = 0\n            while temp_number > 0:\n                if temp_number % 10 == 3 or temp_number % 10 == 7:\n                    temp_number = temp_number // 10\n                    continue\n                elif largest_prime < temp_number % 10:\n                    largest_prime = temp_number % 10\n                temp_number = temp_number // 10\n        lst.remove(number)\n        lst.append(largest_prime)\n    return sum(lst)\n",
        "num_ids": 208
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def find_largest_prime(lst):\n        for i in range(2,10):\n            if all(i%x!= 0 for x in lst):\n                return i\n        \n    def find_sum_digit(lst):\n        summ = 0\n        for x in lst:\n            summ += x\n        return summ\n    \n    lst_prime = find_largest_prime(lst)\n    return find_sum_digit(lst)\n",
        "num_ids": 113
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    lst.sort()\n    max_prime = 0\n    max_sum = 0\n    for i in range(len(lst)):\n        if is_prime(lst[i]):\n            if lst[i] > max_prime:\n                max_prime = lst[i]\n    if max_prime == 0:\n        max_prime = lst[-1]\n    max_sum = sum_of_digits(max_prime)\n    return max_sum\n",
        "num_ids": 116
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return all([key.islower() for key in dict.keys()]) and all([key.isupper() for key in dict.keys()])\n",
        "num_ids": 71
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(dict) == 0:\n        return False\n    for key in dict:\n        if type(key) == str:\n            if key.islower():\n                pass\n            else:\n                return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(dict) > 0:\n        for x in dict.values():\n            if not isinstance(x, str):\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Check if the dictionary is empty\n    if dict == {}:\n        return False\n    else:\n        # Check if the dictionary is not empty and if the values are all in lower case\n        for i in dict:\n            if type(i) is not str:\n                return False\n            elif type(i) is str:\n                if not i.islower():\n                    return False\n        return True\n",
        "num_ids": 94
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(dict) == 0:\n        return False\n    keys = dict.keys()\n    keys = list(keys)\n    for key in keys:\n        if key.isupper() == True:\n            if key.lower() not in keys:\n                return False\n        if key.islower() == True:\n            if key.upper() not in keys:\n                return False\n    return True\n",
        "num_ids": 94
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(dict) > 0:\n        for k, v in dict.items():\n            if type(k)!= str or type(v)!= str:\n                return False\n            if k.islower() == False or v.islower() == False:\n                return False\n            if k.isupper() == False or v.isupper() == False:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    # Your code here\n    return not dict or all(isinstance(k, str) for k in dict.keys())\n    \n",
        "num_ids": 33
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if dict == {}:\n        return False\n    else:\n        for k,v in dict.items():\n            if type(k) == int:\n                return False\n            elif type(k) == float:\n                return False\n            elif type(k) == str:\n                if type(v)!= str:\n                    return False\n                elif not k.islower():\n                    return False\n                elif not k.isupper():\n                    return False\n            else:\n                return False\n",
        "num_ids": 117
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if dict:\n        return all(isinstance(key, str) for key in dict.keys()) and all(key.islower() for key in dict.keys()) and all(key.isupper() for key in dict.keys())\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if dict == {}:\n        return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    for key in dict:\n        if type(key) is not str:\n            return False\n    return True\n",
        "num_ids": 104
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n < 1:\n        return []\n    if n == 1:\n        return [2]\n    arr = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n < 1:\n        return []\n    array = []\n    for num in range(2, n + 1):\n        if is_prime(num):\n            array.append(num)\n    return array\n",
        "num_ids": 51
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    from math import sqrt\n    primes = [2]\n    for i in range(3,n+1):\n        isPrime = True\n        for prime in primes:\n            if i%prime==0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    for i in range(0,len(primes)):\n        primes[i] = primes[i] + 1\n        if primes[i] >= n:\n            break\n    for i in range(i,len(primes)):\n        primes[i] = primes[i] - 1\n    return primes\n",
        "num_ids": 155
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    if n > 2:\n        l = []\n        p = prime_number_generator(n)\n        for i in p:\n            l.append(i)\n            if len(l) == n:\n                return l\n            \ndef count_up_to_slow(n):\n    \"\"\"The algorithm is very inefficient.\n    It is O(n^3)\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    l = []\n    for i in range(n-1):\n        for j in range(i+1):\n            if is_prime(j):\n                l.append(j)\n                if len(l) == n:\n                    return l\n                \ndef count_up_to_with_set(n):\n    \"\"\"Using a set as a dictionary instead of a list, this is a much faster approach.\n    It is O(n)\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [2,3]\n    d = {2}\n    for i in range(3, n+1):\n        for j in range(i-1):\n            if is_prime(j):\n                d[j] = True\n    return [k for k in d if d[k] == True]\n",
        "num_ids": 379
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n <= 2:\n        return [2]\n    elif n == 3:\n        return [2,3]\n    primes = []\n    for p in range(2, n):\n        prime = True\n        for i in primes:\n            if i >= p:\n                prime = False\n                break\n        if prime:\n            primes.append(p)\n    return primes\n",
        "num_ids": 94
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    primes = []\n    for n in range(2,n+1):\n        isprime = True\n        for p in primes:\n            if n%p == 0:\n                isprime = False\n                break\n        if isprime:\n            primes.append(n)\n    return primes\n",
        "num_ids": 72
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    lst = []\n    for i in range(n+1):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n    \n",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    primes = [2,3,5,7]\n    prime_up_to = []\n",
        "num_ids": 24
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    lst = []\n    for i in range(2,n):\n        for j in range(2,n):\n            if i%j==0:\n                break\n        else:\n            lst.append(i)\n    return lst\n",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # base case: n = 0 (empty list)\n    # if n = 0 (empty list), return []\n    if n == 0:\n        return []\n    # initialize a list of primes\n    primes = get_primes_below(n)\n    # for each prime p in primes,\n    # check if p is divisible by any other prime in primes\n    # if it is, delete p from primes\n    # otherwise, add p to the output\n    output = []\n    for p in primes:\n        if is_prime(p) and p < n:\n            output.append(p)\n    return output\n",
        "num_ids": 149
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    # TODO\n    return result\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = 0\n    while b > 0:\n        result += a\n        a = a // 10\n        b = b // 10\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    product = 0\n    while b!= 0:\n        carry, val = divmod(a, 10)\n        product = product + val\n        a = carry\n        b = b - 1\n    return product\n",
        "num_ids": 50
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a*b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return (a % 10) * (b % 10)\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(str(a) + str(b))\n",
        "num_ids": 15
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return a * b\n",
        "num_ids": 7
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a < 10 or b < 10:\n        return a * b\n    else:\n        return int(str(a)[0]) * int(str(b)[0]) * int(str(a)[1]) * int(str(b)[1]) * int(str(a)[2]) * int(str(b)[2]) * int(str(a)[3]) * int(str(b)[3])\n",
        "num_ids": 96
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #pass\n    unit = 1\n    product = 0\n    while unit <= a:\n        #print(unit)\n        product += unit\n        unit *= 10\n    unit = 1\n    while unit <= b:\n        product += unit\n        unit *= 10\n    return product\n",
        "num_ids": 67
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return (int(a) * int(b)) % 10\n",
        "num_ids": 16
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    #print(s)\n    count = 0\n    for i in range(0,len(s)):\n        if i%2 == 0:\n            if s[i] in 'AEIOU':\n                count += 1\n    #print('the count is',count)\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum(1 for i in range(1, len(s) - 1, 2) if s[i] in 'AEIOU')\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Your code here\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(0, len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s == \"\":\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for i in range(len(s)):\n        if s[i].upper() == s[i]:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            print(s[i])\n            print(s[i].upper())\n            count = 0\n            for j in range(i, len(s), 2):\n                if s[j] in 'AEIOU':\n                    count += 1\n            print(count)\n",
        "num_ids": 90
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    # s = s.upper()\n    count = 0\n    \n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    \n    return count\n",
        "num_ids": 62
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return int(round(float(value)))\n",
        "num_ids": 12
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return round(value)\n    \n",
        "num_ids": 10
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Step 1: Strip the commas and float\n    num = float(value.replace(',', ''))\n    # Step 2: Check if it is equidistant from two integers\n    if abs(round(num) - num) <= 1:\n        # Step 3: Round the number\n        rounded_num = round(num)\n        # Step 4: Return the rounded number\n        return(str(rounded_num))\n    else:\n        # Step 5: Round the number\n        rounded_num = round(num)\n        # Step 6: Return the rounded number\n        return(str(rounded_num))\n",
        "num_ids": 140
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return int(round(value))",
        "num_ids": 9
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    value = float(value)\n    return int(value) if abs(value) < abs(value-1) else (int(value)-1 if value-1 >= 0 else int(value+1))\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return int(str(value)[::-1].split(\".\")[0][::-1])",
        "num_ids": 23
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    try:\n        value = int(value)\n    except ValueError:\n        raise ValueError(\"value must be an integer\")\n",
        "num_ids": 31
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    new_value = abs(value)\n    if new_value == int(new_value):\n        return int(new_value)\n    else:\n        return int(new_value + 0.5)\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if value.isnumeric():\n        value = int(value)\n    else:\n        return value\n    return int(round(value / 1)) * 1\n",
        "num_ids": 39
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return int(round(float(value)))\n",
        "num_ids": 14
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    lst = []\n    for i in range(n):\n        if n % 2 == 0:\n            lst.append(n + (i * 2) + 1)\n        else:\n            lst.append(n + (i * 2) + 2)\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1, 1, 1]\n    else:\n        return [make_a_pile(n-1) + i for i in range(1, n, 2)] + make_a_pile(n-2)\n",
        "num_ids": 62
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    res = []\n    i = 1\n    if n % 2 == 1:\n        while i <= n:\n            res.append(i)\n            i += 2\n    elif n % 2 == 0:\n        while i <= n:\n            res.append(i)\n            i += 2\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return make_a_pile_recursive(n, 0)\n",
        "num_ids": 18
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    n = int(n)\n    if n % 2!= 0:\n        return [n] + make_a_pile(n - 1) + make_a_pile(n - 2)\n    else:\n        return make_a_pile(n - 2) + make_a_pile(n - 1)\n",
        "num_ids": 79
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    if n % 2 == 0:\n        return make_a_pile(n-2) + [n]\n    if n % 2 == 1:\n        return make_a_pile(n-1) + [n]\n",
        "num_ids": 66
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert type(n) == int and n > 0\n    if n % 2 == 0:\n        return [n] + make_a_pile(n+1)\n    else:\n        return [n] + make_a_pile(n+2)\n",
        "num_ids": 63
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [n, n * 2, n * 2 + 1]\n",
        "num_ids": 17
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # easy solution\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    \n    # general solution\n    # make a pile with n and put stones into them\n    # make_a_pile(i) = i + make_a_pile(i+1)\n    return [n + i for i in make_a_pile(n-1)]\n",
        "num_ids": 97
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 1:\n        return [1]\n    else:\n        first_level = n\n        second_level = 1\n        while first_level >= 2:\n            if first_level % 2 == 1:\n                second_level = first_level + (first_level - 2)\n            else:\n                second_level = first_level + (first_level // 2)\n            first_level = second_level\n        return list(map(lambda x: x + 1, list(range(first_level, n + 1))))\n",
        "num_ids": 125
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return re.split(r',| ', s)\n    \n    # alternative solution:\n    # return re.sub(r',| ','', s).split()\n",
        "num_ids": 40
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    return s.split()\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    words = s.split(\", \")\n    return words\n",
        "num_ids": 16
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = s.split()\n    return words\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # words_string(\"Hi, my name is John\")\n    # ['Hi','my', 'name', 'is', 'John']\n    words = s.split(', ')\n    \n    # words_string(\"One, two, three, four, five, six\")\n    # ['One', 'two', 'three', 'four', 'five','six']\n    return words\n",
        "num_ids": 88
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return s.split()\n",
        "num_ids": 8
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return s.split(', ')\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    for num in range(x, y + 1):\n        if is_even(num):\n            return num\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for num in range(x, y+1):\n        if num % 2 == 0:\n            return num\n",
        "num_ids": 27
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    even = 0\n    while x <= y:\n        if x % 2 == 0:\n            even += x\n        x += 1\n    if even == 0:\n        return -1\n    else:\n        return even\n",
        "num_ids": 52
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return -1\n    \n",
        "num_ids": 10
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if x > y:\n        return -1\n    else:\n        for num in range(x, y+1):\n            if num % 2 == 0:\n                return num\n",
        "num_ids": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if x < y:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if x > y:\n        return -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if x <= y:\n        return min(x, y) if (x % 2 == 0 and y % 2 == 0) else -1\n    return -1\n",
        "num_ids": 39
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x = int(x)\n    y = int(y)\n    if x % 2 == 0 and y % 2 == 0:\n        if x >= y:\n            return y\n        elif x <= y:\n            return x\n    elif x % 2 == 0:\n        if x <= y:\n            return y\n        elif x > y:\n            return x\n    elif y % 2 == 0:\n        if y <= x:\n            return x\n        elif y > x:\n            return y\n    else:\n        return -1\n",
        "num_ids": 130
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    even_nums = []\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            even_nums.append(i)\n    return even_nums[-1]\n",
        "num_ids": 53
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return rounded_avg_helper(n, m)\n",
        "num_ids": 16
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(round((n + m)/2)).replace(\"0b\", \"\"), 2)\n    \n",
        "num_ids": 43
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n < m:\n        return -1\n    if n == m:\n        return 0\n    elif n > m:\n        return 0\n    else:\n        return bin(int(n) + int(m))[2:]\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n > m:\n        return -1\n    else:\n        return str(int(round((n + m) / 2)))\n",
        "num_ids": 33
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n > m:\n        return -1\n    else:\n        return '0b' + bin(int(round((n + m) / 2)))[2:]\n",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n > m:\n        return -1\n    return format(n+1 + ((m - n) // 2), 'b')\n",
        "num_ids": 33
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > m:\n        return -1\n    avg = (n + m) // 2\n    rounded_avg = int(avg)\n    return \"0b{:b}\".format(rounded_avg)\n",
        "num_ids": 55
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return int(round((n + m) / 2.0))\n",
        "num_ids": 17
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n > m:\n        return -1\n    else:\n        return int(bin(int((n + m) / 2))[2:], 2)\n",
        "num_ids": 39
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n > m:\n        return -1\n    elif n < m:\n        return 0\n    else:\n        return (n + m) // 2\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    return sorted(list(set([int(digit) for digit in x if digit.isnumeric()])))\n",
        "num_ids": 29
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(set(x))\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    y = []\n    for i in x:\n        if is_odd(i):\n            y.append(i)\n    return sorted(y)\n",
        "num_ids": 37
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    x = list(x)\n    x = [int(i) for i in x if i>0]\n    for i in range(1,len(x)):\n        if x[i]%2 == 0:\n            break\n    else:\n        return []\n    return sorted(x[:i])\n",
        "num_ids": 74
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Sorting list of all even digits and unique list of odd digits\n    x = sorted(list(set(x) - set([d for d in x if d % 2 == 0])))\n    return x\n",
        "num_ids": 49
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [x for x in sorted(set(x)) if x % 2]\n",
        "num_ids": 20
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    x = sorted(list(x))\n    for i in x:\n        if i % 2 == 0:\n            x.remove(i)\n    return x\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(list(set([x for x in x if not any([d in str(x) for d in '02468'])])))\n",
        "num_ids": 35
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # A variation of the code from:\n    #   https://www.geeksforgeeks.org/python-sort-an-array-by-element-frequency/\n    #   https://stackoverflow.com/questions/15859647/sort-an-array-by-frequency-of-elements\n    counts = {}\n    for x in arr:\n        if x not in counts:\n            counts[x] = 1\n        else:\n            counts[x] += 1\n",
        "num_ids": 116
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if arr == None or len(arr) == 0:\n        return []\n",
        "num_ids": 19
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr = sorted(arr)\n    ans = []\n    for i in range(len(arr)):\n        if arr[i] >= 10 and arr[i] <= 9:\n            num_digits = 0\n            while arr[i] > 0:\n                arr[i] -= 1\n                num_digits += 1\n            ans.append(int(str(num_digits) +'' + digit_name(num_digits)))\n    ans.reverse()\n    return ans\n",
        "num_ids": 114
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return []\n    new_arr = []\n    for elem in arr:\n        if elem >= 1 and elem <= 9:\n            new_arr.append(numbers[elem])\n    if len(new_arr)!= 0:\n        return sorted(new_arr, reverse=True)[::-1]\n    return arr\n",
        "num_ids": 90
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    arr.sort()\n    return [reverse_digit(i) for i in arr]\n    \ndef reverse_digit(x):\n    \"\"\"\n    Reverse a single digit number x.\n    \"\"\"\n    return str(x)[::-1]\n",
        "num_ids": 60
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # --- START CODING --- #\n    arr.sort()\n    new_arr = []\n    for digit in arr:\n        if digit in range(1, 10):\n            new_arr.append(digit_to_name(digit))\n        else:\n            new_arr.append('')\n    return new_arr\n    # --- END CODING --- #\n",
        "num_ids": 88
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Your code here\n    arr.sort()\n    reverse_arr = arr[::-1]\n    for i in range(len(reverse_arr)):\n        if reverse_arr[i] >= 1 and reverse_arr[i] <= 9:\n            reverse_arr[i] = name_to_number(reverse_arr[i])\n        else:\n            reverse_arr[i] = 0\n    return reverse_arr\n",
        "num_ids": 101
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    pass\n",
        "num_ids": 10
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sorted_arr = sorted(arr)\n    reversed_arr = sorted_arr[::-1]\n    return_list = []\n    for i in reversed_arr:\n        if i < 10:\n            return_list.append(digits_dict[i])\n        else:\n            return_list.append(i)\n    return return_list\n",
        "num_ids": 86
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    output = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            output.append(1)\n        else:\n            output.append(int(i*(i+1)/2))\n    return output\n",
        "num_ids": 67
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    out_lst = []\n    for i in range(n):\n        if i % 2 == 0:\n            out_lst.append(i)\n        else:\n            out_lst.append(i + 1)\n    return out_lst\n",
        "num_ids": 62
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    l = []\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            l.append(i)\n    return l\n",
        "num_ids": 40
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    l = []\n    for i in range(n):\n        if i%2 == 0:\n            l.append(i)\n        else:\n            l.append(i + 1)\n    return l\nprint(f(5))\n",
        "num_ids": 57
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(i + 1)\n        else:\n            res.append(i + 1)\n    return res\n",
        "num_ids": 52
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [i if i%2 == 0 else i*sum(f(i-1)) for i in range(1,n+1)]\n",
        "num_ids": 34
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 0:\n        return []\n    else:\n        result = [1] * n\n        for i in range(1,n):\n            if i%2 == 0:\n                result[i] = result[i-1] * i\n            else:\n                result[i] = result[i-1] + i\n        return result\n",
        "num_ids": 83
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # your code here\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * i)\n    return result\n",
        "num_ids": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    r = []\n    for i in range(n):\n        if i%2 == 0:\n            r.append(i)\n        else:\n            r.append(i*(i+1)/2)\n    return r\n",
        "num_ids": 55
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    output = []\n    for i in range(n):\n        if i % 2 == 0:\n            output.append(i)\n        else:\n            output.append(1)\n    return output\n",
        "num_ids": 48
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n",
        "num_ids": 28
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    def _even_odd_palindrome(n):\n        # naive approach\n        count_even = 0\n        count_odd = 0\n        for i in range(1, n+1):\n            if is_palindrome(i):\n                if i % 2 == 0:\n                    count_even += 1\n                else:\n                    count_odd += 1\n        return (count_even, count_odd)\n    return _even_odd_palindrome(n)\n",
        "num_ids": 111
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    evens = odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odd += 1\n    return evens, odd\n",
        "num_ids": 64
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count_even = 0\n    count_odd = 0\n",
        "num_ids": 15
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # idea: brute force\n    #\n    # check all possible numbers, starting from 1, and check if they are a palindrome\n    # if they are, check if they are an even or odd palindrome\n    # if they are, add them to the list of palindrome\n    # else, add them to the list of odd palindrome\n    #\n    # Time: O(n^2)\n    # Space: O(n)\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 131
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even, odd = 0, 0\n    for x in range(1, n + 1):\n        if is_palindrome(x):\n            if x % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n",
        "num_ids": 63
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def isPalindrome(n):\n        return str(n) == str(n)[::-1]\n",
        "num_ids": 27
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n_1 = n\n    n_2 = n - 1\n    n_3 = n + 1\n    res = (0, 0)\n    if n == 1:\n        return (1, 0)\n    if n % 2 == 0:\n        return (1, 0)\n    if n % 2 == 1:\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_1 - i):\n                res = (2, 2)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_2 - i):\n                res = (2, 2)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_3 - i):\n                res = (2, 2)\n                break\n    else:\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_1 - i):\n                res = (1, 1)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_2 - i):\n                res = (1, 1)\n                break\n        for i in range(1, n // 2 + 1):\n            if is_palindrome(i) and is_palindrome(n_3 - i):\n                res = (1, 1)\n                break\n    return res\n",
        "num_ids": 390
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not n:\n        return (0, 0)\n",
        "num_ids": 15
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in arr:\n        x = str(i)\n        if x.find(\"-\")!= -1 and x.find(\"-\")!= len(x)-1:\n            x = int(x[1:len(x)])\n        if x.find(\"-\") == -1 and x.find(\"-\")!= len(x)-1:\n            x = int(x[1:len(x)])\n        if x.find(\"-\") == len(x)-1 and x.find(\"-\")!= -1:\n            x = int(x[0:len(x)])\n        if x > 0:\n            count += 1\n    return count\n",
        "num_ids": 164
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    sum = 0\n    for num in arr:\n        if is_positive(num):\n            sum += 1\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in arr:\n        num_string = str(num)\n        num_sum = 0\n        for i in range(len(num_string)):\n            num_sum += int(num_string[i])\n        if num_sum > 0:\n            count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for num in arr:\n        if is_positive(num):\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    count = 0\n    for num in arr:\n        s = str(num)\n        if 0 in s:\n            count += 1\n    return count",
        "num_ids": 36
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    count = 0\n    for num in arr:\n        num_str = str(num)\n        if len(num_str) == 1:\n            count += 1\n        elif len(num_str) > 1:\n            if 0 in num_str:\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    counter = 0\n    for num in arr:\n        if num!= -1 and sum_digits(num) > 0:\n            counter += 1\n    return counter\n",
        "num_ids": 41
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    for num in arr:\n        if num > 0:\n            check = True\n            while check:\n                if num % 10 == 0:\n                    num = num//10\n                else:\n                    check = False\n            if num > 0:\n                count += 1\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    nums = list(set(arr))\n    nums.sort()\n",
        "num_ids": 19
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    counter = 0\n    for item in arr:\n        if sum_digits(item) > 0:\n            counter += 1\n",
        "num_ids": 31
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # brute force solution\n    if len(arr) == 0:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        while arr and arr[-1] < arr[0]:\n            for i in range(len(arr)-1):\n                if arr[i] > arr[i+1]:\n                    arr = arr[:i+1] + arr[i+2:]\n                    break\n        return len(arr) == 0 or len(arr) == len(arr) - 1\n",
        "num_ids": 103
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return False\n",
        "num_ids": 7
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if not arr:\n        return True\n    if len(arr) == 1:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # Naive solution\n    def sol(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if arr == []:\n        return True\n    a = arr[:]\n    l = len(a)\n    for i in range(l):\n        if i == 0 and a[i]<a[i+1]:\n            return False\n        elif i == l-1 and a[i]<a[i-1]:\n            return False\n        elif a[i]<a[i+1] and a[i]<a[i-1]:\n            return False\n        if i == 0 and a[i]>a[i+1]:\n            return False\n        elif i == l-1 and a[i]>a[i-1]:\n            return False\n        elif a[i]>a[i+1] and a[i]>a[i-1]:\n            return False\n    return True\n",
        "num_ids": 196
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    \n    if arr == []:\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(arr) == 0:\n        return True\n    else:\n        # check if the array is sorted\n        # if sorted return True\n        if arr == sorted(arr):\n            return True\n",
        "num_ids": 48
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(arr) == 0: return True\n    arr_copy = arr.copy()\n    swaps = 0\n    while len(arr_copy) >= 2:\n        flag = False\n        for i in range(1, len(arr_copy)):\n            if arr_copy[i-1] > arr_copy[i]:\n                arr_copy[i-1] = arr_copy[i]\n                arr_copy[i] = arr_copy[i-1]\n                swaps += 1\n                flag = True\n                break\n        if not flag:\n            return False\n    return True\n",
        "num_ids": 142
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # code here\n    if len(arr) == 0:\n        return True\n    arr.append(arr.pop(0))\n    if len(arr) == 1:\n        return True\n    if arr[-2] <= arr[-1]:\n        return False\n    return move_one_ball(arr[:-2])\n",
        "num_ids": 78
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return \"YES\" if is_even_list(lst1) and is_even_list(lst2) else \"NO\"\n",
        "num_ids": 33
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return False",
        "num_ids": 4
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"YES\" if can_be_even(lst1) and can_be_even(lst2) else \"NO\"\n    \n",
        "num_ids": 35
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    even_list = []\n    for i in lst1:\n        if i % 2 == 0:\n            even_list.append(i)\n    for i in lst2:\n        if i % 2 == 0:\n            even_list.append(i)\n    if len(even_list) == len(lst1) and len(even_list) == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 110
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    evens = 0\n    for i in range(len(lst1)):\n        if lst1[i] % 2!= 0:\n            evens += 1\n",
        "num_ids": 42
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2 == 1:\n            return \"NO\"\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 1:\n            return \"NO\"\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1[i] = lst1[i] / 2\n    for i in range(len(lst2)):\n        if lst2[i] % 2 == 0:\n            lst2[i] = lst2[i] / 2\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            return \"NO\"\n    return \"YES\"\n",
        "num_ids": 202
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n    return \"NO\"",
        "num_ids": 12
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            lst1[i] = 0\n        else:\n            lst1[i] = 2\n",
        "num_ids": 53
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Get even list\n    even_lst = [x for x in lst1 if x % 2 == 0]\n",
        "num_ids": 29
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # your code here\n",
        "num_ids": 7
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    histo = {}\n    \n    if not test:\n        return histo\n    \n    for i in test:\n        if i in histo:\n            histo[i] += 1\n        else:\n            histo[i] = 1\n    \n    return histo\n    \n    \nif __name__ == \"__main__\":\n    # Test cases\n    print(histogram('a b c')) == {'a': 1, 'b': 1, 'c': 1}\n    print(histogram('a b b a')) == {'a': 2, 'b': 2}\n    print(histogram('a b c a b')) == {'a': 2, 'b': 2}\n    print(histogram('b b b b a')) == {'b': 4}\n    print(histogram('')) == {}",
        "num_ids": 197
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    counter = {}\n    for letter in test.lower():\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    return counter\n",
        "num_ids": 48
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    hist = {}\n    for c in test:\n        hist[c] = hist.get(c, 0) + 1\n    return hist\n",
        "num_ids": 36
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    d = {}\n    for l in test:\n        if l in d:\n            d[l] += 1\n        else:\n            d[l] = 1\n    return d\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n",
        "num_ids": 45
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    histogram = {}\n    for i in test.lower():\n        if i in histogram:\n            histogram[i] += 1\n        else:\n            histogram[i] = 1\n",
        "num_ids": 46
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    hist = {}\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n",
        "num_ids": 44
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    hist = {}\n    test = test.lower()\n    test = test.strip()\n    for i in test:\n        if i in hist:\n            hist[i] += 1\n        else:\n            hist[i] = 1\n    return hist\n",
        "num_ids": 60
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if test == '':\n        return {}\n    s = set(test)\n    return {x: test.count(x) for x in s}\n",
        "num_ids": 37
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    #res = []\n    #for i in range(len(c)):\n    #    if c[i] in s:\n    #        res.append(s.replace(c[i],'',1))\n    #return (''.join(res),True) if all(elem ==res[0] for elem in res) else (''.join(res),False)\n    \n    res,flag = \"\",False\n    for i in range(len(c)):\n        if c[i] in s:\n            s = s.replace(c[i],'',1)\n            flag = True\n    return(res,flag)\n    \nif __name__ == '__main__':\n    s = \"abcde\"\n    c = \"ae\"\n    print(reverse_delete(s,c))\n    \n    s = \"abcdef\"\n    c = \"b\"\n    print(reverse_delete(s,c))\n    \n    s = \"abcdedcba\"\n    c = \"ab\"\n    print(reverse_delete(s,c))",
        "num_ids": 252
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    def is_palindrome(s):\n        \n        for i in range(len(s)):\n            if s[i] == c[i]:\n                continue\n            else:\n                return False\n            \n        return True\n        \n    for i in range(len(s)-1,-1,-1):\n        if s[i] == c[i]:\n            continue\n        else:\n            return (s[:i]+s[i+1:],False)\n    return (s,True)\n    \ndef is_pallindrome(s):\n    \"\"\"Task\n    Given a string, check if it is a palindrome.\n    A palindrome is a string that reads the same backwards as forwards.\n    Note: no need to worry about non-alphabetical characters.\n    \"\"\"\n    \n    def is_palindrome(s):\n        return s == s[::-1]\n        \n    return is_palindrome(s)\n",
        "num_ids": 226
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    new_s = list(s)\n    new_c = list(c)\n    for i in range(len(c)):\n        new_s.remove(s[i])\n    return ''.join(new_s),True if new_s == new_s[::-1] else False\n",
        "num_ids": 72
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    res=''\n    f=0\n    b=0\n    c=list(c)\n    for i in range(len(s)):\n        if s[i] in c:\n            f=1\n            break\n    if f==1:\n        b=len(c)-1\n        for i in range(len(c)):\n            res+=s[b]\n            b-=1\n        return res,False\n    else:\n        for i in range(len(s)):\n            res+=s[i]\n        return res,True\n",
        "num_ids": 132
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if s == c:\n        return (\"\",True)\n    res = s\n    i = 0\n    while i < len(s):\n        if s[i] == c[i] and s[i+1] == c[i+1]:\n            res = res[0:i]+res[i+2:]\n        i += 1\n    return (res,res == s)\n",
        "num_ids": 91
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    print(res)\n    return res,True if res == reverse_string(s) else False\n",
        "num_ids": 49
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = list(s)\n    c = list(c)\n    i = 0\n    while(i<len(s)):\n        if(s[i]==c[0]):\n            del s[i]\n            del c[0]\n        else:\n            i+=1\n    if(s==c):\n        res = \"\".join(s)\n        return (res,True)\n    else:\n        res = \"\".join(s)\n        return (res,False)\n",
        "num_ids": 118
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    n = 0\n    for i in range(0,len(s)):\n        if s[i] in c:\n            n = n+1\n    if n == 0:\n        return s[0:len(s)],True\n    else:\n        return s[0:len(s)-n],False\n",
        "num_ids": 75
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = ''\n    count_c = 0\n    i = 0\n    while i < len(s):\n        if s[i] in c:\n            count_c += 1\n        result += s[i]\n        i += 1\n    if count_c % 2!= 0:\n        return (result,False)\n    else:\n        return (result,True)\n",
        "num_ids": 89
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    str_lst = []\n    for i in range(len(lst)):\n        str_lst.append(lst[i].replace(\"0\", \"\").replace(\"1\", \"\").replace(\"0\", \"\"))\n    for j in range(len(lst)):\n        if len(lst[j]) % 2 == 1:\n            str_lst[j] += \"1\"\n    return [str_lst[i] + \" the number of odd elements \" + str(len(lst[i]) % 2) + \"n the str\" + str(i) + \"ng \" + str(len(lst[i]) % 2) + \"of the \" + str(i) + \"nput.\" for i in range(len(lst))]\n",
        "num_ids": 181
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # +++your code here+++\n    return\n",
        "num_ids": 12
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    count = 0\n    output = []\n    for string in lst:\n        for i in string:\n            if i%2 == 1:\n                count += 1\n        output.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + str(count) + \" of the \" + str(count) + \"nput.\")\n        count = 0\n    return output\n",
        "num_ids": 103
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return [count_odd(lst[i]) for i in range(len(lst))]\n",
        "num_ids": 25
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst = list(lst)\n    lst2 = []\n    for i in range(len(lst)):\n        lst2.append(\"the number of odd elements \" + str(i) + \" of the string \" + str(i) + \" of the \" + str(i) + \"put.\")\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if int(lst[i][j]) % 2!= 0:\n                lst2[i] = lst2[i].replace(\"n\", str(j))\n    return lst2\n",
        "num_ids": 150
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [\"the number of odd elements {}n the str{} of the {}nput.\".format(str(lst.index(x)+1),\n                                                                            x,\n                                                                            str(len(x))) for x in lst if \n                                                                            len(x) % 2!= 0]\n",
        "num_ids": 73
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    out = []\n    for i in lst:\n        if '0' not in i:\n            out.append('the number of odd elements'+ str(len(i)) + 'n the str' + str(len(i)) +'of the'+ str(len(i)) + 'nput.')\n        else:\n            out.append('the number of odd elements'+ str(len(i)) + 'n the str' + str(len(i)) +'of the'+ str(len(i)) + 'nput.')\n    return out\n",
        "num_ids": 132
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [str(i) + \" the number of odd elements \" + str(i) + \" the str\" + str(i) + \" of the \" + str(i) + \"put.\" for i in lst]\n",
        "num_ids": 52
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return odd_count_helper(lst,0)\n",
        "num_ids": 16
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return [\"the number of odd elements {0} of the {1}\".format(len(lst)//2,i)\n            for i in lst]\n",
        "num_ids": 39
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not nums:\n        return -1\n    # sum of the array\n    s = 0\n    # sum of the array with the left side filled\n    s1 = 0\n    for i in range(0, len(nums)):\n        s += nums[i]\n        s1 = max(s1, s)\n        # return s1 if it is not empty\n    # s1 = max(s1, s)\n    # return s1 if it is not empty\n    return s1\n",
        "num_ids": 119
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Base case\n    if len(nums) == 0:\n        return 0\n    # Initialize the minSum and initial elements\n    minSum = nums[0]\n    currentSum = nums[0]\n    # Iterate over the input array\n    for num in nums:\n        # Check for the current sum and keep track of the minSum\n        currentSum = currentSum + num\n        minSum = min(minSum, currentSum)\n        # Calculate the current sum using minSum\n        currentSum = currentSum - nums[nums.index(num)]\n    return minSum\n",
        "num_ids": 140
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(nums) == 0:\n        return 0\n    \n    total_sum = 0\n    running_sum = 0\n    minimum_subarray_sum = float('inf')\n    \n    for i in range(len(nums)):\n        total_sum += nums[i]\n        running_sum += nums[i]\n        if running_sum >= total_sum:\n            minimum_subarray_sum = min(minimum_subarray_sum, total_sum - running_sum)\n    return minimum_subarray_sum\n",
        "num_ids": 128
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = sum(nums)\n    if s == 0:\n        return s\n    if len(nums) == 1:\n        return nums[0]\n    i, j, m, n, ans = 0, 0, 0, len(nums), float('inf')\n    while j < n:\n        m += nums[j]\n        while m > ans:\n            ans = m\n            i = j\n            j += 1\n        while m < ans:\n            m -= nums[i]\n            i += 1\n    return ans\n",
        "num_ids": 130
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i - 1] >= 0:\n            min_sum = min(min_sum, nums[i - 1] + nums[i])\n    return min_sum\n",
        "num_ids": 71
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Binary Search\n    minSum = sys.maxsize\n    for i in range(len(nums)):\n        # Only include nums if they add up to minSum\n        curSum = 0\n        for j in range(i, len(nums)):\n            curSum += nums[j]\n            if curSum < minSum:\n                minSum = curSum\n    return minSum\n",
        "num_ids": 94
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    min_sum, prev_sum, j = float('inf'), 0, 0\n    for i in range(len(nums)):\n        prev_sum += nums[i]\n        while prev_sum > min_sum and j < len(nums):\n            min_sum = min(min_sum, prev_sum - nums[j])\n            prev_sum -= nums[j]\n            j += 1\n    return min_sum if min_sum < float('inf') else 0\n",
        "num_ids": 116
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    min_sub_sum = nums[0]\n    sum = nums[0]\n    for i in range(1, len(nums)):\n        sum = sum + nums[i]\n        if sum >= min_sub_sum:\n            min_sub_sum = min(min_sub_sum, sum)\n    if min_sub_sum == 0:\n        return min_sub_sum\n    else:\n        return min_sub_sum + 1\n",
        "num_ids": 111
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not nums:\n        return 0\n    # initalize minSum to infinte\n    minSum = float('inf')\n    currSum = 0\n    # starting index of minSubArraySum\n    startIdx = 0\n    # loop over array\n    for i, num in enumerate(nums):\n        # add num to currSum\n        currSum += num\n        # check if currSum is less than minSum\n        if currSum < minSum:\n            minSum = currSum\n            # update minSum with startIdx\n            startIdx = i\n    return minSum\n",
        "num_ids": 145
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum_min = nums[0]\n    sum_temp = 0\n    for x in nums:\n        sum_temp += x\n        if sum_min > sum_temp:\n            sum_min = sum_temp\n        if sum_temp < 0:\n            sum_temp = 0\n    return sum_min\n",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    row = len(grid)\n    col = len(grid[0])\n    # initialize a list to store the water volume\n    water_volume = [[0] * col for _ in range(row)]\n",
        "num_ids": 48
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    def _get_num_filled(grid):\n        num_filled = 0\n        for i in range(len(grid)):\n            num_filled += sum(grid[i])\n        return num_filled\n    \n    def _is_valid(grid, i, j, n):\n        if i < 0 or i >= n or j < 0 or j >= n:\n            return False\n        return True\n",
        "num_ids": 97
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def sub(grid, i, j, capacity):\n        if i == len(grid) or j == len(grid[0]): return 0\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    def max_fill_util(grid, capacity, idx):\n        if idx == 0: return 0\n        if grid[idx][0] == 0:\n            return 0\n        res = 0\n        for i in range(idx):\n            res = max(res, max_fill_util(grid, capacity, i))\n        return max(res, grid[idx][0] - capacity)\n",
        "num_ids": 96
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # DFS\n    # Time: O(mn)\n    # Space: O(mn)\n    def dfs(i, j, curr_cap, sum):\n        if i == len(grid) or j == len(grid[0]):\n            return False\n        \n        if curr_cap == 0:\n            return True\n",
        "num_ids": 80
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    import math\n    # 1. find all 1's in the grid. 2. check if all 1's can be reduced to 0's.\n    # 3. if there are 0's to reduce, then need to move water from left to right.\n    # 4. for all 1's, find the next lowest 0 in the grid. move water from that to \n    # the current 1 in the grid.\n    # 5. move all remaining 1s to the left in the grid.\n    # 6. repeat until no more 0's in the grid.\n    # Time O(m*n) | Space O(1)\n    def count_fill(grid, capacity):\n        n = len(grid)\n        m = len(grid[0])\n        \n        # 1. find all 1's in the grid.\n        count = 0\n        ones = set()\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    ones.add((i,j))\n",
        "num_ids": 233
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def min_fill(grid, capacity):\n        \"\"\"\n        You are given a rectangular grid of wells. Each row represents a single well,\n        and each 1 in a row represents a single unit of water.\n        Each well has a corresponding bucket that can be used to extract water from it, \n        and all buckets have the same capacity.\n        Your task is to use the buckets to fill the wells.\n        Output the number of times you need to raise the buckets.\n",
        "num_ids": 105
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = 0\n    while len(grid) > 0:\n        for row in range(len(grid)):\n            row_capacity = math.inf\n            for col in range(len(grid[row])):\n                if grid[row][col] == 0:\n                    continue\n                row_capacity = min(row_capacity, grid[row][col])\n                grid[row][col] = 0\n            result += row_capacity\n        for col in range(len(grid[row])):\n            col_capacity = math.inf\n            for row in range(len(grid)):\n                if grid[row][col] == 0:\n                    continue\n                col_capacity = min(col_capacity, grid[row][col])\n                grid[row][col] = 0\n            result += col_capacity\n        for i in range(len(grid)):\n            if grid[i][0]!= 0:\n                break\n        else:\n            for j in range(len(grid[i])):\n                if grid[0][j]!= 0:\n                    break\n            else:\n                break\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n        for i in range(len(grid)-1, -1, -1):\n            for j in range(len(grid[i])-1, -1, -1):\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n                    break\n",
        "num_ids": 369
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not grid: return 0\n    total = 0\n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            if grid[row][col]:\n                if col == 0:\n                    total += math.ceil(grid[row][col] / capacity)\n                else:\n                    total += 1\n    return total\n",
        "num_ids": 87
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    row_length = len(grid)\n    col_length = len(grid[0])\n    max_columns = math.ceil(capacity/col_length)\n    result = 0\n    for i in range(row_length):\n        result += int(max_columns - grid[i].count(1))\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(arr, key=lambda x: count_ones(x))\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    binary = []\n    for i in arr:\n        binary.append(bin(i))\n    binary = sorted(binary, key=lambda i: i.count('1'), reverse=True)\n    return ''.join([str(i) for i in binary])\n",
        "num_ids": 62
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x)[2:]).count('1'))\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return sorted(arr, key=lambda x: x*(x>0))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sorted_array = sorted(arr, key=lambda x: (x,bin(x).count(\"1\")), reverse=True)\n    return sorted_array",
        "num_ids": 38
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sorted(arr, key=lambda x: x*2)\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(arr, key=lambda x: x*(x+1))",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count_to_int = lambda num: bin(num).count(\"1\")\n    return sorted(arr, key=count_to_int)\n",
        "num_ids": 35
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n",
        "num_ids": 24
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(arr, key=lambda x: (x, bin(x).count('1')))\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return []\n",
        "num_ids": 5
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    if len(s) == 0:\n        return result\n    for i in range(len(s)):\n        if len(s[i:]) > 1 and s[i] =='' and not s[i:].startswith(' ') and \\\n        s[i+1].isalpha():\n            for j in range(i, len(s)):\n                if j == len(s)-1 or not s[j].isalpha():\n                    if len(s[i:j+1]) == n:\n                        result.append(s[i:j+1])\n                    break\n    return result\n",
        "num_ids": 147
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if s == '':\n        return []\n    if len(s) == 1:\n        return [s]\n    else:\n        a = select_words(s[1:], n)\n        if a == []:\n            return select_words(s[1:], n)\n        else:\n            b = []\n            for i in range(len(a)):\n                if ''.join(sorted(a[i])) == ''.join(sorted(s[0])):\n                    b.append(a[i])\n            return b\n",
        "num_ids": 131
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Your code here\n    words = []\n    s = s.split()\n    for i in range(len(s)):\n        if s[i][0] not in 'aeiou':\n            words.append(s[i])\n    return words\n    \n",
        "num_ids": 64
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    words = []\n    for i in range(len(s)):\n        word = \"\"\n        for j in range(i, len(s)):\n            word += s[j]\n            if len(word) > n:\n                break\n            if all(c not in string.ascii_lowercase for c in word):\n                words.append(word)\n                break\n    return words\n",
        "num_ids": 94
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if s == \"\":\n        return []\n    words = []\n    for word in s.split():\n        for char in word:\n            if char not in \"aeiou\":\n                words.append(word)\n                break\n    return words[:n]\n",
        "num_ids": 63
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    word_list = []\n    if len(s) == 0:\n        return word_list\n    else:\n        s = s.split()\n        for word in s:\n            letters = list(word)\n            count = 0\n            while count < len(letters):\n                if letters[count] in \"aeiou\":\n                    count += 1\n                    continue\n                else:\n                    break\n                if count == len(letters):\n                    word_list.append(word)\n    return word_list\n",
        "num_ids": 118
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    return []\n    \nif __name__ == \"__main__\":\n    # import doctest\n    # print(doctest.testmod())\n    print(select_words(\"Mary had a little lamb\", 4))\n    print(select_words(\"Mary had a little lamb\", 3))\n    print(select_words(\"simple white space\", 2))\n    print(select_words(\"Hello world\", 4))\n    print(select_words(\"Uncle sam\", 3)",
        "num_ids": 110
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(s) == 0:\n        return []\n    s = s.split()\n    return [w for w in s if len(w) >= n and len(w) <= len(s) - n]\n    \n",
        "num_ids": 54
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # h = []\n    # for i in range(0, len(s)-n):\n    #     if s[i:i+n].isalpha():\n    #         h.append(s[i:i+n])\n    # return h\n    w = []\n    for i in range(len(s)):\n        c = 0\n        for j in range(len(s)):\n            if s[i]!= s[j] and s[i].isalpha():\n                c += 1\n        if c == n:\n            w.append(s[i])\n    return w",
        "num_ids": 140
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # A very simple and simple approach is to iterate through every letter in the word \n    # to find the vowels. We can do it in a faster way if we use a hash table.\n    # Keep a variable for index and a variable for the letter to find.\n    # We'll only consider a vowel if its value is greater than zero.\n    \n    # create a hash table to hold the letter frequency.\n    hash_table = dict()\n    \n    # use a string index for index and a letter to find.\n    for i, letter in enumerate(word):\n        if letter.lower() in \"aeiou\":\n            # if a vowel, add 1 to the letter frequency.\n            hash_table[letter.lower()] = hash_table.get(letter.lower(), 0) + 1\n    # Find the key which has the maximum frequency.\n    key = max(hash_table, key=lambda key: hash_table[key])\n    \n    # Check if a vowel is found\n    if hash_table[key] > 0:\n        # We found a vowel. Return the vowel.\n        return key\n    # if no vowel is found, return empty string.\n    return \"\"\n",
        "num_ids": 275
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(len(word)-1, -1, -1):\n        if word[i] in \"aeiou\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 44
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return \"",
        "num_ids": 4
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    # First, we need to check whether the given word contains no vowels.\n    if len(word) == 0:\n        return \"\"\n    \n    # if there are no vowels in the word, return empty string.\n    if word[0] not in \"aeiouAEIOU\":\n        return \"\"\n",
        "num_ids": 75
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    vowels = {'a', 'e', 'i', 'o', 'u'}\n    vowel_count = 0\n",
        "num_ids": 33
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    for i in range(1, len(word)):\n        if word[i] in \"aeiouAEIOU\":\n            return word[i]\n    return \"\"\n",
        "num_ids": 42
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n",
        "num_ids": 22
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    vowels = \"aeiou\"\n    \n    for i in range(1, len(word)):\n        if word[i] not in vowels:\n            return word[i]\n",
        "num_ids": 47
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    vowels = ('a', 'e', 'i', 'o', 'u')\n    word = word.lower()\n    for i in range(len(word) - 1):\n        if word[i] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n",
        "num_ids": 80
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2):\n        if word[i] in vowels and word[i+2] in vowels:\n            return word[i+2]\n    return \"\"\n",
        "num_ids": 62
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    p1 = 0\n    p2 = 0\n    m1 = 0\n    m2 = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            p1 = p1 + 1\n            m1 = m1 + 1\n        if lst[i] == ')':\n            p2 = p2 + 1\n            m2 = m2 + 1\n        if p1 == p2 and m1 == m2:\n            return 'Yes'\n    return 'No'\n",
        "num_ids": 124
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = 0\n    for i in range(0, len(lst)):\n        if lst[i] == '(':\n            count += 1\n        elif lst[i] == ')':\n            count -= 1\n        if count < 0:\n            return \"No\"\n    return \"Yes\"\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = 0\n    j = 0\n    stack = []\n    l = len(lst)\n    # Put close parentheses into stack\n    while i < l:\n        if lst[i] == '(':\n            stack.append(lst[i])\n        elif lst[i] == ')':\n            # If stack is empty, it means the stack has no open parentheses\n            if stack == []:\n                return 'No'\n            else:\n                # If the top of stack is not '(' then it is not possible\n                if stack.pop()!= '(':\n                    return 'No'\n        i += 1\n",
        "num_ids": 147
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    s = '()'\n    if len(lst) == 2:\n        if lst[0][0] == lst[1][0]:\n            return True\n        else:\n            return False\n    else:\n        a = 0\n        b = 0\n        if lst[0] == '()':\n            a += 1\n        else:\n            a += -1\n        if lst[-1] == '()':\n            b += 1\n        else:\n            b += -1\n        if a > 0 and b > 0:\n            return 'No'\n        elif a == 0 and b == 0:\n            return 'No'\n        else:\n            return 'Yes'",
        "num_ids": 162
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    brackets = {'(': ')', ')': '('}\n    # check if the list is already balanced\n    if balanced_brackets(lst):\n        return 'Yes'\n    else:\n        # look for brackets in the list in order\n        for i, char in enumerate(lst):\n            if char in brackets.keys():\n                # if char is a right parenthesis\n                if brackets[char] in lst[:i]:\n                    # get the left bracket from the list\n                    lst[i] = brackets[char]\n                    # try to get a better result by applying recursively\n                    result = match_parens(lst)\n                    # if result is 'Yes'\n                    if result == 'Yes':\n                        return 'Yes'\n                    # if result is 'No'\n                    else:\n                        lst[i] = char\n                        return 'No'\n                # if char is a left parenthesis\n                elif brackets[char] in lst[i+1:]:\n                    lst[i] = brackets[char]\n                    result = match_parens(lst)\n                    # if result is 'Yes'\n                    if result == 'Yes':\n                        return 'Yes'\n                    # if result is 'No'\n                    else:\n                        lst[i] = char\n                        return 'No'\n    return 'No'\n",
        "num_ids": 314
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    parens_lst = []\n    for i in lst:\n        if i == '(':\n            parens_lst.append(i)\n        elif i == ')':\n            if len(parens_lst) == 0 or parens_lst[-1]!= '(':\n                return 'No'\n            else:\n                parens_lst.pop()\n    if len(parens_lst) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 130
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Your code here\n",
        "num_ids": 7
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst[0] == ')' or lst[1] == '(':\n        return 'No'\n    if lst[0] == '(':\n        return 'Yes'\n    else:\n        if (len(lst[0])!= len(lst[1])):\n            return 'No'\n        else:\n            return match_parens(lst[2:])\n",
        "num_ids": 93
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # initialize list of open and closed brackets\n    brackets = ['('] * (len(lst) + 1)\n    brackets[0] =''\n    brackets[-1] =''\n",
        "num_ids": 48
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if lst[0] == ')' and lst[-1] == '(':\n        return 'Yes'\n    else:\n        return 'No'\n",
        "num_ids": 38
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Insertion Sort:\n    #     https://leetcode.com/problems/maximum-subarray/solution/\n    #     -\n    #     -\n    # Solution:\n    #     -\n",
        "num_ids": 51
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if k == 0:\n        return []\n    else:\n        # Find the largest and set it as the first element\n        largest = max(arr)\n        i = arr.index(largest)\n        arr[i] = -999999999\n        # Set up two pointers\n        # i and j\n        i = 0\n        j = k\n        res = []\n        # In each iteration, get the max of the two values\n        while j < len(arr):\n            if arr[i] < arr[j]:\n                res.append(arr[i])\n                i += 1\n            else:\n                res.append(arr[j])\n                j += 1\n        return res\n",
        "num_ids": 159
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr.sort()\n    return arr[-k:]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    import bisect\n",
        "num_ids": 6
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(arr) < k:\n        return None\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    if len(arr) == 0:\n        return arr\n    max_list = []\n    for i in range(k):\n        max_index = i\n        for j in range(i + 1, k):\n            if arr[max_index] < arr[j]:\n                max_index = j\n        max_list.append(arr[max_index])\n    return max_list",
        "num_ids": 93
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # edge cases\n    if len(arr) == 0 or k == 0:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    arr.sort()\n    return arr[:k]\n",
        "num_ids": 15
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Keep a tuple of k element from arr.\n    # Sort the tuple in ascending order.\n    # Return the top k elements in a new array.\n    # Time complexity: O(nlogk)\n    # Space complexity: O(k)\n    def maximum_top_k_array(arr, k):\n        if k == 0: return []\n        return sorted(arr, reverse=True)[:k]\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # edge case\n    if k == 0:\n        return []\n    # create a result list to store the result\n    result = []\n    # loop to get the result of sub problem\n    for i in range(k):\n        max_i = -1\n        for j in range(len(arr)):\n            if max_i < arr[j]:\n                max_i = arr[j]\n        result.append(max_i)\n        # remove the max value in arr\n        del arr[arr.index(max_i)]\n    return result\n",
        "num_ids": 130
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    x = 0\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            x += lst[i]\n    return x",
        "num_ids": 40
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return sum([num for num in lst if num % 2!= 0 and num > 0])\n",
        "num_ids": 24
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            odd_sum += lst[i]\n    return odd_sum",
        "num_ids": 46
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    evens = 0\n    odds = 0\n    for x in lst:\n        if x % 2 == 0:\n            evens += x\n        else:\n            odds += x\n",
        "num_ids": 46
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sum(lst[i] for i in range(1, len(lst), 2))\n",
        "num_ids": 25
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return sum([x for i,x in enumerate(lst) if i%2==1 and x%2==0])\n",
        "num_ids": 31
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sum([el for i, el in enumerate(lst) if i%2==1])\n",
        "num_ids": 25
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([lst[i] for i in range(1, len(lst), 2)])\n",
        "num_ids": 26
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sum([x for x in lst if x%2!= 0 and x%2!=0])",
        "num_ids": 26
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    arr = sorted(arr)\n    k = min(k, len(arr))\n    for i in range(k):\n        print(i, arr[i])\n    print(\"\\n\")\n    \n    return sum(arr[0:k])\n",
        "num_ids": 66
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Your code here\n    if k > len(arr):\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    arr = arr[:k]\n    return sum([int(str(n)[0]) + int(str(n)[1]) for n in arr])\n",
        "num_ids": 37
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in range(k, len(arr)):\n        count += arr[i]\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if k > len(arr):\n        raise Exception(\"K is larger than the array\")\n",
        "num_ids": 22
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # sort the arr\n    arr.sort()\n    # a set to store the partial sum\n    sum = set()\n    # the number of elements with at most 2 digits from the first k elements\n    count = 0\n    i = 0\n    while i < k:\n        sum.add(arr[i])\n        i += 1\n    # print(sum)\n    for num in arr[k:]:\n        if num in sum:\n            count += 1\n    return count * (10 ** k) + sum.pop()\n",
        "num_ids": 122
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    arr = arr[:k]\n    return sum([int(str(x)[:2]) for x in arr])\n",
        "num_ids": 29
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # create two variables, first element and second element\n    # initialize first element, second element as 0\n    first = 0\n    second = 0\n",
        "num_ids": 34
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 0\n    for num in arr[:k]:\n        result += num\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # TODO: add your code here\n    n = len(arr)\n    arr.sort()\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    print(sum)\n",
        "num_ids": 53
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    odd_nums = []\n    odd_nums.append(1)\n    while n!= 1:\n        if n % 2 == 0:\n            n = int(n / 2)\n        else:\n            n = 3 * n + 1\n        odd_nums.append(n)\n    odd_nums.sort()\n    return odd_nums\n    \n    \ndef test_get_odd_collatz():\n    assert get_odd_collatz(5) == [1, 5]\n    assert get_odd_collatz(7) == [1, 7]\n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(16) == [1, 5, 16]\n    assert get_odd_collatz(18) == [1, 6, 18]\n    assert get_odd_collatz(35) == [1, 5, 16, 35]\n    assert get_odd_collatz(90) == [1, 7, 21, 34, 42, 46, 55, 66, 78, 89]\n    assert get_odd_collatz(100) == [1, 7, 21, 34, 45, 55, 65, 78, 89, 100]\n",
        "num_ids": 284
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = []\n    for i in range(1, n):\n        if i % 2 == 1:\n            result.append(i)\n    result.sort()\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Check the base case.\n    if n <= 1:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n    return sorted(odd_numbers)\n",
        "num_ids": 66
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    # your code here\n    odds = []\n",
        "num_ids": 15
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    odd_numbers = []\n    while n!= 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = 3*n + 1\n        odd_numbers.append(n)\n    return sorted(odd_numbers)\n",
        "num_ids": 67
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    odd_sequence = []\n    while n!= 1:\n        if n % 2 == 1:\n            odd_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n    odd_sequence.append(1)\n    odd_sequence.sort()\n    return odd_sequence\n    # === END OF YOUR CODE ===\n",
        "num_ids": 84
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    odd_collatz_seq = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        odd_collatz_seq.append(n)\n    odd_collatz_seq.append(1)\n    odd_collatz_seq.sort()\n    return odd_collatz_seq\n",
        "num_ids": 93
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    res = []\n    curr = 1\n    while curr <= n:\n        if curr % 2 == 1:\n            res.append(curr)\n        curr = curr * 3 + 1\n",
        "num_ids": 50
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    out_list = []\n    while n > 1:\n        if n % 2 == 1:\n            out_list.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    out_list.append(1)\n    return sorted(out_list)\n",
        "num_ids": 73
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    day, month, year = date.split(\"-\")\n",
        "num_ids": 106
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    month = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\n    month = {1:'J', 2:'F', 3:'M', 4:'A', 5:'M', 6:'J', 7:'J', 8:'A', 9:'S', 10:'O', 11:'N', 12:'D'}\n    date = date.split('-')\n    try:\n        return len(date) == 3 and int(date[0]) in range(1,13) and int(date[1]) in range(1,32) and int(date[2]) in range(1901,2001)\n    except:\n        return False\n",
        "num_ids": 183
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not date:\n        return False\n",
        "num_ids": 11
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    month = {\n        \"01\": 31,\n        \"03\": 31,\n        \"05\": 30,\n        \"07\": 31,\n        \"08\": 31,\n        \"10\": 31,\n        \"12\": 30,\n        \"04\": 30,\n        \"06\": 30,\n        \"09\": 31,\n        \"11\": 30\n    }\n    # check if the month is in the dict\n    month_check = month.get(date.split(\"-\")[0])\n    if not month_check:\n        return False\n    #check if the month is in the dict\n    if date.split(\"-\")[1].isdigit() and len(date.split(\"-\")) == 3:\n        day = int(date.split(\"-\")[1])\n        month_name = date.split(\"-\")[0]\n        year = int(date.split(\"-\")[2])\n        if not (day > 0 and day <= month_check) or not (month_name in month.keys() and day <= month_check):\n            return False\n    else:\n        return False\n    if year > 0 and year < 3000:\n        return True\n    else:\n        return False\n",
        "num_ids": 279
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return True if date.strip() and (int(date.split('-')[0]) in range(1,13)) and (int(date.split('-')[1]) in range(1,32)) and (int(date.split('-')[2]) in range(2000,2031)) else False\n    \nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # True\n    print(valid_date('15-01-2012')) # False\n    print(valid_date('04-0-2040')) # False\n    print(valid_date('06-04-2020')) # True\n    print(valid_date('06/04/2020')) # False\n    print(valid_date('06-04/2020')) # False\n",
        "num_ids": 189
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #print(date)\n    date_in_format = date.split('-')\n    month, day, year = date_in_format[0], date_in_format[1], date_in_format[2]\n    #print(month, day, year)\n    try:\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(year) < 1 or int(year) > 10 ** 10:\n            return False\n        #print(month, day, year)\n        if int(month) == 2:\n            if int(day) > 29:\n                return False\n        if int(month) in (1,3,5,7,8,10,12):\n            if int(day) > 31:\n                return False\n        if int(month) in (4,6,9,11):\n            if int(day) > 30:\n                return False\n        if int(month) == 2:\n            if int(day) > 29:\n                return False\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 275
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    date_format = '%m-%d-%Y'\n    date = date.split('-')\n    month_valid = False\n    day_valid = False\n    year_valid = False\n    if len(date) == 3:\n        month, day, year = date\n        month = int(month)\n        if month in range(1, 13):\n            month_valid = True\n        else:\n            return False\n        day = int(day)\n        if day in range(1, 32):\n            day_valid = True\n        else:\n            return False\n        year = int(year)\n        if year in range(1000, 3000):\n            year_valid = True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 177
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    month_dict = {\"1\":\"january\", \"2\":\"february\", \"3\":\"march\",\"4\":\"april\",\"5\":\"may\",\"6\":\"june\",\"7\":\"july\",\"8\":\"august\",\n    \"9\":\"september\",\"10\":\"october\",\"11\":\"november\",\"12\":\"december\"}\n    date_list = date.split(\"-\")\n    day = date_list[0]\n    month = month_dict[date_list[1]]\n    year = date_list[2]\n    if month in [\"january\",\"february\",\"march\",\"april\",\"may\",\"june\",\"july\",\"august\",\n    \"september\",\"october\",\"november\",\"december\"]:\n        if int(day) <= 31 and int(day) >= 1:\n            return True\n        else:\n            return False\n    elif month in [\"april\",\"june\",\"july\",\"august\",\n    \"september\",\"october\",\"november\",\"december\"]:\n        if int(day) <= 30 and int(day) >= 1:\n            return True\n        else:\n            return False\n    elif month in [\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\"]:\n        if int(day) <= 31 and int(day) >= 1:\n            return True\n        else:\n            return False\n    elif month in [\"12\"]:\n        if int(day) <= 29 and int(day) >= 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 363
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not date or not isinstance(date,str):\n        return False\n    m,d,y = date.split('-')\n    if m.isnumeric() and d.isnumeric() and y.isnumeric():\n        month = int(m)\n        if month < 1 or month > 12:\n            return False\n        day = int(d)\n        if month in (1,3,5,7,8,10,12):\n            if day <= 31:\n                return True\n            else:\n                return False\n        elif month in (4,6,9,11):\n            if day <= 30:\n                return True\n            else:\n                return False\n        elif month == 2:\n            if day <= 28:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 203
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    try:\n        month = int(date.split('-')[0])\n        day = int(date.split('-')[1])\n        year = int(date.split('-')[2])\n        if month > 12 or month < 1:\n            return False\n        if month in (1, 3, 5, 7, 8, 10, 12):\n            if day > 31:\n                return False\n            if day < 1:\n                return False\n        if month in (4, 6, 9, 11):\n            if day > 30:\n                return False\n            if day < 1:\n                return False\n        if month == 2:\n            if day > 29:\n                return False\n            if day < 1:\n                return False\n        return True\n    except:\n        return False\n",
        "num_ids": 184
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return txt.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    words = txt.split()\n    count = 0\n    list = []\n    for i in words:\n        num_of_words = len(i)\n        if (num_of_words % 2) == 1:\n            list.append(i)\n            count += 1\n    return list\n",
        "num_ids": 71
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return txt.split()\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return txt.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    # split_words(\"abcdef\") == 3\n    \n    result = txt.split()\n    return result\n    \ndef password_valid(password):\n    '''\n    Given a password, return True if the length is 6 or more characters and contain at least one upper-case letter, one lower-case letter, one digit, one space, otherwise return False\n    '''\n    # password_valid(\"asdf\") \u279e False\n    # password_valid(\"asdfasdf\") \u279e True\n    # password_valid(\"a\") \u279e True\n    \n    return len(password) >= 6 and 'a' in password and 'b' in password and 'c' in password and 'd' in password and 'e' in password and 'f' in password and 'g' in password and 'h' in password and 'i' in password and 'j' in password and 'k' in password and 'l' in password and'm' in password and 'n' in password and 'o' in password and 'p' in password and 'q' in password and 'r' in password and's' in password and 't' in password and 'u' in password and 'v' in password and 'w' in password and 'x' in password and 'y' in password and 'z' in password\n    \ndef is_anagram(word1, word2):\n    '''\n    Given two strings, check if they are anagrams of each other. An anagram is when a word is formed by rearranging the letters of another.\n    Example: 'rat' is an anagram of 'car' and 'art'.\n    '''\n    # is_anagram(\"rat\", \"car\") \u279e True\n    # is_anagram(\"rata\", \"arata\") \u279e False\n    \n    return sorted(word1) == sorted(word2)\n",
        "num_ids": 466
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    words = txt.split(\" \")\n    new_words = []\n    for word in words:\n        if word == \"\":\n            continue\n        else:\n            new_words.append(word)\n    return new_words\n",
        "num_ids": 56
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    count = 0\n    txt = txt.split(' ')\n    for i in range(len(txt)):\n        if len(txt[i]) >= 1:\n            count += (len(txt[i])+1)\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    return txt.split()\n",
        "num_ids": 11
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt.split()\n    \n",
        "num_ids": 11
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Make a copy of the list and store it in a variable\n    # so that we can modify the original list.\n    lst_copy = lst[:]\n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    count = {}\n    for number in lst:\n        count[number] = count.get(number, 0) + 1\n    return len(count) == len(lst) and count[lst[0]] == 1\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Checks if first number in the list is smaller than the second\n    # number. Then checks if the next numbers are smaller than the\n    # next numbers after the first number.\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # if len(lst) < 2:\n    #     return True\n    # for i in range(len(lst)-1):\n    #     if lst[i] >= lst[i+1]:\n    #         return False\n    # return True\n",
        "num_ids": 63
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # if length of list == 0\n    if len(lst) == 0:\n        return True\n    # if length of list is 1\n    if len(lst) == 1:\n        if lst[0] == lst[0]:\n            return True\n    # for each number in list, check if it's the same as the previous number\n    for i in range(len(lst) - 1):\n        if lst[i]!= lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 122
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # range(len(lst)) == len(lst)\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_nums = []\n    nums = []\n    for n in lst:\n        if n in nums:\n            return False\n        nums.append(n)\n        if n not in sorted_nums:\n            sorted_nums.append(n)\n        else:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #If the list has 1 item, it is sorted\n    if len(lst) == 1:\n        return True\n    #Check if the list has any duplicate values\n    if lst.count(lst[0]) > 1:\n        return False\n    #Check if the list's 2nd to last value is greater than the 2nd value\n    return lst[1] >= lst[0]\n",
        "num_ids": 94
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if len(lst) == 0:\n        return True\n",
        "num_ids": 16
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if interval1[0] < interval1[1] and interval2[0] < interval2[1]:\n        # print(\"YES\")\n        return \"YES\"\n    elif interval1[0] > interval1[1] and interval2[0] > interval2[1]:\n        # print(\"NO\")\n        return \"NO\"\n    else:\n        # print(\"NO\")\n        return \"NO\"\n",
        "num_ids": 97
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    intersection_len = 0\n    if interval1[0] > interval2[0]:\n        intersection_len = interval2[0] - interval1[0]\n    else:\n        intersection_len = interval1[0] - interval2[0]\n    if intersection_len % 2!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n",
        "num_ids": 91
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if interval1[0] >= interval2[0] and interval1[0] <= interval2[1]:\n        return \"YES\"\n    elif interval1[1] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nif __name__ == '__main__':\n    intersection((1, 2), (2, 3)) #==> \"NO\"\n    intersection((-1, 1), (0, 4)) #==> \"NO\"\n    intersection((-3, -1), (-5, 5)) #==> \"YES\"\n    ",
        "num_ids": 153
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    i = min(interval1[0], interval2[0])\n    j = max(interval1[1], interval2[1])\n    if i < j:\n        return \"YES\" if isPrime(j - i + 1) else \"NO\"\n    return \"NO\"\n",
        "num_ids": 68
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # Question: use the functions, so no loops\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if start < end and end < start: return \"NO\"\n    if start <= start and start >= end: return \"YES\"\n    if end >= start and end <= end: return \"YES\"\n    if start <= start and start < end and end <= end: return \"YES\"\n    if start < start and end < end and start < end: return \"YES\"\n",
        "num_ids": 84
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # Your code here\n    interval1 = sorted(interval1)\n    interval2 = sorted(interval2)\n    if interval1[0] > interval2[1]:\n        return \"NO\"\n    elif interval1[1] < interval2[0]:\n        return \"NO\"\n    elif interval1[0] == interval2[0]:\n        return \"NO\"\n    else:\n        return \"YES\"\n",
        "num_ids": 103
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    intersection = interval1[0] <= interval2[1] and interval2[0] <= interval1[1]\n    if intersection and intersection_length(interval1, interval2)!= 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 64
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = 0\n    neg = 1\n    pos = 1\n    zeros = 0\n    for i in arr:\n        if i == 0:\n            zeros += 1\n        if i < 0:\n            neg *= i\n        if i > 0:\n            pos *= i\n    if zeros > 0:\n        return None\n    result = neg*pos\n    return result\n",
        "num_ids": 91
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not arr: return None\n    mags = 0\n    for el in arr:\n        if el > 0:\n            mags += el\n    if mags == 0: return None\n    product = 1\n    for el in arr:\n        if el < 0:\n            product *= el\n    return mags * product\n",
        "num_ids": 77
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # NOTE: the way this is done can be a lot more elegant\n    # in your opinion...\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if len(arr) == 0:\n        return None\n    sign = 0\n    product = 1\n    for num in arr:\n        if num >= 0:\n            sign += num\n        else:\n            sign = -sign\n        product *= abs(num)\n    return sign * product\n",
        "num_ids": 69
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not arr:\n        return None\n    return sum(np.abs(x) * np.sign(x) for x in arr)\n",
        "num_ids": 34
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not arr: return None\n",
        "num_ids": 9
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # arr = list(map(int, arr))\n    if not arr:\n        return None\n    signs = 0\n    neg_signs = 0\n    pos_signs = 0\n    for num in arr:\n        if num < 0:\n            neg_signs += 1\n        if num > 0:\n            pos_signs += 1\n    signs = neg_signs * pos_signs\n    return signs",
        "num_ids": 100
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not arr:\n        return\n    sum_ = 0\n    prod_ = 1\n    for i in arr:\n        if i < 0:\n            sum_ += i\n        elif i > 0:\n            sum_ += i\n            prod_ *= i\n    return sum_ + prod_\n",
        "num_ids": 73
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # to get the magnitude of a number, we need to divide it with\n    # the previous number.\n    # so, for example, if we have arr = [1, 2, 2, -4], then\n    # we multiply the first number and the second number and\n    # get their magnitude and take their abs value.\n    # it's then the magnitude of the product of the previous 2 numbers\n    # and then we multiply that number with the product of the previous\n    # 2 numbers.\n    # at the end, we'll get the resultant magnitude of the product\n    # of the previous 2 numbers.\n    res = 0\n    signs = []\n    for a in arr:\n        res += abs(a) * signs[-1]\n        signs.append(a < 0)\n",
        "num_ids": 179
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(arr) == 0:\n        return None\n    arr = list(map(lambda x: abs(x), arr))\n    return sum([i * s for i, s in enumerate(arr)])\n",
        "num_ids": 51
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Create a directed graph\n    graph = defaultdict(list)\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            graph[(i, j)].append(grid[i][j])\n",
        "num_ids": 60
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    import collections\n    # Time: O(nk)\n    # Space: O(nk)\n    # uses collections.deque\n    if k >= len(grid) or k >= len(grid[0]):\n        return []\n    elif grid[0][0]!= 1:\n        return []\n    else:\n        # column-wise or row-wise\n        if len(grid[0]) == 1:\n            return list(range(1, k + 1))\n        else:\n            visited = set()\n            queue = collections.deque()\n            visited.add((0, 0))\n            queue.append((0, 0))\n            ans = []\n            while queue:\n                x, y = queue.popleft()\n                for i in range(x + 1, len(grid[y])):\n                    if (i, y) not in visited:\n                        visited.add((i, y))\n                        if y == len(grid) - 1:\n                            ans.append(grid[y][i])\n                        else:\n                            queue.append((i, y + 1))\n                    elif grid[y][i] == grid[y][x]:\n                        ans.append(grid[y][x])\n                        queue.append((i, y + 1))\n            return ans\n",
        "num_ids": 302
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def neighbors(node):\n        i, j = node\n        return ((i+1, j), (i-1, j), (i, j+1), (i, j-1))\n    \n    def dfs(node, visited, dist, k):\n        # we are done\n        if dist == k:\n            return node\n        # no more possible paths\n        if dist > k:\n            return None\n        \n        # check if we have already been here\n        if visited[node]!= None:\n            return visited[node]\n        \n        # we can start the DFS\n        # we can visit each node\n        visited[node] = True\n        for i, j in neighbors(node):\n            # try to get the next path\n            next_path = dfs(i, visited, dist+1, k)\n            # if we got it\n            if next_path!= None:\n                return next_path\n        # we failed to find it\n        return None\n",
        "num_ids": 229
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # ----------------------------------------------------------------------\n    # DFS\n    # ----------------------------------------------------------------------\n",
        "num_ids": 16
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    def get_neighbors(cur_cell):\n        \"\"\"\n        Get the neighbors of a cell in the grid\n        \"\"\"\n        neighbors = []\n        \n        # top left\n        neighbors.append(cur_cell[0] - 1)\n        neighbors.append(cur_cell[1] - 1)\n",
        "num_ids": 79
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    m, n = len(grid), len(grid[0])\n    visited = {(0, 0)}\n    queue = deque([(0, 0)])\n    while queue:\n        i, j = queue.popleft()\n",
        "num_ids": 58
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # get the size of the grid\n    rows, cols = len(grid), len(grid[0])\n",
        "num_ids": 27
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    def minPathHelper(grid, i, j, k, results):\n        \"\"\"\n        Time: O(N^2)\n        Space: O(N)\n        \"\"\"\n        if i < 0 or j < 0:\n            return None\n        if i >= len(grid) or j >= len(grid[0]):\n            return None\n",
        "num_ids": 80
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def dfs(grid, k, pos, visited, path):\n        # base case, we have reached the destination\n        if pos == len(grid) - 1:\n            # we get the path to the destination\n            path.append(pos)\n            path.append(k)\n            return path\n",
        "num_ids": 70
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Dynamic programming\n    n = len(grid)\n    if n == 0 or k == 0: return []\n    dp = [[float('inf')] * n for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(1, k+1):\n        for j in range(n):\n            for k in range(n):\n                if k == 0 or j == 0 or j == n - 1 or k == n - 1:\n                    dp[i][j] = grid[j][k]\n                    continue\n                for l in range(i):\n                    dp[i][j] = min(dp[i][j], dp[l][j-1] + dp[l][j])\n    return grid[n-1][k-1:]\n",
        "num_ids": 186
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    nums = []\n    nums.append(1)\n    nums.append(1)\n    nums.append(1)\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            nums.append(nums[i-2] + nums[i-1])\n        else:\n            nums.append(nums[i-1] + nums[i-2] + nums[i-3])\n    return nums\n",
        "num_ids": 117
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    fibonacci = []\n    fibonacci.append(1)\n    fibonacci.append(1)\n    for i in range(3, n + 1):\n        fibonacci.append(1 + (fibonacci[i - 1] / 2))\n    return fibonacci\n",
        "num_ids": 102
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    #Initialize list\n    trib = []\n    trib.append(1)\n    trib.append(1)\n    trib.append(1)\n    \n    #Loop through and add the numbers\n    for i in range(2,n+1):\n        trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n    \n    #Return the list\n    return trib\n",
        "num_ids": 106
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    first_numbers = []\n    number = 0\n    number_1 = 0\n    number_2 = 1\n    for i in range(1, n + 2):\n        if i == 1:\n            first_numbers.append(1)\n        elif i == 2:\n            first_numbers.append(1)\n            first_numbers.append(2)\n        elif i == 3:\n            first_numbers.append(1)\n            first_numbers.append(2)\n            first_numbers.append(3)\n        else:\n            first_numbers.append(number_1 + number_2)\n            number_2 = number_1\n            number_1 = number\n    return first_numbers\n",
        "num_ids": 174
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n    a, b = 1, 3\n    for _ in range(n):\n        result.append(a)\n        a, b = b, a + b\n    return result\n    ",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 2, 1]\n    elif n == 4:\n        return [1, 3, 3, 1]\n    else:\n        f = [1, 1]\n        for i in range(n):\n            f.append(f[i] + f[i+1] + f[i+2])\n        return f\n",
        "num_ids": 130
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    else:\n        return [1, 3] + tri(n - 1) + tri(n - 2) + tri(n + 1)\n",
        "num_ids": 63
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return [tri(n - 1), tri(n - 2), tri(n - 3)]\n",
        "num_ids": 38
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [0]\n",
        "num_ids": 7
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    res = [1, 1, 1]\n    for i in range(3, n + 1):\n        res.append(sum(res[i - 2: i]))\n    return res\n",
        "num_ids": 85
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # +++your code here+++\n    total=1\n    while(n>0):\n        if(n%10==1):\n            total=total*n%10\n        n=n//10\n    return total\n    \n",
        "num_ids": 54
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    assert n >= 1\n    mult = 1\n    while n:\n        if n % 10 % 2:\n            mult *= n % 10\n        n //= 10\n    return mult\n",
        "num_ids": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    result = 1\n    while n > 0:\n        if n % 10 % 2!= 0:\n            result *= n % 10\n        n //= 10\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    odd = 0\n    for i in range(len(n)):\n        if int(n[i]) % 2!= 0:\n            odd += int(n[i])\n    return odd\n",
        "num_ids": 47
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n < 10:\n        return n\n    else:\n        return (n % 10) * (digits(n // 10))\n",
        "num_ids": 33
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return (n % 10) * (n // 10 % 10) * (n // 100 % 10) * (n // 1000 % 10) * (n // 10000)\n",
        "num_ids": 39
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    assert isinstance(n, int)\n    assert n >= 0\n    d = str(n)\n    \n    if len(d) < 2:\n        return 0\n    \n    odds = 0\n    for i in range(len(d)):\n        if d[i] == '1':\n            odds += 1\n    \n    return odds * n\n",
        "num_ids": 86
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    product = 1\n    \n    while n > 0:\n        if n % 10 % 2 == 1:\n            product = product * n % 10\n            n = n // 10\n        else:\n            n = n // 10\n            \n    return product\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return int(str(n)[1::2])\n",
        "num_ids": 14
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    product = 1\n    while n!= 0:\n        if n % 10 % 2 == 1:\n            product *= n % 10\n        n //= 10\n    return product\n    \nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\n",
        "num_ids": 69
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(string) == 0:\n        return False\n    stack = []\n    i = 0\n    while i < len(string):\n        if string[i] == '[':\n            stack.append(i)\n        i += 1\n    i = 0\n    while i < len(string):\n        if string[i] == ']':\n            if stack == []:\n                return False\n            else:\n                index = stack.pop()\n                if i - index < len(string[index + 1:]):\n                    return False\n        i += 1\n    return True",
        "num_ids": 133
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    str_1 = string\n    if str_1.count('[]') == 0:\n        return False\n    else:\n        for i in range(len(str_1)):\n            if str_1[i] == '[':\n                if str_1[i+1] == ']':\n                    str_1 = str_1[i+1:]\n                else:\n                    return False\n                return True\n            else:\n                return False\n",
        "num_ids": 107
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if string == None: return False\n    if string == '': return True\n    if string[0] == ']': return False\n    if string[0] == ']': return False\n",
        "num_ids": 45
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in string:\n        if i == '[':\n            count += 1\n        if i == ']':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n",
        "num_ids": 55
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # create a nested counter that keeps track of the number of brackets (counting from 0)\n    # return False if the number of nested brackets is not equal to the number of brackets that\n    # are not nested (counting from 0)\n    nested = 0\n    for s in string:\n        if s == '[':\n            nested += 1\n        elif s == ']':\n            nested -= 1\n        if nested == 0:\n            return True\n    return False\n",
        "num_ids": 110
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(string)==0:\n        return True\n    \n    for i in range(len(string)):\n        if string[i]==']':\n            if string[i-1]=='[':\n                string=string[0:i-1]+'['+string[i+1:]\n            elif string[i+1]=='[':\n                string=string[0:i]+'['+string[i+2:]\n            else:\n                return False\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # def rec(s, l, r):\n    #     if s[l:r] == '[]':\n    #         return True\n    #     elif r == len(s):\n    #         return False\n    #     elif s[l] == '[':\n    #         return rec(s, l+1, r)\n    #     elif s[r] == ']':\n    #         return rec(s, l, r+1)\n    #     else:\n    #         return False\n    # return rec(string, 0, 0)\n    # def rec(s):\n    #     if s == '':\n    #         return True\n    #     elif s[0] == ']':\n    #         return False\n    #     elif s[0] == '[':\n    #         return rec(s[1:])\n    #     elif s[1] == '[':\n    #         return rec(s[2:])\n    #     else:\n    #         return rec(s[1:])\n",
        "num_ids": 244
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    string = list(string)\n    i = 0\n    temp = 1\n    while i < len(string)-1:\n        if string[i] == ']':\n            temp = 0\n        if string[i] == '[':\n            temp = 1\n        if string[i] == ']':\n            if temp == 1:\n                temp = 0\n            else:\n                temp = 1\n        if string[i] == ']' and temp == 1:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 121
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return bool(re.search(r'\\[[^]]*\\]', string))\n",
        "num_ids": 22
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if (string == '') or (string == '[]'):\n        return False\n    if (string == '[[]]'):\n        return True\n    if (string == '[]'):\n        return False\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            count += 1\n        else:\n            count -= 1\n        if (count == 0) and (string[i] == ']'):\n            return True\n    return False",
        "num_ids": 116
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    a = sum(x*x for x in lst)\n    return round(a)",
        "num_ids": 22
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #lst = [1,2,3,4,5]\n    sum_n = 0\n    for x in lst:\n        sum_n += x ** 2\n    return round(sum_n)\n",
        "num_ids": 51
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return sum(i * i for i in lst)\n",
        "num_ids": 15
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    #list comprehension for square of each number\n    square_list = []\n    for x in lst:\n        square_list.append(x*x)\n    sum = 0\n    for x in square_list:\n        sum += x\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    s=0\n    for i in range(len(lst)):\n        s=s+pow(lst[i],2)\n    return s\n",
        "num_ids": 39
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return round(sum(map(lambda x: x * x, lst)))\n",
        "num_ids": 20
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return(sum(i**2 for i in lst))\n",
        "num_ids": 16
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return round(sum(i**2 for i in lst), 2)\n",
        "num_ids": 19
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sum([i ** 2 for i in lst])\n    \n",
        "num_ids": 17
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    print (lst)\n    for i in range(0,len(lst)):\n        lst[i] = math.ceil(lst[i])\n    \n    summ = 0\n    for i in range(0,len(lst)):\n        summ = summ + lst[i]**2\n",
        "num_ids": 78
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return bool(txt[-1].isalpha() and not is_a_word(txt))\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return is_a_letter(txt[-1]) and not is_a_word(txt[-1])\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    \n    return txt[-1].isalpha() and txt.count(' ') == 0\n    \n    \ndef check_if_first_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the first character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n",
        "num_ids": 105
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # split by space\n    if len(txt) == 0:\n        return False\n    txt = txt.split()\n    txt = \" \".join(txt)\n    if txt[-1].isalpha():\n        return True\n    else:\n        return False\n    \ndef check_if_last_char_is_not_a_word_end(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is not a word end (period, comma, or space), \n    and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n",
        "num_ids": 146
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    txt = txt.split()\n    #Check if txt is empty\n    if not txt:\n        return False\n    else:\n        return is_char_alphanumeric(txt[-1])\n",
        "num_ids": 50
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return txt[-1].isalpha() and not txt[-1].isalpha()\n",
        "num_ids": 24
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return not txt.isalpha() and not txt.isnumeric() and not len(txt) == 0\n",
        "num_ids": 28
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return not is_word(txt) and txt[-1].isalpha()\n",
        "num_ids": 21
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    #pass #delete this line and complete the function\n    return txt[-1].isalpha() and not txt[-1].isalpha() in word\n",
        "num_ids": 38
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return txt[-1].isalpha() and not is_word(txt)\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Create a dictionary of values, values[i] = largest index of element\n    # not greater than or equal to element at index i.\n    values = {0: 0}\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[values[i-1]]:\n            values[i] = values[i-1]\n        else:\n            values[i] = i\n",
        "num_ids": 102
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # your code here\n    can_arrange = lambda arr: arr[0] - 1 if arr[0] > arr[1] else -1\n    return can_arrange(arr)\n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # 1) Initialize an empty queue\n    queue = collections.deque()\n",
        "num_ids": 20
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = -1\n",
        "num_ids": 7
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            return i\n    return -1\n",
        "num_ids": 36
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    n = len(arr)\n    \n    # Initialise the index\n    max_index = -1\n    \n    # Initialise a variable which will check whether the element which\n    # is not greater than or equal to the element preceding it is a\n    # candidate for the maximum\n    is_greater_than = False\n    \n    # Check for each element\n    for i in range(n):\n        if is_greater_than == False:\n            # Check whether the element is greater than or equal to the\n            # element preceding it\n            if arr[i] >= arr[i - 1]:\n                # If the element is greater than or equal to the element\n                # preceding it, the index of the element which is not greater\n                # than or equal to the element preceding it is the maximum\n                # index\n                max_index = i\n                is_greater_than = True\n            else:\n                is_greater_than = False\n    \n    return max_index\n",
        "num_ids": 225
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # TODO: Fill in this function.\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    i = 0\n    for i in range(len(arr)):\n        if arr[i] >= arr[i - 1]:\n            return i\n    return -1\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    for i in range(len(arr)):\n        if arr[i] >= arr[i-1]:\n            continue\n        return i\n    return -1\n",
        "num_ids": 39
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    arr.sort()\n",
        "num_ids": 7
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return None, None\n    positive_numbers = []\n    negative_numbers = []\n    for number in lst:\n        if number > 0:\n            positive_numbers.append(number)\n        if number < 0:\n            negative_numbers.append(number)\n    # if there is no negative or positive numbers, return None\n    if len(negative_numbers) == 0 or len(positive_numbers) == 0:\n        return None, None\n    # else return the largest negative integer, and smallest positive integer\n    return (min(negative_numbers), max(positive_numbers))\n",
        "num_ids": 153
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return (min(filter(lambda x: x < 0, lst)), max(filter(lambda x: x > 0, lst)))\n",
        "num_ids": 33
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # Remove the None entries\n    lst = [i for i in lst if i is not None]\n",
        "num_ids": 26
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    min_num = None\n    max_num = None\n    \n    for i in lst:\n        if i < 0:\n            if min_num == None:\n                min_num = i\n            elif i < min_num:\n                min_num = i\n        elif i > 0:\n            if max_num == None:\n                max_num = i\n            elif i > max_num:\n                max_num = i\n    return (max_num, min_num)\n",
        "num_ids": 118
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    lst.sort()\n    if lst == [] or any([i < 0 for i in lst]):\n        return None, None\n    return (lst[-1], lst[0])\n",
        "num_ids": 49
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    max_neg, max_pos = None, None\n    for i in lst:\n        if i > max_neg:\n            max_neg = i\n        elif i < max_pos:\n            max_pos = i\n    return (max_neg, max_pos)\n",
        "num_ids": 67
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(lst) == 0:\n        return (None, None)\n    neg, pos = None, None\n    for item in lst:\n        if item < 0:\n            if neg == None or neg > item:\n                neg = item\n        elif item > 0:\n            if pos == None or pos < item:\n                pos = item\n    return (neg, pos)\n",
        "num_ids": 92
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    a = None\n    b = None\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if a == None:\n                a = lst[i]\n            elif a < lst[i]:\n                a = lst[i]\n        elif lst[i] > 0:\n            if b == None:\n                b = lst[i]\n            elif b > lst[i]:\n                b = lst[i]\n    return (a, b)\n",
        "num_ids": 127
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (None, None) if not lst else (\n        max(x for x in lst if x < 0),\n        min(x for x in lst if x > 0)\n    )\n",
        "num_ids": 48
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    a, b = None, None\n    # Your Code Here\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            if a == None:\n                a = lst[i]\n            else:\n                if a > lst[i]:\n                    a = lst[i]\n        elif lst[i] > 0:\n            if b == None:\n                b = lst[i]\n            else:\n                if b < lst[i]:\n                    b = lst[i]\n    return (a, b)\n",
        "num_ids": 138
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return compare_two(a, b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return compare_two(a, b)\n    else:\n        return a if a > b else b\n",
        "num_ids": 184
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if type(a) == type(b):\n        if type(a) == int:\n            return a if a > b else b\n        else:\n            return a if a >= b else b\n    else:\n        return a if a > b else b\n",
        "num_ids": 61
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    try:\n        if a > b:\n            return a\n        elif a == b:\n            return None\n        else:\n            return b\n    except TypeError:\n        return \"TypeError: {} and {} are not comparable\".format(type(a), type(b))\n",
        "num_ids": 66
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if a == b:\n        return None\n    elif a < b:\n        return b\n    else:\n        return a\n",
        "num_ids": 32
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if type(a)!= str and type(b)!= str:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a)!= float and type(b)!= float:\n        if a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == float:\n        if a > b:\n            return a\n        else:\n            return b\n",
        "num_ids": 148
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    a = float(a)\n    b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 48
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 20
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if type(a)!= type(b):\n        return max(a,b)\n    if type(a) == int and type(b) == float or type(a) == float and type(b) == int:\n        return max(a,b)\n    if type(a) == str:\n        if type(b) == str:\n            if a == b:\n                return None\n            else:\n                return b\n        else:\n            return a\n    else:\n        if type(a) == str and type(b) == float or type(b) == str and type(a) == int:\n            if a == b:\n                return None\n            else:\n                return a\n        else:\n            return max(a,b)\n",
        "num_ids": 176
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n    \n",
        "num_ids": 34
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a == b:\n        return None\n    if type(a) == type(b):\n        if a > b:\n            return a\n        if a < b:\n            return b\n    if type(a) == float:\n        if a > b:\n            return a\n        if a < b:\n            return b\n    if type(a) == int:\n        if a > b:\n            return a\n        if a < b:\n            return b\n    if type(a) == str:\n        if a > b:\n            return a\n        if a < b:\n            return b\n",
        "num_ids": 142
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (n % 2 == 0) and (n % 4 == 0) and (n % 6 == 0) and (n % 8 == 0)\n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return n == sum(2 * i for i in range(4) if n - i >= 0)\n",
        "num_ids": 25
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return n % 2 == 0 and n // 2 % 2 == 0 and n // 4 % 2 == 0 and n // 8 % 2 == 0\n",
        "num_ids": 33
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    for i in range(1,n):\n        if n%i == 0 and i%2 == 0:\n            if n == i + (i/2) + (i/4) + (i/8):\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if n == 0:\n        return False\n    if n % 2!= 0:\n        return False\n    if n == 2:\n        return True\n    while n!= 0:\n        if n % 2!= 0:\n            return False\n        n = n // 2\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    # initialize a dictionary to keep track of the number of even numbers\n    even_numbers = {}\n",
        "num_ids": 26
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (n % 2 == 0) and (n % 3 == 0) and (n % 5 == 0) and (n % 7 == 0)\n",
        "num_ids": 35
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n % 2 == 0:\n        return False\n    return is_equal_to_sum_odd(n)\n",
        "num_ids": 29
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n < 0:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return n % 2 == 0 and n > 4 and n % 4 == 0\n",
        "num_ids": 19
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return 1\n",
        "num_ids": 5
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    n_ = 1\n    for i in range(1,n+1):\n        n_ *= i\n    return n_\n",
        "num_ids": 32
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    factorial = 1\n    if n == 0:\n        factorial = 1\n    else:\n        for i in range(n):\n            factorial *= (i + 1)\n    return factorial\n",
        "num_ids": 49
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    \n    res = 1\n    for i in range(1, n):\n        res *= i\n    return res\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n > 0:\n        return n * special_factorial(n - 1)\n    else:\n        return 1\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    total = 1\n    for i in range(1, n):\n        total *= i\n    return total\n",
        "num_ids": 27
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "num_ids": 11
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # Step 1\n    # Do a split on the new line character\n    tokens = text.split(\"\\n\")\n    # Step 2\n    # Walk through the tokens looking for spaces\n    for i in range(len(tokens)):\n        # Do a split on spaces\n        tokens[i] = tokens[i].split(\" \")\n        # Walk through the tokens again looking for spaces\n        for j in range(len(tokens[i])):\n            # Do a split on spaces\n            tokens[i][j] = tokens[i][j].split(\" \")\n    # Step 3\n    # Walk through the tokens again looking for spaces\n    for i in range(len(tokens)):\n        # Walk through the tokens again looking for spaces\n        for j in range(len(tokens[i])):\n            # Do a split on spaces\n            tokens[i][j] = tokens[i][j].split(\" \")\n    # Step 4\n    # Join the spaces back\n    new_tokens = []\n    for i in range(len(tokens)):\n        # Walk through the tokens again looking for spaces\n        for j in range(len(tokens[i])):\n            # Do a join on spaces\n            new_tokens.append(\"\".join(tokens[i][j]))\n    # Step 5\n    # Join the new tokens back into a string\n    new_text = \"\\n\".join(new_tokens)\n    return new_text\n",
        "num_ids": 357
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"_\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return text.replace(' ','_')\\\n        .replace('  ','_')\\\n        .replace('   ','_')\n",
        "num_ids": 32
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return text.replace(\" \", \"_\").replace(\"  \", \"-\")\n",
        "num_ids": 17
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return re.sub(r\"\\s+\", \"_\", text.strip())\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    out = text.strip()\n    if text.count(' ') == 0:\n        return out\n    else:\n        i = 0\n        while i < len(out):\n            if out[i] =='':\n                out = out[:i] + '_' + out[i+1:]\n            i += 1\n        if out.count(' ') > 2:\n            out = out.replace(' ', '-')\n    return out\n",
        "num_ids": 106
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return text.replace(\" \", \"_\")\n",
        "num_ids": 11
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return re.sub(\"\\s+\", \"_\", text)",
        "num_ids": 15
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    if not text:\n        return text\n    \n    # split text into words\n    words = text.split()\n    \n    # we start by making sure there is at least one word\n    if not words:\n        return text\n    \n    # we want to fix spaces in the last word\n    last = words[-1]\n    \n    # for each word, we go through them again and count consecutive spaces\n    for i, word in enumerate(words):\n        if i == len(words) - 1:\n            # if we're on the last word, we can't do any more fixes, so we return\n            return text\n        \n        n_spaces = 0\n        for char in word:\n            if char!='':\n                break\n            n_spaces += 1\n        # if there are more than 2 spaces, then we need to change everything to _\n        if n_spaces > 2:\n            words[i] = '_' * n_spaces\n        \n        # we also need to move the last word to the first\n        if n_spaces == 2 and last!='':\n            words[0] = '_' * n_spaces\n            last = words[-1]\n    \n    # if we don't have any spaces in the last word, \n    # we need to add a _ before it\n    if last!='':\n        words[0] = '_' * n_spaces\n        \n    return ''.join(words)\n        ",
        "num_ids": 346
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(file_name) < 3:\n        return 'No'\n    for i in range(len(file_name)):\n        if file_name[i].isdigit():\n            return 'No'\n        if i == 0 and not file_name[0].isalpha():\n            return 'No'\n        if file_name[i] == '.':\n            return 'No'\n        if not file_name[i].isalpha() and not file_name[i].isdigit():\n            return 'No'\n    return 'Yes'\n",
        "num_ids": 131
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    # YOUR CODE HERE\n    if (file_name.replace(\" \",\"\")).count(\".\")!= 1 or \".\" in file_name[:3] or \".\" not in file_name[3:]:\n        return \"No\"\n    elif file_name[:3].isalpha():\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 86
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not isinstance(file_name, str):\n        return 'No'\n    else:\n        if '.' in file_name:\n            file_name = file_name.split('.')\n            for i in file_name:\n                if not i:\n                    return 'No'\n                elif i[0].isalpha():\n                    if i[0] == 'a':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'b':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'c':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'd':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'e':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'f':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'g':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'h':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'i':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'j':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'k':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'l':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] =='m':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'n':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'o':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            return 'Yes'\n                        else:\n                            return 'No'\n                    elif i[0] == 'p':\n                        if i[-1] == 'txt' or i[-1] == 'exe' or i[-1] == 'dll':\n                            retur",
        "num_ids": 1026
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    file_name = file_name.replace(\" \", \"\")\n    numbers = re.findall(r'\\d', file_name)\n    if len(numbers) > 3:\n        return 'No'\n    if re.search(r'\\.', file_name) is None:\n        return 'No'\n    if re.search(r'^[a-zA-Z]', file_name) is None:\n        return 'No'\n    if re.search(r'\\bexe\\b|\\bdll\\b|\\b\\btxt\\b', file_name) is None:\n        return 'No'\n    return 'Yes'\n",
        "num_ids": 157
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # To keep the logic simple, we will allow the first character to be any letter.\n    # Then, we will only allow alphabets with capital letters (A-Z) and small letters (a-z).\n    # Then we will accept any number of dots and any number of letters, except we will\n    # accept 'exe' and 'txt' for the file's name's substring.\n    \n    # We will check if the file name has more than three letters.\n    if len(file_name) > 3:\n        return \"No\"\n    \n    # If the file name does not have more than three letters, we will check if it starts\n    # with any letter from the latin alphabet ('a'-'z' and 'A'-'Z').\n    if file_name[0].isalpha() or file_name[0] == '.':\n        # We will check if the file name is the substring before '.'.\n        if file_name.find('.')!= -1:\n            if file_name[file_name.find('.')-1].isalpha() or file_name[file_name.find('.')-1] == '.':\n                # We will check if the file name is the substring after '.'.\n                if file_name[file_name.find('.')+1:] in ['txt', 'exe', 'dll']:\n                    return \"Yes\"\n    return \"No\"\n    \ndef file_name_check_v2(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    - The file name does not contain the substring 'example.txt'\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    # To keep the logic simple, we will allow the first character to be any letter.\n    # Then, we will only allow alphabets with capital letters (A-Z) and small letters (a-z).\n    # Then we will accept any number of letters, except we will accept 'exe' and 'txt' for the file's name's substring.\n    \n    # We will check if the file name has more than three letters.\n    if len(file_name) > 3:\n        return \"No\"\n    \n    # If the file name does not have more than three letters, we will check if it starts\n    # with any letter from the latin alphabet ('a'-'z' and 'A'-'Z').\n    if file_name[0].isalpha() or file_name[0] == '.':\n        # We will check if the file name is the substring before '.'.\n        if file_name.find('.')!= -1:\n            if file_name[file_name.find('.')-1].isalpha() or file_name[file_name.find('.')-1] == '.':\n                # We will check if the file name is the substring after '.'.\n                if file_name[file_name.find('.')+1:] not in ['txt', 'exe', 'dll']:\n                    return \"No\"\n    return \"Yes\"\n    \ndef main():\n    \"\"\"To test the file_name_check function, use the provided sample text file.\"\"\"\n    with open('sample.txt', 'r') as f:\n        sample = f.read()\n    \n    print(file_name_check(sample))\n    print(file_name_check_v2(sample))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 998
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(file_name) > 3 and file_name[0] >= '0' and file_name[0] <= '9':\n        if file_name[-1] == '.':\n            if len(file_name.split('.')[0]) > 0 and file_name.split('.')[0][0].isalpha():\n                if file_name.split('.')[1] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 151
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    file_name = file_name.lower()\n    if len(file_name) > 3:\n        if len(file_name.split('.')) == 1:\n            if file_name[0] in 'abcdefghijklmnopqrstuvwxyz':\n                if file_name[1:3] == 'exe' or file_name[1:3] == 'dll':\n                    return \"Yes\"\n    return \"No\"\n",
        "num_ids": 107
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    def check(file_name):\n        return 'Yes' if check_file_name(file_name) else 'No'\n        \n    def check_file_name(file_name):\n        return True if (len(file_name) <= 3) and (file_name[0] in string.ascii_letters) and (file_name[:1].isalpha()) and (file_name[1:].isalpha() or file_name[1:].isdigit()) and (file_name.endswith('.txt') or file_name.endswith('.dll') or file_name.endswith('.exe')) else False\n        \n    return check(file_name)\n",
        "num_ids": 167
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return 'Yes' if '.' in file_name and 'a' <= file_name[0].lower() <= 'z' and 'txt' in file_name or 'exe' in file_name or 'dll' in file_name else 'No'\n",
        "num_ids": 59
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if len(file_name) > 3:\n        if len(file_name.split('.'))!= 1:\n            if file_name.split('.')[0].isalpha():\n                if file_name.split('.')[-1] == 'txt' or file_name.split('.')[-1] == 'exe' or file_name.split('.')[-1] == 'dll':\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n",
        "num_ids": 142
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum([x**2 if x%3 == 0 else x**3 if x%4 == 0 else x for x in lst])\n    \n        \ndef find_missing_number(nums):\n    \"\"\"\n    Given a list of integers, nums, your task is to find the smallest element missing from the list.\n    The list may contain duplicate elements.\n    \n    Examples:\n    Input  : nums = [2, 1, 3]\n    Output : 2\n    \n    Input  : nums = [2, 3, 4]\n    Output : 1\n    \n    Input  : nums = [-1, -2]\n    Output : -3\n    \"\"\"\n    if len(nums) == 0:\n        return -1\n    else:\n        nums.sort()\n        for i in range(len(nums)):\n            if nums[i]!= i+1:\n                return i+1\n        return i+2\n            \n        \ndef second_smallest(lst):\n    \"\"\"\n    Given a list, lst, of at least 2 elements. \n    You can choose any element of the list and rearrange the elements so that the element that is smaller than all other elements is on one side of the new array. \n    That element is called the \"smallest\" of the array. \n    Return an array that contains the two smallest elements in lst.\n    \n    Examples:\n    Input : lst = [2, 3, 5, 1, 4]\n    Output : [1, 2]\n    \n    Input : lst = [1, 1, 1]\n    Output : [1, 1]\n    \n    Input : lst = [2, 2, 2, 2]\n    Output : [2, 2]\n    \n    Input : lst = [3, 4]\n    Output : [4, 3]\n    \n    Input : lst = [1, 1, 2, 2, 3, 3, 4, 4]\n    Output : [2, 3]\n    \"\"\"\n    if len(lst) == 1:\n        return lst\n    else:\n        lst.sort()\n        for i in range(len(lst)-1):\n            if lst[i] < lst[i+1]:\n                return lst[i+1: ]\n",
        "num_ids": 556
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    lst = [0] * len(lst)\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] * lst[i]\n        elif i % 4 == 0:\n            lst[i] = lst[i] * lst[i] * lst[i]\n    return sum(lst)\n",
        "num_ids": 99
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    total = 0\n    for i in range(len(lst)):\n        if (i + 1) % 3 == 0 and (i + 1) % 4!= 0:\n            total += lst[i] ** 2\n        elif (i + 1) % 4 == 0 and (i + 1) % 3!= 0:\n            total += lst[i] ** 3\n        else:\n            continue\n    return total\n",
        "num_ids": 101
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            lst[i] = lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            lst[i] = lst[i]**3\n    \n    return sum(lst)\n",
        "num_ids": 89
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4!= 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3!= 0:\n            sum += lst[i]**3\n        else:\n            continue\n    return sum\n",
        "num_ids": 85
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    sum = 0\n    for i in range(len(lst)):\n        if i%3 == 0 or i%4!= 0:\n            continue\n        else:\n            sum += lst[i]**2\n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4!= 0:\n            i = i ** 2\n        elif i % 3!= 0 and i % 4 == 0:\n            i = i ** 3\n        result += i\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    #SUM\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            if i % 4 == 3:\n                lst[i] = lst[i] ** 2\n            else:\n                lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum\n    \n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,2,3,4]))\nprint(sum_squares([-1, -5, 2, -1, -5]))\n",
        "num_ids": 148
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if lst == []:\n        return 0\n    else:\n        sum_ = 0\n        for i in range(len(lst)):\n            if i % 4 == 0:\n                if i % 3 == 0:\n                    sum_ += (lst[i]*lst[i])\n                else:\n                    sum_ += (lst[i]*lst[i])**0.5\n            else:\n                sum_ += lst[i]**0.5\n        return sum_\n    \n",
        "num_ids": 121
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i**2\n        elif i % 4 == 0:\n            sum += i**3\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = \"\"\n    for i in range(len(sentence)):\n        if prime(len(sentence[i])):\n            result += sentence[i]\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return \" \".join(sorted(set(sentence.split()), key=lambda x: len(x))).capitalize()\n",
        "num_ids": 32
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    s = sentence.split(' ')\n    res = ''\n    for i in s:\n        if len(res) == 0 or len(i) == len(res):\n            res = i\n        else:\n            break\n    return res",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    words = sentence.split(\" \")\n    lengths = []\n    for word in words:\n        lengths.append(len(word))\n    # Sort the list of word lengths\n    lengths = sorted(lengths)\n    # Get the length of the largest length word\n    largest_word_length = lengths[-1]\n    # Loop over the words to get a new list of words whose lengths are prime numbers\n    prime_numbers = []\n    for word_length in lengths:\n        if is_prime(word_length):\n            prime_numbers.append(word_length)\n    # Get the min/max/average word length\n    min_word_length = min(prime_numbers)\n    max_word_length = max(prime_numbers)\n    average_word_length = sum(prime_numbers) / len(prime_numbers)\n    # Generate a new sentence that has the words from the original sentence with the same lengths\n    # and add the words with the minimum/maximum/average word length\n    words_with_min_max_average = []\n    for word in words:\n        if len(word) == min_word_length:\n            words_with_min_max_average.append(word)\n        elif len(word) == max_word_length:\n            words_with_min_max_average.append(word)\n        elif len(word) == average_word_length:\n            words_with_min_max_average.append(word)\n    return \" \".join(words_with_min_max_average)\n",
        "num_ids": 368
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # TODO: Write your code here\n    return words_in_sentence_in_brackets(sentence)\n",
        "num_ids": 29
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return \" \".join(primes)\n",
        "num_ids": 53
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = sentence.split(' ')\n    # Try to filter out those words whose length is not prime\n    words = filter(lambda x: len(x) == prime_filter(len(x)), words)\n    return''.join(words)\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not sentence:\n        return \"\"\n    \n    words = sentence.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > 1 and all(x.isdigit() for x in word) and \\\n        all(x.isalpha() for x in word):\n            result.append(word)\n",
        "num_ids": 82
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #return True if x * n == int(x * n) else False\n",
        "num_ids": 19
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    xn = x.split(\"/\")\n    n = n.split(\"/\")\n",
        "num_ids": 24
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return str(eval(str(x) + '/' + str(n))) == str(eval(str(x) + '/' + str(n)))\n    \nprint(simplify(\"1/5\", \"5/1\"))\nprint(simplify(\"1/6\", \"2/1\"))\nprint(simplify(\"7/10\", \"10/2\"))",
        "num_ids": 86
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    try:\n        x,n = eval(x),eval(n)\n    except:\n        return False\n    if x == int(x):\n        return x == 0\n    else:\n        return Fals",
        "num_ids": 50
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    if x.count('/')!= 0:\n        numerator = int(x.split('/')[0])\n        denominator = int(x.split('/')[1])\n        if numerator == 0 or denominator == 0:\n            return False\n        if numerator % denominator == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 98
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # your code here\n    if x[0] == \"0\" and n[0] == \"0\":\n        return False\n    elif x[0] == \"0\":\n        return False\n    else:\n        x = float(x)\n        n = float(n)\n        return int(x/n) == n\n",
        "num_ids": 78
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    def toNum(x):\n        if x.isdigit():\n            return int(x)\n        else:\n            return 0\n",
        "num_ids": 33
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    frac = x.split(\"/\")\n    num = int(frac[0])\n    denom = int(frac[1])\n    if denom == 1:\n        if num == 0:\n            return True\n        else:\n            return False\n    elif num == 0:\n        return False\n    elif denom == 0:\n        return False\n    elif num == 1:\n        return False\n    else:\n        return True\n    # Write your code here\n    # return True if x*n is whole number and False otherwise\n",
        "num_ids": 128
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    def simplify_helper(x, n):\n        if x.isdigit() and n.isdigit():\n            num = int(x)\n            den = int(n)\n            if num == den:\n                return True\n            else:\n                return False\n        else:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    x = x.replace(\"/\", \"\").replace(\"*\", \"\")\n    n = n.replace(\"/\", \"\").replace(\"*\", \"\")\n",
        "num_ids": 37
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(nums, key=lambda item: sum([int(digit) for digit in str(item)]))\n",
        "num_ids": 28
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    nums = list(nums)\n    for i in range(len(nums) - 1):\n        min_index = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "num_ids": 105
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    nums.sort(key=lambda num: (sum(map(int, str(num))), num))\n    return nums\n",
        "num_ids": 32
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    nums.sort()\n    nums.reverse()\n    return nums",
        "num_ids": 19
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    sorted_list = sorted(nums, key=lambda n: (sum(int(i) for i in str(n)), n))\n    return sorted_list\n",
        "num_ids": 40
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if not nums:\n        return []\n",
        "num_ids": 12
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(nums, key=lambda item: (sum([int(digit) for digit in str(item)]), item))\n",
        "num_ids": 31
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(nums, key=lambda i: sum(int(x) for x in str(i)))\n",
        "num_ids": 27
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    count = 0\n    for i in nums:\n        if (i > 10) and (i % 2 == 1) and (int(i / 10) % 2!= 0):\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_count = 0\n    for num in nums:\n        if num > 10 and (num % 2 == 1 or num % 10 == 1):\n            odd_count += 1\n",
        "num_ids": 43
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    count = 0\n    for num in nums:\n        if isSpecial(num) and num < 10:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    count = 0\n    for i in nums:\n        if len(str(i)) > 2 and i > 10 and i % 2 == 1 and int(str(i)[0]) % 2 == 1 and int(str(i)[1]) % 2 == 1:\n            count += 1\n",
        "num_ids": 67
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return 1\n",
        "num_ids": 5
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    filtered = [num for num in nums if num > 10 and num % 2!= 0]\n    return len(filtered)\n",
        "num_ids": 33
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return len([i for i in nums if (i > 10 and i % 2 == 1)])\n",
        "num_ids": 25
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    counter = 0\n    for num in nums:\n        if (num > 10 and num % 10 == 1 and num % 100!= 0 and num % 1000!= 0):\n            counter += 1\n    return counter\n",
        "num_ids": 51
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    total = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1 and (num % 10) % 2 == 1:\n            total += 1\n    return total\n",
        "num_ids": 48
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    odds = 0\n    for n in nums:\n        if n % 2 == 1 and n >= 10 and nums[0] % 2 == 1 and nums[-1] % 2 == 1:\n            odds += 1\n    return odds\n",
        "num_ids": 59
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Your code here\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            k = n - i - j\n            if (i + j + k) % 3 == 0:\n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    for i in range(n):\n        for j in range(i + 1, n):\n            k = n - (i + j)\n            if i + j + k == n and (i + j) * (i + k) % 3 == 0:\n                return 1\n    return 0\n",
        "num_ids": 69
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n <= 3:\n        return n\n    res = 0\n    for i in range(1, n // 3):\n        for j in range(i + 1, n // 3):\n            k = n - i - j\n            if k < i or k < j or k < n - 3:\n                continue\n            if i * (i + 1) // 2 + j * (j + 1) // 2 + k * (k + 1) // 2 % 3 == 0:\n                res += 1\n    return res\n",
        "num_ids": 120
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # Method - 1\n    # Time: O(n)\n    # Space:O(1)\n    # a = []\n    # for i in range(1,n+1):\n    #     if i * i - i + 1 >= 0:\n    #         a.append(i * i - i + 1)\n    # res = 0\n    # for i in range(len(a)):\n    #     for j in range(i + 1, len(a)):\n    #         for k in range(j + 1, len(a)):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 res += 1\n    # return res\n",
        "num_ids": 168
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # ans = 0\n    # for i in range(1, n):\n    #     for j in range(i+1, n):\n    #         for k in range(j+1, n):\n    #             if (i + j + k) % 3 == 0:\n    #                 ans += 1\n    # return ans\n",
        "num_ids": 78
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # Solution 2\n",
        "num_ids": 6
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    count = 0\n    # for i in range(1, n):\n    #     for j in range(i, n):\n    #         for k in range(j, n):\n    #             if (i * i - i + 1) % 3 == 0 and (j * j - j + 1) % 3 == 0 and (k * k - k + 1) % 3 == 0:\n    #                 count += 1\n    #                 print(f\"i:{i}, j:{j}, k:{k}\")\n    #             else:\n    #                 print(f\"i:{i}, j:{j}, k:{k}\")\n    #         print()\n    #     print()\n    # return count\n",
        "num_ids": 165
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    a = list(range(n))\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    ans += 1\n    return ans\n",
        "num_ids": 74
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    planet_list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    distance = {}\n    for planet in planet_list:\n        distance[planet] = calc_distance(planet1, planet2, planet)\n    return tuple(sorted(planet_list, key=lambda k: distance[k]))\n",
        "num_ids": 96
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n",
        "num_ids": 38
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return ()\n",
        "num_ids": 7
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    #planet dictionary\n    planet_dict = {\"Mercury\": 'Sun', \"Venus\": 'Earth', \"Earth\": 'Mars', \"Mars\": 'Jupiter', \"Jupiter\": 'Saturn', \"Saturn\": 'Uranus', \"Uranus\": 'Neptune', \"Neptune\": \"Sun\"}\n    #orbit dictionary\n    orbit_dict = {}\n    #initializing orbit_dict\n    for planet in planet_dict:\n        orbit_dict[planet] = planet_dict[planet]\n",
        "num_ids": 118
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    # If planet1 or planet2 are not correct\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    # If both planets are in planets list\n    elif planet1 == planet2:\n        return (planet1)\n    # If planet1 is less than planet2\n    elif planets[planet1] < planets[planet2]:\n        return (planet1, planet2)\n    # If planet1 is greater than planet2\n    else:\n        return (planet2, planet1)\n",
        "num_ids": 121
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # find the orbiter to the planet2\n    planet2_orbiter = None\n    for planet in planets:\n        if planet.name == planet2:\n            planet2_orbiter = planet\n    \n    # find the orbiter to the planet1\n    planet1_orbiter = None\n    for planet in planets:\n        if planet.name == planet1:\n            planet1_orbiter = planet\n    \n    # find the orbiter to the planet2 from planet1\n    planet2_orbiter = None\n    for planet in planets:\n        if planet.name == planet2 and planet.orbiter == planet1_orbiter:\n            planet2_orbiter = planet\n",
        "num_ids": 157
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    result = []\n    for planet in planets:\n        if planet == planet1 or planet == planet2:\n            result.append(planet)\n    \n    for planet in planets:\n        if planet == planet1:\n            return result\n    for planet in planets:\n        if planet == planet2:\n            return result\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if planet1 == \"Mercury\" or planet2 == \"Mercury\":\n        return planet1,planet2\n    if planet1 == \"Venus\" or planet2 == \"Venus\":\n        return planet1,planet2\n    if planet1 == \"Earth\" or planet2 == \"Earth\":\n        return planet1,planet2\n    if planet1 == \"Mars\" or planet2 == \"Mars\":\n        return planet1,planet2\n    if planet1 == \"Jupiter\" or planet2 == \"Jupiter\":\n        return planet1,planet2\n    if planet1 == \"Saturn\" or planet2 == \"Saturn\":\n        return planet1,planet2\n    if planet1 == \"Uranus\" or planet2 == \"Uranus\":\n        return planet1,planet2\n    if planet1 == \"Neptune\" or planet2 == \"Neptune\":\n        return planet1,planet2\n",
        "num_ids": 209
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    x = planet1\n    y = planet2\n    \n    if x == \"Mercury\":\n        if y == \"Venus\":\n            return (\"Venus\")\n        else:\n            return (\"Earth\", \"Mars\", \"Jupiter\")\n            \n    if x == \"Venus\":\n        if y == \"Earth\":\n            return (\"Earth\", \"Mars\", \"Jupiter\")\n        else:\n            return (\"Venus\")\n        \n    if x == \"Mars\":\n        if y == \"Earth\":\n            return (\"Earth\", \"Jupiter\", \"Saturn\")\n        else:\n            return (\"Mars\")\n            \n    if x == \"Jupiter\":\n        if y == \"Saturn\":\n            return (\"Saturn\", \"Uranus\", \"Neptune\")\n        else:\n            return (\"Jupiter\")\n            \n    if x == \"Saturn\":\n        if y == \"Uranus\":\n            return (\"Uranus\", \"Neptune\")\n        else:\n            return (\"Saturn\")\n            \n    if x == \"Uranus\":\n        if y == \"Neptune\":\n            return (\"Neptune\")\n        else:\n            return (\"Uranus\")\n            \n    if x == \"Neptune\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Neptune\")\n    \n    if x == \"Mars\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Mars\")\n            \n    if x == \"Earth\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Earth\", \"Mars\")\n            \n    if x == \"Jupiter\":\n        if y == \"Saturn\":\n            return (\"Saturn\")\n        else:\n            return (\"Jupiter\")\n            \n    if x == \"Saturn\":\n        if y == \"Uranus\":\n            return (\"Uranus\")\n        else:\n            return (\"Saturn\")\n            \n    if x == \"Uranus\":\n        if y == \"Neptune\":\n            return (\"Neptune\")\n        else:\n            return (\"Uranus\")\n            \n    if x == \"Neptune\":\n        if y == \"Saturn\":\n            return (\"Saturn\")\n        else:\n            return (\"Neptune\")\n",
        "num_ids": 560
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    pass\n",
        "num_ids": 4
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    odd_length_words = list(filter(lambda x: len(x) % 2!= 0, lst))\n    if len(odd_length_words) == 0:\n        return lst\n    else:\n        odd_length_words.sort()\n        return odd_length_words\n    \nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"ab\", \"a\", \"a\", \"aaa\"]) == [\"ab\", \"aaa\"]\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"bb\", \"bbb\"]) == [\"aa\", \"bb\", \"bbb\"]\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\", \"bb\", \"bbb\"]) == [\"aa\", \"bb\", \"bbb\"]\n",
        "num_ids": 222
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    # change to a set, sort by words length\n    lst = sorted([*lst], key=len)\n    # we have to remove words that have odd lengths\n    del_odd_length = []\n    for word in lst:\n        if len(word) % 2!= 0:\n            del_odd_length.append(word)\n    for i in del_odd_length:\n        lst.remove(i)\n    return lst",
        "num_ids": 106
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    new_list = []\n    # Iterate through each word in the list of words\n    for word in lst:\n        # Check if the word is shorter than the length of the new_list\n        # if so, add it to the new_list\n        if len(word) < len(new_list):\n            new_list.append(word)\n",
        "num_ids": 83
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return sorted(lst, key=len)\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    lst = sorted(lst, key=lambda word: (len(word), word))\n    return lst\n",
        "num_ids": 52
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    s = 0\n    new_lst = []\n    for word in lst:\n        if len(word) == len(lst[0]):\n            new_lst.append(word)\n    return sorted(new_lst)\n",
        "num_ids": 59
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if lst == []:\n        return []\n",
        "num_ids": 13
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return sorted(lst, key=lambda s: len(s))\n",
        "num_ids": 18
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    return sorted(lst, key=lambda x: (len(x), x))\n",
        "num_ids": 21
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return x if n in (1, 3, 5, 7, 9, 11) else y",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if n % x == 0 and n % y == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if n%2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if n % x == 0 or n % y == 0:\n        return y\n    else:\n        return x\n",
        "num_ids": 28
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return x if n % x else y\n",
        "num_ids": 11
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if is_prime(n):\n        return x\n    else:\n        return y\n        \n        \n        \ndef is_prime(n):\n    \"\"\"A simple program which should return whether the number n \n    is prime.\n",
        "num_ids": 55
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if n % 2 == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 22
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # Write your code here\n    if n % x == 0 and n % y == 0:\n        return x\n    elif n % x!= 0 and n % y!= 0:\n        return y\n    elif n % x == 0:\n        return x\n    else:\n        return y\n",
        "num_ids": 71
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if n == 1:\n        return x\n    elif n == 0 or not is_prime(n):\n        return y\n    else:\n        return x\n",
        "num_ids": 39
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if is_prime(n):\n        if n == x:\n            return x\n        else:\n            return y\n    else:\n        if n == x:\n            return y\n        else:\n            return x\n",
        "num_ids": 52
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    total = 0\n    for n in lst:\n        if n < 0:\n            continue\n        elif type(n)!= int:\n            continue\n        else:\n            if n % 2 == 1:\n                total += n * n\n    return tota",
        "num_ids": 62
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if lst == []:\n        return 0\n    else:\n        return sum([x*x for x in lst if x % 2!= 0])\n",
        "num_ids": 38
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    odd_sum = 0\n    for number in lst:\n        if number % 2 == 1:\n            odd_sum += number**2\n    return odd_sum\n",
        "num_ids": 40
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    if lst == []:\n        return 0\n    odd_sum = 0\n    for item in lst:\n        if is_odd(item):\n            odd_sum += item ** 2\n    return odd_sum\n        \ndef max_count(lst):\n    '''\n    Given a list, return the largest element in the list.\n    \n    max_count([1, 3, 5, 2, 0, 3]) == 5\n    max_count([1, 3, 5, 2, 0]) == 5\n    max_count([]) == None\n    max_count([2, 3, 5]) == 5\n    \n    Note: If a list is empty, return None.\n    '''\n    if lst == []:\n        return None\n    largest = 0\n    for item in lst:\n        if item > largest:\n            largest = item\n    return largest\n        \ndef max_count2(lst):\n    '''\n    Given a list, return the largest element in the list.\n    \n    max_count2([1, 3, 5, 2, 0, 3]) == 5\n    max_count2([1, 3, 5, 2, 0]) == 5\n    max_count2([]) == None\n    max_count2([2, 3, 5]) == 5\n    \n    Note: If a list is empty, return None.\n    '''\n    if lst == []:\n        return None\n    largest = 0\n    for item in lst:\n        if item > largest:\n            largest = item\n    return largest\n",
        "num_ids": 361
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_of_squares = 0\n    \n    for item in lst:\n        if item > 0 and item % 2!= 0:\n            sum_of_squares += item ** 2\n    \n    return sum_of_squares\n    \n    ",
        "num_ids": 61
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = 0\n    for item in lst:\n        if type(item) == int and item >= 0:\n            result += item ** 2\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    count = 0\n    if not lst:\n        return count\n    for num in lst:\n        if num % 2 == 1:\n            count += num ** 2\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    \n    # if not lst:\n    #     return 0\n    # \n    # return sum(x**2 for x in lst if x % 2 == 1)\n    \n    if not lst:\n        return 0\n    \n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n",
        "num_ids": 81
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    total = 0\n    for num in lst:\n        if num % 2 == 1:\n            total += num**2\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    # === Start your solution ===\n    \n    if not lst:\n        return 0\n    \n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num**2\n            \n    return odd_sum\n    \n    # === End of solution ===\n",
        "num_ids": 79
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    #pass\n    res = 0\n    for i in range(len(guess)):\n        if guess[i] == game[i]:\n            res += 0\n        else:\n            res += abs(game[i] - guess[i])\n    return res\n    \n    \n    \n",
        "num_ids": 69
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return ",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    return [abs(guess-score) for guess,score in zip(guess,game)]\n",
        "num_ids": 24
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    \n    return guess == game\n",
        "num_ids": 9
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    \n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n    \n    \ndef tests():\n    \n    print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n    \n    print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n    \n    print(compare([3,1,2,4,5,3],[4,1,1,0,0,-2]))\n    \n    print(compare([0,0,1,2,3,4],[0,0,1,2,2,3]))\n    \n    print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n    \n    print(compare([4,1,1,0,0,-2],[4,1,1,0,0,-2]))\n    \ntests(",
        "num_ids": 246
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return 0\n",
        "num_ids": 5
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return\n",
        "num_ids": 4
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(game)!= len(guess):\n        return []\n    game_out = []\n    for i in range(len(game)):\n        game_out.append(abs(game[i]-guess[i]))\n    return game_out\n",
        "num_ids": 63
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    \n    scores = game[0]\n    guesses = game[1]\n    \n    guess_scores = []\n    \n    for i in range(len(scores)):\n        guess_scores.append(abs(scores[i]-guess[i]))\n        \n    return guess_scores\n",
        "num_ids": 79
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    \n    return [abs(guess[i] - score) for i in range(len(guess))]\n",
        "num_ids": 28
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return class_name + \".StrongestExtensionName\"\n",
        "num_ids": 15
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return class_name + '.StrongestExtension'\n",
        "num_ids": 14
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    class_name = str(class_name)\n    class_name = class_name.title()\n    extension_dict = {}\n    for extension in extensions:\n        extension = str(extension)\n        extension = extension.title()\n        if extension in extension_dict:\n            extension_dict[extension] += 1\n        else:\n            extension_dict[extension] = 1\n    #print(extension_dict)\n    strongest_extension = class_name\n    max_strength = 0\n    for key, value in extension_dict.items():\n        strength = 0\n        key = key.lower()\n        value = int(value)\n        for char in key:\n            if char.isupper():\n                strength += 1\n        strength = strength - value\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = class_name + '.' + key\n    strongest_extension = strongest_extension.replace('.', '_')\n    #print(strongest_extension)\n    return strongest_extension\n",
        "num_ids": 255
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    class_dict = {}\n    # if the string is not in the dict, add it to the dict\n    for ext in extensions:\n        if class_name in class_dict:\n            class_dict[class_name].append(ext)\n        else:\n            class_dict[class_name] = [ext]\n    # this sets the name to be the first element in the list\n    # then iterates through the dictionary\n    # to find the one with the strongest extension\n    max_strength = 0\n    ext_name = ''\n    for key, val in class_dict.items():\n        if len(val) > 0:\n            strength = 0\n            for ext in val:\n                strength += int(re.findall('[A-Z]', ext)[0].upper()) - int(re.findall('[a-z]', ext)[0].lower())\n            if strength > max_strength:\n                max_strength = strength\n                ext_name = key\n    return ext_name\n",
        "num_ids": 231
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    list_of_extension = extensions\n    \n    for i in range(0, len(list_of_extension)):\n        for j in range(i+1, len(list_of_extension)):\n            if list_of_extension[i] == list_of_extension[j]:\n                list_of_extension[j] = '_' + list_of_extension[j]\n    \n    for i in range(0, len(list_of_extension)):\n        if list_of_extension[i].isupper():\n            list_of_extension[i] = list_of_extension[i].lower()\n        else:\n            list_of_extension[i] = list_of_extension[i].upper()\n    \n    for i in range(0, len(list_of_extension)):\n        for j in range(i+1, len(list_of_extension)):\n            if list_of_extension[i] == list_of_extension[j]:\n                list_of_extension[j] = '_' + list_of_extension[j]\n    \n    extension_list = []\n    for i in range(0, len(list_of_extension)):\n        extension_list.append(list_of_extension[i].split('.'))\n    \n    extension_list = sorted(extension_list, key=lambda x: x[1])\n    \n    for i in range(0, len(extension_list)):\n        extension_list[i] = extension_list[i][0]\n    \n    return class_name + '.' + extension_list[0]",
        "num_ids": 405
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return class_name + \".\" + class_name.capitalize() + '.StrongestExtensionName'\n",
        "num_ids": 26
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    # class_name = \"my_class\"\n    # extensions = ['AA', 'Be', 'CC']\n    return class_name + \".\" + extensions[0]\n",
        "num_ids": 41
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return sorted(extensions, key=lambda x: (x.count('A') - x.count('a'), x.count('B') - x.count('b'), x.count('C') - x.count('c'), x.count('D') - x.count('d'), x.count('E') - x.count('e'), x.count('F') - x.count('f'), x.count('G') - x.count('g'), x.count('H') - x.count('h'), x.count('I') - x.count('i'), x.count('J') - x.count('j'), x.count('K') - x.count('k'), x.count('L') - x.count('l'), x.count('M') - x.count('m'), x.count('N') - x.count('n'), x.count('O') - x.count('o'), x.count('P') - x.count('p'), x.count('Q') - x.count('q'), x.count('R') - x.count('r'), x.count('S') - x.count('s'), x.count('T') - x.count('t'), x.count('U') - x.count('u'), x.count('V') - x.count('v'), x.count('W') - x.count('w'), x.count('X') - x.count('x'), x.count('Y') - x.count('y'), x.count('Z') - x.count('z'))[0])\n",
        "num_ids": 357
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    max_strength = 0\n    max_name = ''\n    for ext_name in extensions:\n        if isinstance(extensions[ext_name], str):\n            extension = extensions[ext_name]\n            if extension.isupper() + extension.islower() > max_strength:\n                max_strength = extension.isupper() + extension.islower()\n                max_name = extensions[ext_name]\n    return class_name + '.' + max_name\n",
        "num_ids": 111
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = class_name\n    for extension in extensions:\n        if extension[0].islower():\n            result += extension\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return any(\n        a in b\n        or (b[-1] == a[-1] and b[:-1] == a)\n        or (a == b[-1] and b == a[:-1])\n        for a in (\"abcd\",\"abd\")\n    )\n",
        "num_ids": 69
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a.find(b)!= -1:\n        return True\n    for i in range(len(a)-len(b)+1):\n        sub = a[i:i+len(b)]\n        if sub == b:\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    def check_rotation(word, word_rotation):\n        for i in range(len(word)):\n            if word_rotation == word[i:] + word[:i]:\n                return True\n        return False\n    return check_rotation(a, b) or check_rotation(b, a)\nprint(cycpattern_check(\"abcd\",\"abd\"))\nprint(cycpattern_check(\"hello\",\"ell\"))\nprint(cycpattern_check(\"whassup\",\"psus\"))\nprint(cycpattern_check(\"abab\",\"baa\"))\nprint(cycpattern_check(\"efef\",\"eeff\"))\nprint(cycpattern_check(\"himenss\",\"simen\")",
        "num_ids": 165
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a in b or any(b in s for s in a)\n",
        "num_ids": 18
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    return a in b or b in a\n",
        "num_ids": 11
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if len(a) < len(b):\n        return False\n    for i in range(len(a) - len(b) + 1):\n        if a[i:i + len(b)] == b:\n            return True\n    return False",
        "num_ids": 59
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return b in a or b in a[::-1]\n",
        "num_ids": 16
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return (b in a or b[:-1] in a or b[1:] in a or b[-1:] in a)\n",
        "num_ids": 32
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return (b in a or\n            a[len(a) - len(b) : ] in a or\n            a[:len(a) - len(b)] in a or\n            a[-len(b): ] in a or\n            a[:len(b) - 1] in a or\n            a[-len(b) + 1:] in a)\n",
        "num_ids": 87
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    for i in range(1,len(b)):\n        # print(b[:i])\n        if b[:i] in a:\n            return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return (len([x for x in str(num) if x.isdigit() and int(x) % 2 == 0]), len([x for x in str(num) if x.isdigit() and int(x) % 2 == 1]))\n",
        "num_ids": 60
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return tuple(int(d) for d in str(num) if int(d) % 2 == 0) + tuple(int(d) for d in str(num) if int(d) % 2!= 0)\n",
        "num_ids": 52
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    n = num\n    if (n > 0 and n % 2 == 0):\n        # even\n        return (1, 0)\n    elif (n > 0 and n % 2 == 1):\n        # odd\n        return (0, 1)\n    elif (n < 0):\n        # even\n        return (0, 0)\n    else:\n        # negative number\n        return (0, 0)\n",
        "num_ids": 97
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    # complete this function\n    even = 0\n    odd = 0\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n",
        "num_ids": 69
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    even = 0\n    odd = 0\n    num = str(num)\n    for digit in num:\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n",
        "num_ids": 60
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 10 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count\n",
        "num_ids": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return (len(num) % 2, len(num) // 2)\n",
        "num_ids": 19
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return len(num) % 2, len(num) // 2\n",
        "num_ids": 17
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if num == 0:\n        return (0, 0)\n    else:\n        return (even_odd_count(num // 10) + (num % 10 == 0))\n",
        "num_ids": 42
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    evens = 0\n    odds = 0\n    while num > 0:\n        if num % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n        num = num // 10\n    return (evens, odds)\n",
        "num_ids": 61
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # build a dictionary with keys corresponding to numbers\n    # and values being their Roman equivalents\n    roman_nums = {1: 'i', 2: 'ii', 3: 'iii', 4: 'iv', 5: 'v', 6: 'vi', 7: 'vii',\n                  8: 'viii', 9: 'ix', 10: 'x', 11: 'xi', 12: 'xii', 13: 'xiii',\n                  14: 'xiv', 15: 'xv', 16: 'xvi', 17: 'xvii', 18: 'xviii',\n                  19: 'xix', 20: 'xx', 30: 'xxx', 40: 'xxxx', 50: 'l',\n                  60: 'lx', 70: 'lxx', 80: 'lxxx', 90: 'lxxxx', 100: 'C',\n                  200: 'CC', 300: 'CCC', 400: 'CD', 500: 'D', 600: 'DC',\n                  700: 'DCC', 800: 'DCCC', 900: 'CM', 1000: 'M'}\n",
        "num_ids": 245
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    result = ''\n    thousand = 1000\n    hundred = 100\n    ten = 10\n    five = 5\n    four = 4\n    three = 3\n    two = 2\n    one = 1\n    roman = {\n        'i': one,\n        'x': five,\n        'c': four,\n        'l': two,\n        'n': five,\n        'v': seven,\n        'm': ten,\n        'f': four,\n        'p': five,\n        'h': eight,\n        'g': one,\n        'k': five,\n        'j': three,\n        'z': five,\n        'w': seven,\n        'y': seven,\n        'q': ten,\n        'q': nine,\n        'j': five,\n        'u': seven,\n        'x': five,\n        'x': one,\n        'a': one,\n        'b': seven,\n        'c': four,\n        'd': seven,\n        'e': seven,\n        'g': ten,\n        'i': one,\n        'p': five,\n        'r': five,\n        'u': seven,\n        'f': four,\n        'u': seven,\n        'a': one,\n        'k': five,\n        'h': eight,\n        'l': three,\n        'o': seven,\n        'n': five,\n        'p': ten,\n        'q': nine,\n        'r': five,\n        's': seven,\n        't': nine,\n        'w': seven,\n        'v': seven,\n        'y': nine,\n        'y': nine,\n        'x': one,\n        'z': five,\n        'f': seven,\n        'w': seven,\n        'b': seven,\n        'n': five,\n        'a': one,\n        'c': four,\n        'l': three,\n        'p': five,\n        'q': ten,\n        'k': five,\n        'j': three,\n        'x': five,\n        'g': one,\n        'z': five,\n        'w': seven,\n        'f': seven,\n        'g': one,\n        'l': three,\n        'v': seven,\n        'h': eight,\n        'u': seven,\n        'v': seven,\n        'z': five,\n        'u': seven,\n        'o': seven,\n        'n': five,\n        'a': one,\n        'l': three,\n        'i': one,\n        'e': seven,\n        'n': five,\n        'p': ten,\n        'k': five,\n        'c': four,\n        'g': one,\n        'p': ten,\n        'b': seven,\n        's': seven,\n        'n': five,\n        'a': one,\n        'r': five,\n        'p': ten,\n        'q': nine,\n        'r': five,\n        'h': eight,\n        'k': five,\n        'z': five,\n        'q': nine,\n        'p': ten,\n        'b': seven,\n        'l': three,\n        'c': four,\n        'b': seven,\n        's': seven,\n        'y': nine,\n        'u': seven,\n        'w': seven,\n        'n': five,\n        'a': one,\n        'v': seven,\n        'h': eight,\n        'b': seven,\n        'q': ten,\n        'e': seven,\n        'c': four,\n        'l': three,\n        'r': five,\n        'y': seven,\n        'u': seven,\n        'i': one,\n        'z': five,\n        'n': five,\n        'w': seven,\n        'a': one,\n        'q': ten,\n        'r': five,\n        'y': seven,\n        'c': four,\n        'p': five,\n        'v': seven,\n        'o': seven,\n        'b': seven,\n        'c': four,\n        'y': seven,\n        'w': seven,\n        'n': five,\n        'g': one,\n        'r': five,\n        'p': te",
        "num_ids": 1025
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    number_dict = {\n        1 : 'I', 2 : 'II', 3 : 'III', 4 : 'IV', 5 : 'V', 6 : 'VI', 7 : 'VII',\n        8 : 'VIII', 9 : 'IX', 10 : 'X', 11 : 'XI', 12 : 'XII', 13 : 'XIII',\n        14 : 'XIV', 15 : 'XV', 16 : 'XVI', 17 : 'XVII', 18 : 'XVIII',\n        19 : 'XIX', 20 : 'XX', 30 : 'XXX', 40 : 'XL', 50 : 'L',\n        60 : 'LX', 70 : 'LXX', 80 : 'LXXX', 90 : 'XC', 100 : 'C',\n        200 : 'CC', 300 : 'CCC', 400 : 'CD', 500 : 'D', 600 : 'DC',\n        700 : 'DCC', 800 : 'DCCC', 900 : 'CM', 1000 : 'M'}\n    roman_dict = {v : k for k, v in number_dict.items()}\n    roman_result = []\n    for i in range(1, number+1):\n        if i in roman_dict:\n            roman_result.append(roman_dict[i])\n        else:\n            if len(roman_result) == 0:\n                roman_result.append(number_dict[i])\n            else:\n                roman_result.append(number_dict[i-roman_result[-1]])\n    roman_result = ''.join(roman_result)\n    return roman_result\n",
        "num_ids": 368
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    roman = \"\"\n    for i in range(1, number + 1):\n        if i > 4:\n            roman = roman + \"d\"\n        elif i > 9:\n            roman = roman + \"l\"\n        else:\n            roman = roman + \"x\"\n",
        "num_ids": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    num_to_roman_map = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"l\",\n                        50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\",\n                        1000: \"m\", 3000: \"ml\", 3100: \"mc\", 4000: \"cdxiv\", 5000: \"dv\",\n                        4999: \"cdxvi\"}\n    roman_num = \"\"\n    while number > 0:\n        for key in num_to_roman_map:\n            if key <= number:\n                roman_num += num_to_roman_map[key]\n                number -= key\n                break\n    return roman_num.lower()\n",
        "num_ids": 183
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    assert number >= 1 and number <= 1000, 'Number out of range'\n",
        "num_ids": 18
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not isinstance(number, int) or number < 1:\n        raise ValueError(\"The parameter should be an integer and not less than one.\")\n    # This first if clause is to handle numbers that are < 10\n    if number < 10:\n        return _get_key_value_of_dict(ROMAN_INT_TO_MINI_ROMAN_DICT, number)[1]\n    else:\n        # This else clause is for numbers that are in range 10 to 1000\n        # Now we convert the integer to a list of integers where the first\n        # element in the list is the integer and second element in the list\n        # is the integer in the roman numeral equivalent\n        roman_numeral_list = list(ROMAN_INT_TO_MINI_ROMAN_DICT.keys())\n        roman_numeral_list.sort(reverse=True)\n        roman_numeral_list.insert(0, number)\n        # Now we build a list of the integers in roman numeral equivalent\n        # so we can iterate through them\n        roman_numeral_list.append(number)\n        roman_numeral_list.sort()\n        i = 0\n        new_roman_numeral_list = []\n        while i < len(roman_numeral_list) - 1:\n            new_roman_numeral_list.append(\n                _get_key_value_of_dict(ROMAN_INT_TO_MINI_ROMAN_DICT,\n                roman_numeral_list[i])[1])\n            i += 1\n        return ''.join(new_roman_numeral_list)\n",
        "num_ids": 377
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    values_of_letters = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000:'m',\n    }\n    res = ''\n    while number >= 1:\n        for i in range(1, 4):\n            if number >= i:\n                res += values_of_letters[i]\n                number -= i\n                break\n    return res\n",
        "num_ids": 115
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return ''.join(\n        [\n            get_value(n) for n in numeral_order(\n                number,\n                ROMAN_DIGITS_TABLE\n            )\n        ]\n    )\n",
        "num_ids": 50
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not isinstance(number, int):\n        raise TypeError('The number must be integer')\n    if number > 1000 or number < 1:\n        raise ValueError('The number must be in range 1 <= num <= 1000')\n    if number == 1:\n        return 'i'\n    if number == 2:\n        return 'ii'\n    if number == 3:\n        return 'iii'\n    if number == 4:\n        return 'iv'\n    if number == 5:\n        return 'v'\n    if number == 6:\n        return 'vi'\n    if number == 7:\n        return 'vii'\n    if number == 8:\n        return 'viii'\n    if number == 9:\n        return 'ix'\n    if number == 10:\n        return 'x'\n    if number == 11:\n        return 'xi'\n    if number == 12:\n        return 'xii'\n    if number == 13:\n        return 'xiii'\n    if number == 14:\n        return 'xiv'\n    if number == 15:\n        return 'xv'\n    if number == 16:\n        return 'xvi'\n    if number == 17:\n        return 'xvii'\n    if number == 18:\n        return 'xviii'\n    if number == 19:\n        return 'xix'\n    if number == 20:\n        return 'xx'\n    if number == 30:\n        return 'xxx'\n    if number == 40:\n        return 'xxxx'\n    if number == 50:\n        return 'xxxxx'\n    if number == 60:\n        return 'xxxxxx'\n    if number == 70:\n        return 'xxxxxxx'\n    if number == 80:\n        return 'xxxxxxxx'\n    if number == 90:\n        return 'xxxxxxxix'\n    if number == 100:\n        return 'xxxxxxx'\n    if number == 1000:\n        return 'xxxxxx'\n    return ''\n",
        "num_ids": 453
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    # Return true if a, b, and c are a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if a == b and a == c:\n        return False\n    elif a == b or a == c or b == c:\n        return True\n    else:\n        if (a**2) + (b**2) == (c**2):\n            return True\n        else:\n            return False\n",
        "num_ids": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2\n",
        "num_ids": 39
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if a**2 + b**2 == c**2:\n        if b**2 == c**2:\n            return False\n        elif a**2 == c**2:\n            return True\n        elif a**2 == b**2:\n            return True\n        elif a**2 == b**2 == c**2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if (a**2 + b**2 - c**2) > 0:\n        if (a**2 + b**2 - c**2) < 0:\n            if abs(a * b) == abs(a * c) and abs(a * b) == abs(b * c):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 97
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if a == b and b == c:\n        return False\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 69
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2:\n        return True\n    else:\n        return False\n    \ndef hypotenuse(a, b):\n    '''\n    Given the lengths of the two legs of a right-angled triangle. Return the\n    length of the hypotenuse.\n    Example:\n    hypotenuse(3, 4) == 5\n    hypotenuse(1, 2) == 2\n    '''\n    if a == b:\n        return a\n    else:\n        return sqrt(a**2 + b**2)\n",
        "num_ids": 158
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    # if not, the last condition must be satisfied\n    if not (a+b >= c) or not (a+c >= b) or not (b+c >= a):\n        return False\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    return False\n",
        "num_ids": 98
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return sorted(set(words), key=words.index)[0]\n",
        "num_ids": 18
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    max_char = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_char = len(set(word))\n        if unique_char > max_char:\n            max_char = unique_char\n            max_word = word\n    return max_word\n",
        "num_ids": 71
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    max_len = float('-inf')\n    max_char = None\n    for word in words:\n        count = Counter(word)\n        if len(word) > max_len:\n            max_len = len(word)\n            max_char = word\n        if len(word) == max_len and word not in words:\n            max_char = word\n    return max_char\n",
        "num_ids": 93
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_word = word\n            max_len = len(word)\n    return max_word\n",
        "num_ids": 57
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    max_chars = []\n    for i in words:\n        max_chars.append(len(i))\n    if max(max_chars) == 0:\n        return \"\"\n    return words[max_chars.index(max(max_chars))]\n",
        "num_ids": 66
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    #     Check if list is empty\n    if len(words) == 0:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    max = 0\n    for i in words:\n        d = len(set(i))\n        if d > max:\n            max = d\n            max_word = i\n    return max_word\n",
        "num_ids": 48
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if len(words) == 0:\n        return \"\"\n    char = []\n    for i in words:\n        char.append(len(i))\n    maxi = max(char)\n    \n    for i in range(len(words)):\n        if len(words[i]) == maxi:\n            return words[i]\n",
        "num_ids": 80
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    words = [x.lower() for x in words]\n    return sorted(words, key=lambda x: len(set(x)))[0]\n",
        "num_ids": 36
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    max_len = 0\n    max_str = ''\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_str = word\n    return max_str\n",
        "num_ids": 57
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    # Your code starts here!\n",
        "num_ids": 11
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    return eat_helper(number, need, remaining)\n",
        "num_ids": 15
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if number < need:\n        return [0, number + need - number]\n    else:\n        return [number - need, remaining]\n",
        "num_ids": 34
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    #precondition:\n    #number >= 0\n    #need >= 0\n    #remaining >= 0\n    \n    if number == 0:\n        return [0, remaining]\n    elif need >= remaining:\n        return [number, 0]\n    elif need > remaining:\n        return [need, remaining]\n    else:\n        return [number - need, remaining - need]\n",
        "num_ids": 91
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    # calculate the number of carrots you need to eat\n    # (total_number_of_carrots_eaten + number_of_carrots_eaten) * need + remaining - number_of_carrots_eaten\n    # (11 + 3) * 4 + 10 - 7 = 21\n    if number >= need:\n        return [number - need, need]\n    return [0, number]\n",
        "num_ids": 94
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if number < need:\n        return [0, need - number]\n    elif number >= need:\n        return [need - number, 0]\n",
        "num_ids": 36
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if need <= remaining:\n        return [number + (need-remaining), need - (need-remaining)]\n    else:\n        return[number, remaining]\n    \n    \n    ",
        "num_ids": 45
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    return [number + need, remaining - need]\n",
        "num_ids": 13
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return [number + need - remaining, need - need]\n",
        "num_ids": 15
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    # Your code here\n    if number == 0:\n        return number, 0\n    elif number < need:\n        number = number + remaining\n        return eat(number, need, remaining)\n    elif number == need:\n        return number, 0\n    else:\n        return eat(number - need, need, remaining)\n    \n",
        "num_ids": 79
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    \n    assert len(operator) == len(operand) - 1, \"operator list and operand list have different lengths\"\n    for i in range(len(operator)):\n        assert operator[i] in \"-+*/^\", \"operator[%d] is not a valid algebra operation\" % i\n    \n    # build the expression\n    result = operand[0]\n    for i in range(1, len(operand)):\n        # check if the operator is floor division\n        if operator[i-1] == \"/\" and operand[i]!= 0:\n            result = result // operand[i]\n        # check if the operator is exponentiation\n        elif operator[i-1] == \"^\" and operand[i]!= 0:\n            result = result ** operand[i]\n        # check if the operator is multiplication\n        elif operator[i-1] == \"*\":\n            result = result * operand[i]\n        # check if the operator is addition\n        elif operator[i-1] == \"+\":\n            result = result + operand[i]\n        # check if the operator is subtraction\n        elif operator[i-1] == \"-\":\n            result = result - operand[i]\n    \n    return result",
        "num_ids": 296
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    \n    # Write your code here\n    for x in operator:\n        if x in ['+', '-']:\n            return do_sum(operator, operand)\n        if x in ['*', '//', '**']:\n            return do_mul(operator, operand)\n    # result = operand[0]\n    # for i in range(1, len(operand)):\n    #     result = do_sum(operator, operand[:i])\n    # return result\n",
        "num_ids": 117
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    print(f\"Start to do algebra with operator: {operator}\")\n    print(f\"Start to do algebra with operand: {operand}\")\n",
        "num_ids": 37
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    raise NotImplementedError()\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    sum_exp = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            sum_exp = sum_exp + operand[i]\n        elif operator[i] == '-':\n            sum_exp = sum_exp - operand[i]\n        elif operator[i] == '*':\n            sum_exp = sum_exp * operand[i]\n        elif operator[i] == '/':\n            sum_exp = sum_exp / operand[i]\n        elif operator[i] == '^':\n            sum_exp = sum_exp ** operand[i]\n    return sum_exp\n",
        "num_ids": 159
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    ## Get the length of the two lists\n    l_operator = len(operator)\n    l_operand = len(operand)\n",
        "num_ids": 33
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if len(operator) > 1:\n        return do_algebra(operator[1:], algebric_operation(operator[0], operand)) + do_algebra(operator[1:], operand)\n    else:\n        return algebric_operation(operator[0], operand)\n",
        "num_ids": 73
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # TODO: Implement your algorithm here\n",
        "num_ids": 11
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    result = operand[0]\n    for i in range(1, len(operand)):\n        result = operator[i](result, operand[i])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    result = None\n    i = 0\n    while i < len(operator):\n        if operator[i] == '+':\n            result = operand[0] + operand[1]\n        elif operator[i] == '-':\n            result = operand[0] - operand[1]\n        elif operator[i] == '*':\n            result = operand[0] * operand[1]\n        elif operator[i] == '/':\n            result = operand[0] // operand[1]\n        elif operator[i] == '**':\n            result = operand[0] ** operand[1]\n        i += 1\n    return result\n",
        "num_ids": 162
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if not s:\n        return s\n    if re.match(r\"[a-z]\", s):\n        s = s[::-1]\n        return s\n    else:\n        return s[::-1]\n",
        "num_ids": 54
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if len(s) == 0: return s\n    \n    arr = list(s)\n    for i in range(len(arr)):\n        if s[i].isalpha():\n            arr[i] = s[i].swapcase()\n        else:\n            arr[i] = s[i]\n    return \"\".join(arr)\n",
        "num_ids": 84
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    result = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            result += s[i]\n    return result\n    \nsolve('1234')\nsolve('ab')\nsolve('#a@C'",
        "num_ids": 101
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if len(s) == 0:\n        return s\n    else:\n        if s[0].isalpha():\n            if s[0].isupper():\n                return solve(s[1:]) + s[0].lower()\n            else:\n                return solve(s[1:]) + s[0].upper()\n        else:\n            return solve(s[1:]) + s[0]\n",
        "num_ids": 96
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    result = ''\n    if not s:\n        return result\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].upper() if s[i].islower() else s[i].lower()\n        else:\n            result += s[i]\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return \"\".join(result)\n",
        "num_ids": 74
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    s = ''.join(reversed(s) if s.isalpha() else s)\n    return s if not s.isalpha() else solve(s)\n",
        "num_ids": 40
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    s = s.lower()\n    if not s:\n        return s\n    l = []\n    for i in s:\n        if i.isalpha():\n            l.append(i.upper()) if i.islower() else l.append(i.lower())\n        else:\n            l.append(i)\n    return \"\".join(l)\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids": 111
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    res = []\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                res.append(i.upper())\n            else:\n                res.append(i.lower())\n        else:\n            res.append(i)\n    return ''.join(res)",
        "num_ids": 73
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    if len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    hash_obj = hashlib.md5()\n    if text:\n        hash_obj.update(text.encode('utf-8'))\n        return hash_obj.hexdigest()\n    else:\n        return None\n",
        "num_ids": 55
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    if not text:\n        return None\n    else:\n        return md5(text.encode()).hexdigest()",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n",
        "num_ids": 35
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    if not text:\n        return None\n",
        "num_ids": 11
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "    return list(range(a, b + 1, 2))\n",
        "num_ids": 16
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "    #print(a, b)\n    #print(int(str(a)[2:]) + 1)\n    return list(range(int(str(a)[2:]) + 1, b + 1))\n    \n",
        "num_ids": 52
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "    i = a\n    while i <= b:\n        if i % 2 == 0:\n            yield i\n        i += 1\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "    integers = range(a, b + 1)\n    even_integers = []\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "    result = []\n",
        "num_ids": 6
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "    return [i for i in range(a, b + 1) if i % 2 == 0]\n",
        "num_ids": 24
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "    return sorted(range(a, b, 2))\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "    # base case\n    if a == b:\n        return []\n    if a > b:\n        a, b = b, a\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "    return list(range(a, b, 2))\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "    #return list(range(a, b + 1, 2))\n    return list(range(a, b + 1, 2))\n",
        "num_ids": 32
    }
]